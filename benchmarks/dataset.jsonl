{"input": "Convert this to C++:\n; ModuleID = '../../Human_xBenchmarks_164/CPP_0/CPP_0.cpp'\nsource_filename = \"../../Human_xBenchmarks_164/CPP_0/CPP_0.cpp\"\ntarget datalayout = \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\ntarget triple = \"x86_64-unknown-linux-gnu\"\n\n%\"class.std::vector\" = type { %\"struct.std::_Vector_base\" }\n%\"struct.std::_Vector_base\" = type { %\"struct.std::_Vector_base<float, std::allocator<float>>::_Vector_impl\" }\n%\"struct.std::_Vector_base<float, std::allocator<float>>::_Vector_impl\" = type { %\"struct.std::_Vector_base<float, std::allocator<float>>::_Vector_impl_data\" }\n%\"struct.std::_Vector_base<float, std::allocator<float>>::_Vector_impl_data\" = type { float*, float*, float* }\n\n; Function Attrs: mustprogress nofree nosync nounwind readonly uwtable willreturn\ndefine dso_local zeroext i1 @_Z18has_close_elementsSt6vectorIfSaIfEEf(%\"class.std::vector\"* nocapture readonly %0, float %1) local_unnamed_addr #0 {\n  %3 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0, i64 0, i32 0, i32 0, i32 0, i32 1\n  %4 = load float*, float** %3, align 8, !tbaa !3\n  %5 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0, i64 0, i32 0, i32 0, i32 0, i32 0\n  %6 = load float*, float** %5, align 8, !tbaa !8\n  %7 = ptrtoint float* %4 to i64\n  %8 = ptrtoint float* %6 to i64\n  %9 = sub i64 %7, %8\n  %10 = ashr exact i64 %9, 2\n  %11 = icmp eq i64 %9, 0\n  br i1 %11, label %36, label %12\n\n12:                                               ; preds = %2\n  %13 = call i64 @llvm.umax.i64(i64 %10, i64 1)\n  br label %17\n\n14:                                               ; preds = %26, %17\n  %15 = add i64 %19, 1\n  %16 = icmp eq i64 %21, %13\n  br i1 %16, label %36, label %17, !llvm.loop !9\n\n17:                                               ; preds = %12, %14\n  %18 = phi i64 [ 0, %12 ], [ %21, %14 ]\n  %19 = phi i64 [ 1, %12 ], [ %15, %14 ]\n  %20 = phi i1 [ true, %12 ], [ %22, %14 ]\n  %21 = add nuw i64 %18, 1\n  %22 = icmp ugt i64 %10, %21\n  br i1 %22, label %23, label %14\n\n23:                                               ; preds = %17\n  %24 = getelementptr inbounds float, float* %6, i64 %18\n  %25 = load float, float* %24, align 4, !tbaa !11\n  br label %28\n\n26:                                               ; preds = %28\n  %27 = icmp ugt i64 %10, %35\n  br i1 %27, label %28, label %14, !llvm.loop !13\n\n28:                                               ; preds = %23, %26\n  %29 = phi i64 [ %19, %23 ], [ %35, %26 ]\n  %30 = getelementptr inbounds float, float* %6, i64 %29\n  %31 = load float, float* %30, align 4, !tbaa !11\n  %32 = fsub float %25, %31\n  %33 = tail call float @llvm.fabs.f32(float %32) #3\n  %34 = fcmp olt float %33, %1\n  %35 = add i64 %29, 1\n  br i1 %34, label %36, label %26\n\n36:                                               ; preds = %14, %28, %2\n  %37 = phi i1 [ false, %2 ], [ %20, %28 ], [ %22, %14 ]\n  ret i1 %37\n}\n\n; Function Attrs: mustprogress nofree nosync nounwind readnone speculatable willreturn\ndeclare float @llvm.fabs.f32(float) #1\n\n; Function Attrs: nofree nosync nounwind readnone speculatable willreturn\ndeclare i64 @llvm.umax.i64(i64, i64) #2\n\nattributes #0 = { mustprogress nofree nosync nounwind readonly uwtable willreturn \"frame-pointer\"=\"none\" \"min-legal-vector-width\"=\"0\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #1 = { mustprogress nofree nosync nounwind readnone speculatable willreturn }\nattributes #2 = { nofree nosync nounwind readnone speculatable willreturn }\nattributes #3 = { nounwind }\n\n!llvm.module.flags = !{!0, !1}\n!llvm.ident = !{!2}\n\n!0 = !{i32 1, !\"wchar_size\", i32 4}\n!1 = !{i32 7, !\"uwtable\", i32 1}\n!2 = !{!\"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)\"}\n!3 = !{!4, !5, i64 8}\n!4 = !{!\"_ZTSNSt12_Vector_baseIfSaIfEE17_Vector_impl_dataE\", !5, i64 0, !5, i64 8, !5, i64 16}\n!5 = !{!\"any pointer\", !6, i64 0}\n!6 = !{!\"omnipotent char\", !7, i64 0}\n!7 = !{!\"Simple C++ TBAA\"}\n!8 = !{!4, !5, i64 0}\n!9 = distinct !{!9, !10}\n!10 = !{!\"llvm.loop.mustprogress\"}\n!11 = !{!12, !12, i64 0}\n!12 = !{!\"float\", !6, i64 0}\n!13 = distinct !{!13, !10}\n", "target": "This is the targeted source code:\n/*\nCheck if in given vector of numbers, are any two numbers closer to each other than\ngiven threshold.\n>>> has_close_elements({1.0, 2.0, 3.0}, 0.5)\nfalse\n>>> has_close_elements({1.0, 2.8, 3.0, 4.0, 5.0, 2.0}, 0.3)\ntrue\n*/\n#include<stdio.h>\n#include<vector>\n#include<math.h>\nusing namespace std;\nbool has_close_elements(vector<float> numbers, float threshold){\n\n    int i,j;\n    \n    for (i=0;i<numbers.size();i++)\n    for (j=i+1;j<numbers.size();j++)\n    if (abs(numbers[i]-numbers[j])<threshold)\n    return true;\n\n    return false;\n}\n\n"}
{"input": "Convert this to C++:\n; ModuleID = '../../Human_xBenchmarks_164/CPP_1/CPP_1.cpp'\nsource_filename = \"../../Human_xBenchmarks_164/CPP_1/CPP_1.cpp\"\ntarget datalayout = \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\ntarget triple = \"x86_64-unknown-linux-gnu\"\n\n%\"class.std::vector\" = type { %\"struct.std::_Vector_base\" }\n%\"struct.std::_Vector_base\" = type { %\"struct.std::_Vector_base<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char>>>::_Vector_impl\" }\n%\"struct.std::_Vector_base<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char>>>::_Vector_impl\" = type { %\"struct.std::_Vector_base<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char>>>::_Vector_impl_data\" }\n%\"struct.std::_Vector_base<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char>>>::_Vector_impl_data\" = type { %\"class.std::__cxx11::basic_string\"*, %\"class.std::__cxx11::basic_string\"*, %\"class.std::__cxx11::basic_string\"* }\n%\"class.std::__cxx11::basic_string\" = type { %\"struct.std::__cxx11::basic_string<char>::_Alloc_hider\", i64, %union.anon }\n%\"struct.std::__cxx11::basic_string<char>::_Alloc_hider\" = type { i8* }\n%union.anon = type { i64, [8 x i8] }\n\n$_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED2Ev = comdat any\n\n$__clang_call_terminate = comdat any\n\n$_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_realloc_insertIJRKS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_ = comdat any\n\n@.str = private unnamed_addr constant [1 x i8] zeroinitializer, align 1\n@.str.2 = private unnamed_addr constant [26 x i8] c\"vector::_M_realloc_insert\\00\", align 1\n\n; Function Attrs: uwtable\ndefine dso_local void @_Z21separate_paren_groupsNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE(%\"class.std::vector\"* noalias sret(%\"class.std::vector\") align 8 %0, %\"class.std::__cxx11::basic_string\"* nocapture readonly %1) local_unnamed_addr #0 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {\n  %3 = alloca i64, align 8\n  %4 = alloca %\"class.std::__cxx11::basic_string\", align 8\n  %5 = bitcast %\"class.std::vector\"* %0 to i8*\n  tail call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(24) %5, i8 0, i64 24, i1 false) #10\n  %6 = bitcast %\"class.std::__cxx11::basic_string\"* %4 to i8*\n  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %6) #10\n  %7 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %4, i64 0, i32 2\n  %8 = bitcast %\"class.std::__cxx11::basic_string\"* %4 to %union.anon**\n  store %union.anon* %7, %union.anon** %8, align 8, !tbaa !3\n  %9 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %4, i64 0, i32 1\n  store i64 0, i64* %9, align 8, !tbaa !8\n  %10 = bitcast %union.anon* %7 to i8*\n  store i8 0, i8* %10, align 8, !tbaa !11\n  %11 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %1, i64 0, i32 1\n  %12 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %1, i64 0, i32 0, i32 0\n  %13 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %4, i64 0, i32 0, i32 0\n  %14 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %4, i64 0, i32 2, i32 0\n  %15 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0, i64 0, i32 0, i32 0, i32 0, i32 1\n  %16 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0, i64 0, i32 0, i32 0, i32 0, i32 2\n  %17 = bitcast i64* %3 to i8*\n  %18 = load i64, i64* %11, align 8, !tbaa !8\n  %19 = icmp eq i64 %18, 0\n  br i1 %19, label %111, label %20\n\n20:                                               ; preds = %2, %102\n  %21 = phi i64 [ %104, %102 ], [ 0, %2 ]\n  %22 = phi i32 [ %103, %102 ], [ 0, %2 ]\n  %23 = load i8*, i8** %12, align 8, !tbaa !12\n  %24 = getelementptr inbounds i8, i8* %23, i64 %21\n  %25 = load i8, i8* %24, align 1, !tbaa !11\n  switch i8 %25, label %102 [\n    i8 40, label %26\n    i8 41, label %49\n  ]\n\n26:                                               ; preds = %20\n  %27 = add nsw i32 %22, 1\n  %28 = load i64, i64* %9, align 8, !tbaa !8\n  %29 = add i64 %28, 1\n  %30 = load i8*, i8** %13, align 8, !tbaa !12\n  %31 = icmp eq i8* %30, %10\n  %32 = load i64, i64* %14, align 8\n  %33 = select i1 %31, i64 15, i64 %32\n  %34 = icmp ugt i64 %29, %33\n  br i1 %34, label %35, label %38\n\n35:                                               ; preds = %26\n  invoke void @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEmmPKcm(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %4, i64 %28, i64 0, i8* null, i64 1)\n          to label %36 unwind label %43\n\n36:                                               ; preds = %35\n  %37 = load i8*, i8** %13, align 8, !tbaa !12\n  br label %38\n\n38:                                               ; preds = %36, %26\n  %39 = phi i8* [ %37, %36 ], [ %30, %26 ]\n  %40 = getelementptr inbounds i8, i8* %39, i64 %28\n  store i8 40, i8* %40, align 1, !tbaa !11\n  store i64 %29, i64* %9, align 8, !tbaa !8\n  %41 = load i8*, i8** %13, align 8, !tbaa !12\n  %42 = getelementptr inbounds i8, i8* %41, i64 %29\n  store i8 0, i8* %42, align 1, !tbaa !11\n  br label %102\n\n43:                                               ; preds = %99, %98, %79, %58, %35\n  %44 = landingpad { i8*, i32 }\n          cleanup\n  %45 = load i8*, i8** %13, align 8, !tbaa !12\n  %46 = icmp eq i8* %45, %10\n  br i1 %46, label %48, label %47\n\n47:                                               ; preds = %43\n  call void @_ZdlPv(i8* %45) #10\n  br label %48\n\n48:                                               ; preds = %43, %47\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %6) #10\n  call void @_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED2Ev(%\"class.std::vector\"* nonnull align 8 dereferenceable(24) %0) #10\n  resume { i8*, i32 } %44\n\n49:                                               ; preds = %20\n  %50 = add nsw i32 %22, -1\n  %51 = load i64, i64* %9, align 8, !tbaa !8\n  %52 = add i64 %51, 1\n  %53 = load i8*, i8** %13, align 8, !tbaa !12\n  %54 = icmp eq i8* %53, %10\n  %55 = load i64, i64* %14, align 8\n  %56 = select i1 %54, i64 15, i64 %55\n  %57 = icmp ugt i64 %52, %56\n  br i1 %57, label %58, label %61\n\n58:                                               ; preds = %49\n  invoke void @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEmmPKcm(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %4, i64 %51, i64 0, i8* null, i64 1)\n          to label %59 unwind label %43\n\n59:                                               ; preds = %58\n  %60 = load i8*, i8** %13, align 8, !tbaa !12\n  br label %61\n\n61:                                               ; preds = %59, %49\n  %62 = phi i8* [ %60, %59 ], [ %53, %49 ]\n  %63 = getelementptr inbounds i8, i8* %62, i64 %51\n  store i8 41, i8* %63, align 1, !tbaa !11\n  store i64 %52, i64* %9, align 8, !tbaa !8\n  %64 = load i8*, i8** %13, align 8, !tbaa !12\n  %65 = getelementptr inbounds i8, i8* %64, i64 %52\n  store i8 0, i8* %65, align 1, !tbaa !11\n  %66 = icmp eq i32 %50, 0\n  br i1 %66, label %67, label %102\n\n67:                                               ; preds = %61\n  %68 = load %\"class.std::__cxx11::basic_string\"*, %\"class.std::__cxx11::basic_string\"** %15, align 8, !tbaa !13\n  %69 = load %\"class.std::__cxx11::basic_string\"*, %\"class.std::__cxx11::basic_string\"** %16, align 8, !tbaa !15\n  %70 = icmp eq %\"class.std::__cxx11::basic_string\"* %68, %69\n  br i1 %70, label %98, label %71\n\n71:                                               ; preds = %67\n  %72 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %68, i64 0, i32 2\n  %73 = bitcast %\"class.std::__cxx11::basic_string\"* %68 to %union.anon**\n  store %union.anon* %72, %union.anon** %73, align 8, !tbaa !3\n  %74 = load i8*, i8** %13, align 8, !tbaa !12\n  %75 = load i64, i64* %9, align 8, !tbaa !8\n  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %17) #10\n  store i64 %75, i64* %3, align 8, !tbaa !16\n  %76 = icmp ugt i64 %75, 15\n  br i1 %76, label %79, label %77\n\n77:                                               ; preds = %71\n  %78 = bitcast %union.anon* %72 to i8*\n  br label %85\n\n79:                                               ; preds = %71\n  %80 = invoke i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %68, i64* nonnull align 8 dereferenceable(8) %3, i64 0)\n          to label %81 unwind label %43\n\n81:                                               ; preds = %79\n  %82 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %68, i64 0, i32 0, i32 0\n  store i8* %80, i8** %82, align 8, !tbaa !12\n  %83 = load i64, i64* %3, align 8, !tbaa !16\n  %84 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %68, i64 0, i32 2, i32 0\n  store i64 %83, i64* %84, align 8, !tbaa !11\n  br label %85\n\n85:                                               ; preds = %81, %77\n  %86 = phi i8* [ %78, %77 ], [ %80, %81 ]\n  switch i64 %75, label %89 [\n    i64 1, label %87\n    i64 0, label %90\n  ]\n\n87:                                               ; preds = %85\n  %88 = load i8, i8* %74, align 1, !tbaa !11\n  store i8 %88, i8* %86, align 1, !tbaa !11\n  br label %90\n\n89:                                               ; preds = %85\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %86, i8* align 1 %74, i64 %75, i1 false) #10\n  br label %90\n\n90:                                               ; preds = %89, %87, %85\n  %91 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %68, i64 0, i32 0, i32 0\n  %92 = load i64, i64* %3, align 8, !tbaa !16\n  %93 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %68, i64 0, i32 1\n  store i64 %92, i64* %93, align 8, !tbaa !8\n  %94 = load i8*, i8** %91, align 8, !tbaa !12\n  %95 = getelementptr inbounds i8, i8* %94, i64 %92\n  store i8 0, i8* %95, align 1, !tbaa !11\n  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %17) #10\n  %96 = load %\"class.std::__cxx11::basic_string\"*, %\"class.std::__cxx11::basic_string\"** %15, align 8, !tbaa !13\n  %97 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %96, i64 1\n  store %\"class.std::__cxx11::basic_string\"* %97, %\"class.std::__cxx11::basic_string\"** %15, align 8, !tbaa !13\n  br label %99\n\n98:                                               ; preds = %67\n  invoke void @_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_realloc_insertIJRKS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_(%\"class.std::vector\"* nonnull align 8 dereferenceable(24) %0, %\"class.std::__cxx11::basic_string\"* %68, %\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %4)\n          to label %99 unwind label %43\n\n99:                                               ; preds = %90, %98\n  %100 = load i64, i64* %9, align 8, !tbaa !8\n  %101 = invoke nonnull align 8 dereferenceable(32) %\"class.std::__cxx11::basic_string\"* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %4, i64 0, i64 %100, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str, i64 0, i64 0), i64 0)\n          to label %102 unwind label %43\n\n102:                                              ; preds = %20, %99, %38, %61\n  %103 = phi i32 [ %50, %61 ], [ %27, %38 ], [ 0, %99 ], [ %22, %20 ]\n  %104 = add nuw i64 %21, 1\n  %105 = load i64, i64* %11, align 8, !tbaa !8\n  %106 = icmp ugt i64 %105, %104\n  br i1 %106, label %20, label %107, !llvm.loop !17\n\n107:                                              ; preds = %102\n  %108 = load i8*, i8** %13, align 8, !tbaa !12\n  %109 = icmp eq i8* %108, %10\n  br i1 %109, label %111, label %110\n\n110:                                              ; preds = %107\n  call void @_ZdlPv(i8* %108) #10\n  br label %111\n\n111:                                              ; preds = %2, %107, %110\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %6) #10\n  ret void\n}\n\n; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn\ndeclare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1\n\ndeclare dso_local i32 @__gxx_personality_v0(...)\n\n; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn\ndeclare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1\n\n; Function Attrs: nounwind uwtable\ndefine linkonce_odr dso_local void @_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED2Ev(%\"class.std::vector\"* nonnull align 8 dereferenceable(24) %0) unnamed_addr #2 comdat align 2 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {\n  %2 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0, i64 0, i32 0, i32 0, i32 0, i32 0\n  %3 = load %\"class.std::__cxx11::basic_string\"*, %\"class.std::__cxx11::basic_string\"** %2, align 8, !tbaa !19\n  %4 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0, i64 0, i32 0, i32 0, i32 0, i32 1\n  %5 = load %\"class.std::__cxx11::basic_string\"*, %\"class.std::__cxx11::basic_string\"** %4, align 8, !tbaa !13\n  %6 = icmp eq %\"class.std::__cxx11::basic_string\"* %3, %5\n  br i1 %6, label %20, label %7\n\n7:                                                ; preds = %1, %15\n  %8 = phi %\"class.std::__cxx11::basic_string\"* [ %16, %15 ], [ %3, %1 ]\n  %9 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %8, i64 0, i32 0, i32 0\n  %10 = load i8*, i8** %9, align 8, !tbaa !12\n  %11 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %8, i64 0, i32 2\n  %12 = bitcast %union.anon* %11 to i8*\n  %13 = icmp eq i8* %10, %12\n  br i1 %13, label %15, label %14\n\n14:                                               ; preds = %7\n  tail call void @_ZdlPv(i8* %10) #10\n  br label %15\n\n15:                                               ; preds = %14, %7\n  %16 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %8, i64 1\n  %17 = icmp eq %\"class.std::__cxx11::basic_string\"* %16, %5\n  br i1 %17, label %18, label %7, !llvm.loop !20\n\n18:                                               ; preds = %15\n  %19 = load %\"class.std::__cxx11::basic_string\"*, %\"class.std::__cxx11::basic_string\"** %2, align 8, !tbaa !19\n  br label %20\n\n20:                                               ; preds = %18, %1\n  %21 = phi %\"class.std::__cxx11::basic_string\"* [ %19, %18 ], [ %3, %1 ]\n  %22 = icmp eq %\"class.std::__cxx11::basic_string\"* %21, null\n  br i1 %22, label %25, label %23\n\n23:                                               ; preds = %20\n  %24 = bitcast %\"class.std::__cxx11::basic_string\"* %21 to i8*\n  tail call void @_ZdlPv(i8* nonnull %24) #10\n  br label %25\n\n25:                                               ; preds = %20, %23\n  ret void\n}\n\n; Function Attrs: noinline noreturn nounwind\ndefine linkonce_odr hidden void @__clang_call_terminate(i8* %0) local_unnamed_addr #3 comdat {\n  %2 = tail call i8* @__cxa_begin_catch(i8* %0) #10\n  tail call void @_ZSt9terminatev() #11\n  unreachable\n}\n\ndeclare dso_local i8* @__cxa_begin_catch(i8*) local_unnamed_addr\n\ndeclare dso_local void @_ZSt9terminatev() local_unnamed_addr\n\n; Function Attrs: nobuiltin nounwind\ndeclare dso_local void @_ZdlPv(i8*) local_unnamed_addr #4\n\ndeclare dso_local void @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEmmPKcm(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32), i64, i64, i8*, i64) local_unnamed_addr #5\n\n; Function Attrs: uwtable\ndefine linkonce_odr dso_local void @_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_realloc_insertIJRKS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_(%\"class.std::vector\"* nonnull align 8 dereferenceable(24) %0, %\"class.std::__cxx11::basic_string\"* %1, %\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %2) local_unnamed_addr #0 comdat align 2 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {\n  %4 = alloca i64, align 8\n  %5 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0, i64 0, i32 0, i32 0, i32 0, i32 1\n  %6 = load %\"class.std::__cxx11::basic_string\"*, %\"class.std::__cxx11::basic_string\"** %5, align 8, !tbaa !13\n  %7 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0, i64 0, i32 0, i32 0, i32 0, i32 0\n  %8 = load %\"class.std::__cxx11::basic_string\"*, %\"class.std::__cxx11::basic_string\"** %7, align 8, !tbaa !19\n  %9 = ptrtoint %\"class.std::__cxx11::basic_string\"* %6 to i64\n  %10 = ptrtoint %\"class.std::__cxx11::basic_string\"* %8 to i64\n  %11 = sub i64 %9, %10\n  %12 = ashr exact i64 %11, 5\n  %13 = icmp eq i64 %11, 9223372036854775776\n  br i1 %13, label %14, label %15\n\n14:                                               ; preds = %3\n  tail call void @_ZSt20__throw_length_errorPKc(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.2, i64 0, i64 0)) #12\n  unreachable\n\n15:                                               ; preds = %3\n  %16 = icmp eq i64 %11, 0\n  %17 = select i1 %16, i64 1, i64 %12\n  %18 = add nsw i64 %17, %12\n  %19 = icmp ult i64 %18, %12\n  %20 = icmp ugt i64 %18, 288230376151711743\n  %21 = or i1 %19, %20\n  %22 = select i1 %21, i64 288230376151711743, i64 %18\n  %23 = ptrtoint %\"class.std::__cxx11::basic_string\"* %1 to i64\n  %24 = sub i64 %23, %10\n  %25 = ashr exact i64 %24, 5\n  %26 = icmp eq i64 %22, 0\n  br i1 %26, label %31, label %27\n\n27:                                               ; preds = %15\n  %28 = shl nuw nsw i64 %22, 5\n  %29 = tail call noalias nonnull i8* @_Znwm(i64 %28) #13\n  %30 = bitcast i8* %29 to %\"class.std::__cxx11::basic_string\"*\n  br label %31\n\n31:                                               ; preds = %15, %27\n  %32 = phi %\"class.std::__cxx11::basic_string\"* [ %30, %27 ], [ null, %15 ]\n  %33 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %32, i64 %25\n  %34 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %32, i64 %25, i32 2\n  %35 = bitcast %\"class.std::__cxx11::basic_string\"* %33 to %union.anon**\n  store %union.anon* %34, %union.anon** %35, align 8, !tbaa !3\n  %36 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %2, i64 0, i32 0, i32 0\n  %37 = load i8*, i8** %36, align 8, !tbaa !12\n  %38 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %2, i64 0, i32 1\n  %39 = load i64, i64* %38, align 8, !tbaa !8\n  %40 = bitcast i64* %4 to i8*\n  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %40) #10\n  store i64 %39, i64* %4, align 8, !tbaa !16\n  %41 = icmp ugt i64 %39, 15\n  br i1 %41, label %44, label %42\n\n42:                                               ; preds = %31\n  %43 = bitcast %union.anon* %34 to i8*\n  br label %50\n\n44:                                               ; preds = %31\n  %45 = invoke i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %33, i64* nonnull align 8 dereferenceable(8) %4, i64 0)\n          to label %46 unwind label %126\n\n46:                                               ; preds = %44\n  %47 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %33, i64 0, i32 0, i32 0\n  store i8* %45, i8** %47, align 8, !tbaa !12\n  %48 = load i64, i64* %4, align 8, !tbaa !16\n  %49 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %32, i64 %25, i32 2, i32 0\n  store i64 %48, i64* %49, align 8, !tbaa !11\n  br label %50\n\n50:                                               ; preds = %46, %42\n  %51 = phi i8* [ %43, %42 ], [ %45, %46 ]\n  switch i64 %39, label %54 [\n    i64 1, label %52\n    i64 0, label %55\n  ]\n\n52:                                               ; preds = %50\n  %53 = load i8, i8* %37, align 1, !tbaa !11\n  store i8 %53, i8* %51, align 1, !tbaa !11\n  br label %55\n\n54:                                               ; preds = %50\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %51, i8* align 1 %37, i64 %39, i1 false) #10\n  br label %55\n\n55:                                               ; preds = %54, %52, %50\n  %56 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %33, i64 0, i32 0, i32 0\n  %57 = load i64, i64* %4, align 8, !tbaa !16\n  %58 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %32, i64 %25, i32 1\n  store i64 %57, i64* %58, align 8, !tbaa !8\n  %59 = load i8*, i8** %56, align 8, !tbaa !12\n  %60 = getelementptr inbounds i8, i8* %59, i64 %57\n  store i8 0, i8* %60, align 1, !tbaa !11\n  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %40) #10\n  %61 = icmp eq %\"class.std::__cxx11::basic_string\"* %8, %1\n  br i1 %61, label %87, label %62\n\n62:                                               ; preds = %55, %79\n  %63 = phi %\"class.std::__cxx11::basic_string\"* [ %85, %79 ], [ %32, %55 ]\n  %64 = phi %\"class.std::__cxx11::basic_string\"* [ %84, %79 ], [ %8, %55 ]\n  %65 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %63, i64 0, i32 2\n  %66 = bitcast %\"class.std::__cxx11::basic_string\"* %63 to %union.anon**\n  store %union.anon* %65, %union.anon** %66, align 8, !tbaa !3\n  %67 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %64, i64 0, i32 0, i32 0\n  %68 = load i8*, i8** %67, align 8, !tbaa !12\n  %69 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %64, i64 0, i32 2\n  %70 = bitcast %union.anon* %69 to i8*\n  %71 = icmp eq i8* %68, %70\n  br i1 %71, label %72, label %74\n\n72:                                               ; preds = %62\n  %73 = bitcast %union.anon* %65 to i8*\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(16) %73, i8* noundef nonnull align 8 dereferenceable(16) %68, i64 16, i1 false) #10\n  br label %79\n\n74:                                               ; preds = %62\n  %75 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %63, i64 0, i32 0, i32 0\n  store i8* %68, i8** %75, align 8, !tbaa !12\n  %76 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %64, i64 0, i32 2, i32 0\n  %77 = load i64, i64* %76, align 8, !tbaa !11\n  %78 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %63, i64 0, i32 2, i32 0\n  store i64 %77, i64* %78, align 8, !tbaa !11\n  br label %79\n\n79:                                               ; preds = %74, %72\n  %80 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %64, i64 0, i32 1\n  %81 = load i64, i64* %80, align 8, !tbaa !8\n  %82 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %63, i64 0, i32 1\n  store i64 %81, i64* %82, align 8, !tbaa !8\n  %83 = bitcast %\"class.std::__cxx11::basic_string\"* %64 to %union.anon**\n  store %union.anon* %69, %union.anon** %83, align 8, !tbaa !12\n  store i64 0, i64* %80, align 8, !tbaa !8\n  store i8 0, i8* %70, align 8, !tbaa !11\n  %84 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %64, i64 1\n  %85 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %63, i64 1\n  %86 = icmp eq %\"class.std::__cxx11::basic_string\"* %84, %1\n  br i1 %86, label %87, label %62, !llvm.loop !21\n\n87:                                               ; preds = %79, %55\n  %88 = phi %\"class.std::__cxx11::basic_string\"* [ %32, %55 ], [ %85, %79 ]\n  %89 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %88, i64 1\n  %90 = icmp eq %\"class.std::__cxx11::basic_string\"* %6, %1\n  br i1 %90, label %116, label %91\n\n91:                                               ; preds = %87, %108\n  %92 = phi %\"class.std::__cxx11::basic_string\"* [ %114, %108 ], [ %89, %87 ]\n  %93 = phi %\"class.std::__cxx11::basic_string\"* [ %113, %108 ], [ %1, %87 ]\n  %94 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %92, i64 0, i32 2\n  %95 = bitcast %\"class.std::__cxx11::basic_string\"* %92 to %union.anon**\n  store %union.anon* %94, %union.anon** %95, align 8, !tbaa !3\n  %96 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %93, i64 0, i32 0, i32 0\n  %97 = load i8*, i8** %96, align 8, !tbaa !12\n  %98 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %93, i64 0, i32 2\n  %99 = bitcast %union.anon* %98 to i8*\n  %100 = icmp eq i8* %97, %99\n  br i1 %100, label %101, label %103\n\n101:                                              ; preds = %91\n  %102 = bitcast %union.anon* %94 to i8*\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(16) %102, i8* noundef nonnull align 8 dereferenceable(16) %97, i64 16, i1 false) #10\n  br label %108\n\n103:                                              ; preds = %91\n  %104 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %92, i64 0, i32 0, i32 0\n  store i8* %97, i8** %104, align 8, !tbaa !12\n  %105 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %93, i64 0, i32 2, i32 0\n  %106 = load i64, i64* %105, align 8, !tbaa !11\n  %107 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %92, i64 0, i32 2, i32 0\n  store i64 %106, i64* %107, align 8, !tbaa !11\n  br label %108\n\n108:                                              ; preds = %103, %101\n  %109 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %93, i64 0, i32 1\n  %110 = load i64, i64* %109, align 8, !tbaa !8\n  %111 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %92, i64 0, i32 1\n  store i64 %110, i64* %111, align 8, !tbaa !8\n  %112 = bitcast %\"class.std::__cxx11::basic_string\"* %93 to %union.anon**\n  store %union.anon* %98, %union.anon** %112, align 8, !tbaa !12\n  store i64 0, i64* %109, align 8, !tbaa !8\n  store i8 0, i8* %99, align 8, !tbaa !11\n  %113 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %93, i64 1\n  %114 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %92, i64 1\n  %115 = icmp eq %\"class.std::__cxx11::basic_string\"* %113, %6\n  br i1 %115, label %116, label %91, !llvm.loop !21\n\n116:                                              ; preds = %108, %87\n  %117 = phi %\"class.std::__cxx11::basic_string\"* [ %89, %87 ], [ %114, %108 ]\n  %118 = icmp eq %\"class.std::__cxx11::basic_string\"* %8, null\n  br i1 %118, label %121, label %119\n\n119:                                              ; preds = %116\n  %120 = bitcast %\"class.std::__cxx11::basic_string\"* %8 to i8*\n  call void @_ZdlPv(i8* nonnull %120) #10\n  br label %121\n\n121:                                              ; preds = %116, %119\n  %122 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0, i64 0, i32 0, i32 0, i32 0, i32 2\n  store %\"class.std::__cxx11::basic_string\"* %32, %\"class.std::__cxx11::basic_string\"** %7, align 8, !tbaa !19\n  store %\"class.std::__cxx11::basic_string\"* %117, %\"class.std::__cxx11::basic_string\"** %5, align 8, !tbaa !13\n  %123 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %32, i64 %22\n  store %\"class.std::__cxx11::basic_string\"* %123, %\"class.std::__cxx11::basic_string\"** %122, align 8, !tbaa !15\n  ret void\n\n124:                                              ; preds = %126\n  %125 = landingpad { i8*, i32 }\n          cleanup\n  invoke void @__cxa_end_catch()\n          to label %131 unwind label %132\n\n126:                                              ; preds = %44\n  %127 = landingpad { i8*, i32 }\n          catch i8* null\n  %128 = extractvalue { i8*, i32 } %127, 0\n  %129 = call i8* @__cxa_begin_catch(i8* %128) #10\n  %130 = bitcast %\"class.std::__cxx11::basic_string\"* %32 to i8*\n  call void @_ZdlPv(i8* nonnull %130) #10\n  invoke void @__cxa_rethrow() #12\n          to label %135 unwind label %124\n\n131:                                              ; preds = %124\n  resume { i8*, i32 } %125\n\n132:                                              ; preds = %124\n  %133 = landingpad { i8*, i32 }\n          catch i8* null\n  %134 = extractvalue { i8*, i32 } %133, 0\n  call void @__clang_call_terminate(i8* %134) #11\n  unreachable\n\n135:                                              ; preds = %126\n  unreachable\n}\n\ndeclare dso_local i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32), i64* nonnull align 8 dereferenceable(8), i64) local_unnamed_addr #5\n\n; Function Attrs: argmemonly mustprogress nofree nounwind willreturn\ndeclare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #6\n\ndeclare dso_local void @__cxa_rethrow() local_unnamed_addr\n\ndeclare dso_local void @__cxa_end_catch() local_unnamed_addr\n\n; Function Attrs: noreturn\ndeclare dso_local void @_ZSt20__throw_length_errorPKc(i8*) local_unnamed_addr #7\n\n; Function Attrs: nobuiltin allocsize(0)\ndeclare dso_local nonnull i8* @_Znwm(i64) local_unnamed_addr #8\n\ndeclare dso_local nonnull align 8 dereferenceable(32) %\"class.std::__cxx11::basic_string\"* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32), i64, i64, i8*, i64) local_unnamed_addr #5\n\n; Function Attrs: argmemonly nofree nounwind willreturn writeonly\ndeclare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #9\n\nattributes #0 = { uwtable \"frame-pointer\"=\"none\" \"min-legal-vector-width\"=\"0\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #1 = { argmemonly mustprogress nofree nosync nounwind willreturn }\nattributes #2 = { nounwind uwtable \"frame-pointer\"=\"none\" \"min-legal-vector-width\"=\"0\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #3 = { noinline noreturn nounwind }\nattributes #4 = { nobuiltin nounwind \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #5 = { \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #6 = { argmemonly mustprogress nofree nounwind willreturn }\nattributes #7 = { noreturn \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #8 = { nobuiltin allocsize(0) \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #9 = { argmemonly nofree nounwind willreturn writeonly }\nattributes #10 = { nounwind }\nattributes #11 = { noreturn nounwind }\nattributes #12 = { noreturn }\nattributes #13 = { allocsize(0) }\n\n!llvm.module.flags = !{!0, !1}\n!llvm.ident = !{!2}\n\n!0 = !{i32 1, !\"wchar_size\", i32 4}\n!1 = !{i32 7, !\"uwtable\", i32 1}\n!2 = !{!\"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)\"}\n!3 = !{!4, !5, i64 0}\n!4 = !{!\"_ZTSNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderE\", !5, i64 0}\n!5 = !{!\"any pointer\", !6, i64 0}\n!6 = !{!\"omnipotent char\", !7, i64 0}\n!7 = !{!\"Simple C++ TBAA\"}\n!8 = !{!9, !10, i64 8}\n!9 = !{!\"_ZTSNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE\", !4, i64 0, !10, i64 8, !6, i64 16}\n!10 = !{!\"long\", !6, i64 0}\n!11 = !{!6, !6, i64 0}\n!12 = !{!9, !5, i64 0}\n!13 = !{!14, !5, i64 8}\n!14 = !{!\"_ZTSNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_Vector_impl_dataE\", !5, i64 0, !5, i64 8, !5, i64 16}\n!15 = !{!14, !5, i64 16}\n!16 = !{!10, !10, i64 0}\n!17 = distinct !{!17, !18}\n!18 = !{!\"llvm.loop.mustprogress\"}\n!19 = !{!14, !5, i64 0}\n!20 = distinct !{!20, !18}\n!21 = distinct !{!21, !18}\n", "target": "This is the targeted source code:\n /*\nInput to this function is a string containing multiple groups of nested parentheses. Your goal is to\nseparate those group into separate strings and return the vector of those.\nSeparate groups are balanced (each open brace is properly closed) and not nested within each other\nIgnore any spaces in the input string.\n>>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n{\"()\", \"(())\", \"(()())\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> separate_paren_groups(string paren_string){\n\n    vector<string> all_parens;\n    string current_paren;\n    int level=0;\n    char chr;\n    int i;\n    for (i=0;i<paren_string.length();i++)\n    {\n        chr=paren_string[i];\n        if (chr=='(')\n        {\n        level+=1;\n        current_paren+=chr;\n        }\n        if (chr==')')\n        {\n            level-=1;\n            current_paren+=chr;\n            if (level==0){\n                all_parens.push_back(current_paren);\n                current_paren=\"\";\n            }\n        }\n    }\n    return all_parens;\n}\n"}
{"input": "Convert this to C++:\n; ModuleID = '../../Human_xBenchmarks_164/CPP_2/CPP_2.cpp'\nsource_filename = \"../../Human_xBenchmarks_164/CPP_2/CPP_2.cpp\"\ntarget datalayout = \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\ntarget triple = \"x86_64-unknown-linux-gnu\"\n\n; Function Attrs: mustprogress nofree norecurse nosync nounwind readnone uwtable willreturn\ndefine dso_local float @_Z15truncate_numberf(float %0) local_unnamed_addr #0 {\n  %2 = fptosi float %0 to i32\n  %3 = sitofp i32 %2 to float\n  %4 = fsub float %0, %3\n  ret float %4\n}\n\nattributes #0 = { mustprogress nofree norecurse nosync nounwind readnone uwtable willreturn \"frame-pointer\"=\"none\" \"min-legal-vector-width\"=\"0\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\n\n!llvm.module.flags = !{!0, !1}\n!llvm.ident = !{!2}\n\n!0 = !{i32 1, !\"wchar_size\", i32 4}\n!1 = !{i32 7, !\"uwtable\", i32 1}\n!2 = !{!\"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)\"}\n", "target": "This is the targeted source code:\n/*\nGiven a positive floating point number, it can be decomposed into\nand integer part (largest integer smaller than given number) and decimals\n(leftover part always smaller than 1).\n\nReturn the decimal part of the number.\n>>> truncate_number(3.5)\n0.5\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nfloat truncate_number(float number){\n\n    return number-int(number);\n}\n"}
{"input": "Convert this to C++:\n; ModuleID = '../../Human_xBenchmarks_164/CPP_3/CPP_3.cpp'\nsource_filename = \"../../Human_xBenchmarks_164/CPP_3/CPP_3.cpp\"\ntarget datalayout = \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\ntarget triple = \"x86_64-unknown-linux-gnu\"\n\n%\"class.std::vector\" = type { %\"struct.std::_Vector_base\" }\n%\"struct.std::_Vector_base\" = type { %\"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl\" }\n%\"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl\" = type { %\"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl_data\" }\n%\"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl_data\" = type { i32*, i32*, i32* }\n\n; Function Attrs: mustprogress nofree norecurse nosync nounwind readonly uwtable willreturn\ndefine dso_local zeroext i1 @_Z10below_zeroSt6vectorIiSaIiEE(%\"class.std::vector\"* nocapture readonly %0) local_unnamed_addr #0 {\n  %2 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0, i64 0, i32 0, i32 0, i32 0, i32 1\n  %3 = load i32*, i32** %2, align 8, !tbaa !3\n  %4 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0, i64 0, i32 0, i32 0, i32 0, i32 0\n  %5 = load i32*, i32** %4, align 8, !tbaa !8\n  %6 = ptrtoint i32* %3 to i64\n  %7 = ptrtoint i32* %5 to i64\n  %8 = sub i64 %6, %7\n  %9 = ashr exact i64 %8, 2\n  %10 = icmp eq i64 %8, 0\n  br i1 %10, label %27, label %11\n\n11:                                               ; preds = %1\n  %12 = call i64 @llvm.umax.i64(i64 %9, i64 1)\n  %13 = load i32, i32* %5, align 4, !tbaa !9\n  %14 = icmp slt i32 %13, 0\n  br i1 %14, label %27, label %15\n\n15:                                               ; preds = %11, %19\n  %16 = phi i64 [ %24, %19 ], [ 1, %11 ]\n  %17 = phi i32 [ %22, %19 ], [ %13, %11 ]\n  %18 = icmp eq i64 %16, %12\n  br i1 %18, label %25, label %19, !llvm.loop !11\n\n19:                                               ; preds = %15\n  %20 = getelementptr inbounds i32, i32* %5, i64 %16\n  %21 = load i32, i32* %20, align 4, !tbaa !9\n  %22 = add nsw i32 %21, %17\n  %23 = icmp slt i32 %22, 0\n  %24 = add nuw i64 %16, 1\n  br i1 %23, label %25, label %15, !llvm.loop !11\n\n25:                                               ; preds = %19, %15\n  %26 = icmp ugt i64 %9, %16\n  br label %27\n\n27:                                               ; preds = %25, %11, %1\n  %28 = phi i1 [ false, %1 ], [ true, %11 ], [ %26, %25 ]\n  ret i1 %28\n}\n\n; Function Attrs: nofree nosync nounwind readnone speculatable willreturn\ndeclare i64 @llvm.umax.i64(i64, i64) #1\n\nattributes #0 = { mustprogress nofree norecurse nosync nounwind readonly uwtable willreturn \"frame-pointer\"=\"none\" \"min-legal-vector-width\"=\"0\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #1 = { nofree nosync nounwind readnone speculatable willreturn }\n\n!llvm.module.flags = !{!0, !1}\n!llvm.ident = !{!2}\n\n!0 = !{i32 1, !\"wchar_size\", i32 4}\n!1 = !{i32 7, !\"uwtable\", i32 1}\n!2 = !{!\"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)\"}\n!3 = !{!4, !5, i64 8}\n!4 = !{!\"_ZTSNSt12_Vector_baseIiSaIiEE17_Vector_impl_dataE\", !5, i64 0, !5, i64 8, !5, i64 16}\n!5 = !{!\"any pointer\", !6, i64 0}\n!6 = !{!\"omnipotent char\", !7, i64 0}\n!7 = !{!\"Simple C++ TBAA\"}\n!8 = !{!4, !5, i64 0}\n!9 = !{!10, !10, i64 0}\n!10 = !{!\"int\", !6, i64 0}\n!11 = distinct !{!11, !12}\n!12 = !{!\"llvm.loop.mustprogress\"}\n", "target": "This is the targeted source code:\n/*\nYou\"re given a vector of deposit and withdrawal operations on a bank account that starts with\nzero balance. Your task is to detect if at any point the balance of account falls below zero, and\nat that point function should return true. Otherwise it should return false.\n>>> below_zero({1, 2, 3})\nfalse\n>>> below_zero({1, 2, -4, 5})\ntrue\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool below_zero(vector<int> operations){\n\n    int num=0;\n    for (int i=0;i<operations.size();i++)\n    {\n        num+=operations[i];\n        if (num<0) return true;\n    }\n    return false;\n}\n"}
{"input": "Convert this to C++:\n; ModuleID = '../../Human_xBenchmarks_164/CPP_4/CPP_4.cpp'\nsource_filename = \"../../Human_xBenchmarks_164/CPP_4/CPP_4.cpp\"\ntarget datalayout = \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\ntarget triple = \"x86_64-unknown-linux-gnu\"\n\n%\"class.std::vector\" = type { %\"struct.std::_Vector_base\" }\n%\"struct.std::_Vector_base\" = type { %\"struct.std::_Vector_base<float, std::allocator<float>>::_Vector_impl\" }\n%\"struct.std::_Vector_base<float, std::allocator<float>>::_Vector_impl\" = type { %\"struct.std::_Vector_base<float, std::allocator<float>>::_Vector_impl_data\" }\n%\"struct.std::_Vector_base<float, std::allocator<float>>::_Vector_impl_data\" = type { float*, float*, float* }\n\n; Function Attrs: mustprogress nofree nosync nounwind readonly uwtable willreturn\ndefine dso_local float @_Z23mean_absolute_deviationSt6vectorIfSaIfEE(%\"class.std::vector\"* nocapture readonly %0) local_unnamed_addr #0 {\n  %2 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0, i64 0, i32 0, i32 0, i32 0, i32 1\n  %3 = load float*, float** %2, align 8, !tbaa !3\n  %4 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0, i64 0, i32 0, i32 0, i32 0, i32 0\n  %5 = load float*, float** %4, align 8, !tbaa !8\n  %6 = ptrtoint float* %3 to i64\n  %7 = ptrtoint float* %5 to i64\n  %8 = sub i64 %6, %7\n  %9 = ashr exact i64 %8, 2\n  %10 = icmp eq i64 %8, 0\n  br i1 %10, label %11, label %13\n\n11:                                               ; preds = %1\n  %12 = uitofp i64 %9 to float\n  br label %129\n\n13:                                               ; preds = %1\n  %14 = call i64 @llvm.umax.i64(i64 %9, i64 1)\n  %15 = add i64 %14, -1\n  %16 = and i64 %14, 7\n  %17 = icmp ult i64 %15, 7\n  br i1 %17, label %58, label %18\n\n18:                                               ; preds = %13\n  %19 = and i64 %14, -8\n  br label %20\n\n20:                                               ; preds = %20, %18\n  %21 = phi i64 [ 0, %18 ], [ %55, %20 ]\n  %22 = phi float [ 0.000000e+00, %18 ], [ %54, %20 ]\n  %23 = phi i64 [ %19, %18 ], [ %56, %20 ]\n  %24 = getelementptr inbounds float, float* %5, i64 %21\n  %25 = load float, float* %24, align 4, !tbaa !9\n  %26 = fadd float %22, %25\n  %27 = or i64 %21, 1\n  %28 = getelementptr inbounds float, float* %5, i64 %27\n  %29 = load float, float* %28, align 4, !tbaa !9\n  %30 = fadd float %26, %29\n  %31 = or i64 %21, 2\n  %32 = getelementptr inbounds float, float* %5, i64 %31\n  %33 = load float, float* %32, align 4, !tbaa !9\n  %34 = fadd float %30, %33\n  %35 = or i64 %21, 3\n  %36 = getelementptr inbounds float, float* %5, i64 %35\n  %37 = load float, float* %36, align 4, !tbaa !9\n  %38 = fadd float %34, %37\n  %39 = or i64 %21, 4\n  %40 = getelementptr inbounds float, float* %5, i64 %39\n  %41 = load float, float* %40, align 4, !tbaa !9\n  %42 = fadd float %38, %41\n  %43 = or i64 %21, 5\n  %44 = getelementptr inbounds float, float* %5, i64 %43\n  %45 = load float, float* %44, align 4, !tbaa !9\n  %46 = fadd float %42, %45\n  %47 = or i64 %21, 6\n  %48 = getelementptr inbounds float, float* %5, i64 %47\n  %49 = load float, float* %48, align 4, !tbaa !9\n  %50 = fadd float %46, %49\n  %51 = or i64 %21, 7\n  %52 = getelementptr inbounds float, float* %5, i64 %51\n  %53 = load float, float* %52, align 4, !tbaa !9\n  %54 = fadd float %50, %53\n  %55 = add nuw nsw i64 %21, 8\n  %56 = add i64 %23, -8\n  %57 = icmp eq i64 %56, 0\n  br i1 %57, label %58, label %20, !llvm.loop !11\n\n58:                                               ; preds = %20, %13\n  %59 = phi float [ undef, %13 ], [ %54, %20 ]\n  %60 = phi i64 [ 0, %13 ], [ %55, %20 ]\n  %61 = phi float [ 0.000000e+00, %13 ], [ %54, %20 ]\n  %62 = icmp eq i64 %16, 0\n  br i1 %62, label %73, label %63\n\n63:                                               ; preds = %58, %63\n  %64 = phi i64 [ %70, %63 ], [ %60, %58 ]\n  %65 = phi float [ %69, %63 ], [ %61, %58 ]\n  %66 = phi i64 [ %71, %63 ], [ %16, %58 ]\n  %67 = getelementptr inbounds float, float* %5, i64 %64\n  %68 = load float, float* %67, align 4, !tbaa !9\n  %69 = fadd float %65, %68\n  %70 = add nuw nsw i64 %64, 1\n  %71 = add i64 %66, -1\n  %72 = icmp eq i64 %71, 0\n  br i1 %72, label %73, label %63, !llvm.loop !13\n\n73:                                               ; preds = %63, %58\n  %74 = phi float [ %59, %58 ], [ %69, %63 ]\n  %75 = uitofp i64 %9 to float\n  %76 = fdiv float %74, %75\n  br i1 %10, label %129, label %77\n\n77:                                               ; preds = %73\n  %78 = and i64 %14, 3\n  %79 = icmp ult i64 %15, 3\n  br i1 %79, label %112, label %80\n\n80:                                               ; preds = %77\n  %81 = and i64 %14, -4\n  br label %82\n\n82:                                               ; preds = %82, %80\n  %83 = phi i64 [ 0, %80 ], [ %109, %82 ]\n  %84 = phi float [ 0.000000e+00, %80 ], [ %108, %82 ]\n  %85 = phi i64 [ %81, %80 ], [ %110, %82 ]\n  %86 = getelementptr inbounds float, float* %5, i64 %83\n  %87 = load float, float* %86, align 4, !tbaa !9\n  %88 = fsub float %87, %76\n  %89 = tail call float @llvm.fabs.f32(float %88) #3\n  %90 = fadd float %84, %89\n  %91 = or i64 %83, 1\n  %92 = getelementptr inbounds float, float* %5, i64 %91\n  %93 = load float, float* %92, align 4, !tbaa !9\n  %94 = fsub float %93, %76\n  %95 = tail call float @llvm.fabs.f32(float %94) #3\n  %96 = fadd float %90, %95\n  %97 = or i64 %83, 2\n  %98 = getelementptr inbounds float, float* %5, i64 %97\n  %99 = load float, float* %98, align 4, !tbaa !9\n  %100 = fsub float %99, %76\n  %101 = tail call float @llvm.fabs.f32(float %100) #3\n  %102 = fadd float %96, %101\n  %103 = or i64 %83, 3\n  %104 = getelementptr inbounds float, float* %5, i64 %103\n  %105 = load float, float* %104, align 4, !tbaa !9\n  %106 = fsub float %105, %76\n  %107 = tail call float @llvm.fabs.f32(float %106) #3\n  %108 = fadd float %102, %107\n  %109 = add nuw nsw i64 %83, 4\n  %110 = add i64 %85, -4\n  %111 = icmp eq i64 %110, 0\n  br i1 %111, label %112, label %82, !llvm.loop !15\n\n112:                                              ; preds = %82, %77\n  %113 = phi float [ undef, %77 ], [ %108, %82 ]\n  %114 = phi i64 [ 0, %77 ], [ %109, %82 ]\n  %115 = phi float [ 0.000000e+00, %77 ], [ %108, %82 ]\n  %116 = icmp eq i64 %78, 0\n  br i1 %116, label %129, label %117\n\n117:                                              ; preds = %112, %117\n  %118 = phi i64 [ %126, %117 ], [ %114, %112 ]\n  %119 = phi float [ %125, %117 ], [ %115, %112 ]\n  %120 = phi i64 [ %127, %117 ], [ %78, %112 ]\n  %121 = getelementptr inbounds float, float* %5, i64 %118\n  %122 = load float, float* %121, align 4, !tbaa !9\n  %123 = fsub float %122, %76\n  %124 = tail call float @llvm.fabs.f32(float %123) #3\n  %125 = fadd float %119, %124\n  %126 = add nuw nsw i64 %118, 1\n  %127 = add i64 %120, -1\n  %128 = icmp eq i64 %127, 0\n  br i1 %128, label %129, label %117, !llvm.loop !16\n\n129:                                              ; preds = %112, %117, %11, %73\n  %130 = phi float [ %75, %73 ], [ %12, %11 ], [ %75, %117 ], [ %75, %112 ]\n  %131 = phi float [ 0.000000e+00, %73 ], [ 0.000000e+00, %11 ], [ %113, %112 ], [ %125, %117 ]\n  %132 = fdiv float %131, %130\n  ret float %132\n}\n\n; Function Attrs: mustprogress nofree nosync nounwind readnone speculatable willreturn\ndeclare float @llvm.fabs.f32(float) #1\n\n; Function Attrs: nofree nosync nounwind readnone speculatable willreturn\ndeclare i64 @llvm.umax.i64(i64, i64) #2\n\nattributes #0 = { mustprogress nofree nosync nounwind readonly uwtable willreturn \"frame-pointer\"=\"none\" \"min-legal-vector-width\"=\"0\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #1 = { mustprogress nofree nosync nounwind readnone speculatable willreturn }\nattributes #2 = { nofree nosync nounwind readnone speculatable willreturn }\nattributes #3 = { nounwind }\n\n!llvm.module.flags = !{!0, !1}\n!llvm.ident = !{!2}\n\n!0 = !{i32 1, !\"wchar_size\", i32 4}\n!1 = !{i32 7, !\"uwtable\", i32 1}\n!2 = !{!\"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)\"}\n!3 = !{!4, !5, i64 8}\n!4 = !{!\"_ZTSNSt12_Vector_baseIfSaIfEE17_Vector_impl_dataE\", !5, i64 0, !5, i64 8, !5, i64 16}\n!5 = !{!\"any pointer\", !6, i64 0}\n!6 = !{!\"omnipotent char\", !7, i64 0}\n!7 = !{!\"Simple C++ TBAA\"}\n!8 = !{!4, !5, i64 0}\n!9 = !{!10, !10, i64 0}\n!10 = !{!\"float\", !6, i64 0}\n!11 = distinct !{!11, !12}\n!12 = !{!\"llvm.loop.mustprogress\"}\n!13 = distinct !{!13, !14}\n!14 = !{!\"llvm.loop.unroll.disable\"}\n!15 = distinct !{!15, !12}\n!16 = distinct !{!16, !14}\n", "target": "This is the targeted source code:\n/*\nFor a given vector of input numbers, calculate Mean Absolute Deviation\naround the mean of this dataset.\nMean Absolute Deviation is the average absolute difference between each\nelement and a centerpoint (mean in this case):\nMAD = average | x - x_mean |\n>>> mean_absolute_deviation({1.0, 2.0, 3.0, 4.0})\n1.0\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nfloat mean_absolute_deviation(vector<float> numbers){\n\n    float sum=0;\n    float avg,msum,mavg;\n    int i=0;\n    for (i=0;i<numbers.size();i++)\n        sum+=numbers[i];\n    avg=sum/numbers.size();\n    msum=0;\n    for (i=0;i<numbers.size();i++)\n        msum+=abs(numbers[i]-avg);\n    return msum/numbers.size();\n}\n"}
{"input": "Convert this to C++:\n; ModuleID = '../../Human_xBenchmarks_164/CPP_5/CPP_5.cpp'\nsource_filename = \"../../Human_xBenchmarks_164/CPP_5/CPP_5.cpp\"\ntarget datalayout = \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\ntarget triple = \"x86_64-unknown-linux-gnu\"\n\n%\"class.std::vector\" = type { %\"struct.std::_Vector_base\" }\n%\"struct.std::_Vector_base\" = type { %\"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl\" }\n%\"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl\" = type { %\"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl_data\" }\n%\"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl_data\" = type { i32*, i32*, i32* }\n\n@.str = private unnamed_addr constant [26 x i8] c\"vector::_M_realloc_insert\\00\", align 1\n\n; Function Attrs: uwtable\ndefine dso_local void @_Z11intersperseSt6vectorIiSaIiEEi(%\"class.std::vector\"* noalias nocapture sret(%\"class.std::vector\") align 8 %0, %\"class.std::vector\"* nocapture readonly %1, i32 %2) local_unnamed_addr #0 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {\n  %4 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %1, i64 0, i32 0, i32 0, i32 0, i32 1\n  %5 = bitcast %\"class.std::vector\"* %0 to i8*\n  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(24) %5, i8 0, i64 24, i1 false)\n  %6 = load i32*, i32** %4, align 8, !tbaa !3\n  %7 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %1, i64 0, i32 0, i32 0, i32 0, i32 0\n  %8 = load i32*, i32** %7, align 8, !tbaa !8\n  %9 = icmp eq i32* %6, %8\n  br i1 %9, label %23, label %10\n\n10:                                               ; preds = %3\n  %11 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0, i64 0, i32 0, i32 0, i32 0, i32 1\n  %12 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0, i64 0, i32 0, i32 0, i32 0, i32 2\n  %13 = call noalias nonnull i8* @_Znwm(i64 4) #6\n  %14 = bitcast i8* %13 to i32*\n  %15 = load i32, i32* %8, align 4, !tbaa !9\n  store i32 %15, i32* %14, align 4, !tbaa !9\n  %16 = getelementptr inbounds i8, i8* %13, i64 4\n  %17 = bitcast i8* %16 to i32*\n  %18 = load i32*, i32** %4, align 8, !tbaa !3\n  %19 = load i32*, i32** %7, align 8, !tbaa !8\n  %20 = bitcast %\"class.std::vector\"* %0 to i8**\n  store i8* %13, i8** %20, align 8, !tbaa !8\n  %21 = bitcast i32** %11 to i8**\n  store i8* %16, i8** %21, align 8, !tbaa !3\n  %22 = bitcast i32** %12 to i8**\n  store i8* %16, i8** %22, align 8, !tbaa !11\n  br label %23\n\n23:                                               ; preds = %10, %3\n  %24 = phi i32* [ %14, %10 ], [ null, %3 ]\n  %25 = phi i32* [ %17, %10 ], [ null, %3 ]\n  %26 = phi i32* [ %19, %10 ], [ %6, %3 ]\n  %27 = phi i32* [ %18, %10 ], [ %6, %3 ]\n  %28 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0, i64 0, i32 0, i32 0, i32 0, i32 1\n  %29 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0, i64 0, i32 0, i32 0, i32 0, i32 2\n  %30 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0, i64 0, i32 0, i32 0, i32 0, i32 0\n  %31 = ptrtoint i32* %27 to i64\n  %32 = ptrtoint i32* %26 to i64\n  %33 = sub i64 %31, %32\n  %34 = ashr exact i64 %33, 2\n  %35 = icmp ugt i64 %34, 1\n  br i1 %35, label %36, label %148\n\n36:                                               ; preds = %23, %130\n  %37 = phi i32* [ %131, %130 ], [ %26, %23 ]\n  %38 = phi i32* [ %132, %130 ], [ %25, %23 ]\n  %39 = phi i32* [ %133, %130 ], [ %24, %23 ]\n  %40 = phi i32* [ %134, %130 ], [ %25, %23 ]\n  %41 = phi i64 [ %135, %130 ], [ 1, %23 ]\n  %42 = icmp eq i32* %40, %38\n  br i1 %42, label %45, label %43\n\n43:                                               ; preds = %36\n  store i32 %2, i32* %40, align 4, !tbaa !9\n  %44 = getelementptr inbounds i32, i32* %40, i64 1\n  store i32* %44, i32** %28, align 8, !tbaa !3\n  br label %82\n\n45:                                               ; preds = %36\n  %46 = ptrtoint i32* %38 to i64\n  %47 = ptrtoint i32* %39 to i64\n  %48 = sub i64 %46, %47\n  %49 = ashr exact i64 %48, 2\n  %50 = icmp eq i64 %48, 9223372036854775804\n  br i1 %50, label %51, label %53\n\n51:                                               ; preds = %45\n  invoke void @_ZSt20__throw_length_errorPKc(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str, i64 0, i64 0)) #7\n          to label %52 unwind label %145\n\n52:                                               ; preds = %51\n  unreachable\n\n53:                                               ; preds = %45\n  %54 = icmp eq i64 %48, 0\n  %55 = select i1 %54, i64 1, i64 %49\n  %56 = add nsw i64 %55, %49\n  %57 = icmp ult i64 %56, %49\n  %58 = icmp ugt i64 %56, 2305843009213693951\n  %59 = or i1 %57, %58\n  %60 = select i1 %59, i64 2305843009213693951, i64 %56\n  %61 = icmp eq i64 %60, 0\n  br i1 %61, label %67, label %62\n\n62:                                               ; preds = %53\n  %63 = shl nuw nsw i64 %60, 2\n  %64 = invoke noalias nonnull i8* @_Znwm(i64 %63) #6\n          to label %65 unwind label %142\n\n65:                                               ; preds = %62\n  %66 = bitcast i8* %64 to i32*\n  br label %67\n\n67:                                               ; preds = %65, %53\n  %68 = phi i32* [ %66, %65 ], [ null, %53 ]\n  %69 = getelementptr inbounds i32, i32* %68, i64 %49\n  store i32 %2, i32* %69, align 4, !tbaa !9\n  %70 = icmp sgt i64 %48, 0\n  br i1 %70, label %71, label %74\n\n71:                                               ; preds = %67\n  %72 = bitcast i32* %68 to i8*\n  %73 = bitcast i32* %39 to i8*\n  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %72, i8* align 4 %73, i64 %48, i1 false) #8\n  br label %74\n\n74:                                               ; preds = %71, %67\n  %75 = getelementptr inbounds i32, i32* %69, i64 1\n  %76 = icmp eq i32* %39, null\n  br i1 %76, label %79, label %77\n\n77:                                               ; preds = %74\n  %78 = bitcast i32* %39 to i8*\n  tail call void @_ZdlPv(i8* nonnull %78) #8\n  br label %79\n\n79:                                               ; preds = %77, %74\n  store i32* %68, i32** %30, align 8, !tbaa !8\n  store i32* %75, i32** %28, align 8, !tbaa !3\n  %80 = getelementptr inbounds i32, i32* %68, i64 %60\n  store i32* %80, i32** %29, align 8, !tbaa !11\n  %81 = load i32*, i32** %7, align 8, !tbaa !8\n  br label %82\n\n82:                                               ; preds = %79, %43\n  %83 = phi i32* [ %81, %79 ], [ %37, %43 ]\n  %84 = phi i32* [ %80, %79 ], [ %38, %43 ]\n  %85 = phi i32* [ %75, %79 ], [ %44, %43 ]\n  %86 = phi i32* [ %68, %79 ], [ %39, %43 ]\n  %87 = getelementptr inbounds i32, i32* %83, i64 %41\n  %88 = icmp eq i32* %85, %84\n  br i1 %88, label %92, label %89\n\n89:                                               ; preds = %82\n  %90 = load i32, i32* %87, align 4, !tbaa !9\n  store i32 %90, i32* %85, align 4, !tbaa !9\n  %91 = getelementptr inbounds i32, i32* %85, i64 1\n  store i32* %91, i32** %28, align 8, !tbaa !3\n  br label %130\n\n92:                                               ; preds = %82\n  %93 = ptrtoint i32* %84 to i64\n  %94 = ptrtoint i32* %86 to i64\n  %95 = sub i64 %93, %94\n  %96 = ashr exact i64 %95, 2\n  %97 = icmp eq i64 %95, 9223372036854775804\n  br i1 %97, label %98, label %100\n\n98:                                               ; preds = %92\n  invoke void @_ZSt20__throw_length_errorPKc(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str, i64 0, i64 0)) #7\n          to label %99 unwind label %145\n\n99:                                               ; preds = %98\n  unreachable\n\n100:                                              ; preds = %92\n  %101 = icmp eq i64 %95, 0\n  %102 = select i1 %101, i64 1, i64 %96\n  %103 = add nsw i64 %102, %96\n  %104 = icmp ult i64 %103, %96\n  %105 = icmp ugt i64 %103, 2305843009213693951\n  %106 = or i1 %104, %105\n  %107 = select i1 %106, i64 2305843009213693951, i64 %103\n  %108 = icmp eq i64 %107, 0\n  br i1 %108, label %114, label %109\n\n109:                                              ; preds = %100\n  %110 = shl nuw nsw i64 %107, 2\n  %111 = invoke noalias nonnull i8* @_Znwm(i64 %110) #6\n          to label %112 unwind label %142\n\n112:                                              ; preds = %109\n  %113 = bitcast i8* %111 to i32*\n  br label %114\n\n114:                                              ; preds = %112, %100\n  %115 = phi i32* [ %113, %112 ], [ null, %100 ]\n  %116 = getelementptr inbounds i32, i32* %115, i64 %96\n  %117 = load i32, i32* %87, align 4, !tbaa !9\n  store i32 %117, i32* %116, align 4, !tbaa !9\n  %118 = icmp sgt i64 %95, 0\n  br i1 %118, label %119, label %122\n\n119:                                              ; preds = %114\n  %120 = bitcast i32* %115 to i8*\n  %121 = bitcast i32* %86 to i8*\n  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %120, i8* align 4 %121, i64 %95, i1 false) #8\n  br label %122\n\n122:                                              ; preds = %119, %114\n  %123 = getelementptr inbounds i32, i32* %116, i64 1\n  %124 = icmp eq i32* %86, null\n  br i1 %124, label %127, label %125\n\n125:                                              ; preds = %122\n  %126 = bitcast i32* %86 to i8*\n  tail call void @_ZdlPv(i8* nonnull %126) #8\n  br label %127\n\n127:                                              ; preds = %125, %122\n  store i32* %115, i32** %30, align 8, !tbaa !8\n  store i32* %123, i32** %28, align 8, !tbaa !3\n  %128 = getelementptr inbounds i32, i32* %115, i64 %107\n  store i32* %128, i32** %29, align 8, !tbaa !11\n  %129 = load i32*, i32** %7, align 8, !tbaa !8\n  br label %130\n\n130:                                              ; preds = %127, %89\n  %131 = phi i32* [ %129, %127 ], [ %83, %89 ]\n  %132 = phi i32* [ %128, %127 ], [ %84, %89 ]\n  %133 = phi i32* [ %115, %127 ], [ %86, %89 ]\n  %134 = phi i32* [ %123, %127 ], [ %91, %89 ]\n  %135 = add nuw i64 %41, 1\n  %136 = load i32*, i32** %4, align 8, !tbaa !3\n  %137 = ptrtoint i32* %136 to i64\n  %138 = ptrtoint i32* %131 to i64\n  %139 = sub i64 %137, %138\n  %140 = ashr exact i64 %139, 2\n  %141 = icmp ugt i64 %140, %135\n  br i1 %141, label %36, label %148, !llvm.loop !12\n\n142:                                              ; preds = %62, %109\n  %143 = phi i32* [ %39, %62 ], [ %86, %109 ]\n  %144 = landingpad { i8*, i32 }\n          cleanup\n  br label %149\n\n145:                                              ; preds = %51, %98\n  %146 = phi i32* [ %39, %51 ], [ %86, %98 ]\n  %147 = landingpad { i8*, i32 }\n          cleanup\n  br label %149\n\n148:                                              ; preds = %130, %23\n  ret void\n\n149:                                              ; preds = %142, %145\n  %150 = phi i32* [ %143, %142 ], [ %146, %145 ]\n  %151 = phi { i8*, i32 } [ %144, %142 ], [ %147, %145 ]\n  %152 = icmp eq i32* %150, null\n  br i1 %152, label %155, label %153\n\n153:                                              ; preds = %149\n  %154 = bitcast i32* %150 to i8*\n  tail call void @_ZdlPv(i8* nonnull %154) #8\n  br label %155\n\n155:                                              ; preds = %149, %153\n  resume { i8*, i32 } %151\n}\n\n; Function Attrs: argmemonly mustprogress nofree nounwind willreturn writeonly\ndeclare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1\n\ndeclare dso_local i32 @__gxx_personality_v0(...)\n\n; Function Attrs: nobuiltin nounwind\ndeclare dso_local void @_ZdlPv(i8*) local_unnamed_addr #2\n\n; Function Attrs: noreturn\ndeclare dso_local void @_ZSt20__throw_length_errorPKc(i8*) local_unnamed_addr #3\n\n; Function Attrs: nobuiltin allocsize(0)\ndeclare dso_local nonnull i8* @_Znwm(i64) local_unnamed_addr #4\n\n; Function Attrs: argmemonly mustprogress nofree nounwind willreturn\ndeclare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #5\n\nattributes #0 = { uwtable \"frame-pointer\"=\"none\" \"min-legal-vector-width\"=\"0\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #1 = { argmemonly mustprogress nofree nounwind willreturn writeonly }\nattributes #2 = { nobuiltin nounwind \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #3 = { noreturn \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #4 = { nobuiltin allocsize(0) \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #5 = { argmemonly mustprogress nofree nounwind willreturn }\nattributes #6 = { allocsize(0) }\nattributes #7 = { noreturn }\nattributes #8 = { nounwind }\n\n!llvm.module.flags = !{!0, !1}\n!llvm.ident = !{!2}\n\n!0 = !{i32 1, !\"wchar_size\", i32 4}\n!1 = !{i32 7, !\"uwtable\", i32 1}\n!2 = !{!\"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)\"}\n!3 = !{!4, !5, i64 8}\n!4 = !{!\"_ZTSNSt12_Vector_baseIiSaIiEE17_Vector_impl_dataE\", !5, i64 0, !5, i64 8, !5, i64 16}\n!5 = !{!\"any pointer\", !6, i64 0}\n!6 = !{!\"omnipotent char\", !7, i64 0}\n!7 = !{!\"Simple C++ TBAA\"}\n!8 = !{!4, !5, i64 0}\n!9 = !{!10, !10, i64 0}\n!10 = !{!\"int\", !6, i64 0}\n!11 = !{!4, !5, i64 16}\n!12 = distinct !{!12, !13}\n!13 = !{!\"llvm.loop.mustprogress\"}\n", "target": "This is the targeted source code:\n/*\nInsert a number \"delimeter\" between every two consecutive elements of input vector `numbers\"\n>>> intersperse({}, 4)\n{}\n>>> intersperse({1, 2, 3}, 4)\n{1, 4, 2, 4, 3}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> intersperse(vector<int> numbers, int delimeter){ \n\n    vector<int> out={};\n    if (numbers.size()>0) out.push_back(numbers[0]);\n    for (int i=1;i<numbers.size();i++)\n    {\n        out.push_back(delimeter);\n        out.push_back(numbers[i]);\n\n    }\n    return out;\n}\n"}
{"input": "Convert this to C++:\n; ModuleID = '../../Human_xBenchmarks_164/CPP_6/CPP_6.cpp'\nsource_filename = \"../../Human_xBenchmarks_164/CPP_6/CPP_6.cpp\"\ntarget datalayout = \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\ntarget triple = \"x86_64-unknown-linux-gnu\"\n\n%\"class.std::vector\" = type { %\"struct.std::_Vector_base\" }\n%\"struct.std::_Vector_base\" = type { %\"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl\" }\n%\"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl\" = type { %\"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl_data\" }\n%\"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl_data\" = type { i32*, i32*, i32* }\n%\"class.std::__cxx11::basic_string\" = type { %\"struct.std::__cxx11::basic_string<char>::_Alloc_hider\", i64, %union.anon }\n%\"struct.std::__cxx11::basic_string<char>::_Alloc_hider\" = type { i8* }\n%union.anon = type { i64, [8 x i8] }\n\n@.str = private unnamed_addr constant [1 x i8] zeroinitializer, align 1\n@.str.1 = private unnamed_addr constant [26 x i8] c\"vector::_M_realloc_insert\\00\", align 1\n\n; Function Attrs: uwtable\ndefine dso_local void @_Z19parse_nested_parensNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE(%\"class.std::vector\"* noalias nocapture sret(%\"class.std::vector\") align 8 %0, %\"class.std::__cxx11::basic_string\"* nocapture readonly %1) local_unnamed_addr #0 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {\n  %3 = alloca %\"class.std::__cxx11::basic_string\", align 8\n  %4 = bitcast %\"class.std::vector\"* %0 to i8*\n  tail call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(24) %4, i8 0, i64 24, i1 false) #8\n  %5 = bitcast %\"class.std::__cxx11::basic_string\"* %3 to i8*\n  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %5) #8\n  %6 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %3, i64 0, i32 2\n  %7 = bitcast %\"class.std::__cxx11::basic_string\"* %3 to %union.anon**\n  store %union.anon* %6, %union.anon** %7, align 8, !tbaa !3\n  %8 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %3, i64 0, i32 1\n  store i64 0, i64* %8, align 8, !tbaa !8\n  %9 = bitcast %union.anon* %6 to i8*\n  store i8 0, i8* %9, align 8, !tbaa !11\n  %10 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %1, i64 0, i32 1\n  %11 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %1, i64 0, i32 0, i32 0\n  %12 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %3, i64 0, i32 0, i32 0\n  %13 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %3, i64 0, i32 2, i32 0\n  %14 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0, i64 0, i32 0, i32 0, i32 0, i32 1\n  %15 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0, i64 0, i32 0, i32 0, i32 0, i32 2\n  %16 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0, i64 0, i32 0, i32 0, i32 0, i32 0\n  %17 = load i64, i64* %10, align 8, !tbaa !8\n  %18 = icmp eq i64 %17, 0\n  br i1 %18, label %141, label %19\n\n19:                                               ; preds = %2, %128\n  %20 = phi i32* [ %129, %128 ], [ null, %2 ]\n  %21 = phi i32* [ %130, %128 ], [ null, %2 ]\n  %22 = phi i32* [ %131, %128 ], [ null, %2 ]\n  %23 = phi i64 [ %134, %128 ], [ 0, %2 ]\n  %24 = phi i32 [ %133, %128 ], [ 0, %2 ]\n  %25 = phi i32 [ %132, %128 ], [ 0, %2 ]\n  %26 = load i8*, i8** %11, align 8, !tbaa !12\n  %27 = getelementptr inbounds i8, i8* %26, i64 %23\n  %28 = load i8, i8* %27, align 1, !tbaa !11\n  switch i8 %28, label %128 [\n    i8 40, label %29\n    i8 41, label %64\n  ]\n\n29:                                               ; preds = %19\n  %30 = add nsw i32 %24, 1\n  %31 = icmp slt i32 %24, %25\n  %32 = select i1 %31, i32 %25, i32 %30\n  %33 = load i64, i64* %8, align 8, !tbaa !8\n  %34 = add i64 %33, 1\n  %35 = load i8*, i8** %12, align 8, !tbaa !12\n  %36 = icmp eq i8* %35, %9\n  %37 = load i64, i64* %13, align 8\n  %38 = select i1 %36, i64 15, i64 %37\n  %39 = icmp ugt i64 %34, %38\n  br i1 %39, label %56, label %59\n\n40:                                               ; preds = %56, %73, %122, %103\n  %41 = phi i32* [ %20, %56 ], [ %20, %73 ], [ %123, %122 ], [ %20, %103 ]\n  %42 = landingpad { i8*, i32 }\n          cleanup\n  br label %45\n\n43:                                               ; preds = %92\n  %44 = landingpad { i8*, i32 }\n          cleanup\n  br label %45\n\n45:                                               ; preds = %43, %40\n  %46 = phi i32* [ %41, %40 ], [ %20, %43 ]\n  %47 = phi { i8*, i32 } [ %42, %40 ], [ %44, %43 ]\n  %48 = load i8*, i8** %12, align 8, !tbaa !12\n  %49 = icmp eq i8* %48, %9\n  br i1 %49, label %51, label %50\n\n50:                                               ; preds = %45\n  call void @_ZdlPv(i8* %48) #8\n  br label %51\n\n51:                                               ; preds = %45, %50\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %5) #8\n  %52 = icmp eq i32* %46, null\n  br i1 %52, label %55, label %53\n\n53:                                               ; preds = %51\n  %54 = bitcast i32* %46 to i8*\n  call void @_ZdlPv(i8* nonnull %54) #8\n  br label %55\n\n55:                                               ; preds = %51, %53\n  resume { i8*, i32 } %47\n\n56:                                               ; preds = %29\n  invoke void @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEmmPKcm(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %3, i64 %33, i64 0, i8* null, i64 1)\n          to label %57 unwind label %40\n\n57:                                               ; preds = %56\n  %58 = load i8*, i8** %12, align 8, !tbaa !12\n  br label %59\n\n59:                                               ; preds = %57, %29\n  %60 = phi i8* [ %58, %57 ], [ %35, %29 ]\n  %61 = getelementptr inbounds i8, i8* %60, i64 %33\n  store i8 40, i8* %61, align 1, !tbaa !11\n  store i64 %34, i64* %8, align 8, !tbaa !8\n  %62 = load i8*, i8** %12, align 8, !tbaa !12\n  %63 = getelementptr inbounds i8, i8* %62, i64 %34\n  store i8 0, i8* %63, align 1, !tbaa !11\n  br label %128\n\n64:                                               ; preds = %19\n  %65 = add nsw i32 %24, -1\n  %66 = load i64, i64* %8, align 8, !tbaa !8\n  %67 = add i64 %66, 1\n  %68 = load i8*, i8** %12, align 8, !tbaa !12\n  %69 = icmp eq i8* %68, %9\n  %70 = load i64, i64* %13, align 8\n  %71 = select i1 %69, i64 15, i64 %70\n  %72 = icmp ugt i64 %67, %71\n  br i1 %72, label %73, label %76\n\n73:                                               ; preds = %64\n  invoke void @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEmmPKcm(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %3, i64 %66, i64 0, i8* null, i64 1)\n          to label %74 unwind label %40\n\n74:                                               ; preds = %73\n  %75 = load i8*, i8** %12, align 8, !tbaa !12\n  br label %76\n\n76:                                               ; preds = %74, %64\n  %77 = phi i8* [ %75, %74 ], [ %68, %64 ]\n  %78 = getelementptr inbounds i8, i8* %77, i64 %66\n  store i8 41, i8* %78, align 1, !tbaa !11\n  store i64 %67, i64* %8, align 8, !tbaa !8\n  %79 = load i8*, i8** %12, align 8, !tbaa !12\n  %80 = getelementptr inbounds i8, i8* %79, i64 %67\n  store i8 0, i8* %80, align 1, !tbaa !11\n  %81 = icmp eq i32 %65, 0\n  br i1 %81, label %82, label %128\n\n82:                                               ; preds = %76\n  %83 = icmp eq i32* %22, %21\n  br i1 %83, label %86, label %84\n\n84:                                               ; preds = %82\n  store i32 %25, i32* %22, align 4, !tbaa !13\n  %85 = getelementptr inbounds i32, i32* %22, i64 1\n  store i32* %85, i32** %14, align 8, !tbaa !15\n  br label %122\n\n86:                                               ; preds = %82\n  %87 = ptrtoint i32* %21 to i64\n  %88 = ptrtoint i32* %20 to i64\n  %89 = sub i64 %87, %88\n  %90 = ashr exact i64 %89, 2\n  %91 = icmp eq i64 %89, 9223372036854775804\n  br i1 %91, label %92, label %94\n\n92:                                               ; preds = %86\n  invoke void @_ZSt20__throw_length_errorPKc(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.1, i64 0, i64 0)) #9\n          to label %93 unwind label %43\n\n93:                                               ; preds = %92\n  unreachable\n\n94:                                               ; preds = %86\n  %95 = icmp eq i64 %89, 0\n  %96 = select i1 %95, i64 1, i64 %90\n  %97 = add nsw i64 %96, %90\n  %98 = icmp ult i64 %97, %90\n  %99 = icmp ugt i64 %97, 2305843009213693951\n  %100 = or i1 %98, %99\n  %101 = select i1 %100, i64 2305843009213693951, i64 %97\n  %102 = icmp eq i64 %101, 0\n  br i1 %102, label %108, label %103\n\n103:                                              ; preds = %94\n  %104 = shl nuw nsw i64 %101, 2\n  %105 = invoke noalias nonnull i8* @_Znwm(i64 %104) #10\n          to label %106 unwind label %40\n\n106:                                              ; preds = %103\n  %107 = bitcast i8* %105 to i32*\n  br label %108\n\n108:                                              ; preds = %106, %94\n  %109 = phi i32* [ %107, %106 ], [ null, %94 ]\n  %110 = getelementptr inbounds i32, i32* %109, i64 %90\n  store i32 %25, i32* %110, align 4, !tbaa !13\n  %111 = icmp sgt i64 %89, 0\n  br i1 %111, label %112, label %115\n\n112:                                              ; preds = %108\n  %113 = bitcast i32* %109 to i8*\n  %114 = bitcast i32* %20 to i8*\n  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %113, i8* align 4 %114, i64 %89, i1 false) #8\n  br label %115\n\n115:                                              ; preds = %108, %112\n  %116 = getelementptr inbounds i32, i32* %110, i64 1\n  %117 = icmp eq i32* %20, null\n  br i1 %117, label %120, label %118\n\n118:                                              ; preds = %115\n  %119 = bitcast i32* %20 to i8*\n  call void @_ZdlPv(i8* nonnull %119) #8\n  br label %120\n\n120:                                              ; preds = %118, %115\n  store i32* %109, i32** %16, align 8, !tbaa !17\n  store i32* %116, i32** %14, align 8, !tbaa !15\n  %121 = getelementptr inbounds i32, i32* %109, i64 %101\n  store i32* %121, i32** %15, align 8, !tbaa !18\n  br label %122\n\n122:                                              ; preds = %120, %84\n  %123 = phi i32* [ %109, %120 ], [ %20, %84 ]\n  %124 = phi i32* [ %121, %120 ], [ %21, %84 ]\n  %125 = phi i32* [ %116, %120 ], [ %85, %84 ]\n  %126 = load i64, i64* %8, align 8, !tbaa !8\n  %127 = invoke nonnull align 8 dereferenceable(32) %\"class.std::__cxx11::basic_string\"* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %3, i64 0, i64 %126, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str, i64 0, i64 0), i64 0)\n          to label %128 unwind label %40\n\n128:                                              ; preds = %19, %122, %59, %76\n  %129 = phi i32* [ %20, %76 ], [ %20, %59 ], [ %123, %122 ], [ %20, %19 ]\n  %130 = phi i32* [ %21, %76 ], [ %21, %59 ], [ %124, %122 ], [ %21, %19 ]\n  %131 = phi i32* [ %22, %76 ], [ %22, %59 ], [ %125, %122 ], [ %22, %19 ]\n  %132 = phi i32 [ %25, %76 ], [ %32, %59 ], [ 0, %122 ], [ %25, %19 ]\n  %133 = phi i32 [ %65, %76 ], [ %30, %59 ], [ 0, %122 ], [ %24, %19 ]\n  %134 = add nuw i64 %23, 1\n  %135 = load i64, i64* %10, align 8, !tbaa !8\n  %136 = icmp ugt i64 %135, %134\n  br i1 %136, label %19, label %137, !llvm.loop !19\n\n137:                                              ; preds = %128\n  %138 = load i8*, i8** %12, align 8, !tbaa !12\n  %139 = icmp eq i8* %138, %9\n  br i1 %139, label %141, label %140\n\n140:                                              ; preds = %137\n  call void @_ZdlPv(i8* %138) #8\n  br label %141\n\n141:                                              ; preds = %2, %137, %140\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %5) #8\n  ret void\n}\n\n; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn\ndeclare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1\n\ndeclare dso_local i32 @__gxx_personality_v0(...)\n\n; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn\ndeclare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1\n\n; Function Attrs: nobuiltin nounwind\ndeclare dso_local void @_ZdlPv(i8*) local_unnamed_addr #2\n\ndeclare dso_local void @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEmmPKcm(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32), i64, i64, i8*, i64) local_unnamed_addr #3\n\n; Function Attrs: noreturn\ndeclare dso_local void @_ZSt20__throw_length_errorPKc(i8*) local_unnamed_addr #4\n\n; Function Attrs: nobuiltin allocsize(0)\ndeclare dso_local nonnull i8* @_Znwm(i64) local_unnamed_addr #5\n\n; Function Attrs: argmemonly mustprogress nofree nounwind willreturn\ndeclare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #6\n\ndeclare dso_local nonnull align 8 dereferenceable(32) %\"class.std::__cxx11::basic_string\"* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32), i64, i64, i8*, i64) local_unnamed_addr #3\n\n; Function Attrs: argmemonly nofree nounwind willreturn writeonly\ndeclare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #7\n\nattributes #0 = { uwtable \"frame-pointer\"=\"none\" \"min-legal-vector-width\"=\"0\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #1 = { argmemonly mustprogress nofree nosync nounwind willreturn }\nattributes #2 = { nobuiltin nounwind \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #3 = { \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #4 = { noreturn \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #5 = { nobuiltin allocsize(0) \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #6 = { argmemonly mustprogress nofree nounwind willreturn }\nattributes #7 = { argmemonly nofree nounwind willreturn writeonly }\nattributes #8 = { nounwind }\nattributes #9 = { noreturn }\nattributes #10 = { allocsize(0) }\n\n!llvm.module.flags = !{!0, !1}\n!llvm.ident = !{!2}\n\n!0 = !{i32 1, !\"wchar_size\", i32 4}\n!1 = !{i32 7, !\"uwtable\", i32 1}\n!2 = !{!\"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)\"}\n!3 = !{!4, !5, i64 0}\n!4 = !{!\"_ZTSNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderE\", !5, i64 0}\n!5 = !{!\"any pointer\", !6, i64 0}\n!6 = !{!\"omnipotent char\", !7, i64 0}\n!7 = !{!\"Simple C++ TBAA\"}\n!8 = !{!9, !10, i64 8}\n!9 = !{!\"_ZTSNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE\", !4, i64 0, !10, i64 8, !6, i64 16}\n!10 = !{!\"long\", !6, i64 0}\n!11 = !{!6, !6, i64 0}\n!12 = !{!9, !5, i64 0}\n!13 = !{!14, !14, i64 0}\n!14 = !{!\"int\", !6, i64 0}\n!15 = !{!16, !5, i64 8}\n!16 = !{!\"_ZTSNSt12_Vector_baseIiSaIiEE17_Vector_impl_dataE\", !5, i64 0, !5, i64 8, !5, i64 16}\n!17 = !{!16, !5, i64 0}\n!18 = !{!16, !5, i64 16}\n!19 = distinct !{!19, !20}\n!20 = !{!\"llvm.loop.mustprogress\"}\n", "target": "This is the targeted source code:\n/*\nInput to this function is a string represented multiple groups for nested parentheses separated by spaces.\nFor each of the group, output the deepest level of nesting of parentheses.\nE.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n>>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n{2, 3, 1, 3}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<int> parse_nested_parens(string paren_string){\n\n    vector<int> all_levels;\n    string current_paren;\n    int level=0,max_level=0;\n    char chr;\n    int i;\n    for (i=0;i<paren_string.length();i++)\n    {\n        chr=paren_string[i];\n        if (chr=='(')\n        {\n        level+=1;\n        if (level>max_level) max_level=level;\n        current_paren+=chr;\n        }\n        if (chr==')')\n        {\n            level-=1;\n            current_paren+=chr;\n            if (level==0){\n                all_levels.push_back(max_level);\n                current_paren=\"\";\n                max_level=0;\n            }\n        }\n    }\n    return all_levels;\n}\n"}
{"input": "Convert this to C++:\n; ModuleID = '../../Human_xBenchmarks_164/CPP_7/CPP_7.cpp'\nsource_filename = \"../../Human_xBenchmarks_164/CPP_7/CPP_7.cpp\"\ntarget datalayout = \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\ntarget triple = \"x86_64-unknown-linux-gnu\"\n\n%\"class.std::vector\" = type { %\"struct.std::_Vector_base\" }\n%\"struct.std::_Vector_base\" = type { %\"struct.std::_Vector_base<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char>>>::_Vector_impl\" }\n%\"struct.std::_Vector_base<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char>>>::_Vector_impl\" = type { %\"struct.std::_Vector_base<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char>>>::_Vector_impl_data\" }\n%\"struct.std::_Vector_base<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char>>>::_Vector_impl_data\" = type { %\"class.std::__cxx11::basic_string\"*, %\"class.std::__cxx11::basic_string\"*, %\"class.std::__cxx11::basic_string\"* }\n%\"class.std::__cxx11::basic_string\" = type { %\"struct.std::__cxx11::basic_string<char>::_Alloc_hider\", i64, %union.anon }\n%\"struct.std::__cxx11::basic_string<char>::_Alloc_hider\" = type { i8* }\n%union.anon = type { i64, [8 x i8] }\n\n$_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED2Ev = comdat any\n\n$__clang_call_terminate = comdat any\n\n$_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_realloc_insertIJRKS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_ = comdat any\n\n@.str.1 = private unnamed_addr constant [26 x i8] c\"vector::_M_realloc_insert\\00\", align 1\n\n; Function Attrs: uwtable\ndefine dso_local void @_Z19filter_by_substringSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EES5_(%\"class.std::vector\"* noalias sret(%\"class.std::vector\") align 8 %0, %\"class.std::vector\"* nocapture readonly %1, %\"class.std::__cxx11::basic_string\"* nocapture readonly %2) local_unnamed_addr #0 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {\n  %4 = alloca i64, align 8\n  %5 = bitcast %\"class.std::vector\"* %0 to i8*\n  tail call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(24) %5, i8 0, i64 24, i1 false) #11\n  %6 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %1, i64 0, i32 0, i32 0, i32 0, i32 1\n  %7 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %1, i64 0, i32 0, i32 0, i32 0, i32 0\n  %8 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %2, i64 0, i32 0, i32 0\n  %9 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %2, i64 0, i32 1\n  %10 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0, i64 0, i32 0, i32 0, i32 0, i32 1\n  %11 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0, i64 0, i32 0, i32 0, i32 0, i32 2\n  %12 = bitcast i64* %4 to i8*\n  %13 = load %\"class.std::__cxx11::basic_string\"*, %\"class.std::__cxx11::basic_string\"** %6, align 8, !tbaa !3\n  %14 = load %\"class.std::__cxx11::basic_string\"*, %\"class.std::__cxx11::basic_string\"** %7, align 8, !tbaa !8\n  %15 = icmp eq %\"class.std::__cxx11::basic_string\"* %13, %14\n  br i1 %15, label %71, label %16\n\n16:                                               ; preds = %3, %62\n  %17 = phi i64 [ %63, %62 ], [ 0, %3 ]\n  %18 = phi %\"class.std::__cxx11::basic_string\"* [ %65, %62 ], [ %14, %3 ]\n  %19 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %18, i64 %17\n  %20 = load i8*, i8** %8, align 8, !tbaa !9\n  %21 = load i64, i64* %9, align 8, !tbaa !13\n  %22 = call i64 @_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcmm(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %19, i8* %20, i64 0, i64 %21) #11\n  %23 = icmp eq i64 %22, -1\n  br i1 %23, label %62, label %24\n\n24:                                               ; preds = %16\n  %25 = load %\"class.std::__cxx11::basic_string\"*, %\"class.std::__cxx11::basic_string\"** %7, align 8, !tbaa !8\n  %26 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %25, i64 %17\n  %27 = load %\"class.std::__cxx11::basic_string\"*, %\"class.std::__cxx11::basic_string\"** %10, align 8, !tbaa !3\n  %28 = load %\"class.std::__cxx11::basic_string\"*, %\"class.std::__cxx11::basic_string\"** %11, align 8, !tbaa !14\n  %29 = icmp eq %\"class.std::__cxx11::basic_string\"* %27, %28\n  br i1 %29, label %59, label %30\n\n30:                                               ; preds = %24\n  %31 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %27, i64 0, i32 2\n  %32 = bitcast %\"class.std::__cxx11::basic_string\"* %27 to %union.anon**\n  store %union.anon* %31, %union.anon** %32, align 8, !tbaa !15\n  %33 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %26, i64 0, i32 0, i32 0\n  %34 = load i8*, i8** %33, align 8, !tbaa !9\n  %35 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %25, i64 %17, i32 1\n  %36 = load i64, i64* %35, align 8, !tbaa !13\n  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %12) #11\n  store i64 %36, i64* %4, align 8, !tbaa !16\n  %37 = icmp ugt i64 %36, 15\n  br i1 %37, label %40, label %38\n\n38:                                               ; preds = %30\n  %39 = bitcast %union.anon* %31 to i8*\n  br label %46\n\n40:                                               ; preds = %30\n  %41 = invoke i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %27, i64* nonnull align 8 dereferenceable(8) %4, i64 0)\n          to label %42 unwind label %60\n\n42:                                               ; preds = %40\n  %43 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %27, i64 0, i32 0, i32 0\n  store i8* %41, i8** %43, align 8, !tbaa !9\n  %44 = load i64, i64* %4, align 8, !tbaa !16\n  %45 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %27, i64 0, i32 2, i32 0\n  store i64 %44, i64* %45, align 8, !tbaa !17\n  br label %46\n\n46:                                               ; preds = %42, %38\n  %47 = phi i8* [ %39, %38 ], [ %41, %42 ]\n  switch i64 %36, label %50 [\n    i64 1, label %48\n    i64 0, label %51\n  ]\n\n48:                                               ; preds = %46\n  %49 = load i8, i8* %34, align 1, !tbaa !17\n  store i8 %49, i8* %47, align 1, !tbaa !17\n  br label %51\n\n50:                                               ; preds = %46\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %47, i8* align 1 %34, i64 %36, i1 false) #11\n  br label %51\n\n51:                                               ; preds = %50, %48, %46\n  %52 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %27, i64 0, i32 0, i32 0\n  %53 = load i64, i64* %4, align 8, !tbaa !16\n  %54 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %27, i64 0, i32 1\n  store i64 %53, i64* %54, align 8, !tbaa !13\n  %55 = load i8*, i8** %52, align 8, !tbaa !9\n  %56 = getelementptr inbounds i8, i8* %55, i64 %53\n  store i8 0, i8* %56, align 1, !tbaa !17\n  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %12) #11\n  %57 = load %\"class.std::__cxx11::basic_string\"*, %\"class.std::__cxx11::basic_string\"** %10, align 8, !tbaa !3\n  %58 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %57, i64 1\n  store %\"class.std::__cxx11::basic_string\"* %58, %\"class.std::__cxx11::basic_string\"** %10, align 8, !tbaa !3\n  br label %62\n\n59:                                               ; preds = %24\n  invoke void @_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_realloc_insertIJRKS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_(%\"class.std::vector\"* nonnull align 8 dereferenceable(24) %0, %\"class.std::__cxx11::basic_string\"* %27, %\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %26)\n          to label %62 unwind label %60\n\n60:                                               ; preds = %59, %40\n  %61 = landingpad { i8*, i32 }\n          cleanup\n  call void @_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED2Ev(%\"class.std::vector\"* nonnull align 8 dereferenceable(24) %0) #11\n  resume { i8*, i32 } %61\n\n62:                                               ; preds = %51, %59, %16\n  %63 = add nuw i64 %17, 1\n  %64 = load %\"class.std::__cxx11::basic_string\"*, %\"class.std::__cxx11::basic_string\"** %6, align 8, !tbaa !3\n  %65 = load %\"class.std::__cxx11::basic_string\"*, %\"class.std::__cxx11::basic_string\"** %7, align 8, !tbaa !8\n  %66 = ptrtoint %\"class.std::__cxx11::basic_string\"* %64 to i64\n  %67 = ptrtoint %\"class.std::__cxx11::basic_string\"* %65 to i64\n  %68 = sub i64 %66, %67\n  %69 = ashr exact i64 %68, 5\n  %70 = icmp ugt i64 %69, %63\n  br i1 %70, label %16, label %71, !llvm.loop !18\n\n71:                                               ; preds = %62, %3\n  ret void\n}\n\n; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn\ndeclare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1\n\ndeclare dso_local i32 @__gxx_personality_v0(...)\n\n; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn\ndeclare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1\n\n; Function Attrs: nounwind uwtable\ndefine linkonce_odr dso_local void @_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED2Ev(%\"class.std::vector\"* nonnull align 8 dereferenceable(24) %0) unnamed_addr #2 comdat align 2 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {\n  %2 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0, i64 0, i32 0, i32 0, i32 0, i32 0\n  %3 = load %\"class.std::__cxx11::basic_string\"*, %\"class.std::__cxx11::basic_string\"** %2, align 8, !tbaa !8\n  %4 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0, i64 0, i32 0, i32 0, i32 0, i32 1\n  %5 = load %\"class.std::__cxx11::basic_string\"*, %\"class.std::__cxx11::basic_string\"** %4, align 8, !tbaa !3\n  %6 = icmp eq %\"class.std::__cxx11::basic_string\"* %3, %5\n  br i1 %6, label %20, label %7\n\n7:                                                ; preds = %1, %15\n  %8 = phi %\"class.std::__cxx11::basic_string\"* [ %16, %15 ], [ %3, %1 ]\n  %9 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %8, i64 0, i32 0, i32 0\n  %10 = load i8*, i8** %9, align 8, !tbaa !9\n  %11 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %8, i64 0, i32 2\n  %12 = bitcast %union.anon* %11 to i8*\n  %13 = icmp eq i8* %10, %12\n  br i1 %13, label %15, label %14\n\n14:                                               ; preds = %7\n  tail call void @_ZdlPv(i8* %10) #11\n  br label %15\n\n15:                                               ; preds = %14, %7\n  %16 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %8, i64 1\n  %17 = icmp eq %\"class.std::__cxx11::basic_string\"* %16, %5\n  br i1 %17, label %18, label %7, !llvm.loop !20\n\n18:                                               ; preds = %15\n  %19 = load %\"class.std::__cxx11::basic_string\"*, %\"class.std::__cxx11::basic_string\"** %2, align 8, !tbaa !8\n  br label %20\n\n20:                                               ; preds = %18, %1\n  %21 = phi %\"class.std::__cxx11::basic_string\"* [ %19, %18 ], [ %3, %1 ]\n  %22 = icmp eq %\"class.std::__cxx11::basic_string\"* %21, null\n  br i1 %22, label %25, label %23\n\n23:                                               ; preds = %20\n  %24 = bitcast %\"class.std::__cxx11::basic_string\"* %21 to i8*\n  tail call void @_ZdlPv(i8* nonnull %24) #11\n  br label %25\n\n25:                                               ; preds = %20, %23\n  ret void\n}\n\n; Function Attrs: noinline noreturn nounwind\ndefine linkonce_odr hidden void @__clang_call_terminate(i8* %0) local_unnamed_addr #3 comdat {\n  %2 = tail call i8* @__cxa_begin_catch(i8* %0) #11\n  tail call void @_ZSt9terminatev() #12\n  unreachable\n}\n\ndeclare dso_local i8* @__cxa_begin_catch(i8*) local_unnamed_addr\n\ndeclare dso_local void @_ZSt9terminatev() local_unnamed_addr\n\n; Function Attrs: nobuiltin nounwind\ndeclare dso_local void @_ZdlPv(i8*) local_unnamed_addr #4\n\n; Function Attrs: nounwind\ndeclare dso_local i64 @_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcmm(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32), i8*, i64, i64) local_unnamed_addr #5\n\n; Function Attrs: uwtable\ndefine linkonce_odr dso_local void @_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_realloc_insertIJRKS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_(%\"class.std::vector\"* nonnull align 8 dereferenceable(24) %0, %\"class.std::__cxx11::basic_string\"* %1, %\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %2) local_unnamed_addr #0 comdat align 2 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {\n  %4 = alloca i64, align 8\n  %5 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0, i64 0, i32 0, i32 0, i32 0, i32 1\n  %6 = load %\"class.std::__cxx11::basic_string\"*, %\"class.std::__cxx11::basic_string\"** %5, align 8, !tbaa !3\n  %7 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0, i64 0, i32 0, i32 0, i32 0, i32 0\n  %8 = load %\"class.std::__cxx11::basic_string\"*, %\"class.std::__cxx11::basic_string\"** %7, align 8, !tbaa !8\n  %9 = ptrtoint %\"class.std::__cxx11::basic_string\"* %6 to i64\n  %10 = ptrtoint %\"class.std::__cxx11::basic_string\"* %8 to i64\n  %11 = sub i64 %9, %10\n  %12 = ashr exact i64 %11, 5\n  %13 = icmp eq i64 %11, 9223372036854775776\n  br i1 %13, label %14, label %15\n\n14:                                               ; preds = %3\n  tail call void @_ZSt20__throw_length_errorPKc(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.1, i64 0, i64 0)) #13\n  unreachable\n\n15:                                               ; preds = %3\n  %16 = icmp eq i64 %11, 0\n  %17 = select i1 %16, i64 1, i64 %12\n  %18 = add nsw i64 %17, %12\n  %19 = icmp ult i64 %18, %12\n  %20 = icmp ugt i64 %18, 288230376151711743\n  %21 = or i1 %19, %20\n  %22 = select i1 %21, i64 288230376151711743, i64 %18\n  %23 = ptrtoint %\"class.std::__cxx11::basic_string\"* %1 to i64\n  %24 = sub i64 %23, %10\n  %25 = ashr exact i64 %24, 5\n  %26 = icmp eq i64 %22, 0\n  br i1 %26, label %31, label %27\n\n27:                                               ; preds = %15\n  %28 = shl nuw nsw i64 %22, 5\n  %29 = tail call noalias nonnull i8* @_Znwm(i64 %28) #14\n  %30 = bitcast i8* %29 to %\"class.std::__cxx11::basic_string\"*\n  br label %31\n\n31:                                               ; preds = %15, %27\n  %32 = phi %\"class.std::__cxx11::basic_string\"* [ %30, %27 ], [ null, %15 ]\n  %33 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %32, i64 %25\n  %34 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %32, i64 %25, i32 2\n  %35 = bitcast %\"class.std::__cxx11::basic_string\"* %33 to %union.anon**\n  store %union.anon* %34, %union.anon** %35, align 8, !tbaa !15\n  %36 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %2, i64 0, i32 0, i32 0\n  %37 = load i8*, i8** %36, align 8, !tbaa !9\n  %38 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %2, i64 0, i32 1\n  %39 = load i64, i64* %38, align 8, !tbaa !13\n  %40 = bitcast i64* %4 to i8*\n  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %40) #11\n  store i64 %39, i64* %4, align 8, !tbaa !16\n  %41 = icmp ugt i64 %39, 15\n  br i1 %41, label %44, label %42\n\n42:                                               ; preds = %31\n  %43 = bitcast %union.anon* %34 to i8*\n  br label %50\n\n44:                                               ; preds = %31\n  %45 = invoke i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %33, i64* nonnull align 8 dereferenceable(8) %4, i64 0)\n          to label %46 unwind label %126\n\n46:                                               ; preds = %44\n  %47 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %33, i64 0, i32 0, i32 0\n  store i8* %45, i8** %47, align 8, !tbaa !9\n  %48 = load i64, i64* %4, align 8, !tbaa !16\n  %49 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %32, i64 %25, i32 2, i32 0\n  store i64 %48, i64* %49, align 8, !tbaa !17\n  br label %50\n\n50:                                               ; preds = %46, %42\n  %51 = phi i8* [ %43, %42 ], [ %45, %46 ]\n  switch i64 %39, label %54 [\n    i64 1, label %52\n    i64 0, label %55\n  ]\n\n52:                                               ; preds = %50\n  %53 = load i8, i8* %37, align 1, !tbaa !17\n  store i8 %53, i8* %51, align 1, !tbaa !17\n  br label %55\n\n54:                                               ; preds = %50\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %51, i8* align 1 %37, i64 %39, i1 false) #11\n  br label %55\n\n55:                                               ; preds = %54, %52, %50\n  %56 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %33, i64 0, i32 0, i32 0\n  %57 = load i64, i64* %4, align 8, !tbaa !16\n  %58 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %32, i64 %25, i32 1\n  store i64 %57, i64* %58, align 8, !tbaa !13\n  %59 = load i8*, i8** %56, align 8, !tbaa !9\n  %60 = getelementptr inbounds i8, i8* %59, i64 %57\n  store i8 0, i8* %60, align 1, !tbaa !17\n  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %40) #11\n  %61 = icmp eq %\"class.std::__cxx11::basic_string\"* %8, %1\n  br i1 %61, label %87, label %62\n\n62:                                               ; preds = %55, %79\n  %63 = phi %\"class.std::__cxx11::basic_string\"* [ %85, %79 ], [ %32, %55 ]\n  %64 = phi %\"class.std::__cxx11::basic_string\"* [ %84, %79 ], [ %8, %55 ]\n  %65 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %63, i64 0, i32 2\n  %66 = bitcast %\"class.std::__cxx11::basic_string\"* %63 to %union.anon**\n  store %union.anon* %65, %union.anon** %66, align 8, !tbaa !15\n  %67 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %64, i64 0, i32 0, i32 0\n  %68 = load i8*, i8** %67, align 8, !tbaa !9\n  %69 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %64, i64 0, i32 2\n  %70 = bitcast %union.anon* %69 to i8*\n  %71 = icmp eq i8* %68, %70\n  br i1 %71, label %72, label %74\n\n72:                                               ; preds = %62\n  %73 = bitcast %union.anon* %65 to i8*\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(16) %73, i8* noundef nonnull align 8 dereferenceable(16) %68, i64 16, i1 false) #11\n  br label %79\n\n74:                                               ; preds = %62\n  %75 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %63, i64 0, i32 0, i32 0\n  store i8* %68, i8** %75, align 8, !tbaa !9\n  %76 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %64, i64 0, i32 2, i32 0\n  %77 = load i64, i64* %76, align 8, !tbaa !17\n  %78 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %63, i64 0, i32 2, i32 0\n  store i64 %77, i64* %78, align 8, !tbaa !17\n  br label %79\n\n79:                                               ; preds = %74, %72\n  %80 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %64, i64 0, i32 1\n  %81 = load i64, i64* %80, align 8, !tbaa !13\n  %82 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %63, i64 0, i32 1\n  store i64 %81, i64* %82, align 8, !tbaa !13\n  %83 = bitcast %\"class.std::__cxx11::basic_string\"* %64 to %union.anon**\n  store %union.anon* %69, %union.anon** %83, align 8, !tbaa !9\n  store i64 0, i64* %80, align 8, !tbaa !13\n  store i8 0, i8* %70, align 8, !tbaa !17\n  %84 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %64, i64 1\n  %85 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %63, i64 1\n  %86 = icmp eq %\"class.std::__cxx11::basic_string\"* %84, %1\n  br i1 %86, label %87, label %62, !llvm.loop !21\n\n87:                                               ; preds = %79, %55\n  %88 = phi %\"class.std::__cxx11::basic_string\"* [ %32, %55 ], [ %85, %79 ]\n  %89 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %88, i64 1\n  %90 = icmp eq %\"class.std::__cxx11::basic_string\"* %6, %1\n  br i1 %90, label %116, label %91\n\n91:                                               ; preds = %87, %108\n  %92 = phi %\"class.std::__cxx11::basic_string\"* [ %114, %108 ], [ %89, %87 ]\n  %93 = phi %\"class.std::__cxx11::basic_string\"* [ %113, %108 ], [ %1, %87 ]\n  %94 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %92, i64 0, i32 2\n  %95 = bitcast %\"class.std::__cxx11::basic_string\"* %92 to %union.anon**\n  store %union.anon* %94, %union.anon** %95, align 8, !tbaa !15\n  %96 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %93, i64 0, i32 0, i32 0\n  %97 = load i8*, i8** %96, align 8, !tbaa !9\n  %98 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %93, i64 0, i32 2\n  %99 = bitcast %union.anon* %98 to i8*\n  %100 = icmp eq i8* %97, %99\n  br i1 %100, label %101, label %103\n\n101:                                              ; preds = %91\n  %102 = bitcast %union.anon* %94 to i8*\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(16) %102, i8* noundef nonnull align 8 dereferenceable(16) %97, i64 16, i1 false) #11\n  br label %108\n\n103:                                              ; preds = %91\n  %104 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %92, i64 0, i32 0, i32 0\n  store i8* %97, i8** %104, align 8, !tbaa !9\n  %105 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %93, i64 0, i32 2, i32 0\n  %106 = load i64, i64* %105, align 8, !tbaa !17\n  %107 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %92, i64 0, i32 2, i32 0\n  store i64 %106, i64* %107, align 8, !tbaa !17\n  br label %108\n\n108:                                              ; preds = %103, %101\n  %109 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %93, i64 0, i32 1\n  %110 = load i64, i64* %109, align 8, !tbaa !13\n  %111 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %92, i64 0, i32 1\n  store i64 %110, i64* %111, align 8, !tbaa !13\n  %112 = bitcast %\"class.std::__cxx11::basic_string\"* %93 to %union.anon**\n  store %union.anon* %98, %union.anon** %112, align 8, !tbaa !9\n  store i64 0, i64* %109, align 8, !tbaa !13\n  store i8 0, i8* %99, align 8, !tbaa !17\n  %113 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %93, i64 1\n  %114 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %92, i64 1\n  %115 = icmp eq %\"class.std::__cxx11::basic_string\"* %113, %6\n  br i1 %115, label %116, label %91, !llvm.loop !21\n\n116:                                              ; preds = %108, %87\n  %117 = phi %\"class.std::__cxx11::basic_string\"* [ %89, %87 ], [ %114, %108 ]\n  %118 = icmp eq %\"class.std::__cxx11::basic_string\"* %8, null\n  br i1 %118, label %121, label %119\n\n119:                                              ; preds = %116\n  %120 = bitcast %\"class.std::__cxx11::basic_string\"* %8 to i8*\n  call void @_ZdlPv(i8* nonnull %120) #11\n  br label %121\n\n121:                                              ; preds = %116, %119\n  %122 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0, i64 0, i32 0, i32 0, i32 0, i32 2\n  store %\"class.std::__cxx11::basic_string\"* %32, %\"class.std::__cxx11::basic_string\"** %7, align 8, !tbaa !8\n  store %\"class.std::__cxx11::basic_string\"* %117, %\"class.std::__cxx11::basic_string\"** %5, align 8, !tbaa !3\n  %123 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %32, i64 %22\n  store %\"class.std::__cxx11::basic_string\"* %123, %\"class.std::__cxx11::basic_string\"** %122, align 8, !tbaa !14\n  ret void\n\n124:                                              ; preds = %126\n  %125 = landingpad { i8*, i32 }\n          cleanup\n  invoke void @__cxa_end_catch()\n          to label %131 unwind label %132\n\n126:                                              ; preds = %44\n  %127 = landingpad { i8*, i32 }\n          catch i8* null\n  %128 = extractvalue { i8*, i32 } %127, 0\n  %129 = call i8* @__cxa_begin_catch(i8* %128) #11\n  %130 = bitcast %\"class.std::__cxx11::basic_string\"* %32 to i8*\n  call void @_ZdlPv(i8* nonnull %130) #11\n  invoke void @__cxa_rethrow() #13\n          to label %135 unwind label %124\n\n131:                                              ; preds = %124\n  resume { i8*, i32 } %125\n\n132:                                              ; preds = %124\n  %133 = landingpad { i8*, i32 }\n          catch i8* null\n  %134 = extractvalue { i8*, i32 } %133, 0\n  call void @__clang_call_terminate(i8* %134) #12\n  unreachable\n\n135:                                              ; preds = %126\n  unreachable\n}\n\ndeclare dso_local i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32), i64* nonnull align 8 dereferenceable(8), i64) local_unnamed_addr #6\n\n; Function Attrs: argmemonly mustprogress nofree nounwind willreturn\ndeclare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #7\n\ndeclare dso_local void @__cxa_rethrow() local_unnamed_addr\n\ndeclare dso_local void @__cxa_end_catch() local_unnamed_addr\n\n; Function Attrs: noreturn\ndeclare dso_local void @_ZSt20__throw_length_errorPKc(i8*) local_unnamed_addr #8\n\n; Function Attrs: nobuiltin allocsize(0)\ndeclare dso_local nonnull i8* @_Znwm(i64) local_unnamed_addr #9\n\n; Function Attrs: argmemonly nofree nounwind willreturn writeonly\ndeclare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #10\n\nattributes #0 = { uwtable \"frame-pointer\"=\"none\" \"min-legal-vector-width\"=\"0\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #1 = { argmemonly mustprogress nofree nosync nounwind willreturn }\nattributes #2 = { nounwind uwtable \"frame-pointer\"=\"none\" \"min-legal-vector-width\"=\"0\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #3 = { noinline noreturn nounwind }\nattributes #4 = { nobuiltin nounwind \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #5 = { nounwind \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #6 = { \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #7 = { argmemonly mustprogress nofree nounwind willreturn }\nattributes #8 = { noreturn \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #9 = { nobuiltin allocsize(0) \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #10 = { argmemonly nofree nounwind willreturn writeonly }\nattributes #11 = { nounwind }\nattributes #12 = { noreturn nounwind }\nattributes #13 = { noreturn }\nattributes #14 = { allocsize(0) }\n\n!llvm.module.flags = !{!0, !1}\n!llvm.ident = !{!2}\n\n!0 = !{i32 1, !\"wchar_size\", i32 4}\n!1 = !{i32 7, !\"uwtable\", i32 1}\n!2 = !{!\"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)\"}\n!3 = !{!4, !5, i64 8}\n!4 = !{!\"_ZTSNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_Vector_impl_dataE\", !5, i64 0, !5, i64 8, !5, i64 16}\n!5 = !{!\"any pointer\", !6, i64 0}\n!6 = !{!\"omnipotent char\", !7, i64 0}\n!7 = !{!\"Simple C++ TBAA\"}\n!8 = !{!4, !5, i64 0}\n!9 = !{!10, !5, i64 0}\n!10 = !{!\"_ZTSNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE\", !11, i64 0, !12, i64 8, !6, i64 16}\n!11 = !{!\"_ZTSNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderE\", !5, i64 0}\n!12 = !{!\"long\", !6, i64 0}\n!13 = !{!10, !12, i64 8}\n!14 = !{!4, !5, i64 16}\n!15 = !{!11, !5, i64 0}\n!16 = !{!12, !12, i64 0}\n!17 = !{!6, !6, i64 0}\n!18 = distinct !{!18, !19}\n!19 = !{!\"llvm.loop.mustprogress\"}\n!20 = distinct !{!20, !19}\n!21 = distinct !{!21, !19}\n", "target": "This is the targeted source code:\n/*\nFilter an input vector of strings only for ones that contain given substring\n>>> filter_by_substring({}, \"a\")\n{}\n>>> filter_by_substring({\"abc\", \"bacd\", \"cde\", \"vector\"}, \"a\")\n{\"abc\", \"bacd\", \"vector\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> filter_by_substring(vector<string> strings, string substring){\n\n    vector<string> out;\n    for (int i=0;i<strings.size();i++)\n    {\n        if (strings[i].find(substring)!=strings[i].npos)\n        out.push_back(strings[i]);\n    }\n    return out;\n}\n"}
{"input": "Convert this to C++:\n; ModuleID = '../../Human_xBenchmarks_164/CPP_8/CPP_8.cpp'\nsource_filename = \"../../Human_xBenchmarks_164/CPP_8/CPP_8.cpp\"\ntarget datalayout = \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\ntarget triple = \"x86_64-unknown-linux-gnu\"\n\n%\"class.std::vector\" = type { %\"struct.std::_Vector_base\" }\n%\"struct.std::_Vector_base\" = type { %\"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl\" }\n%\"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl\" = type { %\"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl_data\" }\n%\"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl_data\" = type { i32*, i32*, i32* }\n\n; Function Attrs: uwtable\ndefine dso_local void @_Z11sum_productSt6vectorIiSaIiEE(%\"class.std::vector\"* noalias nocapture sret(%\"class.std::vector\") align 8 %0, %\"class.std::vector\"* nocapture readonly %1) local_unnamed_addr #0 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {\n  %3 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %1, i64 0, i32 0, i32 0, i32 0, i32 1\n  %4 = load i32*, i32** %3, align 8, !tbaa !3\n  %5 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %1, i64 0, i32 0, i32 0, i32 0, i32 0\n  %6 = load i32*, i32** %5, align 8, !tbaa !8\n  %7 = ptrtoint i32* %4 to i64\n  %8 = ptrtoint i32* %6 to i64\n  %9 = sub i64 %7, %8\n  %10 = icmp eq i64 %9, 0\n  br i1 %10, label %91, label %11\n\n11:                                               ; preds = %2\n  %12 = ashr exact i64 %9, 2\n  %13 = call i64 @llvm.umax.i64(i64 %12, i64 1)\n  %14 = icmp ult i64 %13, 8\n  br i1 %14, label %87, label %15\n\n15:                                               ; preds = %11\n  %16 = and i64 %13, -8\n  %17 = add i64 %16, -8\n  %18 = lshr exact i64 %17, 3\n  %19 = add nuw nsw i64 %18, 1\n  %20 = and i64 %19, 1\n  %21 = icmp eq i64 %17, 0\n  br i1 %21, label %55, label %22\n\n22:                                               ; preds = %15\n  %23 = and i64 %19, 4611686018427387902\n  br label %24\n\n24:                                               ; preds = %24, %22\n  %25 = phi i64 [ 0, %22 ], [ %52, %24 ]\n  %26 = phi <4 x i32> [ zeroinitializer, %22 ], [ %48, %24 ]\n  %27 = phi <4 x i32> [ zeroinitializer, %22 ], [ %49, %24 ]\n  %28 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %22 ], [ %50, %24 ]\n  %29 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %22 ], [ %51, %24 ]\n  %30 = phi i64 [ %23, %22 ], [ %53, %24 ]\n  %31 = getelementptr inbounds i32, i32* %6, i64 %25\n  %32 = bitcast i32* %31 to <4 x i32>*\n  %33 = load <4 x i32>, <4 x i32>* %32, align 4, !tbaa !9\n  %34 = getelementptr inbounds i32, i32* %31, i64 4\n  %35 = bitcast i32* %34 to <4 x i32>*\n  %36 = load <4 x i32>, <4 x i32>* %35, align 4, !tbaa !9\n  %37 = add <4 x i32> %33, %26\n  %38 = add <4 x i32> %36, %27\n  %39 = mul <4 x i32> %33, %28\n  %40 = mul <4 x i32> %36, %29\n  %41 = or i64 %25, 8\n  %42 = getelementptr inbounds i32, i32* %6, i64 %41\n  %43 = bitcast i32* %42 to <4 x i32>*\n  %44 = load <4 x i32>, <4 x i32>* %43, align 4, !tbaa !9\n  %45 = getelementptr inbounds i32, i32* %42, i64 4\n  %46 = bitcast i32* %45 to <4 x i32>*\n  %47 = load <4 x i32>, <4 x i32>* %46, align 4, !tbaa !9\n  %48 = add <4 x i32> %44, %37\n  %49 = add <4 x i32> %47, %38\n  %50 = mul <4 x i32> %44, %39\n  %51 = mul <4 x i32> %47, %40\n  %52 = add nuw i64 %25, 16\n  %53 = add i64 %30, -2\n  %54 = icmp eq i64 %53, 0\n  br i1 %54, label %55, label %24, !llvm.loop !11\n\n55:                                               ; preds = %24, %15\n  %56 = phi <4 x i32> [ undef, %15 ], [ %48, %24 ]\n  %57 = phi <4 x i32> [ undef, %15 ], [ %49, %24 ]\n  %58 = phi <4 x i32> [ undef, %15 ], [ %50, %24 ]\n  %59 = phi <4 x i32> [ undef, %15 ], [ %51, %24 ]\n  %60 = phi i64 [ 0, %15 ], [ %52, %24 ]\n  %61 = phi <4 x i32> [ zeroinitializer, %15 ], [ %48, %24 ]\n  %62 = phi <4 x i32> [ zeroinitializer, %15 ], [ %49, %24 ]\n  %63 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %15 ], [ %50, %24 ]\n  %64 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %15 ], [ %51, %24 ]\n  %65 = icmp eq i64 %20, 0\n  br i1 %65, label %77, label %66\n\n66:                                               ; preds = %55\n  %67 = getelementptr inbounds i32, i32* %6, i64 %60\n  %68 = bitcast i32* %67 to <4 x i32>*\n  %69 = load <4 x i32>, <4 x i32>* %68, align 4, !tbaa !9\n  %70 = getelementptr inbounds i32, i32* %67, i64 4\n  %71 = bitcast i32* %70 to <4 x i32>*\n  %72 = load <4 x i32>, <4 x i32>* %71, align 4, !tbaa !9\n  %73 = mul <4 x i32> %72, %64\n  %74 = mul <4 x i32> %69, %63\n  %75 = add <4 x i32> %72, %62\n  %76 = add <4 x i32> %69, %61\n  br label %77\n\n77:                                               ; preds = %55, %66\n  %78 = phi <4 x i32> [ %56, %55 ], [ %76, %66 ]\n  %79 = phi <4 x i32> [ %57, %55 ], [ %75, %66 ]\n  %80 = phi <4 x i32> [ %58, %55 ], [ %74, %66 ]\n  %81 = phi <4 x i32> [ %59, %55 ], [ %73, %66 ]\n  %82 = mul <4 x i32> %81, %80\n  %83 = call i32 @llvm.vector.reduce.mul.v4i32(<4 x i32> %82)\n  %84 = add <4 x i32> %79, %78\n  %85 = call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %84)\n  %86 = icmp eq i64 %13, %16\n  br i1 %86, label %91, label %87\n\n87:                                               ; preds = %11, %77\n  %88 = phi i64 [ 0, %11 ], [ %16, %77 ]\n  %89 = phi i32 [ 0, %11 ], [ %85, %77 ]\n  %90 = phi i32 [ 1, %11 ], [ %83, %77 ]\n  br label %105\n\n91:                                               ; preds = %105, %77, %2\n  %92 = phi i32 [ 1, %2 ], [ %83, %77 ], [ %112, %105 ]\n  %93 = phi i32 [ 0, %2 ], [ %85, %77 ], [ %111, %105 ]\n  %94 = bitcast %\"class.std::vector\"* %0 to i8*\n  tail call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(24) %94, i8 0, i64 24, i1 false) #5\n  %95 = call noalias nonnull i8* @_Znwm(i64 8) #6\n  %96 = bitcast i8* %95 to i32*\n  %97 = bitcast %\"class.std::vector\"* %0 to i8**\n  store i8* %95, i8** %97, align 8, !tbaa !8\n  %98 = getelementptr inbounds i8, i8* %95, i64 8\n  %99 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0, i64 0, i32 0, i32 0, i32 0, i32 2\n  %100 = bitcast i32** %99 to i8**\n  store i8* %98, i8** %100, align 8, !tbaa !14\n  store i32 %93, i32* %96, align 4\n  %101 = getelementptr inbounds i8, i8* %95, i64 4\n  %102 = bitcast i8* %101 to i32*\n  store i32 %92, i32* %102, align 4\n  %103 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0, i64 0, i32 0, i32 0, i32 0, i32 1\n  %104 = bitcast i32** %103 to i8**\n  store i8* %98, i8** %104, align 8, !tbaa !3\n  ret void\n\n105:                                              ; preds = %87, %105\n  %106 = phi i64 [ %113, %105 ], [ %88, %87 ]\n  %107 = phi i32 [ %111, %105 ], [ %89, %87 ]\n  %108 = phi i32 [ %112, %105 ], [ %90, %87 ]\n  %109 = getelementptr inbounds i32, i32* %6, i64 %106\n  %110 = load i32, i32* %109, align 4, !tbaa !9\n  %111 = add nsw i32 %110, %107\n  %112 = mul nsw i32 %110, %108\n  %113 = add nuw nsw i64 %106, 1\n  %114 = icmp eq i64 %113, %13\n  br i1 %114, label %91, label %105, !llvm.loop !15\n}\n\ndeclare dso_local i32 @__gxx_personality_v0(...)\n\n; Function Attrs: nobuiltin allocsize(0)\ndeclare dso_local nonnull i8* @_Znwm(i64) local_unnamed_addr #1\n\n; Function Attrs: argmemonly nofree nounwind willreturn writeonly\ndeclare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2\n\n; Function Attrs: nofree nosync nounwind readnone speculatable willreturn\ndeclare i64 @llvm.umax.i64(i64, i64) #3\n\n; Function Attrs: nofree nosync nounwind readnone willreturn\ndeclare i32 @llvm.vector.reduce.add.v4i32(<4 x i32>) #4\n\n; Function Attrs: nofree nosync nounwind readnone willreturn\ndeclare i32 @llvm.vector.reduce.mul.v4i32(<4 x i32>) #4\n\nattributes #0 = { uwtable \"frame-pointer\"=\"none\" \"min-legal-vector-width\"=\"0\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #1 = { nobuiltin allocsize(0) \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #2 = { argmemonly nofree nounwind willreturn writeonly }\nattributes #3 = { nofree nosync nounwind readnone speculatable willreturn }\nattributes #4 = { nofree nosync nounwind readnone willreturn }\nattributes #5 = { nounwind }\nattributes #6 = { allocsize(0) }\n\n!llvm.module.flags = !{!0, !1}\n!llvm.ident = !{!2}\n\n!0 = !{i32 1, !\"wchar_size\", i32 4}\n!1 = !{i32 7, !\"uwtable\", i32 1}\n!2 = !{!\"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)\"}\n!3 = !{!4, !5, i64 8}\n!4 = !{!\"_ZTSNSt12_Vector_baseIiSaIiEE17_Vector_impl_dataE\", !5, i64 0, !5, i64 8, !5, i64 16}\n!5 = !{!\"any pointer\", !6, i64 0}\n!6 = !{!\"omnipotent char\", !7, i64 0}\n!7 = !{!\"Simple C++ TBAA\"}\n!8 = !{!4, !5, i64 0}\n!9 = !{!10, !10, i64 0}\n!10 = !{!\"int\", !6, i64 0}\n!11 = distinct !{!11, !12, !13}\n!12 = !{!\"llvm.loop.mustprogress\"}\n!13 = !{!\"llvm.loop.isvectorized\", i32 1}\n!14 = !{!4, !5, i64 16}\n!15 = distinct !{!15, !12, !16, !13}\n!16 = !{!\"llvm.loop.unroll.runtime.disable\"}\n", "target": "This is the targeted source code:\n/*\nFor a given vector of integers, return a vector consisting of a sum and a product of all the integers in a vector.\nEmpty sum should be equal to 0 and empty product should be equal to 1.\n>>> sum_product({})\n(0, 1)\n>>> sum_product({1, 2, 3, 4})\n(10, 24)\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> sum_product(vector<int> numbers){\n\n    int sum=0,product=1;\n    for (int i=0;i<numbers.size();i++)\n    {\n        sum+=numbers[i];\n        product*=numbers[i];\n    }\n    return {sum,product};\n}\n"}
{"input": "Convert this to C++:\n; ModuleID = '../../Human_xBenchmarks_164/CPP_9/CPP_9.cpp'\nsource_filename = \"../../Human_xBenchmarks_164/CPP_9/CPP_9.cpp\"\ntarget datalayout = \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\ntarget triple = \"x86_64-unknown-linux-gnu\"\n\n%\"class.std::vector\" = type { %\"struct.std::_Vector_base\" }\n%\"struct.std::_Vector_base\" = type { %\"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl\" }\n%\"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl\" = type { %\"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl_data\" }\n%\"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl_data\" = type { i32*, i32*, i32* }\n\n@.str = private unnamed_addr constant [26 x i8] c\"vector::_M_realloc_insert\\00\", align 1\n\n; Function Attrs: uwtable\ndefine dso_local void @_Z11rolling_maxSt6vectorIiSaIiEE(%\"class.std::vector\"* noalias nocapture sret(%\"class.std::vector\") align 8 %0, %\"class.std::vector\"* nocapture readonly %1) local_unnamed_addr #0 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {\n  %3 = bitcast %\"class.std::vector\"* %0 to i8*\n  tail call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(24) %3, i8 0, i64 24, i1 false) #6\n  %4 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %1, i64 0, i32 0, i32 0, i32 0, i32 1\n  %5 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %1, i64 0, i32 0, i32 0, i32 0, i32 0\n  %6 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0, i64 0, i32 0, i32 0, i32 0, i32 1\n  %7 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0, i64 0, i32 0, i32 0, i32 0, i32 2\n  %8 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0, i64 0, i32 0, i32 0, i32 0, i32 0\n  %9 = load i32*, i32** %4, align 8, !tbaa !3\n  %10 = load i32*, i32** %5, align 8, !tbaa !8\n  %11 = icmp eq i32* %9, %10\n  br i1 %11, label %12, label %13\n\n12:                                               ; preds = %66, %2\n  ret void\n\n13:                                               ; preds = %2, %66\n  %14 = phi i32* [ %67, %66 ], [ %10, %2 ]\n  %15 = phi i32* [ %68, %66 ], [ %9, %2 ]\n  %16 = phi i32* [ %69, %66 ], [ null, %2 ]\n  %17 = phi i32* [ %70, %66 ], [ null, %2 ]\n  %18 = phi i32* [ %71, %66 ], [ null, %2 ]\n  %19 = phi i64 [ %72, %66 ], [ 0, %2 ]\n  %20 = phi i32 [ %24, %66 ], [ 0, %2 ]\n  %21 = getelementptr inbounds i32, i32* %14, i64 %19\n  %22 = load i32, i32* %21, align 4, !tbaa !9\n  %23 = icmp sgt i32 %22, %20\n  %24 = select i1 %23, i32 %22, i32 %20\n  %25 = icmp eq i32* %18, %17\n  br i1 %25, label %28, label %26\n\n26:                                               ; preds = %13\n  store i32 %24, i32* %18, align 4, !tbaa !9\n  %27 = getelementptr inbounds i32, i32* %18, i64 1\n  store i32* %27, i32** %6, align 8, !tbaa !3\n  br label %66\n\n28:                                               ; preds = %13\n  %29 = ptrtoint i32* %17 to i64\n  %30 = ptrtoint i32* %16 to i64\n  %31 = sub i64 %29, %30\n  %32 = ashr exact i64 %31, 2\n  %33 = icmp eq i64 %31, 9223372036854775804\n  br i1 %33, label %34, label %36\n\n34:                                               ; preds = %28\n  invoke void @_ZSt20__throw_length_errorPKc(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str, i64 0, i64 0)) #7\n          to label %35 unwind label %80\n\n35:                                               ; preds = %34\n  unreachable\n\n36:                                               ; preds = %28\n  %37 = icmp eq i64 %31, 0\n  %38 = select i1 %37, i64 1, i64 %32\n  %39 = add nsw i64 %38, %32\n  %40 = icmp ult i64 %39, %32\n  %41 = icmp ugt i64 %39, 2305843009213693951\n  %42 = or i1 %40, %41\n  %43 = select i1 %42, i64 2305843009213693951, i64 %39\n  %44 = icmp eq i64 %43, 0\n  br i1 %44, label %50, label %45\n\n45:                                               ; preds = %36\n  %46 = shl nuw nsw i64 %43, 2\n  %47 = invoke noalias nonnull i8* @_Znwm(i64 %46) #8\n          to label %48 unwind label %78\n\n48:                                               ; preds = %45\n  %49 = bitcast i8* %47 to i32*\n  br label %50\n\n50:                                               ; preds = %48, %36\n  %51 = phi i32* [ %49, %48 ], [ null, %36 ]\n  %52 = getelementptr inbounds i32, i32* %51, i64 %32\n  store i32 %24, i32* %52, align 4, !tbaa !9\n  %53 = icmp sgt i64 %31, 0\n  br i1 %53, label %54, label %57\n\n54:                                               ; preds = %50\n  %55 = bitcast i32* %51 to i8*\n  %56 = bitcast i32* %16 to i8*\n  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %55, i8* align 4 %56, i64 %31, i1 false) #6\n  br label %57\n\n57:                                               ; preds = %50, %54\n  %58 = getelementptr inbounds i32, i32* %52, i64 1\n  %59 = icmp eq i32* %16, null\n  br i1 %59, label %62, label %60\n\n60:                                               ; preds = %57\n  %61 = bitcast i32* %16 to i8*\n  tail call void @_ZdlPv(i8* nonnull %61) #6\n  br label %62\n\n62:                                               ; preds = %60, %57\n  store i32* %51, i32** %8, align 8, !tbaa !8\n  store i32* %58, i32** %6, align 8, !tbaa !3\n  %63 = getelementptr inbounds i32, i32* %51, i64 %43\n  store i32* %63, i32** %7, align 8, !tbaa !11\n  %64 = load i32*, i32** %4, align 8, !tbaa !3\n  %65 = load i32*, i32** %5, align 8, !tbaa !8\n  br label %66\n\n66:                                               ; preds = %62, %26\n  %67 = phi i32* [ %65, %62 ], [ %14, %26 ]\n  %68 = phi i32* [ %64, %62 ], [ %15, %26 ]\n  %69 = phi i32* [ %51, %62 ], [ %16, %26 ]\n  %70 = phi i32* [ %63, %62 ], [ %17, %26 ]\n  %71 = phi i32* [ %58, %62 ], [ %27, %26 ]\n  %72 = add nuw i64 %19, 1\n  %73 = ptrtoint i32* %68 to i64\n  %74 = ptrtoint i32* %67 to i64\n  %75 = sub i64 %73, %74\n  %76 = ashr exact i64 %75, 2\n  %77 = icmp ugt i64 %76, %72\n  br i1 %77, label %13, label %12, !llvm.loop !12\n\n78:                                               ; preds = %45\n  %79 = landingpad { i8*, i32 }\n          cleanup\n  br label %82\n\n80:                                               ; preds = %34\n  %81 = landingpad { i8*, i32 }\n          cleanup\n  br label %82\n\n82:                                               ; preds = %80, %78\n  %83 = phi { i8*, i32 } [ %79, %78 ], [ %81, %80 ]\n  %84 = icmp eq i32* %16, null\n  br i1 %84, label %87, label %85\n\n85:                                               ; preds = %82\n  %86 = bitcast i32* %16 to i8*\n  tail call void @_ZdlPv(i8* nonnull %86) #6\n  br label %87\n\n87:                                               ; preds = %82, %85\n  resume { i8*, i32 } %83\n}\n\ndeclare dso_local i32 @__gxx_personality_v0(...)\n\n; Function Attrs: nobuiltin nounwind\ndeclare dso_local void @_ZdlPv(i8*) local_unnamed_addr #1\n\n; Function Attrs: noreturn\ndeclare dso_local void @_ZSt20__throw_length_errorPKc(i8*) local_unnamed_addr #2\n\n; Function Attrs: nobuiltin allocsize(0)\ndeclare dso_local nonnull i8* @_Znwm(i64) local_unnamed_addr #3\n\n; Function Attrs: argmemonly mustprogress nofree nounwind willreturn\ndeclare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #4\n\n; Function Attrs: argmemonly nofree nounwind willreturn writeonly\ndeclare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #5\n\nattributes #0 = { uwtable \"frame-pointer\"=\"none\" \"min-legal-vector-width\"=\"0\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #1 = { nobuiltin nounwind \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #2 = { noreturn \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #3 = { nobuiltin allocsize(0) \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #4 = { argmemonly mustprogress nofree nounwind willreturn }\nattributes #5 = { argmemonly nofree nounwind willreturn writeonly }\nattributes #6 = { nounwind }\nattributes #7 = { noreturn }\nattributes #8 = { allocsize(0) }\n\n!llvm.module.flags = !{!0, !1}\n!llvm.ident = !{!2}\n\n!0 = !{i32 1, !\"wchar_size\", i32 4}\n!1 = !{i32 7, !\"uwtable\", i32 1}\n!2 = !{!\"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)\"}\n!3 = !{!4, !5, i64 8}\n!4 = !{!\"_ZTSNSt12_Vector_baseIiSaIiEE17_Vector_impl_dataE\", !5, i64 0, !5, i64 8, !5, i64 16}\n!5 = !{!\"any pointer\", !6, i64 0}\n!6 = !{!\"omnipotent char\", !7, i64 0}\n!7 = !{!\"Simple C++ TBAA\"}\n!8 = !{!4, !5, i64 0}\n!9 = !{!10, !10, i64 0}\n!10 = !{!\"int\", !6, i64 0}\n!11 = !{!4, !5, i64 16}\n!12 = distinct !{!12, !13}\n!13 = !{!\"llvm.loop.mustprogress\"}\n", "target": "This is the targeted source code:\n/*\nFrom a given vector of integers, generate a vector of rolling maximum element found until given moment\nin the sequence.\n>>> rolling_max({1, 2, 3, 2, 3, 4, 2})\n{1, 2, 3, 3, 3, 4, 4}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> rolling_max(vector<int> numbers){\n\n    vector<int> out;\n    int max=0;\n    for (int i=0;i<numbers.size();i++)\n    {\n        if (numbers[i]>max) max=numbers[i];\n        out.push_back(max);\n    }\n    return out;\n}\n"}
{"input": "Convert this to C++:\n; ModuleID = '../../Human_xBenchmarks_164/CPP_10/CPP_10.cpp'\nsource_filename = \"../../Human_xBenchmarks_164/CPP_10/CPP_10.cpp\"\ntarget datalayout = \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\ntarget triple = \"x86_64-unknown-linux-gnu\"\n\n%\"class.std::__cxx11::basic_string\" = type { %\"struct.std::__cxx11::basic_string<char>::_Alloc_hider\", i64, %union.anon }\n%\"struct.std::__cxx11::basic_string<char>::_Alloc_hider\" = type { i8* }\n%union.anon = type { i64, [8 x i8] }\n\n; Function Attrs: uwtable\ndefine dso_local zeroext i1 @_Z13is_palindromeNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE(%\"class.std::__cxx11::basic_string\"* nocapture readonly %0) local_unnamed_addr #0 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {\n  %2 = alloca i64, align 8\n  %3 = alloca %\"class.std::__cxx11::basic_string\", align 8\n  %4 = bitcast %\"class.std::__cxx11::basic_string\"* %3 to i8*\n  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %4) #7\n  %5 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 0, i32 0\n  %6 = load i8*, i8** %5, align 8, !tbaa !3, !noalias !10\n  %7 = ptrtoint i8* %6 to i64\n  %8 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 1\n  %9 = load i64, i64* %8, align 8, !tbaa !13, !noalias !10\n  %10 = getelementptr inbounds i8, i8* %6, i64 %9\n  %11 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %3, i64 0, i32 2\n  %12 = bitcast %\"class.std::__cxx11::basic_string\"* %3 to %union.anon**\n  store %union.anon* %11, %union.anon** %12, align 8, !tbaa !14\n  %13 = bitcast i64* %2 to i8*\n  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %13) #7\n  store i64 %9, i64* %2, align 8, !tbaa !15\n  %14 = icmp ugt i64 %9, 15\n  br i1 %14, label %15, label %20\n\n15:                                               ; preds = %1\n  %16 = call i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %3, i64* nonnull align 8 dereferenceable(8) %2, i64 0)\n  %17 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %3, i64 0, i32 0, i32 0\n  store i8* %16, i8** %17, align 8, !tbaa !3\n  %18 = load i64, i64* %2, align 8, !tbaa !15\n  %19 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %3, i64 0, i32 2, i32 0\n  store i64 %18, i64* %19, align 8, !tbaa !16\n  br label %23\n\n20:                                               ; preds = %1\n  %21 = bitcast %union.anon* %11 to i8*\n  %22 = icmp eq i64 %9, 0\n  br i1 %22, label %134, label %23\n\n23:                                               ; preds = %15, %20\n  %24 = phi i8* [ %16, %15 ], [ %21, %20 ]\n  %25 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %3, i64 0, i32 0, i32 0\n  %26 = icmp ult i64 %9, 4\n  br i1 %26, label %81, label %27\n\n27:                                               ; preds = %23\n  %28 = getelementptr i8, i8* %24, i64 %9\n  %29 = icmp ult i8* %24, %10\n  %30 = icmp ult i8* %6, %28\n  %31 = and i1 %29, %30\n  br i1 %31, label %81, label %32\n\n32:                                               ; preds = %27\n  %33 = icmp ult i64 %9, 32\n  br i1 %33, label %62, label %34\n\n34:                                               ; preds = %32\n  %35 = and i64 %9, -32\n  br label %36\n\n36:                                               ; preds = %36, %34\n  %37 = phi i64 [ 0, %34 ], [ %52, %36 ]\n  %38 = getelementptr i8, i8* %24, i64 %37\n  %39 = xor i64 %37, -1\n  %40 = getelementptr i8, i8* %10, i64 %39\n  %41 = getelementptr inbounds i8, i8* %40, i64 -15\n  %42 = bitcast i8* %41 to <16 x i8>*\n  %43 = load <16 x i8>, <16 x i8>* %42, align 1, !tbaa !16, !alias.scope !17\n  %44 = shufflevector <16 x i8> %43, <16 x i8> poison, <16 x i32> <i32 15, i32 14, i32 13, i32 12, i32 11, i32 10, i32 9, i32 8, i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0>\n  %45 = getelementptr inbounds i8, i8* %40, i64 -31\n  %46 = bitcast i8* %45 to <16 x i8>*\n  %47 = load <16 x i8>, <16 x i8>* %46, align 1, !tbaa !16, !alias.scope !17\n  %48 = shufflevector <16 x i8> %47, <16 x i8> poison, <16 x i32> <i32 15, i32 14, i32 13, i32 12, i32 11, i32 10, i32 9, i32 8, i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0>\n  %49 = bitcast i8* %38 to <16 x i8>*\n  store <16 x i8> %44, <16 x i8>* %49, align 1, !tbaa !16, !alias.scope !20, !noalias !17\n  %50 = getelementptr i8, i8* %38, i64 16\n  %51 = bitcast i8* %50 to <16 x i8>*\n  store <16 x i8> %48, <16 x i8>* %51, align 1, !tbaa !16, !alias.scope !20, !noalias !17\n  %52 = add nuw i64 %37, 32\n  %53 = icmp eq i64 %52, %35\n  br i1 %53, label %54, label %36, !llvm.loop !22\n\n54:                                               ; preds = %36\n  %55 = icmp eq i64 %9, %35\n  br i1 %55, label %131, label %56\n\n56:                                               ; preds = %54\n  %57 = getelementptr i8, i8* %24, i64 %35\n  %58 = sub i64 0, %35\n  %59 = getelementptr i8, i8* %10, i64 %58\n  %60 = and i64 %9, 28\n  %61 = icmp eq i64 %60, 0\n  br i1 %61, label %81, label %62\n\n62:                                               ; preds = %32, %56\n  %63 = phi i64 [ %35, %56 ], [ 0, %32 ]\n  %64 = and i64 %9, -4\n  %65 = sub i64 0, %64\n  %66 = getelementptr i8, i8* %10, i64 %65\n  %67 = getelementptr i8, i8* %24, i64 %64\n  br label %68\n\n68:                                               ; preds = %68, %62\n  %69 = phi i64 [ %63, %62 ], [ %77, %68 ]\n  %70 = getelementptr i8, i8* %24, i64 %69\n  %71 = sub nuw nsw i64 -4, %69\n  %72 = getelementptr i8, i8* %10, i64 %71\n  %73 = bitcast i8* %72 to <4 x i8>*\n  %74 = load <4 x i8>, <4 x i8>* %73, align 1, !tbaa !16\n  %75 = shufflevector <4 x i8> %74, <4 x i8> poison, <4 x i32> <i32 3, i32 2, i32 1, i32 0>\n  %76 = bitcast i8* %70 to <4 x i8>*\n  store <4 x i8> %75, <4 x i8>* %76, align 1, !tbaa !16\n  %77 = add nuw i64 %69, 4\n  %78 = icmp eq i64 %77, %64\n  br i1 %78, label %79, label %68, !llvm.loop !25\n\n79:                                               ; preds = %68\n  %80 = icmp eq i64 %9, %64\n  br i1 %80, label %131, label %81\n\n81:                                               ; preds = %27, %23, %56, %79\n  %82 = phi i8* [ %10, %23 ], [ %10, %27 ], [ %59, %56 ], [ %66, %79 ]\n  %83 = phi i8* [ %24, %23 ], [ %24, %27 ], [ %57, %56 ], [ %67, %79 ]\n  %84 = ptrtoint i8* %82 to i64\n  %85 = sub i64 %84, %7\n  %86 = xor i64 %7, -1\n  %87 = add i64 %86, %84\n  %88 = and i64 %85, 7\n  %89 = icmp eq i64 %88, 0\n  br i1 %89, label %99, label %90\n\n90:                                               ; preds = %81, %90\n  %91 = phi i8* [ %94, %90 ], [ %82, %81 ]\n  %92 = phi i8* [ %96, %90 ], [ %83, %81 ]\n  %93 = phi i64 [ %97, %90 ], [ %88, %81 ]\n  %94 = getelementptr inbounds i8, i8* %91, i64 -1\n  %95 = load i8, i8* %94, align 1, !tbaa !16\n  store i8 %95, i8* %92, align 1, !tbaa !16\n  %96 = getelementptr inbounds i8, i8* %92, i64 1\n  %97 = add i64 %93, -1\n  %98 = icmp eq i64 %97, 0\n  br i1 %98, label %99, label %90, !llvm.loop !26\n\n99:                                               ; preds = %90, %81\n  %100 = phi i8* [ %82, %81 ], [ %94, %90 ]\n  %101 = phi i8* [ %83, %81 ], [ %96, %90 ]\n  %102 = icmp ult i64 %87, 7\n  br i1 %102, label %131, label %103\n\n103:                                              ; preds = %99, %103\n  %104 = phi i8* [ %127, %103 ], [ %100, %99 ]\n  %105 = phi i8* [ %129, %103 ], [ %101, %99 ]\n  %106 = getelementptr inbounds i8, i8* %104, i64 -1\n  %107 = load i8, i8* %106, align 1, !tbaa !16\n  store i8 %107, i8* %105, align 1, !tbaa !16\n  %108 = getelementptr inbounds i8, i8* %105, i64 1\n  %109 = getelementptr inbounds i8, i8* %104, i64 -2\n  %110 = load i8, i8* %109, align 1, !tbaa !16\n  store i8 %110, i8* %108, align 1, !tbaa !16\n  %111 = getelementptr inbounds i8, i8* %105, i64 2\n  %112 = getelementptr inbounds i8, i8* %104, i64 -3\n  %113 = load i8, i8* %112, align 1, !tbaa !16\n  store i8 %113, i8* %111, align 1, !tbaa !16\n  %114 = getelementptr inbounds i8, i8* %105, i64 3\n  %115 = getelementptr inbounds i8, i8* %104, i64 -4\n  %116 = load i8, i8* %115, align 1, !tbaa !16\n  store i8 %116, i8* %114, align 1, !tbaa !16\n  %117 = getelementptr inbounds i8, i8* %105, i64 4\n  %118 = getelementptr inbounds i8, i8* %104, i64 -5\n  %119 = load i8, i8* %118, align 1, !tbaa !16\n  store i8 %119, i8* %117, align 1, !tbaa !16\n  %120 = getelementptr inbounds i8, i8* %105, i64 5\n  %121 = getelementptr inbounds i8, i8* %104, i64 -6\n  %122 = load i8, i8* %121, align 1, !tbaa !16\n  store i8 %122, i8* %120, align 1, !tbaa !16\n  %123 = getelementptr inbounds i8, i8* %105, i64 6\n  %124 = getelementptr inbounds i8, i8* %104, i64 -7\n  %125 = load i8, i8* %124, align 1, !tbaa !16\n  store i8 %125, i8* %123, align 1, !tbaa !16\n  %126 = getelementptr inbounds i8, i8* %105, i64 7\n  %127 = getelementptr inbounds i8, i8* %104, i64 -8\n  %128 = load i8, i8* %127, align 1, !tbaa !16\n  store i8 %128, i8* %126, align 1, !tbaa !16\n  %129 = getelementptr inbounds i8, i8* %105, i64 8\n  %130 = icmp eq i8* %127, %6\n  br i1 %130, label %131, label %103, !llvm.loop !28\n\n131:                                              ; preds = %99, %103, %79, %54\n  %132 = load i64, i64* %2, align 8, !tbaa !15\n  %133 = load i8*, i8** %25, align 8, !tbaa !3\n  br label %134\n\n134:                                              ; preds = %131, %20\n  %135 = phi i8* [ %133, %131 ], [ %21, %20 ]\n  %136 = phi i64 [ %132, %131 ], [ 0, %20 ]\n  %137 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %3, i64 0, i32 0, i32 0\n  %138 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %3, i64 0, i32 1\n  store i64 %136, i64* %138, align 8, !tbaa !13\n  %139 = getelementptr inbounds i8, i8* %135, i64 %136\n  store i8 0, i8* %139, align 1, !tbaa !16\n  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %13) #7\n  %140 = load i64, i64* %138, align 8, !tbaa !13\n  %141 = load i64, i64* %8, align 8, !tbaa !13\n  %142 = icmp eq i64 %140, %141\n  br i1 %142, label %143, label %150\n\n143:                                              ; preds = %134\n  %144 = icmp eq i64 %140, 0\n  br i1 %144, label %150, label %145\n\n145:                                              ; preds = %143\n  %146 = load i8*, i8** %5, align 8, !tbaa !3\n  %147 = load i8*, i8** %137, align 8, !tbaa !3\n  %148 = call i32 @bcmp(i8* %147, i8* %146, i64 %140) #7\n  %149 = icmp eq i32 %148, 0\n  br label %150\n\n150:                                              ; preds = %134, %143, %145\n  %151 = phi i1 [ false, %134 ], [ %149, %145 ], [ true, %143 ]\n  %152 = load i8*, i8** %137, align 8, !tbaa !3\n  %153 = bitcast %union.anon* %11 to i8*\n  %154 = icmp eq i8* %152, %153\n  br i1 %154, label %156, label %155\n\n155:                                              ; preds = %150\n  call void @_ZdlPv(i8* %152) #7\n  br label %156\n\n156:                                              ; preds = %150, %155\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %4) #7\n  ret i1 %151\n}\n\n; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn\ndeclare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1\n\ndeclare dso_local i32 @__gxx_personality_v0(...)\n\n; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn\ndeclare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1\n\n; Function Attrs: uwtable\ndefine dso_local void @_Z15make_palindromeNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE(%\"class.std::__cxx11::basic_string\"* noalias sret(%\"class.std::__cxx11::basic_string\") align 8 %0, %\"class.std::__cxx11::basic_string\"* nocapture readonly %1) local_unnamed_addr #0 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {\n  %3 = alloca i64, align 8\n  %4 = alloca i64, align 8\n  %5 = alloca i64, align 8\n  %6 = alloca i64, align 8\n  %7 = alloca i64, align 8\n  %8 = alloca i64, align 8\n  %9 = alloca %\"class.std::__cxx11::basic_string\", align 8\n  %10 = alloca i64, align 8\n  %11 = alloca i64, align 8\n  %12 = alloca %\"class.std::__cxx11::basic_string\", align 8\n  %13 = alloca %\"class.std::__cxx11::basic_string\", align 8\n  %14 = alloca %\"class.std::__cxx11::basic_string\", align 8\n  %15 = alloca %\"class.std::__cxx11::basic_string\", align 8\n  %16 = alloca %\"class.std::__cxx11::basic_string\", align 8\n  %17 = alloca %\"class.std::__cxx11::basic_string\", align 8\n  %18 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %1, i64 0, i32 1\n  %19 = bitcast %\"class.std::__cxx11::basic_string\"* %12 to i8*\n  %20 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %12, i64 0, i32 2\n  %21 = bitcast %\"class.std::__cxx11::basic_string\"* %12 to %union.anon**\n  %22 = bitcast %union.anon* %20 to i8*\n  %23 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %1, i64 0, i32 0, i32 0\n  %24 = bitcast i64* %11 to i8*\n  %25 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %12, i64 0, i32 0, i32 0\n  %26 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %12, i64 0, i32 2, i32 0\n  %27 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %12, i64 0, i32 1\n  %28 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %13, i64 0, i32 2\n  %29 = bitcast %\"class.std::__cxx11::basic_string\"* %13 to %union.anon**\n  %30 = bitcast i64* %10 to i8*\n  %31 = bitcast %union.anon* %28 to i8*\n  %32 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %13, i64 0, i32 0, i32 0\n  %33 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %13, i64 0, i32 2, i32 0\n  %34 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %13, i64 0, i32 1\n  %35 = bitcast %\"class.std::__cxx11::basic_string\"* %9 to i8*\n  %36 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %9, i64 0, i32 2\n  %37 = bitcast %\"class.std::__cxx11::basic_string\"* %9 to %union.anon**\n  %38 = bitcast i64* %8 to i8*\n  %39 = bitcast %union.anon* %36 to i8*\n  %40 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %9, i64 0, i32 0, i32 0\n  %41 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %9, i64 0, i32 2, i32 0\n  %42 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %9, i64 0, i32 1\n  %43 = bitcast %\"class.std::__cxx11::basic_string\"* %14 to i8*\n  %44 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %14, i64 0, i32 2\n  %45 = bitcast %\"class.std::__cxx11::basic_string\"* %14 to %union.anon**\n  %46 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %14, i64 0, i32 1\n  %47 = bitcast %union.anon* %44 to i8*\n  %48 = bitcast %\"class.std::__cxx11::basic_string\"* %15 to i8*\n  %49 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %15, i64 0, i32 2\n  %50 = bitcast %\"class.std::__cxx11::basic_string\"* %15 to %union.anon**\n  %51 = bitcast %union.anon* %49 to i8*\n  %52 = bitcast i64* %7 to i8*\n  %53 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %15, i64 0, i32 0, i32 0\n  %54 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %15, i64 0, i32 2, i32 0\n  %55 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %15, i64 0, i32 1\n  %56 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %14, i64 0, i32 0, i32 0\n  %57 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %14, i64 0, i32 2, i32 0\n  %58 = bitcast %\"class.std::__cxx11::basic_string\"* %16 to i8*\n  %59 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %16, i64 0, i32 2\n  %60 = bitcast %\"class.std::__cxx11::basic_string\"* %16 to %union.anon**\n  %61 = bitcast i64* %6 to i8*\n  %62 = bitcast %union.anon* %59 to i8*\n  %63 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %16, i64 0, i32 0, i32 0\n  %64 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %16, i64 0, i32 2, i32 0\n  %65 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %16, i64 0, i32 1\n  %66 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 2\n  %67 = bitcast %\"class.std::__cxx11::basic_string\"* %0 to %union.anon**\n  %68 = bitcast i64* %5 to i8*\n  %69 = bitcast %union.anon* %66 to i8*\n  %70 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 0, i32 0\n  %71 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 2, i32 0\n  %72 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 1\n  %73 = load i64, i64* %18, align 8, !tbaa !13\n  %74 = icmp eq i64 %73, 0\n  br i1 %74, label %509, label %75\n\n75:                                               ; preds = %2, %499\n  %76 = phi i64 [ %500, %499 ], [ 0, %2 ]\n  %77 = phi i64 [ %501, %499 ], [ %73, %2 ]\n  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %19) #7\n  call void @llvm.experimental.noalias.scope.decl(metadata !29)\n  store %union.anon* %20, %union.anon** %21, align 8, !tbaa !14, !alias.scope !29\n  %78 = load i8*, i8** %23, align 8, !tbaa !3, !noalias !29\n  %79 = getelementptr inbounds i8, i8* %78, i64 %76\n  %80 = sub i64 %77, %76\n  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %24) #7, !noalias !29\n  store i64 %80, i64* %11, align 8, !tbaa !15, !noalias !29\n  %81 = icmp ugt i64 %80, 15\n  br i1 %81, label %82, label %85\n\n82:                                               ; preds = %75\n  %83 = call i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %12, i64* nonnull align 8 dereferenceable(8) %11, i64 0)\n  store i8* %83, i8** %25, align 8, !tbaa !3, !alias.scope !29\n  %84 = load i64, i64* %11, align 8, !tbaa !15, !noalias !29\n  store i64 %84, i64* %26, align 8, !tbaa !16, !alias.scope !29\n  br label %85\n\n85:                                               ; preds = %82, %75\n  %86 = phi i8* [ %83, %82 ], [ %22, %75 ]\n  switch i64 %80, label %89 [\n    i64 1, label %87\n    i64 0, label %90\n  ]\n\n87:                                               ; preds = %85\n  %88 = load i8, i8* %79, align 1, !tbaa !16\n  store i8 %88, i8* %86, align 1, !tbaa !16\n  br label %90\n\n89:                                               ; preds = %85\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %86, i8* align 1 %79, i64 %80, i1 false) #7\n  br label %90\n\n90:                                               ; preds = %85, %87, %89\n  %91 = load i64, i64* %11, align 8, !tbaa !15, !noalias !29\n  store i64 %91, i64* %27, align 8, !tbaa !13, !alias.scope !29\n  %92 = load i8*, i8** %25, align 8, !tbaa !3, !alias.scope !29\n  %93 = getelementptr inbounds i8, i8* %92, i64 %91\n  store i8 0, i8* %93, align 1, !tbaa !16\n  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %24) #7, !noalias !29\n  store %union.anon* %28, %union.anon** %29, align 8, !tbaa !14\n  %94 = load i8*, i8** %25, align 8, !tbaa !3\n  %95 = load i64, i64* %27, align 8, !tbaa !13\n  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %30) #7\n  store i64 %95, i64* %10, align 8, !tbaa !15\n  %96 = icmp ugt i64 %95, 15\n  br i1 %96, label %97, label %101\n\n97:                                               ; preds = %90\n  %98 = invoke i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %13, i64* nonnull align 8 dereferenceable(8) %10, i64 0)\n          to label %99 unwind label %469\n\n99:                                               ; preds = %97\n  store i8* %98, i8** %32, align 8, !tbaa !3\n  %100 = load i64, i64* %10, align 8, !tbaa !15\n  store i64 %100, i64* %33, align 8, !tbaa !16\n  br label %101\n\n101:                                              ; preds = %90, %99\n  %102 = phi i8* [ %98, %99 ], [ %31, %90 ]\n  switch i64 %95, label %105 [\n    i64 1, label %103\n    i64 0, label %106\n  ]\n\n103:                                              ; preds = %101\n  %104 = load i8, i8* %94, align 1, !tbaa !16\n  store i8 %104, i8* %102, align 1, !tbaa !16\n  br label %106\n\n105:                                              ; preds = %101\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %102, i8* align 1 %94, i64 %95, i1 false) #7\n  br label %106\n\n106:                                              ; preds = %105, %103, %101\n  %107 = load i64, i64* %10, align 8, !tbaa !15\n  store i64 %107, i64* %34, align 8, !tbaa !13\n  %108 = load i8*, i8** %32, align 8, !tbaa !3\n  %109 = getelementptr inbounds i8, i8* %108, i64 %107\n  store i8 0, i8* %109, align 1, !tbaa !16\n  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %30) #7\n  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %35) #7\n  %110 = load i8*, i8** %32, align 8, !tbaa !3, !noalias !32\n  %111 = ptrtoint i8* %110 to i64\n  %112 = load i64, i64* %34, align 8, !tbaa !13, !noalias !32\n  %113 = getelementptr inbounds i8, i8* %110, i64 %112\n  store %union.anon* %36, %union.anon** %37, align 8, !tbaa !14\n  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %38) #7\n  store i64 %112, i64* %8, align 8, !tbaa !15\n  %114 = icmp ugt i64 %112, 15\n  br i1 %114, label %115, label %119\n\n115:                                              ; preds = %106\n  %116 = invoke i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %9, i64* nonnull align 8 dereferenceable(8) %8, i64 0)\n          to label %117 unwind label %471\n\n117:                                              ; preds = %115\n  store i8* %116, i8** %40, align 8, !tbaa !3\n  %118 = load i64, i64* %8, align 8, !tbaa !15\n  store i64 %118, i64* %41, align 8, !tbaa !16\n  br label %121\n\n119:                                              ; preds = %106\n  %120 = icmp eq i64 %112, 0\n  br i1 %120, label %231, label %121\n\n121:                                              ; preds = %119, %117\n  %122 = phi i8* [ %116, %117 ], [ %39, %119 ]\n  %123 = icmp ult i64 %112, 4\n  br i1 %123, label %178, label %124\n\n124:                                              ; preds = %121\n  %125 = getelementptr i8, i8* %122, i64 %112\n  %126 = icmp ult i8* %122, %113\n  %127 = icmp ult i8* %110, %125\n  %128 = and i1 %126, %127\n  br i1 %128, label %178, label %129\n\n129:                                              ; preds = %124\n  %130 = icmp ult i64 %112, 32\n  br i1 %130, label %159, label %131\n\n131:                                              ; preds = %129\n  %132 = and i64 %112, -32\n  br label %133\n\n133:                                              ; preds = %133, %131\n  %134 = phi i64 [ 0, %131 ], [ %149, %133 ]\n  %135 = getelementptr i8, i8* %122, i64 %134\n  %136 = xor i64 %134, -1\n  %137 = getelementptr i8, i8* %113, i64 %136\n  %138 = getelementptr inbounds i8, i8* %137, i64 -15\n  %139 = bitcast i8* %138 to <16 x i8>*\n  %140 = load <16 x i8>, <16 x i8>* %139, align 1, !tbaa !16, !alias.scope !35\n  %141 = shufflevector <16 x i8> %140, <16 x i8> poison, <16 x i32> <i32 15, i32 14, i32 13, i32 12, i32 11, i32 10, i32 9, i32 8, i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0>\n  %142 = getelementptr inbounds i8, i8* %137, i64 -31\n  %143 = bitcast i8* %142 to <16 x i8>*\n  %144 = load <16 x i8>, <16 x i8>* %143, align 1, !tbaa !16, !alias.scope !35\n  %145 = shufflevector <16 x i8> %144, <16 x i8> poison, <16 x i32> <i32 15, i32 14, i32 13, i32 12, i32 11, i32 10, i32 9, i32 8, i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0>\n  %146 = bitcast i8* %135 to <16 x i8>*\n  store <16 x i8> %141, <16 x i8>* %146, align 1, !tbaa !16, !alias.scope !38, !noalias !35\n  %147 = getelementptr i8, i8* %135, i64 16\n  %148 = bitcast i8* %147 to <16 x i8>*\n  store <16 x i8> %145, <16 x i8>* %148, align 1, !tbaa !16, !alias.scope !38, !noalias !35\n  %149 = add nuw i64 %134, 32\n  %150 = icmp eq i64 %149, %132\n  br i1 %150, label %151, label %133, !llvm.loop !40\n\n151:                                              ; preds = %133\n  %152 = icmp eq i64 %112, %132\n  br i1 %152, label %228, label %153\n\n153:                                              ; preds = %151\n  %154 = getelementptr i8, i8* %122, i64 %132\n  %155 = sub i64 0, %132\n  %156 = getelementptr i8, i8* %113, i64 %155\n  %157 = and i64 %112, 28\n  %158 = icmp eq i64 %157, 0\n  br i1 %158, label %178, label %159\n\n159:                                              ; preds = %129, %153\n  %160 = phi i64 [ %132, %153 ], [ 0, %129 ]\n  %161 = and i64 %112, -4\n  %162 = sub i64 0, %161\n  %163 = getelementptr i8, i8* %113, i64 %162\n  %164 = getelementptr i8, i8* %122, i64 %161\n  br label %165\n\n165:                                              ; preds = %165, %159\n  %166 = phi i64 [ %160, %159 ], [ %174, %165 ]\n  %167 = getelementptr i8, i8* %122, i64 %166\n  %168 = sub nuw nsw i64 -4, %166\n  %169 = getelementptr i8, i8* %113, i64 %168\n  %170 = bitcast i8* %169 to <4 x i8>*\n  %171 = load <4 x i8>, <4 x i8>* %170, align 1, !tbaa !16\n  %172 = shufflevector <4 x i8> %171, <4 x i8> poison, <4 x i32> <i32 3, i32 2, i32 1, i32 0>\n  %173 = bitcast i8* %167 to <4 x i8>*\n  store <4 x i8> %172, <4 x i8>* %173, align 1, !tbaa !16\n  %174 = add nuw i64 %166, 4\n  %175 = icmp eq i64 %174, %161\n  br i1 %175, label %176, label %165, !llvm.loop !41\n\n176:                                              ; preds = %165\n  %177 = icmp eq i64 %112, %161\n  br i1 %177, label %228, label %178\n\n178:                                              ; preds = %124, %121, %153, %176\n  %179 = phi i8* [ %113, %121 ], [ %113, %124 ], [ %156, %153 ], [ %163, %176 ]\n  %180 = phi i8* [ %122, %121 ], [ %122, %124 ], [ %154, %153 ], [ %164, %176 ]\n  %181 = ptrtoint i8* %179 to i64\n  %182 = sub i64 %181, %111\n  %183 = xor i64 %111, -1\n  %184 = add i64 %183, %181\n  %185 = and i64 %182, 7\n  %186 = icmp eq i64 %185, 0\n  br i1 %186, label %196, label %187\n\n187:                                              ; preds = %178, %187\n  %188 = phi i8* [ %191, %187 ], [ %179, %178 ]\n  %189 = phi i8* [ %193, %187 ], [ %180, %178 ]\n  %190 = phi i64 [ %194, %187 ], [ %185, %178 ]\n  %191 = getelementptr inbounds i8, i8* %188, i64 -1\n  %192 = load i8, i8* %191, align 1, !tbaa !16\n  store i8 %192, i8* %189, align 1, !tbaa !16\n  %193 = getelementptr inbounds i8, i8* %189, i64 1\n  %194 = add i64 %190, -1\n  %195 = icmp eq i64 %194, 0\n  br i1 %195, label %196, label %187, !llvm.loop !42\n\n196:                                              ; preds = %187, %178\n  %197 = phi i8* [ %179, %178 ], [ %191, %187 ]\n  %198 = phi i8* [ %180, %178 ], [ %193, %187 ]\n  %199 = icmp ult i64 %184, 7\n  br i1 %199, label %228, label %200\n\n200:                                              ; preds = %196, %200\n  %201 = phi i8* [ %224, %200 ], [ %197, %196 ]\n  %202 = phi i8* [ %226, %200 ], [ %198, %196 ]\n  %203 = getelementptr inbounds i8, i8* %201, i64 -1\n  %204 = load i8, i8* %203, align 1, !tbaa !16\n  store i8 %204, i8* %202, align 1, !tbaa !16\n  %205 = getelementptr inbounds i8, i8* %202, i64 1\n  %206 = getelementptr inbounds i8, i8* %201, i64 -2\n  %207 = load i8, i8* %206, align 1, !tbaa !16\n  store i8 %207, i8* %205, align 1, !tbaa !16\n  %208 = getelementptr inbounds i8, i8* %202, i64 2\n  %209 = getelementptr inbounds i8, i8* %201, i64 -3\n  %210 = load i8, i8* %209, align 1, !tbaa !16\n  store i8 %210, i8* %208, align 1, !tbaa !16\n  %211 = getelementptr inbounds i8, i8* %202, i64 3\n  %212 = getelementptr inbounds i8, i8* %201, i64 -4\n  %213 = load i8, i8* %212, align 1, !tbaa !16\n  store i8 %213, i8* %211, align 1, !tbaa !16\n  %214 = getelementptr inbounds i8, i8* %202, i64 4\n  %215 = getelementptr inbounds i8, i8* %201, i64 -5\n  %216 = load i8, i8* %215, align 1, !tbaa !16\n  store i8 %216, i8* %214, align 1, !tbaa !16\n  %217 = getelementptr inbounds i8, i8* %202, i64 5\n  %218 = getelementptr inbounds i8, i8* %201, i64 -6\n  %219 = load i8, i8* %218, align 1, !tbaa !16\n  store i8 %219, i8* %217, align 1, !tbaa !16\n  %220 = getelementptr inbounds i8, i8* %202, i64 6\n  %221 = getelementptr inbounds i8, i8* %201, i64 -7\n  %222 = load i8, i8* %221, align 1, !tbaa !16\n  store i8 %222, i8* %220, align 1, !tbaa !16\n  %223 = getelementptr inbounds i8, i8* %202, i64 7\n  %224 = getelementptr inbounds i8, i8* %201, i64 -8\n  %225 = load i8, i8* %224, align 1, !tbaa !16\n  store i8 %225, i8* %223, align 1, !tbaa !16\n  %226 = getelementptr inbounds i8, i8* %202, i64 8\n  %227 = icmp eq i8* %224, %110\n  br i1 %227, label %228, label %200, !llvm.loop !43\n\n228:                                              ; preds = %196, %200, %176, %151\n  %229 = load i64, i64* %8, align 8, !tbaa !15\n  %230 = load i8*, i8** %40, align 8, !tbaa !3\n  br label %231\n\n231:                                              ; preds = %228, %119\n  %232 = phi i8* [ %230, %228 ], [ %39, %119 ]\n  %233 = phi i64 [ %229, %228 ], [ 0, %119 ]\n  store i64 %233, i64* %42, align 8, !tbaa !13\n  %234 = getelementptr inbounds i8, i8* %232, i64 %233\n  store i8 0, i8* %234, align 1, !tbaa !16\n  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %38) #7\n  %235 = load i64, i64* %42, align 8, !tbaa !13\n  %236 = load i64, i64* %34, align 8, !tbaa !13\n  %237 = icmp eq i64 %235, %236\n  br i1 %237, label %238, label %245\n\n238:                                              ; preds = %231\n  %239 = icmp eq i64 %235, 0\n  br i1 %239, label %245, label %240\n\n240:                                              ; preds = %238\n  %241 = load i8*, i8** %32, align 8, !tbaa !3\n  %242 = load i8*, i8** %40, align 8, !tbaa !3\n  %243 = call i32 @bcmp(i8* %242, i8* %241, i64 %235) #7\n  %244 = icmp eq i32 %243, 0\n  br label %245\n\n245:                                              ; preds = %240, %238, %231\n  %246 = phi i1 [ false, %231 ], [ %244, %240 ], [ true, %238 ]\n  %247 = load i8*, i8** %40, align 8, !tbaa !3\n  %248 = icmp eq i8* %247, %39\n  br i1 %248, label %250, label %249\n\n249:                                              ; preds = %245\n  call void @_ZdlPv(i8* %247) #7\n  br label %250\n\n250:                                              ; preds = %249, %245\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %35) #7\n  %251 = load i8*, i8** %32, align 8, !tbaa !3\n  %252 = icmp eq i8* %251, %31\n  br i1 %252, label %254, label %253\n\n253:                                              ; preds = %250\n  call void @_ZdlPv(i8* %251) #7\n  br label %254\n\n254:                                              ; preds = %250, %253\n  br i1 %246, label %255, label %495\n\n255:                                              ; preds = %254\n  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %43) #7\n  store %union.anon* %44, %union.anon** %45, align 8, !tbaa !14\n  store i64 0, i64* %46, align 8, !tbaa !13\n  store i8 0, i8* %47, align 8, !tbaa !16\n  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %48) #7\n  call void @llvm.experimental.noalias.scope.decl(metadata !44)\n  %256 = load i64, i64* %18, align 8, !tbaa !13, !noalias !44\n  store %union.anon* %49, %union.anon** %50, align 8, !tbaa !14, !alias.scope !44\n  %257 = load i8*, i8** %23, align 8, !tbaa !3, !noalias !44\n  %258 = icmp ugt i64 %256, %76\n  %259 = select i1 %258, i64 %76, i64 %256\n  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %52) #7, !noalias !44\n  store i64 %259, i64* %7, align 8, !tbaa !15, !noalias !44\n  %260 = icmp ugt i64 %259, 15\n  br i1 %260, label %261, label %265\n\n261:                                              ; preds = %255\n  %262 = invoke i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %15, i64* nonnull align 8 dereferenceable(8) %7, i64 0)\n          to label %263 unwind label %476\n\n263:                                              ; preds = %261\n  store i8* %262, i8** %53, align 8, !tbaa !3, !alias.scope !44\n  %264 = load i64, i64* %7, align 8, !tbaa !15, !noalias !44\n  store i64 %264, i64* %54, align 8, !tbaa !16, !alias.scope !44\n  br label %265\n\n265:                                              ; preds = %263, %255\n  %266 = phi i8* [ %262, %263 ], [ %51, %255 ]\n  %267 = trunc i64 %259 to i32\n  switch i32 %267, label %270 [\n    i32 1, label %268\n    i32 0, label %271\n  ]\n\n268:                                              ; preds = %265\n  %269 = load i8, i8* %257, align 1, !tbaa !16\n  store i8 %269, i8* %266, align 1, !tbaa !16\n  br label %271\n\n270:                                              ; preds = %265\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %266, i8* align 1 %257, i64 %259, i1 false) #7\n  br label %271\n\n271:                                              ; preds = %270, %268, %265\n  %272 = load i64, i64* %7, align 8, !tbaa !15, !noalias !44\n  store i64 %272, i64* %55, align 8, !tbaa !13, !alias.scope !44\n  %273 = load i8*, i8** %53, align 8, !tbaa !3, !alias.scope !44\n  %274 = getelementptr inbounds i8, i8* %273, i64 %272\n  store i8 0, i8* %274, align 1, !tbaa !16\n  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %52) #7, !noalias !44\n  %275 = load i8*, i8** %53, align 8, !tbaa !3\n  %276 = icmp eq i8* %275, %51\n  br i1 %276, label %277, label %291\n\n277:                                              ; preds = %271\n  %278 = load i64, i64* %55, align 8, !tbaa !13\n  %279 = icmp eq i64 %278, 0\n  br i1 %279, label %286, label %280\n\n280:                                              ; preds = %277\n  %281 = load i8*, i8** %56, align 8, !tbaa !3\n  %282 = icmp eq i64 %278, 1\n  br i1 %282, label %283, label %285\n\n283:                                              ; preds = %280\n  %284 = load i8, i8* %51, align 8, !tbaa !16\n  store i8 %284, i8* %281, align 1, !tbaa !16\n  br label %286\n\n285:                                              ; preds = %280\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %281, i8* nonnull align 8 %51, i64 %278, i1 false) #7\n  br label %286\n\n286:                                              ; preds = %285, %283, %277\n  %287 = load i64, i64* %55, align 8, !tbaa !13\n  store i64 %287, i64* %46, align 8, !tbaa !13\n  %288 = load i8*, i8** %56, align 8, !tbaa !3\n  %289 = getelementptr inbounds i8, i8* %288, i64 %287\n  store i8 0, i8* %289, align 1, !tbaa !16\n  %290 = load i8*, i8** %53, align 8, !tbaa !3\n  br label %302\n\n291:                                              ; preds = %271\n  %292 = load i8*, i8** %56, align 8, !tbaa !3\n  %293 = icmp eq i8* %292, %47\n  %294 = load i64, i64* %57, align 8\n  store i8* %275, i8** %56, align 8, !tbaa !3\n  %295 = bitcast i64* %55 to <2 x i64>*\n  %296 = load <2 x i64>, <2 x i64>* %295, align 8, !tbaa !16\n  %297 = bitcast i64* %46 to <2 x i64>*\n  store <2 x i64> %296, <2 x i64>* %297, align 8, !tbaa !16\n  %298 = icmp eq i8* %292, null\n  %299 = or i1 %293, %298\n  br i1 %299, label %301, label %300\n\n300:                                              ; preds = %291\n  store i8* %292, i8** %53, align 8, !tbaa !3\n  store i64 %294, i64* %54, align 8, !tbaa !16\n  br label %302\n\n301:                                              ; preds = %291\n  store %union.anon* %49, %union.anon** %50, align 8, !tbaa !3\n  br label %302\n\n302:                                              ; preds = %286, %300, %301\n  %303 = phi i8* [ %290, %286 ], [ %292, %300 ], [ %51, %301 ]\n  store i64 0, i64* %55, align 8, !tbaa !13\n  store i8 0, i8* %303, align 1, !tbaa !16\n  %304 = load i8*, i8** %53, align 8, !tbaa !3\n  %305 = icmp eq i8* %304, %51\n  br i1 %305, label %307, label %306\n\n306:                                              ; preds = %302\n  call void @_ZdlPv(i8* %304) #7\n  br label %307\n\n307:                                              ; preds = %302, %306\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %48) #7\n  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %58) #7\n  %308 = load i8*, i8** %56, align 8, !tbaa !3, !noalias !47\n  %309 = ptrtoint i8* %308 to i64\n  %310 = load i64, i64* %46, align 8, !tbaa !13, !noalias !47\n  %311 = getelementptr inbounds i8, i8* %308, i64 %310\n  store %union.anon* %59, %union.anon** %60, align 8, !tbaa !14\n  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %61) #7\n  store i64 %310, i64* %6, align 8, !tbaa !15\n  %312 = icmp ugt i64 %310, 15\n  br i1 %312, label %313, label %317\n\n313:                                              ; preds = %307\n  %314 = invoke i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %16, i64* nonnull align 8 dereferenceable(8) %6, i64 0)\n          to label %315 unwind label %478\n\n315:                                              ; preds = %313\n  store i8* %314, i8** %63, align 8, !tbaa !3\n  %316 = load i64, i64* %6, align 8, !tbaa !15\n  store i64 %316, i64* %64, align 8, !tbaa !16\n  br label %319\n\n317:                                              ; preds = %307\n  %318 = icmp eq i64 %310, 0\n  br i1 %318, label %429, label %319\n\n319:                                              ; preds = %315, %317\n  %320 = phi i8* [ %314, %315 ], [ %62, %317 ]\n  %321 = icmp ult i64 %310, 4\n  br i1 %321, label %376, label %322\n\n322:                                              ; preds = %319\n  %323 = getelementptr i8, i8* %320, i64 %310\n  %324 = icmp ult i8* %320, %311\n  %325 = icmp ult i8* %308, %323\n  %326 = and i1 %324, %325\n  br i1 %326, label %376, label %327\n\n327:                                              ; preds = %322\n  %328 = icmp ult i64 %310, 32\n  br i1 %328, label %357, label %329\n\n329:                                              ; preds = %327\n  %330 = and i64 %310, -32\n  br label %331\n\n331:                                              ; preds = %331, %329\n  %332 = phi i64 [ 0, %329 ], [ %347, %331 ]\n  %333 = getelementptr i8, i8* %320, i64 %332\n  %334 = xor i64 %332, -1\n  %335 = getelementptr i8, i8* %311, i64 %334\n  %336 = getelementptr inbounds i8, i8* %335, i64 -15\n  %337 = bitcast i8* %336 to <16 x i8>*\n  %338 = load <16 x i8>, <16 x i8>* %337, align 1, !tbaa !16, !alias.scope !50\n  %339 = shufflevector <16 x i8> %338, <16 x i8> poison, <16 x i32> <i32 15, i32 14, i32 13, i32 12, i32 11, i32 10, i32 9, i32 8, i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0>\n  %340 = getelementptr inbounds i8, i8* %335, i64 -31\n  %341 = bitcast i8* %340 to <16 x i8>*\n  %342 = load <16 x i8>, <16 x i8>* %341, align 1, !tbaa !16, !alias.scope !50\n  %343 = shufflevector <16 x i8> %342, <16 x i8> poison, <16 x i32> <i32 15, i32 14, i32 13, i32 12, i32 11, i32 10, i32 9, i32 8, i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0>\n  %344 = bitcast i8* %333 to <16 x i8>*\n  store <16 x i8> %339, <16 x i8>* %344, align 1, !tbaa !16, !alias.scope !53, !noalias !50\n  %345 = getelementptr i8, i8* %333, i64 16\n  %346 = bitcast i8* %345 to <16 x i8>*\n  store <16 x i8> %343, <16 x i8>* %346, align 1, !tbaa !16, !alias.scope !53, !noalias !50\n  %347 = add nuw i64 %332, 32\n  %348 = icmp eq i64 %347, %330\n  br i1 %348, label %349, label %331, !llvm.loop !55\n\n349:                                              ; preds = %331\n  %350 = icmp eq i64 %310, %330\n  br i1 %350, label %426, label %351\n\n351:                                              ; preds = %349\n  %352 = getelementptr i8, i8* %320, i64 %330\n  %353 = sub i64 0, %330\n  %354 = getelementptr i8, i8* %311, i64 %353\n  %355 = and i64 %310, 28\n  %356 = icmp eq i64 %355, 0\n  br i1 %356, label %376, label %357\n\n357:                                              ; preds = %327, %351\n  %358 = phi i64 [ %330, %351 ], [ 0, %327 ]\n  %359 = and i64 %310, -4\n  %360 = sub i64 0, %359\n  %361 = getelementptr i8, i8* %311, i64 %360\n  %362 = getelementptr i8, i8* %320, i64 %359\n  br label %363\n\n363:                                              ; preds = %363, %357\n  %364 = phi i64 [ %358, %357 ], [ %372, %363 ]\n  %365 = getelementptr i8, i8* %320, i64 %364\n  %366 = sub nuw nsw i64 -4, %364\n  %367 = getelementptr i8, i8* %311, i64 %366\n  %368 = bitcast i8* %367 to <4 x i8>*\n  %369 = load <4 x i8>, <4 x i8>* %368, align 1, !tbaa !16\n  %370 = shufflevector <4 x i8> %369, <4 x i8> poison, <4 x i32> <i32 3, i32 2, i32 1, i32 0>\n  %371 = bitcast i8* %365 to <4 x i8>*\n  store <4 x i8> %370, <4 x i8>* %371, align 1, !tbaa !16\n  %372 = add nuw i64 %364, 4\n  %373 = icmp eq i64 %372, %359\n  br i1 %373, label %374, label %363, !llvm.loop !56\n\n374:                                              ; preds = %363\n  %375 = icmp eq i64 %310, %359\n  br i1 %375, label %426, label %376\n\n376:                                              ; preds = %322, %319, %351, %374\n  %377 = phi i8* [ %311, %319 ], [ %311, %322 ], [ %354, %351 ], [ %361, %374 ]\n  %378 = phi i8* [ %320, %319 ], [ %320, %322 ], [ %352, %351 ], [ %362, %374 ]\n  %379 = ptrtoint i8* %377 to i64\n  %380 = sub i64 %379, %309\n  %381 = xor i64 %309, -1\n  %382 = add i64 %381, %379\n  %383 = and i64 %380, 7\n  %384 = icmp eq i64 %383, 0\n  br i1 %384, label %394, label %385\n\n385:                                              ; preds = %376, %385\n  %386 = phi i8* [ %389, %385 ], [ %377, %376 ]\n  %387 = phi i8* [ %391, %385 ], [ %378, %376 ]\n  %388 = phi i64 [ %392, %385 ], [ %383, %376 ]\n  %389 = getelementptr inbounds i8, i8* %386, i64 -1\n  %390 = load i8, i8* %389, align 1, !tbaa !16\n  store i8 %390, i8* %387, align 1, !tbaa !16\n  %391 = getelementptr inbounds i8, i8* %387, i64 1\n  %392 = add i64 %388, -1\n  %393 = icmp eq i64 %392, 0\n  br i1 %393, label %394, label %385, !llvm.loop !57\n\n394:                                              ; preds = %385, %376\n  %395 = phi i8* [ %377, %376 ], [ %389, %385 ]\n  %396 = phi i8* [ %378, %376 ], [ %391, %385 ]\n  %397 = icmp ult i64 %382, 7\n  br i1 %397, label %426, label %398\n\n398:                                              ; preds = %394, %398\n  %399 = phi i8* [ %422, %398 ], [ %395, %394 ]\n  %400 = phi i8* [ %424, %398 ], [ %396, %394 ]\n  %401 = getelementptr inbounds i8, i8* %399, i64 -1\n  %402 = load i8, i8* %401, align 1, !tbaa !16\n  store i8 %402, i8* %400, align 1, !tbaa !16\n  %403 = getelementptr inbounds i8, i8* %400, i64 1\n  %404 = getelementptr inbounds i8, i8* %399, i64 -2\n  %405 = load i8, i8* %404, align 1, !tbaa !16\n  store i8 %405, i8* %403, align 1, !tbaa !16\n  %406 = getelementptr inbounds i8, i8* %400, i64 2\n  %407 = getelementptr inbounds i8, i8* %399, i64 -3\n  %408 = load i8, i8* %407, align 1, !tbaa !16\n  store i8 %408, i8* %406, align 1, !tbaa !16\n  %409 = getelementptr inbounds i8, i8* %400, i64 3\n  %410 = getelementptr inbounds i8, i8* %399, i64 -4\n  %411 = load i8, i8* %410, align 1, !tbaa !16\n  store i8 %411, i8* %409, align 1, !tbaa !16\n  %412 = getelementptr inbounds i8, i8* %400, i64 4\n  %413 = getelementptr inbounds i8, i8* %399, i64 -5\n  %414 = load i8, i8* %413, align 1, !tbaa !16\n  store i8 %414, i8* %412, align 1, !tbaa !16\n  %415 = getelementptr inbounds i8, i8* %400, i64 5\n  %416 = getelementptr inbounds i8, i8* %399, i64 -6\n  %417 = load i8, i8* %416, align 1, !tbaa !16\n  store i8 %417, i8* %415, align 1, !tbaa !16\n  %418 = getelementptr inbounds i8, i8* %400, i64 6\n  %419 = getelementptr inbounds i8, i8* %399, i64 -7\n  %420 = load i8, i8* %419, align 1, !tbaa !16\n  store i8 %420, i8* %418, align 1, !tbaa !16\n  %421 = getelementptr inbounds i8, i8* %400, i64 7\n  %422 = getelementptr inbounds i8, i8* %399, i64 -8\n  %423 = load i8, i8* %422, align 1, !tbaa !16\n  store i8 %423, i8* %421, align 1, !tbaa !16\n  %424 = getelementptr inbounds i8, i8* %400, i64 8\n  %425 = icmp eq i8* %422, %308\n  br i1 %425, label %426, label %398, !llvm.loop !58\n\n426:                                              ; preds = %394, %398, %374, %349\n  %427 = load i64, i64* %6, align 8, !tbaa !15\n  %428 = load i8*, i8** %63, align 8, !tbaa !3\n  br label %429\n\n429:                                              ; preds = %426, %317\n  %430 = phi i8* [ %428, %426 ], [ %62, %317 ]\n  %431 = phi i64 [ %427, %426 ], [ %310, %317 ]\n  store i64 %431, i64* %65, align 8, !tbaa !13\n  %432 = getelementptr inbounds i8, i8* %430, i64 %431\n  store i8 0, i8* %432, align 1, !tbaa !16\n  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %61) #7\n  call void @llvm.experimental.noalias.scope.decl(metadata !59)\n  store %union.anon* %66, %union.anon** %67, align 8, !tbaa !14, !alias.scope !59\n  %433 = load i8*, i8** %23, align 8, !tbaa !3, !noalias !59\n  %434 = load i64, i64* %18, align 8, !tbaa !13, !noalias !59\n  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %68) #7, !noalias !59\n  store i64 %434, i64* %5, align 8, !tbaa !15, !noalias !59\n  %435 = icmp ugt i64 %434, 15\n  br i1 %435, label %436, label %440\n\n436:                                              ; preds = %429\n  %437 = invoke i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %0, i64* nonnull align 8 dereferenceable(8) %5, i64 0)\n          to label %438 unwind label %480\n\n438:                                              ; preds = %436\n  store i8* %437, i8** %70, align 8, !tbaa !3, !alias.scope !59\n  %439 = load i64, i64* %5, align 8, !tbaa !15, !noalias !59\n  store i64 %439, i64* %71, align 8, !tbaa !16, !alias.scope !59\n  br label %440\n\n440:                                              ; preds = %429, %438\n  %441 = phi i8* [ %437, %438 ], [ %69, %429 ]\n  switch i64 %434, label %444 [\n    i64 1, label %442\n    i64 0, label %445\n  ]\n\n442:                                              ; preds = %440\n  %443 = load i8, i8* %433, align 1, !tbaa !16\n  store i8 %443, i8* %441, align 1, !tbaa !16\n  br label %445\n\n444:                                              ; preds = %440\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %441, i8* align 1 %433, i64 %434, i1 false) #7\n  br label %445\n\n445:                                              ; preds = %444, %442, %440\n  %446 = load i64, i64* %5, align 8, !tbaa !15, !noalias !59\n  store i64 %446, i64* %72, align 8, !tbaa !13, !alias.scope !59\n  %447 = load i8*, i8** %70, align 8, !tbaa !3, !alias.scope !59\n  %448 = getelementptr inbounds i8, i8* %447, i64 %446\n  store i8 0, i8* %448, align 1, !tbaa !16\n  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %68) #7, !noalias !59\n  %449 = load i8*, i8** %63, align 8, !tbaa !3, !noalias !59\n  %450 = load i64, i64* %65, align 8, !tbaa !13, !noalias !59\n  %451 = invoke nonnull align 8 dereferenceable(32) %\"class.std::__cxx11::basic_string\"* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %0, i8* %449, i64 %450)\n          to label %457 unwind label %452\n\n452:                                              ; preds = %445\n  %453 = landingpad { i8*, i32 }\n          cleanup\n  %454 = load i8*, i8** %70, align 8, !tbaa !3, !alias.scope !59\n  %455 = icmp eq i8* %454, %69\n  br i1 %455, label %482, label %456\n\n456:                                              ; preds = %452\n  call void @_ZdlPv(i8* %454) #7\n  br label %482\n\n457:                                              ; preds = %445\n  %458 = load i8*, i8** %63, align 8, !tbaa !3\n  %459 = icmp eq i8* %458, %62\n  br i1 %459, label %461, label %460\n\n460:                                              ; preds = %457\n  call void @_ZdlPv(i8* %458) #7\n  br label %461\n\n461:                                              ; preds = %457, %460\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %58) #7\n  %462 = load i8*, i8** %56, align 8, !tbaa !3\n  %463 = icmp eq i8* %462, %47\n  br i1 %463, label %465, label %464\n\n464:                                              ; preds = %461\n  call void @_ZdlPv(i8* %462) #7\n  br label %465\n\n465:                                              ; preds = %461, %464\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %43) #7\n  %466 = load i8*, i8** %25, align 8, !tbaa !3\n  %467 = icmp eq i8* %466, %22\n  br i1 %467, label %688, label %468\n\n468:                                              ; preds = %465\n  call void @_ZdlPv(i8* %466) #7\n  br label %688\n\n469:                                              ; preds = %97\n  %470 = landingpad { i8*, i32 }\n          cleanup\n  br label %503\n\n471:                                              ; preds = %115\n  %472 = landingpad { i8*, i32 }\n          cleanup\n  %473 = load i8*, i8** %32, align 8, !tbaa !3\n  %474 = icmp eq i8* %473, %31\n  br i1 %474, label %503, label %475\n\n475:                                              ; preds = %471\n  call void @_ZdlPv(i8* %473) #7\n  br label %503\n\n476:                                              ; preds = %261\n  %477 = landingpad { i8*, i32 }\n          cleanup\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %48) #7\n  br label %489\n\n478:                                              ; preds = %313\n  %479 = landingpad { i8*, i32 }\n          cleanup\n  br label %487\n\n480:                                              ; preds = %436\n  %481 = landingpad { i8*, i32 }\n          cleanup\n  br label %482\n\n482:                                              ; preds = %452, %456, %480\n  %483 = phi { i8*, i32 } [ %481, %480 ], [ %453, %456 ], [ %453, %452 ]\n  %484 = load i8*, i8** %63, align 8, !tbaa !3\n  %485 = icmp eq i8* %484, %62\n  br i1 %485, label %487, label %486\n\n486:                                              ; preds = %482\n  call void @_ZdlPv(i8* %484) #7\n  br label %487\n\n487:                                              ; preds = %486, %482, %478\n  %488 = phi { i8*, i32 } [ %479, %478 ], [ %483, %482 ], [ %483, %486 ]\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %58) #7\n  br label %489\n\n489:                                              ; preds = %487, %476\n  %490 = phi { i8*, i32 } [ %488, %487 ], [ %477, %476 ]\n  %491 = load i8*, i8** %56, align 8, !tbaa !3\n  %492 = icmp eq i8* %491, %47\n  br i1 %492, label %494, label %493\n\n493:                                              ; preds = %489\n  call void @_ZdlPv(i8* %491) #7\n  br label %494\n\n494:                                              ; preds = %489, %493\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %43) #7\n  br label %503\n\n495:                                              ; preds = %254\n  %496 = load i8*, i8** %25, align 8, !tbaa !3\n  %497 = icmp eq i8* %496, %22\n  br i1 %497, label %499, label %498\n\n498:                                              ; preds = %495\n  call void @_ZdlPv(i8* %496) #7\n  br label %499\n\n499:                                              ; preds = %498, %495\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %19) #7\n  %500 = add i64 %76, 1\n  %501 = load i64, i64* %18, align 8, !tbaa !13\n  %502 = icmp ugt i64 %501, %500\n  br i1 %502, label %75, label %509, !llvm.loop !62\n\n503:                                              ; preds = %475, %471, %494, %469\n  %504 = phi { i8*, i32 } [ %490, %494 ], [ %470, %469 ], [ %472, %471 ], [ %472, %475 ]\n  %505 = load i8*, i8** %25, align 8, !tbaa !3\n  %506 = icmp eq i8* %505, %22\n  br i1 %506, label %508, label %507\n\n507:                                              ; preds = %503\n  call void @_ZdlPv(i8* %505) #7\n  br label %508\n\n508:                                              ; preds = %503, %507\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %19) #7\n  br label %690\n\n509:                                              ; preds = %499, %2\n  %510 = phi i64 [ 0, %2 ], [ %501, %499 ]\n  %511 = bitcast %\"class.std::__cxx11::basic_string\"* %17 to i8*\n  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %511) #7\n  %512 = load i8*, i8** %23, align 8, !tbaa !3, !noalias !63\n  %513 = ptrtoint i8* %512 to i64\n  %514 = getelementptr inbounds i8, i8* %512, i64 %510\n  %515 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %17, i64 0, i32 2\n  %516 = bitcast %\"class.std::__cxx11::basic_string\"* %17 to %union.anon**\n  store %union.anon* %515, %union.anon** %516, align 8, !tbaa !14\n  %517 = bitcast i64* %4 to i8*\n  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %517) #7\n  store i64 %510, i64* %4, align 8, !tbaa !15\n  %518 = icmp ugt i64 %510, 15\n  br i1 %518, label %519, label %525\n\n519:                                              ; preds = %509\n  %520 = invoke i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %17, i64* nonnull align 8 dereferenceable(8) %4, i64 0)\n          to label %521 unwind label %676\n\n521:                                              ; preds = %519\n  %522 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %17, i64 0, i32 0, i32 0\n  store i8* %520, i8** %522, align 8, !tbaa !3\n  %523 = load i64, i64* %4, align 8, !tbaa !15\n  %524 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %17, i64 0, i32 2, i32 0\n  store i64 %523, i64* %524, align 8, !tbaa !16\n  br label %528\n\n525:                                              ; preds = %509\n  %526 = bitcast %union.anon* %515 to i8*\n  %527 = icmp eq i64 %510, 0\n  br i1 %527, label %639, label %528\n\n528:                                              ; preds = %521, %525\n  %529 = phi i8* [ %520, %521 ], [ %526, %525 ]\n  %530 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %17, i64 0, i32 0, i32 0\n  %531 = icmp ult i64 %510, 4\n  br i1 %531, label %586, label %532\n\n532:                                              ; preds = %528\n  %533 = getelementptr i8, i8* %529, i64 %510\n  %534 = icmp ult i8* %529, %514\n  %535 = icmp ult i8* %512, %533\n  %536 = and i1 %534, %535\n  br i1 %536, label %586, label %537\n\n537:                                              ; preds = %532\n  %538 = icmp ult i64 %510, 32\n  br i1 %538, label %567, label %539\n\n539:                                              ; preds = %537\n  %540 = and i64 %510, -32\n  br label %541\n\n541:                                              ; preds = %541, %539\n  %542 = phi i64 [ 0, %539 ], [ %557, %541 ]\n  %543 = getelementptr i8, i8* %529, i64 %542\n  %544 = xor i64 %542, -1\n  %545 = getelementptr i8, i8* %514, i64 %544\n  %546 = getelementptr inbounds i8, i8* %545, i64 -15\n  %547 = bitcast i8* %546 to <16 x i8>*\n  %548 = load <16 x i8>, <16 x i8>* %547, align 1, !tbaa !16, !alias.scope !66\n  %549 = shufflevector <16 x i8> %548, <16 x i8> poison, <16 x i32> <i32 15, i32 14, i32 13, i32 12, i32 11, i32 10, i32 9, i32 8, i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0>\n  %550 = getelementptr inbounds i8, i8* %545, i64 -31\n  %551 = bitcast i8* %550 to <16 x i8>*\n  %552 = load <16 x i8>, <16 x i8>* %551, align 1, !tbaa !16, !alias.scope !66\n  %553 = shufflevector <16 x i8> %552, <16 x i8> poison, <16 x i32> <i32 15, i32 14, i32 13, i32 12, i32 11, i32 10, i32 9, i32 8, i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0>\n  %554 = bitcast i8* %543 to <16 x i8>*\n  store <16 x i8> %549, <16 x i8>* %554, align 1, !tbaa !16, !alias.scope !69, !noalias !66\n  %555 = getelementptr i8, i8* %543, i64 16\n  %556 = bitcast i8* %555 to <16 x i8>*\n  store <16 x i8> %553, <16 x i8>* %556, align 1, !tbaa !16, !alias.scope !69, !noalias !66\n  %557 = add nuw i64 %542, 32\n  %558 = icmp eq i64 %557, %540\n  br i1 %558, label %559, label %541, !llvm.loop !71\n\n559:                                              ; preds = %541\n  %560 = icmp eq i64 %510, %540\n  br i1 %560, label %636, label %561\n\n561:                                              ; preds = %559\n  %562 = getelementptr i8, i8* %529, i64 %540\n  %563 = sub i64 0, %540\n  %564 = getelementptr i8, i8* %514, i64 %563\n  %565 = and i64 %510, 28\n  %566 = icmp eq i64 %565, 0\n  br i1 %566, label %586, label %567\n\n567:                                              ; preds = %537, %561\n  %568 = phi i64 [ %540, %561 ], [ 0, %537 ]\n  %569 = and i64 %510, -4\n  %570 = sub i64 0, %569\n  %571 = getelementptr i8, i8* %514, i64 %570\n  %572 = getelementptr i8, i8* %529, i64 %569\n  br label %573\n\n573:                                              ; preds = %573, %567\n  %574 = phi i64 [ %568, %567 ], [ %582, %573 ]\n  %575 = getelementptr i8, i8* %529, i64 %574\n  %576 = sub nuw nsw i64 -4, %574\n  %577 = getelementptr i8, i8* %514, i64 %576\n  %578 = bitcast i8* %577 to <4 x i8>*\n  %579 = load <4 x i8>, <4 x i8>* %578, align 1, !tbaa !16\n  %580 = shufflevector <4 x i8> %579, <4 x i8> poison, <4 x i32> <i32 3, i32 2, i32 1, i32 0>\n  %581 = bitcast i8* %575 to <4 x i8>*\n  store <4 x i8> %580, <4 x i8>* %581, align 1, !tbaa !16\n  %582 = add nuw i64 %574, 4\n  %583 = icmp eq i64 %582, %569\n  br i1 %583, label %584, label %573, !llvm.loop !72\n\n584:                                              ; preds = %573\n  %585 = icmp eq i64 %510, %569\n  br i1 %585, label %636, label %586\n\n586:                                              ; preds = %532, %528, %561, %584\n  %587 = phi i8* [ %514, %528 ], [ %514, %532 ], [ %564, %561 ], [ %571, %584 ]\n  %588 = phi i8* [ %529, %528 ], [ %529, %532 ], [ %562, %561 ], [ %572, %584 ]\n  %589 = ptrtoint i8* %587 to i64\n  %590 = sub i64 %589, %513\n  %591 = xor i64 %513, -1\n  %592 = add i64 %591, %589\n  %593 = and i64 %590, 7\n  %594 = icmp eq i64 %593, 0\n  br i1 %594, label %604, label %595\n\n595:                                              ; preds = %586, %595\n  %596 = phi i8* [ %599, %595 ], [ %587, %586 ]\n  %597 = phi i8* [ %601, %595 ], [ %588, %586 ]\n  %598 = phi i64 [ %602, %595 ], [ %593, %586 ]\n  %599 = getelementptr inbounds i8, i8* %596, i64 -1\n  %600 = load i8, i8* %599, align 1, !tbaa !16\n  store i8 %600, i8* %597, align 1, !tbaa !16\n  %601 = getelementptr inbounds i8, i8* %597, i64 1\n  %602 = add i64 %598, -1\n  %603 = icmp eq i64 %602, 0\n  br i1 %603, label %604, label %595, !llvm.loop !73\n\n604:                                              ; preds = %595, %586\n  %605 = phi i8* [ %587, %586 ], [ %599, %595 ]\n  %606 = phi i8* [ %588, %586 ], [ %601, %595 ]\n  %607 = icmp ult i64 %592, 7\n  br i1 %607, label %636, label %608\n\n608:                                              ; preds = %604, %608\n  %609 = phi i8* [ %632, %608 ], [ %605, %604 ]\n  %610 = phi i8* [ %634, %608 ], [ %606, %604 ]\n  %611 = getelementptr inbounds i8, i8* %609, i64 -1\n  %612 = load i8, i8* %611, align 1, !tbaa !16\n  store i8 %612, i8* %610, align 1, !tbaa !16\n  %613 = getelementptr inbounds i8, i8* %610, i64 1\n  %614 = getelementptr inbounds i8, i8* %609, i64 -2\n  %615 = load i8, i8* %614, align 1, !tbaa !16\n  store i8 %615, i8* %613, align 1, !tbaa !16\n  %616 = getelementptr inbounds i8, i8* %610, i64 2\n  %617 = getelementptr inbounds i8, i8* %609, i64 -3\n  %618 = load i8, i8* %617, align 1, !tbaa !16\n  store i8 %618, i8* %616, align 1, !tbaa !16\n  %619 = getelementptr inbounds i8, i8* %610, i64 3\n  %620 = getelementptr inbounds i8, i8* %609, i64 -4\n  %621 = load i8, i8* %620, align 1, !tbaa !16\n  store i8 %621, i8* %619, align 1, !tbaa !16\n  %622 = getelementptr inbounds i8, i8* %610, i64 4\n  %623 = getelementptr inbounds i8, i8* %609, i64 -5\n  %624 = load i8, i8* %623, align 1, !tbaa !16\n  store i8 %624, i8* %622, align 1, !tbaa !16\n  %625 = getelementptr inbounds i8, i8* %610, i64 5\n  %626 = getelementptr inbounds i8, i8* %609, i64 -6\n  %627 = load i8, i8* %626, align 1, !tbaa !16\n  store i8 %627, i8* %625, align 1, !tbaa !16\n  %628 = getelementptr inbounds i8, i8* %610, i64 6\n  %629 = getelementptr inbounds i8, i8* %609, i64 -7\n  %630 = load i8, i8* %629, align 1, !tbaa !16\n  store i8 %630, i8* %628, align 1, !tbaa !16\n  %631 = getelementptr inbounds i8, i8* %610, i64 7\n  %632 = getelementptr inbounds i8, i8* %609, i64 -8\n  %633 = load i8, i8* %632, align 1, !tbaa !16\n  store i8 %633, i8* %631, align 1, !tbaa !16\n  %634 = getelementptr inbounds i8, i8* %610, i64 8\n  %635 = icmp eq i8* %632, %512\n  br i1 %635, label %636, label %608, !llvm.loop !74\n\n636:                                              ; preds = %604, %608, %584, %559\n  %637 = load i64, i64* %4, align 8, !tbaa !15\n  %638 = load i8*, i8** %530, align 8, !tbaa !3\n  br label %639\n\n639:                                              ; preds = %636, %525\n  %640 = phi i8* [ %638, %636 ], [ %526, %525 ]\n  %641 = phi i64 [ %637, %636 ], [ 0, %525 ]\n  %642 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %17, i64 0, i32 0, i32 0\n  %643 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %17, i64 0, i32 1\n  store i64 %641, i64* %643, align 8, !tbaa !13\n  %644 = getelementptr inbounds i8, i8* %640, i64 %641\n  store i8 0, i8* %644, align 1, !tbaa !16\n  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %517) #7\n  call void @llvm.experimental.noalias.scope.decl(metadata !75)\n  store %union.anon* %66, %union.anon** %67, align 8, !tbaa !14, !alias.scope !75\n  %645 = load i8*, i8** %23, align 8, !tbaa !3, !noalias !75\n  %646 = load i64, i64* %18, align 8, !tbaa !13, !noalias !75\n  %647 = bitcast i64* %3 to i8*\n  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %647) #7, !noalias !75\n  store i64 %646, i64* %3, align 8, !tbaa !15, !noalias !75\n  %648 = icmp ugt i64 %646, 15\n  br i1 %648, label %649, label %653\n\n649:                                              ; preds = %639\n  %650 = invoke i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %0, i64* nonnull align 8 dereferenceable(8) %3, i64 0)\n          to label %651 unwind label %678\n\n651:                                              ; preds = %649\n  store i8* %650, i8** %70, align 8, !tbaa !3, !alias.scope !75\n  %652 = load i64, i64* %3, align 8, !tbaa !15, !noalias !75\n  store i64 %652, i64* %71, align 8, !tbaa !16, !alias.scope !75\n  br label %653\n\n653:                                              ; preds = %639, %651\n  %654 = phi i8* [ %650, %651 ], [ %69, %639 ]\n  switch i64 %646, label %657 [\n    i64 1, label %655\n    i64 0, label %658\n  ]\n\n655:                                              ; preds = %653\n  %656 = load i8, i8* %645, align 1, !tbaa !16\n  store i8 %656, i8* %654, align 1, !tbaa !16\n  br label %658\n\n657:                                              ; preds = %653\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %654, i8* align 1 %645, i64 %646, i1 false) #7\n  br label %658\n\n658:                                              ; preds = %657, %655, %653\n  %659 = load i64, i64* %3, align 8, !tbaa !15, !noalias !75\n  store i64 %659, i64* %72, align 8, !tbaa !13, !alias.scope !75\n  %660 = load i8*, i8** %70, align 8, !tbaa !3, !alias.scope !75\n  %661 = getelementptr inbounds i8, i8* %660, i64 %659\n  store i8 0, i8* %661, align 1, !tbaa !16\n  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %647) #7, !noalias !75\n  %662 = load i8*, i8** %642, align 8, !tbaa !3, !noalias !75\n  %663 = load i64, i64* %643, align 8, !tbaa !13, !noalias !75\n  %664 = invoke nonnull align 8 dereferenceable(32) %\"class.std::__cxx11::basic_string\"* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %0, i8* %662, i64 %663)\n          to label %670 unwind label %665\n\n665:                                              ; preds = %658\n  %666 = landingpad { i8*, i32 }\n          cleanup\n  %667 = load i8*, i8** %70, align 8, !tbaa !3, !alias.scope !75\n  %668 = icmp eq i8* %667, %69\n  br i1 %668, label %680, label %669\n\n669:                                              ; preds = %665\n  call void @_ZdlPv(i8* %667) #7\n  br label %680\n\n670:                                              ; preds = %658\n  %671 = load i8*, i8** %642, align 8, !tbaa !3\n  %672 = bitcast %union.anon* %515 to i8*\n  %673 = icmp eq i8* %671, %672\n  br i1 %673, label %675, label %674\n\n674:                                              ; preds = %670\n  call void @_ZdlPv(i8* %671) #7\n  br label %675\n\n675:                                              ; preds = %670, %674\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %511) #7\n  br label %689\n\n676:                                              ; preds = %519\n  %677 = landingpad { i8*, i32 }\n          cleanup\n  br label %686\n\n678:                                              ; preds = %649\n  %679 = landingpad { i8*, i32 }\n          cleanup\n  br label %680\n\n680:                                              ; preds = %665, %669, %678\n  %681 = phi { i8*, i32 } [ %679, %678 ], [ %666, %669 ], [ %666, %665 ]\n  %682 = load i8*, i8** %642, align 8, !tbaa !3\n  %683 = bitcast %union.anon* %515 to i8*\n  %684 = icmp eq i8* %682, %683\n  br i1 %684, label %686, label %685\n\n685:                                              ; preds = %680\n  call void @_ZdlPv(i8* %682) #7\n  br label %686\n\n686:                                              ; preds = %685, %680, %676\n  %687 = phi { i8*, i32 } [ %677, %676 ], [ %681, %680 ], [ %681, %685 ]\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %511) #7\n  br label %690\n\n688:                                              ; preds = %468, %465\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %19) #7\n  br label %689\n\n689:                                              ; preds = %688, %675\n  ret void\n\n690:                                              ; preds = %686, %508\n  %691 = phi { i8*, i32 } [ %504, %508 ], [ %687, %686 ]\n  resume { i8*, i32 } %691\n}\n\n; Function Attrs: nobuiltin nounwind\ndeclare dso_local void @_ZdlPv(i8*) local_unnamed_addr #2\n\n; Function Attrs: argmemonly mustprogress nofree nounwind willreturn\ndeclare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #3\n\ndeclare dso_local i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32), i64* nonnull align 8 dereferenceable(8), i64) local_unnamed_addr #4\n\ndeclare dso_local nonnull align 8 dereferenceable(32) %\"class.std::__cxx11::basic_string\"* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32), i8*, i64) local_unnamed_addr #4\n\n; Function Attrs: argmemonly nofree nounwind readonly willreturn\ndeclare i32 @bcmp(i8* nocapture, i8* nocapture, i64) local_unnamed_addr #5\n\n; Function Attrs: inaccessiblememonly nofree nosync nounwind willreturn\ndeclare void @llvm.experimental.noalias.scope.decl(metadata) #6\n\nattributes #0 = { uwtable \"frame-pointer\"=\"none\" \"min-legal-vector-width\"=\"0\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #1 = { argmemonly mustprogress nofree nosync nounwind willreturn }\nattributes #2 = { nobuiltin nounwind \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #3 = { argmemonly mustprogress nofree nounwind willreturn }\nattributes #4 = { \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #5 = { argmemonly nofree nounwind readonly willreturn }\nattributes #6 = { inaccessiblememonly nofree nosync nounwind willreturn }\nattributes #7 = { nounwind }\n\n!llvm.module.flags = !{!0, !1}\n!llvm.ident = !{!2}\n\n!0 = !{i32 1, !\"wchar_size\", i32 4}\n!1 = !{i32 7, !\"uwtable\", i32 1}\n!2 = !{!\"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)\"}\n!3 = !{!4, !6, i64 0}\n!4 = !{!\"_ZTSNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE\", !5, i64 0, !9, i64 8, !7, i64 16}\n!5 = !{!\"_ZTSNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderE\", !6, i64 0}\n!6 = !{!\"any pointer\", !7, i64 0}\n!7 = !{!\"omnipotent char\", !8, i64 0}\n!8 = !{!\"Simple C++ TBAA\"}\n!9 = !{!\"long\", !7, i64 0}\n!10 = !{!11}\n!11 = distinct !{!11, !12, !\"_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6rbeginEv: argument 0\"}\n!12 = distinct !{!12, !\"_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6rbeginEv\"}\n!13 = !{!4, !9, i64 8}\n!14 = !{!5, !6, i64 0}\n!15 = !{!9, !9, i64 0}\n!16 = !{!7, !7, i64 0}\n!17 = !{!18}\n!18 = distinct !{!18, !19}\n!19 = distinct !{!19, !\"LVerDomain\"}\n!20 = !{!21}\n!21 = distinct !{!21, !19}\n!22 = distinct !{!22, !23, !24}\n!23 = !{!\"llvm.loop.mustprogress\"}\n!24 = !{!\"llvm.loop.isvectorized\", i32 1}\n!25 = distinct !{!25, !23, !24}\n!26 = distinct !{!26, !27}\n!27 = !{!\"llvm.loop.unroll.disable\"}\n!28 = distinct !{!28, !23, !24}\n!29 = !{!30}\n!30 = distinct !{!30, !31, !\"_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEmm: argument 0\"}\n!31 = distinct !{!31, !\"_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEmm\"}\n!32 = !{!33}\n!33 = distinct !{!33, !34, !\"_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6rbeginEv: argument 0\"}\n!34 = distinct !{!34, !\"_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6rbeginEv\"}\n!35 = !{!36}\n!36 = distinct !{!36, !37}\n!37 = distinct !{!37, !\"LVerDomain\"}\n!38 = !{!39}\n!39 = distinct !{!39, !37}\n!40 = distinct !{!40, !23, !24}\n!41 = distinct !{!41, !23, !24}\n!42 = distinct !{!42, !27}\n!43 = distinct !{!43, !23, !24}\n!44 = !{!45}\n!45 = distinct !{!45, !46, !\"_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEmm: argument 0\"}\n!46 = distinct !{!46, !\"_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEmm\"}\n!47 = !{!48}\n!48 = distinct !{!48, !49, !\"_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6rbeginEv: argument 0\"}\n!49 = distinct !{!49, !\"_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6rbeginEv\"}\n!50 = !{!51}\n!51 = distinct !{!51, !52}\n!52 = distinct !{!52, !\"LVerDomain\"}\n!53 = !{!54}\n!54 = distinct !{!54, !52}\n!55 = distinct !{!55, !23, !24}\n!56 = distinct !{!56, !23, !24}\n!57 = distinct !{!57, !27}\n!58 = distinct !{!58, !23, !24}\n!59 = !{!60}\n!60 = distinct !{!60, !61, !\"_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_SA_: argument 0\"}\n!61 = distinct !{!61, !\"_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_SA_\"}\n!62 = distinct !{!62, !23}\n!63 = !{!64}\n!64 = distinct !{!64, !65, !\"_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6rbeginEv: argument 0\"}\n!65 = distinct !{!65, !\"_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6rbeginEv\"}\n!66 = !{!67}\n!67 = distinct !{!67, !68}\n!68 = distinct !{!68, !\"LVerDomain\"}\n!69 = !{!70}\n!70 = distinct !{!70, !68}\n!71 = distinct !{!71, !23, !24}\n!72 = distinct !{!72, !23, !24}\n!73 = distinct !{!73, !27}\n!74 = distinct !{!74, !23, !24}\n!75 = !{!76}\n!76 = distinct !{!76, !77, !\"_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_SA_: argument 0\"}\n!77 = distinct !{!77, !\"_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_SA_\"}\n", "target": "This is the targeted source code:\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool is_palindrome(string str){\n    //Test if given string is a palindrome \n    string s(str.rbegin(),str.rend());\n    return s==str;\n}\nstring make_palindrome(string str){\n    /*\n    Find the shortest palindrome that begins with a supplied string. \n    Algorithm idea is simple: - Find the longest postfix of supplied string that is a palindrome. \n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome(\"\") \n    \"\" \n    >>> make_palindrome(\"cat\") \n    \"catac\" \n    >>> make_palindrome(\"cata\") /home/anonymous/LLMs-in-IR/Human_xBenchmarks_164/CPP_18\n    \"catac\" \n    */\n\n   int i;\n   for (i=0;i<str.length();i++)\n   {\n        string rstr=str.substr(i);\n        if (is_palindrome(rstr))\n        {\n            string nstr;\n            nstr=str.substr(0,i);\n            string n2str(nstr.rbegin(),nstr.rend());\n            return str+n2str;\n        }\n   }\n   string n2str(str.rbegin(),str.rend());\n   return str+n2str;\n}\n"}
{"input": "Convert this to C++:\n; ModuleID = '../../Human_xBenchmarks_164/CPP_11/CPP_11.cpp'\nsource_filename = \"../../Human_xBenchmarks_164/CPP_11/CPP_11.cpp\"\ntarget datalayout = \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\ntarget triple = \"x86_64-unknown-linux-gnu\"\n\n%\"class.std::__cxx11::basic_string\" = type { %\"struct.std::__cxx11::basic_string<char>::_Alloc_hider\", i64, %union.anon }\n%\"struct.std::__cxx11::basic_string<char>::_Alloc_hider\" = type { i8* }\n%union.anon = type { i64, [8 x i8] }\n\n; Function Attrs: uwtable\ndefine dso_local void @_Z10string_xorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES4_(%\"class.std::__cxx11::basic_string\"* noalias sret(%\"class.std::__cxx11::basic_string\") align 8 %0, %\"class.std::__cxx11::basic_string\"* nocapture readonly %1, %\"class.std::__cxx11::basic_string\"* nocapture readonly %2) local_unnamed_addr #0 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {\n  %4 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 2\n  %5 = bitcast %\"class.std::__cxx11::basic_string\"* %0 to %union.anon**\n  store %union.anon* %4, %union.anon** %5, align 8, !tbaa !3\n  %6 = bitcast %union.anon* %4 to i8*\n  %7 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 0, i32 0\n  %8 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 1\n  store i64 0, i64* %8, align 8, !tbaa !8\n  store i8 0, i8* %6, align 8, !tbaa !11\n  %9 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %1, i64 0, i32 1\n  %10 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %2, i64 0, i32 1\n  %11 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %1, i64 0, i32 0, i32 0\n  %12 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %2, i64 0, i32 0, i32 0\n  %13 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 2, i32 0\n  %14 = load i64, i64* %9, align 8, !tbaa !8\n  %15 = icmp eq i64 %14, 0\n  br i1 %15, label %57, label %16\n\n16:                                               ; preds = %3, %48\n  %17 = phi i64 [ %54, %48 ], [ 0, %3 ]\n  %18 = load i64, i64* %10, align 8, !tbaa !8\n  %19 = icmp ugt i64 %18, %17\n  br i1 %19, label %20, label %57\n\n20:                                               ; preds = %16\n  %21 = load i8*, i8** %11, align 8, !tbaa !12\n  %22 = getelementptr inbounds i8, i8* %21, i64 %17\n  %23 = load i8, i8* %22, align 1, !tbaa !11\n  %24 = load i8*, i8** %12, align 8, !tbaa !12\n  %25 = getelementptr inbounds i8, i8* %24, i64 %17\n  %26 = load i8, i8* %25, align 1, !tbaa !11\n  %27 = icmp eq i8 %23, %26\n  %28 = load i64, i64* %8, align 8, !tbaa !8\n  %29 = add i64 %28, 1\n  %30 = load i8*, i8** %7, align 8, !tbaa !12\n  %31 = icmp eq i8* %30, %6\n  %32 = load i64, i64* %13, align 8\n  %33 = select i1 %31, i64 15, i64 %32\n  %34 = icmp ugt i64 %29, %33\n  br i1 %27, label %35, label %44\n\n35:                                               ; preds = %20\n  br i1 %34, label %36, label %48\n\n36:                                               ; preds = %35\n  invoke void @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEmmPKcm(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %0, i64 %28, i64 0, i8* null, i64 1)\n          to label %37 unwind label %39\n\n37:                                               ; preds = %36\n  %38 = load i8*, i8** %7, align 8, !tbaa !12\n  br label %48\n\n39:                                               ; preds = %45, %36\n  %40 = landingpad { i8*, i32 }\n          cleanup\n  %41 = load i8*, i8** %7, align 8, !tbaa !12\n  %42 = icmp eq i8* %41, %6\n  br i1 %42, label %58, label %43\n\n43:                                               ; preds = %39\n  tail call void @_ZdlPv(i8* %41) #3\n  br label %58\n\n44:                                               ; preds = %20\n  br i1 %34, label %45, label %48\n\n45:                                               ; preds = %44\n  invoke void @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEmmPKcm(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %0, i64 %28, i64 0, i8* null, i64 1)\n          to label %46 unwind label %39\n\n46:                                               ; preds = %45\n  %47 = load i8*, i8** %7, align 8, !tbaa !12\n  br label %48\n\n48:                                               ; preds = %46, %44, %37, %35\n  %49 = phi i8* [ %38, %37 ], [ %30, %35 ], [ %47, %46 ], [ %30, %44 ]\n  %50 = phi i8 [ 48, %37 ], [ 48, %35 ], [ 49, %46 ], [ 49, %44 ]\n  %51 = getelementptr inbounds i8, i8* %49, i64 %28\n  store i8 %50, i8* %51, align 1, !tbaa !11\n  store i64 %29, i64* %8, align 8, !tbaa !8\n  %52 = load i8*, i8** %7, align 8, !tbaa !12\n  %53 = getelementptr inbounds i8, i8* %52, i64 %29\n  store i8 0, i8* %53, align 1, !tbaa !11\n  %54 = add nuw i64 %17, 1\n  %55 = load i64, i64* %9, align 8, !tbaa !8\n  %56 = icmp ugt i64 %55, %54\n  br i1 %56, label %16, label %57, !llvm.loop !13\n\n57:                                               ; preds = %48, %16, %3\n  ret void\n\n58:                                               ; preds = %43, %39\n  resume { i8*, i32 } %40\n}\n\ndeclare dso_local i32 @__gxx_personality_v0(...)\n\n; Function Attrs: nobuiltin nounwind\ndeclare dso_local void @_ZdlPv(i8*) local_unnamed_addr #1\n\ndeclare dso_local void @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEmmPKcm(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32), i64, i64, i8*, i64) local_unnamed_addr #2\n\nattributes #0 = { uwtable \"frame-pointer\"=\"none\" \"min-legal-vector-width\"=\"0\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #1 = { nobuiltin nounwind \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #2 = { \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #3 = { nounwind }\n\n!llvm.module.flags = !{!0, !1}\n!llvm.ident = !{!2}\n\n!0 = !{i32 1, !\"wchar_size\", i32 4}\n!1 = !{i32 7, !\"uwtable\", i32 1}\n!2 = !{!\"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)\"}\n!3 = !{!4, !5, i64 0}\n!4 = !{!\"_ZTSNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderE\", !5, i64 0}\n!5 = !{!\"any pointer\", !6, i64 0}\n!6 = !{!\"omnipotent char\", !7, i64 0}\n!7 = !{!\"Simple C++ TBAA\"}\n!8 = !{!9, !10, i64 8}\n!9 = !{!\"_ZTSNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE\", !4, i64 0, !10, i64 8, !6, i64 16}\n!10 = !{!\"long\", !6, i64 0}\n!11 = !{!6, !6, i64 0}\n!12 = !{!9, !5, i64 0}\n!13 = distinct !{!13, !14}\n!14 = !{!\"llvm.loop.mustprogress\"}\n", "target": "This is the targeted source code:\n/*\nInput are two strings a and b consisting only of 1s and 0s.\nPerform binary XOR on these inputs and return result also as a string.\n>>> string_xor(\"010\", \"110\")\n\"100\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring string_xor(string a,string b){\n\n    string output=\"\";\n    for (int i=0;(i<a.length() and i<b.length());i++)\n    {\n        if (i<a.length() and i<b.length())\n        {\n            if (a[i]== b[i]) \n            {\n                output+='0';\n            }  \n            else output+='1';\n        }\n        else\n        {\n            if (i>=a.length()) \n            {\n            output+=b[i];\n            }\n            else output+=a[i];\n        }\n    }\n    return output;\n}\n"}
{"input": "Convert this to C++:\n; ModuleID = '../../Human_xBenchmarks_164/CPP_12/CPP_12.cpp'\nsource_filename = \"../../Human_xBenchmarks_164/CPP_12/CPP_12.cpp\"\ntarget datalayout = \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\ntarget triple = \"x86_64-unknown-linux-gnu\"\n\n%\"class.std::__cxx11::basic_string\" = type { %\"struct.std::__cxx11::basic_string<char>::_Alloc_hider\", i64, %union.anon }\n%\"struct.std::__cxx11::basic_string<char>::_Alloc_hider\" = type { i8* }\n%union.anon = type { i64, [8 x i8] }\n%\"class.std::vector\" = type { %\"struct.std::_Vector_base\" }\n%\"struct.std::_Vector_base\" = type { %\"struct.std::_Vector_base<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char>>>::_Vector_impl\" }\n%\"struct.std::_Vector_base<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char>>>::_Vector_impl\" = type { %\"struct.std::_Vector_base<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char>>>::_Vector_impl_data\" }\n%\"struct.std::_Vector_base<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char>>>::_Vector_impl_data\" = type { %\"class.std::__cxx11::basic_string\"*, %\"class.std::__cxx11::basic_string\"*, %\"class.std::__cxx11::basic_string\"* }\n\n; Function Attrs: uwtable\ndefine dso_local void @_Z7longestSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE(%\"class.std::__cxx11::basic_string\"* noalias sret(%\"class.std::__cxx11::basic_string\") align 8 %0, %\"class.std::vector\"* nocapture readonly %1) local_unnamed_addr #0 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {\n  %3 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 2\n  %4 = bitcast %\"class.std::__cxx11::basic_string\"* %0 to %union.anon**\n  store %union.anon* %3, %union.anon** %4, align 8, !tbaa !3\n  %5 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 1\n  store i64 0, i64* %5, align 8, !tbaa !8\n  %6 = bitcast %union.anon* %3 to i8*\n  store i8 0, i8* %6, align 8, !tbaa !11\n  %7 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %1, i64 0, i32 0, i32 0, i32 0, i32 1\n  %8 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %1, i64 0, i32 0, i32 0, i32 0, i32 0\n  %9 = load %\"class.std::__cxx11::basic_string\"*, %\"class.std::__cxx11::basic_string\"** %7, align 8, !tbaa !12\n  %10 = load %\"class.std::__cxx11::basic_string\"*, %\"class.std::__cxx11::basic_string\"** %8, align 8, !tbaa !14\n  %11 = icmp eq %\"class.std::__cxx11::basic_string\"* %9, %10\n  br i1 %11, label %43, label %12\n\n12:                                               ; preds = %2, %41\n  %13 = phi %\"class.std::__cxx11::basic_string\"* [ %33, %41 ], [ %10, %2 ]\n  %14 = phi %\"class.std::__cxx11::basic_string\"* [ %34, %41 ], [ %9, %2 ]\n  %15 = phi i64 [ %42, %41 ], [ 0, %2 ]\n  %16 = phi i64 [ %35, %41 ], [ 0, %2 ]\n  %17 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %13, i64 %16, i32 1\n  %18 = load i64, i64* %17, align 8, !tbaa !8\n  %19 = icmp ugt i64 %18, %15\n  br i1 %19, label %20, label %32\n\n20:                                               ; preds = %12\n  %21 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %13, i64 %16\n  invoke void @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %0, %\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %21)\n          to label %22 unwind label %25\n\n22:                                               ; preds = %20\n  %23 = load %\"class.std::__cxx11::basic_string\"*, %\"class.std::__cxx11::basic_string\"** %7, align 8, !tbaa !12\n  %24 = load %\"class.std::__cxx11::basic_string\"*, %\"class.std::__cxx11::basic_string\"** %8, align 8, !tbaa !14\n  br label %32\n\n25:                                               ; preds = %20\n  %26 = landingpad { i8*, i32 }\n          cleanup\n  %27 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 0, i32 0\n  %28 = load i8*, i8** %27, align 8, !tbaa !15\n  %29 = icmp eq i8* %28, %6\n  br i1 %29, label %31, label %30\n\n30:                                               ; preds = %25\n  tail call void @_ZdlPv(i8* %28) #3\n  br label %31\n\n31:                                               ; preds = %25, %30\n  resume { i8*, i32 } %26\n\n32:                                               ; preds = %22, %12\n  %33 = phi %\"class.std::__cxx11::basic_string\"* [ %24, %22 ], [ %13, %12 ]\n  %34 = phi %\"class.std::__cxx11::basic_string\"* [ %23, %22 ], [ %14, %12 ]\n  %35 = add nuw i64 %16, 1\n  %36 = ptrtoint %\"class.std::__cxx11::basic_string\"* %34 to i64\n  %37 = ptrtoint %\"class.std::__cxx11::basic_string\"* %33 to i64\n  %38 = sub i64 %36, %37\n  %39 = ashr exact i64 %38, 5\n  %40 = icmp ugt i64 %39, %35\n  br i1 %40, label %41, label %43, !llvm.loop !16\n\n41:                                               ; preds = %32\n  %42 = load i64, i64* %5, align 8, !tbaa !8\n  br label %12\n\n43:                                               ; preds = %32, %2\n  ret void\n}\n\ndeclare dso_local i32 @__gxx_personality_v0(...)\n\n; Function Attrs: nobuiltin nounwind\ndeclare dso_local void @_ZdlPv(i8*) local_unnamed_addr #1\n\ndeclare dso_local void @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32), %\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32)) local_unnamed_addr #2\n\nattributes #0 = { uwtable \"frame-pointer\"=\"none\" \"min-legal-vector-width\"=\"0\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #1 = { nobuiltin nounwind \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #2 = { \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #3 = { nounwind }\n\n!llvm.module.flags = !{!0, !1}\n!llvm.ident = !{!2}\n\n!0 = !{i32 1, !\"wchar_size\", i32 4}\n!1 = !{i32 7, !\"uwtable\", i32 1}\n!2 = !{!\"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)\"}\n!3 = !{!4, !5, i64 0}\n!4 = !{!\"_ZTSNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderE\", !5, i64 0}\n!5 = !{!\"any pointer\", !6, i64 0}\n!6 = !{!\"omnipotent char\", !7, i64 0}\n!7 = !{!\"Simple C++ TBAA\"}\n!8 = !{!9, !10, i64 8}\n!9 = !{!\"_ZTSNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE\", !4, i64 0, !10, i64 8, !6, i64 16}\n!10 = !{!\"long\", !6, i64 0}\n!11 = !{!6, !6, i64 0}\n!12 = !{!13, !5, i64 8}\n!13 = !{!\"_ZTSNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_Vector_impl_dataE\", !5, i64 0, !5, i64 8, !5, i64 16}\n!14 = !{!13, !5, i64 0}\n!15 = !{!9, !5, i64 0}\n!16 = distinct !{!16, !17}\n!17 = !{!\"llvm.loop.mustprogress\"}\n", "target": "This is the targeted source code:\n/*\nOut of vector of strings, return the longest one. Return the first one in case of multiple\nstrings of the same length. Return None in case the input vector is empty.\n>>> longest({})\n\n>>> longest({\"a\", \"b\", \"c\"})\n\"a\"\n>>> longest({\"a\", \"bb\", \"ccc\"})\n\"ccc\"\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring longest(vector<string> strings){\n\n    string out;\n    for (int i=0;i<strings.size();i++)\n    {\n        if (strings[i].length()>out.length()) out=strings[i];\n    }\n    return out;\n}\n"}
{"input": "Convert this to C++:\n; ModuleID = '../../Human_xBenchmarks_164/CPP_13/CPP_13.cpp'\nsource_filename = \"../../Human_xBenchmarks_164/CPP_13/CPP_13.cpp\"\ntarget datalayout = \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\ntarget triple = \"x86_64-unknown-linux-gnu\"\n\n; Function Attrs: mustprogress nofree norecurse nosync nounwind readnone uwtable willreturn\ndefine dso_local i32 @_Z23greatest_common_divisorii(i32 %0, i32 %1) local_unnamed_addr #0 {\n  br label %3\n\n3:                                                ; preds = %3, %2\n  %4 = phi i32 [ %1, %2 ], [ %7, %3 ]\n  %5 = phi i32 [ %0, %2 ], [ %9, %3 ]\n  %6 = icmp slt i32 %5, %4\n  %7 = select i1 %6, i32 %5, i32 %4\n  %8 = select i1 %6, i32 %4, i32 %5\n  %9 = srem i32 %8, %7\n  %10 = icmp eq i32 %9, 0\n  br i1 %10, label %11, label %3, !llvm.loop !3\n\n11:                                               ; preds = %3\n  ret i32 %7\n}\n\nattributes #0 = { mustprogress nofree norecurse nosync nounwind readnone uwtable willreturn \"frame-pointer\"=\"none\" \"min-legal-vector-width\"=\"0\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\n\n!llvm.module.flags = !{!0, !1}\n!llvm.ident = !{!2}\n\n!0 = !{i32 1, !\"wchar_size\", i32 4}\n!1 = !{i32 7, !\"uwtable\", i32 1}\n!2 = !{!\"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)\"}\n!3 = distinct !{!3, !4}\n!4 = !{!\"llvm.loop.mustprogress\"}\n", "target": "This is the targeted source code:\n/*\nReturn a greatest common divisor of two integers a and b\n>>> greatest_common_divisor(3, 5)\n1\n>>> greatest_common_divisor(25, 15)\n5\n*/\n#include<stdio.h>\nusing namespace std;\nint greatest_common_divisor(int a, int b){\n\n    int out,m;\n    while (true){\n        if (a<b) \n        {\n            m=a;a=b;b=m;\n        }\n        a=a%b;\n        if (a==0) return b;\n    }\n}\n"}
{"input": "Convert this to C++:\n; ModuleID = '../../Human_xBenchmarks_164/CPP_14/CPP_14.cpp'\nsource_filename = \"../../Human_xBenchmarks_164/CPP_14/CPP_14.cpp\"\ntarget datalayout = \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\ntarget triple = \"x86_64-unknown-linux-gnu\"\n\n%\"class.std::vector\" = type { %\"struct.std::_Vector_base\" }\n%\"struct.std::_Vector_base\" = type { %\"struct.std::_Vector_base<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char>>>::_Vector_impl\" }\n%\"struct.std::_Vector_base<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char>>>::_Vector_impl\" = type { %\"struct.std::_Vector_base<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char>>>::_Vector_impl_data\" }\n%\"struct.std::_Vector_base<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char>>>::_Vector_impl_data\" = type { %\"class.std::__cxx11::basic_string\"*, %\"class.std::__cxx11::basic_string\"*, %\"class.std::__cxx11::basic_string\"* }\n%\"class.std::__cxx11::basic_string\" = type { %\"struct.std::__cxx11::basic_string<char>::_Alloc_hider\", i64, %union.anon }\n%\"struct.std::__cxx11::basic_string<char>::_Alloc_hider\" = type { i8* }\n%union.anon = type { i64, [8 x i8] }\n\n$_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED2Ev = comdat any\n\n$__clang_call_terminate = comdat any\n\n$_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_realloc_insertIJRKS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_ = comdat any\n\n@.str.2 = private unnamed_addr constant [26 x i8] c\"vector::_M_realloc_insert\\00\", align 1\n\n; Function Attrs: uwtable\ndefine dso_local void @_Z12all_prefixesNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE(%\"class.std::vector\"* noalias sret(%\"class.std::vector\") align 8 %0, %\"class.std::__cxx11::basic_string\"* nocapture readonly %1) local_unnamed_addr #0 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {\n  %3 = alloca i64, align 8\n  %4 = alloca i64, align 8\n  %5 = alloca %\"class.std::__cxx11::basic_string\", align 8\n  %6 = alloca %\"class.std::__cxx11::basic_string\", align 8\n  %7 = bitcast %\"class.std::vector\"* %0 to i8*\n  tail call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(24) %7, i8 0, i64 24, i1 false) #11\n  %8 = bitcast %\"class.std::__cxx11::basic_string\"* %5 to i8*\n  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %8) #11\n  %9 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %5, i64 0, i32 2\n  %10 = bitcast %\"class.std::__cxx11::basic_string\"* %5 to %union.anon**\n  store %union.anon* %9, %union.anon** %10, align 8, !tbaa !3\n  %11 = bitcast %union.anon* %9 to i8*\n  %12 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %5, i64 0, i32 0, i32 0\n  %13 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %5, i64 0, i32 1\n  store i64 0, i64* %13, align 8, !tbaa !8\n  store i8 0, i8* %11, align 8, !tbaa !11\n  %14 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %1, i64 0, i32 1\n  %15 = bitcast %\"class.std::__cxx11::basic_string\"* %6 to i8*\n  %16 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %1, i64 0, i32 0, i32 0\n  %17 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %6, i64 0, i32 2\n  %18 = bitcast %\"class.std::__cxx11::basic_string\"* %6 to %union.anon**\n  %19 = bitcast i64* %4 to i8*\n  %20 = bitcast %union.anon* %17 to i8*\n  %21 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %6, i64 0, i32 0, i32 0\n  %22 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %6, i64 0, i32 2, i32 0\n  %23 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %6, i64 0, i32 1\n  %24 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %5, i64 0, i32 2, i32 0\n  %25 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0, i64 0, i32 0, i32 0, i32 0, i32 1\n  %26 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0, i64 0, i32 0, i32 0, i32 0, i32 2\n  %27 = bitcast i64* %3 to i8*\n  %28 = load i64, i64* %14, align 8, !tbaa !8\n  %29 = icmp eq i64 %28, 0\n  br i1 %29, label %36, label %30\n\n30:                                               ; preds = %2\n  %31 = bitcast i64* %23 to <2 x i64>*\n  %32 = bitcast i64* %13 to <2 x i64>*\n  br label %37\n\n33:                                               ; preds = %128\n  %34 = icmp eq i8* %132, %11\n  br i1 %34, label %36, label %35\n\n35:                                               ; preds = %33\n  call void @_ZdlPv(i8* %132) #11\n  br label %36\n\n36:                                               ; preds = %2, %33, %35\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %8) #11\n  ret void\n\n37:                                               ; preds = %30, %133\n  %38 = phi i64 [ %134, %133 ], [ 0, %30 ]\n  %39 = phi i8* [ %132, %133 ], [ %11, %30 ]\n  %40 = phi i64 [ %129, %133 ], [ 0, %30 ]\n  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %15) #11\n  %41 = load i8*, i8** %16, align 8, !tbaa !12\n  %42 = getelementptr inbounds i8, i8* %41, i64 %40\n  %43 = load i8, i8* %42, align 1, !tbaa !11\n  call void @llvm.experimental.noalias.scope.decl(metadata !13)\n  store %union.anon* %17, %union.anon** %18, align 8, !tbaa !3, !alias.scope !13\n  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %19) #11, !noalias !13\n  store i64 %38, i64* %4, align 8, !tbaa !16, !noalias !13\n  %44 = icmp ugt i64 %38, 15\n  br i1 %44, label %45, label %49\n\n45:                                               ; preds = %37\n  %46 = invoke i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %6, i64* nonnull align 8 dereferenceable(8) %4, i64 0)\n          to label %47 unwind label %135\n\n47:                                               ; preds = %45\n  store i8* %46, i8** %21, align 8, !tbaa !12, !alias.scope !13\n  %48 = load i64, i64* %4, align 8, !tbaa !16, !noalias !13\n  store i64 %48, i64* %22, align 8, !tbaa !11, !alias.scope !13\n  br label %49\n\n49:                                               ; preds = %37, %47\n  %50 = phi i8* [ %46, %47 ], [ %20, %37 ]\n  switch i64 %38, label %53 [\n    i64 1, label %51\n    i64 0, label %54\n  ]\n\n51:                                               ; preds = %49\n  %52 = load i8, i8* %39, align 1, !tbaa !11\n  store i8 %52, i8* %50, align 1, !tbaa !11\n  br label %54\n\n53:                                               ; preds = %49\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %50, i8* align 1 %39, i64 %38, i1 false) #11\n  br label %54\n\n54:                                               ; preds = %53, %51, %49\n  %55 = load i64, i64* %4, align 8, !tbaa !16, !noalias !13\n  store i64 %55, i64* %23, align 8, !tbaa !8, !alias.scope !13\n  %56 = load i8*, i8** %21, align 8, !tbaa !12, !alias.scope !13\n  %57 = getelementptr inbounds i8, i8* %56, i64 %55\n  store i8 0, i8* %57, align 1, !tbaa !11\n  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %19) #11, !noalias !13\n  %58 = load i64, i64* %23, align 8, !tbaa !8, !alias.scope !13\n  %59 = invoke nonnull align 8 dereferenceable(32) %\"class.std::__cxx11::basic_string\"* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEmmmc(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %6, i64 %58, i64 0, i64 1, i8 signext %43)\n          to label %65 unwind label %60\n\n60:                                               ; preds = %54\n  %61 = landingpad { i8*, i32 }\n          cleanup\n  %62 = load i8*, i8** %21, align 8, !tbaa !12, !alias.scope !13\n  %63 = icmp eq i8* %62, %20\n  br i1 %63, label %137, label %64\n\n64:                                               ; preds = %60\n  call void @_ZdlPv(i8* %62) #11\n  br label %137\n\n65:                                               ; preds = %54\n  %66 = load i8*, i8** %21, align 8, !tbaa !12\n  %67 = icmp eq i8* %66, %20\n  br i1 %67, label %68, label %82\n\n68:                                               ; preds = %65\n  %69 = load i64, i64* %23, align 8, !tbaa !8\n  %70 = icmp eq i64 %69, 0\n  br i1 %70, label %77, label %71\n\n71:                                               ; preds = %68\n  %72 = load i8*, i8** %12, align 8, !tbaa !12\n  %73 = icmp eq i64 %69, 1\n  br i1 %73, label %74, label %76\n\n74:                                               ; preds = %71\n  %75 = load i8, i8* %20, align 8, !tbaa !11\n  store i8 %75, i8* %72, align 1, !tbaa !11\n  br label %77\n\n76:                                               ; preds = %71\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %72, i8* nonnull align 8 %20, i64 %69, i1 false) #11\n  br label %77\n\n77:                                               ; preds = %76, %74, %68\n  %78 = load i64, i64* %23, align 8, !tbaa !8\n  store i64 %78, i64* %13, align 8, !tbaa !8\n  %79 = load i8*, i8** %12, align 8, !tbaa !12\n  %80 = getelementptr inbounds i8, i8* %79, i64 %78\n  store i8 0, i8* %80, align 1, !tbaa !11\n  %81 = load i8*, i8** %21, align 8, !tbaa !12\n  br label %91\n\n82:                                               ; preds = %65\n  %83 = load i8*, i8** %12, align 8, !tbaa !12\n  %84 = icmp eq i8* %83, %11\n  %85 = load i64, i64* %24, align 8\n  store i8* %66, i8** %12, align 8, !tbaa !12\n  %86 = load <2 x i64>, <2 x i64>* %31, align 8, !tbaa !11\n  store <2 x i64> %86, <2 x i64>* %32, align 8, !tbaa !11\n  %87 = icmp eq i8* %83, null\n  %88 = or i1 %84, %87\n  br i1 %88, label %90, label %89\n\n89:                                               ; preds = %82\n  store i8* %83, i8** %21, align 8, !tbaa !12\n  store i64 %85, i64* %22, align 8, !tbaa !11\n  br label %91\n\n90:                                               ; preds = %82\n  store %union.anon* %17, %union.anon** %18, align 8, !tbaa !12\n  br label %91\n\n91:                                               ; preds = %77, %89, %90\n  %92 = phi i8* [ %81, %77 ], [ %83, %89 ], [ %20, %90 ]\n  store i64 0, i64* %23, align 8, !tbaa !8\n  store i8 0, i8* %92, align 1, !tbaa !11\n  %93 = load i8*, i8** %21, align 8, !tbaa !12\n  %94 = icmp eq i8* %93, %20\n  br i1 %94, label %96, label %95\n\n95:                                               ; preds = %91\n  call void @_ZdlPv(i8* %93) #11\n  br label %96\n\n96:                                               ; preds = %91, %95\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %15) #11\n  %97 = load %\"class.std::__cxx11::basic_string\"*, %\"class.std::__cxx11::basic_string\"** %25, align 8, !tbaa !17\n  %98 = load %\"class.std::__cxx11::basic_string\"*, %\"class.std::__cxx11::basic_string\"** %26, align 8, !tbaa !19\n  %99 = icmp eq %\"class.std::__cxx11::basic_string\"* %97, %98\n  br i1 %99, label %127, label %100\n\n100:                                              ; preds = %96\n  %101 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %97, i64 0, i32 2\n  %102 = bitcast %\"class.std::__cxx11::basic_string\"* %97 to %union.anon**\n  store %union.anon* %101, %union.anon** %102, align 8, !tbaa !3\n  %103 = load i8*, i8** %12, align 8, !tbaa !12\n  %104 = load i64, i64* %13, align 8, !tbaa !8\n  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %27) #11\n  store i64 %104, i64* %3, align 8, !tbaa !16\n  %105 = icmp ugt i64 %104, 15\n  br i1 %105, label %108, label %106\n\n106:                                              ; preds = %100\n  %107 = bitcast %union.anon* %101 to i8*\n  br label %114\n\n108:                                              ; preds = %100\n  %109 = invoke i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %97, i64* nonnull align 8 dereferenceable(8) %3, i64 0)\n          to label %110 unwind label %139\n\n110:                                              ; preds = %108\n  %111 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %97, i64 0, i32 0, i32 0\n  store i8* %109, i8** %111, align 8, !tbaa !12\n  %112 = load i64, i64* %3, align 8, !tbaa !16\n  %113 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %97, i64 0, i32 2, i32 0\n  store i64 %112, i64* %113, align 8, !tbaa !11\n  br label %114\n\n114:                                              ; preds = %110, %106\n  %115 = phi i8* [ %107, %106 ], [ %109, %110 ]\n  switch i64 %104, label %118 [\n    i64 1, label %116\n    i64 0, label %119\n  ]\n\n116:                                              ; preds = %114\n  %117 = load i8, i8* %103, align 1, !tbaa !11\n  store i8 %117, i8* %115, align 1, !tbaa !11\n  br label %119\n\n118:                                              ; preds = %114\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %115, i8* align 1 %103, i64 %104, i1 false) #11\n  br label %119\n\n119:                                              ; preds = %118, %116, %114\n  %120 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %97, i64 0, i32 0, i32 0\n  %121 = load i64, i64* %3, align 8, !tbaa !16\n  %122 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %97, i64 0, i32 1\n  store i64 %121, i64* %122, align 8, !tbaa !8\n  %123 = load i8*, i8** %120, align 8, !tbaa !12\n  %124 = getelementptr inbounds i8, i8* %123, i64 %121\n  store i8 0, i8* %124, align 1, !tbaa !11\n  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %27) #11\n  %125 = load %\"class.std::__cxx11::basic_string\"*, %\"class.std::__cxx11::basic_string\"** %25, align 8, !tbaa !17\n  %126 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %125, i64 1\n  store %\"class.std::__cxx11::basic_string\"* %126, %\"class.std::__cxx11::basic_string\"** %25, align 8, !tbaa !17\n  br label %128\n\n127:                                              ; preds = %96\n  invoke void @_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_realloc_insertIJRKS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_(%\"class.std::vector\"* nonnull align 8 dereferenceable(24) %0, %\"class.std::__cxx11::basic_string\"* %97, %\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %5)\n          to label %128 unwind label %139\n\n128:                                              ; preds = %119, %127\n  %129 = add nuw i64 %40, 1\n  %130 = load i64, i64* %14, align 8, !tbaa !8\n  %131 = icmp ugt i64 %130, %129\n  %132 = load i8*, i8** %12, align 8, !tbaa !12\n  br i1 %131, label %133, label %33, !llvm.loop !20\n\n133:                                              ; preds = %128\n  %134 = load i64, i64* %13, align 8, !tbaa !8, !noalias !13\n  br label %37\n\n135:                                              ; preds = %45\n  %136 = landingpad { i8*, i32 }\n          cleanup\n  br label %137\n\n137:                                              ; preds = %60, %64, %135\n  %138 = phi { i8*, i32 } [ %136, %135 ], [ %61, %64 ], [ %61, %60 ]\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %15) #11\n  br label %141\n\n139:                                              ; preds = %127, %108\n  %140 = landingpad { i8*, i32 }\n          cleanup\n  br label %141\n\n141:                                              ; preds = %139, %137\n  %142 = phi { i8*, i32 } [ %140, %139 ], [ %138, %137 ]\n  %143 = load i8*, i8** %12, align 8, !tbaa !12\n  %144 = icmp eq i8* %143, %11\n  br i1 %144, label %146, label %145\n\n145:                                              ; preds = %141\n  call void @_ZdlPv(i8* %143) #11\n  br label %146\n\n146:                                              ; preds = %145, %141\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %8) #11\n  call void @_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED2Ev(%\"class.std::vector\"* nonnull align 8 dereferenceable(24) %0) #11\n  resume { i8*, i32 } %142\n}\n\n; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn\ndeclare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1\n\ndeclare dso_local i32 @__gxx_personality_v0(...)\n\n; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn\ndeclare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1\n\n; Function Attrs: nounwind uwtable\ndefine linkonce_odr dso_local void @_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED2Ev(%\"class.std::vector\"* nonnull align 8 dereferenceable(24) %0) unnamed_addr #2 comdat align 2 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {\n  %2 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0, i64 0, i32 0, i32 0, i32 0, i32 0\n  %3 = load %\"class.std::__cxx11::basic_string\"*, %\"class.std::__cxx11::basic_string\"** %2, align 8, !tbaa !22\n  %4 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0, i64 0, i32 0, i32 0, i32 0, i32 1\n  %5 = load %\"class.std::__cxx11::basic_string\"*, %\"class.std::__cxx11::basic_string\"** %4, align 8, !tbaa !17\n  %6 = icmp eq %\"class.std::__cxx11::basic_string\"* %3, %5\n  br i1 %6, label %20, label %7\n\n7:                                                ; preds = %1, %15\n  %8 = phi %\"class.std::__cxx11::basic_string\"* [ %16, %15 ], [ %3, %1 ]\n  %9 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %8, i64 0, i32 0, i32 0\n  %10 = load i8*, i8** %9, align 8, !tbaa !12\n  %11 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %8, i64 0, i32 2\n  %12 = bitcast %union.anon* %11 to i8*\n  %13 = icmp eq i8* %10, %12\n  br i1 %13, label %15, label %14\n\n14:                                               ; preds = %7\n  tail call void @_ZdlPv(i8* %10) #11\n  br label %15\n\n15:                                               ; preds = %14, %7\n  %16 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %8, i64 1\n  %17 = icmp eq %\"class.std::__cxx11::basic_string\"* %16, %5\n  br i1 %17, label %18, label %7, !llvm.loop !23\n\n18:                                               ; preds = %15\n  %19 = load %\"class.std::__cxx11::basic_string\"*, %\"class.std::__cxx11::basic_string\"** %2, align 8, !tbaa !22\n  br label %20\n\n20:                                               ; preds = %18, %1\n  %21 = phi %\"class.std::__cxx11::basic_string\"* [ %19, %18 ], [ %3, %1 ]\n  %22 = icmp eq %\"class.std::__cxx11::basic_string\"* %21, null\n  br i1 %22, label %25, label %23\n\n23:                                               ; preds = %20\n  %24 = bitcast %\"class.std::__cxx11::basic_string\"* %21 to i8*\n  tail call void @_ZdlPv(i8* nonnull %24) #11\n  br label %25\n\n25:                                               ; preds = %20, %23\n  ret void\n}\n\n; Function Attrs: noinline noreturn nounwind\ndefine linkonce_odr hidden void @__clang_call_terminate(i8* %0) local_unnamed_addr #3 comdat {\n  %2 = tail call i8* @__cxa_begin_catch(i8* %0) #11\n  tail call void @_ZSt9terminatev() #12\n  unreachable\n}\n\ndeclare dso_local i8* @__cxa_begin_catch(i8*) local_unnamed_addr\n\ndeclare dso_local void @_ZSt9terminatev() local_unnamed_addr\n\n; Function Attrs: nobuiltin nounwind\ndeclare dso_local void @_ZdlPv(i8*) local_unnamed_addr #4\n\ndeclare dso_local i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32), i64* nonnull align 8 dereferenceable(8), i64) local_unnamed_addr #5\n\n; Function Attrs: argmemonly mustprogress nofree nounwind willreturn\ndeclare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #6\n\ndeclare dso_local nonnull align 8 dereferenceable(32) %\"class.std::__cxx11::basic_string\"* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEmmmc(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32), i64, i64, i64, i8 signext) local_unnamed_addr #5\n\n; Function Attrs: uwtable\ndefine linkonce_odr dso_local void @_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_realloc_insertIJRKS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_(%\"class.std::vector\"* nonnull align 8 dereferenceable(24) %0, %\"class.std::__cxx11::basic_string\"* %1, %\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %2) local_unnamed_addr #0 comdat align 2 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {\n  %4 = alloca i64, align 8\n  %5 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0, i64 0, i32 0, i32 0, i32 0, i32 1\n  %6 = load %\"class.std::__cxx11::basic_string\"*, %\"class.std::__cxx11::basic_string\"** %5, align 8, !tbaa !17\n  %7 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0, i64 0, i32 0, i32 0, i32 0, i32 0\n  %8 = load %\"class.std::__cxx11::basic_string\"*, %\"class.std::__cxx11::basic_string\"** %7, align 8, !tbaa !22\n  %9 = ptrtoint %\"class.std::__cxx11::basic_string\"* %6 to i64\n  %10 = ptrtoint %\"class.std::__cxx11::basic_string\"* %8 to i64\n  %11 = sub i64 %9, %10\n  %12 = ashr exact i64 %11, 5\n  %13 = icmp eq i64 %11, 9223372036854775776\n  br i1 %13, label %14, label %15\n\n14:                                               ; preds = %3\n  tail call void @_ZSt20__throw_length_errorPKc(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.2, i64 0, i64 0)) #13\n  unreachable\n\n15:                                               ; preds = %3\n  %16 = icmp eq i64 %11, 0\n  %17 = select i1 %16, i64 1, i64 %12\n  %18 = add nsw i64 %17, %12\n  %19 = icmp ult i64 %18, %12\n  %20 = icmp ugt i64 %18, 288230376151711743\n  %21 = or i1 %19, %20\n  %22 = select i1 %21, i64 288230376151711743, i64 %18\n  %23 = ptrtoint %\"class.std::__cxx11::basic_string\"* %1 to i64\n  %24 = sub i64 %23, %10\n  %25 = ashr exact i64 %24, 5\n  %26 = icmp eq i64 %22, 0\n  br i1 %26, label %31, label %27\n\n27:                                               ; preds = %15\n  %28 = shl nuw nsw i64 %22, 5\n  %29 = tail call noalias nonnull i8* @_Znwm(i64 %28) #14\n  %30 = bitcast i8* %29 to %\"class.std::__cxx11::basic_string\"*\n  br label %31\n\n31:                                               ; preds = %15, %27\n  %32 = phi %\"class.std::__cxx11::basic_string\"* [ %30, %27 ], [ null, %15 ]\n  %33 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %32, i64 %25\n  %34 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %32, i64 %25, i32 2\n  %35 = bitcast %\"class.std::__cxx11::basic_string\"* %33 to %union.anon**\n  store %union.anon* %34, %union.anon** %35, align 8, !tbaa !3\n  %36 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %2, i64 0, i32 0, i32 0\n  %37 = load i8*, i8** %36, align 8, !tbaa !12\n  %38 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %2, i64 0, i32 1\n  %39 = load i64, i64* %38, align 8, !tbaa !8\n  %40 = bitcast i64* %4 to i8*\n  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %40) #11\n  store i64 %39, i64* %4, align 8, !tbaa !16\n  %41 = icmp ugt i64 %39, 15\n  br i1 %41, label %44, label %42\n\n42:                                               ; preds = %31\n  %43 = bitcast %union.anon* %34 to i8*\n  br label %50\n\n44:                                               ; preds = %31\n  %45 = invoke i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %33, i64* nonnull align 8 dereferenceable(8) %4, i64 0)\n          to label %46 unwind label %126\n\n46:                                               ; preds = %44\n  %47 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %33, i64 0, i32 0, i32 0\n  store i8* %45, i8** %47, align 8, !tbaa !12\n  %48 = load i64, i64* %4, align 8, !tbaa !16\n  %49 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %32, i64 %25, i32 2, i32 0\n  store i64 %48, i64* %49, align 8, !tbaa !11\n  br label %50\n\n50:                                               ; preds = %46, %42\n  %51 = phi i8* [ %43, %42 ], [ %45, %46 ]\n  switch i64 %39, label %54 [\n    i64 1, label %52\n    i64 0, label %55\n  ]\n\n52:                                               ; preds = %50\n  %53 = load i8, i8* %37, align 1, !tbaa !11\n  store i8 %53, i8* %51, align 1, !tbaa !11\n  br label %55\n\n54:                                               ; preds = %50\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %51, i8* align 1 %37, i64 %39, i1 false) #11\n  br label %55\n\n55:                                               ; preds = %54, %52, %50\n  %56 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %33, i64 0, i32 0, i32 0\n  %57 = load i64, i64* %4, align 8, !tbaa !16\n  %58 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %32, i64 %25, i32 1\n  store i64 %57, i64* %58, align 8, !tbaa !8\n  %59 = load i8*, i8** %56, align 8, !tbaa !12\n  %60 = getelementptr inbounds i8, i8* %59, i64 %57\n  store i8 0, i8* %60, align 1, !tbaa !11\n  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %40) #11\n  %61 = icmp eq %\"class.std::__cxx11::basic_string\"* %8, %1\n  br i1 %61, label %87, label %62\n\n62:                                               ; preds = %55, %79\n  %63 = phi %\"class.std::__cxx11::basic_string\"* [ %85, %79 ], [ %32, %55 ]\n  %64 = phi %\"class.std::__cxx11::basic_string\"* [ %84, %79 ], [ %8, %55 ]\n  %65 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %63, i64 0, i32 2\n  %66 = bitcast %\"class.std::__cxx11::basic_string\"* %63 to %union.anon**\n  store %union.anon* %65, %union.anon** %66, align 8, !tbaa !3\n  %67 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %64, i64 0, i32 0, i32 0\n  %68 = load i8*, i8** %67, align 8, !tbaa !12\n  %69 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %64, i64 0, i32 2\n  %70 = bitcast %union.anon* %69 to i8*\n  %71 = icmp eq i8* %68, %70\n  br i1 %71, label %72, label %74\n\n72:                                               ; preds = %62\n  %73 = bitcast %union.anon* %65 to i8*\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(16) %73, i8* noundef nonnull align 8 dereferenceable(16) %68, i64 16, i1 false) #11\n  br label %79\n\n74:                                               ; preds = %62\n  %75 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %63, i64 0, i32 0, i32 0\n  store i8* %68, i8** %75, align 8, !tbaa !12\n  %76 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %64, i64 0, i32 2, i32 0\n  %77 = load i64, i64* %76, align 8, !tbaa !11\n  %78 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %63, i64 0, i32 2, i32 0\n  store i64 %77, i64* %78, align 8, !tbaa !11\n  br label %79\n\n79:                                               ; preds = %74, %72\n  %80 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %64, i64 0, i32 1\n  %81 = load i64, i64* %80, align 8, !tbaa !8\n  %82 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %63, i64 0, i32 1\n  store i64 %81, i64* %82, align 8, !tbaa !8\n  %83 = bitcast %\"class.std::__cxx11::basic_string\"* %64 to %union.anon**\n  store %union.anon* %69, %union.anon** %83, align 8, !tbaa !12\n  store i64 0, i64* %80, align 8, !tbaa !8\n  store i8 0, i8* %70, align 8, !tbaa !11\n  %84 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %64, i64 1\n  %85 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %63, i64 1\n  %86 = icmp eq %\"class.std::__cxx11::basic_string\"* %84, %1\n  br i1 %86, label %87, label %62, !llvm.loop !24\n\n87:                                               ; preds = %79, %55\n  %88 = phi %\"class.std::__cxx11::basic_string\"* [ %32, %55 ], [ %85, %79 ]\n  %89 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %88, i64 1\n  %90 = icmp eq %\"class.std::__cxx11::basic_string\"* %6, %1\n  br i1 %90, label %116, label %91\n\n91:                                               ; preds = %87, %108\n  %92 = phi %\"class.std::__cxx11::basic_string\"* [ %114, %108 ], [ %89, %87 ]\n  %93 = phi %\"class.std::__cxx11::basic_string\"* [ %113, %108 ], [ %1, %87 ]\n  %94 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %92, i64 0, i32 2\n  %95 = bitcast %\"class.std::__cxx11::basic_string\"* %92 to %union.anon**\n  store %union.anon* %94, %union.anon** %95, align 8, !tbaa !3\n  %96 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %93, i64 0, i32 0, i32 0\n  %97 = load i8*, i8** %96, align 8, !tbaa !12\n  %98 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %93, i64 0, i32 2\n  %99 = bitcast %union.anon* %98 to i8*\n  %100 = icmp eq i8* %97, %99\n  br i1 %100, label %101, label %103\n\n101:                                              ; preds = %91\n  %102 = bitcast %union.anon* %94 to i8*\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(16) %102, i8* noundef nonnull align 8 dereferenceable(16) %97, i64 16, i1 false) #11\n  br label %108\n\n103:                                              ; preds = %91\n  %104 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %92, i64 0, i32 0, i32 0\n  store i8* %97, i8** %104, align 8, !tbaa !12\n  %105 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %93, i64 0, i32 2, i32 0\n  %106 = load i64, i64* %105, align 8, !tbaa !11\n  %107 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %92, i64 0, i32 2, i32 0\n  store i64 %106, i64* %107, align 8, !tbaa !11\n  br label %108\n\n108:                                              ; preds = %103, %101\n  %109 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %93, i64 0, i32 1\n  %110 = load i64, i64* %109, align 8, !tbaa !8\n  %111 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %92, i64 0, i32 1\n  store i64 %110, i64* %111, align 8, !tbaa !8\n  %112 = bitcast %\"class.std::__cxx11::basic_string\"* %93 to %union.anon**\n  store %union.anon* %98, %union.anon** %112, align 8, !tbaa !12\n  store i64 0, i64* %109, align 8, !tbaa !8\n  store i8 0, i8* %99, align 8, !tbaa !11\n  %113 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %93, i64 1\n  %114 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %92, i64 1\n  %115 = icmp eq %\"class.std::__cxx11::basic_string\"* %113, %6\n  br i1 %115, label %116, label %91, !llvm.loop !24\n\n116:                                              ; preds = %108, %87\n  %117 = phi %\"class.std::__cxx11::basic_string\"* [ %89, %87 ], [ %114, %108 ]\n  %118 = icmp eq %\"class.std::__cxx11::basic_string\"* %8, null\n  br i1 %118, label %121, label %119\n\n119:                                              ; preds = %116\n  %120 = bitcast %\"class.std::__cxx11::basic_string\"* %8 to i8*\n  call void @_ZdlPv(i8* nonnull %120) #11\n  br label %121\n\n121:                                              ; preds = %116, %119\n  %122 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0, i64 0, i32 0, i32 0, i32 0, i32 2\n  store %\"class.std::__cxx11::basic_string\"* %32, %\"class.std::__cxx11::basic_string\"** %7, align 8, !tbaa !22\n  store %\"class.std::__cxx11::basic_string\"* %117, %\"class.std::__cxx11::basic_string\"** %5, align 8, !tbaa !17\n  %123 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %32, i64 %22\n  store %\"class.std::__cxx11::basic_string\"* %123, %\"class.std::__cxx11::basic_string\"** %122, align 8, !tbaa !19\n  ret void\n\n124:                                              ; preds = %126\n  %125 = landingpad { i8*, i32 }\n          cleanup\n  invoke void @__cxa_end_catch()\n          to label %131 unwind label %132\n\n126:                                              ; preds = %44\n  %127 = landingpad { i8*, i32 }\n          catch i8* null\n  %128 = extractvalue { i8*, i32 } %127, 0\n  %129 = call i8* @__cxa_begin_catch(i8* %128) #11\n  %130 = bitcast %\"class.std::__cxx11::basic_string\"* %32 to i8*\n  call void @_ZdlPv(i8* nonnull %130) #11\n  invoke void @__cxa_rethrow() #13\n          to label %135 unwind label %124\n\n131:                                              ; preds = %124\n  resume { i8*, i32 } %125\n\n132:                                              ; preds = %124\n  %133 = landingpad { i8*, i32 }\n          catch i8* null\n  %134 = extractvalue { i8*, i32 } %133, 0\n  call void @__clang_call_terminate(i8* %134) #12\n  unreachable\n\n135:                                              ; preds = %126\n  unreachable\n}\n\ndeclare dso_local void @__cxa_rethrow() local_unnamed_addr\n\ndeclare dso_local void @__cxa_end_catch() local_unnamed_addr\n\n; Function Attrs: noreturn\ndeclare dso_local void @_ZSt20__throw_length_errorPKc(i8*) local_unnamed_addr #7\n\n; Function Attrs: nobuiltin allocsize(0)\ndeclare dso_local nonnull i8* @_Znwm(i64) local_unnamed_addr #8\n\n; Function Attrs: argmemonly nofree nounwind willreturn writeonly\ndeclare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #9\n\n; Function Attrs: inaccessiblememonly nofree nosync nounwind willreturn\ndeclare void @llvm.experimental.noalias.scope.decl(metadata) #10\n\nattributes #0 = { uwtable \"frame-pointer\"=\"none\" \"min-legal-vector-width\"=\"0\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #1 = { argmemonly mustprogress nofree nosync nounwind willreturn }\nattributes #2 = { nounwind uwtable \"frame-pointer\"=\"none\" \"min-legal-vector-width\"=\"0\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #3 = { noinline noreturn nounwind }\nattributes #4 = { nobuiltin nounwind \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #5 = { \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #6 = { argmemonly mustprogress nofree nounwind willreturn }\nattributes #7 = { noreturn \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #8 = { nobuiltin allocsize(0) \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #9 = { argmemonly nofree nounwind willreturn writeonly }\nattributes #10 = { inaccessiblememonly nofree nosync nounwind willreturn }\nattributes #11 = { nounwind }\nattributes #12 = { noreturn nounwind }\nattributes #13 = { noreturn }\nattributes #14 = { allocsize(0) }\n\n!llvm.module.flags = !{!0, !1}\n!llvm.ident = !{!2}\n\n!0 = !{i32 1, !\"wchar_size\", i32 4}\n!1 = !{i32 7, !\"uwtable\", i32 1}\n!2 = !{!\"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)\"}\n!3 = !{!4, !5, i64 0}\n!4 = !{!\"_ZTSNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderE\", !5, i64 0}\n!5 = !{!\"any pointer\", !6, i64 0}\n!6 = !{!\"omnipotent char\", !7, i64 0}\n!7 = !{!\"Simple C++ TBAA\"}\n!8 = !{!9, !10, i64 8}\n!9 = !{!\"_ZTSNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE\", !4, i64 0, !10, i64 8, !6, i64 16}\n!10 = !{!\"long\", !6, i64 0}\n!11 = !{!6, !6, i64 0}\n!12 = !{!9, !5, i64 0}\n!13 = !{!14}\n!14 = distinct !{!14, !15, !\"_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_S5_: argument 0\"}\n!15 = distinct !{!15, !\"_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_S5_\"}\n!16 = !{!10, !10, i64 0}\n!17 = !{!18, !5, i64 8}\n!18 = !{!\"_ZTSNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_Vector_impl_dataE\", !5, i64 0, !5, i64 8, !5, i64 16}\n!19 = !{!18, !5, i64 16}\n!20 = distinct !{!20, !21}\n!21 = !{!\"llvm.loop.mustprogress\"}\n!22 = !{!18, !5, i64 0}\n!23 = distinct !{!23, !21}\n!24 = distinct !{!24, !21}\n", "target": "This is the targeted source code:\n/*\nReturn vector of all prefixes from shortest to longest of the input string\n>>> all_prefixes(\"abc\")\n{\"a\", \"ab\", \"abc\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> all_prefixes(string str){\n\n    vector<string> out;\n    string current=\"\";\n    for (int i=0;i<str.length();i++)\n    {\n        current=current+str[i];\n        out.push_back(current);\n    }\n    return out;\n}\n"}
{"input": "Convert this to C++:\n; ModuleID = '../../Human_xBenchmarks_164/CPP_15/CPP_15.cpp'\nsource_filename = \"../../Human_xBenchmarks_164/CPP_15/CPP_15.cpp\"\ntarget datalayout = \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\ntarget triple = \"x86_64-unknown-linux-gnu\"\n\n%\"class.std::__cxx11::basic_string\" = type { %\"struct.std::__cxx11::basic_string<char>::_Alloc_hider\", i64, %union.anon }\n%\"struct.std::__cxx11::basic_string<char>::_Alloc_hider\" = type { i8* }\n%union.anon = type { i64, [8 x i8] }\n%struct.__va_list_tag = type { i32, i32, i8*, i8* }\n\n$_ZN9__gnu_cxx12__to_xstringINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcEET_PFiPT0_mPKS8_P13__va_list_tagEmSB_z = comdat any\n\n@.str.1 = private unnamed_addr constant [2 x i8] c\" \\00\", align 1\n@.str.2 = private unnamed_addr constant [3 x i8] c\"%d\\00\", align 1\n@.str.4 = private unnamed_addr constant [21 x i8] c\"basic_string::append\\00\", align 1\n\n; Function Attrs: uwtable\ndefine dso_local void @_Z15string_sequenceB5cxx11i(%\"class.std::__cxx11::basic_string\"* noalias sret(%\"class.std::__cxx11::basic_string\") align 8 %0, i32 %1) local_unnamed_addr #0 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {\n  %3 = alloca i64, align 8\n  %4 = alloca %\"class.std::__cxx11::basic_string\", align 8\n  %5 = alloca %\"class.std::__cxx11::basic_string\", align 8\n  %6 = alloca %\"class.std::__cxx11::basic_string\", align 8\n  %7 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 2\n  %8 = bitcast %\"class.std::__cxx11::basic_string\"* %0 to %union.anon**\n  store %union.anon* %7, %union.anon** %8, align 8, !tbaa !3\n  %9 = bitcast %union.anon* %7 to i8*\n  store i8 48, i8* %9, align 8, !tbaa !8\n  %10 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 0, i32 0\n  %11 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 1\n  store i64 1, i64* %11, align 8, !tbaa !9\n  %12 = getelementptr inbounds i8, i8* %9, i64 1\n  store i8 0, i8* %12, align 1, !tbaa !8\n  %13 = bitcast %\"class.std::__cxx11::basic_string\"* %4 to i8*\n  %14 = bitcast %\"class.std::__cxx11::basic_string\"* %5 to i8*\n  %15 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %5, i64 0, i32 2\n  %16 = bitcast %\"class.std::__cxx11::basic_string\"* %5 to %union.anon**\n  %17 = bitcast i64* %3 to i8*\n  %18 = bitcast %union.anon* %15 to i8*\n  %19 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %5, i64 0, i32 0, i32 0\n  %20 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %5, i64 0, i32 2, i32 0\n  %21 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %5, i64 0, i32 1\n  %22 = bitcast %\"class.std::__cxx11::basic_string\"* %6 to i8*\n  %23 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %6, i64 0, i32 1\n  %24 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %6, i64 0, i32 0, i32 0\n  %25 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %6, i64 0, i32 2\n  %26 = bitcast %union.anon* %25 to i8*\n  %27 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %6, i64 0, i32 2, i32 0\n  %28 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %4, i64 0, i32 2\n  %29 = bitcast %\"class.std::__cxx11::basic_string\"* %4 to %union.anon**\n  %30 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %4, i64 0, i32 0, i32 0\n  %31 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %4, i64 0, i32 2, i32 0\n  %32 = bitcast %union.anon* %28 to i8*\n  %33 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %4, i64 0, i32 1\n  %34 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 2, i32 0\n  %35 = icmp slt i32 %1, 1\n  br i1 %35, label %170, label %36\n\n36:                                               ; preds = %2\n  %37 = bitcast i64* %33 to <2 x i64>*\n  %38 = bitcast i64* %11 to <2 x i64>*\n  br label %39\n\n39:                                               ; preds = %36, %147\n  %40 = phi i64 [ %150, %147 ], [ 1, %36 ]\n  %41 = phi i8* [ %149, %147 ], [ %9, %36 ]\n  %42 = phi i32 [ %148, %147 ], [ 1, %36 ]\n  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %13) #9\n  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %14) #9\n  call void @llvm.experimental.noalias.scope.decl(metadata !12)\n  store %union.anon* %15, %union.anon** %16, align 8, !tbaa !3, !alias.scope !12\n  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %17) #9, !noalias !12\n  store i64 %40, i64* %3, align 8, !tbaa !15, !noalias !12\n  %43 = icmp ugt i64 %40, 15\n  br i1 %43, label %44, label %48\n\n44:                                               ; preds = %39\n  %45 = invoke i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %5, i64* nonnull align 8 dereferenceable(8) %3, i64 0)\n          to label %46 unwind label %151\n\n46:                                               ; preds = %44\n  store i8* %45, i8** %19, align 8, !tbaa !16, !alias.scope !12\n  %47 = load i64, i64* %3, align 8, !tbaa !15, !noalias !12\n  store i64 %47, i64* %20, align 8, !tbaa !8, !alias.scope !12\n  br label %48\n\n48:                                               ; preds = %39, %46\n  %49 = phi i8* [ %45, %46 ], [ %18, %39 ]\n  switch i64 %40, label %52 [\n    i64 1, label %50\n    i64 0, label %53\n  ]\n\n50:                                               ; preds = %48\n  %51 = load i8, i8* %41, align 1, !tbaa !8\n  store i8 %51, i8* %49, align 1, !tbaa !8\n  br label %53\n\n52:                                               ; preds = %48\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %49, i8* align 1 %41, i64 %40, i1 false) #9\n  br label %53\n\n53:                                               ; preds = %52, %50, %48\n  %54 = load i64, i64* %3, align 8, !tbaa !15, !noalias !12\n  store i64 %54, i64* %21, align 8, !tbaa !9, !alias.scope !12\n  %55 = load i8*, i8** %19, align 8, !tbaa !16, !alias.scope !12\n  %56 = getelementptr inbounds i8, i8* %55, i64 %54\n  store i8 0, i8* %56, align 1, !tbaa !8\n  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %17) #9, !noalias !12\n  %57 = load i64, i64* %21, align 8, !tbaa !9, !alias.scope !12\n  %58 = icmp eq i64 %57, 4611686018427387903\n  br i1 %58, label %59, label %61\n\n59:                                               ; preds = %53\n  invoke void @_ZSt20__throw_length_errorPKc(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.4, i64 0, i64 0)) #10\n          to label %60 unwind label %65\n\n60:                                               ; preds = %59\n  unreachable\n\n61:                                               ; preds = %53\n  %62 = invoke nonnull align 8 dereferenceable(32) %\"class.std::__cxx11::basic_string\"* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %5, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0), i64 1)\n          to label %72 unwind label %63\n\n63:                                               ; preds = %61\n  %64 = landingpad { i8*, i32 }\n          cleanup\n  br label %67\n\n65:                                               ; preds = %59\n  %66 = landingpad { i8*, i32 }\n          cleanup\n  br label %67\n\n67:                                               ; preds = %65, %63\n  %68 = phi { i8*, i32 } [ %64, %63 ], [ %66, %65 ]\n  %69 = load i8*, i8** %19, align 8, !tbaa !16, !alias.scope !12\n  %70 = icmp eq i8* %69, %18\n  br i1 %70, label %165, label %71\n\n71:                                               ; preds = %67\n  call void @_ZdlPv(i8* %69) #9\n  br label %165\n\n72:                                               ; preds = %61\n  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %22) #9\n  invoke void (%\"class.std::__cxx11::basic_string\"*, i32 (i8*, i64, i8*, %struct.__va_list_tag*)*, i64, i8*, ...) @_ZN9__gnu_cxx12__to_xstringINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcEET_PFiPT0_mPKS8_P13__va_list_tagEmSB_z(%\"class.std::__cxx11::basic_string\"* nonnull sret(%\"class.std::__cxx11::basic_string\") align 8 %6, i32 (i8*, i64, i8*, %struct.__va_list_tag*)* nonnull @vsnprintf, i64 16, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i64 0, i64 0), i32 %42)\n          to label %73 unwind label %153\n\n73:                                               ; preds = %72\n  call void @llvm.experimental.noalias.scope.decl(metadata !17)\n  %74 = load i64, i64* %21, align 8, !tbaa !9, !noalias !17\n  %75 = load i64, i64* %23, align 8, !tbaa !9, !noalias !17\n  %76 = add i64 %75, %74\n  %77 = load i8*, i8** %19, align 8, !tbaa !16, !noalias !17\n  %78 = icmp eq i8* %77, %18\n  %79 = load i64, i64* %20, align 8, !noalias !17\n  %80 = select i1 %78, i64 15, i64 %79\n  %81 = icmp ugt i64 %76, %80\n  %82 = load i8*, i8** %24, align 8, !tbaa !16, !noalias !17\n  br i1 %81, label %83, label %90\n\n83:                                               ; preds = %73\n  %84 = icmp eq i8* %82, %26\n  %85 = load i64, i64* %27, align 8, !noalias !17\n  %86 = select i1 %84, i64 15, i64 %85\n  %87 = icmp ugt i64 %76, %86\n  br i1 %87, label %90, label %88\n\n88:                                               ; preds = %83\n  %89 = invoke nonnull align 8 dereferenceable(32) %\"class.std::__cxx11::basic_string\"* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %6, i64 0, i64 0, i8* %77, i64 %74)\n          to label %92 unwind label %155\n\n90:                                               ; preds = %83, %73\n  %91 = invoke nonnull align 8 dereferenceable(32) %\"class.std::__cxx11::basic_string\"* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %5, i8* %82, i64 %75)\n          to label %92 unwind label %155\n\n92:                                               ; preds = %90, %88\n  %93 = phi %\"class.std::__cxx11::basic_string\"* [ %89, %88 ], [ %91, %90 ]\n  store %union.anon* %28, %union.anon** %29, align 8, !tbaa !3, !alias.scope !17\n  %94 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %93, i64 0, i32 0, i32 0\n  %95 = load i8*, i8** %94, align 8, !tbaa !16\n  %96 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %93, i64 0, i32 2\n  %97 = bitcast %union.anon* %96 to i8*\n  %98 = icmp eq i8* %95, %97\n  br i1 %98, label %99, label %100\n\n99:                                               ; preds = %92\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(16) %32, i8* noundef nonnull align 8 dereferenceable(16) %95, i64 16, i1 false) #9\n  br label %103\n\n100:                                              ; preds = %92\n  store i8* %95, i8** %30, align 8, !tbaa !16, !alias.scope !17\n  %101 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %93, i64 0, i32 2, i32 0\n  %102 = load i64, i64* %101, align 8, !tbaa !8\n  store i64 %102, i64* %31, align 8, !tbaa !8, !alias.scope !17\n  br label %103\n\n103:                                              ; preds = %100, %99\n  %104 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %93, i64 0, i32 1\n  %105 = load i64, i64* %104, align 8, !tbaa !9\n  store i64 %105, i64* %33, align 8, !tbaa !9, !alias.scope !17\n  %106 = bitcast %\"class.std::__cxx11::basic_string\"* %93 to %union.anon**\n  store %union.anon* %96, %union.anon** %106, align 8, !tbaa !16\n  store i64 0, i64* %104, align 8, !tbaa !9\n  store i8 0, i8* %97, align 8, !tbaa !8\n  %107 = load i8*, i8** %30, align 8, !tbaa !16\n  %108 = icmp eq i8* %107, %32\n  br i1 %108, label %109, label %123\n\n109:                                              ; preds = %103\n  %110 = load i64, i64* %33, align 8, !tbaa !9\n  %111 = icmp eq i64 %110, 0\n  br i1 %111, label %118, label %112\n\n112:                                              ; preds = %109\n  %113 = load i8*, i8** %10, align 8, !tbaa !16\n  %114 = icmp eq i64 %110, 1\n  br i1 %114, label %115, label %117\n\n115:                                              ; preds = %112\n  %116 = load i8, i8* %32, align 8, !tbaa !8\n  store i8 %116, i8* %113, align 1, !tbaa !8\n  br label %118\n\n117:                                              ; preds = %112\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %113, i8* nonnull align 8 %32, i64 %110, i1 false) #9\n  br label %118\n\n118:                                              ; preds = %117, %115, %109\n  %119 = load i64, i64* %33, align 8, !tbaa !9\n  store i64 %119, i64* %11, align 8, !tbaa !9\n  %120 = load i8*, i8** %10, align 8, !tbaa !16\n  %121 = getelementptr inbounds i8, i8* %120, i64 %119\n  store i8 0, i8* %121, align 1, !tbaa !8\n  %122 = load i8*, i8** %30, align 8, !tbaa !16\n  br label %132\n\n123:                                              ; preds = %103\n  %124 = load i8*, i8** %10, align 8, !tbaa !16\n  %125 = icmp eq i8* %124, %9\n  %126 = load i64, i64* %34, align 8\n  store i8* %107, i8** %10, align 8, !tbaa !16\n  %127 = load <2 x i64>, <2 x i64>* %37, align 8, !tbaa !8\n  store <2 x i64> %127, <2 x i64>* %38, align 8, !tbaa !8\n  %128 = icmp eq i8* %124, null\n  %129 = or i1 %125, %128\n  br i1 %129, label %131, label %130\n\n130:                                              ; preds = %123\n  store i8* %124, i8** %30, align 8, !tbaa !16\n  store i64 %126, i64* %31, align 8, !tbaa !8\n  br label %132\n\n131:                                              ; preds = %123\n  store %union.anon* %28, %union.anon** %29, align 8, !tbaa !16\n  br label %132\n\n132:                                              ; preds = %118, %130, %131\n  %133 = phi i8* [ %122, %118 ], [ %124, %130 ], [ %32, %131 ]\n  store i64 0, i64* %33, align 8, !tbaa !9\n  store i8 0, i8* %133, align 1, !tbaa !8\n  %134 = load i8*, i8** %30, align 8, !tbaa !16\n  %135 = icmp eq i8* %134, %32\n  br i1 %135, label %137, label %136\n\n136:                                              ; preds = %132\n  call void @_ZdlPv(i8* %134) #9\n  br label %137\n\n137:                                              ; preds = %132, %136\n  %138 = load i8*, i8** %24, align 8, !tbaa !16\n  %139 = icmp eq i8* %138, %26\n  br i1 %139, label %141, label %140\n\n140:                                              ; preds = %137\n  call void @_ZdlPv(i8* %138) #9\n  br label %141\n\n141:                                              ; preds = %137, %140\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %22) #9\n  %142 = load i8*, i8** %19, align 8, !tbaa !16\n  %143 = icmp eq i8* %142, %18\n  br i1 %143, label %145, label %144\n\n144:                                              ; preds = %141\n  call void @_ZdlPv(i8* %142) #9\n  br label %145\n\n145:                                              ; preds = %141, %144\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %14) #9\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %13) #9\n  %146 = icmp eq i32 %42, %1\n  br i1 %146, label %170, label %147, !llvm.loop !20\n\n147:                                              ; preds = %145\n  %148 = add nuw i32 %42, 1\n  %149 = load i8*, i8** %10, align 8, !tbaa !16, !noalias !12\n  %150 = load i64, i64* %11, align 8, !tbaa !9, !noalias !12\n  br label %39\n\n151:                                              ; preds = %44\n  %152 = landingpad { i8*, i32 }\n          cleanup\n  br label %165\n\n153:                                              ; preds = %72\n  %154 = landingpad { i8*, i32 }\n          cleanup\n  br label %160\n\n155:                                              ; preds = %90, %88\n  %156 = landingpad { i8*, i32 }\n          cleanup\n  %157 = load i8*, i8** %24, align 8, !tbaa !16\n  %158 = icmp eq i8* %157, %26\n  br i1 %158, label %160, label %159\n\n159:                                              ; preds = %155\n  call void @_ZdlPv(i8* %157) #9\n  br label %160\n\n160:                                              ; preds = %159, %155, %153\n  %161 = phi { i8*, i32 } [ %154, %153 ], [ %156, %155 ], [ %156, %159 ]\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %22) #9\n  %162 = load i8*, i8** %19, align 8, !tbaa !16\n  %163 = icmp eq i8* %162, %18\n  br i1 %163, label %165, label %164\n\n164:                                              ; preds = %160\n  call void @_ZdlPv(i8* %162) #9\n  br label %165\n\n165:                                              ; preds = %164, %160, %151, %71, %67\n  %166 = phi { i8*, i32 } [ %152, %151 ], [ %68, %71 ], [ %68, %67 ], [ %161, %160 ], [ %161, %164 ]\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %14) #9\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %13) #9\n  %167 = load i8*, i8** %10, align 8, !tbaa !16\n  %168 = icmp eq i8* %167, %9\n  br i1 %168, label %171, label %169\n\n169:                                              ; preds = %165\n  call void @_ZdlPv(i8* %167) #9\n  br label %171\n\n170:                                              ; preds = %145, %2\n  ret void\n\n171:                                              ; preds = %169, %165\n  resume { i8*, i32 } %166\n}\n\n; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn\ndeclare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1\n\ndeclare dso_local i32 @__gxx_personality_v0(...)\n\n; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn\ndeclare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1\n\n; Function Attrs: uwtable\ndefine linkonce_odr dso_local void @_ZN9__gnu_cxx12__to_xstringINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcEET_PFiPT0_mPKS8_P13__va_list_tagEmSB_z(%\"class.std::__cxx11::basic_string\"* noalias sret(%\"class.std::__cxx11::basic_string\") align 8 %0, i32 (i8*, i64, i8*, %struct.__va_list_tag*)* %1, i64 %2, i8* %3, ...) local_unnamed_addr #0 comdat personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {\n  %5 = alloca i64, align 8\n  %6 = alloca [1 x %struct.__va_list_tag], align 16\n  %7 = alloca i8, i64 %2, align 16\n  %8 = bitcast [1 x %struct.__va_list_tag]* %6 to i8*\n  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %8) #9\n  %9 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %6, i64 0, i64 0\n  call void @llvm.va_start(i8* nonnull %8)\n  %10 = call i32 %1(i8* nonnull %7, i64 %2, i8* %3, %struct.__va_list_tag* nonnull %9)\n  call void @llvm.va_end(i8* nonnull %8)\n  %11 = sext i32 %10 to i64\n  %12 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 2\n  %13 = bitcast %\"class.std::__cxx11::basic_string\"* %0 to %union.anon**\n  store %union.anon* %12, %union.anon** %13, align 8, !tbaa !3\n  %14 = bitcast %union.anon* %12 to i8*\n  %15 = bitcast i64* %5 to i8*\n  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %15) #9\n  store i64 %11, i64* %5, align 8, !tbaa !15\n  %16 = icmp ugt i32 %10, 15\n  br i1 %16, label %17, label %22\n\n17:                                               ; preds = %4\n  %18 = call i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %0, i64* nonnull align 8 dereferenceable(8) %5, i64 0)\n  %19 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 0, i32 0\n  store i8* %18, i8** %19, align 8, !tbaa !16\n  %20 = load i64, i64* %5, align 8, !tbaa !15\n  %21 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 2, i32 0\n  store i64 %20, i64* %21, align 8, !tbaa !8\n  br label %22\n\n22:                                               ; preds = %17, %4\n  %23 = phi i8* [ %18, %17 ], [ %14, %4 ]\n  switch i64 %11, label %26 [\n    i64 1, label %24\n    i64 0, label %27\n  ]\n\n24:                                               ; preds = %22\n  %25 = load i8, i8* %7, align 16, !tbaa !8\n  store i8 %25, i8* %23, align 1, !tbaa !8\n  br label %27\n\n26:                                               ; preds = %22\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %23, i8* nonnull align 16 %7, i64 %11, i1 false) #9\n  br label %27\n\n27:                                               ; preds = %26, %24, %22\n  %28 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 0, i32 0\n  %29 = load i64, i64* %5, align 8, !tbaa !15\n  %30 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 1\n  store i64 %29, i64* %30, align 8, !tbaa !9\n  %31 = load i8*, i8** %28, align 8, !tbaa !16\n  %32 = getelementptr inbounds i8, i8* %31, i64 %29\n  store i8 0, i8* %32, align 1, !tbaa !8\n  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %15) #9\n  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %8) #9\n  ret void\n}\n\n; Function Attrs: nofree nounwind\ndeclare dso_local noundef i32 @vsnprintf(i8* nocapture noundef, i64 noundef, i8* nocapture noundef readonly, %struct.__va_list_tag* noundef) #2\n\n; Function Attrs: mustprogress nofree nosync nounwind willreturn\ndeclare void @llvm.va_start(i8*) #3\n\n; Function Attrs: mustprogress nofree nosync nounwind willreturn\ndeclare void @llvm.va_end(i8*) #3\n\ndeclare dso_local i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32), i64* nonnull align 8 dereferenceable(8), i64) local_unnamed_addr #4\n\n; Function Attrs: argmemonly mustprogress nofree nounwind willreturn\ndeclare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #5\n\n; Function Attrs: nobuiltin nounwind\ndeclare dso_local void @_ZdlPv(i8*) local_unnamed_addr #6\n\ndeclare dso_local nonnull align 8 dereferenceable(32) %\"class.std::__cxx11::basic_string\"* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32), i8*, i64) local_unnamed_addr #4\n\n; Function Attrs: noreturn\ndeclare dso_local void @_ZSt20__throw_length_errorPKc(i8*) local_unnamed_addr #7\n\ndeclare dso_local nonnull align 8 dereferenceable(32) %\"class.std::__cxx11::basic_string\"* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32), i64, i64, i8*, i64) local_unnamed_addr #4\n\n; Function Attrs: inaccessiblememonly nofree nosync nounwind willreturn\ndeclare void @llvm.experimental.noalias.scope.decl(metadata) #8\n\nattributes #0 = { uwtable \"frame-pointer\"=\"none\" \"min-legal-vector-width\"=\"0\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #1 = { argmemonly mustprogress nofree nosync nounwind willreturn }\nattributes #2 = { nofree nounwind \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #3 = { mustprogress nofree nosync nounwind willreturn }\nattributes #4 = { \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #5 = { argmemonly mustprogress nofree nounwind willreturn }\nattributes #6 = { nobuiltin nounwind \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #7 = { noreturn \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #8 = { inaccessiblememonly nofree nosync nounwind willreturn }\nattributes #9 = { nounwind }\nattributes #10 = { noreturn }\n\n!llvm.module.flags = !{!0, !1}\n!llvm.ident = !{!2}\n\n!0 = !{i32 1, !\"wchar_size\", i32 4}\n!1 = !{i32 7, !\"uwtable\", i32 1}\n!2 = !{!\"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)\"}\n!3 = !{!4, !5, i64 0}\n!4 = !{!\"_ZTSNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderE\", !5, i64 0}\n!5 = !{!\"any pointer\", !6, i64 0}\n!6 = !{!\"omnipotent char\", !7, i64 0}\n!7 = !{!\"Simple C++ TBAA\"}\n!8 = !{!6, !6, i64 0}\n!9 = !{!10, !11, i64 8}\n!10 = !{!\"_ZTSNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE\", !4, i64 0, !11, i64 8, !6, i64 16}\n!11 = !{!\"long\", !6, i64 0}\n!12 = !{!13}\n!13 = distinct !{!13, !14, !\"_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_: argument 0\"}\n!14 = distinct !{!14, !\"_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_\"}\n!15 = !{!11, !11, i64 0}\n!16 = !{!10, !5, i64 0}\n!17 = !{!18}\n!18 = distinct !{!18, !19, !\"_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_S9_: argument 0\"}\n!19 = distinct !{!19, !\"_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_S9_\"}\n!20 = distinct !{!20, !21}\n!21 = !{!\"llvm.loop.mustprogress\"}\n", "target": "This is the targeted source code:\n/*\nReturn a string containing space-delimited numbers starting from 0 upto n inclusive.\n>>> string_sequence(0)\n\"0\"\n>>> string_sequence(5)\n\"0 1 2 3 4 5\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring string_sequence(int n){\n\n    string out=\"0\";\n    for (int i=1;i<=n;i++)\n    out=out+\" \"+to_string(i);\n    return out;\n}\n"}
{"input": "Convert this to C++:\n; ModuleID = '../../Human_xBenchmarks_164/CPP_16/CPP_16.cpp'\nsource_filename = \"../../Human_xBenchmarks_164/CPP_16/CPP_16.cpp\"\ntarget datalayout = \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\ntarget triple = \"x86_64-unknown-linux-gnu\"\n\n%\"class.std::__cxx11::basic_string\" = type { %\"struct.std::__cxx11::basic_string<char>::_Alloc_hider\", i64, %union.anon }\n%\"struct.std::__cxx11::basic_string<char>::_Alloc_hider\" = type { i8* }\n%union.anon = type { i64, [8 x i8] }\n\n@.str = private unnamed_addr constant [26 x i8] c\"vector::_M_realloc_insert\\00\", align 1\n\n; Function Attrs: uwtable\ndefine dso_local i32 @_Z25count_distinct_charactersNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE(%\"class.std::__cxx11::basic_string\"* nocapture readonly %0) local_unnamed_addr #0 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {\n  %2 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 0, i32 0\n  %3 = load i8*, i8** %2, align 8, !tbaa !3\n  %4 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 1\n  %5 = load i64, i64* %4, align 8, !tbaa !10\n  %6 = getelementptr inbounds i8, i8* %3, i64 %5\n  %7 = icmp eq i64 %5, 0\n  br i1 %7, label %41, label %8\n\n8:                                                ; preds = %1, %8\n  %9 = phi i8* [ %14, %8 ], [ %3, %1 ]\n  %10 = load i8, i8* %9, align 1, !tbaa !11\n  %11 = sext i8 %10 to i32\n  %12 = tail call i32 @tolower(i32 %11)\n  %13 = trunc i32 %12 to i8\n  store i8 %13, i8* %9, align 1, !tbaa !11\n  %14 = getelementptr inbounds i8, i8* %9, i64 1\n  %15 = icmp eq i8* %14, %6\n  br i1 %15, label %16, label %8, !llvm.loop !12\n\n16:                                               ; preds = %8\n  %17 = load i64, i64* %4, align 8, !tbaa !10\n  %18 = icmp eq i64 %17, 0\n  br i1 %18, label %41, label %19\n\n19:                                               ; preds = %16, %136\n  %20 = phi i64 [ %140, %136 ], [ 0, %16 ]\n  %21 = phi i8* [ %139, %136 ], [ null, %16 ]\n  %22 = phi i8* [ %138, %136 ], [ null, %16 ]\n  %23 = phi i8* [ %137, %136 ], [ null, %16 ]\n  %24 = ptrtoint i8* %22 to i64\n  %25 = ptrtoint i8* %23 to i64\n  %26 = sub i64 %24, %25\n  %27 = icmp eq i64 %26, 0\n  %28 = load i8*, i8** %2, align 8, !tbaa !3\n  %29 = getelementptr inbounds i8, i8* %28, i64 %20\n  br i1 %27, label %98, label %30\n\n30:                                               ; preds = %19\n  %31 = load i8, i8* %29, align 1, !tbaa !11\n  %32 = xor i64 %25, -1\n  %33 = add i64 %32, %24\n  %34 = and i64 %26, 3\n  %35 = icmp ult i64 %33, 3\n  br i1 %35, label %48, label %36\n\n36:                                               ; preds = %30\n  %37 = and i64 %26, -4\n  br label %68\n\n38:                                               ; preds = %136\n  %39 = icmp eq i8* %137, null\n  br i1 %39, label %41, label %40\n\n40:                                               ; preds = %38\n  tail call void @_ZdlPv(i8* nonnull %137) #6\n  br label %41\n\n41:                                               ; preds = %1, %16, %38, %40\n  %42 = phi i8* [ %138, %38 ], [ %138, %40 ], [ null, %16 ], [ null, %1 ]\n  %43 = phi i8* [ null, %38 ], [ %137, %40 ], [ null, %16 ], [ null, %1 ]\n  %44 = ptrtoint i8* %42 to i64\n  %45 = ptrtoint i8* %43 to i64\n  %46 = sub i64 %44, %45\n  %47 = trunc i64 %46 to i32\n  ret i32 %47\n\n48:                                               ; preds = %68, %30\n  %49 = phi i8 [ undef, %30 ], [ %90, %68 ]\n  %50 = phi i64 [ 0, %30 ], [ %91, %68 ]\n  %51 = phi i8 [ 0, %30 ], [ %90, %68 ]\n  %52 = icmp eq i64 %34, 0\n  br i1 %52, label %64, label %53\n\n53:                                               ; preds = %48, %53\n  %54 = phi i64 [ %61, %53 ], [ %50, %48 ]\n  %55 = phi i8 [ %60, %53 ], [ %51, %48 ]\n  %56 = phi i64 [ %62, %53 ], [ %34, %48 ]\n  %57 = getelementptr inbounds i8, i8* %23, i64 %54\n  %58 = load i8, i8* %57, align 1, !tbaa !11\n  %59 = icmp eq i8 %58, %31\n  %60 = select i1 %59, i8 1, i8 %55\n  %61 = add nuw nsw i64 %54, 1\n  %62 = add i64 %56, -1\n  %63 = icmp eq i64 %62, 0\n  br i1 %63, label %64, label %53, !llvm.loop !14\n\n64:                                               ; preds = %53, %48\n  %65 = phi i8 [ %49, %48 ], [ %60, %53 ]\n  %66 = and i8 %65, 1\n  %67 = icmp eq i8 %66, 0\n  br i1 %67, label %94, label %136\n\n68:                                               ; preds = %68, %36\n  %69 = phi i64 [ 0, %36 ], [ %91, %68 ]\n  %70 = phi i8 [ 0, %36 ], [ %90, %68 ]\n  %71 = phi i64 [ %37, %36 ], [ %92, %68 ]\n  %72 = getelementptr inbounds i8, i8* %23, i64 %69\n  %73 = load i8, i8* %72, align 1, !tbaa !11\n  %74 = icmp eq i8 %73, %31\n  %75 = or i64 %69, 1\n  %76 = getelementptr inbounds i8, i8* %23, i64 %75\n  %77 = load i8, i8* %76, align 1, !tbaa !11\n  %78 = icmp eq i8 %77, %31\n  %79 = or i64 %69, 2\n  %80 = getelementptr inbounds i8, i8* %23, i64 %79\n  %81 = load i8, i8* %80, align 1, !tbaa !11\n  %82 = icmp eq i8 %81, %31\n  %83 = or i64 %69, 3\n  %84 = getelementptr inbounds i8, i8* %23, i64 %83\n  %85 = load i8, i8* %84, align 1, !tbaa !11\n  %86 = icmp eq i8 %85, %31\n  %87 = select i1 %86, i1 true, i1 %82\n  %88 = select i1 %87, i1 true, i1 %78\n  %89 = select i1 %88, i1 true, i1 %74\n  %90 = select i1 %89, i8 1, i8 %70\n  %91 = add nuw nsw i64 %69, 4\n  %92 = add i64 %71, -4\n  %93 = icmp eq i64 %92, 0\n  br i1 %93, label %48, label %68, !llvm.loop !16\n\n94:                                               ; preds = %64\n  %95 = load i8*, i8** %2, align 8, !tbaa !3\n  %96 = getelementptr inbounds i8, i8* %95, i64 %20\n  %97 = icmp eq i8* %22, %21\n  br i1 %97, label %104, label %100\n\n98:                                               ; preds = %19\n  %99 = icmp eq i8* %22, %21\n  br i1 %99, label %108, label %100\n\n100:                                              ; preds = %98, %94\n  %101 = phi i8* [ %29, %98 ], [ %96, %94 ]\n  %102 = load i8, i8* %101, align 1, !tbaa !11\n  store i8 %102, i8* %22, align 1, !tbaa !11\n  %103 = getelementptr inbounds i8, i8* %22, i64 1\n  br label %136\n\n104:                                              ; preds = %94\n  %105 = icmp eq i64 %26, 9223372036854775807\n  br i1 %105, label %106, label %108\n\n106:                                              ; preds = %104\n  invoke void @_ZSt20__throw_length_errorPKc(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str, i64 0, i64 0)) #7\n          to label %107 unwind label %131\n\n107:                                              ; preds = %106\n  unreachable\n\n108:                                              ; preds = %98, %104\n  %109 = phi i64 [ 1, %98 ], [ %26, %104 ]\n  %110 = phi i8* [ %29, %98 ], [ %96, %104 ]\n  %111 = add i64 %109, %26\n  %112 = icmp ult i64 %111, %26\n  %113 = icmp slt i64 %111, 0\n  %114 = or i1 %112, %113\n  %115 = select i1 %114, i64 9223372036854775807, i64 %111\n  %116 = icmp eq i64 %115, 0\n  br i1 %116, label %119, label %117\n\n117:                                              ; preds = %108\n  %118 = invoke noalias nonnull i8* @_Znwm(i64 %115) #8\n          to label %119 unwind label %133\n\n119:                                              ; preds = %117, %108\n  %120 = phi i8* [ null, %108 ], [ %118, %117 ]\n  %121 = getelementptr inbounds i8, i8* %120, i64 %26\n  %122 = load i8, i8* %110, align 1, !tbaa !11\n  store i8 %122, i8* %121, align 1, !tbaa !11\n  %123 = icmp sgt i64 %26, 0\n  br i1 %123, label %124, label %125\n\n124:                                              ; preds = %119\n  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* nonnull align 1 %120, i8* align 1 %23, i64 %26, i1 false) #6\n  br label %125\n\n125:                                              ; preds = %119, %124\n  %126 = getelementptr inbounds i8, i8* %121, i64 1\n  %127 = icmp eq i8* %23, null\n  br i1 %127, label %129, label %128\n\n128:                                              ; preds = %125\n  tail call void @_ZdlPv(i8* nonnull %23) #6\n  br label %129\n\n129:                                              ; preds = %128, %125\n  %130 = getelementptr inbounds i8, i8* %120, i64 %115\n  br label %136\n\n131:                                              ; preds = %106\n  %132 = landingpad { i8*, i32 }\n          cleanup\n  br label %143\n\n133:                                              ; preds = %117\n  %134 = landingpad { i8*, i32 }\n          cleanup\n  %135 = icmp eq i8* %23, null\n  br i1 %135, label %145, label %143\n\n136:                                              ; preds = %129, %100, %64\n  %137 = phi i8* [ %23, %64 ], [ %120, %129 ], [ %23, %100 ]\n  %138 = phi i8* [ %22, %64 ], [ %126, %129 ], [ %103, %100 ]\n  %139 = phi i8* [ %21, %64 ], [ %130, %129 ], [ %21, %100 ]\n  %140 = add nuw i64 %20, 1\n  %141 = load i64, i64* %4, align 8, !tbaa !10\n  %142 = icmp ugt i64 %141, %140\n  br i1 %142, label %19, label %38, !llvm.loop !17\n\n143:                                              ; preds = %131, %133\n  %144 = phi { i8*, i32 } [ %132, %131 ], [ %134, %133 ]\n  tail call void @_ZdlPv(i8* nonnull %23) #6\n  br label %145\n\n145:                                              ; preds = %133, %143\n  %146 = phi { i8*, i32 } [ %134, %133 ], [ %144, %143 ]\n  resume { i8*, i32 } %146\n}\n\n; Function Attrs: mustprogress nofree nounwind readonly willreturn\ndeclare dso_local i32 @tolower(i32) local_unnamed_addr #1\n\ndeclare dso_local i32 @__gxx_personality_v0(...)\n\n; Function Attrs: nobuiltin nounwind\ndeclare dso_local void @_ZdlPv(i8*) local_unnamed_addr #2\n\n; Function Attrs: noreturn\ndeclare dso_local void @_ZSt20__throw_length_errorPKc(i8*) local_unnamed_addr #3\n\n; Function Attrs: nobuiltin allocsize(0)\ndeclare dso_local nonnull i8* @_Znwm(i64) local_unnamed_addr #4\n\n; Function Attrs: argmemonly mustprogress nofree nounwind willreturn\ndeclare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #5\n\nattributes #0 = { uwtable \"frame-pointer\"=\"none\" \"min-legal-vector-width\"=\"0\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #1 = { mustprogress nofree nounwind readonly willreturn \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #2 = { nobuiltin nounwind \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #3 = { noreturn \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #4 = { nobuiltin allocsize(0) \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #5 = { argmemonly mustprogress nofree nounwind willreturn }\nattributes #6 = { nounwind }\nattributes #7 = { noreturn }\nattributes #8 = { allocsize(0) }\n\n!llvm.module.flags = !{!0, !1}\n!llvm.ident = !{!2}\n\n!0 = !{i32 1, !\"wchar_size\", i32 4}\n!1 = !{i32 7, !\"uwtable\", i32 1}\n!2 = !{!\"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)\"}\n!3 = !{!4, !6, i64 0}\n!4 = !{!\"_ZTSNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE\", !5, i64 0, !9, i64 8, !7, i64 16}\n!5 = !{!\"_ZTSNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderE\", !6, i64 0}\n!6 = !{!\"any pointer\", !7, i64 0}\n!7 = !{!\"omnipotent char\", !8, i64 0}\n!8 = !{!\"Simple C++ TBAA\"}\n!9 = !{!\"long\", !7, i64 0}\n!10 = !{!4, !9, i64 8}\n!11 = !{!7, !7, i64 0}\n!12 = distinct !{!12, !13}\n!13 = !{!\"llvm.loop.mustprogress\"}\n!14 = distinct !{!14, !15}\n!15 = !{!\"llvm.loop.unroll.disable\"}\n!16 = distinct !{!16, !13}\n!17 = distinct !{!17, !13}\n", "target": "This is the targeted source code:\n/*\nGiven a string, find out how many distinct characters (regardless of case) does it consist of\n>>> count_distinct_characters(\"xyzXYZ\")\n3\n>>> count_distinct_characters(\"Jerry\")\n4\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\nint count_distinct_characters(string str){ \n\n    vector<char> distinct={};\n    transform(str.begin(),str.end(),str.begin(),::tolower);\n    for (int i=0;i<str.size();i++)\n    {\n        bool isin=false;\n        for (int j=0;j<distinct.size();j++)\n            if (distinct[j]==str[i])\n                isin=true;\n        if (isin==false) distinct.push_back(str[i]);\n\n    }\n    return distinct.size();\n}\n"}
{"input": "Convert this to C++:\n; ModuleID = '../../Human_xBenchmarks_164/CPP_17/CPP_17.cpp'\nsource_filename = \"../../Human_xBenchmarks_164/CPP_17/CPP_17.cpp\"\ntarget datalayout = \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\ntarget triple = \"x86_64-unknown-linux-gnu\"\n\n%\"class.std::vector\" = type { %\"struct.std::_Vector_base\" }\n%\"struct.std::_Vector_base\" = type { %\"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl\" }\n%\"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl\" = type { %\"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl_data\" }\n%\"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl_data\" = type { i32*, i32*, i32* }\n%\"class.std::__cxx11::basic_string\" = type { %\"struct.std::__cxx11::basic_string<char>::_Alloc_hider\", i64, %union.anon }\n%\"struct.std::__cxx11::basic_string<char>::_Alloc_hider\" = type { i8* }\n%union.anon = type { i64, [8 x i8] }\n\n@.str = private unnamed_addr constant [1 x i8] zeroinitializer, align 1\n@.str.1 = private unnamed_addr constant [2 x i8] c\"o\\00\", align 1\n@.str.2 = private unnamed_addr constant [3 x i8] c\"o|\\00\", align 1\n@.str.3 = private unnamed_addr constant [3 x i8] c\".|\\00\", align 1\n@.str.5 = private unnamed_addr constant [26 x i8] c\"vector::_M_realloc_insert\\00\", align 1\n\n; Function Attrs: uwtable\ndefine dso_local void @_Z11parse_musicNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE(%\"class.std::vector\"* noalias nocapture sret(%\"class.std::vector\") align 8 %0, %\"class.std::__cxx11::basic_string\"* %1) local_unnamed_addr #0 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {\n  %3 = alloca i64, align 8\n  %4 = alloca %\"class.std::__cxx11::basic_string\", align 8\n  %5 = alloca %\"class.std::__cxx11::basic_string\", align 8\n  %6 = bitcast %\"class.std::__cxx11::basic_string\"* %4 to i8*\n  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %6) #10\n  %7 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %4, i64 0, i32 2\n  %8 = bitcast %\"class.std::__cxx11::basic_string\"* %4 to %union.anon**\n  store %union.anon* %7, %union.anon** %8, align 8, !tbaa !3\n  %9 = bitcast %union.anon* %7 to i8*\n  %10 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %4, i64 0, i32 0, i32 0\n  %11 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %4, i64 0, i32 1\n  store i64 0, i64* %11, align 8, !tbaa !8\n  store i8 0, i8* %9, align 8, !tbaa !11\n  %12 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %1, i64 0, i32 1\n  %13 = bitcast %\"class.std::vector\"* %0 to i8*\n  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(24) %13, i8 0, i64 24, i1 false)\n  %14 = load i64, i64* %12, align 8, !tbaa !8\n  %15 = icmp eq i64 %14, 0\n  br i1 %15, label %299, label %16\n\n16:                                               ; preds = %2\n  %17 = bitcast %\"class.std::__cxx11::basic_string\"* %5 to i8*\n  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %17) #10\n  call void @llvm.experimental.noalias.scope.decl(metadata !12)\n  %18 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %5, i64 0, i32 2\n  %19 = bitcast %\"class.std::__cxx11::basic_string\"* %5 to %union.anon**\n  store %union.anon* %18, %union.anon** %19, align 8, !tbaa !3, !alias.scope !12\n  %20 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %1, i64 0, i32 0, i32 0\n  %21 = load i8*, i8** %20, align 8, !tbaa !15, !noalias !12\n  %22 = bitcast i64* %3 to i8*\n  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %22) #10, !noalias !12\n  store i64 %14, i64* %3, align 8, !tbaa !16, !noalias !12\n  %23 = icmp ugt i64 %14, 15\n  br i1 %23, label %24, label %30\n\n24:                                               ; preds = %16\n  %25 = invoke i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %5, i64* nonnull align 8 dereferenceable(8) %3, i64 0)\n          to label %26 unwind label %89\n\n26:                                               ; preds = %24\n  %27 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %5, i64 0, i32 0, i32 0\n  store i8* %25, i8** %27, align 8, !tbaa !15, !alias.scope !12\n  %28 = load i64, i64* %3, align 8, !tbaa !16, !noalias !12\n  %29 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %5, i64 0, i32 2, i32 0\n  store i64 %28, i64* %29, align 8, !tbaa !11, !alias.scope !12\n  br label %35\n\n30:                                               ; preds = %16\n  %31 = bitcast %union.anon* %18 to i8*\n  %32 = icmp eq i64 %14, 1\n  br i1 %32, label %33, label %35\n\n33:                                               ; preds = %30\n  %34 = load i8, i8* %21, align 1, !tbaa !11\n  store i8 %34, i8* %31, align 8, !tbaa !11\n  br label %37\n\n35:                                               ; preds = %26, %30\n  %36 = phi i8* [ %25, %26 ], [ %31, %30 ]\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %36, i8* align 1 %21, i64 %14, i1 false) #10\n  br label %37\n\n37:                                               ; preds = %35, %33\n  %38 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %5, i64 0, i32 0, i32 0\n  %39 = load i64, i64* %3, align 8, !tbaa !16, !noalias !12\n  %40 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %5, i64 0, i32 1\n  store i64 %39, i64* %40, align 8, !tbaa !8, !alias.scope !12\n  %41 = load i8*, i8** %38, align 8, !tbaa !15, !alias.scope !12\n  %42 = getelementptr inbounds i8, i8* %41, i64 %39\n  store i8 0, i8* %42, align 1, !tbaa !11\n  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %22) #10, !noalias !12\n  %43 = load i64, i64* %40, align 8, !tbaa !8, !alias.scope !12\n  %44 = invoke nonnull align 8 dereferenceable(32) %\"class.std::__cxx11::basic_string\"* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEmmmc(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %5, i64 %43, i64 0, i64 1, i8 signext 32)\n          to label %51 unwind label %45\n\n45:                                               ; preds = %37\n  %46 = landingpad { i8*, i32 }\n          cleanup\n  %47 = load i8*, i8** %38, align 8, !tbaa !15, !alias.scope !12\n  %48 = bitcast %union.anon* %18 to i8*\n  %49 = icmp eq i8* %47, %48\n  br i1 %49, label %91, label %50\n\n50:                                               ; preds = %45\n  call void @_ZdlPv(i8* %47) #10\n  br label %91\n\n51:                                               ; preds = %37\n  %52 = load i8*, i8** %38, align 8, !tbaa !15\n  %53 = bitcast %union.anon* %18 to i8*\n  %54 = icmp eq i8* %52, %53\n  br i1 %54, label %55, label %69\n\n55:                                               ; preds = %51\n  %56 = load i64, i64* %40, align 8, !tbaa !8\n  %57 = icmp eq i64 %56, 0\n  br i1 %57, label %64, label %58\n\n58:                                               ; preds = %55\n  %59 = load i8*, i8** %20, align 8, !tbaa !15\n  %60 = icmp eq i64 %56, 1\n  br i1 %60, label %61, label %63\n\n61:                                               ; preds = %58\n  %62 = load i8, i8* %53, align 8, !tbaa !11\n  store i8 %62, i8* %59, align 1, !tbaa !11\n  br label %64\n\n63:                                               ; preds = %58\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %59, i8* nonnull align 8 %53, i64 %56, i1 false) #10\n  br label %64\n\n64:                                               ; preds = %63, %61, %55\n  %65 = load i64, i64* %40, align 8, !tbaa !8\n  store i64 %65, i64* %12, align 8, !tbaa !8\n  %66 = load i8*, i8** %20, align 8, !tbaa !15\n  %67 = getelementptr inbounds i8, i8* %66, i64 %65\n  store i8 0, i8* %67, align 1, !tbaa !11\n  %68 = load i8*, i8** %38, align 8, !tbaa !15\n  br label %84\n\n69:                                               ; preds = %51\n  %70 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %1, i64 0, i32 2\n  %71 = bitcast %union.anon* %70 to i8*\n  %72 = load i8*, i8** %20, align 8, !tbaa !15\n  %73 = icmp eq i8* %72, %71\n  %74 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %1, i64 0, i32 2, i32 0\n  %75 = load i64, i64* %74, align 8\n  store i8* %52, i8** %20, align 8, !tbaa !15\n  %76 = bitcast i64* %40 to <2 x i64>*\n  %77 = load <2 x i64>, <2 x i64>* %76, align 8, !tbaa !11\n  %78 = bitcast i64* %12 to <2 x i64>*\n  store <2 x i64> %77, <2 x i64>* %78, align 8, !tbaa !11\n  %79 = icmp eq i8* %72, null\n  %80 = or i1 %73, %79\n  br i1 %80, label %83, label %81\n\n81:                                               ; preds = %69\n  store i8* %72, i8** %38, align 8, !tbaa !15\n  %82 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %5, i64 0, i32 2, i32 0\n  store i64 %75, i64* %82, align 8, !tbaa !11\n  br label %84\n\n83:                                               ; preds = %69\n  store %union.anon* %18, %union.anon** %19, align 8, !tbaa !15\n  br label %84\n\n84:                                               ; preds = %64, %81, %83\n  %85 = phi i8* [ %68, %64 ], [ %72, %81 ], [ %53, %83 ]\n  store i64 0, i64* %40, align 8, !tbaa !8\n  store i8 0, i8* %85, align 1, !tbaa !11\n  %86 = load i8*, i8** %38, align 8, !tbaa !15\n  %87 = icmp eq i8* %86, %53\n  br i1 %87, label %93, label %88\n\n88:                                               ; preds = %84\n  call void @_ZdlPv(i8* %86) #10\n  br label %93\n\n89:                                               ; preds = %24\n  %90 = landingpad { i8*, i32 }\n          cleanup\n  br label %91\n\n91:                                               ; preds = %89, %50, %45\n  %92 = phi { i8*, i32 } [ %90, %89 ], [ %46, %50 ], [ %46, %45 ]\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %17) #10\n  br label %310\n\n93:                                               ; preds = %88, %84\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %17) #10\n  %94 = load i64, i64* %12, align 8, !tbaa !8\n  %95 = icmp eq i64 %94, 0\n  %96 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %1, i64 0, i32 0, i32 0\n  %97 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %4, i64 0, i32 2, i32 0\n  %98 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0, i64 0, i32 0, i32 0, i32 0, i32 1\n  %99 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0, i64 0, i32 0, i32 0, i32 0, i32 2\n  %100 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0, i64 0, i32 0, i32 0, i32 0, i32 0\n  br i1 %95, label %299, label %101\n\n101:                                              ; preds = %93, %290\n  %102 = phi i32* [ %291, %290 ], [ null, %93 ]\n  %103 = phi i32* [ %292, %290 ], [ null, %93 ]\n  %104 = phi i32* [ %293, %290 ], [ null, %93 ]\n  %105 = phi i32* [ %294, %290 ], [ null, %93 ]\n  %106 = phi i32* [ %295, %290 ], [ null, %93 ]\n  %107 = phi i64 [ %296, %290 ], [ 0, %93 ]\n  %108 = load i8*, i8** %96, align 8, !tbaa !15\n  %109 = getelementptr inbounds i8, i8* %108, i64 %107\n  %110 = load i8, i8* %109, align 1, !tbaa !11\n  %111 = icmp eq i8 %110, 32\n  br i1 %111, label %112, label %274\n\n112:                                              ; preds = %101\n  %113 = call i32 @_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %4, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)) #10\n  %114 = icmp eq i32 %113, 0\n  br i1 %114, label %115, label %162\n\n115:                                              ; preds = %112\n  %116 = icmp eq i32* %106, %105\n  br i1 %116, label %119, label %117\n\n117:                                              ; preds = %115\n  store i32 4, i32* %106, align 4, !tbaa !17\n  %118 = getelementptr inbounds i32, i32* %106, i64 1\n  store i32* %118, i32** %98, align 8, !tbaa !19\n  br label %162\n\n119:                                              ; preds = %115\n  %120 = ptrtoint i32* %105 to i64\n  %121 = ptrtoint i32* %104 to i64\n  %122 = sub i64 %120, %121\n  %123 = ashr exact i64 %122, 2\n  %124 = icmp eq i64 %122, 9223372036854775804\n  br i1 %124, label %125, label %127\n\n125:                                              ; preds = %119\n  invoke void @_ZSt20__throw_length_errorPKc(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.5, i64 0, i64 0)) #11\n          to label %126 unwind label %160\n\n126:                                              ; preds = %125\n  unreachable\n\n127:                                              ; preds = %119\n  %128 = icmp eq i64 %122, 0\n  %129 = select i1 %128, i64 1, i64 %123\n  %130 = add nsw i64 %129, %123\n  %131 = icmp ult i64 %130, %123\n  %132 = icmp ugt i64 %130, 2305843009213693951\n  %133 = or i1 %131, %132\n  %134 = select i1 %133, i64 2305843009213693951, i64 %130\n  %135 = icmp eq i64 %134, 0\n  br i1 %135, label %141, label %136\n\n136:                                              ; preds = %127\n  %137 = shl nuw nsw i64 %134, 2\n  %138 = invoke noalias nonnull i8* @_Znwm(i64 %137) #12\n          to label %139 unwind label %158\n\n139:                                              ; preds = %136\n  %140 = bitcast i8* %138 to i32*\n  br label %141\n\n141:                                              ; preds = %139, %127\n  %142 = phi i32* [ %140, %139 ], [ null, %127 ]\n  %143 = getelementptr inbounds i32, i32* %142, i64 %123\n  store i32 4, i32* %143, align 4, !tbaa !17\n  %144 = icmp sgt i64 %122, 0\n  br i1 %144, label %145, label %148\n\n145:                                              ; preds = %141\n  %146 = bitcast i32* %142 to i8*\n  %147 = bitcast i32* %104 to i8*\n  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %146, i8* align 4 %147, i64 %122, i1 false) #10\n  br label %148\n\n148:                                              ; preds = %145, %141\n  %149 = getelementptr inbounds i32, i32* %143, i64 1\n  %150 = icmp eq i32* %104, null\n  br i1 %150, label %153, label %151\n\n151:                                              ; preds = %148\n  %152 = bitcast i32* %104 to i8*\n  call void @_ZdlPv(i8* nonnull %152) #10\n  br label %153\n\n153:                                              ; preds = %151, %148\n  store i32* %142, i32** %100, align 8, !tbaa !21\n  store i32* %149, i32** %98, align 8, !tbaa !19\n  %154 = getelementptr inbounds i32, i32* %142, i64 %134\n  store i32* %154, i32** %99, align 8, !tbaa !22\n  br label %162\n\n155:                                              ; preds = %282, %266\n  %156 = phi i32* [ %104, %282 ], [ %269, %266 ]\n  %157 = landingpad { i8*, i32 }\n          cleanup\n  br label %304\n\n158:                                              ; preds = %136\n  %159 = landingpad { i8*, i32 }\n          cleanup\n  br label %304\n\n160:                                              ; preds = %125\n  %161 = landingpad { i8*, i32 }\n          cleanup\n  br label %304\n\n162:                                              ; preds = %117, %153, %112\n  %163 = phi i32* [ %102, %117 ], [ %154, %153 ], [ %102, %112 ]\n  %164 = phi i32* [ %103, %117 ], [ %154, %153 ], [ %103, %112 ]\n  %165 = phi i32* [ %104, %117 ], [ %142, %153 ], [ %104, %112 ]\n  %166 = phi i32* [ %105, %117 ], [ %154, %153 ], [ %105, %112 ]\n  %167 = phi i32* [ %118, %117 ], [ %149, %153 ], [ %106, %112 ]\n  %168 = call i32 @_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %4, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i64 0, i64 0)) #10\n  %169 = icmp eq i32 %168, 0\n  br i1 %169, label %170, label %214\n\n170:                                              ; preds = %162\n  %171 = icmp eq i32* %167, %164\n  br i1 %171, label %174, label %172\n\n172:                                              ; preds = %170\n  store i32 2, i32* %167, align 4, !tbaa !17\n  %173 = getelementptr inbounds i32, i32* %167, i64 1\n  store i32* %173, i32** %98, align 8, !tbaa !19\n  br label %214\n\n174:                                              ; preds = %170\n  %175 = ptrtoint i32* %164 to i64\n  %176 = ptrtoint i32* %165 to i64\n  %177 = sub i64 %175, %176\n  %178 = ashr exact i64 %177, 2\n  %179 = icmp eq i64 %177, 9223372036854775804\n  br i1 %179, label %180, label %182\n\n180:                                              ; preds = %174\n  invoke void @_ZSt20__throw_length_errorPKc(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.5, i64 0, i64 0)) #11\n          to label %181 unwind label %212\n\n181:                                              ; preds = %180\n  unreachable\n\n182:                                              ; preds = %174\n  %183 = icmp eq i64 %177, 0\n  %184 = select i1 %183, i64 1, i64 %178\n  %185 = add nsw i64 %184, %178\n  %186 = icmp ult i64 %185, %178\n  %187 = icmp ugt i64 %185, 2305843009213693951\n  %188 = or i1 %186, %187\n  %189 = select i1 %188, i64 2305843009213693951, i64 %185\n  %190 = icmp eq i64 %189, 0\n  br i1 %190, label %196, label %191\n\n191:                                              ; preds = %182\n  %192 = shl nuw nsw i64 %189, 2\n  %193 = invoke noalias nonnull i8* @_Znwm(i64 %192) #12\n          to label %194 unwind label %210\n\n194:                                              ; preds = %191\n  %195 = bitcast i8* %193 to i32*\n  br label %196\n\n196:                                              ; preds = %194, %182\n  %197 = phi i32* [ %195, %194 ], [ null, %182 ]\n  %198 = getelementptr inbounds i32, i32* %197, i64 %178\n  store i32 2, i32* %198, align 4, !tbaa !17\n  %199 = icmp sgt i64 %177, 0\n  br i1 %199, label %200, label %203\n\n200:                                              ; preds = %196\n  %201 = bitcast i32* %197 to i8*\n  %202 = bitcast i32* %165 to i8*\n  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %201, i8* align 4 %202, i64 %177, i1 false) #10\n  br label %203\n\n203:                                              ; preds = %200, %196\n  %204 = getelementptr inbounds i32, i32* %198, i64 1\n  %205 = icmp eq i32* %165, null\n  br i1 %205, label %208, label %206\n\n206:                                              ; preds = %203\n  %207 = bitcast i32* %165 to i8*\n  call void @_ZdlPv(i8* nonnull %207) #10\n  br label %208\n\n208:                                              ; preds = %206, %203\n  store i32* %197, i32** %100, align 8, !tbaa !21\n  store i32* %204, i32** %98, align 8, !tbaa !19\n  %209 = getelementptr inbounds i32, i32* %197, i64 %189\n  store i32* %209, i32** %99, align 8, !tbaa !22\n  br label %214\n\n210:                                              ; preds = %191\n  %211 = landingpad { i8*, i32 }\n          cleanup\n  br label %304\n\n212:                                              ; preds = %180\n  %213 = landingpad { i8*, i32 }\n          cleanup\n  br label %304\n\n214:                                              ; preds = %172, %208, %162\n  %215 = phi i32* [ %163, %172 ], [ %209, %208 ], [ %163, %162 ]\n  %216 = phi i32* [ %164, %172 ], [ %209, %208 ], [ %164, %162 ]\n  %217 = phi i32* [ %165, %172 ], [ %197, %208 ], [ %165, %162 ]\n  %218 = phi i32* [ %164, %172 ], [ %209, %208 ], [ %166, %162 ]\n  %219 = phi i32* [ %173, %172 ], [ %204, %208 ], [ %167, %162 ]\n  %220 = call i32 @_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %4, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i64 0, i64 0)) #10\n  %221 = icmp eq i32 %220, 0\n  br i1 %221, label %222, label %266\n\n222:                                              ; preds = %214\n  %223 = icmp eq i32* %219, %215\n  br i1 %223, label %226, label %224\n\n224:                                              ; preds = %222\n  store i32 1, i32* %219, align 4, !tbaa !17\n  %225 = getelementptr inbounds i32, i32* %219, i64 1\n  store i32* %225, i32** %98, align 8, !tbaa !19\n  br label %266\n\n226:                                              ; preds = %222\n  %227 = ptrtoint i32* %215 to i64\n  %228 = ptrtoint i32* %217 to i64\n  %229 = sub i64 %227, %228\n  %230 = ashr exact i64 %229, 2\n  %231 = icmp eq i64 %229, 9223372036854775804\n  br i1 %231, label %232, label %234\n\n232:                                              ; preds = %226\n  invoke void @_ZSt20__throw_length_errorPKc(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.5, i64 0, i64 0)) #11\n          to label %233 unwind label %264\n\n233:                                              ; preds = %232\n  unreachable\n\n234:                                              ; preds = %226\n  %235 = icmp eq i64 %229, 0\n  %236 = select i1 %235, i64 1, i64 %230\n  %237 = add nsw i64 %236, %230\n  %238 = icmp ult i64 %237, %230\n  %239 = icmp ugt i64 %237, 2305843009213693951\n  %240 = or i1 %238, %239\n  %241 = select i1 %240, i64 2305843009213693951, i64 %237\n  %242 = icmp eq i64 %241, 0\n  br i1 %242, label %248, label %243\n\n243:                                              ; preds = %234\n  %244 = shl nuw nsw i64 %241, 2\n  %245 = invoke noalias nonnull i8* @_Znwm(i64 %244) #12\n          to label %246 unwind label %262\n\n246:                                              ; preds = %243\n  %247 = bitcast i8* %245 to i32*\n  br label %248\n\n248:                                              ; preds = %246, %234\n  %249 = phi i32* [ %247, %246 ], [ null, %234 ]\n  %250 = getelementptr inbounds i32, i32* %249, i64 %230\n  store i32 1, i32* %250, align 4, !tbaa !17\n  %251 = icmp sgt i64 %229, 0\n  br i1 %251, label %252, label %255\n\n252:                                              ; preds = %248\n  %253 = bitcast i32* %249 to i8*\n  %254 = bitcast i32* %217 to i8*\n  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %253, i8* align 4 %254, i64 %229, i1 false) #10\n  br label %255\n\n255:                                              ; preds = %252, %248\n  %256 = getelementptr inbounds i32, i32* %250, i64 1\n  %257 = icmp eq i32* %217, null\n  br i1 %257, label %260, label %258\n\n258:                                              ; preds = %255\n  %259 = bitcast i32* %217 to i8*\n  call void @_ZdlPv(i8* nonnull %259) #10\n  br label %260\n\n260:                                              ; preds = %258, %255\n  store i32* %249, i32** %100, align 8, !tbaa !21\n  store i32* %256, i32** %98, align 8, !tbaa !19\n  %261 = getelementptr inbounds i32, i32* %249, i64 %241\n  store i32* %261, i32** %99, align 8, !tbaa !22\n  br label %266\n\n262:                                              ; preds = %243\n  %263 = landingpad { i8*, i32 }\n          cleanup\n  br label %304\n\n264:                                              ; preds = %232\n  %265 = landingpad { i8*, i32 }\n          cleanup\n  br label %304\n\n266:                                              ; preds = %224, %260, %214\n  %267 = phi i32* [ %215, %224 ], [ %261, %260 ], [ %215, %214 ]\n  %268 = phi i32* [ %215, %224 ], [ %261, %260 ], [ %216, %214 ]\n  %269 = phi i32* [ %217, %224 ], [ %249, %260 ], [ %217, %214 ]\n  %270 = phi i32* [ %215, %224 ], [ %261, %260 ], [ %218, %214 ]\n  %271 = phi i32* [ %225, %224 ], [ %256, %260 ], [ %219, %214 ]\n  %272 = load i64, i64* %11, align 8, !tbaa !8\n  %273 = invoke nonnull align 8 dereferenceable(32) %\"class.std::__cxx11::basic_string\"* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %4, i64 0, i64 %272, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str, i64 0, i64 0), i64 0)\n          to label %290 unwind label %155\n\n274:                                              ; preds = %101\n  %275 = load i64, i64* %11, align 8, !tbaa !8\n  %276 = add i64 %275, 1\n  %277 = load i8*, i8** %10, align 8, !tbaa !15\n  %278 = icmp eq i8* %277, %9\n  %279 = load i64, i64* %97, align 8\n  %280 = select i1 %278, i64 15, i64 %279\n  %281 = icmp ugt i64 %276, %280\n  br i1 %281, label %282, label %285\n\n282:                                              ; preds = %274\n  invoke void @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEmmPKcm(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %4, i64 %275, i64 0, i8* null, i64 1)\n          to label %283 unwind label %155\n\n283:                                              ; preds = %282\n  %284 = load i8*, i8** %10, align 8, !tbaa !15\n  br label %285\n\n285:                                              ; preds = %274, %283\n  %286 = phi i8* [ %284, %283 ], [ %277, %274 ]\n  %287 = getelementptr inbounds i8, i8* %286, i64 %275\n  store i8 %110, i8* %287, align 1, !tbaa !11\n  store i64 %276, i64* %11, align 8, !tbaa !8\n  %288 = load i8*, i8** %10, align 8, !tbaa !15\n  %289 = getelementptr inbounds i8, i8* %288, i64 %276\n  store i8 0, i8* %289, align 1, !tbaa !11\n  br label %290\n\n290:                                              ; preds = %266, %285\n  %291 = phi i32* [ %267, %266 ], [ %102, %285 ]\n  %292 = phi i32* [ %268, %266 ], [ %103, %285 ]\n  %293 = phi i32* [ %269, %266 ], [ %104, %285 ]\n  %294 = phi i32* [ %270, %266 ], [ %105, %285 ]\n  %295 = phi i32* [ %271, %266 ], [ %106, %285 ]\n  %296 = add nuw i64 %107, 1\n  %297 = load i64, i64* %12, align 8, !tbaa !8\n  %298 = icmp ugt i64 %297, %296\n  br i1 %298, label %101, label %299, !llvm.loop !23\n\n299:                                              ; preds = %290, %2, %93\n  %300 = load i8*, i8** %10, align 8, !tbaa !15\n  %301 = icmp eq i8* %300, %9\n  br i1 %301, label %303, label %302\n\n302:                                              ; preds = %299\n  call void @_ZdlPv(i8* %300) #10\n  br label %303\n\n303:                                              ; preds = %299, %302\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %6) #10\n  ret void\n\n304:                                              ; preds = %262, %264, %210, %212, %158, %160, %155\n  %305 = phi i32* [ %156, %155 ], [ %104, %158 ], [ %104, %160 ], [ %165, %210 ], [ %165, %212 ], [ %217, %262 ], [ %217, %264 ]\n  %306 = phi { i8*, i32 } [ %157, %155 ], [ %159, %158 ], [ %161, %160 ], [ %211, %210 ], [ %213, %212 ], [ %263, %262 ], [ %265, %264 ]\n  %307 = icmp eq i32* %305, null\n  br i1 %307, label %310, label %308\n\n308:                                              ; preds = %304\n  %309 = bitcast i32* %305 to i8*\n  call void @_ZdlPv(i8* nonnull %309) #10\n  br label %310\n\n310:                                              ; preds = %91, %304, %308\n  %311 = phi { i8*, i32 } [ %92, %91 ], [ %306, %304 ], [ %306, %308 ]\n  %312 = load i8*, i8** %10, align 8, !tbaa !15\n  %313 = icmp eq i8* %312, %9\n  br i1 %313, label %315, label %314\n\n314:                                              ; preds = %310\n  call void @_ZdlPv(i8* %312) #10\n  br label %315\n\n315:                                              ; preds = %314, %310\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %6) #10\n  resume { i8*, i32 } %311\n}\n\n; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn\ndeclare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1\n\ndeclare dso_local i32 @__gxx_personality_v0(...)\n\n; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn\ndeclare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1\n\n; Function Attrs: argmemonly mustprogress nofree nounwind willreturn writeonly\ndeclare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2\n\n; Function Attrs: nobuiltin nounwind\ndeclare dso_local void @_ZdlPv(i8*) local_unnamed_addr #3\n\ndeclare dso_local i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32), i64* nonnull align 8 dereferenceable(8), i64) local_unnamed_addr #4\n\n; Function Attrs: argmemonly mustprogress nofree nounwind willreturn\ndeclare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #5\n\ndeclare dso_local nonnull align 8 dereferenceable(32) %\"class.std::__cxx11::basic_string\"* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEmmmc(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32), i64, i64, i64, i8 signext) local_unnamed_addr #4\n\n; Function Attrs: nounwind\ndeclare dso_local i32 @_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32), i8*) local_unnamed_addr #6\n\n; Function Attrs: noreturn\ndeclare dso_local void @_ZSt20__throw_length_errorPKc(i8*) local_unnamed_addr #7\n\n; Function Attrs: nobuiltin allocsize(0)\ndeclare dso_local nonnull i8* @_Znwm(i64) local_unnamed_addr #8\n\n; Function Attrs: argmemonly mustprogress nofree nounwind willreturn\ndeclare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #5\n\ndeclare dso_local nonnull align 8 dereferenceable(32) %\"class.std::__cxx11::basic_string\"* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32), i64, i64, i8*, i64) local_unnamed_addr #4\n\ndeclare dso_local void @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEmmPKcm(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32), i64, i64, i8*, i64) local_unnamed_addr #4\n\n; Function Attrs: inaccessiblememonly nofree nosync nounwind willreturn\ndeclare void @llvm.experimental.noalias.scope.decl(metadata) #9\n\nattributes #0 = { uwtable \"frame-pointer\"=\"none\" \"min-legal-vector-width\"=\"0\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #1 = { argmemonly mustprogress nofree nosync nounwind willreturn }\nattributes #2 = { argmemonly mustprogress nofree nounwind willreturn writeonly }\nattributes #3 = { nobuiltin nounwind \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #4 = { \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #5 = { argmemonly mustprogress nofree nounwind willreturn }\nattributes #6 = { nounwind \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #7 = { noreturn \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #8 = { nobuiltin allocsize(0) \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #9 = { inaccessiblememonly nofree nosync nounwind willreturn }\nattributes #10 = { nounwind }\nattributes #11 = { noreturn }\nattributes #12 = { allocsize(0) }\n\n!llvm.module.flags = !{!0, !1}\n!llvm.ident = !{!2}\n\n!0 = !{i32 1, !\"wchar_size\", i32 4}\n!1 = !{i32 7, !\"uwtable\", i32 1}\n!2 = !{!\"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)\"}\n!3 = !{!4, !5, i64 0}\n!4 = !{!\"_ZTSNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderE\", !5, i64 0}\n!5 = !{!\"any pointer\", !6, i64 0}\n!6 = !{!\"omnipotent char\", !7, i64 0}\n!7 = !{!\"Simple C++ TBAA\"}\n!8 = !{!9, !10, i64 8}\n!9 = !{!\"_ZTSNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE\", !4, i64 0, !10, i64 8, !6, i64 16}\n!10 = !{!\"long\", !6, i64 0}\n!11 = !{!6, !6, i64 0}\n!12 = !{!13}\n!13 = distinct !{!13, !14, !\"_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_S5_: argument 0\"}\n!14 = distinct !{!14, !\"_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_S5_\"}\n!15 = !{!9, !5, i64 0}\n!16 = !{!10, !10, i64 0}\n!17 = !{!18, !18, i64 0}\n!18 = !{!\"int\", !6, i64 0}\n!19 = !{!20, !5, i64 8}\n!20 = !{!\"_ZTSNSt12_Vector_baseIiSaIiEE17_Vector_impl_dataE\", !5, i64 0, !5, i64 8, !5, i64 16}\n!21 = !{!20, !5, i64 0}\n!22 = !{!20, !5, i64 16}\n!23 = distinct !{!23, !24}\n!24 = !{!\"llvm.loop.mustprogress\"}\n", "target": "This is the targeted source code:\n/*\nInput to this function is a string representing musical notes in a special ASCII format.\nYour task is to parse this string and return vector of integers corresponding to how many beats does each\nnot last.\n\nHere is a legend:\n\"o\" - whole note, lasts four beats\n\"o|\" - half note, lasts two beats\n\".|\" - quater note, lasts one beat\n\n>>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n{4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<int> parse_music(string music_string){ \n\n    string current=\"\";\n    vector<int> out={};\n    if (music_string.length()>0)\n        music_string=music_string+' ';\n    for (int i=0;i<music_string.length();i++)\n    {\n        if (music_string[i]==' ')\n        {\n            if (current==\"o\") out.push_back(4);\n            if (current==\"o|\") out.push_back(2);\n            if (current==\".|\") out.push_back(1);\n            current=\"\";\n        }\n        else current+=music_string[i];\n    }\n    return out;\n}\n"}
{"input": "Convert this to C++:\n; ModuleID = '../../Human_xBenchmarks_164/CPP_18/CPP_18.cpp'\nsource_filename = \"../../Human_xBenchmarks_164/CPP_18/CPP_18.cpp\"\ntarget datalayout = \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\ntarget triple = \"x86_64-unknown-linux-gnu\"\n\n%\"class.std::__cxx11::basic_string\" = type { %\"struct.std::__cxx11::basic_string<char>::_Alloc_hider\", i64, %union.anon }\n%\"struct.std::__cxx11::basic_string<char>::_Alloc_hider\" = type { i8* }\n%union.anon = type { i64, [8 x i8] }\n\n@.str = private unnamed_addr constant [21 x i8] c\"basic_string::substr\\00\", align 1\n@.str.1 = private unnamed_addr constant [55 x i8] c\"%s: __pos (which is %zu) > this->size() (which is %zu)\\00\", align 1\n\n; Function Attrs: uwtable\ndefine dso_local i32 @_Z14how_many_timesNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES4_(%\"class.std::__cxx11::basic_string\"* nocapture readonly %0, %\"class.std::__cxx11::basic_string\"* nocapture readonly %1) local_unnamed_addr #0 personality i32 (...)* @__gxx_personality_v0 {\n  %3 = alloca i64, align 8\n  %4 = alloca %\"class.std::__cxx11::basic_string\", align 8\n  %5 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 1\n  %6 = load i64, i64* %5, align 8, !tbaa !3\n  %7 = icmp eq i64 %6, 0\n  br i1 %7, label %72, label %8\n\n8:                                                ; preds = %2\n  %9 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %1, i64 0, i32 1\n  %10 = bitcast %\"class.std::__cxx11::basic_string\"* %4 to i8*\n  %11 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %4, i64 0, i32 2\n  %12 = bitcast %\"class.std::__cxx11::basic_string\"* %4 to %union.anon**\n  %13 = bitcast %union.anon* %11 to i8*\n  %14 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 0, i32 0\n  %15 = bitcast i64* %3 to i8*\n  %16 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %4, i64 0, i32 0, i32 0\n  %17 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %4, i64 0, i32 2, i32 0\n  %18 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %4, i64 0, i32 1\n  %19 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %1, i64 0, i32 0, i32 0\n  %20 = load i64, i64* %9, align 8, !tbaa !3\n  br label %21\n\n21:                                               ; preds = %8, %64\n  %22 = phi i64 [ 0, %8 ], [ %68, %64 ]\n  %23 = phi i64 [ %20, %8 ], [ %65, %64 ]\n  %24 = phi i64 [ %6, %8 ], [ %69, %64 ]\n  %25 = phi i32 [ 0, %8 ], [ %67, %64 ]\n  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %10) #8\n  call void @llvm.experimental.noalias.scope.decl(metadata !10)\n  %26 = icmp ult i64 %24, %22\n  br i1 %26, label %27, label %29\n\n27:                                               ; preds = %21\n  %28 = and i64 %22, 4294967295\n  call void (i8*, ...) @_ZSt24__throw_out_of_range_fmtPKcz(i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str, i64 0, i64 0), i64 %28, i64 %24) #9, !noalias !10\n  unreachable\n\n29:                                               ; preds = %21\n  store %union.anon* %11, %union.anon** %12, align 8, !tbaa !13, !alias.scope !10\n  %30 = load i8*, i8** %14, align 8, !tbaa !14, !noalias !10\n  %31 = getelementptr inbounds i8, i8* %30, i64 %22\n  %32 = sub i64 %24, %22\n  %33 = icmp ugt i64 %32, %23\n  %34 = select i1 %33, i64 %23, i64 %32\n  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %15) #8, !noalias !10\n  store i64 %34, i64* %3, align 8, !tbaa !15, !noalias !10\n  %35 = icmp ugt i64 %34, 15\n  br i1 %35, label %36, label %39\n\n36:                                               ; preds = %29\n  %37 = call i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %4, i64* nonnull align 8 dereferenceable(8) %3, i64 0)\n  store i8* %37, i8** %16, align 8, !tbaa !14, !alias.scope !10\n  %38 = load i64, i64* %3, align 8, !tbaa !15, !noalias !10\n  store i64 %38, i64* %17, align 8, !tbaa !16, !alias.scope !10\n  br label %39\n\n39:                                               ; preds = %36, %29\n  %40 = phi i8* [ %37, %36 ], [ %13, %29 ]\n  switch i64 %34, label %43 [\n    i64 1, label %41\n    i64 0, label %44\n  ]\n\n41:                                               ; preds = %39\n  %42 = load i8, i8* %31, align 1, !tbaa !16\n  store i8 %42, i8* %40, align 1, !tbaa !16\n  br label %44\n\n43:                                               ; preds = %39\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %40, i8* align 1 %31, i64 %34, i1 false) #8\n  br label %44\n\n44:                                               ; preds = %39, %41, %43\n  %45 = load i64, i64* %3, align 8, !tbaa !15, !noalias !10\n  store i64 %45, i64* %18, align 8, !tbaa !3, !alias.scope !10\n  %46 = load i8*, i8** %16, align 8, !tbaa !14, !alias.scope !10\n  %47 = getelementptr inbounds i8, i8* %46, i64 %45\n  store i8 0, i8* %47, align 1, !tbaa !16\n  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %15) #8, !noalias !10\n  %48 = load i64, i64* %18, align 8, !tbaa !3\n  %49 = load i64, i64* %9, align 8, !tbaa !3\n  %50 = icmp eq i64 %48, %49\n  br i1 %50, label %51, label %58\n\n51:                                               ; preds = %44\n  %52 = icmp eq i64 %48, 0\n  br i1 %52, label %58, label %53\n\n53:                                               ; preds = %51\n  %54 = load i8*, i8** %19, align 8, !tbaa !14\n  %55 = load i8*, i8** %16, align 8, !tbaa !14\n  %56 = call i32 @bcmp(i8* %55, i8* %54, i64 %48) #8\n  %57 = icmp eq i32 %56, 0\n  br label %58\n\n58:                                               ; preds = %44, %51, %53\n  %59 = phi i1 [ false, %44 ], [ %57, %53 ], [ true, %51 ]\n  %60 = load i8*, i8** %16, align 8, !tbaa !14\n  %61 = icmp eq i8* %60, %13\n  br i1 %61, label %64, label %62\n\n62:                                               ; preds = %58\n  call void @_ZdlPv(i8* %60) #8\n  %63 = load i64, i64* %9, align 8, !tbaa !3\n  br label %64\n\n64:                                               ; preds = %58, %62\n  %65 = phi i64 [ %49, %58 ], [ %63, %62 ]\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %10) #8\n  %66 = zext i1 %59 to i32\n  %67 = add nuw nsw i32 %25, %66\n  %68 = add i64 %22, 1\n  %69 = load i64, i64* %5, align 8, !tbaa !3\n  %70 = sub i64 %69, %65\n  %71 = icmp ult i64 %70, %68\n  br i1 %71, label %72, label %21, !llvm.loop !17\n\n72:                                               ; preds = %64, %2\n  %73 = phi i32 [ 0, %2 ], [ %67, %64 ]\n  ret i32 %73\n}\n\n; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn\ndeclare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1\n\n; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn\ndeclare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1\n\ndeclare dso_local i32 @__gxx_personality_v0(...)\n\n; Function Attrs: nobuiltin nounwind\ndeclare dso_local void @_ZdlPv(i8*) local_unnamed_addr #2\n\n; Function Attrs: noreturn\ndeclare dso_local void @_ZSt24__throw_out_of_range_fmtPKcz(i8*, ...) local_unnamed_addr #3\n\ndeclare dso_local i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32), i64* nonnull align 8 dereferenceable(8), i64) local_unnamed_addr #4\n\n; Function Attrs: argmemonly mustprogress nofree nounwind willreturn\ndeclare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #5\n\n; Function Attrs: argmemonly nofree nounwind readonly willreturn\ndeclare i32 @bcmp(i8* nocapture, i8* nocapture, i64) local_unnamed_addr #6\n\n; Function Attrs: inaccessiblememonly nofree nosync nounwind willreturn\ndeclare void @llvm.experimental.noalias.scope.decl(metadata) #7\n\nattributes #0 = { uwtable \"frame-pointer\"=\"none\" \"min-legal-vector-width\"=\"0\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #1 = { argmemonly mustprogress nofree nosync nounwind willreturn }\nattributes #2 = { nobuiltin nounwind \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #3 = { noreturn \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #4 = { \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #5 = { argmemonly mustprogress nofree nounwind willreturn }\nattributes #6 = { argmemonly nofree nounwind readonly willreturn }\nattributes #7 = { inaccessiblememonly nofree nosync nounwind willreturn }\nattributes #8 = { nounwind }\nattributes #9 = { noreturn }\n\n!llvm.module.flags = !{!0, !1}\n!llvm.ident = !{!2}\n\n!0 = !{i32 1, !\"wchar_size\", i32 4}\n!1 = !{i32 7, !\"uwtable\", i32 1}\n!2 = !{!\"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)\"}\n!3 = !{!4, !9, i64 8}\n!4 = !{!\"_ZTSNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE\", !5, i64 0, !9, i64 8, !7, i64 16}\n!5 = !{!\"_ZTSNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderE\", !6, i64 0}\n!6 = !{!\"any pointer\", !7, i64 0}\n!7 = !{!\"omnipotent char\", !8, i64 0}\n!8 = !{!\"Simple C++ TBAA\"}\n!9 = !{!\"long\", !7, i64 0}\n!10 = !{!11}\n!11 = distinct !{!11, !12, !\"_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEmm: argument 0\"}\n!12 = distinct !{!12, !\"_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEmm\"}\n!13 = !{!5, !6, i64 0}\n!14 = !{!4, !6, i64 0}\n!15 = !{!9, !9, i64 0}\n!16 = !{!7, !7, i64 0}\n!17 = distinct !{!17, !18}\n!18 = !{!\"llvm.loop.mustprogress\"}\n", "target": "This is the targeted source code:\n/*\nFind how many times a given substring can be found in the original string. Count overlaping cases.\n>>> how_many_times(\"\", \"a\")\n0\n>>> how_many_times(\"aaa\", \"a\")\n3\n>>> how_many_times(\"aaaa\", \"aa\")\n3\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nint how_many_times(string str,string substring){\n\n    int out=0;\n    if (str.length()==0) return 0;\n    for (int i=0;i<=str.length()-substring.length();i++)\n    if (str.substr(i,substring.length())==substring)\n        out+=1;\n    return out;\n}\n"}
{"input": "Convert this to C++:\n; ModuleID = '../../Human_xBenchmarks_164/CPP_19/CPP_19.cpp'\nsource_filename = \"../../Human_xBenchmarks_164/CPP_19/CPP_19.cpp\"\ntarget datalayout = \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\ntarget triple = \"x86_64-unknown-linux-gnu\"\n\n%\"struct.std::piecewise_construct_t\" = type { i8 }\n%\"class.std::__cxx11::basic_string\" = type { %\"struct.std::__cxx11::basic_string<char>::_Alloc_hider\", i64, %union.anon }\n%\"struct.std::__cxx11::basic_string<char>::_Alloc_hider\" = type { i8* }\n%union.anon = type { i64, [8 x i8] }\n%\"class.std::map\" = type { %\"class.std::_Rb_tree\" }\n%\"class.std::_Rb_tree\" = type { %\"struct.std::_Rb_tree<std::__cxx11::basic_string<char>, std::pair<const std::__cxx11::basic_string<char>, int>, std::_Select1st<std::pair<const std::__cxx11::basic_string<char>, int>>, std::less<std::__cxx11::basic_string<char>>>::_Rb_tree_impl\" }\n%\"struct.std::_Rb_tree<std::__cxx11::basic_string<char>, std::pair<const std::__cxx11::basic_string<char>, int>, std::_Select1st<std::pair<const std::__cxx11::basic_string<char>, int>>, std::less<std::__cxx11::basic_string<char>>>::_Rb_tree_impl\" = type { %\"struct.std::_Rb_tree_key_compare\", %\"struct.std::_Rb_tree_header\" }\n%\"struct.std::_Rb_tree_key_compare\" = type { %\"struct.std::less\" }\n%\"struct.std::less\" = type { i8 }\n%\"struct.std::_Rb_tree_header\" = type { %\"struct.std::_Rb_tree_node_base\", i64 }\n%\"struct.std::_Rb_tree_node_base\" = type { i32, %\"struct.std::_Rb_tree_node_base\"*, %\"struct.std::_Rb_tree_node_base\"*, %\"struct.std::_Rb_tree_node_base\"* }\n%\"struct.std::pair\" = type <{ %\"class.std::__cxx11::basic_string\", i32, [4 x i8] }>\n%\"class.std::allocator.3\" = type { i8 }\n%\"class.std::map.6\" = type { %\"class.std::_Rb_tree.7\" }\n%\"class.std::_Rb_tree.7\" = type { %\"struct.std::_Rb_tree<int, std::pair<const int, std::__cxx11::basic_string<char>>, std::_Select1st<std::pair<const int, std::__cxx11::basic_string<char>>>, std::less<int>>::_Rb_tree_impl\" }\n%\"struct.std::_Rb_tree<int, std::pair<const int, std::__cxx11::basic_string<char>>, std::_Select1st<std::pair<const int, std::__cxx11::basic_string<char>>>, std::less<int>>::_Rb_tree_impl\" = type { %\"struct.std::_Rb_tree_key_compare.11\", %\"struct.std::_Rb_tree_header\" }\n%\"struct.std::_Rb_tree_key_compare.11\" = type { %\"struct.std::less.12\" }\n%\"struct.std::less.12\" = type { i8 }\n%\"struct.std::pair.15\" = type { i32, %\"class.std::__cxx11::basic_string\" }\n%\"struct.std::_Rb_tree_node\" = type { %\"struct.std::_Rb_tree_node_base\", %\"struct.__gnu_cxx::__aligned_membuf\" }\n%\"struct.__gnu_cxx::__aligned_membuf\" = type { [40 x i8] }\n%\"struct.std::_Rb_tree_node.21\" = type { %\"struct.std::_Rb_tree_node_base\", %\"struct.__gnu_cxx::__aligned_membuf.22\" }\n%\"struct.__gnu_cxx::__aligned_membuf.22\" = type { [40 x i8] }\n%\"struct.std::_Rb_tree<std::__cxx11::basic_string<char>, std::pair<const std::__cxx11::basic_string<char>, int>, std::_Select1st<std::pair<const std::__cxx11::basic_string<char>, int>>, std::less<std::__cxx11::basic_string<char>>>::_Alloc_node\" = type { %\"class.std::_Rb_tree\"* }\n%\"class.std::tuple\" = type { %\"struct.std::_Tuple_impl\" }\n%\"struct.std::_Tuple_impl\" = type { %\"struct.std::_Head_base\" }\n%\"struct.std::_Head_base\" = type { %\"class.std::__cxx11::basic_string\"* }\n%\"class.std::tuple.30\" = type { i8 }\n\n$_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEiSt4lessIS5_ESaISt4pairIKS5_iEEEC2ESt16initializer_listISA_ERKS7_RKSB_ = comdat any\n\n$_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEiSt4lessIS5_ESaISt4pairIKS5_iEEEixERS9_ = comdat any\n\n$_ZNSt8_Rb_treeIiSt4pairIKiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIiESaIS8_EED2Ev = comdat any\n\n$_ZNSt8_Rb_treeIiSt4pairIKiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIiESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E = comdat any\n\n$__clang_call_terminate = comdat any\n\n$_ZNSt8_Rb_treeIiSt4pairIKiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIiESaIS8_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS8_E = comdat any\n\n$_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_iESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EED2Ev = comdat any\n\n$_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_iESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E = comdat any\n\n$_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_iESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS8_E = comdat any\n\n$_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_iESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS7_ = comdat any\n\n$_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_iESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE10_M_insert_IRKS8_NSE_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS8_EPSt18_Rb_tree_node_baseSM_OT_RT0_ = comdat any\n\n$_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_iESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE24_M_get_insert_unique_posERS7_ = comdat any\n\n$_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_iESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE17_M_construct_nodeIJRKS8_EEEvPSt13_Rb_tree_nodeIS8_EDpOT_ = comdat any\n\n$_ZNSt8_Rb_treeIiSt4pairIKiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIiESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS1_ = comdat any\n\n$_ZNSt8_Rb_treeIiSt4pairIKiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIiESaIS8_EE17_M_construct_nodeIJRKS8_EEEvPSt13_Rb_tree_nodeIS8_EDpOT_ = comdat any\n\n$_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_iESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS7_EESJ_IJEEEEESt17_Rb_tree_iteratorIS8_ESt23_Rb_tree_const_iteratorIS8_EDpOT_ = comdat any\n\n$_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_iESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS7_EESJ_IJEEEEEvPSt13_Rb_tree_nodeIS8_EDpOT_ = comdat any\n\n@.str.1 = private unnamed_addr constant [4 x i8] c\"one\\00\", align 1\n@.str.2 = private unnamed_addr constant [4 x i8] c\"two\\00\", align 1\n@.str.3 = private unnamed_addr constant [6 x i8] c\"three\\00\", align 1\n@.str.6 = private unnamed_addr constant [4 x i8] c\"six\\00\", align 1\n@.str.7 = private unnamed_addr constant [6 x i8] c\"seven\\00\", align 1\n@.str.8 = private unnamed_addr constant [6 x i8] c\"eight\\00\", align 1\n@.str.10 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1\n@_ZStL19piecewise_construct = internal constant %\"struct.std::piecewise_construct_t\" undef, align 1\n\n; Function Attrs: uwtable\ndefine dso_local void @_Z12sort_numbersNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE(%\"class.std::__cxx11::basic_string\"* noalias sret(%\"class.std::__cxx11::basic_string\") align 8 %0, %\"class.std::__cxx11::basic_string\"* %1) local_unnamed_addr #0 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {\n  %3 = alloca i64, align 8\n  %4 = alloca i64, align 8\n  %5 = alloca %\"class.std::map\", align 8\n  %6 = alloca [10 x %\"struct.std::pair\"], align 8\n  %7 = alloca %\"struct.std::less\", align 1\n  %8 = alloca %\"class.std::allocator.3\", align 1\n  %9 = alloca %\"class.std::map.6\", align 8\n  %10 = alloca [10 x %\"struct.std::pair.15\"], align 8\n  %11 = alloca [10 x i32], align 16\n  %12 = bitcast [10 x i32]* %11 to i8*\n  %13 = alloca %\"class.std::__cxx11::basic_string\", align 8\n  %14 = alloca %\"class.std::__cxx11::basic_string\", align 8\n  %15 = alloca %\"class.std::__cxx11::basic_string\", align 8\n  %16 = alloca %\"class.std::__cxx11::basic_string\", align 8\n  %17 = getelementptr inbounds %\"class.std::map\", %\"class.std::map\"* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0\n  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %17) #13\n  %18 = bitcast [10 x %\"struct.std::pair\"]* %6 to i8*\n  call void @llvm.lifetime.start.p0i8(i64 400, i8* nonnull %18) #13\n  %19 = getelementptr inbounds [10 x %\"struct.std::pair\"], [10 x %\"struct.std::pair\"]* %6, i64 0, i64 0\n  %20 = getelementptr inbounds [10 x %\"struct.std::pair\"], [10 x %\"struct.std::pair\"]* %6, i64 0, i64 0, i32 0, i32 2\n  %21 = bitcast [10 x %\"struct.std::pair\"]* %6 to %union.anon**\n  store %union.anon* %20, %union.anon** %21, align 8, !tbaa !3\n  %22 = bitcast %union.anon* %20 to i32*\n  store i32 1869768058, i32* %22, align 8\n  %23 = getelementptr inbounds [10 x %\"struct.std::pair\"], [10 x %\"struct.std::pair\"]* %6, i64 0, i64 0, i32 0, i32 1\n  store i64 4, i64* %23, align 8, !tbaa !8\n  %24 = bitcast %union.anon* %20 to i8*\n  %25 = getelementptr inbounds i8, i8* %24, i64 4\n  store i8 0, i8* %25, align 4, !tbaa !11\n  %26 = getelementptr inbounds [10 x %\"struct.std::pair\"], [10 x %\"struct.std::pair\"]* %6, i64 0, i64 0, i32 1\n  store i32 0, i32* %26, align 8, !tbaa !12\n  %27 = getelementptr inbounds [10 x %\"struct.std::pair\"], [10 x %\"struct.std::pair\"]* %6, i64 0, i64 1\n  %28 = getelementptr inbounds [10 x %\"struct.std::pair\"], [10 x %\"struct.std::pair\"]* %6, i64 0, i64 1, i32 0, i32 2\n  %29 = bitcast %\"struct.std::pair\"* %27 to %union.anon**\n  store %union.anon* %28, %union.anon** %29, align 8, !tbaa !3\n  %30 = bitcast %union.anon* %28 to i8*\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(3) %30, i8* noundef nonnull align 1 dereferenceable(3) getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i64 0, i64 0), i64 3, i1 false) #13\n  %31 = getelementptr inbounds [10 x %\"struct.std::pair\"], [10 x %\"struct.std::pair\"]* %6, i64 0, i64 1, i32 0, i32 1\n  store i64 3, i64* %31, align 8, !tbaa !8\n  %32 = getelementptr inbounds i8, i8* %30, i64 3\n  store i8 0, i8* %32, align 1, !tbaa !11\n  %33 = getelementptr inbounds [10 x %\"struct.std::pair\"], [10 x %\"struct.std::pair\"]* %6, i64 0, i64 1, i32 1\n  store i32 1, i32* %33, align 8, !tbaa !12\n  %34 = getelementptr inbounds [10 x %\"struct.std::pair\"], [10 x %\"struct.std::pair\"]* %6, i64 0, i64 2\n  %35 = getelementptr inbounds [10 x %\"struct.std::pair\"], [10 x %\"struct.std::pair\"]* %6, i64 0, i64 2, i32 0, i32 2\n  %36 = bitcast %\"struct.std::pair\"* %34 to %union.anon**\n  store %union.anon* %35, %union.anon** %36, align 8, !tbaa !3\n  %37 = bitcast %union.anon* %35 to i8*\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(3) %37, i8* noundef nonnull align 1 dereferenceable(3) getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i64 0, i64 0), i64 3, i1 false) #13\n  %38 = getelementptr inbounds [10 x %\"struct.std::pair\"], [10 x %\"struct.std::pair\"]* %6, i64 0, i64 2, i32 0, i32 1\n  store i64 3, i64* %38, align 8, !tbaa !8\n  %39 = getelementptr inbounds i8, i8* %37, i64 3\n  store i8 0, i8* %39, align 1, !tbaa !11\n  %40 = getelementptr inbounds [10 x %\"struct.std::pair\"], [10 x %\"struct.std::pair\"]* %6, i64 0, i64 2, i32 1\n  store i32 2, i32* %40, align 8, !tbaa !12\n  %41 = getelementptr inbounds [10 x %\"struct.std::pair\"], [10 x %\"struct.std::pair\"]* %6, i64 0, i64 3\n  %42 = getelementptr inbounds [10 x %\"struct.std::pair\"], [10 x %\"struct.std::pair\"]* %6, i64 0, i64 3, i32 0, i32 2\n  %43 = bitcast %\"struct.std::pair\"* %41 to %union.anon**\n  store %union.anon* %42, %union.anon** %43, align 8, !tbaa !3\n  %44 = bitcast %union.anon* %42 to i8*\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(5) %44, i8* noundef nonnull align 1 dereferenceable(5) getelementptr inbounds ([6 x i8], [6 x i8]* @.str.3, i64 0, i64 0), i64 5, i1 false) #13\n  %45 = getelementptr inbounds [10 x %\"struct.std::pair\"], [10 x %\"struct.std::pair\"]* %6, i64 0, i64 3, i32 0, i32 1\n  store i64 5, i64* %45, align 8, !tbaa !8\n  %46 = getelementptr inbounds i8, i8* %44, i64 5\n  store i8 0, i8* %46, align 1, !tbaa !11\n  %47 = getelementptr inbounds [10 x %\"struct.std::pair\"], [10 x %\"struct.std::pair\"]* %6, i64 0, i64 3, i32 1\n  store i32 3, i32* %47, align 8, !tbaa !12\n  %48 = getelementptr inbounds [10 x %\"struct.std::pair\"], [10 x %\"struct.std::pair\"]* %6, i64 0, i64 4\n  %49 = getelementptr inbounds [10 x %\"struct.std::pair\"], [10 x %\"struct.std::pair\"]* %6, i64 0, i64 4, i32 0, i32 2\n  %50 = bitcast %\"struct.std::pair\"* %48 to %union.anon**\n  store %union.anon* %49, %union.anon** %50, align 8, !tbaa !3\n  %51 = bitcast %union.anon* %49 to i32*\n  store i32 1920298854, i32* %51, align 8\n  %52 = getelementptr inbounds [10 x %\"struct.std::pair\"], [10 x %\"struct.std::pair\"]* %6, i64 0, i64 4, i32 0, i32 1\n  store i64 4, i64* %52, align 8, !tbaa !8\n  %53 = bitcast %union.anon* %49 to i8*\n  %54 = getelementptr inbounds i8, i8* %53, i64 4\n  store i8 0, i8* %54, align 4, !tbaa !11\n  %55 = getelementptr inbounds [10 x %\"struct.std::pair\"], [10 x %\"struct.std::pair\"]* %6, i64 0, i64 4, i32 1\n  store i32 4, i32* %55, align 8, !tbaa !12\n  %56 = getelementptr inbounds [10 x %\"struct.std::pair\"], [10 x %\"struct.std::pair\"]* %6, i64 0, i64 5\n  %57 = getelementptr inbounds [10 x %\"struct.std::pair\"], [10 x %\"struct.std::pair\"]* %6, i64 0, i64 5, i32 0, i32 2\n  %58 = bitcast %\"struct.std::pair\"* %56 to %union.anon**\n  store %union.anon* %57, %union.anon** %58, align 8, !tbaa !3\n  %59 = bitcast %union.anon* %57 to i32*\n  store i32 1702259046, i32* %59, align 8\n  %60 = getelementptr inbounds [10 x %\"struct.std::pair\"], [10 x %\"struct.std::pair\"]* %6, i64 0, i64 5, i32 0, i32 1\n  store i64 4, i64* %60, align 8, !tbaa !8\n  %61 = bitcast %union.anon* %57 to i8*\n  %62 = getelementptr inbounds i8, i8* %61, i64 4\n  store i8 0, i8* %62, align 4, !tbaa !11\n  %63 = getelementptr inbounds [10 x %\"struct.std::pair\"], [10 x %\"struct.std::pair\"]* %6, i64 0, i64 5, i32 1\n  store i32 5, i32* %63, align 8, !tbaa !12\n  %64 = getelementptr inbounds [10 x %\"struct.std::pair\"], [10 x %\"struct.std::pair\"]* %6, i64 0, i64 6\n  %65 = getelementptr inbounds [10 x %\"struct.std::pair\"], [10 x %\"struct.std::pair\"]* %6, i64 0, i64 6, i32 0, i32 2\n  %66 = bitcast %\"struct.std::pair\"* %64 to %union.anon**\n  store %union.anon* %65, %union.anon** %66, align 8, !tbaa !3\n  %67 = bitcast %union.anon* %65 to i8*\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(3) %67, i8* noundef nonnull align 1 dereferenceable(3) getelementptr inbounds ([4 x i8], [4 x i8]* @.str.6, i64 0, i64 0), i64 3, i1 false) #13\n  %68 = getelementptr inbounds [10 x %\"struct.std::pair\"], [10 x %\"struct.std::pair\"]* %6, i64 0, i64 6, i32 0, i32 1\n  store i64 3, i64* %68, align 8, !tbaa !8\n  %69 = getelementptr inbounds i8, i8* %67, i64 3\n  store i8 0, i8* %69, align 1, !tbaa !11\n  %70 = getelementptr inbounds [10 x %\"struct.std::pair\"], [10 x %\"struct.std::pair\"]* %6, i64 0, i64 6, i32 1\n  store i32 6, i32* %70, align 8, !tbaa !12\n  %71 = getelementptr inbounds [10 x %\"struct.std::pair\"], [10 x %\"struct.std::pair\"]* %6, i64 0, i64 7\n  %72 = getelementptr inbounds [10 x %\"struct.std::pair\"], [10 x %\"struct.std::pair\"]* %6, i64 0, i64 7, i32 0, i32 2\n  %73 = bitcast %\"struct.std::pair\"* %71 to %union.anon**\n  store %union.anon* %72, %union.anon** %73, align 8, !tbaa !3\n  %74 = bitcast %union.anon* %72 to i8*\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(5) %74, i8* noundef nonnull align 1 dereferenceable(5) getelementptr inbounds ([6 x i8], [6 x i8]* @.str.7, i64 0, i64 0), i64 5, i1 false) #13\n  %75 = getelementptr inbounds [10 x %\"struct.std::pair\"], [10 x %\"struct.std::pair\"]* %6, i64 0, i64 7, i32 0, i32 1\n  store i64 5, i64* %75, align 8, !tbaa !8\n  %76 = getelementptr inbounds i8, i8* %74, i64 5\n  store i8 0, i8* %76, align 1, !tbaa !11\n  %77 = getelementptr inbounds [10 x %\"struct.std::pair\"], [10 x %\"struct.std::pair\"]* %6, i64 0, i64 7, i32 1\n  store i32 7, i32* %77, align 8, !tbaa !12\n  %78 = getelementptr inbounds [10 x %\"struct.std::pair\"], [10 x %\"struct.std::pair\"]* %6, i64 0, i64 8\n  %79 = getelementptr inbounds [10 x %\"struct.std::pair\"], [10 x %\"struct.std::pair\"]* %6, i64 0, i64 8, i32 0, i32 2\n  %80 = bitcast %\"struct.std::pair\"* %78 to %union.anon**\n  store %union.anon* %79, %union.anon** %80, align 8, !tbaa !3\n  %81 = bitcast %union.anon* %79 to i8*\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(5) %81, i8* noundef nonnull align 1 dereferenceable(5) getelementptr inbounds ([6 x i8], [6 x i8]* @.str.8, i64 0, i64 0), i64 5, i1 false) #13\n  %82 = getelementptr inbounds [10 x %\"struct.std::pair\"], [10 x %\"struct.std::pair\"]* %6, i64 0, i64 8, i32 0, i32 1\n  store i64 5, i64* %82, align 8, !tbaa !8\n  %83 = getelementptr inbounds i8, i8* %81, i64 5\n  store i8 0, i8* %83, align 1, !tbaa !11\n  %84 = getelementptr inbounds [10 x %\"struct.std::pair\"], [10 x %\"struct.std::pair\"]* %6, i64 0, i64 8, i32 1\n  store i32 8, i32* %84, align 8, !tbaa !12\n  %85 = getelementptr inbounds [10 x %\"struct.std::pair\"], [10 x %\"struct.std::pair\"]* %6, i64 0, i64 9\n  %86 = getelementptr inbounds [10 x %\"struct.std::pair\"], [10 x %\"struct.std::pair\"]* %6, i64 0, i64 9, i32 0, i32 2\n  %87 = bitcast %\"struct.std::pair\"* %85 to %union.anon**\n  store %union.anon* %86, %union.anon** %87, align 8, !tbaa !3\n  %88 = bitcast %union.anon* %86 to i32*\n  store i32 1701734766, i32* %88, align 8\n  %89 = getelementptr inbounds [10 x %\"struct.std::pair\"], [10 x %\"struct.std::pair\"]* %6, i64 0, i64 9, i32 0, i32 1\n  store i64 4, i64* %89, align 8, !tbaa !8\n  %90 = bitcast %union.anon* %86 to i8*\n  %91 = getelementptr inbounds i8, i8* %90, i64 4\n  store i8 0, i8* %91, align 4, !tbaa !11\n  %92 = getelementptr inbounds [10 x %\"struct.std::pair\"], [10 x %\"struct.std::pair\"]* %6, i64 0, i64 9, i32 1\n  store i32 9, i32* %92, align 8, !tbaa !12\n  %93 = getelementptr inbounds %\"struct.std::less\", %\"struct.std::less\"* %7, i64 0, i32 0\n  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %93) #13\n  %94 = getelementptr inbounds %\"class.std::allocator.3\", %\"class.std::allocator.3\"* %8, i64 0, i32 0\n  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %94) #13\n  invoke void @_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEiSt4lessIS5_ESaISt4pairIKS5_iEEEC2ESt16initializer_listISA_ERKS7_RKSB_(%\"class.std::map\"* nonnull align 8 dereferenceable(48) %5, %\"struct.std::pair\"* nonnull %19, i64 10, %\"struct.std::less\"* nonnull align 1 dereferenceable(1) %7, %\"class.std::allocator.3\"* nonnull align 1 dereferenceable(1) %8)\n          to label %95 unwind label %195\n\n95:                                               ; preds = %2\n  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %94) #13\n  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %93) #13\n  %96 = getelementptr inbounds [10 x %\"struct.std::pair\"], [10 x %\"struct.std::pair\"]* %6, i64 0, i64 9, i32 0, i32 0, i32 0\n  %97 = load i8*, i8** %96, align 8, !tbaa !15\n  %98 = getelementptr inbounds [10 x %\"struct.std::pair\"], [10 x %\"struct.std::pair\"]* %6, i64 0, i64 9, i32 0, i32 2\n  %99 = bitcast %union.anon* %98 to i8*\n  %100 = icmp eq i8* %97, %99\n  br i1 %100, label %102, label %101\n\n101:                                              ; preds = %95\n  call void @_ZdlPv(i8* %97) #13\n  br label %102\n\n102:                                              ; preds = %95, %101\n  %103 = getelementptr inbounds [10 x %\"struct.std::pair\"], [10 x %\"struct.std::pair\"]* %6, i64 0, i64 8, i32 0, i32 0, i32 0\n  %104 = load i8*, i8** %103, align 8, !tbaa !15\n  %105 = getelementptr inbounds [10 x %\"struct.std::pair\"], [10 x %\"struct.std::pair\"]* %6, i64 0, i64 8, i32 0, i32 2\n  %106 = bitcast %union.anon* %105 to i8*\n  %107 = icmp eq i8* %104, %106\n  br i1 %107, label %633, label %632\n\n108:                                              ; preds = %171, %689\n  %109 = phi i64 [ %172, %171 ], [ 0, %689 ]\n  %110 = phi %\"struct.std::pair.15\"* [ %173, %171 ], [ %692, %689 ]\n  %111 = getelementptr inbounds %\"struct.std::pair.15\", %\"struct.std::pair.15\"* %110, i64 0, i32 0\n  %112 = icmp eq i64 %109, 0\n  br i1 %112, label %113, label %115\n\n113:                                              ; preds = %108\n  %114 = load i32, i32* %111, align 4\n  br label %121\n\n115:                                              ; preds = %108\n  %116 = load %\"struct.std::_Rb_tree_node_base\"*, %\"struct.std::_Rb_tree_node_base\"** %780, align 8, !tbaa !16\n  %117 = getelementptr inbounds %\"struct.std::_Rb_tree_node_base\", %\"struct.std::_Rb_tree_node_base\"* %116, i64 1, i32 0\n  %118 = load i32, i32* %117, align 4, !tbaa !17\n  %119 = load i32, i32* %111, align 4, !tbaa !17\n  %120 = icmp slt i32 %118, %119\n  br i1 %120, label %154, label %121\n\n121:                                              ; preds = %115, %113\n  %122 = phi i32 [ %114, %113 ], [ %119, %115 ]\n  %123 = load %\"struct.std::_Rb_tree_node\"*, %\"struct.std::_Rb_tree_node\"** %781, align 8, !tbaa !16\n  %124 = icmp eq %\"struct.std::_Rb_tree_node\"* %123, null\n  br i1 %124, label %139, label %125\n\n125:                                              ; preds = %121, %125\n  %126 = phi %\"struct.std::_Rb_tree_node\"* [ %135, %125 ], [ %123, %121 ]\n  %127 = getelementptr inbounds %\"struct.std::_Rb_tree_node\", %\"struct.std::_Rb_tree_node\"* %126, i64 0, i32 1\n  %128 = bitcast %\"struct.__gnu_cxx::__aligned_membuf\"* %127 to i32*\n  %129 = load i32, i32* %128, align 4, !tbaa !17\n  %130 = icmp slt i32 %122, %129\n  %131 = getelementptr inbounds %\"struct.std::_Rb_tree_node\", %\"struct.std::_Rb_tree_node\"* %126, i64 0, i32 0, i32 2\n  %132 = getelementptr inbounds %\"struct.std::_Rb_tree_node\", %\"struct.std::_Rb_tree_node\"* %126, i64 0, i32 0, i32 3\n  %133 = select i1 %130, %\"struct.std::_Rb_tree_node_base\"** %131, %\"struct.std::_Rb_tree_node_base\"** %132\n  %134 = bitcast %\"struct.std::_Rb_tree_node_base\"** %133 to %\"struct.std::_Rb_tree_node\"**\n  %135 = load %\"struct.std::_Rb_tree_node\"*, %\"struct.std::_Rb_tree_node\"** %134, align 8, !tbaa !16\n  %136 = icmp eq %\"struct.std::_Rb_tree_node\"* %135, null\n  br i1 %136, label %137, label %125, !llvm.loop !18\n\n137:                                              ; preds = %125\n  %138 = getelementptr %\"struct.std::_Rb_tree_node\", %\"struct.std::_Rb_tree_node\"* %126, i64 0, i32 0\n  br i1 %130, label %139, label %145\n\n139:                                              ; preds = %137, %121\n  %140 = phi %\"struct.std::_Rb_tree_node_base\"* [ %138, %137 ], [ %779, %121 ]\n  %141 = load %\"struct.std::_Rb_tree_node_base\"*, %\"struct.std::_Rb_tree_node_base\"** %782, align 8, !tbaa !20\n  %142 = icmp eq %\"struct.std::_Rb_tree_node_base\"* %140, %141\n  br i1 %142, label %151, label %143\n\n143:                                              ; preds = %139\n  %144 = call %\"struct.std::_Rb_tree_node_base\"* @_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base(%\"struct.std::_Rb_tree_node_base\"* %140) #14\n  br label %145\n\n145:                                              ; preds = %143, %137\n  %146 = phi %\"struct.std::_Rb_tree_node_base\"* [ %140, %143 ], [ %138, %137 ]\n  %147 = phi %\"struct.std::_Rb_tree_node_base\"* [ %144, %143 ], [ %138, %137 ]\n  %148 = getelementptr inbounds %\"struct.std::_Rb_tree_node_base\", %\"struct.std::_Rb_tree_node_base\"* %147, i64 1, i32 0\n  %149 = load i32, i32* %148, align 4, !tbaa !17\n  %150 = icmp slt i32 %149, %122\n  br i1 %150, label %151, label %171\n\n151:                                              ; preds = %145, %139\n  %152 = phi %\"struct.std::_Rb_tree_node_base\"* [ %140, %139 ], [ %146, %145 ]\n  %153 = icmp eq %\"struct.std::_Rb_tree_node_base\"* %152, null\n  br i1 %153, label %171, label %154\n\n154:                                              ; preds = %115, %151\n  %155 = phi i32 [ %122, %151 ], [ %119, %115 ]\n  %156 = phi %\"struct.std::_Rb_tree_node_base\"* [ %152, %151 ], [ %116, %115 ]\n  %157 = icmp eq %\"struct.std::_Rb_tree_node_base\"* %156, %779\n  br i1 %157, label %162, label %158\n\n158:                                              ; preds = %154\n  %159 = getelementptr inbounds %\"struct.std::_Rb_tree_node_base\", %\"struct.std::_Rb_tree_node_base\"* %156, i64 1, i32 0\n  %160 = load i32, i32* %159, align 4, !tbaa !17\n  %161 = icmp slt i32 %155, %160\n  br label %162\n\n162:                                              ; preds = %158, %154\n  %163 = phi i1 [ %161, %158 ], [ true, %154 ]\n  %164 = invoke noalias nonnull i8* @_Znwm(i64 72) #15\n          to label %165 unwind label %175\n\n165:                                              ; preds = %162\n  %166 = bitcast i8* %164 to %\"struct.std::_Rb_tree_node\"*\n  invoke void @_ZNSt8_Rb_treeIiSt4pairIKiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIiESaIS8_EE17_M_construct_nodeIJRKS8_EEEvPSt13_Rb_tree_nodeIS8_EDpOT_(%\"class.std::_Rb_tree.7\"* nonnull align 8 dereferenceable(48) %767, %\"struct.std::_Rb_tree_node\"* nonnull %166, %\"struct.std::pair.15\"* nonnull align 8 dereferenceable(40) %110)\n          to label %167 unwind label %175\n\n167:                                              ; preds = %165\n  %168 = bitcast i8* %164 to %\"struct.std::_Rb_tree_node_base\"*\n  call void @_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_(i1 zeroext %163, %\"struct.std::_Rb_tree_node_base\"* nonnull %168, %\"struct.std::_Rb_tree_node_base\"* nonnull %156, %\"struct.std::_Rb_tree_node_base\"* nonnull align 8 dereferenceable(32) %779) #13\n  %169 = load i64, i64* %777, align 8, !tbaa !24\n  %170 = add i64 %169, 1\n  store i64 %170, i64* %777, align 8, !tbaa !24\n  br label %171\n\n171:                                              ; preds = %145, %167, %151\n  %172 = phi i64 [ %109, %145 ], [ %170, %167 ], [ %109, %151 ]\n  %173 = getelementptr inbounds %\"struct.std::pair.15\", %\"struct.std::pair.15\"* %110, i64 1\n  %174 = icmp eq %\"struct.std::pair.15\"* %173, %778\n  br i1 %174, label %182, label %108, !llvm.loop !25\n\n175:                                              ; preds = %165, %162\n  %176 = landingpad { i8*, i32 }\n          cleanup\n  call void @_ZNSt8_Rb_treeIiSt4pairIKiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIiESaIS8_EED2Ev(%\"class.std::_Rb_tree.7\"* nonnull align 8 dereferenceable(48) %767) #13\n  %177 = getelementptr inbounds [10 x %\"struct.std::pair.15\"], [10 x %\"struct.std::pair.15\"]* %10, i64 0, i64 9, i32 1, i32 0, i32 0\n  %178 = load i8*, i8** %177, align 8, !tbaa !15\n  %179 = getelementptr inbounds [10 x %\"struct.std::pair.15\"], [10 x %\"struct.std::pair.15\"]* %10, i64 0, i64 9, i32 1, i32 2\n  %180 = bitcast %union.anon* %179 to i8*\n  %181 = icmp eq i8* %178, %180\n  br i1 %181, label %210, label %209\n\n182:                                              ; preds = %171\n  %183 = getelementptr inbounds [10 x %\"struct.std::pair.15\"], [10 x %\"struct.std::pair.15\"]* %10, i64 0, i64 9, i32 1, i32 0, i32 0\n  %184 = load i8*, i8** %183, align 8, !tbaa !15\n  %185 = getelementptr inbounds [10 x %\"struct.std::pair.15\"], [10 x %\"struct.std::pair.15\"]* %10, i64 0, i64 9, i32 1, i32 2\n  %186 = bitcast %union.anon* %185 to i8*\n  %187 = icmp eq i8* %184, %186\n  br i1 %187, label %189, label %188\n\n188:                                              ; preds = %182\n  call void @_ZdlPv(i8* %184) #13\n  br label %189\n\n189:                                              ; preds = %182, %188\n  %190 = getelementptr inbounds [10 x %\"struct.std::pair.15\"], [10 x %\"struct.std::pair.15\"]* %10, i64 0, i64 8, i32 1, i32 0, i32 0\n  %191 = load i8*, i8** %190, align 8, !tbaa !15\n  %192 = getelementptr inbounds [10 x %\"struct.std::pair.15\"], [10 x %\"struct.std::pair.15\"]* %10, i64 0, i64 8, i32 1, i32 2\n  %193 = bitcast %union.anon* %192 to i8*\n  %194 = icmp eq i8* %191, %193\n  br i1 %194, label %842, label %841\n\n195:                                              ; preds = %2\n  %196 = landingpad { i8*, i32 }\n          cleanup\n  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %94) #13\n  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %93) #13\n  %197 = getelementptr inbounds [10 x %\"struct.std::pair\"], [10 x %\"struct.std::pair\"]* %6, i64 0, i64 9, i32 0, i32 0, i32 0\n  %198 = load i8*, i8** %197, align 8, !tbaa !15\n  %199 = getelementptr inbounds [10 x %\"struct.std::pair\"], [10 x %\"struct.std::pair\"]* %6, i64 0, i64 9, i32 0, i32 2\n  %200 = bitcast %union.anon* %199 to i8*\n  %201 = icmp eq i8* %198, %200\n  br i1 %201, label %203, label %202\n\n202:                                              ; preds = %195\n  call void @_ZdlPv(i8* %198) #13\n  br label %203\n\n203:                                              ; preds = %195, %202\n  %204 = getelementptr inbounds [10 x %\"struct.std::pair\"], [10 x %\"struct.std::pair\"]* %6, i64 0, i64 8, i32 0, i32 0, i32 0\n  %205 = load i8*, i8** %204, align 8, !tbaa !15\n  %206 = getelementptr inbounds [10 x %\"struct.std::pair\"], [10 x %\"struct.std::pair\"]* %6, i64 0, i64 8, i32 0, i32 2\n  %207 = bitcast %union.anon* %206 to i8*\n  %208 = icmp eq i8* %205, %207\n  br i1 %208, label %575, label %574\n\n209:                                              ; preds = %175\n  call void @_ZdlPv(i8* %178) #13\n  br label %210\n\n210:                                              ; preds = %175, %209\n  %211 = getelementptr inbounds [10 x %\"struct.std::pair.15\"], [10 x %\"struct.std::pair.15\"]* %10, i64 0, i64 8, i32 1, i32 0, i32 0\n  %212 = load i8*, i8** %211, align 8, !tbaa !15\n  %213 = getelementptr inbounds [10 x %\"struct.std::pair.15\"], [10 x %\"struct.std::pair.15\"]* %10, i64 0, i64 8, i32 1, i32 2\n  %214 = bitcast %union.anon* %213 to i8*\n  %215 = icmp eq i8* %212, %214\n  br i1 %215, label %784, label %783\n\n216:                                              ; preds = %898\n  %217 = bitcast %\"class.std::__cxx11::basic_string\"* %14 to i8*\n  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %217) #13\n  call void @llvm.experimental.noalias.scope.decl(metadata !26)\n  %218 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %14, i64 0, i32 2\n  %219 = bitcast %\"class.std::__cxx11::basic_string\"* %14 to %union.anon**\n  store %union.anon* %218, %union.anon** %219, align 8, !tbaa !3, !alias.scope !26\n  %220 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %1, i64 0, i32 0, i32 0\n  %221 = load i8*, i8** %220, align 8, !tbaa !15, !noalias !26\n  %222 = bitcast i64* %4 to i8*\n  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %222) #13, !noalias !26\n  store i64 %911, i64* %4, align 8, !tbaa !29, !noalias !26\n  %223 = icmp ugt i64 %911, 15\n  br i1 %223, label %224, label %230\n\n224:                                              ; preds = %216\n  %225 = invoke i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %14, i64* nonnull align 8 dereferenceable(8) %4, i64 0)\n          to label %226 unwind label %289\n\n226:                                              ; preds = %224\n  %227 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %14, i64 0, i32 0, i32 0\n  store i8* %225, i8** %227, align 8, !tbaa !15, !alias.scope !26\n  %228 = load i64, i64* %4, align 8, !tbaa !29, !noalias !26\n  %229 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %14, i64 0, i32 2, i32 0\n  store i64 %228, i64* %229, align 8, !tbaa !11, !alias.scope !26\n  br label %235\n\n230:                                              ; preds = %216\n  %231 = bitcast %union.anon* %218 to i8*\n  %232 = icmp eq i64 %911, 1\n  br i1 %232, label %233, label %235\n\n233:                                              ; preds = %230\n  %234 = load i8, i8* %221, align 1, !tbaa !11\n  store i8 %234, i8* %231, align 8, !tbaa !11\n  br label %237\n\n235:                                              ; preds = %226, %230\n  %236 = phi i8* [ %225, %226 ], [ %231, %230 ]\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %236, i8* align 1 %221, i64 %911, i1 false) #13\n  br label %237\n\n237:                                              ; preds = %235, %233\n  %238 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %14, i64 0, i32 0, i32 0\n  %239 = load i64, i64* %4, align 8, !tbaa !29, !noalias !26\n  %240 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %14, i64 0, i32 1\n  store i64 %239, i64* %240, align 8, !tbaa !8, !alias.scope !26\n  %241 = load i8*, i8** %238, align 8, !tbaa !15, !alias.scope !26\n  %242 = getelementptr inbounds i8, i8* %241, i64 %239\n  store i8 0, i8* %242, align 1, !tbaa !11\n  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %222) #13, !noalias !26\n  %243 = load i64, i64* %240, align 8, !tbaa !8, !alias.scope !26\n  %244 = invoke nonnull align 8 dereferenceable(32) %\"class.std::__cxx11::basic_string\"* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEmmmc(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %14, i64 %243, i64 0, i64 1, i8 signext 32)\n          to label %251 unwind label %245\n\n245:                                              ; preds = %237\n  %246 = landingpad { i8*, i32 }\n          cleanup\n  %247 = load i8*, i8** %238, align 8, !tbaa !15, !alias.scope !26\n  %248 = bitcast %union.anon* %218 to i8*\n  %249 = icmp eq i8* %247, %248\n  br i1 %249, label %291, label %250\n\n250:                                              ; preds = %245\n  call void @_ZdlPv(i8* %247) #13\n  br label %291\n\n251:                                              ; preds = %237\n  %252 = load i8*, i8** %238, align 8, !tbaa !15\n  %253 = bitcast %union.anon* %218 to i8*\n  %254 = icmp eq i8* %252, %253\n  br i1 %254, label %255, label %269\n\n255:                                              ; preds = %251\n  %256 = load i64, i64* %240, align 8, !tbaa !8\n  %257 = icmp eq i64 %256, 0\n  br i1 %257, label %264, label %258\n\n258:                                              ; preds = %255\n  %259 = load i8*, i8** %220, align 8, !tbaa !15\n  %260 = icmp eq i64 %256, 1\n  br i1 %260, label %261, label %263\n\n261:                                              ; preds = %258\n  %262 = load i8, i8* %253, align 8, !tbaa !11\n  store i8 %262, i8* %259, align 1, !tbaa !11\n  br label %264\n\n263:                                              ; preds = %258\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %259, i8* nonnull align 8 %253, i64 %256, i1 false) #13\n  br label %264\n\n264:                                              ; preds = %263, %261, %255\n  %265 = load i64, i64* %240, align 8, !tbaa !8\n  store i64 %265, i64* %910, align 8, !tbaa !8\n  %266 = load i8*, i8** %220, align 8, !tbaa !15\n  %267 = getelementptr inbounds i8, i8* %266, i64 %265\n  store i8 0, i8* %267, align 1, !tbaa !11\n  %268 = load i8*, i8** %238, align 8, !tbaa !15\n  br label %284\n\n269:                                              ; preds = %251\n  %270 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %1, i64 0, i32 2\n  %271 = bitcast %union.anon* %270 to i8*\n  %272 = load i8*, i8** %220, align 8, !tbaa !15\n  %273 = icmp eq i8* %272, %271\n  %274 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %1, i64 0, i32 2, i32 0\n  %275 = load i64, i64* %274, align 8\n  store i8* %252, i8** %220, align 8, !tbaa !15\n  %276 = bitcast i64* %240 to <2 x i64>*\n  %277 = load <2 x i64>, <2 x i64>* %276, align 8, !tbaa !11\n  %278 = bitcast i64* %910 to <2 x i64>*\n  store <2 x i64> %277, <2 x i64>* %278, align 8, !tbaa !11\n  %279 = icmp eq i8* %272, null\n  %280 = or i1 %273, %279\n  br i1 %280, label %283, label %281\n\n281:                                              ; preds = %269\n  store i8* %272, i8** %238, align 8, !tbaa !15\n  %282 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %14, i64 0, i32 2, i32 0\n  store i64 %275, i64* %282, align 8, !tbaa !11\n  br label %284\n\n283:                                              ; preds = %269\n  store %union.anon* %218, %union.anon** %219, align 8, !tbaa !15\n  br label %284\n\n284:                                              ; preds = %264, %281, %283\n  %285 = phi i8* [ %268, %264 ], [ %272, %281 ], [ %253, %283 ]\n  store i64 0, i64* %240, align 8, !tbaa !8\n  store i8 0, i8* %285, align 1, !tbaa !11\n  %286 = load i8*, i8** %238, align 8, !tbaa !15\n  %287 = icmp eq i8* %286, %253\n  br i1 %287, label %293, label %288\n\n288:                                              ; preds = %284\n  call void @_ZdlPv(i8* %286) #13\n  br label %293\n\n289:                                              ; preds = %224\n  %290 = landingpad { i8*, i32 }\n          cleanup\n  br label %291\n\n291:                                              ; preds = %245, %250, %289\n  %292 = phi { i8*, i32 } [ %290, %289 ], [ %246, %250 ], [ %246, %245 ]\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %217) #13\n  br label %559\n\n293:                                              ; preds = %288, %284\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %217) #13\n  %294 = load i64, i64* %910, align 8, !tbaa !8\n  %295 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %1, i64 0, i32 0, i32 0\n  %296 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %13, i64 0, i32 2, i32 0\n  %297 = icmp eq i64 %294, 0\n  br i1 %297, label %298, label %317\n\n298:                                              ; preds = %351, %898, %293\n  %299 = bitcast %\"class.std::__cxx11::basic_string\"* %15 to i8*\n  %300 = bitcast %\"class.std::__cxx11::basic_string\"* %16 to i8*\n  %301 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %16, i64 0, i32 2\n  %302 = bitcast %\"class.std::__cxx11::basic_string\"* %16 to %union.anon**\n  %303 = bitcast i64* %3 to i8*\n  %304 = bitcast %union.anon* %301 to i8*\n  %305 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %16, i64 0, i32 0, i32 0\n  %306 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %16, i64 0, i32 2, i32 0\n  %307 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %16, i64 0, i32 1\n  %308 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %15, i64 0, i32 2\n  %309 = bitcast %\"class.std::__cxx11::basic_string\"* %15 to %union.anon**\n  %310 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %15, i64 0, i32 0, i32 0\n  %311 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %15, i64 0, i32 2, i32 0\n  %312 = bitcast %union.anon* %308 to i8*\n  %313 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %15, i64 0, i32 1\n  %314 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 2, i32 0\n  %315 = bitcast i64* %313 to <2 x i64>*\n  %316 = bitcast i64* %903 to <2 x i64>*\n  br label %355\n\n317:                                              ; preds = %293, %351\n  %318 = phi i64 [ %352, %351 ], [ 0, %293 ]\n  %319 = load i8*, i8** %295, align 8, !tbaa !15\n  %320 = getelementptr inbounds i8, i8* %319, i64 %318\n  %321 = load i8, i8* %320, align 1, !tbaa !11\n  %322 = icmp eq i8 %321, 32\n  br i1 %322, label %323, label %335\n\n323:                                              ; preds = %317\n  %324 = invoke nonnull align 4 dereferenceable(4) i32* @_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEiSt4lessIS5_ESaISt4pairIKS5_iEEEixERS9_(%\"class.std::map\"* nonnull align 8 dereferenceable(48) %5, %\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %13)\n          to label %325 unwind label %333\n\n325:                                              ; preds = %323\n  %326 = load i32, i32* %324, align 4, !tbaa !17\n  %327 = sext i32 %326 to i64\n  %328 = getelementptr inbounds [10 x i32], [10 x i32]* %11, i64 0, i64 %327\n  %329 = load i32, i32* %328, align 4, !tbaa !17\n  %330 = add nsw i32 %329, 1\n  store i32 %330, i32* %328, align 4, !tbaa !17\n  %331 = load i64, i64* %909, align 8, !tbaa !8\n  %332 = invoke nonnull align 8 dereferenceable(32) %\"class.std::__cxx11::basic_string\"* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %13, i64 0, i64 %331, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.10, i64 0, i64 0), i64 0)\n          to label %351 unwind label %333\n\n333:                                              ; preds = %343, %325, %323\n  %334 = landingpad { i8*, i32 }\n          cleanup\n  br label %559\n\n335:                                              ; preds = %317\n  %336 = load i64, i64* %909, align 8, !tbaa !8\n  %337 = add i64 %336, 1\n  %338 = load i8*, i8** %908, align 8, !tbaa !15\n  %339 = icmp eq i8* %338, %907\n  %340 = load i64, i64* %296, align 8\n  %341 = select i1 %339, i64 15, i64 %340\n  %342 = icmp ugt i64 %337, %341\n  br i1 %342, label %343, label %346\n\n343:                                              ; preds = %335\n  invoke void @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEmmPKcm(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %13, i64 %336, i64 0, i8* null, i64 1)\n          to label %344 unwind label %333\n\n344:                                              ; preds = %343\n  %345 = load i8*, i8** %908, align 8, !tbaa !15\n  br label %346\n\n346:                                              ; preds = %335, %344\n  %347 = phi i8* [ %345, %344 ], [ %338, %335 ]\n  %348 = getelementptr inbounds i8, i8* %347, i64 %336\n  store i8 %321, i8* %348, align 1, !tbaa !11\n  store i64 %337, i64* %909, align 8, !tbaa !8\n  %349 = load i8*, i8** %908, align 8, !tbaa !15\n  %350 = getelementptr inbounds i8, i8* %349, i64 %337\n  store i8 0, i8* %350, align 1, !tbaa !11\n  br label %351\n\n351:                                              ; preds = %325, %346\n  %352 = add nuw i64 %318, 1\n  %353 = load i64, i64* %910, align 8, !tbaa !8\n  %354 = icmp ugt i64 %353, %352\n  br i1 %354, label %317, label %298, !llvm.loop !30\n\n355:                                              ; preds = %298, %365\n  %356 = phi i64 [ 0, %298 ], [ %366, %365 ]\n  %357 = getelementptr inbounds [10 x i32], [10 x i32]* %11, i64 0, i64 %356\n  %358 = load i32, i32* %357, align 4, !tbaa !17\n  %359 = icmp sgt i32 %358, 0\n  br i1 %359, label %360, label %365\n\n360:                                              ; preds = %355\n  %361 = trunc i64 %356 to i32\n  br label %368\n\n362:                                              ; preds = %365\n  %363 = load i64, i64* %903, align 8, !tbaa !8\n  %364 = icmp eq i64 %363, 0\n  br i1 %364, label %541, label %536\n\n365:                                              ; preds = %524, %355\n  %366 = add nuw nsw i64 %356, 1\n  %367 = icmp eq i64 %366, 10\n  br i1 %367, label %362, label %355, !llvm.loop !31\n\n368:                                              ; preds = %360, %524\n  %369 = phi i32 [ %525, %524 ], [ 0, %360 ]\n  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %299) #13\n  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %300) #13\n  %370 = load %\"struct.std::_Rb_tree_node\"*, %\"struct.std::_Rb_tree_node\"** %781, align 8, !tbaa !32\n  %371 = icmp eq %\"struct.std::_Rb_tree_node\"* %370, null\n  br i1 %371, label %397, label %372\n\n372:                                              ; preds = %368, %372\n  %373 = phi %\"struct.std::_Rb_tree_node\"* [ %386, %372 ], [ %370, %368 ]\n  %374 = phi %\"struct.std::_Rb_tree_node_base\"* [ %383, %372 ], [ %779, %368 ]\n  %375 = getelementptr inbounds %\"struct.std::_Rb_tree_node\", %\"struct.std::_Rb_tree_node\"* %373, i64 0, i32 1\n  %376 = bitcast %\"struct.__gnu_cxx::__aligned_membuf\"* %375 to i32*\n  %377 = load i32, i32* %376, align 4, !tbaa !17\n  %378 = sext i32 %377 to i64\n  %379 = icmp sgt i64 %356, %378\n  %380 = getelementptr inbounds %\"struct.std::_Rb_tree_node\", %\"struct.std::_Rb_tree_node\"* %373, i64 0, i32 0, i32 3\n  %381 = getelementptr %\"struct.std::_Rb_tree_node\", %\"struct.std::_Rb_tree_node\"* %373, i64 0, i32 0\n  %382 = getelementptr inbounds %\"struct.std::_Rb_tree_node\", %\"struct.std::_Rb_tree_node\"* %373, i64 0, i32 0, i32 2\n  %383 = select i1 %379, %\"struct.std::_Rb_tree_node_base\"* %374, %\"struct.std::_Rb_tree_node_base\"* %381\n  %384 = select i1 %379, %\"struct.std::_Rb_tree_node_base\"** %380, %\"struct.std::_Rb_tree_node_base\"** %382\n  %385 = bitcast %\"struct.std::_Rb_tree_node_base\"** %384 to %\"struct.std::_Rb_tree_node\"**\n  %386 = load %\"struct.std::_Rb_tree_node\"*, %\"struct.std::_Rb_tree_node\"** %385, align 8, !tbaa !16\n  %387 = icmp eq %\"struct.std::_Rb_tree_node\"* %386, null\n  br i1 %387, label %388, label %372, !llvm.loop !33\n\n388:                                              ; preds = %372\n  %389 = icmp eq %\"struct.std::_Rb_tree_node_base\"* %383, %779\n  br i1 %389, label %397, label %390\n\n390:                                              ; preds = %388\n  %391 = getelementptr inbounds %\"struct.std::_Rb_tree_node_base\", %\"struct.std::_Rb_tree_node_base\"* %374, i64 1, i32 0\n  %392 = getelementptr inbounds %\"struct.std::_Rb_tree_node_base\", %\"struct.std::_Rb_tree_node_base\"* %381, i64 1, i32 0\n  %393 = select i1 %379, i32* %391, i32* %392\n  %394 = load i32, i32* %393, align 4, !tbaa !17\n  %395 = sext i32 %394 to i64\n  %396 = icmp slt i64 %356, %395\n  br i1 %396, label %397, label %443\n\n397:                                              ; preds = %390, %388, %368\n  %398 = phi %\"struct.std::_Rb_tree_node_base\"* [ %383, %390 ], [ %779, %388 ], [ %779, %368 ]\n  %399 = invoke noalias nonnull i8* @_Znwm(i64 72) #15\n          to label %400 unwind label %527\n\n400:                                              ; preds = %397\n  %401 = getelementptr inbounds i8, i8* %399, i64 32\n  %402 = bitcast i8* %401 to i32*\n  store i32 %361, i32* %402, align 8, !tbaa !34\n  %403 = getelementptr inbounds i8, i8* %399, i64 40\n  %404 = getelementptr inbounds i8, i8* %399, i64 56\n  %405 = bitcast i8* %403 to i8**\n  store i8* %404, i8** %405, align 8, !tbaa !3\n  %406 = getelementptr inbounds i8, i8* %399, i64 48\n  %407 = bitcast i8* %406 to i64*\n  store i64 0, i64* %407, align 8, !tbaa !8\n  store i8 0, i8* %404, align 8, !tbaa !11\n  %408 = invoke { %\"struct.std::_Rb_tree_node_base\"*, %\"struct.std::_Rb_tree_node_base\"* } @_ZNSt8_Rb_treeIiSt4pairIKiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIiESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS1_(%\"class.std::_Rb_tree.7\"* nonnull align 8 dereferenceable(48) %767, %\"struct.std::_Rb_tree_node_base\"* %398, i32* nonnull align 4 dereferenceable(4) %402)\n          to label %409 unwind label %427\n\n409:                                              ; preds = %400\n  %410 = extractvalue { %\"struct.std::_Rb_tree_node_base\"*, %\"struct.std::_Rb_tree_node_base\"* } %408, 0\n  %411 = extractvalue { %\"struct.std::_Rb_tree_node_base\"*, %\"struct.std::_Rb_tree_node_base\"* } %408, 1\n  %412 = icmp eq %\"struct.std::_Rb_tree_node_base\"* %411, null\n  br i1 %412, label %432, label %413\n\n413:                                              ; preds = %409\n  %414 = icmp ne %\"struct.std::_Rb_tree_node_base\"* %410, null\n  %415 = icmp eq %\"struct.std::_Rb_tree_node_base\"* %411, %779\n  %416 = select i1 %414, i1 true, i1 %415\n  br i1 %416, label %422, label %417\n\n417:                                              ; preds = %413\n  %418 = getelementptr inbounds %\"struct.std::_Rb_tree_node_base\", %\"struct.std::_Rb_tree_node_base\"* %411, i64 1, i32 0\n  %419 = load i32, i32* %402, align 4, !tbaa !17\n  %420 = load i32, i32* %418, align 4, !tbaa !17\n  %421 = icmp slt i32 %419, %420\n  br label %422\n\n422:                                              ; preds = %417, %413\n  %423 = phi i1 [ %421, %417 ], [ true, %413 ]\n  %424 = bitcast i8* %399 to %\"struct.std::_Rb_tree_node_base\"*\n  call void @_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_(i1 zeroext %423, %\"struct.std::_Rb_tree_node_base\"* nonnull %424, %\"struct.std::_Rb_tree_node_base\"* nonnull %411, %\"struct.std::_Rb_tree_node_base\"* nonnull align 8 dereferenceable(32) %779) #13\n  %425 = load i64, i64* %777, align 8, !tbaa !24\n  %426 = add i64 %425, 1\n  store i64 %426, i64* %777, align 8, !tbaa !24\n  br label %443\n\n427:                                              ; preds = %400\n  %428 = landingpad { i8*, i32 }\n          catch i8* null\n  %429 = bitcast i8* %399 to %\"struct.std::_Rb_tree_node\"*\n  %430 = extractvalue { i8*, i32 } %428, 0\n  %431 = call i8* @__cxa_begin_catch(i8* %430) #13\n  call void @_ZNSt8_Rb_treeIiSt4pairIKiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIiESaIS8_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS8_E(%\"class.std::_Rb_tree.7\"* nonnull align 8 dereferenceable(48) %767, %\"struct.std::_Rb_tree_node\"* nonnull %429) #13\n  invoke void @__cxa_rethrow() #16\n          to label %442 unwind label %437\n\n432:                                              ; preds = %409\n  %433 = load i8*, i8** %405, align 8, !tbaa !15\n  %434 = icmp eq i8* %433, %404\n  br i1 %434, label %436, label %435\n\n435:                                              ; preds = %432\n  call void @_ZdlPv(i8* %433) #13\n  br label %436\n\n436:                                              ; preds = %435, %432\n  call void @_ZdlPv(i8* nonnull %399) #13\n  br label %443\n\n437:                                              ; preds = %427\n  %438 = landingpad { i8*, i32 }\n          cleanup\n  invoke void @__cxa_end_catch()\n          to label %534 unwind label %439\n\n439:                                              ; preds = %437\n  %440 = landingpad { i8*, i32 }\n          catch i8* null\n  %441 = extractvalue { i8*, i32 } %440, 0\n  call void @__clang_call_terminate(i8* %441) #17\n  unreachable\n\n442:                                              ; preds = %427\n  unreachable\n\n443:                                              ; preds = %390, %436, %422\n  %444 = phi %\"struct.std::_Rb_tree_node_base\"* [ %383, %390 ], [ %410, %436 ], [ %424, %422 ]\n  %445 = getelementptr inbounds %\"struct.std::_Rb_tree_node_base\", %\"struct.std::_Rb_tree_node_base\"* %444, i64 1, i32 1\n  call void @llvm.experimental.noalias.scope.decl(metadata !36)\n  store %union.anon* %301, %union.anon** %302, align 8, !tbaa !3, !alias.scope !36\n  %446 = load i8*, i8** %902, align 8, !tbaa !15, !noalias !36\n  %447 = load i64, i64* %903, align 8, !tbaa !8, !noalias !36\n  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %303) #13, !noalias !36\n  store i64 %447, i64* %3, align 8, !tbaa !29, !noalias !36\n  %448 = icmp ugt i64 %447, 15\n  br i1 %448, label %449, label %453\n\n449:                                              ; preds = %443\n  %450 = invoke i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %16, i64* nonnull align 8 dereferenceable(8) %3, i64 0)\n          to label %451 unwind label %527\n\n451:                                              ; preds = %449\n  store i8* %450, i8** %305, align 8, !tbaa !15, !alias.scope !36\n  %452 = load i64, i64* %3, align 8, !tbaa !29, !noalias !36\n  store i64 %452, i64* %306, align 8, !tbaa !11, !alias.scope !36\n  br label %453\n\n453:                                              ; preds = %443, %451\n  %454 = phi i8* [ %450, %451 ], [ %304, %443 ]\n  switch i64 %447, label %457 [\n    i64 1, label %455\n    i64 0, label %458\n  ]\n\n455:                                              ; preds = %453\n  %456 = load i8, i8* %446, align 1, !tbaa !11\n  store i8 %456, i8* %454, align 1, !tbaa !11\n  br label %458\n\n457:                                              ; preds = %453\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %454, i8* align 1 %446, i64 %447, i1 false) #13\n  br label %458\n\n458:                                              ; preds = %457, %455, %453\n  %459 = load i64, i64* %3, align 8, !tbaa !29, !noalias !36\n  store i64 %459, i64* %307, align 8, !tbaa !8, !alias.scope !36\n  %460 = load i8*, i8** %305, align 8, !tbaa !15, !alias.scope !36\n  %461 = getelementptr inbounds i8, i8* %460, i64 %459\n  store i8 0, i8* %461, align 1, !tbaa !11\n  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %303) #13, !noalias !36\n  %462 = bitcast %\"struct.std::_Rb_tree_node_base\"** %445 to i8**\n  %463 = load i8*, i8** %462, align 8, !tbaa !15, !noalias !36\n  %464 = getelementptr inbounds %\"struct.std::_Rb_tree_node_base\"*, %\"struct.std::_Rb_tree_node_base\"** %445, i64 1\n  %465 = bitcast %\"struct.std::_Rb_tree_node_base\"** %464 to i64*\n  %466 = load i64, i64* %465, align 8, !tbaa !8, !noalias !36\n  %467 = invoke nonnull align 8 dereferenceable(32) %\"class.std::__cxx11::basic_string\"* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %16, i8* %463, i64 %466)\n          to label %473 unwind label %468\n\n468:                                              ; preds = %458\n  %469 = landingpad { i8*, i32 }\n          cleanup\n  %470 = load i8*, i8** %305, align 8, !tbaa !15, !alias.scope !36\n  %471 = icmp eq i8* %470, %304\n  br i1 %471, label %534, label %472\n\n472:                                              ; preds = %468\n  call void @_ZdlPv(i8* %470) #13\n  br label %534\n\n473:                                              ; preds = %458\n  call void @llvm.experimental.noalias.scope.decl(metadata !39)\n  %474 = load i64, i64* %307, align 8, !tbaa !8, !noalias !39\n  %475 = invoke nonnull align 8 dereferenceable(32) %\"class.std::__cxx11::basic_string\"* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEmmmc(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %16, i64 %474, i64 0, i64 1, i8 signext 32)\n          to label %476 unwind label %529\n\n476:                                              ; preds = %473\n  store %union.anon* %308, %union.anon** %309, align 8, !tbaa !3, !alias.scope !39\n  %477 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %475, i64 0, i32 0, i32 0\n  %478 = load i8*, i8** %477, align 8, !tbaa !15\n  %479 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %475, i64 0, i32 2\n  %480 = bitcast %union.anon* %479 to i8*\n  %481 = icmp eq i8* %478, %480\n  br i1 %481, label %482, label %483\n\n482:                                              ; preds = %476\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(16) %312, i8* noundef nonnull align 8 dereferenceable(16) %478, i64 16, i1 false) #13\n  br label %486\n\n483:                                              ; preds = %476\n  store i8* %478, i8** %310, align 8, !tbaa !15, !alias.scope !39\n  %484 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %475, i64 0, i32 2, i32 0\n  %485 = load i64, i64* %484, align 8, !tbaa !11\n  store i64 %485, i64* %311, align 8, !tbaa !11, !alias.scope !39\n  br label %486\n\n486:                                              ; preds = %483, %482\n  %487 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %475, i64 0, i32 1\n  %488 = load i64, i64* %487, align 8, !tbaa !8\n  store i64 %488, i64* %313, align 8, !tbaa !8, !alias.scope !39\n  %489 = bitcast %\"class.std::__cxx11::basic_string\"* %475 to %union.anon**\n  store %union.anon* %479, %union.anon** %489, align 8, !tbaa !15\n  store i64 0, i64* %487, align 8, !tbaa !8\n  store i8 0, i8* %480, align 8, !tbaa !11\n  %490 = load i8*, i8** %310, align 8, !tbaa !15\n  %491 = icmp eq i8* %490, %312\n  br i1 %491, label %492, label %506\n\n492:                                              ; preds = %486\n  %493 = load i64, i64* %313, align 8, !tbaa !8\n  %494 = icmp eq i64 %493, 0\n  br i1 %494, label %501, label %495\n\n495:                                              ; preds = %492\n  %496 = load i8*, i8** %902, align 8, !tbaa !15\n  %497 = icmp eq i64 %493, 1\n  br i1 %497, label %498, label %500\n\n498:                                              ; preds = %495\n  %499 = load i8, i8* %312, align 8, !tbaa !11\n  store i8 %499, i8* %496, align 1, !tbaa !11\n  br label %501\n\n500:                                              ; preds = %495\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %496, i8* nonnull align 8 %312, i64 %493, i1 false) #13\n  br label %501\n\n501:                                              ; preds = %500, %498, %492\n  %502 = load i64, i64* %313, align 8, !tbaa !8\n  store i64 %502, i64* %903, align 8, !tbaa !8\n  %503 = load i8*, i8** %902, align 8, !tbaa !15\n  %504 = getelementptr inbounds i8, i8* %503, i64 %502\n  store i8 0, i8* %504, align 1, !tbaa !11\n  %505 = load i8*, i8** %310, align 8, !tbaa !15\n  br label %515\n\n506:                                              ; preds = %486\n  %507 = load i8*, i8** %902, align 8, !tbaa !15\n  %508 = icmp eq i8* %507, %901\n  %509 = load i64, i64* %314, align 8\n  store i8* %490, i8** %902, align 8, !tbaa !15\n  %510 = load <2 x i64>, <2 x i64>* %315, align 8, !tbaa !11\n  store <2 x i64> %510, <2 x i64>* %316, align 8, !tbaa !11\n  %511 = icmp eq i8* %507, null\n  %512 = or i1 %508, %511\n  br i1 %512, label %514, label %513\n\n513:                                              ; preds = %506\n  store i8* %507, i8** %310, align 8, !tbaa !15\n  store i64 %509, i64* %311, align 8, !tbaa !11\n  br label %515\n\n514:                                              ; preds = %506\n  store %union.anon* %308, %union.anon** %309, align 8, !tbaa !15\n  br label %515\n\n515:                                              ; preds = %501, %513, %514\n  %516 = phi i8* [ %505, %501 ], [ %507, %513 ], [ %312, %514 ]\n  store i64 0, i64* %313, align 8, !tbaa !8\n  store i8 0, i8* %516, align 1, !tbaa !11\n  %517 = load i8*, i8** %310, align 8, !tbaa !15\n  %518 = icmp eq i8* %517, %312\n  br i1 %518, label %520, label %519\n\n519:                                              ; preds = %515\n  call void @_ZdlPv(i8* %517) #13\n  br label %520\n\n520:                                              ; preds = %515, %519\n  %521 = load i8*, i8** %305, align 8, !tbaa !15\n  %522 = icmp eq i8* %521, %304\n  br i1 %522, label %524, label %523\n\n523:                                              ; preds = %520\n  call void @_ZdlPv(i8* %521) #13\n  br label %524\n\n524:                                              ; preds = %520, %523\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %300) #13\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %299) #13\n  %525 = add nuw nsw i32 %369, 1\n  %526 = icmp eq i32 %525, %358\n  br i1 %526, label %365, label %368, !llvm.loop !42\n\n527:                                              ; preds = %397, %449\n  %528 = landingpad { i8*, i32 }\n          cleanup\n  br label %534\n\n529:                                              ; preds = %473\n  %530 = landingpad { i8*, i32 }\n          cleanup\n  %531 = load i8*, i8** %305, align 8, !tbaa !15\n  %532 = icmp eq i8* %531, %304\n  br i1 %532, label %534, label %533\n\n533:                                              ; preds = %529\n  call void @_ZdlPv(i8* %531) #13\n  br label %534\n\n534:                                              ; preds = %533, %529, %472, %468, %437, %527\n  %535 = phi { i8*, i32 } [ %469, %472 ], [ %469, %468 ], [ %528, %527 ], [ %438, %437 ], [ %530, %529 ], [ %530, %533 ]\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %300) #13\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %299) #13\n  br label %559\n\n536:                                              ; preds = %362\n  %537 = add i64 %363, -1\n  invoke void @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_eraseEmm(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %0, i64 %537, i64 1)\n          to label %541 unwind label %538\n\n538:                                              ; preds = %536\n  %539 = landingpad { i8*, i32 }\n          catch i8* null\n  %540 = extractvalue { i8*, i32 } %539, 0\n  call void @__clang_call_terminate(i8* %540) #17\n  unreachable\n\n541:                                              ; preds = %536, %362\n  %542 = load i8*, i8** %908, align 8, !tbaa !15\n  %543 = icmp eq i8* %542, %907\n  br i1 %543, label %545, label %544\n\n544:                                              ; preds = %541\n  call void @_ZdlPv(i8* %542) #13\n  br label %545\n\n545:                                              ; preds = %541, %544\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %904) #13\n  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %12) #13\n  %546 = load %\"struct.std::_Rb_tree_node\"*, %\"struct.std::_Rb_tree_node\"** %781, align 8, !tbaa !32\n  invoke void @_ZNSt8_Rb_treeIiSt4pairIKiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIiESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E(%\"class.std::_Rb_tree.7\"* nonnull align 8 dereferenceable(48) %767, %\"struct.std::_Rb_tree_node\"* %546)\n          to label %550 unwind label %547\n\n547:                                              ; preds = %545\n  %548 = landingpad { i8*, i32 }\n          catch i8* null\n  %549 = extractvalue { i8*, i32 } %548, 0\n  call void @__clang_call_terminate(i8* %549) #17\n  unreachable\n\n550:                                              ; preds = %545\n  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %690) #13\n  %551 = getelementptr inbounds %\"class.std::map\", %\"class.std::map\"* %5, i64 0, i32 0\n  %552 = getelementptr inbounds i8, i8* %17, i64 16\n  %553 = bitcast i8* %552 to %\"struct.std::_Rb_tree_node.21\"**\n  %554 = load %\"struct.std::_Rb_tree_node.21\"*, %\"struct.std::_Rb_tree_node.21\"** %553, align 8, !tbaa !32\n  invoke void @_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_iESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E(%\"class.std::_Rb_tree\"* nonnull align 8 dereferenceable(48) %551, %\"struct.std::_Rb_tree_node.21\"* %554)\n          to label %558 unwind label %555\n\n555:                                              ; preds = %550\n  %556 = landingpad { i8*, i32 }\n          catch i8* null\n  %557 = extractvalue { i8*, i32 } %556, 0\n  call void @__clang_call_terminate(i8* %557) #17\n  unreachable\n\n558:                                              ; preds = %550\n  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %17) #13\n  ret void\n\n559:                                              ; preds = %534, %333, %291\n  %560 = phi { i8*, i32 } [ %334, %333 ], [ %535, %534 ], [ %292, %291 ]\n  %561 = load i8*, i8** %908, align 8, !tbaa !15\n  %562 = icmp eq i8* %561, %907\n  br i1 %562, label %564, label %563\n\n563:                                              ; preds = %559\n  call void @_ZdlPv(i8* %561) #13\n  br label %564\n\n564:                                              ; preds = %563, %559\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %904) #13\n  %565 = load i8*, i8** %902, align 8, !tbaa !15\n  %566 = icmp eq i8* %565, %901\n  br i1 %566, label %568, label %567\n\n567:                                              ; preds = %564\n  call void @_ZdlPv(i8* %565) #13\n  br label %568\n\n568:                                              ; preds = %567, %564\n  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %12) #13\n  call void @_ZNSt8_Rb_treeIiSt4pairIKiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIiESaIS8_EED2Ev(%\"class.std::_Rb_tree.7\"* nonnull align 8 dereferenceable(48) %767) #13\n  br label %569\n\n569:                                              ; preds = %568, %840\n  %570 = phi { i8*, i32 } [ %560, %568 ], [ %176, %840 ]\n  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %690) #13\n  %571 = getelementptr inbounds %\"class.std::map\", %\"class.std::map\"* %5, i64 0, i32 0\n  call void @_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_iESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EED2Ev(%\"class.std::_Rb_tree\"* nonnull align 8 dereferenceable(48) %571) #13\n  br label %572\n\n572:                                              ; preds = %569, %631\n  %573 = phi { i8*, i32 } [ %570, %569 ], [ %196, %631 ]\n  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %17) #13\n  resume { i8*, i32 } %573\n\n574:                                              ; preds = %203\n  call void @_ZdlPv(i8* %205) #13\n  br label %575\n\n575:                                              ; preds = %574, %203\n  %576 = getelementptr inbounds [10 x %\"struct.std::pair\"], [10 x %\"struct.std::pair\"]* %6, i64 0, i64 7, i32 0, i32 0, i32 0\n  %577 = load i8*, i8** %576, align 8, !tbaa !15\n  %578 = getelementptr inbounds [10 x %\"struct.std::pair\"], [10 x %\"struct.std::pair\"]* %6, i64 0, i64 7, i32 0, i32 2\n  %579 = bitcast %union.anon* %578 to i8*\n  %580 = icmp eq i8* %577, %579\n  br i1 %580, label %582, label %581\n\n581:                                              ; preds = %575\n  call void @_ZdlPv(i8* %577) #13\n  br label %582\n\n582:                                              ; preds = %581, %575\n  %583 = getelementptr inbounds [10 x %\"struct.std::pair\"], [10 x %\"struct.std::pair\"]* %6, i64 0, i64 6, i32 0, i32 0, i32 0\n  %584 = load i8*, i8** %583, align 8, !tbaa !15\n  %585 = getelementptr inbounds [10 x %\"struct.std::pair\"], [10 x %\"struct.std::pair\"]* %6, i64 0, i64 6, i32 0, i32 2\n  %586 = bitcast %union.anon* %585 to i8*\n  %587 = icmp eq i8* %584, %586\n  br i1 %587, label %589, label %588\n\n588:                                              ; preds = %582\n  call void @_ZdlPv(i8* %584) #13\n  br label %589\n\n589:                                              ; preds = %588, %582\n  %590 = getelementptr inbounds [10 x %\"struct.std::pair\"], [10 x %\"struct.std::pair\"]* %6, i64 0, i64 5, i32 0, i32 0, i32 0\n  %591 = load i8*, i8** %590, align 8, !tbaa !15\n  %592 = getelementptr inbounds [10 x %\"struct.std::pair\"], [10 x %\"struct.std::pair\"]* %6, i64 0, i64 5, i32 0, i32 2\n  %593 = bitcast %union.anon* %592 to i8*\n  %594 = icmp eq i8* %591, %593\n  br i1 %594, label %596, label %595\n\n595:                                              ; preds = %589\n  call void @_ZdlPv(i8* %591) #13\n  br label %596\n\n596:                                              ; preds = %595, %589\n  %597 = getelementptr inbounds [10 x %\"struct.std::pair\"], [10 x %\"struct.std::pair\"]* %6, i64 0, i64 4, i32 0, i32 0, i32 0\n  %598 = load i8*, i8** %597, align 8, !tbaa !15\n  %599 = getelementptr inbounds [10 x %\"struct.std::pair\"], [10 x %\"struct.std::pair\"]* %6, i64 0, i64 4, i32 0, i32 2\n  %600 = bitcast %union.anon* %599 to i8*\n  %601 = icmp eq i8* %598, %600\n  br i1 %601, label %603, label %602\n\n602:                                              ; preds = %596\n  call void @_ZdlPv(i8* %598) #13\n  br label %603\n\n603:                                              ; preds = %602, %596\n  %604 = getelementptr inbounds [10 x %\"struct.std::pair\"], [10 x %\"struct.std::pair\"]* %6, i64 0, i64 3, i32 0, i32 0, i32 0\n  %605 = load i8*, i8** %604, align 8, !tbaa !15\n  %606 = getelementptr inbounds [10 x %\"struct.std::pair\"], [10 x %\"struct.std::pair\"]* %6, i64 0, i64 3, i32 0, i32 2\n  %607 = bitcast %union.anon* %606 to i8*\n  %608 = icmp eq i8* %605, %607\n  br i1 %608, label %610, label %609\n\n609:                                              ; preds = %603\n  call void @_ZdlPv(i8* %605) #13\n  br label %610\n\n610:                                              ; preds = %609, %603\n  %611 = getelementptr inbounds [10 x %\"struct.std::pair\"], [10 x %\"struct.std::pair\"]* %6, i64 0, i64 2, i32 0, i32 0, i32 0\n  %612 = load i8*, i8** %611, align 8, !tbaa !15\n  %613 = getelementptr inbounds [10 x %\"struct.std::pair\"], [10 x %\"struct.std::pair\"]* %6, i64 0, i64 2, i32 0, i32 2\n  %614 = bitcast %union.anon* %613 to i8*\n  %615 = icmp eq i8* %612, %614\n  br i1 %615, label %617, label %616\n\n616:                                              ; preds = %610\n  call void @_ZdlPv(i8* %612) #13\n  br label %617\n\n617:                                              ; preds = %616, %610\n  %618 = getelementptr inbounds [10 x %\"struct.std::pair\"], [10 x %\"struct.std::pair\"]* %6, i64 0, i64 1, i32 0, i32 0, i32 0\n  %619 = load i8*, i8** %618, align 8, !tbaa !15\n  %620 = getelementptr inbounds [10 x %\"struct.std::pair\"], [10 x %\"struct.std::pair\"]* %6, i64 0, i64 1, i32 0, i32 2\n  %621 = bitcast %union.anon* %620 to i8*\n  %622 = icmp eq i8* %619, %621\n  br i1 %622, label %624, label %623\n\n623:                                              ; preds = %617\n  call void @_ZdlPv(i8* %619) #13\n  br label %624\n\n624:                                              ; preds = %623, %617\n  %625 = getelementptr inbounds [10 x %\"struct.std::pair\"], [10 x %\"struct.std::pair\"]* %6, i64 0, i64 0, i32 0, i32 0, i32 0\n  %626 = load i8*, i8** %625, align 8, !tbaa !15\n  %627 = getelementptr inbounds [10 x %\"struct.std::pair\"], [10 x %\"struct.std::pair\"]* %6, i64 0, i64 0, i32 0, i32 2\n  %628 = bitcast %union.anon* %627 to i8*\n  %629 = icmp eq i8* %626, %628\n  br i1 %629, label %631, label %630\n\n630:                                              ; preds = %624\n  call void @_ZdlPv(i8* %626) #13\n  br label %631\n\n631:                                              ; preds = %630, %624\n  call void @llvm.lifetime.end.p0i8(i64 400, i8* nonnull %18) #13\n  br label %572\n\n632:                                              ; preds = %102\n  call void @_ZdlPv(i8* %104) #13\n  br label %633\n\n633:                                              ; preds = %632, %102\n  %634 = getelementptr inbounds [10 x %\"struct.std::pair\"], [10 x %\"struct.std::pair\"]* %6, i64 0, i64 7, i32 0, i32 0, i32 0\n  %635 = load i8*, i8** %634, align 8, !tbaa !15\n  %636 = getelementptr inbounds [10 x %\"struct.std::pair\"], [10 x %\"struct.std::pair\"]* %6, i64 0, i64 7, i32 0, i32 2\n  %637 = bitcast %union.anon* %636 to i8*\n  %638 = icmp eq i8* %635, %637\n  br i1 %638, label %640, label %639\n\n639:                                              ; preds = %633\n  call void @_ZdlPv(i8* %635) #13\n  br label %640\n\n640:                                              ; preds = %639, %633\n  %641 = getelementptr inbounds [10 x %\"struct.std::pair\"], [10 x %\"struct.std::pair\"]* %6, i64 0, i64 6, i32 0, i32 0, i32 0\n  %642 = load i8*, i8** %641, align 8, !tbaa !15\n  %643 = getelementptr inbounds [10 x %\"struct.std::pair\"], [10 x %\"struct.std::pair\"]* %6, i64 0, i64 6, i32 0, i32 2\n  %644 = bitcast %union.anon* %643 to i8*\n  %645 = icmp eq i8* %642, %644\n  br i1 %645, label %647, label %646\n\n646:                                              ; preds = %640\n  call void @_ZdlPv(i8* %642) #13\n  br label %647\n\n647:                                              ; preds = %646, %640\n  %648 = getelementptr inbounds [10 x %\"struct.std::pair\"], [10 x %\"struct.std::pair\"]* %6, i64 0, i64 5, i32 0, i32 0, i32 0\n  %649 = load i8*, i8** %648, align 8, !tbaa !15\n  %650 = getelementptr inbounds [10 x %\"struct.std::pair\"], [10 x %\"struct.std::pair\"]* %6, i64 0, i64 5, i32 0, i32 2\n  %651 = bitcast %union.anon* %650 to i8*\n  %652 = icmp eq i8* %649, %651\n  br i1 %652, label %654, label %653\n\n653:                                              ; preds = %647\n  call void @_ZdlPv(i8* %649) #13\n  br label %654\n\n654:                                              ; preds = %653, %647\n  %655 = getelementptr inbounds [10 x %\"struct.std::pair\"], [10 x %\"struct.std::pair\"]* %6, i64 0, i64 4, i32 0, i32 0, i32 0\n  %656 = load i8*, i8** %655, align 8, !tbaa !15\n  %657 = getelementptr inbounds [10 x %\"struct.std::pair\"], [10 x %\"struct.std::pair\"]* %6, i64 0, i64 4, i32 0, i32 2\n  %658 = bitcast %union.anon* %657 to i8*\n  %659 = icmp eq i8* %656, %658\n  br i1 %659, label %661, label %660\n\n660:                                              ; preds = %654\n  call void @_ZdlPv(i8* %656) #13\n  br label %661\n\n661:                                              ; preds = %660, %654\n  %662 = getelementptr inbounds [10 x %\"struct.std::pair\"], [10 x %\"struct.std::pair\"]* %6, i64 0, i64 3, i32 0, i32 0, i32 0\n  %663 = load i8*, i8** %662, align 8, !tbaa !15\n  %664 = getelementptr inbounds [10 x %\"struct.std::pair\"], [10 x %\"struct.std::pair\"]* %6, i64 0, i64 3, i32 0, i32 2\n  %665 = bitcast %union.anon* %664 to i8*\n  %666 = icmp eq i8* %663, %665\n  br i1 %666, label %668, label %667\n\n667:                                              ; preds = %661\n  call void @_ZdlPv(i8* %663) #13\n  br label %668\n\n668:                                              ; preds = %667, %661\n  %669 = getelementptr inbounds [10 x %\"struct.std::pair\"], [10 x %\"struct.std::pair\"]* %6, i64 0, i64 2, i32 0, i32 0, i32 0\n  %670 = load i8*, i8** %669, align 8, !tbaa !15\n  %671 = getelementptr inbounds [10 x %\"struct.std::pair\"], [10 x %\"struct.std::pair\"]* %6, i64 0, i64 2, i32 0, i32 2\n  %672 = bitcast %union.anon* %671 to i8*\n  %673 = icmp eq i8* %670, %672\n  br i1 %673, label %675, label %674\n\n674:                                              ; preds = %668\n  call void @_ZdlPv(i8* %670) #13\n  br label %675\n\n675:                                              ; preds = %674, %668\n  %676 = getelementptr inbounds [10 x %\"struct.std::pair\"], [10 x %\"struct.std::pair\"]* %6, i64 0, i64 1, i32 0, i32 0, i32 0\n  %677 = load i8*, i8** %676, align 8, !tbaa !15\n  %678 = getelementptr inbounds [10 x %\"struct.std::pair\"], [10 x %\"struct.std::pair\"]* %6, i64 0, i64 1, i32 0, i32 2\n  %679 = bitcast %union.anon* %678 to i8*\n  %680 = icmp eq i8* %677, %679\n  br i1 %680, label %682, label %681\n\n681:                                              ; preds = %675\n  call void @_ZdlPv(i8* %677) #13\n  br label %682\n\n682:                                              ; preds = %681, %675\n  %683 = getelementptr inbounds [10 x %\"struct.std::pair\"], [10 x %\"struct.std::pair\"]* %6, i64 0, i64 0, i32 0, i32 0, i32 0\n  %684 = load i8*, i8** %683, align 8, !tbaa !15\n  %685 = getelementptr inbounds [10 x %\"struct.std::pair\"], [10 x %\"struct.std::pair\"]* %6, i64 0, i64 0, i32 0, i32 2\n  %686 = bitcast %union.anon* %685 to i8*\n  %687 = icmp eq i8* %684, %686\n  br i1 %687, label %689, label %688\n\n688:                                              ; preds = %682\n  call void @_ZdlPv(i8* %684) #13\n  br label %689\n\n689:                                              ; preds = %688, %682\n  call void @llvm.lifetime.end.p0i8(i64 400, i8* nonnull %18) #13\n  %690 = getelementptr inbounds %\"class.std::map.6\", %\"class.std::map.6\"* %9, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0\n  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %690) #13\n  %691 = bitcast [10 x %\"struct.std::pair.15\"]* %10 to i8*\n  call void @llvm.lifetime.start.p0i8(i64 400, i8* nonnull %691) #13\n  %692 = getelementptr inbounds [10 x %\"struct.std::pair.15\"], [10 x %\"struct.std::pair.15\"]* %10, i64 0, i64 0\n  %693 = getelementptr inbounds [10 x %\"struct.std::pair.15\"], [10 x %\"struct.std::pair.15\"]* %10, i64 0, i64 0, i32 0\n  store i32 0, i32* %693, align 8, !tbaa !34\n  %694 = getelementptr inbounds [10 x %\"struct.std::pair.15\"], [10 x %\"struct.std::pair.15\"]* %10, i64 0, i64 0, i32 1\n  %695 = getelementptr inbounds [10 x %\"struct.std::pair.15\"], [10 x %\"struct.std::pair.15\"]* %10, i64 0, i64 0, i32 1, i32 2\n  %696 = bitcast %\"class.std::__cxx11::basic_string\"* %694 to %union.anon**\n  store %union.anon* %695, %union.anon** %696, align 8, !tbaa !3\n  %697 = bitcast %union.anon* %695 to i32*\n  store i32 1869768058, i32* %697, align 8\n  %698 = getelementptr inbounds [10 x %\"struct.std::pair.15\"], [10 x %\"struct.std::pair.15\"]* %10, i64 0, i64 0, i32 1, i32 1\n  store i64 4, i64* %698, align 8, !tbaa !8\n  %699 = bitcast %union.anon* %695 to i8*\n  %700 = getelementptr inbounds i8, i8* %699, i64 4\n  store i8 0, i8* %700, align 4, !tbaa !11\n  %701 = getelementptr inbounds [10 x %\"struct.std::pair.15\"], [10 x %\"struct.std::pair.15\"]* %10, i64 0, i64 1, i32 0\n  store i32 1, i32* %701, align 8, !tbaa !34\n  %702 = getelementptr inbounds [10 x %\"struct.std::pair.15\"], [10 x %\"struct.std::pair.15\"]* %10, i64 0, i64 1, i32 1\n  %703 = getelementptr inbounds [10 x %\"struct.std::pair.15\"], [10 x %\"struct.std::pair.15\"]* %10, i64 0, i64 1, i32 1, i32 2\n  %704 = bitcast %\"class.std::__cxx11::basic_string\"* %702 to %union.anon**\n  store %union.anon* %703, %union.anon** %704, align 8, !tbaa !3\n  %705 = bitcast %union.anon* %703 to i8*\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(3) %705, i8* noundef nonnull align 1 dereferenceable(3) getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i64 0, i64 0), i64 3, i1 false) #13\n  %706 = getelementptr inbounds [10 x %\"struct.std::pair.15\"], [10 x %\"struct.std::pair.15\"]* %10, i64 0, i64 1, i32 1, i32 1\n  store i64 3, i64* %706, align 8, !tbaa !8\n  %707 = getelementptr inbounds i8, i8* %705, i64 3\n  store i8 0, i8* %707, align 1, !tbaa !11\n  %708 = getelementptr inbounds [10 x %\"struct.std::pair.15\"], [10 x %\"struct.std::pair.15\"]* %10, i64 0, i64 2, i32 0\n  store i32 2, i32* %708, align 8, !tbaa !34\n  %709 = getelementptr inbounds [10 x %\"struct.std::pair.15\"], [10 x %\"struct.std::pair.15\"]* %10, i64 0, i64 2, i32 1\n  %710 = getelementptr inbounds [10 x %\"struct.std::pair.15\"], [10 x %\"struct.std::pair.15\"]* %10, i64 0, i64 2, i32 1, i32 2\n  %711 = bitcast %\"class.std::__cxx11::basic_string\"* %709 to %union.anon**\n  store %union.anon* %710, %union.anon** %711, align 8, !tbaa !3\n  %712 = bitcast %union.anon* %710 to i8*\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(3) %712, i8* noundef nonnull align 1 dereferenceable(3) getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i64 0, i64 0), i64 3, i1 false) #13\n  %713 = getelementptr inbounds [10 x %\"struct.std::pair.15\"], [10 x %\"struct.std::pair.15\"]* %10, i64 0, i64 2, i32 1, i32 1\n  store i64 3, i64* %713, align 8, !tbaa !8\n  %714 = getelementptr inbounds i8, i8* %712, i64 3\n  store i8 0, i8* %714, align 1, !tbaa !11\n  %715 = getelementptr inbounds [10 x %\"struct.std::pair.15\"], [10 x %\"struct.std::pair.15\"]* %10, i64 0, i64 3, i32 0\n  store i32 3, i32* %715, align 8, !tbaa !34\n  %716 = getelementptr inbounds [10 x %\"struct.std::pair.15\"], [10 x %\"struct.std::pair.15\"]* %10, i64 0, i64 3, i32 1\n  %717 = getelementptr inbounds [10 x %\"struct.std::pair.15\"], [10 x %\"struct.std::pair.15\"]* %10, i64 0, i64 3, i32 1, i32 2\n  %718 = bitcast %\"class.std::__cxx11::basic_string\"* %716 to %union.anon**\n  store %union.anon* %717, %union.anon** %718, align 8, !tbaa !3\n  %719 = bitcast %union.anon* %717 to i8*\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(5) %719, i8* noundef nonnull align 1 dereferenceable(5) getelementptr inbounds ([6 x i8], [6 x i8]* @.str.3, i64 0, i64 0), i64 5, i1 false) #13\n  %720 = getelementptr inbounds [10 x %\"struct.std::pair.15\"], [10 x %\"struct.std::pair.15\"]* %10, i64 0, i64 3, i32 1, i32 1\n  store i64 5, i64* %720, align 8, !tbaa !8\n  %721 = getelementptr inbounds i8, i8* %719, i64 5\n  store i8 0, i8* %721, align 1, !tbaa !11\n  %722 = getelementptr inbounds [10 x %\"struct.std::pair.15\"], [10 x %\"struct.std::pair.15\"]* %10, i64 0, i64 4, i32 0\n  store i32 4, i32* %722, align 8, !tbaa !34\n  %723 = getelementptr inbounds [10 x %\"struct.std::pair.15\"], [10 x %\"struct.std::pair.15\"]* %10, i64 0, i64 4, i32 1\n  %724 = getelementptr inbounds [10 x %\"struct.std::pair.15\"], [10 x %\"struct.std::pair.15\"]* %10, i64 0, i64 4, i32 1, i32 2\n  %725 = bitcast %\"class.std::__cxx11::basic_string\"* %723 to %union.anon**\n  store %union.anon* %724, %union.anon** %725, align 8, !tbaa !3\n  %726 = bitcast %union.anon* %724 to i32*\n  store i32 1920298854, i32* %726, align 8\n  %727 = getelementptr inbounds [10 x %\"struct.std::pair.15\"], [10 x %\"struct.std::pair.15\"]* %10, i64 0, i64 4, i32 1, i32 1\n  store i64 4, i64* %727, align 8, !tbaa !8\n  %728 = bitcast %union.anon* %724 to i8*\n  %729 = getelementptr inbounds i8, i8* %728, i64 4\n  store i8 0, i8* %729, align 4, !tbaa !11\n  %730 = getelementptr inbounds [10 x %\"struct.std::pair.15\"], [10 x %\"struct.std::pair.15\"]* %10, i64 0, i64 5, i32 0\n  store i32 5, i32* %730, align 8, !tbaa !34\n  %731 = getelementptr inbounds [10 x %\"struct.std::pair.15\"], [10 x %\"struct.std::pair.15\"]* %10, i64 0, i64 5, i32 1\n  %732 = getelementptr inbounds [10 x %\"struct.std::pair.15\"], [10 x %\"struct.std::pair.15\"]* %10, i64 0, i64 5, i32 1, i32 2\n  %733 = bitcast %\"class.std::__cxx11::basic_string\"* %731 to %union.anon**\n  store %union.anon* %732, %union.anon** %733, align 8, !tbaa !3\n  %734 = bitcast %union.anon* %732 to i32*\n  store i32 1702259046, i32* %734, align 8\n  %735 = getelementptr inbounds [10 x %\"struct.std::pair.15\"], [10 x %\"struct.std::pair.15\"]* %10, i64 0, i64 5, i32 1, i32 1\n  store i64 4, i64* %735, align 8, !tbaa !8\n  %736 = bitcast %union.anon* %732 to i8*\n  %737 = getelementptr inbounds i8, i8* %736, i64 4\n  store i8 0, i8* %737, align 4, !tbaa !11\n  %738 = getelementptr inbounds [10 x %\"struct.std::pair.15\"], [10 x %\"struct.std::pair.15\"]* %10, i64 0, i64 6, i32 0\n  store i32 6, i32* %738, align 8, !tbaa !34\n  %739 = getelementptr inbounds [10 x %\"struct.std::pair.15\"], [10 x %\"struct.std::pair.15\"]* %10, i64 0, i64 6, i32 1\n  %740 = getelementptr inbounds [10 x %\"struct.std::pair.15\"], [10 x %\"struct.std::pair.15\"]* %10, i64 0, i64 6, i32 1, i32 2\n  %741 = bitcast %\"class.std::__cxx11::basic_string\"* %739 to %union.anon**\n  store %union.anon* %740, %union.anon** %741, align 8, !tbaa !3\n  %742 = bitcast %union.anon* %740 to i8*\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(3) %742, i8* noundef nonnull align 1 dereferenceable(3) getelementptr inbounds ([4 x i8], [4 x i8]* @.str.6, i64 0, i64 0), i64 3, i1 false) #13\n  %743 = getelementptr inbounds [10 x %\"struct.std::pair.15\"], [10 x %\"struct.std::pair.15\"]* %10, i64 0, i64 6, i32 1, i32 1\n  store i64 3, i64* %743, align 8, !tbaa !8\n  %744 = getelementptr inbounds i8, i8* %742, i64 3\n  store i8 0, i8* %744, align 1, !tbaa !11\n  %745 = getelementptr inbounds [10 x %\"struct.std::pair.15\"], [10 x %\"struct.std::pair.15\"]* %10, i64 0, i64 7, i32 0\n  store i32 7, i32* %745, align 8, !tbaa !34\n  %746 = getelementptr inbounds [10 x %\"struct.std::pair.15\"], [10 x %\"struct.std::pair.15\"]* %10, i64 0, i64 7, i32 1\n  %747 = getelementptr inbounds [10 x %\"struct.std::pair.15\"], [10 x %\"struct.std::pair.15\"]* %10, i64 0, i64 7, i32 1, i32 2\n  %748 = bitcast %\"class.std::__cxx11::basic_string\"* %746 to %union.anon**\n  store %union.anon* %747, %union.anon** %748, align 8, !tbaa !3\n  %749 = bitcast %union.anon* %747 to i8*\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(5) %749, i8* noundef nonnull align 1 dereferenceable(5) getelementptr inbounds ([6 x i8], [6 x i8]* @.str.7, i64 0, i64 0), i64 5, i1 false) #13\n  %750 = getelementptr inbounds [10 x %\"struct.std::pair.15\"], [10 x %\"struct.std::pair.15\"]* %10, i64 0, i64 7, i32 1, i32 1\n  store i64 5, i64* %750, align 8, !tbaa !8\n  %751 = getelementptr inbounds i8, i8* %749, i64 5\n  store i8 0, i8* %751, align 1, !tbaa !11\n  %752 = getelementptr inbounds [10 x %\"struct.std::pair.15\"], [10 x %\"struct.std::pair.15\"]* %10, i64 0, i64 8, i32 0\n  store i32 8, i32* %752, align 8, !tbaa !34\n  %753 = getelementptr inbounds [10 x %\"struct.std::pair.15\"], [10 x %\"struct.std::pair.15\"]* %10, i64 0, i64 8, i32 1\n  %754 = getelementptr inbounds [10 x %\"struct.std::pair.15\"], [10 x %\"struct.std::pair.15\"]* %10, i64 0, i64 8, i32 1, i32 2\n  %755 = bitcast %\"class.std::__cxx11::basic_string\"* %753 to %union.anon**\n  store %union.anon* %754, %union.anon** %755, align 8, !tbaa !3\n  %756 = bitcast %union.anon* %754 to i8*\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(5) %756, i8* noundef nonnull align 1 dereferenceable(5) getelementptr inbounds ([6 x i8], [6 x i8]* @.str.8, i64 0, i64 0), i64 5, i1 false) #13\n  %757 = getelementptr inbounds [10 x %\"struct.std::pair.15\"], [10 x %\"struct.std::pair.15\"]* %10, i64 0, i64 8, i32 1, i32 1\n  store i64 5, i64* %757, align 8, !tbaa !8\n  %758 = getelementptr inbounds i8, i8* %756, i64 5\n  store i8 0, i8* %758, align 1, !tbaa !11\n  %759 = getelementptr inbounds [10 x %\"struct.std::pair.15\"], [10 x %\"struct.std::pair.15\"]* %10, i64 0, i64 9, i32 0\n  store i32 9, i32* %759, align 8, !tbaa !34\n  %760 = getelementptr inbounds [10 x %\"struct.std::pair.15\"], [10 x %\"struct.std::pair.15\"]* %10, i64 0, i64 9, i32 1\n  %761 = getelementptr inbounds [10 x %\"struct.std::pair.15\"], [10 x %\"struct.std::pair.15\"]* %10, i64 0, i64 9, i32 1, i32 2\n  %762 = bitcast %\"class.std::__cxx11::basic_string\"* %760 to %union.anon**\n  store %union.anon* %761, %union.anon** %762, align 8, !tbaa !3\n  %763 = bitcast %union.anon* %761 to i32*\n  store i32 1701734766, i32* %763, align 8\n  %764 = getelementptr inbounds [10 x %\"struct.std::pair.15\"], [10 x %\"struct.std::pair.15\"]* %10, i64 0, i64 9, i32 1, i32 1\n  store i64 4, i64* %764, align 8, !tbaa !8\n  %765 = bitcast %union.anon* %761 to i8*\n  %766 = getelementptr inbounds i8, i8* %765, i64 4\n  store i8 0, i8* %766, align 4, !tbaa !11\n  %767 = getelementptr inbounds %\"class.std::map.6\", %\"class.std::map.6\"* %9, i64 0, i32 0\n  %768 = getelementptr inbounds i8, i8* %690, i64 8\n  %769 = bitcast i8* %768 to i32*\n  store i32 0, i32* %769, align 8, !tbaa !43\n  %770 = getelementptr inbounds i8, i8* %690, i64 16\n  %771 = bitcast i8* %770 to %\"struct.std::_Rb_tree_node_base\"**\n  store %\"struct.std::_Rb_tree_node_base\"* null, %\"struct.std::_Rb_tree_node_base\"** %771, align 8, !tbaa !32\n  %772 = getelementptr inbounds i8, i8* %690, i64 24\n  %773 = bitcast i8* %772 to i8**\n  store i8* %768, i8** %773, align 8, !tbaa !20\n  %774 = getelementptr inbounds i8, i8* %690, i64 32\n  %775 = bitcast i8* %774 to i8**\n  store i8* %768, i8** %775, align 8, !tbaa !44\n  %776 = getelementptr inbounds i8, i8* %690, i64 40\n  %777 = bitcast i8* %776 to i64*\n  store i64 0, i64* %777, align 8, !tbaa !24\n  %778 = getelementptr inbounds [10 x %\"struct.std::pair.15\"], [10 x %\"struct.std::pair.15\"]* %10, i64 0, i64 10\n  %779 = bitcast i8* %768 to %\"struct.std::_Rb_tree_node_base\"*\n  %780 = bitcast i8* %774 to %\"struct.std::_Rb_tree_node_base\"**\n  %781 = bitcast i8* %770 to %\"struct.std::_Rb_tree_node\"**\n  %782 = bitcast i8* %772 to %\"struct.std::_Rb_tree_node_base\"**\n  br label %108\n\n783:                                              ; preds = %210\n  call void @_ZdlPv(i8* %212) #13\n  br label %784\n\n784:                                              ; preds = %783, %210\n  %785 = getelementptr inbounds [10 x %\"struct.std::pair.15\"], [10 x %\"struct.std::pair.15\"]* %10, i64 0, i64 7, i32 1, i32 0, i32 0\n  %786 = load i8*, i8** %785, align 8, !tbaa !15\n  %787 = getelementptr inbounds [10 x %\"struct.std::pair.15\"], [10 x %\"struct.std::pair.15\"]* %10, i64 0, i64 7, i32 1, i32 2\n  %788 = bitcast %union.anon* %787 to i8*\n  %789 = icmp eq i8* %786, %788\n  br i1 %789, label %791, label %790\n\n790:                                              ; preds = %784\n  call void @_ZdlPv(i8* %786) #13\n  br label %791\n\n791:                                              ; preds = %790, %784\n  %792 = getelementptr inbounds [10 x %\"struct.std::pair.15\"], [10 x %\"struct.std::pair.15\"]* %10, i64 0, i64 6, i32 1, i32 0, i32 0\n  %793 = load i8*, i8** %792, align 8, !tbaa !15\n  %794 = getelementptr inbounds [10 x %\"struct.std::pair.15\"], [10 x %\"struct.std::pair.15\"]* %10, i64 0, i64 6, i32 1, i32 2\n  %795 = bitcast %union.anon* %794 to i8*\n  %796 = icmp eq i8* %793, %795\n  br i1 %796, label %798, label %797\n\n797:                                              ; preds = %791\n  call void @_ZdlPv(i8* %793) #13\n  br label %798\n\n798:                                              ; preds = %797, %791\n  %799 = getelementptr inbounds [10 x %\"struct.std::pair.15\"], [10 x %\"struct.std::pair.15\"]* %10, i64 0, i64 5, i32 1, i32 0, i32 0\n  %800 = load i8*, i8** %799, align 8, !tbaa !15\n  %801 = getelementptr inbounds [10 x %\"struct.std::pair.15\"], [10 x %\"struct.std::pair.15\"]* %10, i64 0, i64 5, i32 1, i32 2\n  %802 = bitcast %union.anon* %801 to i8*\n  %803 = icmp eq i8* %800, %802\n  br i1 %803, label %805, label %804\n\n804:                                              ; preds = %798\n  call void @_ZdlPv(i8* %800) #13\n  br label %805\n\n805:                                              ; preds = %804, %798\n  %806 = getelementptr inbounds [10 x %\"struct.std::pair.15\"], [10 x %\"struct.std::pair.15\"]* %10, i64 0, i64 4, i32 1, i32 0, i32 0\n  %807 = load i8*, i8** %806, align 8, !tbaa !15\n  %808 = getelementptr inbounds [10 x %\"struct.std::pair.15\"], [10 x %\"struct.std::pair.15\"]* %10, i64 0, i64 4, i32 1, i32 2\n  %809 = bitcast %union.anon* %808 to i8*\n  %810 = icmp eq i8* %807, %809\n  br i1 %810, label %812, label %811\n\n811:                                              ; preds = %805\n  call void @_ZdlPv(i8* %807) #13\n  br label %812\n\n812:                                              ; preds = %811, %805\n  %813 = getelementptr inbounds [10 x %\"struct.std::pair.15\"], [10 x %\"struct.std::pair.15\"]* %10, i64 0, i64 3, i32 1, i32 0, i32 0\n  %814 = load i8*, i8** %813, align 8, !tbaa !15\n  %815 = getelementptr inbounds [10 x %\"struct.std::pair.15\"], [10 x %\"struct.std::pair.15\"]* %10, i64 0, i64 3, i32 1, i32 2\n  %816 = bitcast %union.anon* %815 to i8*\n  %817 = icmp eq i8* %814, %816\n  br i1 %817, label %819, label %818\n\n818:                                              ; preds = %812\n  call void @_ZdlPv(i8* %814) #13\n  br label %819\n\n819:                                              ; preds = %818, %812\n  %820 = getelementptr inbounds [10 x %\"struct.std::pair.15\"], [10 x %\"struct.std::pair.15\"]* %10, i64 0, i64 2, i32 1, i32 0, i32 0\n  %821 = load i8*, i8** %820, align 8, !tbaa !15\n  %822 = getelementptr inbounds [10 x %\"struct.std::pair.15\"], [10 x %\"struct.std::pair.15\"]* %10, i64 0, i64 2, i32 1, i32 2\n  %823 = bitcast %union.anon* %822 to i8*\n  %824 = icmp eq i8* %821, %823\n  br i1 %824, label %826, label %825\n\n825:                                              ; preds = %819\n  call void @_ZdlPv(i8* %821) #13\n  br label %826\n\n826:                                              ; preds = %825, %819\n  %827 = getelementptr inbounds [10 x %\"struct.std::pair.15\"], [10 x %\"struct.std::pair.15\"]* %10, i64 0, i64 1, i32 1, i32 0, i32 0\n  %828 = load i8*, i8** %827, align 8, !tbaa !15\n  %829 = getelementptr inbounds [10 x %\"struct.std::pair.15\"], [10 x %\"struct.std::pair.15\"]* %10, i64 0, i64 1, i32 1, i32 2\n  %830 = bitcast %union.anon* %829 to i8*\n  %831 = icmp eq i8* %828, %830\n  br i1 %831, label %833, label %832\n\n832:                                              ; preds = %826\n  call void @_ZdlPv(i8* %828) #13\n  br label %833\n\n833:                                              ; preds = %832, %826\n  %834 = getelementptr inbounds [10 x %\"struct.std::pair.15\"], [10 x %\"struct.std::pair.15\"]* %10, i64 0, i64 0, i32 1, i32 0, i32 0\n  %835 = load i8*, i8** %834, align 8, !tbaa !15\n  %836 = getelementptr inbounds [10 x %\"struct.std::pair.15\"], [10 x %\"struct.std::pair.15\"]* %10, i64 0, i64 0, i32 1, i32 2\n  %837 = bitcast %union.anon* %836 to i8*\n  %838 = icmp eq i8* %835, %837\n  br i1 %838, label %840, label %839\n\n839:                                              ; preds = %833\n  call void @_ZdlPv(i8* %835) #13\n  br label %840\n\n840:                                              ; preds = %839, %833\n  call void @llvm.lifetime.end.p0i8(i64 400, i8* nonnull %691) #13\n  br label %569\n\n841:                                              ; preds = %189\n  call void @_ZdlPv(i8* %191) #13\n  br label %842\n\n842:                                              ; preds = %841, %189\n  %843 = getelementptr inbounds [10 x %\"struct.std::pair.15\"], [10 x %\"struct.std::pair.15\"]* %10, i64 0, i64 7, i32 1, i32 0, i32 0\n  %844 = load i8*, i8** %843, align 8, !tbaa !15\n  %845 = getelementptr inbounds [10 x %\"struct.std::pair.15\"], [10 x %\"struct.std::pair.15\"]* %10, i64 0, i64 7, i32 1, i32 2\n  %846 = bitcast %union.anon* %845 to i8*\n  %847 = icmp eq i8* %844, %846\n  br i1 %847, label %849, label %848\n\n848:                                              ; preds = %842\n  call void @_ZdlPv(i8* %844) #13\n  br label %849\n\n849:                                              ; preds = %848, %842\n  %850 = getelementptr inbounds [10 x %\"struct.std::pair.15\"], [10 x %\"struct.std::pair.15\"]* %10, i64 0, i64 6, i32 1, i32 0, i32 0\n  %851 = load i8*, i8** %850, align 8, !tbaa !15\n  %852 = getelementptr inbounds [10 x %\"struct.std::pair.15\"], [10 x %\"struct.std::pair.15\"]* %10, i64 0, i64 6, i32 1, i32 2\n  %853 = bitcast %union.anon* %852 to i8*\n  %854 = icmp eq i8* %851, %853\n  br i1 %854, label %856, label %855\n\n855:                                              ; preds = %849\n  call void @_ZdlPv(i8* %851) #13\n  br label %856\n\n856:                                              ; preds = %855, %849\n  %857 = getelementptr inbounds [10 x %\"struct.std::pair.15\"], [10 x %\"struct.std::pair.15\"]* %10, i64 0, i64 5, i32 1, i32 0, i32 0\n  %858 = load i8*, i8** %857, align 8, !tbaa !15\n  %859 = getelementptr inbounds [10 x %\"struct.std::pair.15\"], [10 x %\"struct.std::pair.15\"]* %10, i64 0, i64 5, i32 1, i32 2\n  %860 = bitcast %union.anon* %859 to i8*\n  %861 = icmp eq i8* %858, %860\n  br i1 %861, label %863, label %862\n\n862:                                              ; preds = %856\n  call void @_ZdlPv(i8* %858) #13\n  br label %863\n\n863:                                              ; preds = %862, %856\n  %864 = getelementptr inbounds [10 x %\"struct.std::pair.15\"], [10 x %\"struct.std::pair.15\"]* %10, i64 0, i64 4, i32 1, i32 0, i32 0\n  %865 = load i8*, i8** %864, align 8, !tbaa !15\n  %866 = getelementptr inbounds [10 x %\"struct.std::pair.15\"], [10 x %\"struct.std::pair.15\"]* %10, i64 0, i64 4, i32 1, i32 2\n  %867 = bitcast %union.anon* %866 to i8*\n  %868 = icmp eq i8* %865, %867\n  br i1 %868, label %870, label %869\n\n869:                                              ; preds = %863\n  call void @_ZdlPv(i8* %865) #13\n  br label %870\n\n870:                                              ; preds = %869, %863\n  %871 = getelementptr inbounds [10 x %\"struct.std::pair.15\"], [10 x %\"struct.std::pair.15\"]* %10, i64 0, i64 3, i32 1, i32 0, i32 0\n  %872 = load i8*, i8** %871, align 8, !tbaa !15\n  %873 = getelementptr inbounds [10 x %\"struct.std::pair.15\"], [10 x %\"struct.std::pair.15\"]* %10, i64 0, i64 3, i32 1, i32 2\n  %874 = bitcast %union.anon* %873 to i8*\n  %875 = icmp eq i8* %872, %874\n  br i1 %875, label %877, label %876\n\n876:                                              ; preds = %870\n  call void @_ZdlPv(i8* %872) #13\n  br label %877\n\n877:                                              ; preds = %876, %870\n  %878 = getelementptr inbounds [10 x %\"struct.std::pair.15\"], [10 x %\"struct.std::pair.15\"]* %10, i64 0, i64 2, i32 1, i32 0, i32 0\n  %879 = load i8*, i8** %878, align 8, !tbaa !15\n  %880 = getelementptr inbounds [10 x %\"struct.std::pair.15\"], [10 x %\"struct.std::pair.15\"]* %10, i64 0, i64 2, i32 1, i32 2\n  %881 = bitcast %union.anon* %880 to i8*\n  %882 = icmp eq i8* %879, %881\n  br i1 %882, label %884, label %883\n\n883:                                              ; preds = %877\n  call void @_ZdlPv(i8* %879) #13\n  br label %884\n\n884:                                              ; preds = %883, %877\n  %885 = getelementptr inbounds [10 x %\"struct.std::pair.15\"], [10 x %\"struct.std::pair.15\"]* %10, i64 0, i64 1, i32 1, i32 0, i32 0\n  %886 = load i8*, i8** %885, align 8, !tbaa !15\n  %887 = getelementptr inbounds [10 x %\"struct.std::pair.15\"], [10 x %\"struct.std::pair.15\"]* %10, i64 0, i64 1, i32 1, i32 2\n  %888 = bitcast %union.anon* %887 to i8*\n  %889 = icmp eq i8* %886, %888\n  br i1 %889, label %891, label %890\n\n890:                                              ; preds = %884\n  call void @_ZdlPv(i8* %886) #13\n  br label %891\n\n891:                                              ; preds = %890, %884\n  %892 = getelementptr inbounds [10 x %\"struct.std::pair.15\"], [10 x %\"struct.std::pair.15\"]* %10, i64 0, i64 0, i32 1, i32 0, i32 0\n  %893 = load i8*, i8** %892, align 8, !tbaa !15\n  %894 = getelementptr inbounds [10 x %\"struct.std::pair.15\"], [10 x %\"struct.std::pair.15\"]* %10, i64 0, i64 0, i32 1, i32 2\n  %895 = bitcast %union.anon* %894 to i8*\n  %896 = icmp eq i8* %893, %895\n  br i1 %896, label %898, label %897\n\n897:                                              ; preds = %891\n  call void @_ZdlPv(i8* %893) #13\n  br label %898\n\n898:                                              ; preds = %897, %891\n  call void @llvm.lifetime.end.p0i8(i64 400, i8* nonnull %691) #13\n  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %12) #13\n  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 16 dereferenceable(40) %12, i8 0, i64 40, i1 false)\n  %899 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 2\n  %900 = bitcast %\"class.std::__cxx11::basic_string\"* %0 to %union.anon**\n  store %union.anon* %899, %union.anon** %900, align 8, !tbaa !3\n  %901 = bitcast %union.anon* %899 to i8*\n  %902 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 0, i32 0\n  %903 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 1\n  store i64 0, i64* %903, align 8, !tbaa !8\n  store i8 0, i8* %901, align 8, !tbaa !11\n  %904 = bitcast %\"class.std::__cxx11::basic_string\"* %13 to i8*\n  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %904) #13\n  %905 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %13, i64 0, i32 2\n  %906 = bitcast %\"class.std::__cxx11::basic_string\"* %13 to %union.anon**\n  store %union.anon* %905, %union.anon** %906, align 8, !tbaa !3\n  %907 = bitcast %union.anon* %905 to i8*\n  %908 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %13, i64 0, i32 0, i32 0\n  %909 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %13, i64 0, i32 1\n  store i64 0, i64* %909, align 8, !tbaa !8\n  store i8 0, i8* %907, align 8, !tbaa !11\n  %910 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %1, i64 0, i32 1\n  %911 = load i64, i64* %910, align 8, !tbaa !8\n  %912 = icmp eq i64 %911, 0\n  br i1 %912, label %298, label %216\n}\n\n; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn\ndeclare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1\n\ndeclare dso_local i32 @__gxx_personality_v0(...)\n\n; Function Attrs: uwtable\ndefine linkonce_odr dso_local void @_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEiSt4lessIS5_ESaISt4pairIKS5_iEEEC2ESt16initializer_listISA_ERKS7_RKSB_(%\"class.std::map\"* nonnull align 8 dereferenceable(48) %0, %\"struct.std::pair\"* %1, i64 %2, %\"struct.std::less\"* nonnull align 1 dereferenceable(1) %3, %\"class.std::allocator.3\"* nonnull align 1 dereferenceable(1) %4) unnamed_addr #0 comdat align 2 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {\n  %6 = alloca %\"struct.std::_Rb_tree<std::__cxx11::basic_string<char>, std::pair<const std::__cxx11::basic_string<char>, int>, std::_Select1st<std::pair<const std::__cxx11::basic_string<char>, int>>, std::less<std::__cxx11::basic_string<char>>>::_Alloc_node\", align 8\n  %7 = getelementptr inbounds %\"class.std::map\", %\"class.std::map\"* %0, i64 0, i32 0\n  %8 = getelementptr inbounds %\"class.std::map\", %\"class.std::map\"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0\n  %9 = getelementptr inbounds i8, i8* %8, i64 8\n  %10 = bitcast i8* %9 to i32*\n  store i32 0, i32* %10, align 8, !tbaa !43\n  %11 = getelementptr inbounds i8, i8* %8, i64 16\n  %12 = bitcast i8* %11 to %\"struct.std::_Rb_tree_node_base\"**\n  store %\"struct.std::_Rb_tree_node_base\"* null, %\"struct.std::_Rb_tree_node_base\"** %12, align 8, !tbaa !32\n  %13 = getelementptr inbounds i8, i8* %8, i64 24\n  %14 = bitcast i8* %13 to i8**\n  store i8* %9, i8** %14, align 8, !tbaa !20\n  %15 = getelementptr inbounds i8, i8* %8, i64 32\n  %16 = bitcast i8* %15 to i8**\n  store i8* %9, i8** %16, align 8, !tbaa !44\n  %17 = getelementptr inbounds i8, i8* %8, i64 40\n  %18 = bitcast i8* %17 to i64*\n  store i64 0, i64* %18, align 8, !tbaa !24\n  %19 = getelementptr inbounds %\"struct.std::pair\", %\"struct.std::pair\"* %1, i64 %2\n  %20 = bitcast %\"struct.std::_Rb_tree<std::__cxx11::basic_string<char>, std::pair<const std::__cxx11::basic_string<char>, int>, std::_Select1st<std::pair<const std::__cxx11::basic_string<char>, int>>, std::less<std::__cxx11::basic_string<char>>>::_Alloc_node\"* %6 to i8*\n  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %20) #13\n  %21 = getelementptr inbounds %\"struct.std::_Rb_tree<std::__cxx11::basic_string<char>, std::pair<const std::__cxx11::basic_string<char>, int>, std::_Select1st<std::pair<const std::__cxx11::basic_string<char>, int>>, std::less<std::__cxx11::basic_string<char>>>::_Alloc_node\", %\"struct.std::_Rb_tree<std::__cxx11::basic_string<char>, std::pair<const std::__cxx11::basic_string<char>, int>, std::_Select1st<std::pair<const std::__cxx11::basic_string<char>, int>>, std::less<std::__cxx11::basic_string<char>>>::_Alloc_node\"* %6, i64 0, i32 0\n  store %\"class.std::_Rb_tree\"* %7, %\"class.std::_Rb_tree\"** %21, align 8, !tbaa !16\n  %22 = icmp eq i64 %2, 0\n  br i1 %22, label %73, label %23\n\n23:                                               ; preds = %5\n  %24 = bitcast i8* %15 to %\"struct.std::_Rb_tree_node_base\"**\n  br label %25\n\n25:                                               ; preds = %71, %23\n  %26 = phi i64 [ %72, %71 ], [ 0, %23 ]\n  %27 = phi %\"struct.std::pair\"* [ %69, %71 ], [ %1, %23 ]\n  %28 = getelementptr inbounds %\"struct.std::pair\", %\"struct.std::pair\"* %27, i64 0, i32 0\n  %29 = icmp eq i64 %26, 0\n  br i1 %29, label %58, label %30\n\n30:                                               ; preds = %25\n  %31 = load %\"struct.std::_Rb_tree_node_base\"*, %\"struct.std::_Rb_tree_node_base\"** %24, align 8, !tbaa !16\n  %32 = getelementptr inbounds %\"struct.std::_Rb_tree_node_base\", %\"struct.std::_Rb_tree_node_base\"* %31, i64 1, i32 1\n  %33 = bitcast %\"struct.std::_Rb_tree_node_base\"** %32 to i64*\n  %34 = load i64, i64* %33, align 8, !tbaa !8\n  %35 = getelementptr inbounds %\"struct.std::pair\", %\"struct.std::pair\"* %27, i64 0, i32 0, i32 1\n  %36 = load i64, i64* %35, align 8, !tbaa !8\n  %37 = icmp ugt i64 %34, %36\n  %38 = select i1 %37, i64 %36, i64 %34\n  %39 = icmp eq i64 %38, 0\n  br i1 %39, label %48, label %40\n\n40:                                               ; preds = %30\n  %41 = getelementptr inbounds %\"struct.std::_Rb_tree_node_base\", %\"struct.std::_Rb_tree_node_base\"* %31, i64 1\n  %42 = getelementptr inbounds %\"struct.std::pair\", %\"struct.std::pair\"* %27, i64 0, i32 0, i32 0, i32 0\n  %43 = load i8*, i8** %42, align 8, !tbaa !15\n  %44 = bitcast %\"struct.std::_Rb_tree_node_base\"* %41 to i8**\n  %45 = load i8*, i8** %44, align 8, !tbaa !15\n  %46 = call i32 @memcmp(i8* %45, i8* %43, i64 %38) #13\n  %47 = icmp eq i32 %46, 0\n  br i1 %47, label %48, label %55\n\n48:                                               ; preds = %40, %30\n  %49 = sub i64 %34, %36\n  %50 = icmp sgt i64 %49, -2147483648\n  %51 = select i1 %50, i64 %49, i64 -2147483648\n  %52 = icmp slt i64 %51, 2147483647\n  %53 = select i1 %52, i64 %51, i64 2147483647\n  %54 = trunc i64 %53 to i32\n  br label %55\n\n55:                                               ; preds = %48, %40\n  %56 = phi i32 [ %46, %40 ], [ %54, %48 ]\n  %57 = icmp slt i32 %56, 0\n  br i1 %57, label %64, label %58\n\n58:                                               ; preds = %55, %25\n  %59 = invoke { %\"struct.std::_Rb_tree_node_base\"*, %\"struct.std::_Rb_tree_node_base\"* } @_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_iESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE24_M_get_insert_unique_posERS7_(%\"class.std::_Rb_tree\"* nonnull align 8 dereferenceable(48) %7, %\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %28)\n          to label %60 unwind label %74\n\n60:                                               ; preds = %58\n  %61 = extractvalue { %\"struct.std::_Rb_tree_node_base\"*, %\"struct.std::_Rb_tree_node_base\"* } %59, 0\n  %62 = extractvalue { %\"struct.std::_Rb_tree_node_base\"*, %\"struct.std::_Rb_tree_node_base\"* } %59, 1\n  %63 = icmp eq %\"struct.std::_Rb_tree_node_base\"* %62, null\n  br i1 %63, label %68, label %64\n\n64:                                               ; preds = %55, %60\n  %65 = phi %\"struct.std::_Rb_tree_node_base\"* [ %62, %60 ], [ %31, %55 ]\n  %66 = phi %\"struct.std::_Rb_tree_node_base\"* [ %61, %60 ], [ null, %55 ]\n  %67 = invoke %\"struct.std::_Rb_tree_node_base\"* @_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_iESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE10_M_insert_IRKS8_NSE_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS8_EPSt18_Rb_tree_node_baseSM_OT_RT0_(%\"class.std::_Rb_tree\"* nonnull align 8 dereferenceable(48) %7, %\"struct.std::_Rb_tree_node_base\"* %66, %\"struct.std::_Rb_tree_node_base\"* nonnull %65, %\"struct.std::pair\"* nonnull align 8 dereferenceable(36) %27, %\"struct.std::_Rb_tree<std::__cxx11::basic_string<char>, std::pair<const std::__cxx11::basic_string<char>, int>, std::_Select1st<std::pair<const std::__cxx11::basic_string<char>, int>>, std::less<std::__cxx11::basic_string<char>>>::_Alloc_node\"* nonnull align 8 dereferenceable(8) %6)\n          to label %68 unwind label %74\n\n68:                                               ; preds = %64, %60\n  %69 = getelementptr inbounds %\"struct.std::pair\", %\"struct.std::pair\"* %27, i64 1\n  %70 = icmp eq %\"struct.std::pair\"* %69, %19\n  br i1 %70, label %73, label %71, !llvm.loop !45\n\n71:                                               ; preds = %68\n  %72 = load i64, i64* %18, align 8, !tbaa !24\n  br label %25\n\n73:                                               ; preds = %68, %5\n  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %20) #13\n  ret void\n\n74:                                               ; preds = %58, %64\n  %75 = landingpad { i8*, i32 }\n          cleanup\n  call void @_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_iESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EED2Ev(%\"class.std::_Rb_tree\"* nonnull align 8 dereferenceable(48) %7) #13\n  resume { i8*, i32 } %75\n}\n\n; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn\ndeclare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1\n\n; Function Attrs: uwtable\ndefine linkonce_odr dso_local nonnull align 4 dereferenceable(4) i32* @_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEiSt4lessIS5_ESaISt4pairIKS5_iEEEixERS9_(%\"class.std::map\"* nonnull align 8 dereferenceable(48) %0, %\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %1) local_unnamed_addr #0 comdat align 2 personality i32 (...)* @__gxx_personality_v0 {\n  %3 = alloca %\"class.std::tuple\", align 8\n  %4 = alloca %\"class.std::tuple.30\", align 1\n  %5 = getelementptr inbounds %\"class.std::map\", %\"class.std::map\"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0\n  %6 = getelementptr inbounds i8, i8* %5, i64 16\n  %7 = bitcast i8* %6 to %\"struct.std::_Rb_tree_node.21\"**\n  %8 = load %\"struct.std::_Rb_tree_node.21\"*, %\"struct.std::_Rb_tree_node.21\"** %7, align 8, !tbaa !32\n  %9 = getelementptr inbounds i8, i8* %5, i64 8\n  %10 = bitcast i8* %9 to %\"struct.std::_Rb_tree_node_base\"*\n  %11 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %1, i64 0, i32 1\n  %12 = load i64, i64* %11, align 8\n  %13 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %1, i64 0, i32 0, i32 0\n  %14 = load i8*, i8** %13, align 8\n  %15 = icmp eq %\"struct.std::_Rb_tree_node.21\"* %8, null\n  br i1 %15, label %74, label %16\n\n16:                                               ; preds = %2, %38\n  %17 = phi %\"struct.std::_Rb_tree_node.21\"* [ %47, %38 ], [ %8, %2 ]\n  %18 = phi %\"struct.std::_Rb_tree_node_base\"* [ %44, %38 ], [ %10, %2 ]\n  %19 = getelementptr inbounds %\"struct.std::_Rb_tree_node.21\", %\"struct.std::_Rb_tree_node.21\"* %17, i64 0, i32 1, i32 0, i64 8\n  %20 = bitcast i8* %19 to i64*\n  %21 = load i64, i64* %20, align 8, !tbaa !8\n  %22 = icmp ugt i64 %21, %12\n  %23 = select i1 %22, i64 %12, i64 %21\n  %24 = icmp eq i64 %23, 0\n  br i1 %24, label %31, label %25\n\n25:                                               ; preds = %16\n  %26 = getelementptr inbounds %\"struct.std::_Rb_tree_node.21\", %\"struct.std::_Rb_tree_node.21\"* %17, i64 0, i32 1\n  %27 = bitcast %\"struct.__gnu_cxx::__aligned_membuf.22\"* %26 to i8**\n  %28 = load i8*, i8** %27, align 8, !tbaa !15\n  %29 = tail call i32 @memcmp(i8* %28, i8* %14, i64 %23) #13\n  %30 = icmp eq i32 %29, 0\n  br i1 %30, label %31, label %38\n\n31:                                               ; preds = %25, %16\n  %32 = sub i64 %21, %12\n  %33 = icmp sgt i64 %32, -2147483648\n  %34 = select i1 %33, i64 %32, i64 -2147483648\n  %35 = icmp slt i64 %34, 2147483647\n  %36 = select i1 %35, i64 %34, i64 2147483647\n  %37 = trunc i64 %36 to i32\n  br label %38\n\n38:                                               ; preds = %31, %25\n  %39 = phi i32 [ %29, %25 ], [ %37, %31 ]\n  %40 = icmp slt i32 %39, 0\n  %41 = getelementptr inbounds %\"struct.std::_Rb_tree_node.21\", %\"struct.std::_Rb_tree_node.21\"* %17, i64 0, i32 0, i32 3\n  %42 = getelementptr %\"struct.std::_Rb_tree_node.21\", %\"struct.std::_Rb_tree_node.21\"* %17, i64 0, i32 0\n  %43 = getelementptr inbounds %\"struct.std::_Rb_tree_node.21\", %\"struct.std::_Rb_tree_node.21\"* %17, i64 0, i32 0, i32 2\n  %44 = select i1 %40, %\"struct.std::_Rb_tree_node_base\"* %18, %\"struct.std::_Rb_tree_node_base\"* %42\n  %45 = select i1 %40, %\"struct.std::_Rb_tree_node_base\"** %41, %\"struct.std::_Rb_tree_node_base\"** %43\n  %46 = bitcast %\"struct.std::_Rb_tree_node_base\"** %45 to %\"struct.std::_Rb_tree_node.21\"**\n  %47 = load %\"struct.std::_Rb_tree_node.21\"*, %\"struct.std::_Rb_tree_node.21\"** %46, align 8, !tbaa !16\n  %48 = icmp eq %\"struct.std::_Rb_tree_node.21\"* %47, null\n  br i1 %48, label %49, label %16, !llvm.loop !46\n\n49:                                               ; preds = %38\n  %50 = icmp eq %\"struct.std::_Rb_tree_node_base\"* %44, %10\n  br i1 %50, label %74, label %51\n\n51:                                               ; preds = %49\n  %52 = getelementptr inbounds %\"struct.std::_Rb_tree_node_base\", %\"struct.std::_Rb_tree_node_base\"* %44, i64 1, i32 1\n  %53 = bitcast %\"struct.std::_Rb_tree_node_base\"** %52 to i64*\n  %54 = load i64, i64* %53, align 8, !tbaa !8\n  %55 = icmp ugt i64 %12, %54\n  %56 = select i1 %55, i64 %54, i64 %12\n  %57 = icmp eq i64 %56, 0\n  br i1 %57, label %64, label %58\n\n58:                                               ; preds = %51\n  %59 = getelementptr inbounds %\"struct.std::_Rb_tree_node_base\", %\"struct.std::_Rb_tree_node_base\"* %44, i64 1\n  %60 = bitcast %\"struct.std::_Rb_tree_node_base\"* %59 to i8**\n  %61 = load i8*, i8** %60, align 8, !tbaa !15\n  %62 = tail call i32 @memcmp(i8* %14, i8* %61, i64 %56) #13\n  %63 = icmp eq i32 %62, 0\n  br i1 %63, label %64, label %71\n\n64:                                               ; preds = %58, %51\n  %65 = sub i64 %12, %54\n  %66 = icmp sgt i64 %65, -2147483648\n  %67 = select i1 %66, i64 %65, i64 -2147483648\n  %68 = icmp slt i64 %67, 2147483647\n  %69 = select i1 %68, i64 %67, i64 2147483647\n  %70 = trunc i64 %69 to i32\n  br label %71\n\n71:                                               ; preds = %58, %64\n  %72 = phi i32 [ %62, %58 ], [ %70, %64 ]\n  %73 = icmp slt i32 %72, 0\n  br i1 %73, label %74, label %81\n\n74:                                               ; preds = %2, %49, %71\n  %75 = phi %\"struct.std::_Rb_tree_node_base\"* [ %44, %71 ], [ %10, %49 ], [ %10, %2 ]\n  %76 = getelementptr inbounds %\"class.std::map\", %\"class.std::map\"* %0, i64 0, i32 0\n  %77 = bitcast %\"class.std::tuple\"* %3 to i8*\n  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %77) #13\n  %78 = getelementptr inbounds %\"class.std::tuple\", %\"class.std::tuple\"* %3, i64 0, i32 0, i32 0, i32 0\n  store %\"class.std::__cxx11::basic_string\"* %1, %\"class.std::__cxx11::basic_string\"** %78, align 8, !tbaa !16\n  %79 = getelementptr inbounds %\"class.std::tuple.30\", %\"class.std::tuple.30\"* %4, i64 0, i32 0\n  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %79) #13\n  %80 = call %\"struct.std::_Rb_tree_node_base\"* @_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_iESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS7_EESJ_IJEEEEESt17_Rb_tree_iteratorIS8_ESt23_Rb_tree_const_iteratorIS8_EDpOT_(%\"class.std::_Rb_tree\"* nonnull align 8 dereferenceable(48) %76, %\"struct.std::_Rb_tree_node_base\"* %75, %\"struct.std::piecewise_construct_t\"* nonnull align 1 dereferenceable(1) @_ZStL19piecewise_construct, %\"class.std::tuple\"* nonnull align 8 dereferenceable(8) %3, %\"class.std::tuple.30\"* nonnull align 1 dereferenceable(1) %4)\n  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %79) #13\n  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %77) #13\n  br label %81\n\n81:                                               ; preds = %74, %71\n  %82 = phi %\"struct.std::_Rb_tree_node_base\"* [ %80, %74 ], [ %44, %71 ]\n  %83 = getelementptr inbounds %\"struct.std::_Rb_tree_node_base\", %\"struct.std::_Rb_tree_node_base\"* %82, i64 2, i32 0\n  ret i32* %83\n}\n\n; Function Attrs: nounwind uwtable\ndefine linkonce_odr dso_local void @_ZNSt8_Rb_treeIiSt4pairIKiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIiESaIS8_EED2Ev(%\"class.std::_Rb_tree.7\"* nonnull align 8 dereferenceable(48) %0) unnamed_addr #2 comdat align 2 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {\n  %2 = getelementptr inbounds %\"class.std::_Rb_tree.7\", %\"class.std::_Rb_tree.7\"* %0, i64 0, i32 0, i32 0, i32 0, i32 0\n  %3 = getelementptr inbounds i8, i8* %2, i64 16\n  %4 = bitcast i8* %3 to %\"struct.std::_Rb_tree_node\"**\n  %5 = load %\"struct.std::_Rb_tree_node\"*, %\"struct.std::_Rb_tree_node\"** %4, align 8, !tbaa !32\n  invoke void @_ZNSt8_Rb_treeIiSt4pairIKiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIiESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E(%\"class.std::_Rb_tree.7\"* nonnull align 8 dereferenceable(48) %0, %\"struct.std::_Rb_tree_node\"* %5)\n          to label %6 unwind label %7\n\n6:                                                ; preds = %1\n  ret void\n\n7:                                                ; preds = %1\n  %8 = landingpad { i8*, i32 }\n          catch i8* null\n  %9 = extractvalue { i8*, i32 } %8, 0\n  tail call void @__clang_call_terminate(i8* %9) #17\n  unreachable\n}\n\n; Function Attrs: uwtable\ndefine linkonce_odr dso_local void @_ZNSt8_Rb_treeIiSt4pairIKiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIiESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E(%\"class.std::_Rb_tree.7\"* nonnull align 8 dereferenceable(48) %0, %\"struct.std::_Rb_tree_node\"* %1) local_unnamed_addr #0 comdat align 2 personality i32 (...)* @__gxx_personality_v0 {\n  %3 = icmp eq %\"struct.std::_Rb_tree_node\"* %1, null\n  br i1 %3, label %21, label %4\n\n4:                                                ; preds = %2, %18\n  %5 = phi %\"struct.std::_Rb_tree_node\"* [ %11, %18 ], [ %1, %2 ]\n  %6 = getelementptr inbounds %\"struct.std::_Rb_tree_node\", %\"struct.std::_Rb_tree_node\"* %5, i64 0, i32 0, i32 3\n  %7 = bitcast %\"struct.std::_Rb_tree_node_base\"** %6 to %\"struct.std::_Rb_tree_node\"**\n  %8 = load %\"struct.std::_Rb_tree_node\"*, %\"struct.std::_Rb_tree_node\"** %7, align 8, !tbaa !47\n  tail call void @_ZNSt8_Rb_treeIiSt4pairIKiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIiESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E(%\"class.std::_Rb_tree.7\"* nonnull align 8 dereferenceable(48) %0, %\"struct.std::_Rb_tree_node\"* %8)\n  %9 = getelementptr inbounds %\"struct.std::_Rb_tree_node\", %\"struct.std::_Rb_tree_node\"* %5, i64 0, i32 0, i32 2\n  %10 = bitcast %\"struct.std::_Rb_tree_node_base\"** %9 to %\"struct.std::_Rb_tree_node\"**\n  %11 = load %\"struct.std::_Rb_tree_node\"*, %\"struct.std::_Rb_tree_node\"** %10, align 8, !tbaa !48\n  %12 = getelementptr inbounds %\"struct.std::_Rb_tree_node\", %\"struct.std::_Rb_tree_node\"* %5, i64 0, i32 1, i32 0, i64 8\n  %13 = bitcast i8* %12 to i8**\n  %14 = load i8*, i8** %13, align 8, !tbaa !15\n  %15 = getelementptr inbounds %\"struct.std::_Rb_tree_node\", %\"struct.std::_Rb_tree_node\"* %5, i64 0, i32 1, i32 0, i64 24\n  %16 = icmp eq i8* %14, %15\n  br i1 %16, label %18, label %17\n\n17:                                               ; preds = %4\n  tail call void @_ZdlPv(i8* %14) #13\n  br label %18\n\n18:                                               ; preds = %4, %17\n  %19 = bitcast %\"struct.std::_Rb_tree_node\"* %5 to i8*\n  tail call void @_ZdlPv(i8* nonnull %19) #13\n  %20 = icmp eq %\"struct.std::_Rb_tree_node\"* %11, null\n  br i1 %20, label %21, label %4, !llvm.loop !49\n\n21:                                               ; preds = %18, %2\n  ret void\n}\n\n; Function Attrs: noinline noreturn nounwind\ndefine linkonce_odr hidden void @__clang_call_terminate(i8* %0) local_unnamed_addr #3 comdat {\n  %2 = tail call i8* @__cxa_begin_catch(i8* %0) #13\n  tail call void @_ZSt9terminatev() #17\n  unreachable\n}\n\ndeclare dso_local i8* @__cxa_begin_catch(i8*) local_unnamed_addr\n\ndeclare dso_local void @_ZSt9terminatev() local_unnamed_addr\n\n; Function Attrs: nounwind uwtable\ndefine linkonce_odr dso_local void @_ZNSt8_Rb_treeIiSt4pairIKiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIiESaIS8_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS8_E(%\"class.std::_Rb_tree.7\"* nonnull align 8 dereferenceable(48) %0, %\"struct.std::_Rb_tree_node\"* %1) local_unnamed_addr #2 comdat align 2 personality i32 (...)* @__gxx_personality_v0 {\n  %3 = getelementptr inbounds %\"struct.std::_Rb_tree_node\", %\"struct.std::_Rb_tree_node\"* %1, i64 0, i32 1, i32 0, i64 8\n  %4 = bitcast i8* %3 to i8**\n  %5 = load i8*, i8** %4, align 8, !tbaa !15\n  %6 = getelementptr inbounds %\"struct.std::_Rb_tree_node\", %\"struct.std::_Rb_tree_node\"* %1, i64 0, i32 1, i32 0, i64 24\n  %7 = icmp eq i8* %5, %6\n  br i1 %7, label %9, label %8\n\n8:                                                ; preds = %2\n  tail call void @_ZdlPv(i8* %5) #13\n  br label %9\n\n9:                                                ; preds = %2, %8\n  %10 = bitcast %\"struct.std::_Rb_tree_node\"* %1 to i8*\n  tail call void @_ZdlPv(i8* %10) #13\n  ret void\n}\n\n; Function Attrs: nobuiltin nounwind\ndeclare dso_local void @_ZdlPv(i8*) local_unnamed_addr #4\n\n; Function Attrs: nounwind uwtable\ndefine linkonce_odr dso_local void @_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_iESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EED2Ev(%\"class.std::_Rb_tree\"* nonnull align 8 dereferenceable(48) %0) unnamed_addr #2 comdat align 2 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {\n  %2 = getelementptr inbounds %\"class.std::_Rb_tree\", %\"class.std::_Rb_tree\"* %0, i64 0, i32 0, i32 0, i32 0, i32 0\n  %3 = getelementptr inbounds i8, i8* %2, i64 16\n  %4 = bitcast i8* %3 to %\"struct.std::_Rb_tree_node.21\"**\n  %5 = load %\"struct.std::_Rb_tree_node.21\"*, %\"struct.std::_Rb_tree_node.21\"** %4, align 8, !tbaa !32\n  invoke void @_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_iESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E(%\"class.std::_Rb_tree\"* nonnull align 8 dereferenceable(48) %0, %\"struct.std::_Rb_tree_node.21\"* %5)\n          to label %6 unwind label %7\n\n6:                                                ; preds = %1\n  ret void\n\n7:                                                ; preds = %1\n  %8 = landingpad { i8*, i32 }\n          catch i8* null\n  %9 = extractvalue { i8*, i32 } %8, 0\n  tail call void @__clang_call_terminate(i8* %9) #17\n  unreachable\n}\n\n; Function Attrs: uwtable\ndefine linkonce_odr dso_local void @_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_iESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E(%\"class.std::_Rb_tree\"* nonnull align 8 dereferenceable(48) %0, %\"struct.std::_Rb_tree_node.21\"* %1) local_unnamed_addr #0 comdat align 2 personality i32 (...)* @__gxx_personality_v0 {\n  %3 = icmp eq %\"struct.std::_Rb_tree_node.21\"* %1, null\n  br i1 %3, label %21, label %4\n\n4:                                                ; preds = %2, %18\n  %5 = phi %\"struct.std::_Rb_tree_node.21\"* [ %11, %18 ], [ %1, %2 ]\n  %6 = getelementptr inbounds %\"struct.std::_Rb_tree_node.21\", %\"struct.std::_Rb_tree_node.21\"* %5, i64 0, i32 0, i32 3\n  %7 = bitcast %\"struct.std::_Rb_tree_node_base\"** %6 to %\"struct.std::_Rb_tree_node.21\"**\n  %8 = load %\"struct.std::_Rb_tree_node.21\"*, %\"struct.std::_Rb_tree_node.21\"** %7, align 8, !tbaa !47\n  tail call void @_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_iESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E(%\"class.std::_Rb_tree\"* nonnull align 8 dereferenceable(48) %0, %\"struct.std::_Rb_tree_node.21\"* %8)\n  %9 = getelementptr inbounds %\"struct.std::_Rb_tree_node.21\", %\"struct.std::_Rb_tree_node.21\"* %5, i64 0, i32 0, i32 2\n  %10 = bitcast %\"struct.std::_Rb_tree_node_base\"** %9 to %\"struct.std::_Rb_tree_node.21\"**\n  %11 = load %\"struct.std::_Rb_tree_node.21\"*, %\"struct.std::_Rb_tree_node.21\"** %10, align 8, !tbaa !48\n  %12 = getelementptr inbounds %\"struct.std::_Rb_tree_node.21\", %\"struct.std::_Rb_tree_node.21\"* %5, i64 0, i32 1\n  %13 = bitcast %\"struct.__gnu_cxx::__aligned_membuf.22\"* %12 to i8**\n  %14 = load i8*, i8** %13, align 8, !tbaa !15\n  %15 = getelementptr inbounds %\"struct.std::_Rb_tree_node.21\", %\"struct.std::_Rb_tree_node.21\"* %5, i64 0, i32 1, i32 0, i64 16\n  %16 = icmp eq i8* %14, %15\n  br i1 %16, label %18, label %17\n\n17:                                               ; preds = %4\n  tail call void @_ZdlPv(i8* %14) #13\n  br label %18\n\n18:                                               ; preds = %4, %17\n  %19 = bitcast %\"struct.std::_Rb_tree_node.21\"* %5 to i8*\n  tail call void @_ZdlPv(i8* nonnull %19) #13\n  %20 = icmp eq %\"struct.std::_Rb_tree_node.21\"* %11, null\n  br i1 %20, label %21, label %4, !llvm.loop !50\n\n21:                                               ; preds = %18, %2\n  ret void\n}\n\n; Function Attrs: nounwind uwtable\ndefine linkonce_odr dso_local void @_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_iESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS8_E(%\"class.std::_Rb_tree\"* nonnull align 8 dereferenceable(48) %0, %\"struct.std::_Rb_tree_node.21\"* %1) local_unnamed_addr #2 comdat align 2 personality i32 (...)* @__gxx_personality_v0 {\n  %3 = getelementptr inbounds %\"struct.std::_Rb_tree_node.21\", %\"struct.std::_Rb_tree_node.21\"* %1, i64 0, i32 1\n  %4 = bitcast %\"struct.__gnu_cxx::__aligned_membuf.22\"* %3 to i8**\n  %5 = load i8*, i8** %4, align 8, !tbaa !15\n  %6 = getelementptr inbounds %\"struct.std::_Rb_tree_node.21\", %\"struct.std::_Rb_tree_node.21\"* %1, i64 0, i32 1, i32 0, i64 16\n  %7 = icmp eq i8* %5, %6\n  br i1 %7, label %9, label %8\n\n8:                                                ; preds = %2\n  tail call void @_ZdlPv(i8* %5) #13\n  br label %9\n\n9:                                                ; preds = %2, %8\n  %10 = bitcast %\"struct.std::_Rb_tree_node.21\"* %1 to i8*\n  tail call void @_ZdlPv(i8* %10) #13\n  ret void\n}\n\ndeclare dso_local i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32), i64* nonnull align 8 dereferenceable(8), i64) local_unnamed_addr #5\n\n; Function Attrs: argmemonly mustprogress nofree nounwind willreturn\ndeclare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #6\n\n; Function Attrs: uwtable\ndefine linkonce_odr dso_local { %\"struct.std::_Rb_tree_node_base\"*, %\"struct.std::_Rb_tree_node_base\"* } @_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_iESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS7_(%\"class.std::_Rb_tree\"* nonnull align 8 dereferenceable(48) %0, %\"struct.std::_Rb_tree_node_base\"* %1, %\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %2) local_unnamed_addr #0 comdat align 2 personality i32 (...)* @__gxx_personality_v0 {\n  %4 = getelementptr inbounds %\"class.std::_Rb_tree\", %\"class.std::_Rb_tree\"* %0, i64 0, i32 0, i32 0, i32 0, i32 0\n  %5 = getelementptr inbounds i8, i8* %4, i64 8\n  %6 = bitcast i8* %5 to %\"struct.std::_Rb_tree_node_base\"*\n  %7 = icmp eq %\"struct.std::_Rb_tree_node_base\"* %6, %1\n  br i1 %7, label %8, label %47\n\n8:                                                ; preds = %3\n  %9 = getelementptr inbounds i8, i8* %4, i64 40\n  %10 = bitcast i8* %9 to i64*\n  %11 = load i64, i64* %10, align 8, !tbaa !24\n  %12 = icmp eq i64 %11, 0\n  br i1 %12, label %43, label %13\n\n13:                                               ; preds = %8\n  %14 = getelementptr inbounds i8, i8* %4, i64 32\n  %15 = bitcast i8* %14 to %\"struct.std::_Rb_tree_node_base\"**\n  %16 = load %\"struct.std::_Rb_tree_node_base\"*, %\"struct.std::_Rb_tree_node_base\"** %15, align 8, !tbaa !16\n  %17 = getelementptr inbounds %\"struct.std::_Rb_tree_node_base\", %\"struct.std::_Rb_tree_node_base\"* %16, i64 1, i32 1\n  %18 = bitcast %\"struct.std::_Rb_tree_node_base\"** %17 to i64*\n  %19 = load i64, i64* %18, align 8, !tbaa !8\n  %20 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %2, i64 0, i32 1\n  %21 = load i64, i64* %20, align 8, !tbaa !8\n  %22 = icmp ugt i64 %19, %21\n  %23 = select i1 %22, i64 %21, i64 %19\n  %24 = icmp eq i64 %23, 0\n  br i1 %24, label %33, label %25\n\n25:                                               ; preds = %13\n  %26 = getelementptr inbounds %\"struct.std::_Rb_tree_node_base\", %\"struct.std::_Rb_tree_node_base\"* %16, i64 1\n  %27 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %2, i64 0, i32 0, i32 0\n  %28 = load i8*, i8** %27, align 8, !tbaa !15\n  %29 = bitcast %\"struct.std::_Rb_tree_node_base\"* %26 to i8**\n  %30 = load i8*, i8** %29, align 8, !tbaa !15\n  %31 = tail call i32 @memcmp(i8* %30, i8* %28, i64 %23) #13\n  %32 = icmp eq i32 %31, 0\n  br i1 %32, label %33, label %40\n\n33:                                               ; preds = %25, %13\n  %34 = sub i64 %19, %21\n  %35 = icmp sgt i64 %34, -2147483648\n  %36 = select i1 %35, i64 %34, i64 -2147483648\n  %37 = icmp slt i64 %36, 2147483647\n  %38 = select i1 %37, i64 %36, i64 2147483647\n  %39 = trunc i64 %38 to i32\n  br label %40\n\n40:                                               ; preds = %25, %33\n  %41 = phi i32 [ %31, %25 ], [ %39, %33 ]\n  %42 = icmp slt i32 %41, 0\n  br i1 %42, label %179, label %43\n\n43:                                               ; preds = %40, %8\n  %44 = tail call { %\"struct.std::_Rb_tree_node_base\"*, %\"struct.std::_Rb_tree_node_base\"* } @_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_iESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE24_M_get_insert_unique_posERS7_(%\"class.std::_Rb_tree\"* nonnull align 8 dereferenceable(48) %0, %\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %2)\n  %45 = extractvalue { %\"struct.std::_Rb_tree_node_base\"*, %\"struct.std::_Rb_tree_node_base\"* } %44, 0\n  %46 = extractvalue { %\"struct.std::_Rb_tree_node_base\"*, %\"struct.std::_Rb_tree_node_base\"* } %44, 1\n  br label %179\n\n47:                                               ; preds = %3\n  %48 = getelementptr inbounds %\"struct.std::_Rb_tree_node_base\", %\"struct.std::_Rb_tree_node_base\"* %1, i64 1\n  %49 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %2, i64 0, i32 1\n  %50 = load i64, i64* %49, align 8, !tbaa !8\n  %51 = getelementptr inbounds %\"struct.std::_Rb_tree_node_base\", %\"struct.std::_Rb_tree_node_base\"* %1, i64 1, i32 1\n  %52 = bitcast %\"struct.std::_Rb_tree_node_base\"** %51 to i64*\n  %53 = load i64, i64* %52, align 8, !tbaa !8\n  %54 = icmp ugt i64 %50, %53\n  %55 = select i1 %54, i64 %53, i64 %50\n  %56 = icmp eq i64 %55, 0\n  br i1 %56, label %64, label %57\n\n57:                                               ; preds = %47\n  %58 = bitcast %\"struct.std::_Rb_tree_node_base\"* %48 to i8**\n  %59 = load i8*, i8** %58, align 8, !tbaa !15\n  %60 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %2, i64 0, i32 0, i32 0\n  %61 = load i8*, i8** %60, align 8, !tbaa !15\n  %62 = tail call i32 @memcmp(i8* %61, i8* %59, i64 %55) #13\n  %63 = icmp eq i32 %62, 0\n  br i1 %63, label %64, label %72\n\n64:                                               ; preds = %47, %57\n  %65 = sub i64 %50, %53\n  %66 = icmp sgt i64 %65, -2147483648\n  %67 = select i1 %66, i64 %65, i64 -2147483648\n  %68 = icmp slt i64 %67, 2147483647\n  %69 = select i1 %68, i64 %67, i64 2147483647\n  %70 = trunc i64 %69 to i32\n  %71 = icmp slt i32 %70, 0\n  br i1 %71, label %74, label %116\n\n72:                                               ; preds = %57\n  %73 = icmp slt i32 %62, 0\n  br i1 %73, label %74, label %122\n\n74:                                               ; preds = %72, %64\n  %75 = getelementptr inbounds i8, i8* %4, i64 24\n  %76 = bitcast i8* %75 to %\"struct.std::_Rb_tree_node_base\"**\n  %77 = load %\"struct.std::_Rb_tree_node_base\"*, %\"struct.std::_Rb_tree_node_base\"** %76, align 8, !tbaa !16\n  %78 = icmp eq %\"struct.std::_Rb_tree_node_base\"* %77, %1\n  br i1 %78, label %179, label %79\n\n79:                                               ; preds = %74\n  %80 = tail call %\"struct.std::_Rb_tree_node_base\"* @_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base(%\"struct.std::_Rb_tree_node_base\"* nonnull %1) #14\n  %81 = getelementptr inbounds %\"struct.std::_Rb_tree_node_base\", %\"struct.std::_Rb_tree_node_base\"* %80, i64 1, i32 1\n  %82 = bitcast %\"struct.std::_Rb_tree_node_base\"** %81 to i64*\n  %83 = load i64, i64* %82, align 8, !tbaa !8\n  %84 = icmp ugt i64 %83, %50\n  %85 = select i1 %84, i64 %50, i64 %83\n  %86 = icmp eq i64 %85, 0\n  br i1 %86, label %95, label %87\n\n87:                                               ; preds = %79\n  %88 = getelementptr inbounds %\"struct.std::_Rb_tree_node_base\", %\"struct.std::_Rb_tree_node_base\"* %80, i64 1\n  %89 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %2, i64 0, i32 0, i32 0\n  %90 = load i8*, i8** %89, align 8, !tbaa !15\n  %91 = bitcast %\"struct.std::_Rb_tree_node_base\"* %88 to i8**\n  %92 = load i8*, i8** %91, align 8, !tbaa !15\n  %93 = tail call i32 @memcmp(i8* %92, i8* %90, i64 %85) #13\n  %94 = icmp eq i32 %93, 0\n  br i1 %94, label %95, label %102\n\n95:                                               ; preds = %87, %79\n  %96 = sub i64 %83, %50\n  %97 = icmp sgt i64 %96, -2147483648\n  %98 = select i1 %97, i64 %96, i64 -2147483648\n  %99 = icmp slt i64 %98, 2147483647\n  %100 = select i1 %99, i64 %98, i64 2147483647\n  %101 = trunc i64 %100 to i32\n  br label %102\n\n102:                                              ; preds = %87, %95\n  %103 = phi i32 [ %93, %87 ], [ %101, %95 ]\n  %104 = icmp slt i32 %103, 0\n  br i1 %104, label %105, label %112\n\n105:                                              ; preds = %102\n  %106 = getelementptr inbounds %\"struct.std::_Rb_tree_node_base\", %\"struct.std::_Rb_tree_node_base\"* %80, i64 0, i32 3\n  %107 = bitcast %\"struct.std::_Rb_tree_node_base\"** %106 to %\"struct.std::_Rb_tree_node.21\"**\n  %108 = load %\"struct.std::_Rb_tree_node.21\"*, %\"struct.std::_Rb_tree_node.21\"** %107, align 8, !tbaa !47\n  %109 = icmp eq %\"struct.std::_Rb_tree_node.21\"* %108, null\n  %110 = select i1 %109, %\"struct.std::_Rb_tree_node_base\"* null, %\"struct.std::_Rb_tree_node_base\"* %1\n  %111 = select i1 %109, %\"struct.std::_Rb_tree_node_base\"* %80, %\"struct.std::_Rb_tree_node_base\"* %1\n  br label %179\n\n112:                                              ; preds = %102\n  %113 = tail call { %\"struct.std::_Rb_tree_node_base\"*, %\"struct.std::_Rb_tree_node_base\"* } @_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_iESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE24_M_get_insert_unique_posERS7_(%\"class.std::_Rb_tree\"* nonnull align 8 dereferenceable(48) %0, %\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %2)\n  %114 = extractvalue { %\"struct.std::_Rb_tree_node_base\"*, %\"struct.std::_Rb_tree_node_base\"* } %113, 0\n  %115 = extractvalue { %\"struct.std::_Rb_tree_node_base\"*, %\"struct.std::_Rb_tree_node_base\"* } %113, 1\n  br label %179\n\n116:                                              ; preds = %64\n  br i1 %56, label %127, label %117\n\n117:                                              ; preds = %116\n  %118 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %2, i64 0, i32 0, i32 0\n  %119 = load i8*, i8** %118, align 8, !tbaa !15\n  %120 = bitcast %\"struct.std::_Rb_tree_node_base\"* %48 to i8**\n  %121 = load i8*, i8** %120, align 8, !tbaa !15\n  br label %122\n\n122:                                              ; preds = %117, %72\n  %123 = phi i8* [ %121, %117 ], [ %59, %72 ]\n  %124 = phi i8* [ %119, %117 ], [ %61, %72 ]\n  %125 = tail call i32 @memcmp(i8* %123, i8* %124, i64 %55) #13\n  %126 = icmp eq i32 %125, 0\n  br i1 %126, label %127, label %134\n\n127:                                              ; preds = %122, %116\n  %128 = sub i64 %53, %50\n  %129 = icmp sgt i64 %128, -2147483648\n  %130 = select i1 %129, i64 %128, i64 -2147483648\n  %131 = icmp slt i64 %130, 2147483647\n  %132 = select i1 %131, i64 %130, i64 2147483647\n  %133 = trunc i64 %132 to i32\n  br label %134\n\n134:                                              ; preds = %122, %127\n  %135 = phi i32 [ %125, %122 ], [ %133, %127 ]\n  %136 = icmp slt i32 %135, 0\n  br i1 %136, label %137, label %179\n\n137:                                              ; preds = %134\n  %138 = getelementptr inbounds i8, i8* %4, i64 32\n  %139 = bitcast i8* %138 to %\"struct.std::_Rb_tree_node_base\"**\n  %140 = load %\"struct.std::_Rb_tree_node_base\"*, %\"struct.std::_Rb_tree_node_base\"** %139, align 8, !tbaa !16\n  %141 = icmp eq %\"struct.std::_Rb_tree_node_base\"* %140, %1\n  br i1 %141, label %179, label %142\n\n142:                                              ; preds = %137\n  %143 = tail call %\"struct.std::_Rb_tree_node_base\"* @_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base(%\"struct.std::_Rb_tree_node_base\"* nonnull %1) #14\n  %144 = getelementptr inbounds %\"struct.std::_Rb_tree_node_base\", %\"struct.std::_Rb_tree_node_base\"* %143, i64 1, i32 1\n  %145 = bitcast %\"struct.std::_Rb_tree_node_base\"** %144 to i64*\n  %146 = load i64, i64* %145, align 8, !tbaa !8\n  %147 = icmp ugt i64 %50, %146\n  %148 = select i1 %147, i64 %146, i64 %50\n  %149 = icmp eq i64 %148, 0\n  br i1 %149, label %158, label %150\n\n150:                                              ; preds = %142\n  %151 = getelementptr inbounds %\"struct.std::_Rb_tree_node_base\", %\"struct.std::_Rb_tree_node_base\"* %143, i64 1\n  %152 = bitcast %\"struct.std::_Rb_tree_node_base\"* %151 to i8**\n  %153 = load i8*, i8** %152, align 8, !tbaa !15\n  %154 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %2, i64 0, i32 0, i32 0\n  %155 = load i8*, i8** %154, align 8, !tbaa !15\n  %156 = tail call i32 @memcmp(i8* %155, i8* %153, i64 %148) #13\n  %157 = icmp eq i32 %156, 0\n  br i1 %157, label %158, label %165\n\n158:                                              ; preds = %150, %142\n  %159 = sub i64 %50, %146\n  %160 = icmp sgt i64 %159, -2147483648\n  %161 = select i1 %160, i64 %159, i64 -2147483648\n  %162 = icmp slt i64 %161, 2147483647\n  %163 = select i1 %162, i64 %161, i64 2147483647\n  %164 = trunc i64 %163 to i32\n  br label %165\n\n165:                                              ; preds = %150, %158\n  %166 = phi i32 [ %156, %150 ], [ %164, %158 ]\n  %167 = icmp slt i32 %166, 0\n  br i1 %167, label %168, label %175\n\n168:                                              ; preds = %165\n  %169 = getelementptr inbounds %\"struct.std::_Rb_tree_node_base\", %\"struct.std::_Rb_tree_node_base\"* %1, i64 0, i32 3\n  %170 = bitcast %\"struct.std::_Rb_tree_node_base\"** %169 to %\"struct.std::_Rb_tree_node.21\"**\n  %171 = load %\"struct.std::_Rb_tree_node.21\"*, %\"struct.std::_Rb_tree_node.21\"** %170, align 8, !tbaa !47\n  %172 = icmp eq %\"struct.std::_Rb_tree_node.21\"* %171, null\n  %173 = select i1 %172, %\"struct.std::_Rb_tree_node_base\"* null, %\"struct.std::_Rb_tree_node_base\"* %143\n  %174 = select i1 %172, %\"struct.std::_Rb_tree_node_base\"* %1, %\"struct.std::_Rb_tree_node_base\"* %143\n  br label %179\n\n175:                                              ; preds = %165\n  %176 = tail call { %\"struct.std::_Rb_tree_node_base\"*, %\"struct.std::_Rb_tree_node_base\"* } @_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_iESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE24_M_get_insert_unique_posERS7_(%\"class.std::_Rb_tree\"* nonnull align 8 dereferenceable(48) %0, %\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %2)\n  %177 = extractvalue { %\"struct.std::_Rb_tree_node_base\"*, %\"struct.std::_Rb_tree_node_base\"* } %176, 0\n  %178 = extractvalue { %\"struct.std::_Rb_tree_node_base\"*, %\"struct.std::_Rb_tree_node_base\"* } %176, 1\n  br label %179\n\n179:                                              ; preds = %168, %105, %134, %175, %137, %112, %74, %40, %43\n  %180 = phi %\"struct.std::_Rb_tree_node_base\"* [ %45, %43 ], [ null, %40 ], [ %114, %112 ], [ %1, %74 ], [ %177, %175 ], [ null, %137 ], [ %1, %134 ], [ %110, %105 ], [ %173, %168 ]\n  %181 = phi %\"struct.std::_Rb_tree_node_base\"* [ %46, %43 ], [ %16, %40 ], [ %115, %112 ], [ %1, %74 ], [ %178, %175 ], [ %1, %137 ], [ null, %134 ], [ %111, %105 ], [ %174, %168 ]\n  %182 = insertvalue { %\"struct.std::_Rb_tree_node_base\"*, %\"struct.std::_Rb_tree_node_base\"* } undef, %\"struct.std::_Rb_tree_node_base\"* %180, 0\n  %183 = insertvalue { %\"struct.std::_Rb_tree_node_base\"*, %\"struct.std::_Rb_tree_node_base\"* } %182, %\"struct.std::_Rb_tree_node_base\"* %181, 1\n  ret { %\"struct.std::_Rb_tree_node_base\"*, %\"struct.std::_Rb_tree_node_base\"* } %183\n}\n\n; Function Attrs: uwtable\ndefine linkonce_odr dso_local %\"struct.std::_Rb_tree_node_base\"* @_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_iESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE10_M_insert_IRKS8_NSE_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS8_EPSt18_Rb_tree_node_baseSM_OT_RT0_(%\"class.std::_Rb_tree\"* nonnull align 8 dereferenceable(48) %0, %\"struct.std::_Rb_tree_node_base\"* %1, %\"struct.std::_Rb_tree_node_base\"* %2, %\"struct.std::pair\"* nonnull align 8 dereferenceable(36) %3, %\"struct.std::_Rb_tree<std::__cxx11::basic_string<char>, std::pair<const std::__cxx11::basic_string<char>, int>, std::_Select1st<std::pair<const std::__cxx11::basic_string<char>, int>>, std::less<std::__cxx11::basic_string<char>>>::_Alloc_node\"* nonnull align 8 dereferenceable(8) %4) local_unnamed_addr #0 comdat align 2 personality i32 (...)* @__gxx_personality_v0 {\n  %6 = icmp eq %\"struct.std::_Rb_tree_node_base\"* %1, null\n  br i1 %6, label %7, label %39\n\n7:                                                ; preds = %5\n  %8 = getelementptr inbounds %\"class.std::_Rb_tree\", %\"class.std::_Rb_tree\"* %0, i64 0, i32 0, i32 0, i32 0, i32 0\n  %9 = getelementptr inbounds i8, i8* %8, i64 8\n  %10 = bitcast i8* %9 to %\"struct.std::_Rb_tree_node_base\"*\n  %11 = icmp eq %\"struct.std::_Rb_tree_node_base\"* %10, %2\n  br i1 %11, label %39, label %12\n\n12:                                               ; preds = %7\n  %13 = getelementptr inbounds %\"struct.std::pair\", %\"struct.std::pair\"* %3, i64 0, i32 0, i32 1\n  %14 = load i64, i64* %13, align 8, !tbaa !8\n  %15 = getelementptr inbounds %\"struct.std::_Rb_tree_node_base\", %\"struct.std::_Rb_tree_node_base\"* %2, i64 1, i32 1\n  %16 = bitcast %\"struct.std::_Rb_tree_node_base\"** %15 to i64*\n  %17 = load i64, i64* %16, align 8, !tbaa !8\n  %18 = icmp ugt i64 %14, %17\n  %19 = select i1 %18, i64 %17, i64 %14\n  %20 = icmp eq i64 %19, 0\n  br i1 %20, label %29, label %21\n\n21:                                               ; preds = %12\n  %22 = getelementptr inbounds %\"struct.std::_Rb_tree_node_base\", %\"struct.std::_Rb_tree_node_base\"* %2, i64 1\n  %23 = bitcast %\"struct.std::_Rb_tree_node_base\"* %22 to i8**\n  %24 = load i8*, i8** %23, align 8, !tbaa !15\n  %25 = getelementptr inbounds %\"struct.std::pair\", %\"struct.std::pair\"* %3, i64 0, i32 0, i32 0, i32 0\n  %26 = load i8*, i8** %25, align 8, !tbaa !15\n  %27 = tail call i32 @memcmp(i8* %26, i8* %24, i64 %19) #13\n  %28 = icmp eq i32 %27, 0\n  br i1 %28, label %29, label %36\n\n29:                                               ; preds = %21, %12\n  %30 = sub i64 %14, %17\n  %31 = icmp sgt i64 %30, -2147483648\n  %32 = select i1 %31, i64 %30, i64 -2147483648\n  %33 = icmp slt i64 %32, 2147483647\n  %34 = select i1 %33, i64 %32, i64 2147483647\n  %35 = trunc i64 %34 to i32\n  br label %36\n\n36:                                               ; preds = %21, %29\n  %37 = phi i32 [ %27, %21 ], [ %35, %29 ]\n  %38 = icmp slt i32 %37, 0\n  br label %39\n\n39:                                               ; preds = %5, %36, %7\n  %40 = phi i1 [ true, %7 ], [ %38, %36 ], [ true, %5 ]\n  %41 = getelementptr inbounds %\"struct.std::_Rb_tree<std::__cxx11::basic_string<char>, std::pair<const std::__cxx11::basic_string<char>, int>, std::_Select1st<std::pair<const std::__cxx11::basic_string<char>, int>>, std::less<std::__cxx11::basic_string<char>>>::_Alloc_node\", %\"struct.std::_Rb_tree<std::__cxx11::basic_string<char>, std::pair<const std::__cxx11::basic_string<char>, int>, std::_Select1st<std::pair<const std::__cxx11::basic_string<char>, int>>, std::less<std::__cxx11::basic_string<char>>>::_Alloc_node\"* %4, i64 0, i32 0\n  %42 = load %\"class.std::_Rb_tree\"*, %\"class.std::_Rb_tree\"** %41, align 8, !tbaa !51\n  %43 = tail call noalias nonnull i8* @_Znwm(i64 72) #15\n  %44 = bitcast i8* %43 to %\"struct.std::_Rb_tree_node.21\"*\n  tail call void @_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_iESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE17_M_construct_nodeIJRKS8_EEEvPSt13_Rb_tree_nodeIS8_EDpOT_(%\"class.std::_Rb_tree\"* nonnull align 8 dereferenceable(48) %42, %\"struct.std::_Rb_tree_node.21\"* nonnull %44, %\"struct.std::pair\"* nonnull align 8 dereferenceable(36) %3)\n  %45 = bitcast i8* %43 to %\"struct.std::_Rb_tree_node_base\"*\n  %46 = getelementptr inbounds %\"class.std::_Rb_tree\", %\"class.std::_Rb_tree\"* %0, i64 0, i32 0, i32 0, i32 0, i32 0\n  %47 = getelementptr inbounds i8, i8* %46, i64 8\n  %48 = bitcast i8* %47 to %\"struct.std::_Rb_tree_node_base\"*\n  tail call void @_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_(i1 zeroext %40, %\"struct.std::_Rb_tree_node_base\"* nonnull %45, %\"struct.std::_Rb_tree_node_base\"* %2, %\"struct.std::_Rb_tree_node_base\"* nonnull align 8 dereferenceable(32) %48) #13\n  %49 = getelementptr inbounds i8, i8* %46, i64 40\n  %50 = bitcast i8* %49 to i64*\n  %51 = load i64, i64* %50, align 8, !tbaa !24\n  %52 = add i64 %51, 1\n  store i64 %52, i64* %50, align 8, !tbaa !24\n  ret %\"struct.std::_Rb_tree_node_base\"* %45\n}\n\n; Function Attrs: uwtable\ndefine linkonce_odr dso_local { %\"struct.std::_Rb_tree_node_base\"*, %\"struct.std::_Rb_tree_node_base\"* } @_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_iESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE24_M_get_insert_unique_posERS7_(%\"class.std::_Rb_tree\"* nonnull align 8 dereferenceable(48) %0, %\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %1) local_unnamed_addr #0 comdat align 2 personality i32 (...)* @__gxx_personality_v0 {\n  %3 = getelementptr inbounds %\"class.std::_Rb_tree\", %\"class.std::_Rb_tree\"* %0, i64 0, i32 0, i32 0, i32 0, i32 0\n  %4 = getelementptr inbounds i8, i8* %3, i64 16\n  %5 = bitcast i8* %4 to %\"struct.std::_Rb_tree_node.21\"**\n  %6 = getelementptr inbounds i8, i8* %3, i64 8\n  %7 = bitcast i8* %6 to %\"struct.std::_Rb_tree_node_base\"*\n  %8 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %1, i64 0, i32 1\n  %9 = load i64, i64* %8, align 8\n  %10 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %1, i64 0, i32 0, i32 0\n  %11 = load i8*, i8** %10, align 8\n  %12 = load %\"struct.std::_Rb_tree_node.21\"*, %\"struct.std::_Rb_tree_node.21\"** %5, align 8, !tbaa !16\n  %13 = icmp eq %\"struct.std::_Rb_tree_node.21\"* %12, null\n  br i1 %13, label %46, label %14\n\n14:                                               ; preds = %2, %35\n  %15 = phi %\"struct.std::_Rb_tree_node.21\"* [ %42, %35 ], [ %12, %2 ]\n  %16 = getelementptr inbounds %\"struct.std::_Rb_tree_node.21\", %\"struct.std::_Rb_tree_node.21\"* %15, i64 0, i32 1, i32 0, i64 8\n  %17 = bitcast i8* %16 to i64*\n  %18 = load i64, i64* %17, align 8, !tbaa !8\n  %19 = icmp ugt i64 %9, %18\n  %20 = select i1 %19, i64 %18, i64 %9\n  %21 = icmp eq i64 %20, 0\n  br i1 %21, label %28, label %22\n\n22:                                               ; preds = %14\n  %23 = getelementptr inbounds %\"struct.std::_Rb_tree_node.21\", %\"struct.std::_Rb_tree_node.21\"* %15, i64 0, i32 1\n  %24 = bitcast %\"struct.__gnu_cxx::__aligned_membuf.22\"* %23 to i8**\n  %25 = load i8*, i8** %24, align 8, !tbaa !15\n  %26 = tail call i32 @memcmp(i8* %11, i8* %25, i64 %20) #13\n  %27 = icmp eq i32 %26, 0\n  br i1 %27, label %28, label %35\n\n28:                                               ; preds = %22, %14\n  %29 = sub i64 %9, %18\n  %30 = icmp sgt i64 %29, -2147483648\n  %31 = select i1 %30, i64 %29, i64 -2147483648\n  %32 = icmp slt i64 %31, 2147483647\n  %33 = select i1 %32, i64 %31, i64 2147483647\n  %34 = trunc i64 %33 to i32\n  br label %35\n\n35:                                               ; preds = %22, %28\n  %36 = phi i32 [ %26, %22 ], [ %34, %28 ]\n  %37 = icmp slt i32 %36, 0\n  %38 = getelementptr inbounds %\"struct.std::_Rb_tree_node.21\", %\"struct.std::_Rb_tree_node.21\"* %15, i64 0, i32 0, i32 2\n  %39 = getelementptr inbounds %\"struct.std::_Rb_tree_node.21\", %\"struct.std::_Rb_tree_node.21\"* %15, i64 0, i32 0, i32 3\n  %40 = select i1 %37, %\"struct.std::_Rb_tree_node_base\"** %38, %\"struct.std::_Rb_tree_node_base\"** %39\n  %41 = bitcast %\"struct.std::_Rb_tree_node_base\"** %40 to %\"struct.std::_Rb_tree_node.21\"**\n  %42 = load %\"struct.std::_Rb_tree_node.21\"*, %\"struct.std::_Rb_tree_node.21\"** %41, align 8, !tbaa !16\n  %43 = icmp eq %\"struct.std::_Rb_tree_node.21\"* %42, null\n  br i1 %43, label %44, label %14, !llvm.loop !53\n\n44:                                               ; preds = %35\n  %45 = getelementptr %\"struct.std::_Rb_tree_node.21\", %\"struct.std::_Rb_tree_node.21\"* %15, i64 0, i32 0\n  br i1 %37, label %46, label %54\n\n46:                                               ; preds = %2, %44\n  %47 = phi %\"struct.std::_Rb_tree_node_base\"* [ %45, %44 ], [ %7, %2 ]\n  %48 = getelementptr inbounds i8, i8* %3, i64 24\n  %49 = bitcast i8* %48 to %\"struct.std::_Rb_tree_node_base\"**\n  %50 = load %\"struct.std::_Rb_tree_node_base\"*, %\"struct.std::_Rb_tree_node_base\"** %49, align 8, !tbaa !20\n  %51 = icmp eq %\"struct.std::_Rb_tree_node_base\"* %47, %50\n  br i1 %51, label %81, label %52\n\n52:                                               ; preds = %46\n  %53 = tail call %\"struct.std::_Rb_tree_node_base\"* @_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base(%\"struct.std::_Rb_tree_node_base\"* %47) #14\n  br label %54\n\n54:                                               ; preds = %52, %44\n  %55 = phi %\"struct.std::_Rb_tree_node_base\"* [ %47, %52 ], [ %45, %44 ]\n  %56 = phi %\"struct.std::_Rb_tree_node_base\"* [ %53, %52 ], [ %45, %44 ]\n  %57 = getelementptr inbounds %\"struct.std::_Rb_tree_node_base\", %\"struct.std::_Rb_tree_node_base\"* %56, i64 1, i32 1\n  %58 = bitcast %\"struct.std::_Rb_tree_node_base\"** %57 to i64*\n  %59 = load i64, i64* %58, align 8, !tbaa !8\n  %60 = icmp ugt i64 %59, %9\n  %61 = select i1 %60, i64 %9, i64 %59\n  %62 = icmp eq i64 %61, 0\n  br i1 %62, label %69, label %63\n\n63:                                               ; preds = %54\n  %64 = getelementptr inbounds %\"struct.std::_Rb_tree_node_base\", %\"struct.std::_Rb_tree_node_base\"* %56, i64 1\n  %65 = bitcast %\"struct.std::_Rb_tree_node_base\"* %64 to i8**\n  %66 = load i8*, i8** %65, align 8, !tbaa !15\n  %67 = tail call i32 @memcmp(i8* %66, i8* %11, i64 %61) #13\n  %68 = icmp eq i32 %67, 0\n  br i1 %68, label %69, label %76\n\n69:                                               ; preds = %63, %54\n  %70 = sub i64 %59, %9\n  %71 = icmp sgt i64 %70, -2147483648\n  %72 = select i1 %71, i64 %70, i64 -2147483648\n  %73 = icmp slt i64 %72, 2147483647\n  %74 = select i1 %73, i64 %72, i64 2147483647\n  %75 = trunc i64 %74 to i32\n  br label %76\n\n76:                                               ; preds = %63, %69\n  %77 = phi i32 [ %67, %63 ], [ %75, %69 ]\n  %78 = icmp slt i32 %77, 0\n  %79 = select i1 %78, %\"struct.std::_Rb_tree_node_base\"* null, %\"struct.std::_Rb_tree_node_base\"* %56\n  %80 = select i1 %78, %\"struct.std::_Rb_tree_node_base\"* %55, %\"struct.std::_Rb_tree_node_base\"* null\n  br label %81\n\n81:                                               ; preds = %46, %76\n  %82 = phi %\"struct.std::_Rb_tree_node_base\"* [ %79, %76 ], [ null, %46 ]\n  %83 = phi %\"struct.std::_Rb_tree_node_base\"* [ %80, %76 ], [ %47, %46 ]\n  %84 = insertvalue { %\"struct.std::_Rb_tree_node_base\"*, %\"struct.std::_Rb_tree_node_base\"* } undef, %\"struct.std::_Rb_tree_node_base\"* %82, 0\n  %85 = insertvalue { %\"struct.std::_Rb_tree_node_base\"*, %\"struct.std::_Rb_tree_node_base\"* } %84, %\"struct.std::_Rb_tree_node_base\"* %83, 1\n  ret { %\"struct.std::_Rb_tree_node_base\"*, %\"struct.std::_Rb_tree_node_base\"* } %85\n}\n\n; Function Attrs: argmemonly mustprogress nofree nounwind readonly willreturn\ndeclare dso_local i32 @memcmp(i8* nocapture, i8* nocapture, i64) local_unnamed_addr #7\n\n; Function Attrs: mustprogress nofree nounwind readonly willreturn\ndeclare dso_local %\"struct.std::_Rb_tree_node_base\"* @_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base(%\"struct.std::_Rb_tree_node_base\"*) local_unnamed_addr #8\n\n; Function Attrs: mustprogress nofree nounwind readonly willreturn\ndeclare dso_local %\"struct.std::_Rb_tree_node_base\"* @_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base(%\"struct.std::_Rb_tree_node_base\"*) local_unnamed_addr #8\n\n; Function Attrs: nounwind\ndeclare dso_local void @_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_(i1 zeroext, %\"struct.std::_Rb_tree_node_base\"*, %\"struct.std::_Rb_tree_node_base\"*, %\"struct.std::_Rb_tree_node_base\"* nonnull align 8 dereferenceable(32)) local_unnamed_addr #9\n\n; Function Attrs: uwtable\ndefine linkonce_odr dso_local void @_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_iESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE17_M_construct_nodeIJRKS8_EEEvPSt13_Rb_tree_nodeIS8_EDpOT_(%\"class.std::_Rb_tree\"* nonnull align 8 dereferenceable(48) %0, %\"struct.std::_Rb_tree_node.21\"* %1, %\"struct.std::pair\"* nonnull align 8 dereferenceable(36) %2) local_unnamed_addr #0 comdat align 2 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {\n  %4 = alloca i64, align 8\n  %5 = getelementptr inbounds %\"struct.std::_Rb_tree_node.21\", %\"struct.std::_Rb_tree_node.21\"* %1, i64 0, i32 1\n  %6 = getelementptr inbounds %\"struct.std::_Rb_tree_node.21\", %\"struct.std::_Rb_tree_node.21\"* %1, i64 0, i32 1, i32 0, i64 16\n  %7 = bitcast %\"struct.__gnu_cxx::__aligned_membuf.22\"* %5 to i8**\n  store i8* %6, i8** %7, align 8, !tbaa !3\n  %8 = getelementptr inbounds %\"struct.std::pair\", %\"struct.std::pair\"* %2, i64 0, i32 0, i32 0, i32 0\n  %9 = load i8*, i8** %8, align 8, !tbaa !15\n  %10 = getelementptr inbounds %\"struct.std::pair\", %\"struct.std::pair\"* %2, i64 0, i32 0, i32 1\n  %11 = load i64, i64* %10, align 8, !tbaa !8\n  %12 = bitcast i64* %4 to i8*\n  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %12) #13\n  store i64 %11, i64* %4, align 8, !tbaa !29\n  %13 = icmp ugt i64 %11, 15\n  br i1 %13, label %14, label %20\n\n14:                                               ; preds = %3\n  %15 = bitcast %\"struct.__gnu_cxx::__aligned_membuf.22\"* %5 to %\"class.std::__cxx11::basic_string\"*\n  %16 = invoke i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %15, i64* nonnull align 8 dereferenceable(8) %4, i64 0)\n          to label %17 unwind label %25\n\n17:                                               ; preds = %14\n  store i8* %16, i8** %7, align 8, !tbaa !15\n  %18 = load i64, i64* %4, align 8, !tbaa !29\n  %19 = bitcast i8* %6 to i64*\n  store i64 %18, i64* %19, align 8, !tbaa !11\n  br label %20\n\n20:                                               ; preds = %3, %17\n  %21 = phi i8* [ %16, %17 ], [ %6, %3 ]\n  switch i64 %11, label %24 [\n    i64 1, label %22\n    i64 0, label %32\n  ]\n\n22:                                               ; preds = %20\n  %23 = load i8, i8* %9, align 1, !tbaa !11\n  store i8 %23, i8* %21, align 1, !tbaa !11\n  br label %32\n\n24:                                               ; preds = %20\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %21, i8* align 1 %9, i64 %11, i1 false) #13\n  br label %32\n\n25:                                               ; preds = %14\n  %26 = landingpad { i8*, i32 }\n          catch i8* null\n  %27 = extractvalue { i8*, i32 } %26, 0\n  %28 = call i8* @__cxa_begin_catch(i8* %27) #13\n  %29 = bitcast %\"struct.std::_Rb_tree_node.21\"* %1 to i8*\n  call void @_ZdlPv(i8* %29) #13\n  invoke void @__cxa_rethrow() #16\n          to label %46 unwind label %30\n\n30:                                               ; preds = %25\n  %31 = landingpad { i8*, i32 }\n          cleanup\n  invoke void @__cxa_end_catch()\n          to label %42 unwind label %43\n\n32:                                               ; preds = %24, %22, %20\n  %33 = load i64, i64* %4, align 8, !tbaa !29\n  %34 = getelementptr inbounds %\"struct.std::_Rb_tree_node.21\", %\"struct.std::_Rb_tree_node.21\"* %1, i64 0, i32 1, i32 0, i64 8\n  %35 = bitcast i8* %34 to i64*\n  store i64 %33, i64* %35, align 8, !tbaa !8\n  %36 = load i8*, i8** %7, align 8, !tbaa !15\n  %37 = getelementptr inbounds i8, i8* %36, i64 %33\n  store i8 0, i8* %37, align 1, !tbaa !11\n  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %12) #13\n  %38 = getelementptr inbounds %\"struct.std::_Rb_tree_node.21\", %\"struct.std::_Rb_tree_node.21\"* %1, i64 0, i32 1, i32 0, i64 32\n  %39 = bitcast i8* %38 to i32*\n  %40 = getelementptr inbounds %\"struct.std::pair\", %\"struct.std::pair\"* %2, i64 0, i32 1\n  %41 = load i32, i32* %40, align 8, !tbaa !12\n  store i32 %41, i32* %39, align 8, !tbaa !12\n  ret void\n\n42:                                               ; preds = %30\n  resume { i8*, i32 } %31\n\n43:                                               ; preds = %30\n  %44 = landingpad { i8*, i32 }\n          catch i8* null\n  %45 = extractvalue { i8*, i32 } %44, 0\n  call void @__clang_call_terminate(i8* %45) #17\n  unreachable\n\n46:                                               ; preds = %25\n  unreachable\n}\n\n; Function Attrs: nobuiltin allocsize(0)\ndeclare dso_local nonnull i8* @_Znwm(i64) local_unnamed_addr #10\n\ndeclare dso_local void @__cxa_rethrow() local_unnamed_addr\n\ndeclare dso_local void @__cxa_end_catch() local_unnamed_addr\n\n; Function Attrs: uwtable\ndefine linkonce_odr dso_local { %\"struct.std::_Rb_tree_node_base\"*, %\"struct.std::_Rb_tree_node_base\"* } @_ZNSt8_Rb_treeIiSt4pairIKiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIiESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS1_(%\"class.std::_Rb_tree.7\"* nonnull align 8 dereferenceable(48) %0, %\"struct.std::_Rb_tree_node_base\"* %1, i32* nonnull align 4 dereferenceable(4) %2) local_unnamed_addr #0 comdat align 2 {\n  %4 = getelementptr inbounds %\"class.std::_Rb_tree.7\", %\"class.std::_Rb_tree.7\"* %0, i64 0, i32 0, i32 0, i32 0, i32 0\n  %5 = getelementptr inbounds i8, i8* %4, i64 8\n  %6 = bitcast i8* %5 to %\"struct.std::_Rb_tree_node_base\"*\n  %7 = icmp eq %\"struct.std::_Rb_tree_node_base\"* %6, %1\n  br i1 %7, label %8, label %59\n\n8:                                                ; preds = %3\n  %9 = getelementptr inbounds i8, i8* %4, i64 40\n  %10 = bitcast i8* %9 to i64*\n  %11 = load i64, i64* %10, align 8, !tbaa !24\n  %12 = icmp eq i64 %11, 0\n  br i1 %12, label %13, label %15\n\n13:                                               ; preds = %8\n  %14 = load i32, i32* %2, align 4\n  br label %23\n\n15:                                               ; preds = %8\n  %16 = getelementptr inbounds i8, i8* %4, i64 32\n  %17 = bitcast i8* %16 to %\"struct.std::_Rb_tree_node_base\"**\n  %18 = load %\"struct.std::_Rb_tree_node_base\"*, %\"struct.std::_Rb_tree_node_base\"** %17, align 8, !tbaa !16\n  %19 = getelementptr inbounds %\"struct.std::_Rb_tree_node_base\", %\"struct.std::_Rb_tree_node_base\"* %18, i64 1, i32 0\n  %20 = load i32, i32* %19, align 4, !tbaa !17\n  %21 = load i32, i32* %2, align 4, !tbaa !17\n  %22 = icmp slt i32 %20, %21\n  br i1 %22, label %167, label %23\n\n23:                                               ; preds = %13, %15\n  %24 = phi i32 [ %14, %13 ], [ %21, %15 ]\n  %25 = getelementptr inbounds i8, i8* %4, i64 16\n  %26 = bitcast i8* %25 to %\"struct.std::_Rb_tree_node\"**\n  %27 = load %\"struct.std::_Rb_tree_node\"*, %\"struct.std::_Rb_tree_node\"** %26, align 8, !tbaa !16\n  %28 = icmp eq %\"struct.std::_Rb_tree_node\"* %27, null\n  br i1 %28, label %43, label %29\n\n29:                                               ; preds = %23, %29\n  %30 = phi %\"struct.std::_Rb_tree_node\"* [ %39, %29 ], [ %27, %23 ]\n  %31 = getelementptr inbounds %\"struct.std::_Rb_tree_node\", %\"struct.std::_Rb_tree_node\"* %30, i64 0, i32 1\n  %32 = bitcast %\"struct.__gnu_cxx::__aligned_membuf\"* %31 to i32*\n  %33 = load i32, i32* %32, align 4, !tbaa !17\n  %34 = icmp slt i32 %24, %33\n  %35 = getelementptr inbounds %\"struct.std::_Rb_tree_node\", %\"struct.std::_Rb_tree_node\"* %30, i64 0, i32 0, i32 2\n  %36 = getelementptr inbounds %\"struct.std::_Rb_tree_node\", %\"struct.std::_Rb_tree_node\"* %30, i64 0, i32 0, i32 3\n  %37 = select i1 %34, %\"struct.std::_Rb_tree_node_base\"** %35, %\"struct.std::_Rb_tree_node_base\"** %36\n  %38 = bitcast %\"struct.std::_Rb_tree_node_base\"** %37 to %\"struct.std::_Rb_tree_node\"**\n  %39 = load %\"struct.std::_Rb_tree_node\"*, %\"struct.std::_Rb_tree_node\"** %38, align 8, !tbaa !16\n  %40 = icmp eq %\"struct.std::_Rb_tree_node\"* %39, null\n  br i1 %40, label %41, label %29, !llvm.loop !18\n\n41:                                               ; preds = %29\n  %42 = getelementptr %\"struct.std::_Rb_tree_node\", %\"struct.std::_Rb_tree_node\"* %30, i64 0, i32 0\n  br i1 %34, label %43, label %51\n\n43:                                               ; preds = %41, %23\n  %44 = phi %\"struct.std::_Rb_tree_node_base\"* [ %42, %41 ], [ %1, %23 ]\n  %45 = getelementptr inbounds i8, i8* %4, i64 24\n  %46 = bitcast i8* %45 to %\"struct.std::_Rb_tree_node_base\"**\n  %47 = load %\"struct.std::_Rb_tree_node_base\"*, %\"struct.std::_Rb_tree_node_base\"** %46, align 8, !tbaa !20\n  %48 = icmp eq %\"struct.std::_Rb_tree_node_base\"* %44, %47\n  br i1 %48, label %167, label %49\n\n49:                                               ; preds = %43\n  %50 = tail call %\"struct.std::_Rb_tree_node_base\"* @_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base(%\"struct.std::_Rb_tree_node_base\"* %44) #14\n  br label %51\n\n51:                                               ; preds = %49, %41\n  %52 = phi %\"struct.std::_Rb_tree_node_base\"* [ %44, %49 ], [ %42, %41 ]\n  %53 = phi %\"struct.std::_Rb_tree_node_base\"* [ %50, %49 ], [ %42, %41 ]\n  %54 = getelementptr inbounds %\"struct.std::_Rb_tree_node_base\", %\"struct.std::_Rb_tree_node_base\"* %53, i64 1, i32 0\n  %55 = load i32, i32* %54, align 4, !tbaa !17\n  %56 = icmp slt i32 %55, %24\n  %57 = select i1 %56, %\"struct.std::_Rb_tree_node_base\"* null, %\"struct.std::_Rb_tree_node_base\"* %53\n  %58 = select i1 %56, %\"struct.std::_Rb_tree_node_base\"* %52, %\"struct.std::_Rb_tree_node_base\"* null\n  br label %167\n\n59:                                               ; preds = %3\n  %60 = getelementptr inbounds %\"struct.std::_Rb_tree_node_base\", %\"struct.std::_Rb_tree_node_base\"* %1, i64 1, i32 0\n  %61 = load i32, i32* %2, align 4, !tbaa !17\n  %62 = load i32, i32* %60, align 4, !tbaa !17\n  %63 = icmp slt i32 %61, %62\n  br i1 %63, label %64, label %113\n\n64:                                               ; preds = %59\n  %65 = getelementptr inbounds i8, i8* %4, i64 24\n  %66 = bitcast i8* %65 to %\"struct.std::_Rb_tree_node_base\"**\n  %67 = load %\"struct.std::_Rb_tree_node_base\"*, %\"struct.std::_Rb_tree_node_base\"** %66, align 8, !tbaa !16\n  %68 = icmp eq %\"struct.std::_Rb_tree_node_base\"* %67, %1\n  br i1 %68, label %167, label %69\n\n69:                                               ; preds = %64\n  %70 = tail call %\"struct.std::_Rb_tree_node_base\"* @_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base(%\"struct.std::_Rb_tree_node_base\"* nonnull %1) #14\n  %71 = getelementptr inbounds %\"struct.std::_Rb_tree_node_base\", %\"struct.std::_Rb_tree_node_base\"* %70, i64 1, i32 0\n  %72 = load i32, i32* %71, align 4, !tbaa !17\n  %73 = icmp slt i32 %72, %61\n  br i1 %73, label %74, label %81\n\n74:                                               ; preds = %69\n  %75 = getelementptr inbounds %\"struct.std::_Rb_tree_node_base\", %\"struct.std::_Rb_tree_node_base\"* %70, i64 0, i32 3\n  %76 = bitcast %\"struct.std::_Rb_tree_node_base\"** %75 to %\"struct.std::_Rb_tree_node\"**\n  %77 = load %\"struct.std::_Rb_tree_node\"*, %\"struct.std::_Rb_tree_node\"** %76, align 8, !tbaa !47\n  %78 = icmp eq %\"struct.std::_Rb_tree_node\"* %77, null\n  %79 = select i1 %78, %\"struct.std::_Rb_tree_node_base\"* null, %\"struct.std::_Rb_tree_node_base\"* %1\n  %80 = select i1 %78, %\"struct.std::_Rb_tree_node_base\"* %70, %\"struct.std::_Rb_tree_node_base\"* %1\n  br label %167\n\n81:                                               ; preds = %69\n  %82 = getelementptr inbounds i8, i8* %4, i64 16\n  %83 = bitcast i8* %82 to %\"struct.std::_Rb_tree_node\"**\n  %84 = load %\"struct.std::_Rb_tree_node\"*, %\"struct.std::_Rb_tree_node\"** %83, align 8, !tbaa !16\n  %85 = icmp eq %\"struct.std::_Rb_tree_node\"* %84, null\n  br i1 %85, label %100, label %86\n\n86:                                               ; preds = %81, %86\n  %87 = phi %\"struct.std::_Rb_tree_node\"* [ %96, %86 ], [ %84, %81 ]\n  %88 = getelementptr inbounds %\"struct.std::_Rb_tree_node\", %\"struct.std::_Rb_tree_node\"* %87, i64 0, i32 1\n  %89 = bitcast %\"struct.__gnu_cxx::__aligned_membuf\"* %88 to i32*\n  %90 = load i32, i32* %89, align 4, !tbaa !17\n  %91 = icmp slt i32 %61, %90\n  %92 = getelementptr inbounds %\"struct.std::_Rb_tree_node\", %\"struct.std::_Rb_tree_node\"* %87, i64 0, i32 0, i32 2\n  %93 = getelementptr inbounds %\"struct.std::_Rb_tree_node\", %\"struct.std::_Rb_tree_node\"* %87, i64 0, i32 0, i32 3\n  %94 = select i1 %91, %\"struct.std::_Rb_tree_node_base\"** %92, %\"struct.std::_Rb_tree_node_base\"** %93\n  %95 = bitcast %\"struct.std::_Rb_tree_node_base\"** %94 to %\"struct.std::_Rb_tree_node\"**\n  %96 = load %\"struct.std::_Rb_tree_node\"*, %\"struct.std::_Rb_tree_node\"** %95, align 8, !tbaa !16\n  %97 = icmp eq %\"struct.std::_Rb_tree_node\"* %96, null\n  br i1 %97, label %98, label %86, !llvm.loop !18\n\n98:                                               ; preds = %86\n  %99 = getelementptr %\"struct.std::_Rb_tree_node\", %\"struct.std::_Rb_tree_node\"* %87, i64 0, i32 0\n  br i1 %91, label %100, label %105\n\n100:                                              ; preds = %98, %81\n  %101 = phi %\"struct.std::_Rb_tree_node_base\"* [ %99, %98 ], [ %6, %81 ]\n  %102 = icmp eq %\"struct.std::_Rb_tree_node_base\"* %101, %67\n  br i1 %102, label %167, label %103\n\n103:                                              ; preds = %100\n  %104 = tail call %\"struct.std::_Rb_tree_node_base\"* @_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base(%\"struct.std::_Rb_tree_node_base\"* %101) #14\n  br label %105\n\n105:                                              ; preds = %103, %98\n  %106 = phi %\"struct.std::_Rb_tree_node_base\"* [ %101, %103 ], [ %99, %98 ]\n  %107 = phi %\"struct.std::_Rb_tree_node_base\"* [ %104, %103 ], [ %99, %98 ]\n  %108 = getelementptr inbounds %\"struct.std::_Rb_tree_node_base\", %\"struct.std::_Rb_tree_node_base\"* %107, i64 1, i32 0\n  %109 = load i32, i32* %108, align 4, !tbaa !17\n  %110 = icmp slt i32 %109, %61\n  %111 = select i1 %110, %\"struct.std::_Rb_tree_node_base\"* null, %\"struct.std::_Rb_tree_node_base\"* %107\n  %112 = select i1 %110, %\"struct.std::_Rb_tree_node_base\"* %106, %\"struct.std::_Rb_tree_node_base\"* null\n  br label %167\n\n113:                                              ; preds = %59\n  %114 = icmp slt i32 %62, %61\n  br i1 %114, label %115, label %167\n\n115:                                              ; preds = %113\n  %116 = getelementptr inbounds i8, i8* %4, i64 32\n  %117 = bitcast i8* %116 to %\"struct.std::_Rb_tree_node_base\"**\n  %118 = load %\"struct.std::_Rb_tree_node_base\"*, %\"struct.std::_Rb_tree_node_base\"** %117, align 8, !tbaa !16\n  %119 = icmp eq %\"struct.std::_Rb_tree_node_base\"* %118, %1\n  br i1 %119, label %167, label %120\n\n120:                                              ; preds = %115\n  %121 = tail call %\"struct.std::_Rb_tree_node_base\"* @_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base(%\"struct.std::_Rb_tree_node_base\"* nonnull %1) #14\n  %122 = getelementptr inbounds %\"struct.std::_Rb_tree_node_base\", %\"struct.std::_Rb_tree_node_base\"* %121, i64 1, i32 0\n  %123 = load i32, i32* %122, align 4, !tbaa !17\n  %124 = icmp slt i32 %61, %123\n  br i1 %124, label %125, label %132\n\n125:                                              ; preds = %120\n  %126 = getelementptr inbounds %\"struct.std::_Rb_tree_node_base\", %\"struct.std::_Rb_tree_node_base\"* %1, i64 0, i32 3\n  %127 = bitcast %\"struct.std::_Rb_tree_node_base\"** %126 to %\"struct.std::_Rb_tree_node\"**\n  %128 = load %\"struct.std::_Rb_tree_node\"*, %\"struct.std::_Rb_tree_node\"** %127, align 8, !tbaa !47\n  %129 = icmp eq %\"struct.std::_Rb_tree_node\"* %128, null\n  %130 = select i1 %129, %\"struct.std::_Rb_tree_node_base\"* null, %\"struct.std::_Rb_tree_node_base\"* %121\n  %131 = select i1 %129, %\"struct.std::_Rb_tree_node_base\"* %1, %\"struct.std::_Rb_tree_node_base\"* %121\n  br label %167\n\n132:                                              ; preds = %120\n  %133 = getelementptr inbounds i8, i8* %4, i64 16\n  %134 = bitcast i8* %133 to %\"struct.std::_Rb_tree_node\"**\n  %135 = load %\"struct.std::_Rb_tree_node\"*, %\"struct.std::_Rb_tree_node\"** %134, align 8, !tbaa !16\n  %136 = icmp eq %\"struct.std::_Rb_tree_node\"* %135, null\n  br i1 %136, label %151, label %137\n\n137:                                              ; preds = %132, %137\n  %138 = phi %\"struct.std::_Rb_tree_node\"* [ %147, %137 ], [ %135, %132 ]\n  %139 = getelementptr inbounds %\"struct.std::_Rb_tree_node\", %\"struct.std::_Rb_tree_node\"* %138, i64 0, i32 1\n  %140 = bitcast %\"struct.__gnu_cxx::__aligned_membuf\"* %139 to i32*\n  %141 = load i32, i32* %140, align 4, !tbaa !17\n  %142 = icmp slt i32 %61, %141\n  %143 = getelementptr inbounds %\"struct.std::_Rb_tree_node\", %\"struct.std::_Rb_tree_node\"* %138, i64 0, i32 0, i32 2\n  %144 = getelementptr inbounds %\"struct.std::_Rb_tree_node\", %\"struct.std::_Rb_tree_node\"* %138, i64 0, i32 0, i32 3\n  %145 = select i1 %142, %\"struct.std::_Rb_tree_node_base\"** %143, %\"struct.std::_Rb_tree_node_base\"** %144\n  %146 = bitcast %\"struct.std::_Rb_tree_node_base\"** %145 to %\"struct.std::_Rb_tree_node\"**\n  %147 = load %\"struct.std::_Rb_tree_node\"*, %\"struct.std::_Rb_tree_node\"** %146, align 8, !tbaa !16\n  %148 = icmp eq %\"struct.std::_Rb_tree_node\"* %147, null\n  br i1 %148, label %149, label %137, !llvm.loop !18\n\n149:                                              ; preds = %137\n  %150 = getelementptr %\"struct.std::_Rb_tree_node\", %\"struct.std::_Rb_tree_node\"* %138, i64 0, i32 0\n  br i1 %142, label %151, label %159\n\n151:                                              ; preds = %149, %132\n  %152 = phi %\"struct.std::_Rb_tree_node_base\"* [ %150, %149 ], [ %6, %132 ]\n  %153 = getelementptr inbounds i8, i8* %4, i64 24\n  %154 = bitcast i8* %153 to %\"struct.std::_Rb_tree_node_base\"**\n  %155 = load %\"struct.std::_Rb_tree_node_base\"*, %\"struct.std::_Rb_tree_node_base\"** %154, align 8, !tbaa !20\n  %156 = icmp eq %\"struct.std::_Rb_tree_node_base\"* %152, %155\n  br i1 %156, label %167, label %157\n\n157:                                              ; preds = %151\n  %158 = tail call %\"struct.std::_Rb_tree_node_base\"* @_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base(%\"struct.std::_Rb_tree_node_base\"* %152) #14\n  br label %159\n\n159:                                              ; preds = %157, %149\n  %160 = phi %\"struct.std::_Rb_tree_node_base\"* [ %152, %157 ], [ %150, %149 ]\n  %161 = phi %\"struct.std::_Rb_tree_node_base\"* [ %158, %157 ], [ %150, %149 ]\n  %162 = getelementptr inbounds %\"struct.std::_Rb_tree_node_base\", %\"struct.std::_Rb_tree_node_base\"* %161, i64 1, i32 0\n  %163 = load i32, i32* %162, align 4, !tbaa !17\n  %164 = icmp slt i32 %163, %61\n  %165 = select i1 %164, %\"struct.std::_Rb_tree_node_base\"* null, %\"struct.std::_Rb_tree_node_base\"* %161\n  %166 = select i1 %164, %\"struct.std::_Rb_tree_node_base\"* %160, %\"struct.std::_Rb_tree_node_base\"* null\n  br label %167\n\n167:                                              ; preds = %159, %151, %105, %100, %51, %43, %125, %74, %113, %115, %64, %15\n  %168 = phi %\"struct.std::_Rb_tree_node_base\"* [ null, %15 ], [ %1, %64 ], [ null, %115 ], [ %1, %113 ], [ %79, %74 ], [ %130, %125 ], [ %57, %51 ], [ null, %43 ], [ %111, %105 ], [ null, %100 ], [ %165, %159 ], [ null, %151 ]\n  %169 = phi %\"struct.std::_Rb_tree_node_base\"* [ %18, %15 ], [ %1, %64 ], [ %1, %115 ], [ null, %113 ], [ %80, %74 ], [ %131, %125 ], [ %58, %51 ], [ %44, %43 ], [ %112, %105 ], [ %67, %100 ], [ %166, %159 ], [ %152, %151 ]\n  %170 = insertvalue { %\"struct.std::_Rb_tree_node_base\"*, %\"struct.std::_Rb_tree_node_base\"* } undef, %\"struct.std::_Rb_tree_node_base\"* %168, 0\n  %171 = insertvalue { %\"struct.std::_Rb_tree_node_base\"*, %\"struct.std::_Rb_tree_node_base\"* } %170, %\"struct.std::_Rb_tree_node_base\"* %169, 1\n  ret { %\"struct.std::_Rb_tree_node_base\"*, %\"struct.std::_Rb_tree_node_base\"* } %171\n}\n\n; Function Attrs: uwtable\ndefine linkonce_odr dso_local void @_ZNSt8_Rb_treeIiSt4pairIKiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIiESaIS8_EE17_M_construct_nodeIJRKS8_EEEvPSt13_Rb_tree_nodeIS8_EDpOT_(%\"class.std::_Rb_tree.7\"* nonnull align 8 dereferenceable(48) %0, %\"struct.std::_Rb_tree_node\"* %1, %\"struct.std::pair.15\"* nonnull align 8 dereferenceable(40) %2) local_unnamed_addr #0 comdat align 2 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {\n  %4 = alloca i64, align 8\n  %5 = getelementptr inbounds %\"struct.std::_Rb_tree_node\", %\"struct.std::_Rb_tree_node\"* %1, i64 0, i32 1\n  %6 = bitcast %\"struct.__gnu_cxx::__aligned_membuf\"* %5 to i32*\n  %7 = getelementptr inbounds %\"struct.std::pair.15\", %\"struct.std::pair.15\"* %2, i64 0, i32 0\n  %8 = load i32, i32* %7, align 8, !tbaa !34\n  store i32 %8, i32* %6, align 8, !tbaa !34\n  %9 = getelementptr inbounds %\"struct.std::_Rb_tree_node\", %\"struct.std::_Rb_tree_node\"* %1, i64 0, i32 1, i32 0, i64 8\n  %10 = getelementptr inbounds %\"struct.std::_Rb_tree_node\", %\"struct.std::_Rb_tree_node\"* %1, i64 0, i32 1, i32 0, i64 24\n  %11 = bitcast i8* %9 to i8**\n  store i8* %10, i8** %11, align 8, !tbaa !3\n  %12 = getelementptr inbounds %\"struct.std::pair.15\", %\"struct.std::pair.15\"* %2, i64 0, i32 1, i32 0, i32 0\n  %13 = load i8*, i8** %12, align 8, !tbaa !15\n  %14 = getelementptr inbounds %\"struct.std::pair.15\", %\"struct.std::pair.15\"* %2, i64 0, i32 1, i32 1\n  %15 = load i64, i64* %14, align 8, !tbaa !8\n  %16 = bitcast i64* %4 to i8*\n  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %16) #13\n  store i64 %15, i64* %4, align 8, !tbaa !29\n  %17 = icmp ugt i64 %15, 15\n  br i1 %17, label %18, label %24\n\n18:                                               ; preds = %3\n  %19 = bitcast i8* %9 to %\"class.std::__cxx11::basic_string\"*\n  %20 = invoke i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %19, i64* nonnull align 8 dereferenceable(8) %4, i64 0)\n          to label %21 unwind label %29\n\n21:                                               ; preds = %18\n  store i8* %20, i8** %11, align 8, !tbaa !15\n  %22 = load i64, i64* %4, align 8, !tbaa !29\n  %23 = bitcast i8* %10 to i64*\n  store i64 %22, i64* %23, align 8, !tbaa !11\n  br label %24\n\n24:                                               ; preds = %3, %21\n  %25 = phi i8* [ %20, %21 ], [ %10, %3 ]\n  switch i64 %15, label %28 [\n    i64 1, label %26\n    i64 0, label %36\n  ]\n\n26:                                               ; preds = %24\n  %27 = load i8, i8* %13, align 1, !tbaa !11\n  store i8 %27, i8* %25, align 1, !tbaa !11\n  br label %36\n\n28:                                               ; preds = %24\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %25, i8* align 1 %13, i64 %15, i1 false) #13\n  br label %36\n\n29:                                               ; preds = %18\n  %30 = landingpad { i8*, i32 }\n          catch i8* null\n  %31 = extractvalue { i8*, i32 } %30, 0\n  %32 = call i8* @__cxa_begin_catch(i8* %31) #13\n  %33 = bitcast %\"struct.std::_Rb_tree_node\"* %1 to i8*\n  call void @_ZdlPv(i8* %33) #13\n  invoke void @__cxa_rethrow() #16\n          to label %46 unwind label %34\n\n34:                                               ; preds = %29\n  %35 = landingpad { i8*, i32 }\n          cleanup\n  invoke void @__cxa_end_catch()\n          to label %42 unwind label %43\n\n36:                                               ; preds = %28, %26, %24\n  %37 = load i64, i64* %4, align 8, !tbaa !29\n  %38 = getelementptr inbounds %\"struct.std::_Rb_tree_node\", %\"struct.std::_Rb_tree_node\"* %1, i64 0, i32 1, i32 0, i64 16\n  %39 = bitcast i8* %38 to i64*\n  store i64 %37, i64* %39, align 8, !tbaa !8\n  %40 = load i8*, i8** %11, align 8, !tbaa !15\n  %41 = getelementptr inbounds i8, i8* %40, i64 %37\n  store i8 0, i8* %41, align 1, !tbaa !11\n  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %16) #13\n  ret void\n\n42:                                               ; preds = %34\n  resume { i8*, i32 } %35\n\n43:                                               ; preds = %34\n  %44 = landingpad { i8*, i32 }\n          catch i8* null\n  %45 = extractvalue { i8*, i32 } %44, 0\n  call void @__clang_call_terminate(i8* %45) #17\n  unreachable\n\n46:                                               ; preds = %29\n  unreachable\n}\n\ndeclare dso_local nonnull align 8 dereferenceable(32) %\"class.std::__cxx11::basic_string\"* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEmmmc(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32), i64, i64, i64, i8 signext) local_unnamed_addr #5\n\n; Function Attrs: uwtable\ndefine linkonce_odr dso_local %\"struct.std::_Rb_tree_node_base\"* @_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_iESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS7_EESJ_IJEEEEESt17_Rb_tree_iteratorIS8_ESt23_Rb_tree_const_iteratorIS8_EDpOT_(%\"class.std::_Rb_tree\"* nonnull align 8 dereferenceable(48) %0, %\"struct.std::_Rb_tree_node_base\"* %1, %\"struct.std::piecewise_construct_t\"* nonnull align 1 dereferenceable(1) %2, %\"class.std::tuple\"* nonnull align 8 dereferenceable(8) %3, %\"class.std::tuple.30\"* nonnull align 1 dereferenceable(1) %4) local_unnamed_addr #0 comdat align 2 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {\n  %6 = tail call noalias nonnull i8* @_Znwm(i64 72) #15\n  %7 = bitcast i8* %6 to %\"struct.std::_Rb_tree_node.21\"*\n  tail call void @_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_iESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS7_EESJ_IJEEEEEvPSt13_Rb_tree_nodeIS8_EDpOT_(%\"class.std::_Rb_tree\"* nonnull align 8 dereferenceable(48) %0, %\"struct.std::_Rb_tree_node.21\"* nonnull %7, %\"struct.std::piecewise_construct_t\"* nonnull align 1 dereferenceable(1) %2, %\"class.std::tuple\"* nonnull align 8 dereferenceable(8) %3, %\"class.std::tuple.30\"* nonnull align 1 dereferenceable(1) %4)\n  %8 = getelementptr inbounds i8, i8* %6, i64 32\n  %9 = bitcast i8* %8 to %\"class.std::__cxx11::basic_string\"*\n  %10 = invoke { %\"struct.std::_Rb_tree_node_base\"*, %\"struct.std::_Rb_tree_node_base\"* } @_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_iESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS7_(%\"class.std::_Rb_tree\"* nonnull align 8 dereferenceable(48) %0, %\"struct.std::_Rb_tree_node_base\"* %1, %\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %9)\n          to label %11 unwind label %60\n\n11:                                               ; preds = %5\n  %12 = extractvalue { %\"struct.std::_Rb_tree_node_base\"*, %\"struct.std::_Rb_tree_node_base\"* } %10, 0\n  %13 = extractvalue { %\"struct.std::_Rb_tree_node_base\"*, %\"struct.std::_Rb_tree_node_base\"* } %10, 1\n  %14 = icmp eq %\"struct.std::_Rb_tree_node_base\"* %13, null\n  br i1 %14, label %64, label %15\n\n15:                                               ; preds = %11\n  %16 = icmp eq %\"struct.std::_Rb_tree_node_base\"* %12, null\n  br i1 %16, label %17, label %50\n\n17:                                               ; preds = %15\n  %18 = getelementptr inbounds %\"class.std::_Rb_tree\", %\"class.std::_Rb_tree\"* %0, i64 0, i32 0, i32 0, i32 0, i32 0\n  %19 = getelementptr inbounds i8, i8* %18, i64 8\n  %20 = bitcast i8* %19 to %\"struct.std::_Rb_tree_node_base\"*\n  %21 = icmp eq %\"struct.std::_Rb_tree_node_base\"* %13, %20\n  br i1 %21, label %50, label %22\n\n22:                                               ; preds = %17\n  %23 = getelementptr inbounds i8, i8* %6, i64 40\n  %24 = bitcast i8* %23 to i64*\n  %25 = load i64, i64* %24, align 8, !tbaa !8\n  %26 = getelementptr inbounds %\"struct.std::_Rb_tree_node_base\", %\"struct.std::_Rb_tree_node_base\"* %13, i64 1, i32 1\n  %27 = bitcast %\"struct.std::_Rb_tree_node_base\"** %26 to i64*\n  %28 = load i64, i64* %27, align 8, !tbaa !8\n  %29 = icmp ugt i64 %25, %28\n  %30 = select i1 %29, i64 %28, i64 %25\n  %31 = icmp eq i64 %30, 0\n  br i1 %31, label %40, label %32\n\n32:                                               ; preds = %22\n  %33 = getelementptr inbounds %\"struct.std::_Rb_tree_node_base\", %\"struct.std::_Rb_tree_node_base\"* %13, i64 1\n  %34 = bitcast %\"struct.std::_Rb_tree_node_base\"* %33 to i8**\n  %35 = load i8*, i8** %34, align 8, !tbaa !15\n  %36 = bitcast i8* %8 to i8**\n  %37 = load i8*, i8** %36, align 8, !tbaa !15\n  %38 = tail call i32 @memcmp(i8* %37, i8* %35, i64 %30) #13\n  %39 = icmp eq i32 %38, 0\n  br i1 %39, label %40, label %47\n\n40:                                               ; preds = %32, %22\n  %41 = sub i64 %25, %28\n  %42 = icmp sgt i64 %41, -2147483648\n  %43 = select i1 %42, i64 %41, i64 -2147483648\n  %44 = icmp slt i64 %43, 2147483647\n  %45 = select i1 %44, i64 %43, i64 2147483647\n  %46 = trunc i64 %45 to i32\n  br label %47\n\n47:                                               ; preds = %40, %32\n  %48 = phi i32 [ %38, %32 ], [ %46, %40 ]\n  %49 = icmp slt i32 %48, 0\n  br label %50\n\n50:                                               ; preds = %15, %47, %17\n  %51 = phi i1 [ true, %17 ], [ %49, %47 ], [ true, %15 ]\n  %52 = bitcast i8* %6 to %\"struct.std::_Rb_tree_node_base\"*\n  %53 = getelementptr inbounds %\"class.std::_Rb_tree\", %\"class.std::_Rb_tree\"* %0, i64 0, i32 0, i32 0, i32 0, i32 0\n  %54 = getelementptr inbounds i8, i8* %53, i64 8\n  %55 = bitcast i8* %54 to %\"struct.std::_Rb_tree_node_base\"*\n  tail call void @_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_(i1 zeroext %51, %\"struct.std::_Rb_tree_node_base\"* nonnull %52, %\"struct.std::_Rb_tree_node_base\"* nonnull %13, %\"struct.std::_Rb_tree_node_base\"* nonnull align 8 dereferenceable(32) %55) #13\n  %56 = getelementptr inbounds i8, i8* %53, i64 40\n  %57 = bitcast i8* %56 to i64*\n  %58 = load i64, i64* %57, align 8, !tbaa !24\n  %59 = add i64 %58, 1\n  store i64 %59, i64* %57, align 8, !tbaa !24\n  br label %71\n\n60:                                               ; preds = %5\n  %61 = landingpad { i8*, i32 }\n          catch i8* null\n  %62 = extractvalue { i8*, i32 } %61, 0\n  %63 = tail call i8* @__cxa_begin_catch(i8* %62) #13\n  tail call void @_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_iESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS8_E(%\"class.std::_Rb_tree\"* nonnull align 8 dereferenceable(48) %0, %\"struct.std::_Rb_tree_node.21\"* nonnull %7) #13\n  invoke void @__cxa_rethrow() #16\n          to label %79 unwind label %73\n\n64:                                               ; preds = %11\n  %65 = bitcast i8* %8 to i8**\n  %66 = load i8*, i8** %65, align 8, !tbaa !15\n  %67 = getelementptr inbounds i8, i8* %6, i64 48\n  %68 = icmp eq i8* %66, %67\n  br i1 %68, label %70, label %69\n\n69:                                               ; preds = %64\n  tail call void @_ZdlPv(i8* %66) #13\n  br label %70\n\n70:                                               ; preds = %64, %69\n  tail call void @_ZdlPv(i8* nonnull %6) #13\n  br label %71\n\n71:                                               ; preds = %70, %50\n  %72 = phi %\"struct.std::_Rb_tree_node_base\"* [ %12, %70 ], [ %52, %50 ]\n  ret %\"struct.std::_Rb_tree_node_base\"* %72\n\n73:                                               ; preds = %60\n  %74 = landingpad { i8*, i32 }\n          cleanup\n  invoke void @__cxa_end_catch()\n          to label %75 unwind label %76\n\n75:                                               ; preds = %73\n  resume { i8*, i32 } %74\n\n76:                                               ; preds = %73\n  %77 = landingpad { i8*, i32 }\n          catch i8* null\n  %78 = extractvalue { i8*, i32 } %77, 0\n  tail call void @__clang_call_terminate(i8* %78) #17\n  unreachable\n\n79:                                               ; preds = %60\n  unreachable\n}\n\n; Function Attrs: uwtable\ndefine linkonce_odr dso_local void @_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_iESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS7_EESJ_IJEEEEEvPSt13_Rb_tree_nodeIS8_EDpOT_(%\"class.std::_Rb_tree\"* nonnull align 8 dereferenceable(48) %0, %\"struct.std::_Rb_tree_node.21\"* %1, %\"struct.std::piecewise_construct_t\"* nonnull align 1 dereferenceable(1) %2, %\"class.std::tuple\"* nonnull align 8 dereferenceable(8) %3, %\"class.std::tuple.30\"* nonnull align 1 dereferenceable(1) %4) local_unnamed_addr #0 comdat align 2 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {\n  %6 = alloca i64, align 8\n  %7 = getelementptr inbounds %\"struct.std::_Rb_tree_node.21\", %\"struct.std::_Rb_tree_node.21\"* %1, i64 0, i32 1\n  %8 = getelementptr inbounds %\"class.std::tuple\", %\"class.std::tuple\"* %3, i64 0, i32 0, i32 0, i32 0\n  %9 = load %\"class.std::__cxx11::basic_string\"*, %\"class.std::__cxx11::basic_string\"** %8, align 8, !tbaa !54\n  %10 = getelementptr inbounds %\"struct.std::_Rb_tree_node.21\", %\"struct.std::_Rb_tree_node.21\"* %1, i64 0, i32 1, i32 0, i64 16\n  %11 = bitcast %\"struct.__gnu_cxx::__aligned_membuf.22\"* %7 to i8**\n  store i8* %10, i8** %11, align 8, !tbaa !3\n  %12 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %9, i64 0, i32 0, i32 0\n  %13 = load i8*, i8** %12, align 8, !tbaa !15\n  %14 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %9, i64 0, i32 1\n  %15 = load i64, i64* %14, align 8, !tbaa !8\n  %16 = bitcast i64* %6 to i8*\n  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %16) #13\n  store i64 %15, i64* %6, align 8, !tbaa !29\n  %17 = icmp ugt i64 %15, 15\n  br i1 %17, label %18, label %24\n\n18:                                               ; preds = %5\n  %19 = bitcast %\"struct.__gnu_cxx::__aligned_membuf.22\"* %7 to %\"class.std::__cxx11::basic_string\"*\n  %20 = invoke i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %19, i64* nonnull align 8 dereferenceable(8) %6, i64 0)\n          to label %21 unwind label %29\n\n21:                                               ; preds = %18\n  store i8* %20, i8** %11, align 8, !tbaa !15\n  %22 = load i64, i64* %6, align 8, !tbaa !29\n  %23 = bitcast i8* %10 to i64*\n  store i64 %22, i64* %23, align 8, !tbaa !11\n  br label %24\n\n24:                                               ; preds = %5, %21\n  %25 = phi i8* [ %20, %21 ], [ %10, %5 ]\n  switch i64 %15, label %28 [\n    i64 1, label %26\n    i64 0, label %36\n  ]\n\n26:                                               ; preds = %24\n  %27 = load i8, i8* %13, align 1, !tbaa !11\n  store i8 %27, i8* %25, align 1, !tbaa !11\n  br label %36\n\n28:                                               ; preds = %24\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %25, i8* align 1 %13, i64 %15, i1 false) #13\n  br label %36\n\n29:                                               ; preds = %18\n  %30 = landingpad { i8*, i32 }\n          catch i8* null\n  %31 = extractvalue { i8*, i32 } %30, 0\n  %32 = call i8* @__cxa_begin_catch(i8* %31) #13\n  %33 = bitcast %\"struct.std::_Rb_tree_node.21\"* %1 to i8*\n  call void @_ZdlPv(i8* %33) #13\n  invoke void @__cxa_rethrow() #16\n          to label %48 unwind label %34\n\n34:                                               ; preds = %29\n  %35 = landingpad { i8*, i32 }\n          cleanup\n  invoke void @__cxa_end_catch()\n          to label %44 unwind label %45\n\n36:                                               ; preds = %28, %26, %24\n  %37 = load i64, i64* %6, align 8, !tbaa !29\n  %38 = getelementptr inbounds %\"struct.std::_Rb_tree_node.21\", %\"struct.std::_Rb_tree_node.21\"* %1, i64 0, i32 1, i32 0, i64 8\n  %39 = bitcast i8* %38 to i64*\n  store i64 %37, i64* %39, align 8, !tbaa !8\n  %40 = load i8*, i8** %11, align 8, !tbaa !15\n  %41 = getelementptr inbounds i8, i8* %40, i64 %37\n  store i8 0, i8* %41, align 1, !tbaa !11\n  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %16) #13\n  %42 = getelementptr inbounds %\"struct.std::_Rb_tree_node.21\", %\"struct.std::_Rb_tree_node.21\"* %1, i64 0, i32 1, i32 0, i64 32\n  %43 = bitcast i8* %42 to i32*\n  store i32 0, i32* %43, align 8, !tbaa !12\n  ret void\n\n44:                                               ; preds = %34\n  resume { i8*, i32 } %35\n\n45:                                               ; preds = %34\n  %46 = landingpad { i8*, i32 }\n          catch i8* null\n  %47 = extractvalue { i8*, i32 } %46, 0\n  call void @__clang_call_terminate(i8* %47) #17\n  unreachable\n\n48:                                               ; preds = %29\n  unreachable\n}\n\ndeclare dso_local nonnull align 8 dereferenceable(32) %\"class.std::__cxx11::basic_string\"* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32), i64, i64, i8*, i64) local_unnamed_addr #5\n\ndeclare dso_local void @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEmmPKcm(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32), i64, i64, i8*, i64) local_unnamed_addr #5\n\ndeclare dso_local nonnull align 8 dereferenceable(32) %\"class.std::__cxx11::basic_string\"* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32), i8*, i64) local_unnamed_addr #5\n\ndeclare dso_local void @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_eraseEmm(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32), i64, i64) local_unnamed_addr #5\n\n; Function Attrs: inaccessiblememonly nofree nosync nounwind willreturn\ndeclare void @llvm.experimental.noalias.scope.decl(metadata) #11\n\n; Function Attrs: argmemonly nofree nounwind willreturn writeonly\ndeclare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #12\n\nattributes #0 = { uwtable \"frame-pointer\"=\"none\" \"min-legal-vector-width\"=\"0\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #1 = { argmemonly mustprogress nofree nosync nounwind willreturn }\nattributes #2 = { nounwind uwtable \"frame-pointer\"=\"none\" \"min-legal-vector-width\"=\"0\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #3 = { noinline noreturn nounwind }\nattributes #4 = { nobuiltin nounwind \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #5 = { \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #6 = { argmemonly mustprogress nofree nounwind willreturn }\nattributes #7 = { argmemonly mustprogress nofree nounwind readonly willreturn \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #8 = { mustprogress nofree nounwind readonly willreturn \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #9 = { nounwind \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #10 = { nobuiltin allocsize(0) \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #11 = { inaccessiblememonly nofree nosync nounwind willreturn }\nattributes #12 = { argmemonly nofree nounwind willreturn writeonly }\nattributes #13 = { nounwind }\nattributes #14 = { nounwind readonly willreturn }\nattributes #15 = { allocsize(0) }\nattributes #16 = { noreturn }\nattributes #17 = { noreturn nounwind }\n\n!llvm.module.flags = !{!0, !1}\n!llvm.ident = !{!2}\n\n!0 = !{i32 1, !\"wchar_size\", i32 4}\n!1 = !{i32 7, !\"uwtable\", i32 1}\n!2 = !{!\"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)\"}\n!3 = !{!4, !5, i64 0}\n!4 = !{!\"_ZTSNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderE\", !5, i64 0}\n!5 = !{!\"any pointer\", !6, i64 0}\n!6 = !{!\"omnipotent char\", !7, i64 0}\n!7 = !{!\"Simple C++ TBAA\"}\n!8 = !{!9, !10, i64 8}\n!9 = !{!\"_ZTSNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE\", !4, i64 0, !10, i64 8, !6, i64 16}\n!10 = !{!\"long\", !6, i64 0}\n!11 = !{!6, !6, i64 0}\n!12 = !{!13, !14, i64 32}\n!13 = !{!\"_ZTSSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEiE\", !9, i64 0, !14, i64 32}\n!14 = !{!\"int\", !6, i64 0}\n!15 = !{!9, !5, i64 0}\n!16 = !{!5, !5, i64 0}\n!17 = !{!14, !14, i64 0}\n!18 = distinct !{!18, !19}\n!19 = !{!\"llvm.loop.mustprogress\"}\n!20 = !{!21, !5, i64 16}\n!21 = !{!\"_ZTSSt15_Rb_tree_header\", !22, i64 0, !10, i64 32}\n!22 = !{!\"_ZTSSt18_Rb_tree_node_base\", !23, i64 0, !5, i64 8, !5, i64 16, !5, i64 24}\n!23 = !{!\"_ZTSSt14_Rb_tree_color\", !6, i64 0}\n!24 = !{!21, !10, i64 32}\n!25 = distinct !{!25, !19}\n!26 = !{!27}\n!27 = distinct !{!27, !28, !\"_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_S5_: argument 0\"}\n!28 = distinct !{!28, !\"_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_S5_\"}\n!29 = !{!10, !10, i64 0}\n!30 = distinct !{!30, !19}\n!31 = distinct !{!31, !19}\n!32 = !{!21, !5, i64 8}\n!33 = distinct !{!33, !19}\n!34 = !{!35, !14, i64 0}\n!35 = !{!\"_ZTSSt4pairIKiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE\", !14, i64 0, !9, i64 8}\n!36 = !{!37}\n!37 = distinct !{!37, !38, !\"_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_SA_: argument 0\"}\n!38 = distinct !{!38, !\"_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_SA_\"}\n!39 = !{!40}\n!40 = distinct !{!40, !41, !\"_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_S5_: argument 0\"}\n!41 = distinct !{!41, !\"_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_S5_\"}\n!42 = distinct !{!42, !19}\n!43 = !{!21, !23, i64 0}\n!44 = !{!21, !5, i64 24}\n!45 = distinct !{!45, !19}\n!46 = distinct !{!46, !19}\n!47 = !{!22, !5, i64 24}\n!48 = !{!22, !5, i64 16}\n!49 = distinct !{!49, !19}\n!50 = distinct !{!50, !19}\n!51 = !{!52, !5, i64 0}\n!52 = !{!\"_ZTSNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_iESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE11_Alloc_nodeE\", !5, i64 0}\n!53 = distinct !{!53, !19}\n!54 = !{!55, !5, i64 0}\n!55 = !{!\"_ZTSSt10_Head_baseILm0ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELb0EE\", !5, i64 0}\n", "target": "This is the targeted source code:\n/*\nInput is a space-delimited string of numberals from \"zero\" to \"nine\".\nValid choices are \"zero\", \"one\", 'two\", 'three\", \"four\", \"five\", 'six\", 'seven\", \"eight\" and \"nine\".\nReturn the string with numbers sorted from smallest to largest\n>>> sort_numbers('three one five\")\n\"one three five\"\n*/\n#include<stdio.h>\n#include<string>\n#include<map>\nusing namespace std;\nstring sort_numbers(string numbers){\n\n    map<string,int> tonum={{\"zero\",0},{\"one\",1},{\"two\",2},{\"three\",3},{\"four\",4},{\"five\",5},{\"six\",6},{\"seven\",7},{\"eight\",8},{\"nine\",9}};\n    map<int,string> numto={{0,\"zero\"},{1,\"one\"},{2,\"two\"},{3,\"three\"},{4,\"four\"},{5,\"five\"},{6,\"six\"},{7,\"seven\"},{8,\"eight\"},{9,\"nine\"}};\n    int count[10];\n    for (int i=0;i<10;i++)\n        count[i]=0;\n    string out=\"\",current=\"\";\n    if (numbers.length()>0) numbers=numbers+' ';\n    for (int i=0;i<numbers.length();i++)\n        if (numbers[i]==' ')\n        {\n            count[tonum[current]]+=1;\n            current=\"\";\n        }\n        else current+=numbers[i];\n    for (int i=0;i<10;i++)\n        for (int j=0;j<count[i];j++)\n            out=out+numto[i]+' ';\n    if (out.length()>0) out.pop_back();\n    return out;\n}\n"}
{"input": "Convert this to C++:\n; ModuleID = '../../Human_xBenchmarks_164/CPP_20/CPP_20.cpp'\nsource_filename = \"../../Human_xBenchmarks_164/CPP_20/CPP_20.cpp\"\ntarget datalayout = \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\ntarget triple = \"x86_64-unknown-linux-gnu\"\n\n%\"class.std::vector\" = type { %\"struct.std::_Vector_base\" }\n%\"struct.std::_Vector_base\" = type { %\"struct.std::_Vector_base<float, std::allocator<float>>::_Vector_impl\" }\n%\"struct.std::_Vector_base<float, std::allocator<float>>::_Vector_impl\" = type { %\"struct.std::_Vector_base<float, std::allocator<float>>::_Vector_impl_data\" }\n%\"struct.std::_Vector_base<float, std::allocator<float>>::_Vector_impl_data\" = type { float*, float*, float* }\n\n; Function Attrs: uwtable\ndefine dso_local void @_Z21find_closest_elementsSt6vectorIfSaIfEE(%\"class.std::vector\"* noalias sret(%\"class.std::vector\") align 8 %0, %\"class.std::vector\"* nocapture readonly %1) local_unnamed_addr #0 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {\n  %3 = alloca i64, align 8\n  %4 = bitcast i64* %3 to [2 x float]*\n  %5 = alloca i64, align 8\n  %6 = bitcast i64* %5 to [2 x float]*\n  %7 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %1, i64 0, i32 0, i32 0, i32 0, i32 1\n  %8 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %1, i64 0, i32 0, i32 0, i32 0, i32 0\n  %9 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0, i64 0, i32 0, i32 0, i32 0, i32 1\n  %10 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0, i64 0, i32 0, i32 0, i32 0, i32 0\n  %11 = bitcast i64* %3 to i8*\n  %12 = bitcast i64* %3 to float*\n  %13 = getelementptr inbounds [2 x float], [2 x float]* %4, i64 0, i64 1\n  %14 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0, i64 0, i32 0, i32 0, i32 0, i32 2\n  %15 = bitcast %\"class.std::vector\"* %0 to i8**\n  %16 = bitcast float** %9 to i8**\n  %17 = bitcast float** %14 to i8**\n  %18 = bitcast %\"class.std::vector\"* %0 to i8*\n  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(24) %18, i8 0, i64 24, i1 false)\n  %19 = load float*, float** %7, align 8, !tbaa !3\n  %20 = load float*, float** %8, align 8, !tbaa !8\n  %21 = icmp eq float* %19, %20\n  br i1 %21, label %41, label %50\n\n22:                                               ; preds = %151\n  %23 = ptrtoint float* %156 to i64\n  %24 = ptrtoint float* %155 to i64\n  %25 = sub i64 %23, %24\n  %26 = ashr exact i64 %25, 2\n  br label %27\n\n27:                                               ; preds = %22, %50\n  %28 = phi i64 [ %26, %22 ], [ %65, %50 ]\n  %29 = phi float* [ %152, %22 ], [ %51, %50 ]\n  %30 = phi float* [ %153, %22 ], [ %52, %50 ]\n  %31 = phi float* [ %154, %22 ], [ %53, %50 ]\n  %32 = phi float* [ %155, %22 ], [ %54, %50 ]\n  %33 = phi float* [ %156, %22 ], [ %55, %50 ]\n  %34 = phi float* [ %159, %22 ], [ %56, %50 ]\n  %35 = phi float* [ %160, %22 ], [ %57, %50 ]\n  %36 = phi float* [ %161, %22 ], [ %58, %50 ]\n  %37 = icmp ugt i64 %28, %61\n  %38 = add i64 %60, 1\n  br i1 %37, label %50, label %39, !llvm.loop !9\n\n39:                                               ; preds = %27\n  %40 = load float*, float** %10, align 8, !tbaa !8\n  br label %41\n\n41:                                               ; preds = %39, %2\n  %42 = phi float* [ %29, %39 ], [ null, %2 ]\n  %43 = phi float* [ %30, %39 ], [ null, %2 ]\n  %44 = phi float* [ %31, %39 ], [ null, %2 ]\n  %45 = phi float* [ %40, %39 ], [ null, %2 ]\n  %46 = load float, float* %45, align 4, !tbaa !11\n  %47 = getelementptr inbounds float, float* %45, i64 1\n  %48 = load float, float* %47, align 4, !tbaa !11\n  %49 = fcmp ogt float %46, %48\n  br i1 %49, label %168, label %213\n\n50:                                               ; preds = %2, %27\n  %51 = phi float* [ %29, %27 ], [ null, %2 ]\n  %52 = phi float* [ %30, %27 ], [ null, %2 ]\n  %53 = phi float* [ %31, %27 ], [ null, %2 ]\n  %54 = phi float* [ %32, %27 ], [ %20, %2 ]\n  %55 = phi float* [ %33, %27 ], [ %19, %2 ]\n  %56 = phi float* [ %34, %27 ], [ null, %2 ]\n  %57 = phi float* [ %35, %27 ], [ null, %2 ]\n  %58 = phi float* [ %36, %27 ], [ null, %2 ]\n  %59 = phi i64 [ %61, %27 ], [ 0, %2 ]\n  %60 = phi i64 [ %38, %27 ], [ 1, %2 ]\n  %61 = add nuw i64 %59, 1\n  %62 = ptrtoint float* %55 to i64\n  %63 = ptrtoint float* %54 to i64\n  %64 = sub i64 %62, %63\n  %65 = ashr exact i64 %64, 2\n  %66 = icmp ugt i64 %65, %61\n  br i1 %66, label %67, label %27\n\n67:                                               ; preds = %50, %151\n  %68 = phi float* [ %152, %151 ], [ %51, %50 ]\n  %69 = phi float* [ %153, %151 ], [ %52, %50 ]\n  %70 = phi float* [ %154, %151 ], [ %53, %50 ]\n  %71 = phi float* [ %155, %151 ], [ %54, %50 ]\n  %72 = phi float* [ %156, %151 ], [ %55, %50 ]\n  %73 = phi float* [ %157, %151 ], [ %54, %50 ]\n  %74 = phi float* [ %158, %151 ], [ %55, %50 ]\n  %75 = phi float* [ %159, %151 ], [ %56, %50 ]\n  %76 = phi float* [ %160, %151 ], [ %57, %50 ]\n  %77 = phi float* [ %161, %151 ], [ %58, %50 ]\n  %78 = phi i64 [ %162, %151 ], [ %60, %50 ]\n  %79 = load float*, float** %10, align 8, !tbaa !8\n  %80 = ptrtoint float* %77 to i64\n  %81 = ptrtoint float* %79 to i64\n  %82 = sub i64 %80, %81\n  %83 = ashr exact i64 %82, 2\n  %84 = icmp eq i64 %82, 0\n  %85 = getelementptr inbounds float, float* %73, i64 %59\n  %86 = load float, float* %85, align 4, !tbaa !11\n  br i1 %84, label %102, label %87\n\n87:                                               ; preds = %67\n  %88 = getelementptr inbounds float, float* %73, i64 %78\n  %89 = load float, float* %88, align 4, !tbaa !11\n  %90 = load float, float* %79, align 4, !tbaa !11\n  %91 = getelementptr inbounds float, float* %79, i64 1\n  %92 = load float, float* %91, align 4, !tbaa !11\n  %93 = insertelement <2 x float> poison, float %86, i32 0\n  %94 = insertelement <2 x float> %93, float %90, i32 1\n  %95 = insertelement <2 x float> poison, float %89, i32 0\n  %96 = insertelement <2 x float> %95, float %92, i32 1\n  %97 = fsub <2 x float> %94, %96\n  %98 = call <2 x float> @llvm.fabs.v2f32(<2 x float> %97)\n  %99 = extractelement <2 x float> %98, i32 0\n  %100 = extractelement <2 x float> %98, i32 1\n  %101 = fcmp olt float %99, %100\n  br i1 %101, label %102, label %151\n\n102:                                              ; preds = %67, %87\n  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %11) #8\n  store float %86, float* %12, align 8, !tbaa !11\n  %103 = getelementptr inbounds float, float* %73, i64 %78\n  %104 = load float, float* %103, align 4, !tbaa !11\n  store float %104, float* %13, align 4, !tbaa !11\n  %105 = load float*, float** %14, align 8, !tbaa !13\n  %106 = ptrtoint float* %105 to i64\n  %107 = sub i64 %106, %81\n  %108 = ashr exact i64 %107, 2\n  %109 = icmp ult i64 %108, 2\n  br i1 %109, label %110, label %121\n\n110:                                              ; preds = %102\n  %111 = invoke noalias nonnull i8* @_Znwm(i64 8) #9\n          to label %112 unwind label %214\n\n112:                                              ; preds = %110\n  %113 = bitcast i8* %111 to i64*\n  %114 = load i64, i64* %3, align 8\n  store i64 %114, i64* %113, align 4\n  %115 = icmp eq float* %79, null\n  br i1 %115, label %118, label %116\n\n116:                                              ; preds = %112\n  %117 = bitcast float* %79 to i8*\n  tail call void @_ZdlPv(i8* nonnull %117) #8\n  br label %118\n\n118:                                              ; preds = %116, %112\n  store i8* %111, i8** %15, align 8, !tbaa !8\n  %119 = getelementptr inbounds i8, i8* %111, i64 8\n  store i8* %119, i8** %16, align 8, !tbaa !3\n  store i8* %119, i8** %17, align 8, !tbaa !13\n  %120 = bitcast i8* %119 to float*\n  br label %143\n\n121:                                              ; preds = %102\n  %122 = icmp ult i64 %83, 2\n  br i1 %122, label %129, label %123\n\n123:                                              ; preds = %121\n  %124 = bitcast float* %79 to i64*\n  %125 = load i64, i64* %3, align 8\n  store i64 %125, i64* %124, align 4\n  %126 = getelementptr inbounds float, float* %79, i64 2\n  %127 = icmp eq float* %76, %126\n  br i1 %127, label %143, label %128\n\n128:                                              ; preds = %123\n  store float* %126, float** %9, align 8, !tbaa !3\n  br label %143\n\n129:                                              ; preds = %121\n  %130 = getelementptr inbounds float, float* %12, i64 %83\n  %131 = icmp eq i64 %82, 0\n  br i1 %131, label %136, label %132\n\n132:                                              ; preds = %129\n  %133 = bitcast float* %79 to i8*\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %133, i8* nonnull align 8 %11, i64 %82, i1 false) #8\n  %134 = mul nsw i64 %83, -4\n  %135 = add nsw i64 %134, 8\n  br label %136\n\n136:                                              ; preds = %129, %132\n  %137 = phi i64 [ %135, %132 ], [ 8, %129 ]\n  %138 = phi float* [ %75, %132 ], [ %77, %129 ]\n  %139 = bitcast float* %138 to i8*\n  %140 = bitcast float* %130 to i8*\n  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %139, i8* nonnull align 4 %140, i64 %137, i1 false) #8\n  %141 = lshr exact i64 %137, 2\n  %142 = getelementptr inbounds float, float* %138, i64 %141\n  store float* %142, float** %9, align 8, !tbaa !3\n  br label %143\n\n143:                                              ; preds = %118, %123, %128, %136\n  %144 = phi float* [ %120, %118 ], [ %68, %123 ], [ %126, %128 ], [ %142, %136 ]\n  %145 = phi float* [ %120, %118 ], [ %69, %123 ], [ %126, %128 ], [ %142, %136 ]\n  %146 = phi float* [ %120, %118 ], [ %70, %123 ], [ %126, %128 ], [ %142, %136 ]\n  %147 = phi float* [ %120, %118 ], [ %75, %123 ], [ %126, %128 ], [ %142, %136 ]\n  %148 = phi float* [ %120, %118 ], [ %76, %123 ], [ %126, %128 ], [ %142, %136 ]\n  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %11) #8\n  %149 = load float*, float** %7, align 8, !tbaa !3\n  %150 = load float*, float** %8, align 8, !tbaa !8\n  br label %151\n\n151:                                              ; preds = %87, %143\n  %152 = phi float* [ %68, %87 ], [ %144, %143 ]\n  %153 = phi float* [ %69, %87 ], [ %145, %143 ]\n  %154 = phi float* [ %70, %87 ], [ %146, %143 ]\n  %155 = phi float* [ %71, %87 ], [ %150, %143 ]\n  %156 = phi float* [ %72, %87 ], [ %149, %143 ]\n  %157 = phi float* [ %73, %87 ], [ %150, %143 ]\n  %158 = phi float* [ %74, %87 ], [ %149, %143 ]\n  %159 = phi float* [ %75, %87 ], [ %147, %143 ]\n  %160 = phi float* [ %76, %87 ], [ %148, %143 ]\n  %161 = phi float* [ %77, %87 ], [ %148, %143 ]\n  %162 = add i64 %78, 1\n  %163 = ptrtoint float* %158 to i64\n  %164 = ptrtoint float* %157 to i64\n  %165 = sub i64 %163, %164\n  %166 = ashr exact i64 %165, 2\n  %167 = icmp ugt i64 %166, %162\n  br i1 %167, label %67, label %22, !llvm.loop !14\n\n168:                                              ; preds = %41\n  %169 = bitcast i64* %5 to i8*\n  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %169) #8\n  %170 = bitcast i64* %5 to float*\n  store float %48, float* %170, align 8, !tbaa !11\n  %171 = getelementptr inbounds [2 x float], [2 x float]* %6, i64 0, i64 1\n  store float %46, float* %171, align 4, !tbaa !11\n  %172 = load float*, float** %14, align 8, !tbaa !13\n  %173 = ptrtoint float* %172 to i64\n  %174 = ptrtoint float* %45 to i64\n  %175 = sub i64 %173, %174\n  %176 = ashr exact i64 %175, 2\n  %177 = icmp ult i64 %176, 2\n  br i1 %177, label %178, label %185\n\n178:                                              ; preds = %168\n  %179 = invoke noalias nonnull i8* @_Znwm(i64 8) #9\n          to label %180 unwind label %211\n\n180:                                              ; preds = %178\n  %181 = bitcast i8* %179 to i64*\n  %182 = load i64, i64* %5, align 8\n  store i64 %182, i64* %181, align 4\n  %183 = bitcast float* %45 to i8*\n  tail call void @_ZdlPv(i8* nonnull %183) #8\n  store i8* %179, i8** %15, align 8, !tbaa !8\n  %184 = getelementptr inbounds i8, i8* %179, i64 8\n  store i8* %184, i8** %16, align 8, !tbaa !3\n  store i8* %184, i8** %17, align 8, !tbaa !13\n  br label %210\n\n185:                                              ; preds = %168\n  %186 = ptrtoint float* %44 to i64\n  %187 = sub i64 %186, %174\n  %188 = ashr exact i64 %187, 2\n  %189 = icmp ult i64 %188, 2\n  br i1 %189, label %196, label %190\n\n190:                                              ; preds = %185\n  %191 = bitcast float* %45 to i64*\n  %192 = load i64, i64* %5, align 8\n  store i64 %192, i64* %191, align 4\n  %193 = getelementptr inbounds float, float* %45, i64 2\n  %194 = icmp eq float* %43, %193\n  br i1 %194, label %210, label %195\n\n195:                                              ; preds = %190\n  store float* %193, float** %9, align 8, !tbaa !3\n  br label %210\n\n196:                                              ; preds = %185\n  %197 = getelementptr inbounds float, float* %170, i64 %188\n  %198 = icmp eq i64 %187, 0\n  br i1 %198, label %203, label %199\n\n199:                                              ; preds = %196\n  %200 = bitcast float* %45 to i8*\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %200, i8* nonnull align 8 %169, i64 %187, i1 false) #8\n  %201 = mul nsw i64 %188, -4\n  %202 = add nsw i64 %201, 8\n  br label %203\n\n203:                                              ; preds = %196, %199\n  %204 = phi i64 [ %202, %199 ], [ 8, %196 ]\n  %205 = phi float* [ %42, %199 ], [ %44, %196 ]\n  %206 = bitcast float* %205 to i8*\n  %207 = bitcast float* %197 to i8*\n  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %206, i8* nonnull align 4 %207, i64 %204, i1 false) #8\n  %208 = lshr exact i64 %204, 2\n  %209 = getelementptr inbounds float, float* %205, i64 %208\n  store float* %209, float** %9, align 8, !tbaa !3\n  br label %210\n\n210:                                              ; preds = %180, %190, %195, %203\n  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %169) #8\n  br label %213\n\n211:                                              ; preds = %178\n  %212 = landingpad { i8*, i32 }\n          cleanup\n  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %169) #8\n  br label %217\n\n213:                                              ; preds = %41, %210\n  ret void\n\n214:                                              ; preds = %110\n  %215 = landingpad { i8*, i32 }\n          cleanup\n  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %11) #8\n  %216 = icmp eq float* %79, null\n  br i1 %216, label %221, label %217\n\n217:                                              ; preds = %211, %214\n  %218 = phi { i8*, i32 } [ %212, %211 ], [ %215, %214 ]\n  %219 = phi float* [ %45, %211 ], [ %79, %214 ]\n  %220 = bitcast float* %219 to i8*\n  tail call void @_ZdlPv(i8* nonnull %220) #8\n  br label %221\n\n221:                                              ; preds = %214, %217\n  %222 = phi { i8*, i32 } [ %215, %214 ], [ %218, %217 ]\n  resume { i8*, i32 } %222\n}\n\n; Function Attrs: argmemonly mustprogress nofree nounwind willreturn writeonly\ndeclare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1\n\n; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn\ndeclare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2\n\ndeclare dso_local i32 @__gxx_personality_v0(...)\n\n; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn\ndeclare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2\n\n; Function Attrs: nobuiltin nounwind\ndeclare dso_local void @_ZdlPv(i8*) local_unnamed_addr #3\n\n; Function Attrs: nobuiltin allocsize(0)\ndeclare dso_local nonnull i8* @_Znwm(i64) local_unnamed_addr #4\n\n; Function Attrs: argmemonly mustprogress nofree nounwind willreturn\ndeclare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #5\n\n; Function Attrs: argmemonly nofree nounwind willreturn\ndeclare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #6\n\n; Function Attrs: nofree nosync nounwind readnone speculatable willreturn\ndeclare <2 x float> @llvm.fabs.v2f32(<2 x float>) #7\n\nattributes #0 = { uwtable \"frame-pointer\"=\"none\" \"min-legal-vector-width\"=\"0\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #1 = { argmemonly mustprogress nofree nounwind willreturn writeonly }\nattributes #2 = { argmemonly mustprogress nofree nosync nounwind willreturn }\nattributes #3 = { nobuiltin nounwind \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #4 = { nobuiltin allocsize(0) \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #5 = { argmemonly mustprogress nofree nounwind willreturn }\nattributes #6 = { argmemonly nofree nounwind willreturn }\nattributes #7 = { nofree nosync nounwind readnone speculatable willreturn }\nattributes #8 = { nounwind }\nattributes #9 = { allocsize(0) }\n\n!llvm.module.flags = !{!0, !1}\n!llvm.ident = !{!2}\n\n!0 = !{i32 1, !\"wchar_size\", i32 4}\n!1 = !{i32 7, !\"uwtable\", i32 1}\n!2 = !{!\"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)\"}\n!3 = !{!4, !5, i64 8}\n!4 = !{!\"_ZTSNSt12_Vector_baseIfSaIfEE17_Vector_impl_dataE\", !5, i64 0, !5, i64 8, !5, i64 16}\n!5 = !{!\"any pointer\", !6, i64 0}\n!6 = !{!\"omnipotent char\", !7, i64 0}\n!7 = !{!\"Simple C++ TBAA\"}\n!8 = !{!4, !5, i64 0}\n!9 = distinct !{!9, !10}\n!10 = !{!\"llvm.loop.mustprogress\"}\n!11 = !{!12, !12, i64 0}\n!12 = !{!\"float\", !6, i64 0}\n!13 = !{!4, !5, i64 16}\n!14 = distinct !{!14, !10}\n", "target": "This is the targeted source code:\n/*\nFrom a supplied vector of numbers (of length at least two) select and return two that are the closest to each\nother and return them in order (smaller number, larger number).\n>>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0, 2.2})\n(2.0, 2.2)\n>>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0, 2.0})\n(2.0, 2.0)\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nvector<float> find_closest_elements(vector<float> numbers){\n\n    vector<float> out={};\n    for (int i=0;i<numbers.size();i++)\n    for (int j=i+1;j<numbers.size();j++)\n        if (out.size()==0 or abs(numbers[i]-numbers[j])<abs(out[0]-out[1]))\n            out={numbers[i],numbers[j]};\n    if (out[0]>out[1])\n        out={out[1],out[0]};\n    return out;\n}\n"}
{"input": "Convert this to C++:\n; ModuleID = '../../Human_xBenchmarks_164/CPP_21/CPP_21.cpp'\nsource_filename = \"../../Human_xBenchmarks_164/CPP_21/CPP_21.cpp\"\ntarget datalayout = \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\ntarget triple = \"x86_64-unknown-linux-gnu\"\n\n%\"class.std::vector\" = type { %\"struct.std::_Vector_base\" }\n%\"struct.std::_Vector_base\" = type { %\"struct.std::_Vector_base<float, std::allocator<float>>::_Vector_impl\" }\n%\"struct.std::_Vector_base<float, std::allocator<float>>::_Vector_impl\" = type { %\"struct.std::_Vector_base<float, std::allocator<float>>::_Vector_impl_data\" }\n%\"struct.std::_Vector_base<float, std::allocator<float>>::_Vector_impl_data\" = type { float*, float*, float* }\n\n; Function Attrs: nofree nosync nounwind uwtable\ndefine dso_local void @_Z15rescale_to_unitSt6vectorIfSaIfEE(%\"class.std::vector\"* noalias nocapture sret(%\"class.std::vector\") align 8 %0, %\"class.std::vector\"* nocapture %1) local_unnamed_addr #0 {\n  %3 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %1, i64 0, i32 0, i32 0, i32 0, i32 1\n  %4 = load float*, float** %3, align 8, !tbaa !3\n  %5 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %1, i64 0, i32 0, i32 0, i32 0, i32 0\n  %6 = load float*, float** %5, align 8, !tbaa !8\n  %7 = ptrtoint float* %4 to i64\n  %8 = ptrtoint float* %6 to i64\n  %9 = sub i64 %7, %8\n  %10 = ashr exact i64 %9, 2\n  %11 = icmp eq i64 %9, 0\n  br i1 %11, label %128, label %12\n\n12:                                               ; preds = %2\n  %13 = call i64 @llvm.umax.i64(i64 %10, i64 1)\n  %14 = add i64 %13, -1\n  %15 = and i64 %13, 3\n  %16 = icmp ult i64 %14, 3\n  br i1 %16, label %19, label %17\n\n17:                                               ; preds = %12\n  %18 = and i64 %13, -4\n  br label %93\n\n19:                                               ; preds = %93, %12\n  %20 = phi float [ undef, %12 ], [ %122, %93 ]\n  %21 = phi float [ undef, %12 ], [ %124, %93 ]\n  %22 = phi i64 [ 0, %12 ], [ %125, %93 ]\n  %23 = phi float [ -1.000000e+05, %12 ], [ %124, %93 ]\n  %24 = phi float [ 1.000000e+05, %12 ], [ %122, %93 ]\n  %25 = icmp eq i64 %15, 0\n  br i1 %25, label %40, label %26\n\n26:                                               ; preds = %19, %26\n  %27 = phi i64 [ %37, %26 ], [ %22, %19 ]\n  %28 = phi float [ %36, %26 ], [ %23, %19 ]\n  %29 = phi float [ %34, %26 ], [ %24, %19 ]\n  %30 = phi i64 [ %38, %26 ], [ %15, %19 ]\n  %31 = getelementptr inbounds float, float* %6, i64 %27\n  %32 = load float, float* %31, align 4, !tbaa !9\n  %33 = fcmp olt float %32, %29\n  %34 = select i1 %33, float %32, float %29\n  %35 = fcmp ogt float %32, %28\n  %36 = select i1 %35, float %32, float %28\n  %37 = add nuw nsw i64 %27, 1\n  %38 = add i64 %30, -1\n  %39 = icmp eq i64 %38, 0\n  br i1 %39, label %40, label %26, !llvm.loop !11\n\n40:                                               ; preds = %26, %19\n  %41 = phi float [ %20, %19 ], [ %34, %26 ]\n  %42 = phi float [ %21, %19 ], [ %36, %26 ]\n  %43 = fsub float %42, %41\n  br i1 %11, label %128, label %44\n\n44:                                               ; preds = %40\n  %45 = call i64 @llvm.umax.i64(i64 %10, i64 1)\n  %46 = icmp ult i64 %45, 4\n  br i1 %46, label %91, label %47\n\n47:                                               ; preds = %44\n  %48 = and i64 %45, -4\n  %49 = insertelement <4 x float> poison, float %41, i32 0\n  %50 = shufflevector <4 x float> %49, <4 x float> poison, <4 x i32> zeroinitializer\n  %51 = insertelement <4 x float> poison, float %43, i32 0\n  %52 = shufflevector <4 x float> %51, <4 x float> poison, <4 x i32> zeroinitializer\n  %53 = add i64 %48, -4\n  %54 = lshr exact i64 %53, 2\n  %55 = add nuw nsw i64 %54, 1\n  %56 = and i64 %55, 1\n  %57 = icmp eq i64 %53, 0\n  br i1 %57, label %79, label %58\n\n58:                                               ; preds = %47\n  %59 = and i64 %55, 9223372036854775806\n  br label %60\n\n60:                                               ; preds = %60, %58\n  %61 = phi i64 [ 0, %58 ], [ %76, %60 ]\n  %62 = phi i64 [ %59, %58 ], [ %77, %60 ]\n  %63 = getelementptr inbounds float, float* %6, i64 %61\n  %64 = bitcast float* %63 to <4 x float>*\n  %65 = load <4 x float>, <4 x float>* %64, align 4, !tbaa !9\n  %66 = fsub <4 x float> %65, %50\n  %67 = fdiv <4 x float> %66, %52\n  %68 = bitcast float* %63 to <4 x float>*\n  store <4 x float> %67, <4 x float>* %68, align 4, !tbaa !9\n  %69 = or i64 %61, 4\n  %70 = getelementptr inbounds float, float* %6, i64 %69\n  %71 = bitcast float* %70 to <4 x float>*\n  %72 = load <4 x float>, <4 x float>* %71, align 4, !tbaa !9\n  %73 = fsub <4 x float> %72, %50\n  %74 = fdiv <4 x float> %73, %52\n  %75 = bitcast float* %70 to <4 x float>*\n  store <4 x float> %74, <4 x float>* %75, align 4, !tbaa !9\n  %76 = add nuw i64 %61, 8\n  %77 = add i64 %62, -2\n  %78 = icmp eq i64 %77, 0\n  br i1 %78, label %79, label %60, !llvm.loop !13\n\n79:                                               ; preds = %60, %47\n  %80 = phi i64 [ 0, %47 ], [ %76, %60 ]\n  %81 = icmp eq i64 %56, 0\n  br i1 %81, label %89, label %82\n\n82:                                               ; preds = %79\n  %83 = getelementptr inbounds float, float* %6, i64 %80\n  %84 = bitcast float* %83 to <4 x float>*\n  %85 = load <4 x float>, <4 x float>* %84, align 4, !tbaa !9\n  %86 = fsub <4 x float> %85, %50\n  %87 = fdiv <4 x float> %86, %52\n  %88 = bitcast float* %83 to <4 x float>*\n  store <4 x float> %87, <4 x float>* %88, align 4, !tbaa !9\n  br label %89\n\n89:                                               ; preds = %79, %82\n  %90 = icmp eq i64 %45, %48\n  br i1 %90, label %128, label %91\n\n91:                                               ; preds = %44, %89\n  %92 = phi i64 [ 0, %44 ], [ %48, %89 ]\n  br label %135\n\n93:                                               ; preds = %93, %17\n  %94 = phi i64 [ 0, %17 ], [ %125, %93 ]\n  %95 = phi float [ -1.000000e+05, %17 ], [ %124, %93 ]\n  %96 = phi float [ 1.000000e+05, %17 ], [ %122, %93 ]\n  %97 = phi i64 [ %18, %17 ], [ %126, %93 ]\n  %98 = getelementptr inbounds float, float* %6, i64 %94\n  %99 = load float, float* %98, align 4, !tbaa !9\n  %100 = fcmp olt float %99, %96\n  %101 = select i1 %100, float %99, float %96\n  %102 = fcmp ogt float %99, %95\n  %103 = select i1 %102, float %99, float %95\n  %104 = or i64 %94, 1\n  %105 = getelementptr inbounds float, float* %6, i64 %104\n  %106 = load float, float* %105, align 4, !tbaa !9\n  %107 = fcmp olt float %106, %101\n  %108 = select i1 %107, float %106, float %101\n  %109 = fcmp ogt float %106, %103\n  %110 = select i1 %109, float %106, float %103\n  %111 = or i64 %94, 2\n  %112 = getelementptr inbounds float, float* %6, i64 %111\n  %113 = load float, float* %112, align 4, !tbaa !9\n  %114 = fcmp olt float %113, %108\n  %115 = select i1 %114, float %113, float %108\n  %116 = fcmp ogt float %113, %110\n  %117 = select i1 %116, float %113, float %110\n  %118 = or i64 %94, 3\n  %119 = getelementptr inbounds float, float* %6, i64 %118\n  %120 = load float, float* %119, align 4, !tbaa !9\n  %121 = fcmp olt float %120, %115\n  %122 = select i1 %121, float %120, float %115\n  %123 = fcmp ogt float %120, %117\n  %124 = select i1 %123, float %120, float %117\n  %125 = add nuw nsw i64 %94, 4\n  %126 = add i64 %97, -4\n  %127 = icmp eq i64 %126, 0\n  br i1 %127, label %19, label %93, !llvm.loop !16\n\n128:                                              ; preds = %135, %89, %2, %40\n  %129 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0, i64 0, i32 0, i32 0, i32 0, i32 0\n  store float* %6, float** %129, align 8, !tbaa !8\n  %130 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0, i64 0, i32 0, i32 0, i32 0, i32 1\n  store float* %4, float** %130, align 8, !tbaa !3\n  %131 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0, i64 0, i32 0, i32 0, i32 0, i32 2\n  %132 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %1, i64 0, i32 0, i32 0, i32 0, i32 2\n  %133 = load float*, float** %132, align 8, !tbaa !17\n  store float* %133, float** %131, align 8, !tbaa !17\n  %134 = bitcast %\"class.std::vector\"* %1 to i8*\n  tail call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(24) %134, i8 0, i64 24, i1 false) #3\n  ret void\n\n135:                                              ; preds = %91, %135\n  %136 = phi i64 [ %141, %135 ], [ %92, %91 ]\n  %137 = getelementptr inbounds float, float* %6, i64 %136\n  %138 = load float, float* %137, align 4, !tbaa !9\n  %139 = fsub float %138, %41\n  %140 = fdiv float %139, %43\n  store float %140, float* %137, align 4, !tbaa !9\n  %141 = add nuw nsw i64 %136, 1\n  %142 = icmp eq i64 %141, %45\n  br i1 %142, label %128, label %135, !llvm.loop !18\n}\n\n; Function Attrs: argmemonly nofree nounwind willreturn writeonly\ndeclare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1\n\n; Function Attrs: nofree nosync nounwind readnone speculatable willreturn\ndeclare i64 @llvm.umax.i64(i64, i64) #2\n\nattributes #0 = { nofree nosync nounwind uwtable \"frame-pointer\"=\"none\" \"min-legal-vector-width\"=\"0\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #1 = { argmemonly nofree nounwind willreturn writeonly }\nattributes #2 = { nofree nosync nounwind readnone speculatable willreturn }\nattributes #3 = { nounwind }\n\n!llvm.module.flags = !{!0, !1}\n!llvm.ident = !{!2}\n\n!0 = !{i32 1, !\"wchar_size\", i32 4}\n!1 = !{i32 7, !\"uwtable\", i32 1}\n!2 = !{!\"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)\"}\n!3 = !{!4, !5, i64 8}\n!4 = !{!\"_ZTSNSt12_Vector_baseIfSaIfEE17_Vector_impl_dataE\", !5, i64 0, !5, i64 8, !5, i64 16}\n!5 = !{!\"any pointer\", !6, i64 0}\n!6 = !{!\"omnipotent char\", !7, i64 0}\n!7 = !{!\"Simple C++ TBAA\"}\n!8 = !{!4, !5, i64 0}\n!9 = !{!10, !10, i64 0}\n!10 = !{!\"float\", !6, i64 0}\n!11 = distinct !{!11, !12}\n!12 = !{!\"llvm.loop.unroll.disable\"}\n!13 = distinct !{!13, !14, !15}\n!14 = !{!\"llvm.loop.mustprogress\"}\n!15 = !{!\"llvm.loop.isvectorized\", i32 1}\n!16 = distinct !{!16, !14}\n!17 = !{!4, !5, i64 16}\n!18 = distinct !{!18, !14, !19, !15}\n!19 = !{!\"llvm.loop.unroll.runtime.disable\"}\n", "target": "This is the targeted source code:\n/*\nGiven vector of numbers (of at least two elements), apply a linear transform to that vector,\nsuch that the smallest number will become 0 and the largest will become 1\n>>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})\n{0.0, 0.25, 0.5, 0.75, 1.0}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nvector<float> rescale_to_unit(vector<float> numbers){ \n\n    float min=100000,max=-100000;\n    for (int i=0;i<numbers.size();i++)\n        {\n            if (numbers[i]<min) min=numbers[i];\n            if (numbers[i]>max) max=numbers[i];\n        }\n    for (int i=0;i<numbers.size();i++)\n        numbers[i]=(numbers[i]-min)/(max-min);\n    return numbers;\n}\n"}
{"input": "Convert this to C++:\n; ModuleID = '../../Human_xBenchmarks_164/CPP_22/CPP_22.cpp'\nsource_filename = \"../../Human_xBenchmarks_164/CPP_22/CPP_22.cpp\"\ntarget datalayout = \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\ntarget triple = \"x86_64-unknown-linux-gnu\"\n\n%\"class.std::vector\" = type { %\"struct.std::_Vector_base\" }\n%\"struct.std::_Vector_base\" = type { %\"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl\" }\n%\"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl\" = type { %\"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl_data\" }\n%\"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl_data\" = type { i32*, i32*, i32* }\n%\"class.std::__cxx11::list\" = type { %\"class.std::__cxx11::_List_base\" }\n%\"class.std::__cxx11::_List_base\" = type { %\"struct.std::__cxx11::_List_base<boost::any, std::allocator<boost::any>>::_List_impl\" }\n%\"struct.std::__cxx11::_List_base<boost::any, std::allocator<boost::any>>::_List_impl\" = type { %\"struct.std::__detail::_List_node_header\" }\n%\"struct.std::__detail::_List_node_header\" = type { %\"struct.std::__detail::_List_node_base\", i64 }\n%\"struct.std::__detail::_List_node_base\" = type { %\"struct.std::__detail::_List_node_base\"*, %\"struct.std::__detail::_List_node_base\"* }\n%\"class.boost::bad_any_cast\" = type { %\"class.std::bad_cast\" }\n%\"class.std::bad_cast\" = type { %\"class.std::exception\" }\n%\"class.std::exception\" = type { i32 (...)** }\n%\"class.boost::any::placeholder\" = type { i32 (...)** }\n%\"class.std::type_info\" = type { i32 (...)**, i8* }\n%\"class.boost::any::holder\" = type <{ %\"class.boost::any::placeholder\", i32, [4 x i8] }>\n%\"struct.boost::exception_detail::error_info_injector\" = type <{ %\"class.boost::bad_any_cast\", %\"class.boost::exception.base\", [4 x i8] }>\n%\"class.boost::exception.base\" = type <{ i32 (...)**, %\"class.boost::exception_detail::refcount_ptr\", i8*, i8*, i32 }>\n%\"class.boost::exception_detail::refcount_ptr\" = type { %\"struct.boost::exception_detail::error_info_container\"* }\n%\"struct.boost::exception_detail::error_info_container\" = type { i32 (...)** }\n%\"class.boost::exception\" = type <{ i32 (...)**, %\"class.boost::exception_detail::refcount_ptr\", i8*, i8*, i32, [4 x i8] }>\n%\"class.boost::exception_detail::clone_impl\" = type { %\"struct.boost::exception_detail::error_info_injector.base\", %\"class.boost::exception_detail::clone_base\" }\n%\"struct.boost::exception_detail::error_info_injector.base\" = type <{ %\"class.boost::bad_any_cast\", %\"class.boost::exception.base\" }>\n%\"class.boost::exception_detail::clone_base\" = type { i32 (...)** }\n\n$__clang_call_terminate = comdat any\n\n$_ZN5boost15throw_exceptionINS_12bad_any_castEEEvRKT_ = comdat any\n\n$_ZN5boost16exception_detail10clone_implINS0_19error_info_injectorINS_12bad_any_castEEEED1Ev = comdat any\n\n$_ZN5boost16exception_detail19error_info_injectorINS_12bad_any_castEED2Ev = comdat any\n\n$_ZN5boost16exception_detail20copy_boost_exceptionEPNS_9exceptionEPKS1_ = comdat any\n\n$_ZN5boost16exception_detail10clone_implINS0_19error_info_injectorINS_12bad_any_castEEEED0Ev = comdat any\n\n$_ZNK5boost12bad_any_cast4whatEv = comdat any\n\n$_ZNK5boost16exception_detail10clone_implINS0_19error_info_injectorINS_12bad_any_castEEEE5cloneEv = comdat any\n\n$_ZNK5boost16exception_detail10clone_implINS0_19error_info_injectorINS_12bad_any_castEEEE7rethrowEv = comdat any\n\n$_ZThn8_N5boost16exception_detail10clone_implINS0_19error_info_injectorINS_12bad_any_castEEEED1Ev = comdat any\n\n$_ZThn8_N5boost16exception_detail10clone_implINS0_19error_info_injectorINS_12bad_any_castEEEED0Ev = comdat any\n\n$_ZTv0_n24_NK5boost16exception_detail10clone_implINS0_19error_info_injectorINS_12bad_any_castEEEE5cloneEv = comdat any\n\n$_ZTv0_n32_NK5boost16exception_detail10clone_implINS0_19error_info_injectorINS_12bad_any_castEEEE7rethrowEv = comdat any\n\n$_ZTv0_n40_N5boost16exception_detail10clone_implINS0_19error_info_injectorINS_12bad_any_castEEEED1Ev = comdat any\n\n$_ZTv0_n40_N5boost16exception_detail10clone_implINS0_19error_info_injectorINS_12bad_any_castEEEED0Ev = comdat any\n\n$_ZN5boost16exception_detail10clone_baseD2Ev = comdat any\n\n$_ZN5boost16exception_detail10clone_baseD0Ev = comdat any\n\n$_ZN5boost16exception_detail19error_info_injectorINS_12bad_any_castEED0Ev = comdat any\n\n$_ZThn8_N5boost16exception_detail19error_info_injectorINS_12bad_any_castEED1Ev = comdat any\n\n$_ZThn8_N5boost16exception_detail19error_info_injectorINS_12bad_any_castEED0Ev = comdat any\n\n$_ZN5boost12bad_any_castD0Ev = comdat any\n\n$_ZN5boost16exception_detail10clone_implINS0_19error_info_injectorINS_12bad_any_castEEEEC1ERKS5_NS5_9clone_tagE = comdat any\n\n$_ZN5boost16exception_detail10clone_implINS0_19error_info_injectorINS_12bad_any_castEEEEC1ERKS5_ = comdat any\n\n$_ZTSN5boost16exception_detail10clone_implINS0_19error_info_injectorINS_12bad_any_castEEEEE = comdat any\n\n$_ZTSN5boost16exception_detail19error_info_injectorINS_12bad_any_castEEE = comdat any\n\n$_ZTSN5boost12bad_any_castE = comdat any\n\n$_ZTIN5boost12bad_any_castE = comdat any\n\n$_ZTSN5boost9exceptionE = comdat any\n\n$_ZTIN5boost9exceptionE = comdat any\n\n$_ZTIN5boost16exception_detail19error_info_injectorINS_12bad_any_castEEE = comdat any\n\n$_ZTSN5boost16exception_detail10clone_baseE = comdat any\n\n$_ZTIN5boost16exception_detail10clone_baseE = comdat any\n\n$_ZTIN5boost16exception_detail10clone_implINS0_19error_info_injectorINS_12bad_any_castEEEEE = comdat any\n\n$_ZTVN5boost16exception_detail10clone_implINS0_19error_info_injectorINS_12bad_any_castEEEEE = comdat any\n\n$_ZTVN5boost16exception_detail10clone_baseE = comdat any\n\n$_ZTVN5boost16exception_detail19error_info_injectorINS_12bad_any_castEEE = comdat any\n\n$_ZTVN5boost12bad_any_castE = comdat any\n\n$_ZTVN5boost9exceptionE = comdat any\n\n@_ZTIi = external dso_local local_unnamed_addr constant i8*\n@_ZTIv = external dso_local local_unnamed_addr constant i8*\n@_ZTVN10__cxxabiv121__vmi_class_type_infoE = external dso_local global i8*\n@_ZTSN5boost16exception_detail10clone_implINS0_19error_info_injectorINS_12bad_any_castEEEEE = linkonce_odr dso_local constant [87 x i8] c\"N5boost16exception_detail10clone_implINS0_19error_info_injectorINS_12bad_any_castEEEEE\\00\", comdat, align 1\n@_ZTSN5boost16exception_detail19error_info_injectorINS_12bad_any_castEEE = linkonce_odr dso_local constant [68 x i8] c\"N5boost16exception_detail19error_info_injectorINS_12bad_any_castEEE\\00\", comdat, align 1\n@_ZTVN10__cxxabiv120__si_class_type_infoE = external dso_local global i8*\n@_ZTSN5boost12bad_any_castE = linkonce_odr dso_local constant [23 x i8] c\"N5boost12bad_any_castE\\00\", comdat, align 1\n@_ZTISt8bad_cast = external dso_local constant i8*\n@_ZTIN5boost12bad_any_castE = linkonce_odr dso_local constant { i8*, i8*, i8* } { i8* bitcast (i8** getelementptr inbounds (i8*, i8** @_ZTVN10__cxxabiv120__si_class_type_infoE, i64 2) to i8*), i8* getelementptr inbounds ([23 x i8], [23 x i8]* @_ZTSN5boost12bad_any_castE, i32 0, i32 0), i8* bitcast (i8** @_ZTISt8bad_cast to i8*) }, comdat, align 8\n@_ZTVN10__cxxabiv117__class_type_infoE = external dso_local global i8*\n@_ZTSN5boost9exceptionE = linkonce_odr dso_local constant [19 x i8] c\"N5boost9exceptionE\\00\", comdat, align 1\n@_ZTIN5boost9exceptionE = linkonce_odr dso_local constant { i8*, i8* } { i8* bitcast (i8** getelementptr inbounds (i8*, i8** @_ZTVN10__cxxabiv117__class_type_infoE, i64 2) to i8*), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @_ZTSN5boost9exceptionE, i32 0, i32 0) }, comdat, align 8\n@_ZTIN5boost16exception_detail19error_info_injectorINS_12bad_any_castEEE = linkonce_odr dso_local constant { i8*, i8*, i32, i32, i8*, i64, i8*, i64 } { i8* bitcast (i8** getelementptr inbounds (i8*, i8** @_ZTVN10__cxxabiv121__vmi_class_type_infoE, i64 2) to i8*), i8* getelementptr inbounds ([68 x i8], [68 x i8]* @_ZTSN5boost16exception_detail19error_info_injectorINS_12bad_any_castEEE, i32 0, i32 0), i32 0, i32 2, i8* bitcast ({ i8*, i8*, i8* }* @_ZTIN5boost12bad_any_castE to i8*), i64 2, i8* bitcast ({ i8*, i8* }* @_ZTIN5boost9exceptionE to i8*), i64 2050 }, comdat, align 8\n@_ZTSN5boost16exception_detail10clone_baseE = linkonce_odr dso_local constant [39 x i8] c\"N5boost16exception_detail10clone_baseE\\00\", comdat, align 1\n@_ZTIN5boost16exception_detail10clone_baseE = linkonce_odr dso_local constant { i8*, i8* } { i8* bitcast (i8** getelementptr inbounds (i8*, i8** @_ZTVN10__cxxabiv117__class_type_infoE, i64 2) to i8*), i8* getelementptr inbounds ([39 x i8], [39 x i8]* @_ZTSN5boost16exception_detail10clone_baseE, i32 0, i32 0) }, comdat, align 8\n@_ZTIN5boost16exception_detail10clone_implINS0_19error_info_injectorINS_12bad_any_castEEEEE = linkonce_odr dso_local constant { i8*, i8*, i32, i32, i8*, i64, i8*, i64 } { i8* bitcast (i8** getelementptr inbounds (i8*, i8** @_ZTVN10__cxxabiv121__vmi_class_type_infoE, i64 2) to i8*), i8* getelementptr inbounds ([87 x i8], [87 x i8]* @_ZTSN5boost16exception_detail10clone_implINS0_19error_info_injectorINS_12bad_any_castEEEEE, i32 0, i32 0), i32 0, i32 2, i8* bitcast ({ i8*, i8*, i32, i32, i8*, i64, i8*, i64 }* @_ZTIN5boost16exception_detail19error_info_injectorINS_12bad_any_castEEE to i8*), i64 2, i8* bitcast ({ i8*, i8* }* @_ZTIN5boost16exception_detail10clone_baseE to i8*), i64 -6141 }, comdat, align 8\n@_ZTVN5boost16exception_detail10clone_implINS0_19error_info_injectorINS_12bad_any_castEEEEE = linkonce_odr dso_local unnamed_addr constant { [8 x i8*], [4 x i8*], [9 x i8*] } { [8 x i8*] [i8* inttoptr (i64 48 to i8*), i8* null, i8* bitcast ({ i8*, i8*, i32, i32, i8*, i64, i8*, i64 }* @_ZTIN5boost16exception_detail10clone_implINS0_19error_info_injectorINS_12bad_any_castEEEEE to i8*), i8* bitcast (void (%\"class.boost::exception_detail::clone_impl\"*)* @_ZN5boost16exception_detail10clone_implINS0_19error_info_injectorINS_12bad_any_castEEEED1Ev to i8*), i8* bitcast (void (%\"class.boost::exception_detail::clone_impl\"*)* @_ZN5boost16exception_detail10clone_implINS0_19error_info_injectorINS_12bad_any_castEEEED0Ev to i8*), i8* bitcast (i8* (%\"class.boost::bad_any_cast\"*)* @_ZNK5boost12bad_any_cast4whatEv to i8*), i8* bitcast (%\"class.boost::exception_detail::clone_base\"* (%\"class.boost::exception_detail::clone_impl\"*)* @_ZNK5boost16exception_detail10clone_implINS0_19error_info_injectorINS_12bad_any_castEEEE5cloneEv to i8*), i8* bitcast (void (%\"class.boost::exception_detail::clone_impl\"*)* @_ZNK5boost16exception_detail10clone_implINS0_19error_info_injectorINS_12bad_any_castEEEE7rethrowEv to i8*)], [4 x i8*] [i8* inttoptr (i64 -8 to i8*), i8* bitcast ({ i8*, i8*, i32, i32, i8*, i64, i8*, i64 }* @_ZTIN5boost16exception_detail10clone_implINS0_19error_info_injectorINS_12bad_any_castEEEEE to i8*), i8* bitcast (void (%\"class.boost::exception_detail::clone_impl\"*)* @_ZThn8_N5boost16exception_detail10clone_implINS0_19error_info_injectorINS_12bad_any_castEEEED1Ev to i8*), i8* bitcast (void (%\"class.boost::exception_detail::clone_impl\"*)* @_ZThn8_N5boost16exception_detail10clone_implINS0_19error_info_injectorINS_12bad_any_castEEEED0Ev to i8*)], [9 x i8*] [i8* inttoptr (i64 -48 to i8*), i8* inttoptr (i64 -48 to i8*), i8* inttoptr (i64 -48 to i8*), i8* inttoptr (i64 -48 to i8*), i8* bitcast ({ i8*, i8*, i32, i32, i8*, i64, i8*, i64 }* @_ZTIN5boost16exception_detail10clone_implINS0_19error_info_injectorINS_12bad_any_castEEEEE to i8*), i8* bitcast (%\"class.boost::exception_detail::clone_base\"* (%\"class.boost::exception_detail::clone_impl\"*)* @_ZTv0_n24_NK5boost16exception_detail10clone_implINS0_19error_info_injectorINS_12bad_any_castEEEE5cloneEv to i8*), i8* bitcast (void (%\"class.boost::exception_detail::clone_impl\"*)* @_ZTv0_n32_NK5boost16exception_detail10clone_implINS0_19error_info_injectorINS_12bad_any_castEEEE7rethrowEv to i8*), i8* bitcast (void (%\"class.boost::exception_detail::clone_impl\"*)* @_ZTv0_n40_N5boost16exception_detail10clone_implINS0_19error_info_injectorINS_12bad_any_castEEEED1Ev to i8*), i8* bitcast (void (%\"class.boost::exception_detail::clone_impl\"*)* @_ZTv0_n40_N5boost16exception_detail10clone_implINS0_19error_info_injectorINS_12bad_any_castEEEED0Ev to i8*)] }, comdat, align 8\n@_ZTVN5boost16exception_detail10clone_baseE = linkonce_odr dso_local unnamed_addr constant { [6 x i8*] } { [6 x i8*] [i8* null, i8* bitcast ({ i8*, i8* }* @_ZTIN5boost16exception_detail10clone_baseE to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void (%\"class.boost::exception_detail::clone_base\"*)* @_ZN5boost16exception_detail10clone_baseD2Ev to i8*), i8* bitcast (void (%\"class.boost::exception_detail::clone_base\"*)* @_ZN5boost16exception_detail10clone_baseD0Ev to i8*)] }, comdat, align 8\n@_ZTVN5boost16exception_detail19error_info_injectorINS_12bad_any_castEEE = linkonce_odr dso_local unnamed_addr constant { [5 x i8*], [4 x i8*] } { [5 x i8*] [i8* null, i8* bitcast ({ i8*, i8*, i32, i32, i8*, i64, i8*, i64 }* @_ZTIN5boost16exception_detail19error_info_injectorINS_12bad_any_castEEE to i8*), i8* bitcast (void (%\"struct.boost::exception_detail::error_info_injector\"*)* @_ZN5boost16exception_detail19error_info_injectorINS_12bad_any_castEED2Ev to i8*), i8* bitcast (void (%\"struct.boost::exception_detail::error_info_injector\"*)* @_ZN5boost16exception_detail19error_info_injectorINS_12bad_any_castEED0Ev to i8*), i8* bitcast (i8* (%\"class.boost::bad_any_cast\"*)* @_ZNK5boost12bad_any_cast4whatEv to i8*)], [4 x i8*] [i8* inttoptr (i64 -8 to i8*), i8* bitcast ({ i8*, i8*, i32, i32, i8*, i64, i8*, i64 }* @_ZTIN5boost16exception_detail19error_info_injectorINS_12bad_any_castEEE to i8*), i8* bitcast (void (%\"struct.boost::exception_detail::error_info_injector\"*)* @_ZThn8_N5boost16exception_detail19error_info_injectorINS_12bad_any_castEED1Ev to i8*), i8* bitcast (void (%\"struct.boost::exception_detail::error_info_injector\"*)* @_ZThn8_N5boost16exception_detail19error_info_injectorINS_12bad_any_castEED0Ev to i8*)] }, comdat, align 8\n@_ZTVN5boost12bad_any_castE = linkonce_odr dso_local unnamed_addr constant { [5 x i8*] } { [5 x i8*] [i8* null, i8* bitcast ({ i8*, i8*, i8* }* @_ZTIN5boost12bad_any_castE to i8*), i8* bitcast (void (%\"class.std::bad_cast\"*)* @_ZNSt8bad_castD2Ev to i8*), i8* bitcast (void (%\"class.boost::bad_any_cast\"*)* @_ZN5boost12bad_any_castD0Ev to i8*), i8* bitcast (i8* (%\"class.boost::bad_any_cast\"*)* @_ZNK5boost12bad_any_cast4whatEv to i8*)] }, comdat, align 8\n@_ZTVN5boost9exceptionE = linkonce_odr dso_local unnamed_addr constant { [4 x i8*] } { [4 x i8*] [i8* null, i8* bitcast ({ i8*, i8* }* @_ZTIN5boost9exceptionE to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*)] }, comdat, align 8\n@.str = private unnamed_addr constant [61 x i8] c\"boost::bad_any_cast: failed conversion using boost::any_cast\\00\", align 1\n@.str.1 = private unnamed_addr constant [26 x i8] c\"vector::_M_realloc_insert\\00\", align 1\n\n; Function Attrs: uwtable\ndefine dso_local void @_Z15filter_integersNSt7__cxx114listIN5boost3anyESaIS2_EEE(%\"class.std::vector\"* noalias nocapture sret(%\"class.std::vector\") align 8 %0, %\"class.std::__cxx11::list\"* %1) local_unnamed_addr #0 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {\n  %3 = alloca %\"class.boost::bad_any_cast\", align 8\n  %4 = bitcast %\"class.std::vector\"* %0 to i8*\n  tail call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(24) %4, i8 0, i64 24, i1 false) #17\n  %5 = getelementptr inbounds %\"class.std::__cxx11::list\", %\"class.std::__cxx11::list\"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0\n  %6 = getelementptr inbounds %\"class.std::__cxx11::list\", %\"class.std::__cxx11::list\"* %1, i64 0, i32 0, i32 0, i32 0, i32 0\n  %7 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0, i64 0, i32 0, i32 0, i32 0, i32 1\n  %8 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0, i64 0, i32 0, i32 0, i32 0, i32 2\n  %9 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0, i64 0, i32 0, i32 0, i32 0, i32 0\n  %10 = load %\"struct.std::__detail::_List_node_base\"*, %\"struct.std::__detail::_List_node_base\"** %5, align 8, !tbaa !3\n  %11 = icmp eq %\"struct.std::__detail::_List_node_base\"* %10, %6\n  br i1 %11, label %152, label %12\n\n12:                                               ; preds = %2, %138\n  %13 = phi i32* [ %139, %138 ], [ null, %2 ]\n  %14 = phi i32* [ %140, %138 ], [ null, %2 ]\n  %15 = phi i32* [ %141, %138 ], [ null, %2 ]\n  %16 = phi %\"struct.std::__detail::_List_node_base\"* [ %143, %138 ], [ %10, %2 ]\n  %17 = phi %\"class.boost::any::placeholder\"* [ %29, %138 ], [ null, %2 ]\n  %18 = getelementptr inbounds %\"struct.std::__detail::_List_node_base\", %\"struct.std::__detail::_List_node_base\"* %16, i64 1\n  %19 = bitcast %\"struct.std::__detail::_List_node_base\"* %18 to %\"class.boost::any::placeholder\"**\n  %20 = load %\"class.boost::any::placeholder\"*, %\"class.boost::any::placeholder\"** %19, align 8, !tbaa !8\n  %21 = icmp eq %\"class.boost::any::placeholder\"* %20, null\n  br i1 %21, label %28, label %22\n\n22:                                               ; preds = %12\n  %23 = bitcast %\"class.boost::any::placeholder\"* %20 to %\"class.boost::any::placeholder\"* (%\"class.boost::any::placeholder\"*)***\n  %24 = load %\"class.boost::any::placeholder\"* (%\"class.boost::any::placeholder\"*)**, %\"class.boost::any::placeholder\"* (%\"class.boost::any::placeholder\"*)*** %23, align 8, !tbaa !10\n  %25 = getelementptr inbounds %\"class.boost::any::placeholder\"* (%\"class.boost::any::placeholder\"*)*, %\"class.boost::any::placeholder\"* (%\"class.boost::any::placeholder\"*)** %24, i64 3\n  %26 = load %\"class.boost::any::placeholder\"* (%\"class.boost::any::placeholder\"*)*, %\"class.boost::any::placeholder\"* (%\"class.boost::any::placeholder\"*)** %25, align 8\n  %27 = invoke %\"class.boost::any::placeholder\"* %26(%\"class.boost::any::placeholder\"* nonnull align 8 dereferenceable(8) %20)\n          to label %28 unwind label %132\n\n28:                                               ; preds = %22, %12\n  %29 = phi %\"class.boost::any::placeholder\"* [ null, %12 ], [ %27, %22 ]\n  %30 = icmp eq %\"class.boost::any::placeholder\"* %17, null\n  br i1 %30, label %36, label %31\n\n31:                                               ; preds = %28\n  %32 = bitcast %\"class.boost::any::placeholder\"* %17 to void (%\"class.boost::any::placeholder\"*)***\n  %33 = load void (%\"class.boost::any::placeholder\"*)**, void (%\"class.boost::any::placeholder\"*)*** %32, align 8, !tbaa !10\n  %34 = getelementptr inbounds void (%\"class.boost::any::placeholder\"*)*, void (%\"class.boost::any::placeholder\"*)** %33, i64 1\n  %35 = load void (%\"class.boost::any::placeholder\"*)*, void (%\"class.boost::any::placeholder\"*)** %34, align 8\n  tail call void %35(%\"class.boost::any::placeholder\"* nonnull align 8 dereferenceable(8) %17) #17\n  br label %36\n\n36:                                               ; preds = %31, %28\n  %37 = icmp eq %\"class.boost::any::placeholder\"* %29, null\n  br i1 %37, label %44, label %38\n\n38:                                               ; preds = %36\n  %39 = bitcast %\"class.boost::any::placeholder\"* %29 to %\"class.std::type_info\"* (%\"class.boost::any::placeholder\"*)***\n  %40 = load %\"class.std::type_info\"* (%\"class.boost::any::placeholder\"*)**, %\"class.std::type_info\"* (%\"class.boost::any::placeholder\"*)*** %39, align 8, !tbaa !10\n  %41 = getelementptr inbounds %\"class.std::type_info\"* (%\"class.boost::any::placeholder\"*)*, %\"class.std::type_info\"* (%\"class.boost::any::placeholder\"*)** %40, i64 2\n  %42 = load %\"class.std::type_info\"* (%\"class.boost::any::placeholder\"*)*, %\"class.std::type_info\"* (%\"class.boost::any::placeholder\"*)** %41, align 8\n  %43 = tail call nonnull align 8 dereferenceable(16) %\"class.std::type_info\"* %42(%\"class.boost::any::placeholder\"* nonnull align 8 dereferenceable(8) %29) #17\n  br label %44\n\n44:                                               ; preds = %36, %38\n  %45 = phi %\"class.std::type_info\"* [ %43, %38 ], [ bitcast (i8** @_ZTIv to %\"class.std::type_info\"*), %36 ]\n  %46 = getelementptr inbounds %\"class.std::type_info\", %\"class.std::type_info\"* %45, i64 0, i32 1\n  %47 = load i8*, i8** %46, align 8, !tbaa !12\n  %48 = load i8*, i8** getelementptr inbounds (i8*, i8** @_ZTIi, i64 1), align 8, !tbaa !12\n  %49 = icmp eq i8* %47, %48\n  br i1 %49, label %56, label %50\n\n50:                                               ; preds = %44\n  %51 = load i8, i8* %47, align 1, !tbaa !14\n  %52 = icmp eq i8 %51, 42\n  br i1 %52, label %138, label %53\n\n53:                                               ; preds = %50\n  %54 = tail call i32 @strcmp(i8* noundef nonnull %47, i8* noundef nonnull dereferenceable(1) %48) #17\n  %55 = icmp eq i32 %54, 0\n  br i1 %55, label %56, label %138\n\n56:                                               ; preds = %44, %53\n  %57 = load %\"class.boost::any::placeholder\"*, %\"class.boost::any::placeholder\"** %19, align 8, !tbaa !8\n  %58 = icmp eq %\"class.boost::any::placeholder\"* %57, null\n  br i1 %58, label %65, label %59\n\n59:                                               ; preds = %56\n  %60 = bitcast %\"class.boost::any::placeholder\"* %57 to %\"class.std::type_info\"* (%\"class.boost::any::placeholder\"*)***\n  %61 = load %\"class.std::type_info\"* (%\"class.boost::any::placeholder\"*)**, %\"class.std::type_info\"* (%\"class.boost::any::placeholder\"*)*** %60, align 8, !tbaa !10\n  %62 = getelementptr inbounds %\"class.std::type_info\"* (%\"class.boost::any::placeholder\"*)*, %\"class.std::type_info\"* (%\"class.boost::any::placeholder\"*)** %61, i64 2\n  %63 = load %\"class.std::type_info\"* (%\"class.boost::any::placeholder\"*)*, %\"class.std::type_info\"* (%\"class.boost::any::placeholder\"*)** %62, align 8\n  %64 = tail call nonnull align 8 dereferenceable(16) %\"class.std::type_info\"* %63(%\"class.boost::any::placeholder\"* nonnull align 8 dereferenceable(8) %57) #17\n  br label %65\n\n65:                                               ; preds = %59, %56\n  %66 = phi %\"class.std::type_info\"* [ %64, %59 ], [ bitcast (i8** @_ZTIv to %\"class.std::type_info\"*), %56 ]\n  %67 = getelementptr inbounds %\"class.std::type_info\", %\"class.std::type_info\"* %66, i64 0, i32 1\n  %68 = load i8*, i8** %67, align 8, !tbaa !12\n  %69 = load i8, i8* %68, align 1, !tbaa !14\n  %70 = icmp eq i8 %69, 42\n  %71 = zext i1 %70 to i64\n  %72 = getelementptr i8, i8* %68, i64 %71\n  %73 = load i8, i8* %48, align 1, !tbaa !14\n  %74 = icmp eq i8 %73, 42\n  %75 = zext i1 %74 to i64\n  %76 = getelementptr i8, i8* %48, i64 %75\n  %77 = icmp eq i8* %72, %76\n  br i1 %77, label %88, label %78\n\n78:                                               ; preds = %65\n  %79 = tail call i32 @strcmp(i8* noundef nonnull dereferenceable(1) %72, i8* noundef nonnull dereferenceable(1) %76) #18\n  %80 = icmp eq i32 %79, 0\n  br i1 %80, label %88, label %81\n\n81:                                               ; preds = %78\n  %82 = bitcast %\"class.boost::bad_any_cast\"* %3 to i8*\n  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %82) #17\n  %83 = getelementptr inbounds %\"class.boost::bad_any_cast\", %\"class.boost::bad_any_cast\"* %3, i64 0, i32 0, i32 0, i32 0\n  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*] }, { [5 x i8*] }* @_ZTVN5boost12bad_any_castE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %83, align 8, !tbaa !10\n  invoke void @_ZN5boost15throw_exceptionINS_12bad_any_castEEEvRKT_(%\"class.boost::bad_any_cast\"* nonnull align 8 dereferenceable(8) %3) #19\n          to label %84 unwind label %85\n\n84:                                               ; preds = %81\n  unreachable\n\n85:                                               ; preds = %81\n  %86 = landingpad { i8*, i32 }\n          cleanup\n  %87 = getelementptr inbounds %\"class.boost::bad_any_cast\", %\"class.boost::bad_any_cast\"* %3, i64 0, i32 0\n  call void @_ZNSt8bad_castD2Ev(%\"class.std::bad_cast\"* nonnull align 8 dereferenceable(8) %87) #17\n  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %82) #17\n  br label %153\n\n88:                                               ; preds = %78, %65\n  %89 = bitcast %\"struct.std::__detail::_List_node_base\"* %18 to %\"class.boost::any::holder\"**\n  %90 = load %\"class.boost::any::holder\"*, %\"class.boost::any::holder\"** %89, align 8, !tbaa !8\n  %91 = getelementptr inbounds %\"class.boost::any::holder\", %\"class.boost::any::holder\"* %90, i64 0, i32 1\n  %92 = load i32, i32* %91, align 4, !tbaa !15\n  %93 = icmp eq i32* %15, %14\n  br i1 %93, label %96, label %94\n\n94:                                               ; preds = %88\n  store i32 %92, i32* %15, align 4, !tbaa !15\n  %95 = getelementptr inbounds i32, i32* %15, i64 1\n  store i32* %95, i32** %7, align 8, !tbaa !17\n  br label %138\n\n96:                                               ; preds = %88\n  %97 = ptrtoint i32* %14 to i64\n  %98 = ptrtoint i32* %13 to i64\n  %99 = sub i64 %97, %98\n  %100 = ashr exact i64 %99, 2\n  %101 = icmp eq i64 %99, 9223372036854775804\n  br i1 %101, label %102, label %104\n\n102:                                              ; preds = %96\n  invoke void @_ZSt20__throw_length_errorPKc(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.1, i64 0, i64 0)) #19\n          to label %103 unwind label %136\n\n103:                                              ; preds = %102\n  unreachable\n\n104:                                              ; preds = %96\n  %105 = icmp eq i64 %99, 0\n  %106 = select i1 %105, i64 1, i64 %100\n  %107 = add nsw i64 %106, %100\n  %108 = icmp ult i64 %107, %100\n  %109 = icmp ugt i64 %107, 2305843009213693951\n  %110 = or i1 %108, %109\n  %111 = select i1 %110, i64 2305843009213693951, i64 %107\n  %112 = icmp eq i64 %111, 0\n  br i1 %112, label %118, label %113\n\n113:                                              ; preds = %104\n  %114 = shl nuw nsw i64 %111, 2\n  %115 = invoke noalias nonnull i8* @_Znwm(i64 %114) #20\n          to label %116 unwind label %134\n\n116:                                              ; preds = %113\n  %117 = bitcast i8* %115 to i32*\n  br label %118\n\n118:                                              ; preds = %116, %104\n  %119 = phi i32* [ %117, %116 ], [ null, %104 ]\n  %120 = getelementptr inbounds i32, i32* %119, i64 %100\n  store i32 %92, i32* %120, align 4, !tbaa !15\n  %121 = icmp sgt i64 %99, 0\n  br i1 %121, label %122, label %125\n\n122:                                              ; preds = %118\n  %123 = bitcast i32* %119 to i8*\n  %124 = bitcast i32* %13 to i8*\n  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %123, i8* align 4 %124, i64 %99, i1 false) #17\n  br label %125\n\n125:                                              ; preds = %118, %122\n  %126 = getelementptr inbounds i32, i32* %120, i64 1\n  %127 = icmp eq i32* %13, null\n  br i1 %127, label %130, label %128\n\n128:                                              ; preds = %125\n  %129 = bitcast i32* %13 to i8*\n  tail call void @_ZdlPv(i8* nonnull %129) #17\n  br label %130\n\n130:                                              ; preds = %128, %125\n  store i32* %119, i32** %9, align 8, !tbaa !19\n  store i32* %126, i32** %7, align 8, !tbaa !17\n  %131 = getelementptr inbounds i32, i32* %119, i64 %111\n  store i32* %131, i32** %8, align 8, !tbaa !20\n  br label %138\n\n132:                                              ; preds = %22\n  %133 = landingpad { i8*, i32 }\n          cleanup\n  br label %153\n\n134:                                              ; preds = %113\n  %135 = landingpad { i8*, i32 }\n          cleanup\n  br label %153\n\n136:                                              ; preds = %102\n  %137 = landingpad { i8*, i32 }\n          cleanup\n  br label %153\n\n138:                                              ; preds = %50, %94, %130, %53\n  %139 = phi i32* [ %13, %50 ], [ %13, %94 ], [ %119, %130 ], [ %13, %53 ]\n  %140 = phi i32* [ %14, %50 ], [ %14, %94 ], [ %131, %130 ], [ %14, %53 ]\n  %141 = phi i32* [ %15, %50 ], [ %95, %94 ], [ %126, %130 ], [ %15, %53 ]\n  %142 = getelementptr inbounds %\"struct.std::__detail::_List_node_base\", %\"struct.std::__detail::_List_node_base\"* %16, i64 0, i32 0\n  %143 = load %\"struct.std::__detail::_List_node_base\"*, %\"struct.std::__detail::_List_node_base\"** %142, align 8, !tbaa !3\n  %144 = icmp eq %\"struct.std::__detail::_List_node_base\"* %143, %6\n  br i1 %144, label %145, label %12, !llvm.loop !21\n\n145:                                              ; preds = %138\n  %146 = icmp eq %\"class.boost::any::placeholder\"* %29, null\n  br i1 %146, label %152, label %147\n\n147:                                              ; preds = %145\n  %148 = bitcast %\"class.boost::any::placeholder\"* %29 to void (%\"class.boost::any::placeholder\"*)***\n  %149 = load void (%\"class.boost::any::placeholder\"*)**, void (%\"class.boost::any::placeholder\"*)*** %148, align 8, !tbaa !10\n  %150 = getelementptr inbounds void (%\"class.boost::any::placeholder\"*)*, void (%\"class.boost::any::placeholder\"*)** %149, i64 1\n  %151 = load void (%\"class.boost::any::placeholder\"*)*, void (%\"class.boost::any::placeholder\"*)** %150, align 8\n  tail call void %151(%\"class.boost::any::placeholder\"* nonnull align 8 dereferenceable(8) %29) #17\n  br label %152\n\n152:                                              ; preds = %2, %145, %147\n  ret void\n\n153:                                              ; preds = %134, %136, %85, %132\n  %154 = phi %\"class.boost::any::placeholder\"* [ %17, %132 ], [ %29, %85 ], [ %29, %134 ], [ %29, %136 ]\n  %155 = phi { i8*, i32 } [ %133, %132 ], [ %86, %85 ], [ %135, %134 ], [ %137, %136 ]\n  %156 = icmp eq i32* %13, null\n  br i1 %156, label %159, label %157\n\n157:                                              ; preds = %153\n  %158 = bitcast i32* %13 to i8*\n  call void @_ZdlPv(i8* nonnull %158) #17\n  br label %159\n\n159:                                              ; preds = %153, %157\n  %160 = icmp eq %\"class.boost::any::placeholder\"* %154, null\n  br i1 %160, label %166, label %161\n\n161:                                              ; preds = %159\n  %162 = bitcast %\"class.boost::any::placeholder\"* %154 to void (%\"class.boost::any::placeholder\"*)***\n  %163 = load void (%\"class.boost::any::placeholder\"*)**, void (%\"class.boost::any::placeholder\"*)*** %162, align 8, !tbaa !10\n  %164 = getelementptr inbounds void (%\"class.boost::any::placeholder\"*)*, void (%\"class.boost::any::placeholder\"*)** %163, i64 1\n  %165 = load void (%\"class.boost::any::placeholder\"*)*, void (%\"class.boost::any::placeholder\"*)** %164, align 8\n  call void %165(%\"class.boost::any::placeholder\"* nonnull align 8 dereferenceable(8) %154) #17\n  br label %166\n\n166:                                              ; preds = %159, %161\n  resume { i8*, i32 } %155\n}\n\n; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn\ndeclare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1\n\n; Function Attrs: argmemonly mustprogress nofree nounwind willreturn\ndeclare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #2\n\n; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn\ndeclare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1\n\ndeclare dso_local i32 @__gxx_personality_v0(...)\n\n; Function Attrs: argmemonly mustprogress nofree nounwind readonly willreturn\ndeclare dso_local i32 @strcmp(i8* nocapture, i8* nocapture) local_unnamed_addr #3\n\n; Function Attrs: noinline noreturn nounwind\ndefine linkonce_odr hidden void @__clang_call_terminate(i8* %0) local_unnamed_addr #4 comdat {\n  %2 = tail call i8* @__cxa_begin_catch(i8* %0) #17\n  tail call void @_ZSt9terminatev() #21\n  unreachable\n}\n\ndeclare dso_local i8* @__cxa_begin_catch(i8*) local_unnamed_addr\n\ndeclare dso_local void @_ZSt9terminatev() local_unnamed_addr\n\n; Function Attrs: nobuiltin nounwind\ndeclare dso_local void @_ZdlPv(i8*) local_unnamed_addr #5\n\n; Function Attrs: inlinehint noreturn uwtable\ndefine linkonce_odr dso_local void @_ZN5boost15throw_exceptionINS_12bad_any_castEEEvRKT_(%\"class.boost::bad_any_cast\"* nonnull align 8 dereferenceable(8) %0) local_unnamed_addr #6 comdat personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {\n  %2 = alloca %\"struct.boost::exception_detail::error_info_injector\", align 8\n  %3 = tail call i8* @__cxa_allocate_exception(i64 56) #17\n  %4 = bitcast %\"struct.boost::exception_detail::error_info_injector\"* %2 to i8*\n  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %4) #17\n  %5 = getelementptr inbounds %\"struct.boost::exception_detail::error_info_injector\", %\"struct.boost::exception_detail::error_info_injector\"* %2, i64 0, i32 0, i32 0, i32 0, i32 0\n  %6 = getelementptr inbounds %\"struct.boost::exception_detail::error_info_injector\", %\"struct.boost::exception_detail::error_info_injector\"* %2, i64 0, i32 1, i32 0\n  %7 = getelementptr inbounds %\"struct.boost::exception_detail::error_info_injector\", %\"struct.boost::exception_detail::error_info_injector\"* %2, i64 0, i32 1, i32 1, i32 0\n  %8 = getelementptr inbounds %\"struct.boost::exception_detail::error_info_injector\", %\"struct.boost::exception_detail::error_info_injector\"* %2, i64 0, i32 1, i32 4\n  %9 = bitcast %\"struct.boost::exception_detail::error_info_container\"** %7 to i8*\n  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(24) %9, i8 0, i64 24, i1 false), !alias.scope !23\n  store i32 -1, i32* %8, align 8, !tbaa !26, !alias.scope !23\n  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*], [4 x i8*] }, { [5 x i8*], [4 x i8*] }* @_ZTVN5boost16exception_detail19error_info_injectorINS_12bad_any_castEEE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %5, align 8, !tbaa !10, !alias.scope !23\n  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*], [4 x i8*] }, { [5 x i8*], [4 x i8*] }* @_ZTVN5boost16exception_detail19error_info_injectorINS_12bad_any_castEEE, i64 0, inrange i32 1, i64 2) to i32 (...)**), i32 (...)*** %6, align 8, !tbaa !10, !alias.scope !23\n  %10 = getelementptr inbounds i8, i8* %3, i64 48\n  %11 = bitcast i8* %10 to i32 (...)***\n  %12 = bitcast i8* %3 to i32 (...)***\n  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*] }, { [5 x i8*] }* @_ZTVN5boost12bad_any_castE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %12, align 8, !tbaa !10, !alias.scope !29\n  %13 = getelementptr inbounds i8, i8* %3, i64 8\n  %14 = bitcast i8* %13 to i32 (...)***\n  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [4 x i8*] }, { [4 x i8*] }* @_ZTVN5boost9exceptionE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %14, align 8, !tbaa !10, !alias.scope !29\n  %15 = getelementptr inbounds i8, i8* %3, i64 16\n  %16 = bitcast i8* %15 to %\"struct.boost::exception_detail::error_info_container\"**\n  store %\"struct.boost::exception_detail::error_info_container\"* null, %\"struct.boost::exception_detail::error_info_container\"** %16, align 8, !tbaa !32, !alias.scope !29\n  %17 = getelementptr inbounds i8, i8* %3, i64 24\n  %18 = getelementptr inbounds %\"struct.boost::exception_detail::error_info_injector\", %\"struct.boost::exception_detail::error_info_injector\"* %2, i64 0, i32 1, i32 2\n  %19 = bitcast i8** %18 to i8*\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(20) %17, i8* noundef nonnull align 8 dereferenceable(20) %19, i64 20, i1 false)\n  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [8 x i8*], [4 x i8*], [9 x i8*] }, { [8 x i8*], [4 x i8*], [9 x i8*] }* @_ZTVN5boost16exception_detail10clone_implINS0_19error_info_injectorINS_12bad_any_castEEEEE, i64 0, inrange i32 0, i64 3) to i32 (...)**), i32 (...)*** %12, align 8, !tbaa !10, !alias.scope !29\n  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [8 x i8*], [4 x i8*], [9 x i8*] }, { [8 x i8*], [4 x i8*], [9 x i8*] }* @_ZTVN5boost16exception_detail10clone_implINS0_19error_info_injectorINS_12bad_any_castEEEEE, i64 0, inrange i32 1, i64 2) to i32 (...)**), i32 (...)*** %14, align 8, !tbaa !10, !alias.scope !29\n  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [8 x i8*], [4 x i8*], [9 x i8*] }, { [8 x i8*], [4 x i8*], [9 x i8*] }* @_ZTVN5boost16exception_detail10clone_implINS0_19error_info_injectorINS_12bad_any_castEEEEE, i64 0, inrange i32 2, i64 5) to i32 (...)**), i32 (...)*** %11, align 8, !tbaa !10, !alias.scope !29\n  %20 = bitcast i8* %13 to %\"class.boost::exception\"*\n  %21 = getelementptr inbounds %\"struct.boost::exception_detail::error_info_injector\", %\"struct.boost::exception_detail::error_info_injector\"* %2, i64 0, i32 1\n  %22 = bitcast %\"class.boost::exception.base\"* %21 to %\"class.boost::exception\"*\n  invoke void @_ZN5boost16exception_detail20copy_boost_exceptionEPNS_9exceptionEPKS1_(%\"class.boost::exception\"* nonnull %20, %\"class.boost::exception\"* nonnull %22)\n          to label %38 unwind label %23\n\n23:                                               ; preds = %1\n  %24 = landingpad { i8*, i32 }\n          cleanup\n  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [4 x i8*] }, { [4 x i8*] }* @_ZTVN5boost9exceptionE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %14, align 8, !tbaa !10, !alias.scope !29\n  %25 = load %\"struct.boost::exception_detail::error_info_container\"*, %\"struct.boost::exception_detail::error_info_container\"** %16, align 8, !tbaa !32, !alias.scope !29\n  %26 = icmp eq %\"struct.boost::exception_detail::error_info_container\"* %25, null\n  br i1 %26, label %41, label %27\n\n27:                                               ; preds = %23\n  %28 = bitcast %\"struct.boost::exception_detail::error_info_container\"* %25 to i1 (%\"struct.boost::exception_detail::error_info_container\"*)***\n  %29 = load i1 (%\"struct.boost::exception_detail::error_info_container\"*)**, i1 (%\"struct.boost::exception_detail::error_info_container\"*)*** %28, align 8, !tbaa !10\n  %30 = getelementptr inbounds i1 (%\"struct.boost::exception_detail::error_info_container\"*)*, i1 (%\"struct.boost::exception_detail::error_info_container\"*)** %29, i64 4\n  %31 = load i1 (%\"struct.boost::exception_detail::error_info_container\"*)*, i1 (%\"struct.boost::exception_detail::error_info_container\"*)** %30, align 8\n  %32 = invoke zeroext i1 %31(%\"struct.boost::exception_detail::error_info_container\"* nonnull align 8 dereferenceable(8) %25)\n          to label %33 unwind label %35\n\n33:                                               ; preds = %27\n  br i1 %32, label %34, label %41\n\n34:                                               ; preds = %33\n  store %\"struct.boost::exception_detail::error_info_container\"* null, %\"struct.boost::exception_detail::error_info_container\"** %16, align 8, !tbaa !32, !alias.scope !29\n  br label %41\n\n35:                                               ; preds = %27\n  %36 = landingpad { i8*, i32 }\n          catch i8* null\n  %37 = extractvalue { i8*, i32 } %36, 0\n  call void @__clang_call_terminate(i8* %37) #21\n  unreachable\n\n38:                                               ; preds = %1\n  invoke void @__cxa_throw(i8* nonnull %3, i8* bitcast ({ i8*, i8*, i32, i32, i8*, i64, i8*, i64 }* @_ZTIN5boost16exception_detail10clone_implINS0_19error_info_injectorINS_12bad_any_castEEEEE to i8*), i8* bitcast (void (%\"class.boost::exception_detail::clone_impl\"*)* @_ZN5boost16exception_detail10clone_implINS0_19error_info_injectorINS_12bad_any_castEEEED1Ev to i8*)) #19\n          to label %45 unwind label %39\n\n39:                                               ; preds = %38\n  %40 = landingpad { i8*, i32 }\n          cleanup\n  call void @_ZN5boost16exception_detail19error_info_injectorINS_12bad_any_castEED2Ev(%\"struct.boost::exception_detail::error_info_injector\"* nonnull align 8 dereferenceable(44) %2) #17\n  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %4) #17\n  br label %43\n\n41:                                               ; preds = %34, %33, %23\n  %42 = bitcast i8* %3 to %\"class.std::bad_cast\"*\n  call void @_ZNSt8bad_castD2Ev(%\"class.std::bad_cast\"* nonnull align 8 dereferenceable(8) %42) #17\n  call void @_ZN5boost16exception_detail19error_info_injectorINS_12bad_any_castEED2Ev(%\"struct.boost::exception_detail::error_info_injector\"* nonnull align 8 dereferenceable(44) %2) #17\n  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %4) #17\n  call void @__cxa_free_exception(i8* nonnull %3) #17\n  br label %43\n\n43:                                               ; preds = %39, %41\n  %44 = phi { i8*, i32 } [ %40, %39 ], [ %24, %41 ]\n  resume { i8*, i32 } %44\n\n45:                                               ; preds = %38\n  unreachable\n}\n\n; Function Attrs: argmemonly mustprogress nofree nounwind willreturn writeonly\ndeclare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #7\n\n; Function Attrs: nounwind\ndeclare dso_local void @_ZNSt8bad_castD2Ev(%\"class.std::bad_cast\"* nonnull align 8 dereferenceable(8)) unnamed_addr #8\n\ndeclare dso_local i8* @__cxa_allocate_exception(i64) local_unnamed_addr\n\n; Function Attrs: nounwind uwtable\ndefine linkonce_odr dso_local void @_ZN5boost16exception_detail10clone_implINS0_19error_info_injectorINS_12bad_any_castEEEED1Ev(%\"class.boost::exception_detail::clone_impl\"* nonnull align 8 dereferenceable(44) %0) unnamed_addr #9 comdat align 2 personality i32 (...)* @__gxx_personality_v0 {\n  %2 = getelementptr inbounds %\"class.boost::exception_detail::clone_impl\", %\"class.boost::exception_detail::clone_impl\"* %0, i64 0, i32 0, i32 1, i32 0\n  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [4 x i8*] }, { [4 x i8*] }* @_ZTVN5boost9exceptionE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8, !tbaa !10\n  %3 = getelementptr inbounds %\"class.boost::exception_detail::clone_impl\", %\"class.boost::exception_detail::clone_impl\"* %0, i64 0, i32 0, i32 1, i32 1, i32 0\n  %4 = load %\"struct.boost::exception_detail::error_info_container\"*, %\"struct.boost::exception_detail::error_info_container\"** %3, align 8, !tbaa !32\n  %5 = icmp eq %\"struct.boost::exception_detail::error_info_container\"* %4, null\n  br i1 %5, label %17, label %6\n\n6:                                                ; preds = %1\n  %7 = bitcast %\"struct.boost::exception_detail::error_info_container\"* %4 to i1 (%\"struct.boost::exception_detail::error_info_container\"*)***\n  %8 = load i1 (%\"struct.boost::exception_detail::error_info_container\"*)**, i1 (%\"struct.boost::exception_detail::error_info_container\"*)*** %7, align 8, !tbaa !10\n  %9 = getelementptr inbounds i1 (%\"struct.boost::exception_detail::error_info_container\"*)*, i1 (%\"struct.boost::exception_detail::error_info_container\"*)** %8, i64 4\n  %10 = load i1 (%\"struct.boost::exception_detail::error_info_container\"*)*, i1 (%\"struct.boost::exception_detail::error_info_container\"*)** %9, align 8\n  %11 = invoke zeroext i1 %10(%\"struct.boost::exception_detail::error_info_container\"* nonnull align 8 dereferenceable(8) %4)\n          to label %12 unwind label %14\n\n12:                                               ; preds = %6\n  br i1 %11, label %13, label %17\n\n13:                                               ; preds = %12\n  store %\"struct.boost::exception_detail::error_info_container\"* null, %\"struct.boost::exception_detail::error_info_container\"** %3, align 8, !tbaa !32\n  br label %17\n\n14:                                               ; preds = %6\n  %15 = landingpad { i8*, i32 }\n          catch i8* null\n  %16 = extractvalue { i8*, i32 } %15, 0\n  tail call void @__clang_call_terminate(i8* %16) #21\n  unreachable\n\n17:                                               ; preds = %1, %12, %13\n  %18 = getelementptr inbounds %\"class.boost::exception_detail::clone_impl\", %\"class.boost::exception_detail::clone_impl\"* %0, i64 0, i32 0, i32 0, i32 0\n  tail call void @_ZNSt8bad_castD2Ev(%\"class.std::bad_cast\"* nonnull align 8 dereferenceable(8) %18) #17\n  ret void\n}\n\ndeclare dso_local void @__cxa_throw(i8*, i8*, i8*) local_unnamed_addr\n\n; Function Attrs: nounwind uwtable\ndefine linkonce_odr dso_local void @_ZN5boost16exception_detail19error_info_injectorINS_12bad_any_castEED2Ev(%\"struct.boost::exception_detail::error_info_injector\"* nonnull align 8 dereferenceable(44) %0) unnamed_addr #9 comdat align 2 personality i32 (...)* @__gxx_personality_v0 {\n  %2 = getelementptr inbounds %\"struct.boost::exception_detail::error_info_injector\", %\"struct.boost::exception_detail::error_info_injector\"* %0, i64 0, i32 1, i32 0\n  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [4 x i8*] }, { [4 x i8*] }* @_ZTVN5boost9exceptionE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8, !tbaa !10\n  %3 = getelementptr inbounds %\"struct.boost::exception_detail::error_info_injector\", %\"struct.boost::exception_detail::error_info_injector\"* %0, i64 0, i32 1, i32 1, i32 0\n  %4 = load %\"struct.boost::exception_detail::error_info_container\"*, %\"struct.boost::exception_detail::error_info_container\"** %3, align 8, !tbaa !32\n  %5 = icmp eq %\"struct.boost::exception_detail::error_info_container\"* %4, null\n  br i1 %5, label %17, label %6\n\n6:                                                ; preds = %1\n  %7 = bitcast %\"struct.boost::exception_detail::error_info_container\"* %4 to i1 (%\"struct.boost::exception_detail::error_info_container\"*)***\n  %8 = load i1 (%\"struct.boost::exception_detail::error_info_container\"*)**, i1 (%\"struct.boost::exception_detail::error_info_container\"*)*** %7, align 8, !tbaa !10\n  %9 = getelementptr inbounds i1 (%\"struct.boost::exception_detail::error_info_container\"*)*, i1 (%\"struct.boost::exception_detail::error_info_container\"*)** %8, i64 4\n  %10 = load i1 (%\"struct.boost::exception_detail::error_info_container\"*)*, i1 (%\"struct.boost::exception_detail::error_info_container\"*)** %9, align 8\n  %11 = invoke zeroext i1 %10(%\"struct.boost::exception_detail::error_info_container\"* nonnull align 8 dereferenceable(8) %4)\n          to label %12 unwind label %14\n\n12:                                               ; preds = %6\n  br i1 %11, label %13, label %17\n\n13:                                               ; preds = %12\n  store %\"struct.boost::exception_detail::error_info_container\"* null, %\"struct.boost::exception_detail::error_info_container\"** %3, align 8, !tbaa !32\n  br label %17\n\n14:                                               ; preds = %6\n  %15 = landingpad { i8*, i32 }\n          catch i8* null\n  %16 = extractvalue { i8*, i32 } %15, 0\n  tail call void @__clang_call_terminate(i8* %16) #21\n  unreachable\n\n17:                                               ; preds = %1, %12, %13\n  %18 = getelementptr inbounds %\"struct.boost::exception_detail::error_info_injector\", %\"struct.boost::exception_detail::error_info_injector\"* %0, i64 0, i32 0, i32 0\n  tail call void @_ZNSt8bad_castD2Ev(%\"class.std::bad_cast\"* nonnull align 8 dereferenceable(8) %18) #17\n  ret void\n}\n\ndeclare dso_local void @__cxa_free_exception(i8*) local_unnamed_addr\n\n; Function Attrs: inlinehint uwtable\ndefine linkonce_odr dso_local void @_ZN5boost16exception_detail20copy_boost_exceptionEPNS_9exceptionEPKS1_(%\"class.boost::exception\"* %0, %\"class.boost::exception\"* %1) local_unnamed_addr #10 comdat personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {\n  %3 = alloca %\"class.boost::exception_detail::refcount_ptr\", align 8\n  %4 = getelementptr inbounds %\"class.boost::exception\", %\"class.boost::exception\"* %1, i64 0, i32 1, i32 0\n  %5 = load %\"struct.boost::exception_detail::error_info_container\"*, %\"struct.boost::exception_detail::error_info_container\"** %4, align 8, !tbaa !32\n  %6 = icmp eq %\"struct.boost::exception_detail::error_info_container\"* %5, null\n  br i1 %6, label %53, label %7\n\n7:                                                ; preds = %2\n  %8 = bitcast %\"class.boost::exception_detail::refcount_ptr\"* %3 to i8*\n  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %8) #17\n  %9 = bitcast %\"struct.boost::exception_detail::error_info_container\"* %5 to void (%\"class.boost::exception_detail::refcount_ptr\"*, %\"struct.boost::exception_detail::error_info_container\"*)***\n  %10 = load void (%\"class.boost::exception_detail::refcount_ptr\"*, %\"struct.boost::exception_detail::error_info_container\"*)**, void (%\"class.boost::exception_detail::refcount_ptr\"*, %\"struct.boost::exception_detail::error_info_container\"*)*** %9, align 8, !tbaa !10\n  %11 = getelementptr inbounds void (%\"class.boost::exception_detail::refcount_ptr\"*, %\"struct.boost::exception_detail::error_info_container\"*)*, void (%\"class.boost::exception_detail::refcount_ptr\"*, %\"struct.boost::exception_detail::error_info_container\"*)** %10, i64 5\n  %12 = load void (%\"class.boost::exception_detail::refcount_ptr\"*, %\"struct.boost::exception_detail::error_info_container\"*)*, void (%\"class.boost::exception_detail::refcount_ptr\"*, %\"struct.boost::exception_detail::error_info_container\"*)** %11, align 8\n  invoke void %12(%\"class.boost::exception_detail::refcount_ptr\"* nonnull sret(%\"class.boost::exception_detail::refcount_ptr\") align 8 %3, %\"struct.boost::exception_detail::error_info_container\"* nonnull align 8 dereferenceable(8) %5)\n          to label %13 unwind label %35\n\n13:                                               ; preds = %7\n  %14 = getelementptr inbounds %\"class.boost::exception_detail::refcount_ptr\", %\"class.boost::exception_detail::refcount_ptr\"* %3, i64 0, i32 0\n  %15 = load %\"struct.boost::exception_detail::error_info_container\"*, %\"struct.boost::exception_detail::error_info_container\"** %14, align 8, !tbaa !32\n  %16 = icmp eq %\"struct.boost::exception_detail::error_info_container\"* %15, null\n  br i1 %16, label %34, label %17\n\n17:                                               ; preds = %13\n  %18 = bitcast %\"struct.boost::exception_detail::error_info_container\"* %15 to void (%\"struct.boost::exception_detail::error_info_container\"*)***\n  %19 = load void (%\"struct.boost::exception_detail::error_info_container\"*)**, void (%\"struct.boost::exception_detail::error_info_container\"*)*** %18, align 8, !tbaa !10\n  %20 = getelementptr inbounds void (%\"struct.boost::exception_detail::error_info_container\"*)*, void (%\"struct.boost::exception_detail::error_info_container\"*)** %19, i64 3\n  %21 = load void (%\"struct.boost::exception_detail::error_info_container\"*)*, void (%\"struct.boost::exception_detail::error_info_container\"*)** %20, align 8\n  invoke void %21(%\"struct.boost::exception_detail::error_info_container\"* nonnull align 8 dereferenceable(8) %15)\n          to label %22 unwind label %37\n\n22:                                               ; preds = %17\n  %23 = load %\"struct.boost::exception_detail::error_info_container\"*, %\"struct.boost::exception_detail::error_info_container\"** %14, align 8, !tbaa !32\n  %24 = icmp eq %\"struct.boost::exception_detail::error_info_container\"* %23, null\n  br i1 %24, label %34, label %25\n\n25:                                               ; preds = %22\n  %26 = bitcast %\"struct.boost::exception_detail::error_info_container\"* %23 to i1 (%\"struct.boost::exception_detail::error_info_container\"*)***\n  %27 = load i1 (%\"struct.boost::exception_detail::error_info_container\"*)**, i1 (%\"struct.boost::exception_detail::error_info_container\"*)*** %26, align 8, !tbaa !10\n  %28 = getelementptr inbounds i1 (%\"struct.boost::exception_detail::error_info_container\"*)*, i1 (%\"struct.boost::exception_detail::error_info_container\"*)** %27, i64 4\n  %29 = load i1 (%\"struct.boost::exception_detail::error_info_container\"*)*, i1 (%\"struct.boost::exception_detail::error_info_container\"*)** %28, align 8\n  %30 = invoke zeroext i1 %29(%\"struct.boost::exception_detail::error_info_container\"* nonnull align 8 dereferenceable(8) %23)\n          to label %34 unwind label %31\n\n31:                                               ; preds = %25\n  %32 = landingpad { i8*, i32 }\n          catch i8* null\n  %33 = extractvalue { i8*, i32 } %32, 0\n  call void @__clang_call_terminate(i8* %33) #21\n  unreachable\n\n34:                                               ; preds = %25, %13, %22\n  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %8) #17\n  br label %53\n\n35:                                               ; preds = %7\n  %36 = landingpad { i8*, i32 }\n          cleanup\n  br label %50\n\n37:                                               ; preds = %17\n  %38 = landingpad { i8*, i32 }\n          cleanup\n  %39 = load %\"struct.boost::exception_detail::error_info_container\"*, %\"struct.boost::exception_detail::error_info_container\"** %14, align 8, !tbaa !32\n  %40 = icmp eq %\"struct.boost::exception_detail::error_info_container\"* %39, null\n  br i1 %40, label %50, label %41\n\n41:                                               ; preds = %37\n  %42 = bitcast %\"struct.boost::exception_detail::error_info_container\"* %39 to i1 (%\"struct.boost::exception_detail::error_info_container\"*)***\n  %43 = load i1 (%\"struct.boost::exception_detail::error_info_container\"*)**, i1 (%\"struct.boost::exception_detail::error_info_container\"*)*** %42, align 8, !tbaa !10\n  %44 = getelementptr inbounds i1 (%\"struct.boost::exception_detail::error_info_container\"*)*, i1 (%\"struct.boost::exception_detail::error_info_container\"*)** %43, i64 4\n  %45 = load i1 (%\"struct.boost::exception_detail::error_info_container\"*)*, i1 (%\"struct.boost::exception_detail::error_info_container\"*)** %44, align 8\n  %46 = invoke zeroext i1 %45(%\"struct.boost::exception_detail::error_info_container\"* nonnull align 8 dereferenceable(8) %39)\n          to label %50 unwind label %47\n\n47:                                               ; preds = %41\n  %48 = landingpad { i8*, i32 }\n          catch i8* null\n  %49 = extractvalue { i8*, i32 } %48, 0\n  call void @__clang_call_terminate(i8* %49) #21\n  unreachable\n\n50:                                               ; preds = %41, %37, %35\n  %51 = phi %\"struct.boost::exception_detail::error_info_container\"* [ null, %35 ], [ %15, %37 ], [ %15, %41 ]\n  %52 = phi { i8*, i32 } [ %36, %35 ], [ %38, %37 ], [ %38, %41 ]\n  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %8) #17\n  br label %92\n\n53:                                               ; preds = %34, %2\n  %54 = phi %\"struct.boost::exception_detail::error_info_container\"* [ null, %2 ], [ %15, %34 ]\n  %55 = getelementptr inbounds %\"class.boost::exception\", %\"class.boost::exception\"* %1, i64 0, i32 3\n  %56 = load i8*, i8** %55, align 8, !tbaa !33\n  %57 = getelementptr inbounds %\"class.boost::exception\", %\"class.boost::exception\"* %0, i64 0, i32 3\n  store i8* %56, i8** %57, align 8, !tbaa !33\n  %58 = getelementptr inbounds %\"class.boost::exception\", %\"class.boost::exception\"* %1, i64 0, i32 4\n  %59 = load i32, i32* %58, align 8, !tbaa !26\n  %60 = getelementptr inbounds %\"class.boost::exception\", %\"class.boost::exception\"* %0, i64 0, i32 4\n  store i32 %59, i32* %60, align 8, !tbaa !26\n  %61 = getelementptr inbounds %\"class.boost::exception\", %\"class.boost::exception\"* %1, i64 0, i32 2\n  %62 = load i8*, i8** %61, align 8, !tbaa !34\n  %63 = getelementptr inbounds %\"class.boost::exception\", %\"class.boost::exception\"* %0, i64 0, i32 2\n  store i8* %62, i8** %63, align 8, !tbaa !34\n  %64 = getelementptr inbounds %\"class.boost::exception\", %\"class.boost::exception\"* %0, i64 0, i32 1, i32 0\n  %65 = load %\"struct.boost::exception_detail::error_info_container\"*, %\"struct.boost::exception_detail::error_info_container\"** %64, align 8, !tbaa !32\n  %66 = icmp eq %\"struct.boost::exception_detail::error_info_container\"* %65, null\n  br i1 %66, label %73, label %67\n\n67:                                               ; preds = %53\n  %68 = bitcast %\"struct.boost::exception_detail::error_info_container\"* %65 to i1 (%\"struct.boost::exception_detail::error_info_container\"*)***\n  %69 = load i1 (%\"struct.boost::exception_detail::error_info_container\"*)**, i1 (%\"struct.boost::exception_detail::error_info_container\"*)*** %68, align 8, !tbaa !10\n  %70 = getelementptr inbounds i1 (%\"struct.boost::exception_detail::error_info_container\"*)*, i1 (%\"struct.boost::exception_detail::error_info_container\"*)** %69, i64 4\n  %71 = load i1 (%\"struct.boost::exception_detail::error_info_container\"*)*, i1 (%\"struct.boost::exception_detail::error_info_container\"*)** %70, align 8\n  %72 = invoke zeroext i1 %71(%\"struct.boost::exception_detail::error_info_container\"* nonnull align 8 dereferenceable(8) %65)\n          to label %73 unwind label %90\n\n73:                                               ; preds = %67, %53\n  store %\"struct.boost::exception_detail::error_info_container\"* %54, %\"struct.boost::exception_detail::error_info_container\"** %64, align 8, !tbaa !32\n  %74 = icmp eq %\"struct.boost::exception_detail::error_info_container\"* %54, null\n  br i1 %74, label %89, label %75\n\n75:                                               ; preds = %73\n  %76 = bitcast %\"struct.boost::exception_detail::error_info_container\"* %54 to void (%\"struct.boost::exception_detail::error_info_container\"*)***\n  %77 = load void (%\"struct.boost::exception_detail::error_info_container\"*)**, void (%\"struct.boost::exception_detail::error_info_container\"*)*** %76, align 8, !tbaa !10\n  %78 = getelementptr inbounds void (%\"struct.boost::exception_detail::error_info_container\"*)*, void (%\"struct.boost::exception_detail::error_info_container\"*)** %77, i64 3\n  %79 = load void (%\"struct.boost::exception_detail::error_info_container\"*)*, void (%\"struct.boost::exception_detail::error_info_container\"*)** %78, align 8\n  invoke void %79(%\"struct.boost::exception_detail::error_info_container\"* nonnull align 8 dereferenceable(8) %54)\n          to label %80 unwind label %90\n\n80:                                               ; preds = %75\n  %81 = bitcast %\"struct.boost::exception_detail::error_info_container\"* %54 to i1 (%\"struct.boost::exception_detail::error_info_container\"*)***\n  %82 = load i1 (%\"struct.boost::exception_detail::error_info_container\"*)**, i1 (%\"struct.boost::exception_detail::error_info_container\"*)*** %81, align 8, !tbaa !10\n  %83 = getelementptr inbounds i1 (%\"struct.boost::exception_detail::error_info_container\"*)*, i1 (%\"struct.boost::exception_detail::error_info_container\"*)** %82, i64 4\n  %84 = load i1 (%\"struct.boost::exception_detail::error_info_container\"*)*, i1 (%\"struct.boost::exception_detail::error_info_container\"*)** %83, align 8\n  %85 = invoke zeroext i1 %84(%\"struct.boost::exception_detail::error_info_container\"* nonnull align 8 dereferenceable(8) %54)\n          to label %89 unwind label %86\n\n86:                                               ; preds = %80\n  %87 = landingpad { i8*, i32 }\n          catch i8* null\n  %88 = extractvalue { i8*, i32 } %87, 0\n  call void @__clang_call_terminate(i8* %88) #21\n  unreachable\n\n89:                                               ; preds = %80, %73\n  ret void\n\n90:                                               ; preds = %75, %67\n  %91 = landingpad { i8*, i32 }\n          cleanup\n  br label %92\n\n92:                                               ; preds = %90, %50\n  %93 = phi %\"struct.boost::exception_detail::error_info_container\"* [ %54, %90 ], [ %51, %50 ]\n  %94 = phi { i8*, i32 } [ %91, %90 ], [ %52, %50 ]\n  %95 = icmp eq %\"struct.boost::exception_detail::error_info_container\"* %93, null\n  br i1 %95, label %105, label %96\n\n96:                                               ; preds = %92\n  %97 = bitcast %\"struct.boost::exception_detail::error_info_container\"* %93 to i1 (%\"struct.boost::exception_detail::error_info_container\"*)***\n  %98 = load i1 (%\"struct.boost::exception_detail::error_info_container\"*)**, i1 (%\"struct.boost::exception_detail::error_info_container\"*)*** %97, align 8, !tbaa !10\n  %99 = getelementptr inbounds i1 (%\"struct.boost::exception_detail::error_info_container\"*)*, i1 (%\"struct.boost::exception_detail::error_info_container\"*)** %98, i64 4\n  %100 = load i1 (%\"struct.boost::exception_detail::error_info_container\"*)*, i1 (%\"struct.boost::exception_detail::error_info_container\"*)** %99, align 8\n  %101 = invoke zeroext i1 %100(%\"struct.boost::exception_detail::error_info_container\"* nonnull align 8 dereferenceable(8) %93)\n          to label %105 unwind label %102\n\n102:                                              ; preds = %96\n  %103 = landingpad { i8*, i32 }\n          catch i8* null\n  %104 = extractvalue { i8*, i32 } %103, 0\n  call void @__clang_call_terminate(i8* %104) #21\n  unreachable\n\n105:                                              ; preds = %96, %92\n  resume { i8*, i32 } %94\n}\n\n; Function Attrs: nounwind uwtable\ndefine linkonce_odr dso_local void @_ZN5boost16exception_detail10clone_implINS0_19error_info_injectorINS_12bad_any_castEEEED0Ev(%\"class.boost::exception_detail::clone_impl\"* nonnull align 8 dereferenceable(44) %0) unnamed_addr #9 comdat align 2 personality i32 (...)* @__gxx_personality_v0 {\n  %2 = getelementptr inbounds %\"class.boost::exception_detail::clone_impl\", %\"class.boost::exception_detail::clone_impl\"* %0, i64 0, i32 0, i32 1, i32 0\n  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [4 x i8*] }, { [4 x i8*] }* @_ZTVN5boost9exceptionE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8, !tbaa !10\n  %3 = getelementptr inbounds %\"class.boost::exception_detail::clone_impl\", %\"class.boost::exception_detail::clone_impl\"* %0, i64 0, i32 0, i32 1, i32 1, i32 0\n  %4 = load %\"struct.boost::exception_detail::error_info_container\"*, %\"struct.boost::exception_detail::error_info_container\"** %3, align 8, !tbaa !32\n  %5 = icmp eq %\"struct.boost::exception_detail::error_info_container\"* %4, null\n  br i1 %5, label %17, label %6\n\n6:                                                ; preds = %1\n  %7 = bitcast %\"struct.boost::exception_detail::error_info_container\"* %4 to i1 (%\"struct.boost::exception_detail::error_info_container\"*)***\n  %8 = load i1 (%\"struct.boost::exception_detail::error_info_container\"*)**, i1 (%\"struct.boost::exception_detail::error_info_container\"*)*** %7, align 8, !tbaa !10\n  %9 = getelementptr inbounds i1 (%\"struct.boost::exception_detail::error_info_container\"*)*, i1 (%\"struct.boost::exception_detail::error_info_container\"*)** %8, i64 4\n  %10 = load i1 (%\"struct.boost::exception_detail::error_info_container\"*)*, i1 (%\"struct.boost::exception_detail::error_info_container\"*)** %9, align 8\n  %11 = invoke zeroext i1 %10(%\"struct.boost::exception_detail::error_info_container\"* nonnull align 8 dereferenceable(8) %4)\n          to label %12 unwind label %14\n\n12:                                               ; preds = %6\n  br i1 %11, label %13, label %17\n\n13:                                               ; preds = %12\n  store %\"struct.boost::exception_detail::error_info_container\"* null, %\"struct.boost::exception_detail::error_info_container\"** %3, align 8, !tbaa !32\n  br label %17\n\n14:                                               ; preds = %6\n  %15 = landingpad { i8*, i32 }\n          catch i8* null\n  %16 = extractvalue { i8*, i32 } %15, 0\n  tail call void @__clang_call_terminate(i8* %16) #21\n  unreachable\n\n17:                                               ; preds = %1, %12, %13\n  %18 = getelementptr inbounds %\"class.boost::exception_detail::clone_impl\", %\"class.boost::exception_detail::clone_impl\"* %0, i64 0, i32 0, i32 0, i32 0\n  tail call void @_ZNSt8bad_castD2Ev(%\"class.std::bad_cast\"* nonnull align 8 dereferenceable(8) %18) #17\n  %19 = bitcast %\"class.boost::exception_detail::clone_impl\"* %0 to i8*\n  tail call void @_ZdlPv(i8* nonnull %19) #22\n  ret void\n}\n\n; Function Attrs: mustprogress nounwind uwtable\ndefine linkonce_odr dso_local i8* @_ZNK5boost12bad_any_cast4whatEv(%\"class.boost::bad_any_cast\"* nonnull align 8 dereferenceable(8) %0) unnamed_addr #11 comdat align 2 {\n  ret i8* getelementptr inbounds ([61 x i8], [61 x i8]* @.str, i64 0, i64 0)\n}\n\n; Function Attrs: mustprogress uwtable\ndefine linkonce_odr dso_local %\"class.boost::exception_detail::clone_base\"* @_ZNK5boost16exception_detail10clone_implINS0_19error_info_injectorINS_12bad_any_castEEEE5cloneEv(%\"class.boost::exception_detail::clone_impl\"* nonnull align 8 dereferenceable(44) %0) unnamed_addr #12 comdat align 2 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {\n  %2 = tail call noalias nonnull dereferenceable(56) i8* @_Znwm(i64 56) #23\n  %3 = bitcast i8* %2 to %\"class.boost::exception_detail::clone_impl\"*\n  invoke void @_ZN5boost16exception_detail10clone_implINS0_19error_info_injectorINS_12bad_any_castEEEEC1ERKS5_NS5_9clone_tagE(%\"class.boost::exception_detail::clone_impl\"* nonnull align 8 dereferenceable(44) %3, %\"class.boost::exception_detail::clone_impl\"* nonnull align 8 dereferenceable(44) %0)\n          to label %4 unwind label %12\n\n4:                                                ; preds = %1\n  %5 = bitcast i8* %2 to i8**\n  %6 = load i8*, i8** %5, align 8, !tbaa !10\n  %7 = getelementptr i8, i8* %6, i64 -24\n  %8 = bitcast i8* %7 to i64*\n  %9 = load i64, i64* %8, align 8\n  %10 = getelementptr inbounds i8, i8* %2, i64 %9\n  %11 = bitcast i8* %10 to %\"class.boost::exception_detail::clone_base\"*\n  ret %\"class.boost::exception_detail::clone_base\"* %11\n\n12:                                               ; preds = %1\n  %13 = landingpad { i8*, i32 }\n          cleanup\n  tail call void @_ZdlPv(i8* nonnull %2) #22\n  resume { i8*, i32 } %13\n}\n\n; Function Attrs: mustprogress uwtable\ndefine linkonce_odr dso_local void @_ZNK5boost16exception_detail10clone_implINS0_19error_info_injectorINS_12bad_any_castEEEE7rethrowEv(%\"class.boost::exception_detail::clone_impl\"* nonnull align 8 dereferenceable(44) %0) unnamed_addr #12 comdat align 2 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {\n  %2 = tail call i8* @__cxa_allocate_exception(i64 56) #17\n  %3 = bitcast i8* %2 to %\"class.boost::exception_detail::clone_impl\"*\n  invoke void @_ZN5boost16exception_detail10clone_implINS0_19error_info_injectorINS_12bad_any_castEEEEC1ERKS5_(%\"class.boost::exception_detail::clone_impl\"* nonnull align 8 dereferenceable(44) %3, %\"class.boost::exception_detail::clone_impl\"* nonnull align 8 dereferenceable(44) %0)\n          to label %4 unwind label %5\n\n4:                                                ; preds = %1\n  tail call void @__cxa_throw(i8* %2, i8* bitcast ({ i8*, i8*, i32, i32, i8*, i64, i8*, i64 }* @_ZTIN5boost16exception_detail10clone_implINS0_19error_info_injectorINS_12bad_any_castEEEEE to i8*), i8* bitcast (void (%\"class.boost::exception_detail::clone_impl\"*)* @_ZN5boost16exception_detail10clone_implINS0_19error_info_injectorINS_12bad_any_castEEEED1Ev to i8*)) #19\n  unreachable\n\n5:                                                ; preds = %1\n  %6 = landingpad { i8*, i32 }\n          cleanup\n  tail call void @__cxa_free_exception(i8* %2) #17\n  resume { i8*, i32 } %6\n}\n\n; Function Attrs: nounwind uwtable\ndefine linkonce_odr dso_local void @_ZThn8_N5boost16exception_detail10clone_implINS0_19error_info_injectorINS_12bad_any_castEEEED1Ev(%\"class.boost::exception_detail::clone_impl\"* %0) unnamed_addr #9 comdat align 2 personality i32 (...)* @__gxx_personality_v0 {\n  %2 = getelementptr inbounds %\"class.boost::exception_detail::clone_impl\", %\"class.boost::exception_detail::clone_impl\"* %0, i64 -1, i32 1\n  %3 = getelementptr inbounds %\"class.boost::exception_detail::clone_base\", %\"class.boost::exception_detail::clone_base\"* %2, i64 1, i32 0\n  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [4 x i8*] }, { [4 x i8*] }* @_ZTVN5boost9exceptionE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %3, align 8, !tbaa !10\n  %4 = getelementptr inbounds %\"class.boost::exception_detail::clone_base\", %\"class.boost::exception_detail::clone_base\"* %2, i64 2\n  %5 = bitcast %\"class.boost::exception_detail::clone_base\"* %4 to %\"struct.boost::exception_detail::error_info_container\"**\n  %6 = load %\"struct.boost::exception_detail::error_info_container\"*, %\"struct.boost::exception_detail::error_info_container\"** %5, align 8, !tbaa !32\n  %7 = icmp eq %\"struct.boost::exception_detail::error_info_container\"* %6, null\n  br i1 %7, label %19, label %8\n\n8:                                                ; preds = %1\n  %9 = bitcast %\"struct.boost::exception_detail::error_info_container\"* %6 to i1 (%\"struct.boost::exception_detail::error_info_container\"*)***\n  %10 = load i1 (%\"struct.boost::exception_detail::error_info_container\"*)**, i1 (%\"struct.boost::exception_detail::error_info_container\"*)*** %9, align 8, !tbaa !10\n  %11 = getelementptr inbounds i1 (%\"struct.boost::exception_detail::error_info_container\"*)*, i1 (%\"struct.boost::exception_detail::error_info_container\"*)** %10, i64 4\n  %12 = load i1 (%\"struct.boost::exception_detail::error_info_container\"*)*, i1 (%\"struct.boost::exception_detail::error_info_container\"*)** %11, align 8\n  %13 = invoke zeroext i1 %12(%\"struct.boost::exception_detail::error_info_container\"* nonnull align 8 dereferenceable(8) %6)\n          to label %14 unwind label %16\n\n14:                                               ; preds = %8\n  br i1 %13, label %15, label %19\n\n15:                                               ; preds = %14\n  store %\"struct.boost::exception_detail::error_info_container\"* null, %\"struct.boost::exception_detail::error_info_container\"** %5, align 8, !tbaa !32\n  br label %19\n\n16:                                               ; preds = %8\n  %17 = landingpad { i8*, i32 }\n          catch i8* null\n  %18 = extractvalue { i8*, i32 } %17, 0\n  tail call void @__clang_call_terminate(i8* %18) #21\n  unreachable\n\n19:                                               ; preds = %1, %14, %15\n  %20 = bitcast %\"class.boost::exception_detail::clone_base\"* %2 to %\"class.std::bad_cast\"*\n  tail call void @_ZNSt8bad_castD2Ev(%\"class.std::bad_cast\"* nonnull align 8 dereferenceable(8) %20) #17\n  ret void\n}\n\n; Function Attrs: nounwind uwtable\ndefine linkonce_odr dso_local void @_ZThn8_N5boost16exception_detail10clone_implINS0_19error_info_injectorINS_12bad_any_castEEEED0Ev(%\"class.boost::exception_detail::clone_impl\"* %0) unnamed_addr #9 comdat align 2 personality i32 (...)* @__gxx_personality_v0 {\n  %2 = getelementptr inbounds %\"class.boost::exception_detail::clone_impl\", %\"class.boost::exception_detail::clone_impl\"* %0, i64 -1, i32 1\n  %3 = getelementptr inbounds %\"class.boost::exception_detail::clone_base\", %\"class.boost::exception_detail::clone_base\"* %2, i64 1, i32 0\n  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [4 x i8*] }, { [4 x i8*] }* @_ZTVN5boost9exceptionE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %3, align 8, !tbaa !10\n  %4 = getelementptr inbounds %\"class.boost::exception_detail::clone_base\", %\"class.boost::exception_detail::clone_base\"* %2, i64 2\n  %5 = bitcast %\"class.boost::exception_detail::clone_base\"* %4 to %\"struct.boost::exception_detail::error_info_container\"**\n  %6 = load %\"struct.boost::exception_detail::error_info_container\"*, %\"struct.boost::exception_detail::error_info_container\"** %5, align 8, !tbaa !32\n  %7 = icmp eq %\"struct.boost::exception_detail::error_info_container\"* %6, null\n  br i1 %7, label %19, label %8\n\n8:                                                ; preds = %1\n  %9 = bitcast %\"struct.boost::exception_detail::error_info_container\"* %6 to i1 (%\"struct.boost::exception_detail::error_info_container\"*)***\n  %10 = load i1 (%\"struct.boost::exception_detail::error_info_container\"*)**, i1 (%\"struct.boost::exception_detail::error_info_container\"*)*** %9, align 8, !tbaa !10\n  %11 = getelementptr inbounds i1 (%\"struct.boost::exception_detail::error_info_container\"*)*, i1 (%\"struct.boost::exception_detail::error_info_container\"*)** %10, i64 4\n  %12 = load i1 (%\"struct.boost::exception_detail::error_info_container\"*)*, i1 (%\"struct.boost::exception_detail::error_info_container\"*)** %11, align 8\n  %13 = invoke zeroext i1 %12(%\"struct.boost::exception_detail::error_info_container\"* nonnull align 8 dereferenceable(8) %6)\n          to label %14 unwind label %16\n\n14:                                               ; preds = %8\n  br i1 %13, label %15, label %19\n\n15:                                               ; preds = %14\n  store %\"struct.boost::exception_detail::error_info_container\"* null, %\"struct.boost::exception_detail::error_info_container\"** %5, align 8, !tbaa !32\n  br label %19\n\n16:                                               ; preds = %8\n  %17 = landingpad { i8*, i32 }\n          catch i8* null\n  %18 = extractvalue { i8*, i32 } %17, 0\n  tail call void @__clang_call_terminate(i8* %18) #21\n  unreachable\n\n19:                                               ; preds = %1, %14, %15\n  %20 = bitcast %\"class.boost::exception_detail::clone_base\"* %2 to %\"class.std::bad_cast\"*\n  tail call void @_ZNSt8bad_castD2Ev(%\"class.std::bad_cast\"* nonnull align 8 dereferenceable(8) %20) #17\n  %21 = bitcast %\"class.boost::exception_detail::clone_base\"* %2 to i8*\n  tail call void @_ZdlPv(i8* nonnull %21) #22\n  ret void\n}\n\n; Function Attrs: uwtable\ndefine linkonce_odr dso_local %\"class.boost::exception_detail::clone_base\"* @_ZTv0_n24_NK5boost16exception_detail10clone_implINS0_19error_info_injectorINS_12bad_any_castEEEE5cloneEv(%\"class.boost::exception_detail::clone_impl\"* %0) unnamed_addr #0 comdat align 2 personality i32 (...)* @__gxx_personality_v0 {\n  %2 = bitcast %\"class.boost::exception_detail::clone_impl\"* %0 to i8*\n  %3 = bitcast %\"class.boost::exception_detail::clone_impl\"* %0 to i8**\n  %4 = load i8*, i8** %3, align 8\n  %5 = getelementptr inbounds i8, i8* %4, i64 -24\n  %6 = bitcast i8* %5 to i64*\n  %7 = load i64, i64* %6, align 8\n  %8 = getelementptr inbounds i8, i8* %2, i64 %7\n  %9 = tail call noalias nonnull dereferenceable(56) i8* @_Znwm(i64 56) #23\n  %10 = bitcast i8* %9 to %\"class.boost::exception_detail::clone_impl\"*\n  %11 = getelementptr inbounds %\"class.boost::exception_detail::clone_impl\", %\"class.boost::exception_detail::clone_impl\"* %10, i64 0, i32 1, i32 0\n  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN5boost16exception_detail10clone_baseE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %11, align 8, !tbaa !10\n  %12 = bitcast i8* %9 to %\"struct.boost::exception_detail::error_info_injector\"*\n  %13 = getelementptr inbounds %\"class.boost::exception_detail::clone_impl\", %\"class.boost::exception_detail::clone_impl\"* %10, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0\n  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*] }, { [5 x i8*] }* @_ZTVN5boost12bad_any_castE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %13, align 8, !tbaa !10\n  %14 = getelementptr inbounds %\"class.boost::exception_detail::clone_impl\", %\"class.boost::exception_detail::clone_impl\"* %10, i64 0, i32 0, i32 1, i32 0\n  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [4 x i8*] }, { [4 x i8*] }* @_ZTVN5boost9exceptionE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %14, align 8, !tbaa !10\n  %15 = getelementptr inbounds %\"class.boost::exception_detail::clone_impl\", %\"class.boost::exception_detail::clone_impl\"* %10, i64 0, i32 0, i32 1, i32 1, i32 0\n  %16 = getelementptr inbounds i8, i8* %8, i64 16\n  %17 = bitcast i8* %16 to %\"struct.boost::exception_detail::error_info_container\"**\n  %18 = load %\"struct.boost::exception_detail::error_info_container\"*, %\"struct.boost::exception_detail::error_info_container\"** %17, align 8, !tbaa !32\n  store %\"struct.boost::exception_detail::error_info_container\"* %18, %\"struct.boost::exception_detail::error_info_container\"** %15, align 8, !tbaa !32\n  %19 = icmp eq %\"struct.boost::exception_detail::error_info_container\"* %18, null\n  br i1 %19, label %27, label %20\n\n20:                                               ; preds = %1\n  %21 = bitcast %\"struct.boost::exception_detail::error_info_container\"* %18 to void (%\"struct.boost::exception_detail::error_info_container\"*)***\n  %22 = load void (%\"struct.boost::exception_detail::error_info_container\"*)**, void (%\"struct.boost::exception_detail::error_info_container\"*)*** %21, align 8, !tbaa !10\n  %23 = getelementptr inbounds void (%\"struct.boost::exception_detail::error_info_container\"*)*, void (%\"struct.boost::exception_detail::error_info_container\"*)** %22, i64 3\n  %24 = load void (%\"struct.boost::exception_detail::error_info_container\"*)*, void (%\"struct.boost::exception_detail::error_info_container\"*)** %23, align 8\n  invoke void %24(%\"struct.boost::exception_detail::error_info_container\"* nonnull align 8 dereferenceable(8) %18)\n          to label %27 unwind label %25\n\n25:                                               ; preds = %20\n  %26 = landingpad { i8*, i32 }\n          cleanup\n  br label %53\n\n27:                                               ; preds = %20, %1\n  %28 = getelementptr inbounds %\"class.boost::exception_detail::clone_impl\", %\"class.boost::exception_detail::clone_impl\"* %10, i64 0, i32 0, i32 1, i32 2\n  %29 = getelementptr inbounds i8, i8* %8, i64 24\n  %30 = bitcast i8** %28 to i8*\n  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(20) %30, i8* noundef nonnull align 8 dereferenceable(20) %29, i64 20, i1 false)\n  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [8 x i8*], [4 x i8*], [9 x i8*] }, { [8 x i8*], [4 x i8*], [9 x i8*] }* @_ZTVN5boost16exception_detail10clone_implINS0_19error_info_injectorINS_12bad_any_castEEEEE, i64 0, inrange i32 0, i64 3) to i32 (...)**), i32 (...)*** %13, align 8, !tbaa !10\n  %31 = getelementptr inbounds %\"class.boost::exception_detail::clone_impl\", %\"class.boost::exception_detail::clone_impl\"* %10, i64 0, i32 0, i32 1\n  %32 = getelementptr %\"class.boost::exception.base\", %\"class.boost::exception.base\"* %31, i64 0, i32 0\n  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [8 x i8*], [4 x i8*], [9 x i8*] }, { [8 x i8*], [4 x i8*], [9 x i8*] }* @_ZTVN5boost16exception_detail10clone_implINS0_19error_info_injectorINS_12bad_any_castEEEEE, i64 0, inrange i32 1, i64 2) to i32 (...)**), i32 (...)*** %32, align 8, !tbaa !10\n  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [8 x i8*], [4 x i8*], [9 x i8*] }, { [8 x i8*], [4 x i8*], [9 x i8*] }* @_ZTVN5boost16exception_detail10clone_implINS0_19error_info_injectorINS_12bad_any_castEEEEE, i64 0, inrange i32 2, i64 5) to i32 (...)**), i32 (...)*** %11, align 8, !tbaa !10\n  %33 = bitcast %\"class.boost::exception.base\"* %31 to %\"class.boost::exception\"*\n  %34 = getelementptr inbounds i8, i8* %8, i64 8\n  %35 = bitcast i8* %34 to %\"class.boost::exception\"*\n  invoke void @_ZN5boost16exception_detail20copy_boost_exceptionEPNS_9exceptionEPKS1_(%\"class.boost::exception\"* nonnull %33, %\"class.boost::exception\"* nonnull %35)\n          to label %56 unwind label %36\n\n36:                                               ; preds = %27\n  %37 = landingpad { i8*, i32 }\n          cleanup\n  %38 = getelementptr inbounds %\"struct.boost::exception_detail::error_info_injector\", %\"struct.boost::exception_detail::error_info_injector\"* %12, i64 0, i32 1, i32 0\n  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [4 x i8*] }, { [4 x i8*] }* @_ZTVN5boost9exceptionE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %38, align 8, !tbaa !10\n  %39 = getelementptr inbounds %\"struct.boost::exception_detail::error_info_injector\", %\"struct.boost::exception_detail::error_info_injector\"* %12, i64 0, i32 1, i32 1, i32 0\n  %40 = load %\"struct.boost::exception_detail::error_info_container\"*, %\"struct.boost::exception_detail::error_info_container\"** %39, align 8, !tbaa !32\n  %41 = icmp eq %\"struct.boost::exception_detail::error_info_container\"* %40, null\n  br i1 %41, label %53, label %42\n\n42:                                               ; preds = %36\n  %43 = bitcast %\"struct.boost::exception_detail::error_info_container\"* %40 to i1 (%\"struct.boost::exception_detail::error_info_container\"*)***\n  %44 = load i1 (%\"struct.boost::exception_detail::error_info_container\"*)**, i1 (%\"struct.boost::exception_detail::error_info_container\"*)*** %43, align 8, !tbaa !10\n  %45 = getelementptr inbounds i1 (%\"struct.boost::exception_detail::error_info_container\"*)*, i1 (%\"struct.boost::exception_detail::error_info_container\"*)** %44, i64 4\n  %46 = load i1 (%\"struct.boost::exception_detail::error_info_container\"*)*, i1 (%\"struct.boost::exception_detail::error_info_container\"*)** %45, align 8\n  %47 = invoke zeroext i1 %46(%\"struct.boost::exception_detail::error_info_container\"* nonnull align 8 dereferenceable(8) %40)\n          to label %48 unwind label %50\n\n48:                                               ; preds = %42\n  br i1 %47, label %49, label %53\n\n49:                                               ; preds = %48\n  store %\"struct.boost::exception_detail::error_info_container\"* null, %\"struct.boost::exception_detail::error_info_container\"** %39, align 8, !tbaa !32\n  br label %53\n\n50:                                               ; preds = %42\n  %51 = landingpad { i8*, i32 }\n          catch i8* null\n  %52 = extractvalue { i8*, i32 } %51, 0\n  tail call void @__clang_call_terminate(i8* %52) #21\n  unreachable\n\n53:                                               ; preds = %49, %48, %36, %25\n  %54 = phi { i8*, i32 } [ %26, %25 ], [ %37, %36 ], [ %37, %48 ], [ %37, %49 ]\n  %55 = bitcast i8* %9 to %\"class.std::bad_cast\"*\n  tail call void @_ZNSt8bad_castD2Ev(%\"class.std::bad_cast\"* nonnull align 8 dereferenceable(8) %55) #17\n  tail call void @_ZdlPv(i8* nonnull %9) #22\n  resume { i8*, i32 } %54\n\n56:                                               ; preds = %27\n  %57 = bitcast i8* %9 to i8**\n  %58 = load i8*, i8** %57, align 8, !tbaa !10\n  %59 = getelementptr i8, i8* %58, i64 -24\n  %60 = bitcast i8* %59 to i64*\n  %61 = load i64, i64* %60, align 8\n  %62 = getelementptr inbounds i8, i8* %9, i64 %61\n  %63 = bitcast i8* %62 to %\"class.boost::exception_detail::clone_base\"*\n  ret %\"class.boost::exception_detail::clone_base\"* %63\n}\n\n; Function Attrs: uwtable\ndefine linkonce_odr dso_local void @_ZTv0_n32_NK5boost16exception_detail10clone_implINS0_19error_info_injectorINS_12bad_any_castEEEE7rethrowEv(%\"class.boost::exception_detail::clone_impl\"* %0) unnamed_addr #0 comdat align 2 personality i32 (...)* @__gxx_personality_v0 {\n  %2 = bitcast %\"class.boost::exception_detail::clone_impl\"* %0 to i8*\n  %3 = bitcast %\"class.boost::exception_detail::clone_impl\"* %0 to i8**\n  %4 = load i8*, i8** %3, align 8\n  %5 = getelementptr inbounds i8, i8* %4, i64 -32\n  %6 = bitcast i8* %5 to i64*\n  %7 = load i64, i64* %6, align 8\n  %8 = getelementptr inbounds i8, i8* %2, i64 %7\n  %9 = bitcast i8* %8 to %\"class.boost::exception_detail::clone_impl\"*\n  %10 = tail call i8* @__cxa_allocate_exception(i64 56) #17\n  %11 = bitcast i8* %10 to %\"class.boost::exception_detail::clone_impl\"*\n  invoke void @_ZN5boost16exception_detail10clone_implINS0_19error_info_injectorINS_12bad_any_castEEEEC1ERKS5_(%\"class.boost::exception_detail::clone_impl\"* nonnull align 8 dereferenceable(44) %11, %\"class.boost::exception_detail::clone_impl\"* nonnull align 8 dereferenceable(44) %9)\n          to label %12 unwind label %13\n\n12:                                               ; preds = %1\n  tail call void @__cxa_throw(i8* %10, i8* bitcast ({ i8*, i8*, i32, i32, i8*, i64, i8*, i64 }* @_ZTIN5boost16exception_detail10clone_implINS0_19error_info_injectorINS_12bad_any_castEEEEE to i8*), i8* bitcast (void (%\"class.boost::exception_detail::clone_impl\"*)* @_ZN5boost16exception_detail10clone_implINS0_19error_info_injectorINS_12bad_any_castEEEED1Ev to i8*)) #19\n  unreachable\n\n13:                                               ; preds = %1\n  %14 = landingpad { i8*, i32 }\n          cleanup\n  tail call void @__cxa_free_exception(i8* %10) #17\n  resume { i8*, i32 } %14\n}\n\n; Function Attrs: nounwind uwtable\ndefine linkonce_odr dso_local void @_ZTv0_n40_N5boost16exception_detail10clone_implINS0_19error_info_injectorINS_12bad_any_castEEEED1Ev(%\"class.boost::exception_detail::clone_impl\"* %0) unnamed_addr #9 comdat align 2 personality i32 (...)* @__gxx_personality_v0 {\n  %2 = bitcast %\"class.boost::exception_detail::clone_impl\"* %0 to i8*\n  %3 = bitcast %\"class.boost::exception_detail::clone_impl\"* %0 to i8**\n  %4 = load i8*, i8** %3, align 8\n  %5 = getelementptr inbounds i8, i8* %4, i64 -40\n  %6 = bitcast i8* %5 to i64*\n  %7 = load i64, i64* %6, align 8\n  %8 = getelementptr inbounds i8, i8* %2, i64 %7\n  %9 = getelementptr inbounds i8, i8* %8, i64 8\n  %10 = bitcast i8* %9 to i32 (...)***\n  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [4 x i8*] }, { [4 x i8*] }* @_ZTVN5boost9exceptionE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %10, align 8, !tbaa !10\n  %11 = getelementptr inbounds i8, i8* %8, i64 16\n  %12 = bitcast i8* %11 to %\"struct.boost::exception_detail::error_info_container\"**\n  %13 = load %\"struct.boost::exception_detail::error_info_container\"*, %\"struct.boost::exception_detail::error_info_container\"** %12, align 8, !tbaa !32\n  %14 = icmp eq %\"struct.boost::exception_detail::error_info_container\"* %13, null\n  br i1 %14, label %26, label %15\n\n15:                                               ; preds = %1\n  %16 = bitcast %\"struct.boost::exception_detail::error_info_container\"* %13 to i1 (%\"struct.boost::exception_detail::error_info_container\"*)***\n  %17 = load i1 (%\"struct.boost::exception_detail::error_info_container\"*)**, i1 (%\"struct.boost::exception_detail::error_info_container\"*)*** %16, align 8, !tbaa !10\n  %18 = getelementptr inbounds i1 (%\"struct.boost::exception_detail::error_info_container\"*)*, i1 (%\"struct.boost::exception_detail::error_info_container\"*)** %17, i64 4\n  %19 = load i1 (%\"struct.boost::exception_detail::error_info_container\"*)*, i1 (%\"struct.boost::exception_detail::error_info_container\"*)** %18, align 8\n  %20 = invoke zeroext i1 %19(%\"struct.boost::exception_detail::error_info_container\"* nonnull align 8 dereferenceable(8) %13)\n          to label %21 unwind label %23\n\n21:                                               ; preds = %15\n  br i1 %20, label %22, label %26\n\n22:                                               ; preds = %21\n  store %\"struct.boost::exception_detail::error_info_container\"* null, %\"struct.boost::exception_detail::error_info_container\"** %12, align 8, !tbaa !32\n  br label %26\n\n23:                                               ; preds = %15\n  %24 = landingpad { i8*, i32 }\n          catch i8* null\n  %25 = extractvalue { i8*, i32 } %24, 0\n  tail call void @__clang_call_terminate(i8* %25) #21\n  unreachable\n\n26:                                               ; preds = %1, %21, %22\n  %27 = bitcast i8* %8 to %\"class.std::bad_cast\"*\n  tail call void @_ZNSt8bad_castD2Ev(%\"class.std::bad_cast\"* nonnull align 8 dereferenceable(8) %27) #17\n  ret void\n}\n\n; Function Attrs: nounwind uwtable\ndefine linkonce_odr dso_local void @_ZTv0_n40_N5boost16exception_detail10clone_implINS0_19error_info_injectorINS_12bad_any_castEEEED0Ev(%\"class.boost::exception_detail::clone_impl\"* %0) unnamed_addr #9 comdat align 2 personality i32 (...)* @__gxx_personality_v0 {\n  %2 = bitcast %\"class.boost::exception_detail::clone_impl\"* %0 to i8*\n  %3 = bitcast %\"class.boost::exception_detail::clone_impl\"* %0 to i8**\n  %4 = load i8*, i8** %3, align 8\n  %5 = getelementptr inbounds i8, i8* %4, i64 -40\n  %6 = bitcast i8* %5 to i64*\n  %7 = load i64, i64* %6, align 8\n  %8 = getelementptr inbounds i8, i8* %2, i64 %7\n  %9 = getelementptr inbounds i8, i8* %8, i64 8\n  %10 = bitcast i8* %9 to i32 (...)***\n  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [4 x i8*] }, { [4 x i8*] }* @_ZTVN5boost9exceptionE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %10, align 8, !tbaa !10\n  %11 = getelementptr inbounds i8, i8* %8, i64 16\n  %12 = bitcast i8* %11 to %\"struct.boost::exception_detail::error_info_container\"**\n  %13 = load %\"struct.boost::exception_detail::error_info_container\"*, %\"struct.boost::exception_detail::error_info_container\"** %12, align 8, !tbaa !32\n  %14 = icmp eq %\"struct.boost::exception_detail::error_info_container\"* %13, null\n  br i1 %14, label %26, label %15\n\n15:                                               ; preds = %1\n  %16 = bitcast %\"struct.boost::exception_detail::error_info_container\"* %13 to i1 (%\"struct.boost::exception_detail::error_info_container\"*)***\n  %17 = load i1 (%\"struct.boost::exception_detail::error_info_container\"*)**, i1 (%\"struct.boost::exception_detail::error_info_container\"*)*** %16, align 8, !tbaa !10\n  %18 = getelementptr inbounds i1 (%\"struct.boost::exception_detail::error_info_container\"*)*, i1 (%\"struct.boost::exception_detail::error_info_container\"*)** %17, i64 4\n  %19 = load i1 (%\"struct.boost::exception_detail::error_info_container\"*)*, i1 (%\"struct.boost::exception_detail::error_info_container\"*)** %18, align 8\n  %20 = invoke zeroext i1 %19(%\"struct.boost::exception_detail::error_info_container\"* nonnull align 8 dereferenceable(8) %13)\n          to label %21 unwind label %23\n\n21:                                               ; preds = %15\n  br i1 %20, label %22, label %26\n\n22:                                               ; preds = %21\n  store %\"struct.boost::exception_detail::error_info_container\"* null, %\"struct.boost::exception_detail::error_info_container\"** %12, align 8, !tbaa !32\n  br label %26\n\n23:                                               ; preds = %15\n  %24 = landingpad { i8*, i32 }\n          catch i8* null\n  %25 = extractvalue { i8*, i32 } %24, 0\n  tail call void @__clang_call_terminate(i8* %25) #21\n  unreachable\n\n26:                                               ; preds = %1, %21, %22\n  %27 = bitcast i8* %8 to %\"class.std::bad_cast\"*\n  tail call void @_ZNSt8bad_castD2Ev(%\"class.std::bad_cast\"* nonnull align 8 dereferenceable(8) %27) #17\n  tail call void @_ZdlPv(i8* nonnull %8) #22\n  ret void\n}\n\ndeclare dso_local void @__cxa_pure_virtual() unnamed_addr\n\n; Function Attrs: nounwind uwtable\ndefine linkonce_odr dso_local void @_ZN5boost16exception_detail10clone_baseD2Ev(%\"class.boost::exception_detail::clone_base\"* nonnull align 8 dereferenceable(8) %0) unnamed_addr #9 comdat align 2 {\n  ret void\n}\n\n; Function Attrs: nounwind uwtable\ndefine linkonce_odr dso_local void @_ZN5boost16exception_detail10clone_baseD0Ev(%\"class.boost::exception_detail::clone_base\"* nonnull align 8 dereferenceable(8) %0) unnamed_addr #9 comdat align 2 {\n  tail call void @llvm.trap() #21\n  unreachable\n}\n\n; Function Attrs: cold noreturn nounwind\ndeclare void @llvm.trap() #13\n\n; Function Attrs: nounwind uwtable\ndefine linkonce_odr dso_local void @_ZN5boost16exception_detail19error_info_injectorINS_12bad_any_castEED0Ev(%\"struct.boost::exception_detail::error_info_injector\"* nonnull align 8 dereferenceable(44) %0) unnamed_addr #9 comdat align 2 personality i32 (...)* @__gxx_personality_v0 {\n  %2 = getelementptr inbounds %\"struct.boost::exception_detail::error_info_injector\", %\"struct.boost::exception_detail::error_info_injector\"* %0, i64 0, i32 1, i32 0\n  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [4 x i8*] }, { [4 x i8*] }* @_ZTVN5boost9exceptionE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8, !tbaa !10\n  %3 = getelementptr inbounds %\"struct.boost::exception_detail::error_info_injector\", %\"struct.boost::exception_detail::error_info_injector\"* %0, i64 0, i32 1, i32 1, i32 0\n  %4 = load %\"struct.boost::exception_detail::error_info_container\"*, %\"struct.boost::exception_detail::error_info_container\"** %3, align 8, !tbaa !32\n  %5 = icmp eq %\"struct.boost::exception_detail::error_info_container\"* %4, null\n  br i1 %5, label %17, label %6\n\n6:                                                ; preds = %1\n  %7 = bitcast %\"struct.boost::exception_detail::error_info_container\"* %4 to i1 (%\"struct.boost::exception_detail::error_info_container\"*)***\n  %8 = load i1 (%\"struct.boost::exception_detail::error_info_container\"*)**, i1 (%\"struct.boost::exception_detail::error_info_container\"*)*** %7, align 8, !tbaa !10\n  %9 = getelementptr inbounds i1 (%\"struct.boost::exception_detail::error_info_container\"*)*, i1 (%\"struct.boost::exception_detail::error_info_container\"*)** %8, i64 4\n  %10 = load i1 (%\"struct.boost::exception_detail::error_info_container\"*)*, i1 (%\"struct.boost::exception_detail::error_info_container\"*)** %9, align 8\n  %11 = invoke zeroext i1 %10(%\"struct.boost::exception_detail::error_info_container\"* nonnull align 8 dereferenceable(8) %4)\n          to label %12 unwind label %14\n\n12:                                               ; preds = %6\n  br i1 %11, label %13, label %17\n\n13:                                               ; preds = %12\n  store %\"struct.boost::exception_detail::error_info_container\"* null, %\"struct.boost::exception_detail::error_info_container\"** %3, align 8, !tbaa !32\n  br label %17\n\n14:                                               ; preds = %6\n  %15 = landingpad { i8*, i32 }\n          catch i8* null\n  %16 = extractvalue { i8*, i32 } %15, 0\n  tail call void @__clang_call_terminate(i8* %16) #21\n  unreachable\n\n17:                                               ; preds = %1, %12, %13\n  %18 = getelementptr inbounds %\"struct.boost::exception_detail::error_info_injector\", %\"struct.boost::exception_detail::error_info_injector\"* %0, i64 0, i32 0, i32 0\n  tail call void @_ZNSt8bad_castD2Ev(%\"class.std::bad_cast\"* nonnull align 8 dereferenceable(8) %18) #17\n  %19 = bitcast %\"struct.boost::exception_detail::error_info_injector\"* %0 to i8*\n  tail call void @_ZdlPv(i8* nonnull %19) #22\n  ret void\n}\n\n; Function Attrs: nounwind uwtable\ndefine linkonce_odr dso_local void @_ZThn8_N5boost16exception_detail19error_info_injectorINS_12bad_any_castEED1Ev(%\"struct.boost::exception_detail::error_info_injector\"* %0) unnamed_addr #9 comdat align 2 personality i32 (...)* @__gxx_personality_v0 {\n  %2 = getelementptr inbounds %\"struct.boost::exception_detail::error_info_injector\", %\"struct.boost::exception_detail::error_info_injector\"* %0, i64 -1, i32 1, i32 4\n  %3 = getelementptr inbounds i32, i32* %2, i64 2\n  %4 = bitcast i32* %3 to i32 (...)***\n  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [4 x i8*] }, { [4 x i8*] }* @_ZTVN5boost9exceptionE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %4, align 8, !tbaa !10\n  %5 = getelementptr inbounds i32, i32* %2, i64 4\n  %6 = bitcast i32* %5 to %\"struct.boost::exception_detail::error_info_container\"**\n  %7 = load %\"struct.boost::exception_detail::error_info_container\"*, %\"struct.boost::exception_detail::error_info_container\"** %6, align 8, !tbaa !32\n  %8 = icmp eq %\"struct.boost::exception_detail::error_info_container\"* %7, null\n  br i1 %8, label %20, label %9\n\n9:                                                ; preds = %1\n  %10 = bitcast %\"struct.boost::exception_detail::error_info_container\"* %7 to i1 (%\"struct.boost::exception_detail::error_info_container\"*)***\n  %11 = load i1 (%\"struct.boost::exception_detail::error_info_container\"*)**, i1 (%\"struct.boost::exception_detail::error_info_container\"*)*** %10, align 8, !tbaa !10\n  %12 = getelementptr inbounds i1 (%\"struct.boost::exception_detail::error_info_container\"*)*, i1 (%\"struct.boost::exception_detail::error_info_container\"*)** %11, i64 4\n  %13 = load i1 (%\"struct.boost::exception_detail::error_info_container\"*)*, i1 (%\"struct.boost::exception_detail::error_info_container\"*)** %12, align 8\n  %14 = invoke zeroext i1 %13(%\"struct.boost::exception_detail::error_info_container\"* nonnull align 8 dereferenceable(8) %7)\n          to label %15 unwind label %17\n\n15:                                               ; preds = %9\n  br i1 %14, label %16, label %20\n\n16:                                               ; preds = %15\n  store %\"struct.boost::exception_detail::error_info_container\"* null, %\"struct.boost::exception_detail::error_info_container\"** %6, align 8, !tbaa !32\n  br label %20\n\n17:                                               ; preds = %9\n  %18 = landingpad { i8*, i32 }\n          catch i8* null\n  %19 = extractvalue { i8*, i32 } %18, 0\n  tail call void @__clang_call_terminate(i8* %19) #21\n  unreachable\n\n20:                                               ; preds = %1, %15, %16\n  %21 = bitcast i32* %2 to %\"class.std::bad_cast\"*\n  tail call void @_ZNSt8bad_castD2Ev(%\"class.std::bad_cast\"* nonnull align 8 dereferenceable(8) %21) #17\n  ret void\n}\n\n; Function Attrs: nounwind uwtable\ndefine linkonce_odr dso_local void @_ZThn8_N5boost16exception_detail19error_info_injectorINS_12bad_any_castEED0Ev(%\"struct.boost::exception_detail::error_info_injector\"* %0) unnamed_addr #9 comdat align 2 personality i32 (...)* @__gxx_personality_v0 {\n  %2 = getelementptr inbounds %\"struct.boost::exception_detail::error_info_injector\", %\"struct.boost::exception_detail::error_info_injector\"* %0, i64 -1, i32 1, i32 4\n  %3 = getelementptr inbounds i32, i32* %2, i64 2\n  %4 = bitcast i32* %3 to i32 (...)***\n  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [4 x i8*] }, { [4 x i8*] }* @_ZTVN5boost9exceptionE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %4, align 8, !tbaa !10\n  %5 = getelementptr inbounds i32, i32* %2, i64 4\n  %6 = bitcast i32* %5 to %\"struct.boost::exception_detail::error_info_container\"**\n  %7 = load %\"struct.boost::exception_detail::error_info_container\"*, %\"struct.boost::exception_detail::error_info_container\"** %6, align 8, !tbaa !32\n  %8 = icmp eq %\"struct.boost::exception_detail::error_info_container\"* %7, null\n  br i1 %8, label %20, label %9\n\n9:                                                ; preds = %1\n  %10 = bitcast %\"struct.boost::exception_detail::error_info_container\"* %7 to i1 (%\"struct.boost::exception_detail::error_info_container\"*)***\n  %11 = load i1 (%\"struct.boost::exception_detail::error_info_container\"*)**, i1 (%\"struct.boost::exception_detail::error_info_container\"*)*** %10, align 8, !tbaa !10\n  %12 = getelementptr inbounds i1 (%\"struct.boost::exception_detail::error_info_container\"*)*, i1 (%\"struct.boost::exception_detail::error_info_container\"*)** %11, i64 4\n  %13 = load i1 (%\"struct.boost::exception_detail::error_info_container\"*)*, i1 (%\"struct.boost::exception_detail::error_info_container\"*)** %12, align 8\n  %14 = invoke zeroext i1 %13(%\"struct.boost::exception_detail::error_info_container\"* nonnull align 8 dereferenceable(8) %7)\n          to label %15 unwind label %17\n\n15:                                               ; preds = %9\n  br i1 %14, label %16, label %20\n\n16:                                               ; preds = %15\n  store %\"struct.boost::exception_detail::error_info_container\"* null, %\"struct.boost::exception_detail::error_info_container\"** %6, align 8, !tbaa !32\n  br label %20\n\n17:                                               ; preds = %9\n  %18 = landingpad { i8*, i32 }\n          catch i8* null\n  %19 = extractvalue { i8*, i32 } %18, 0\n  tail call void @__clang_call_terminate(i8* %19) #21\n  unreachable\n\n20:                                               ; preds = %1, %15, %16\n  %21 = bitcast i32* %2 to %\"class.std::bad_cast\"*\n  tail call void @_ZNSt8bad_castD2Ev(%\"class.std::bad_cast\"* nonnull align 8 dereferenceable(8) %21) #17\n  %22 = bitcast i32* %2 to i8*\n  tail call void @_ZdlPv(i8* nonnull %22) #22\n  ret void\n}\n\n; Function Attrs: inlinehint nounwind uwtable\ndefine linkonce_odr dso_local void @_ZN5boost12bad_any_castD0Ev(%\"class.boost::bad_any_cast\"* nonnull align 8 dereferenceable(8) %0) unnamed_addr #14 comdat align 2 {\n  %2 = getelementptr inbounds %\"class.boost::bad_any_cast\", %\"class.boost::bad_any_cast\"* %0, i64 0, i32 0\n  tail call void @_ZNSt8bad_castD2Ev(%\"class.std::bad_cast\"* nonnull align 8 dereferenceable(8) %2) #17\n  %3 = bitcast %\"class.boost::bad_any_cast\"* %0 to i8*\n  tail call void @_ZdlPv(i8* nonnull %3) #22\n  ret void\n}\n\n; Function Attrs: nobuiltin allocsize(0)\ndeclare dso_local nonnull i8* @_Znwm(i64) local_unnamed_addr #15\n\n; Function Attrs: uwtable\ndefine linkonce_odr dso_local void @_ZN5boost16exception_detail10clone_implINS0_19error_info_injectorINS_12bad_any_castEEEEC1ERKS5_NS5_9clone_tagE(%\"class.boost::exception_detail::clone_impl\"* nonnull align 8 dereferenceable(44) %0, %\"class.boost::exception_detail::clone_impl\"* nonnull align 8 dereferenceable(44) %1) unnamed_addr #0 comdat align 2 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {\n  %3 = getelementptr inbounds %\"class.boost::exception_detail::clone_impl\", %\"class.boost::exception_detail::clone_impl\"* %0, i64 0, i32 1, i32 0\n  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN5boost16exception_detail10clone_baseE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %3, align 8, !tbaa !10\n  %4 = bitcast %\"class.boost::exception_detail::clone_impl\"* %0 to %\"struct.boost::exception_detail::error_info_injector\"*\n  %5 = getelementptr inbounds %\"class.boost::exception_detail::clone_impl\", %\"class.boost::exception_detail::clone_impl\"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0\n  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*] }, { [5 x i8*] }* @_ZTVN5boost12bad_any_castE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %5, align 8, !tbaa !10\n  %6 = getelementptr inbounds %\"class.boost::exception_detail::clone_impl\", %\"class.boost::exception_detail::clone_impl\"* %0, i64 0, i32 0, i32 1, i32 0\n  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [4 x i8*] }, { [4 x i8*] }* @_ZTVN5boost9exceptionE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %6, align 8, !tbaa !10\n  %7 = getelementptr inbounds %\"class.boost::exception_detail::clone_impl\", %\"class.boost::exception_detail::clone_impl\"* %0, i64 0, i32 0, i32 1, i32 1, i32 0\n  %8 = getelementptr inbounds %\"class.boost::exception_detail::clone_impl\", %\"class.boost::exception_detail::clone_impl\"* %1, i64 0, i32 0, i32 1, i32 1, i32 0\n  %9 = load %\"struct.boost::exception_detail::error_info_container\"*, %\"struct.boost::exception_detail::error_info_container\"** %8, align 8, !tbaa !32\n  store %\"struct.boost::exception_detail::error_info_container\"* %9, %\"struct.boost::exception_detail::error_info_container\"** %7, align 8, !tbaa !32\n  %10 = icmp eq %\"struct.boost::exception_detail::error_info_container\"* %9, null\n  br i1 %10, label %19, label %11\n\n11:                                               ; preds = %2\n  %12 = bitcast %\"struct.boost::exception_detail::error_info_container\"* %9 to void (%\"struct.boost::exception_detail::error_info_container\"*)***\n  %13 = load void (%\"struct.boost::exception_detail::error_info_container\"*)**, void (%\"struct.boost::exception_detail::error_info_container\"*)*** %12, align 8, !tbaa !10\n  %14 = getelementptr inbounds void (%\"struct.boost::exception_detail::error_info_container\"*)*, void (%\"struct.boost::exception_detail::error_info_container\"*)** %13, i64 3\n  %15 = load void (%\"struct.boost::exception_detail::error_info_container\"*)*, void (%\"struct.boost::exception_detail::error_info_container\"*)** %14, align 8\n  invoke void %15(%\"struct.boost::exception_detail::error_info_container\"* nonnull align 8 dereferenceable(8) %9)\n          to label %19 unwind label %16\n\n16:                                               ; preds = %11\n  %17 = landingpad { i8*, i32 }\n          cleanup\n  %18 = getelementptr inbounds %\"class.boost::exception_detail::clone_impl\", %\"class.boost::exception_detail::clone_impl\"* %0, i64 0, i32 0, i32 0, i32 0\n  tail call void @_ZNSt8bad_castD2Ev(%\"class.std::bad_cast\"* nonnull align 8 dereferenceable(8) %18) #17\n  br label %32\n\n19:                                               ; preds = %11, %2\n  %20 = getelementptr inbounds %\"class.boost::exception_detail::clone_impl\", %\"class.boost::exception_detail::clone_impl\"* %0, i64 0, i32 0, i32 1, i32 2\n  %21 = getelementptr inbounds %\"class.boost::exception_detail::clone_impl\", %\"class.boost::exception_detail::clone_impl\"* %1, i64 0, i32 0, i32 1, i32 2\n  %22 = bitcast i8** %20 to i8*\n  %23 = bitcast i8** %21 to i8*\n  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(20) %22, i8* noundef nonnull align 8 dereferenceable(20) %23, i64 20, i1 false)\n  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [8 x i8*], [4 x i8*], [9 x i8*] }, { [8 x i8*], [4 x i8*], [9 x i8*] }* @_ZTVN5boost16exception_detail10clone_implINS0_19error_info_injectorINS_12bad_any_castEEEEE, i64 0, inrange i32 0, i64 3) to i32 (...)**), i32 (...)*** %5, align 8, !tbaa !10\n  %24 = getelementptr inbounds %\"class.boost::exception_detail::clone_impl\", %\"class.boost::exception_detail::clone_impl\"* %0, i64 0, i32 0, i32 1\n  %25 = getelementptr %\"class.boost::exception.base\", %\"class.boost::exception.base\"* %24, i64 0, i32 0\n  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [8 x i8*], [4 x i8*], [9 x i8*] }, { [8 x i8*], [4 x i8*], [9 x i8*] }* @_ZTVN5boost16exception_detail10clone_implINS0_19error_info_injectorINS_12bad_any_castEEEEE, i64 0, inrange i32 1, i64 2) to i32 (...)**), i32 (...)*** %25, align 8, !tbaa !10\n  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [8 x i8*], [4 x i8*], [9 x i8*] }, { [8 x i8*], [4 x i8*], [9 x i8*] }* @_ZTVN5boost16exception_detail10clone_implINS0_19error_info_injectorINS_12bad_any_castEEEEE, i64 0, inrange i32 2, i64 5) to i32 (...)**), i32 (...)*** %3, align 8, !tbaa !10\n  %26 = bitcast %\"class.boost::exception.base\"* %24 to %\"class.boost::exception\"*\n  %27 = getelementptr inbounds %\"class.boost::exception_detail::clone_impl\", %\"class.boost::exception_detail::clone_impl\"* %1, i64 0, i32 0, i32 1\n  %28 = bitcast %\"class.boost::exception.base\"* %27 to %\"class.boost::exception\"*\n  invoke void @_ZN5boost16exception_detail20copy_boost_exceptionEPNS_9exceptionEPKS1_(%\"class.boost::exception\"* nonnull %26, %\"class.boost::exception\"* nonnull %28)\n          to label %29 unwind label %30\n\n29:                                               ; preds = %19\n  ret void\n\n30:                                               ; preds = %19\n  %31 = landingpad { i8*, i32 }\n          cleanup\n  tail call void @_ZN5boost16exception_detail19error_info_injectorINS_12bad_any_castEED2Ev(%\"struct.boost::exception_detail::error_info_injector\"* nonnull align 8 dereferenceable(44) %4) #17\n  br label %32\n\n32:                                               ; preds = %16, %30\n  %33 = phi { i8*, i32 } [ %31, %30 ], [ %17, %16 ]\n  resume { i8*, i32 } %33\n}\n\n; Function Attrs: inlinehint uwtable\ndefine linkonce_odr dso_local void @_ZN5boost16exception_detail10clone_implINS0_19error_info_injectorINS_12bad_any_castEEEEC1ERKS5_(%\"class.boost::exception_detail::clone_impl\"* nonnull align 8 dereferenceable(44) %0, %\"class.boost::exception_detail::clone_impl\"* nonnull align 8 dereferenceable(44) %1) unnamed_addr #10 comdat align 2 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {\n  %3 = getelementptr inbounds %\"class.boost::exception_detail::clone_impl\", %\"class.boost::exception_detail::clone_impl\"* %0, i64 0, i32 1, i32 0\n  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN5boost16exception_detail10clone_baseE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %3, align 8, !tbaa !10\n  %4 = getelementptr inbounds %\"class.boost::exception_detail::clone_impl\", %\"class.boost::exception_detail::clone_impl\"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0\n  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*] }, { [5 x i8*] }* @_ZTVN5boost12bad_any_castE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %4, align 8, !tbaa !10\n  %5 = getelementptr inbounds %\"class.boost::exception_detail::clone_impl\", %\"class.boost::exception_detail::clone_impl\"* %0, i64 0, i32 0, i32 1, i32 0\n  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [4 x i8*] }, { [4 x i8*] }* @_ZTVN5boost9exceptionE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %5, align 8, !tbaa !10\n  %6 = getelementptr inbounds %\"class.boost::exception_detail::clone_impl\", %\"class.boost::exception_detail::clone_impl\"* %0, i64 0, i32 0, i32 1, i32 1, i32 0\n  %7 = getelementptr inbounds %\"class.boost::exception_detail::clone_impl\", %\"class.boost::exception_detail::clone_impl\"* %1, i64 0, i32 0, i32 1, i32 1, i32 0\n  %8 = load %\"struct.boost::exception_detail::error_info_container\"*, %\"struct.boost::exception_detail::error_info_container\"** %7, align 8, !tbaa !32\n  store %\"struct.boost::exception_detail::error_info_container\"* %8, %\"struct.boost::exception_detail::error_info_container\"** %6, align 8, !tbaa !32\n  %9 = icmp eq %\"struct.boost::exception_detail::error_info_container\"* %8, null\n  br i1 %9, label %18, label %10\n\n10:                                               ; preds = %2\n  %11 = bitcast %\"struct.boost::exception_detail::error_info_container\"* %8 to void (%\"struct.boost::exception_detail::error_info_container\"*)***\n  %12 = load void (%\"struct.boost::exception_detail::error_info_container\"*)**, void (%\"struct.boost::exception_detail::error_info_container\"*)*** %11, align 8, !tbaa !10\n  %13 = getelementptr inbounds void (%\"struct.boost::exception_detail::error_info_container\"*)*, void (%\"struct.boost::exception_detail::error_info_container\"*)** %12, i64 3\n  %14 = load void (%\"struct.boost::exception_detail::error_info_container\"*)*, void (%\"struct.boost::exception_detail::error_info_container\"*)** %13, align 8\n  invoke void %14(%\"struct.boost::exception_detail::error_info_container\"* nonnull align 8 dereferenceable(8) %8)\n          to label %18 unwind label %15\n\n15:                                               ; preds = %10\n  %16 = landingpad { i8*, i32 }\n          cleanup\n  %17 = getelementptr inbounds %\"class.boost::exception_detail::clone_impl\", %\"class.boost::exception_detail::clone_impl\"* %0, i64 0, i32 0, i32 0, i32 0\n  tail call void @_ZNSt8bad_castD2Ev(%\"class.std::bad_cast\"* nonnull align 8 dereferenceable(8) %17) #17\n  resume { i8*, i32 } %16\n\n18:                                               ; preds = %10, %2\n  %19 = getelementptr inbounds %\"class.boost::exception_detail::clone_impl\", %\"class.boost::exception_detail::clone_impl\"* %0, i64 0, i32 0, i32 1, i32 2\n  %20 = getelementptr inbounds %\"class.boost::exception_detail::clone_impl\", %\"class.boost::exception_detail::clone_impl\"* %1, i64 0, i32 0, i32 1, i32 2\n  %21 = bitcast i8** %19 to i8*\n  %22 = bitcast i8** %20 to i8*\n  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(20) %21, i8* noundef nonnull align 8 dereferenceable(20) %22, i64 20, i1 false)\n  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [8 x i8*], [4 x i8*], [9 x i8*] }, { [8 x i8*], [4 x i8*], [9 x i8*] }* @_ZTVN5boost16exception_detail10clone_implINS0_19error_info_injectorINS_12bad_any_castEEEEE, i64 0, inrange i32 0, i64 3) to i32 (...)**), i32 (...)*** %4, align 8, !tbaa !10\n  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [8 x i8*], [4 x i8*], [9 x i8*] }, { [8 x i8*], [4 x i8*], [9 x i8*] }* @_ZTVN5boost16exception_detail10clone_implINS0_19error_info_injectorINS_12bad_any_castEEEEE, i64 0, inrange i32 1, i64 2) to i32 (...)**), i32 (...)*** %5, align 8, !tbaa !10\n  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [8 x i8*], [4 x i8*], [9 x i8*] }, { [8 x i8*], [4 x i8*], [9 x i8*] }* @_ZTVN5boost16exception_detail10clone_implINS0_19error_info_injectorINS_12bad_any_castEEEEE, i64 0, inrange i32 2, i64 5) to i32 (...)**), i32 (...)*** %3, align 8, !tbaa !10\n  ret void\n}\n\n; Function Attrs: noreturn\ndeclare dso_local void @_ZSt20__throw_length_errorPKc(i8*) local_unnamed_addr #16\n\n; Function Attrs: argmemonly mustprogress nofree nounwind willreturn\ndeclare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #2\n\nattributes #0 = { uwtable \"frame-pointer\"=\"none\" \"min-legal-vector-width\"=\"0\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #1 = { argmemonly mustprogress nofree nosync nounwind willreturn }\nattributes #2 = { argmemonly mustprogress nofree nounwind willreturn }\nattributes #3 = { argmemonly mustprogress nofree nounwind readonly willreturn \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #4 = { noinline noreturn nounwind }\nattributes #5 = { nobuiltin nounwind \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #6 = { inlinehint noreturn uwtable \"frame-pointer\"=\"none\" \"min-legal-vector-width\"=\"0\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #7 = { argmemonly mustprogress nofree nounwind willreturn writeonly }\nattributes #8 = { nounwind \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #9 = { nounwind uwtable \"frame-pointer\"=\"none\" \"min-legal-vector-width\"=\"0\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #10 = { inlinehint uwtable \"frame-pointer\"=\"none\" \"min-legal-vector-width\"=\"0\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #11 = { mustprogress nounwind uwtable \"frame-pointer\"=\"none\" \"min-legal-vector-width\"=\"0\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #12 = { mustprogress uwtable \"frame-pointer\"=\"none\" \"min-legal-vector-width\"=\"0\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #13 = { cold noreturn nounwind }\nattributes #14 = { inlinehint nounwind uwtable \"frame-pointer\"=\"none\" \"min-legal-vector-width\"=\"0\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #15 = { nobuiltin allocsize(0) \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #16 = { noreturn \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #17 = { nounwind }\nattributes #18 = { nounwind readonly willreturn }\nattributes #19 = { noreturn }\nattributes #20 = { allocsize(0) }\nattributes #21 = { noreturn nounwind }\nattributes #22 = { builtin nounwind }\nattributes #23 = { builtin allocsize(0) }\n\n!llvm.module.flags = !{!0, !1}\n!llvm.ident = !{!2}\n\n!0 = !{i32 1, !\"wchar_size\", i32 4}\n!1 = !{i32 7, !\"uwtable\", i32 1}\n!2 = !{!\"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)\"}\n!3 = !{!4, !5, i64 0}\n!4 = !{!\"_ZTSNSt8__detail15_List_node_baseE\", !5, i64 0, !5, i64 8}\n!5 = !{!\"any pointer\", !6, i64 0}\n!6 = !{!\"omnipotent char\", !7, i64 0}\n!7 = !{!\"Simple C++ TBAA\"}\n!8 = !{!9, !5, i64 0}\n!9 = !{!\"_ZTSN5boost3anyE\", !5, i64 0}\n!10 = !{!11, !11, i64 0}\n!11 = !{!\"vtable pointer\", !7, i64 0}\n!12 = !{!13, !5, i64 8}\n!13 = !{!\"_ZTSSt9type_info\", !5, i64 8}\n!14 = !{!6, !6, i64 0}\n!15 = !{!16, !16, i64 0}\n!16 = !{!\"int\", !6, i64 0}\n!17 = !{!18, !5, i64 8}\n!18 = !{!\"_ZTSNSt12_Vector_baseIiSaIiEE17_Vector_impl_dataE\", !5, i64 0, !5, i64 8, !5, i64 16}\n!19 = !{!18, !5, i64 0}\n!20 = !{!18, !5, i64 16}\n!21 = distinct !{!21, !22}\n!22 = !{!\"llvm.loop.mustprogress\"}\n!23 = !{!24}\n!24 = distinct !{!24, !25, !\"_ZN5boost17enable_error_infoINS_12bad_any_castEEENS_16exception_detail29enable_error_info_return_typeIT_E4typeERKS4_: argument 0\"}\n!25 = distinct !{!25, !\"_ZN5boost17enable_error_infoINS_12bad_any_castEEENS_16exception_detail29enable_error_info_return_typeIT_E4typeERKS4_\"}\n!26 = !{!27, !16, i64 32}\n!27 = !{!\"_ZTSN5boost9exceptionE\", !28, i64 8, !5, i64 16, !5, i64 24, !16, i64 32}\n!28 = !{!\"_ZTSN5boost16exception_detail12refcount_ptrINS0_20error_info_containerEEE\", !5, i64 0}\n!29 = !{!30}\n!30 = distinct !{!30, !31, !\"_ZN5boost24enable_current_exceptionINS_16exception_detail19error_info_injectorINS_12bad_any_castEEEEENS1_10clone_implIT_EERKS6_: argument 0\"}\n!31 = distinct !{!31, !\"_ZN5boost24enable_current_exceptionINS_16exception_detail19error_info_injectorINS_12bad_any_castEEEEENS1_10clone_implIT_EERKS6_\"}\n!32 = !{!28, !5, i64 0}\n!33 = !{!27, !5, i64 24}\n!34 = !{!27, !5, i64 16}\n", "target": "This is the targeted source code:\n/*\nFilter given vector of any python values only for integers\n>>> filter_integers({\"a\", 3.14, 5})\n{5}\n>>> filter_integers({1, 2, 3, \"abc\", {}, {}})\n{1, 2, 3}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<boost/any.hpp>\n#include<list>\ntypedef std::list<boost::any> list_any;\nusing namespace std;\nvector<int> filter_integers(list_any values){\n\n    list_any::iterator it;\n    boost::any anyone;\n    vector<int> out;\n    for (it=values.begin();it!=values.end();it++)\n    {\n         anyone=*it;\n        if( anyone.type() == typeid(int) )\n           out.push_back(boost::any_cast<int>(*it));\n    }\n    return out;\n}\n"}
{"input": "Convert this to C++:\n; ModuleID = '../../Human_xBenchmarks_164/CPP_23/CPP_23.cpp'\nsource_filename = \"../../Human_xBenchmarks_164/CPP_23/CPP_23.cpp\"\ntarget datalayout = \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\ntarget triple = \"x86_64-unknown-linux-gnu\"\n\n%\"class.std::__cxx11::basic_string\" = type { %\"struct.std::__cxx11::basic_string<char>::_Alloc_hider\", i64, %union.anon }\n%\"struct.std::__cxx11::basic_string<char>::_Alloc_hider\" = type { i8* }\n%union.anon = type { i64, [8 x i8] }\n\n; Function Attrs: mustprogress nofree norecurse nosync nounwind readonly uwtable willreturn\ndefine dso_local i32 @_Z6strlenNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE(%\"class.std::__cxx11::basic_string\"* nocapture readonly %0) local_unnamed_addr #0 {\n  %2 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 1\n  %3 = load i64, i64* %2, align 8, !tbaa !3\n  %4 = trunc i64 %3 to i32\n  ret i32 %4\n}\n\nattributes #0 = { mustprogress nofree norecurse nosync nounwind readonly uwtable willreturn \"frame-pointer\"=\"none\" \"min-legal-vector-width\"=\"0\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\n\n!llvm.module.flags = !{!0, !1}\n!llvm.ident = !{!2}\n\n!0 = !{i32 1, !\"wchar_size\", i32 4}\n!1 = !{i32 7, !\"uwtable\", i32 1}\n!2 = !{!\"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)\"}\n!3 = !{!4, !9, i64 8}\n!4 = !{!\"_ZTSNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE\", !5, i64 0, !9, i64 8, !7, i64 16}\n!5 = !{!\"_ZTSNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderE\", !6, i64 0}\n!6 = !{!\"any pointer\", !7, i64 0}\n!7 = !{!\"omnipotent char\", !8, i64 0}\n!8 = !{!\"Simple C++ TBAA\"}\n!9 = !{!\"long\", !7, i64 0}\n", "target": "This is the targeted source code:\n/*\nReturn length of given string\n>>> strlen(\"\")\n0\n>>> strlen(\"abc\")\n3\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nint strlen(string str){\n\n    return str.length();\n}\n"}
{"input": "Convert this to C++:\n; ModuleID = '../../Human_xBenchmarks_164/CPP_24/CPP_24.cpp'\nsource_filename = \"../../Human_xBenchmarks_164/CPP_24/CPP_24.cpp\"\ntarget datalayout = \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\ntarget triple = \"x86_64-unknown-linux-gnu\"\n\n; Function Attrs: mustprogress nofree norecurse nosync nounwind readnone uwtable willreturn\ndefine dso_local i32 @_Z15largest_divisori(i32 %0) local_unnamed_addr #0 {\n  %2 = icmp slt i32 %0, 4\n  br i1 %2, label %12, label %3\n\n3:                                                ; preds = %1, %8\n  %4 = phi i32 [ %9, %8 ], [ 2, %1 ]\n  %5 = srem i32 %0, %4\n  %6 = sdiv i32 %0, %4\n  %7 = icmp eq i32 %5, 0\n  br i1 %7, label %12, label %8\n\n8:                                                ; preds = %3\n  %9 = add nuw nsw i32 %4, 1\n  %10 = mul nsw i32 %9, %9\n  %11 = icmp sgt i32 %10, %0\n  br i1 %11, label %12, label %3, !llvm.loop !3\n\n12:                                               ; preds = %8, %3, %1\n  %13 = phi i32 [ 1, %1 ], [ %6, %3 ], [ 1, %8 ]\n  ret i32 %13\n}\n\nattributes #0 = { mustprogress nofree norecurse nosync nounwind readnone uwtable willreturn \"frame-pointer\"=\"none\" \"min-legal-vector-width\"=\"0\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\n\n!llvm.module.flags = !{!0, !1}\n!llvm.ident = !{!2}\n\n!0 = !{i32 1, !\"wchar_size\", i32 4}\n!1 = !{i32 7, !\"uwtable\", i32 1}\n!2 = !{!\"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)\"}\n!3 = distinct !{!3, !4}\n!4 = !{!\"llvm.loop.mustprogress\"}\n", "target": "This is the targeted source code:\n/*\nFor a given number n, find the largest number that divides n evenly, smaller than n\n>>> largest_divisor(15)\n5\n*/\n#include<stdio.h>\nusing namespace std;\nint largest_divisor(int n){\n\n    for (int i=2;i*i<=n;i++)\n        if (n%i==0) return  n/i;\n    return 1;\n\n}\n"}
{"input": "Convert this to C++:\n; ModuleID = '../../Human_xBenchmarks_164/CPP_25/CPP_25.cpp'\nsource_filename = \"../../Human_xBenchmarks_164/CPP_25/CPP_25.cpp\"\ntarget datalayout = \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\ntarget triple = \"x86_64-unknown-linux-gnu\"\n\n%\"class.std::vector\" = type { %\"struct.std::_Vector_base\" }\n%\"struct.std::_Vector_base\" = type { %\"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl\" }\n%\"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl\" = type { %\"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl_data\" }\n%\"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl_data\" = type { i32*, i32*, i32* }\n\n@.str = private unnamed_addr constant [26 x i8] c\"vector::_M_realloc_insert\\00\", align 1\n\n; Function Attrs: uwtable\ndefine dso_local void @_Z9factorizei(%\"class.std::vector\"* noalias nocapture sret(%\"class.std::vector\") align 8 %0, i32 %1) local_unnamed_addr #0 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {\n  %3 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0, i64 0, i32 0, i32 0, i32 0, i32 1\n  %4 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0, i64 0, i32 0, i32 0, i32 0, i32 2\n  %5 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0, i64 0, i32 0, i32 0, i32 0, i32 0\n  %6 = icmp slt i32 %1, 4\n  %7 = bitcast %\"class.std::vector\"* %0 to i8*\n  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(24) %7, i8 0, i64 24, i1 false)\n  br i1 %6, label %12, label %51\n\n8:                                                ; preds = %109\n  %9 = icmp eq i32* %112, %111\n  br i1 %9, label %12, label %10\n\n10:                                               ; preds = %8\n  store i32 %113, i32* %112, align 4, !tbaa !3\n  %11 = getelementptr inbounds i32, i32* %112, i64 1\n  store i32* %11, i32** %3, align 8, !tbaa !7\n  br label %120\n\n12:                                               ; preds = %2, %8\n  %13 = phi i32 [ %113, %8 ], [ %1, %2 ]\n  %14 = phi i32* [ %111, %8 ], [ null, %2 ]\n  %15 = phi i32* [ %110, %8 ], [ null, %2 ]\n  %16 = ptrtoint i32* %14 to i64\n  %17 = ptrtoint i32* %15 to i64\n  %18 = sub i64 %16, %17\n  %19 = ashr exact i64 %18, 2\n  %20 = icmp eq i64 %18, 9223372036854775804\n  br i1 %20, label %21, label %23\n\n21:                                               ; preds = %12\n  invoke void @_ZSt20__throw_length_errorPKc(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str, i64 0, i64 0)) #6\n          to label %22 unwind label %118\n\n22:                                               ; preds = %21\n  unreachable\n\n23:                                               ; preds = %12\n  %24 = icmp eq i64 %18, 0\n  %25 = select i1 %24, i64 1, i64 %19\n  %26 = add nsw i64 %25, %19\n  %27 = icmp ult i64 %26, %19\n  %28 = icmp ugt i64 %26, 2305843009213693951\n  %29 = or i1 %27, %28\n  %30 = select i1 %29, i64 2305843009213693951, i64 %26\n  %31 = icmp eq i64 %30, 0\n  br i1 %31, label %37, label %32\n\n32:                                               ; preds = %23\n  %33 = shl nuw nsw i64 %30, 2\n  %34 = invoke noalias nonnull i8* @_Znwm(i64 %33) #7\n          to label %35 unwind label %118\n\n35:                                               ; preds = %32\n  %36 = bitcast i8* %34 to i32*\n  br label %37\n\n37:                                               ; preds = %35, %23\n  %38 = phi i32* [ %36, %35 ], [ null, %23 ]\n  %39 = getelementptr inbounds i32, i32* %38, i64 %19\n  store i32 %13, i32* %39, align 4, !tbaa !3\n  %40 = icmp sgt i64 %18, 0\n  br i1 %40, label %41, label %44\n\n41:                                               ; preds = %37\n  %42 = bitcast i32* %38 to i8*\n  %43 = bitcast i32* %15 to i8*\n  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %42, i8* align 4 %43, i64 %18, i1 false) #8\n  br label %44\n\n44:                                               ; preds = %41, %37\n  %45 = getelementptr inbounds i32, i32* %39, i64 1\n  %46 = icmp eq i32* %15, null\n  br i1 %46, label %49, label %47\n\n47:                                               ; preds = %44\n  %48 = bitcast i32* %15 to i8*\n  tail call void @_ZdlPv(i8* nonnull %48) #8\n  br label %49\n\n49:                                               ; preds = %47, %44\n  store i32* %38, i32** %5, align 8, !tbaa !10\n  store i32* %45, i32** %3, align 8, !tbaa !7\n  %50 = getelementptr inbounds i32, i32* %38, i64 %30\n  store i32* %50, i32** %4, align 8, !tbaa !11\n  br label %120\n\n51:                                               ; preds = %2, %109\n  %52 = phi i32* [ %110, %109 ], [ null, %2 ]\n  %53 = phi i32* [ %111, %109 ], [ null, %2 ]\n  %54 = phi i32* [ %112, %109 ], [ null, %2 ]\n  %55 = phi i32 [ %115, %109 ], [ 2, %2 ]\n  %56 = phi i32 [ %113, %109 ], [ %1, %2 ]\n  %57 = srem i32 %56, %55\n  %58 = sdiv i32 %56, %55\n  %59 = icmp eq i32 %57, 0\n  br i1 %59, label %60, label %109\n\n60:                                               ; preds = %51\n  %61 = icmp eq i32* %54, %53\n  br i1 %61, label %64, label %62\n\n62:                                               ; preds = %60\n  store i32 %55, i32* %54, align 4, !tbaa !3\n  %63 = getelementptr inbounds i32, i32* %54, i64 1\n  store i32* %63, i32** %3, align 8, !tbaa !7\n  br label %100\n\n64:                                               ; preds = %60\n  %65 = ptrtoint i32* %53 to i64\n  %66 = ptrtoint i32* %52 to i64\n  %67 = sub i64 %65, %66\n  %68 = ashr exact i64 %67, 2\n  %69 = icmp eq i64 %67, 9223372036854775804\n  br i1 %69, label %70, label %72\n\n70:                                               ; preds = %64\n  invoke void @_ZSt20__throw_length_errorPKc(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str, i64 0, i64 0)) #6\n          to label %71 unwind label %107\n\n71:                                               ; preds = %70\n  unreachable\n\n72:                                               ; preds = %64\n  %73 = icmp eq i64 %67, 0\n  %74 = select i1 %73, i64 1, i64 %68\n  %75 = add nsw i64 %74, %68\n  %76 = icmp ult i64 %75, %68\n  %77 = icmp ugt i64 %75, 2305843009213693951\n  %78 = or i1 %76, %77\n  %79 = select i1 %78, i64 2305843009213693951, i64 %75\n  %80 = icmp eq i64 %79, 0\n  br i1 %80, label %86, label %81\n\n81:                                               ; preds = %72\n  %82 = shl nuw nsw i64 %79, 2\n  %83 = invoke noalias nonnull i8* @_Znwm(i64 %82) #7\n          to label %84 unwind label %105\n\n84:                                               ; preds = %81\n  %85 = bitcast i8* %83 to i32*\n  br label %86\n\n86:                                               ; preds = %84, %72\n  %87 = phi i32* [ %85, %84 ], [ null, %72 ]\n  %88 = getelementptr inbounds i32, i32* %87, i64 %68\n  store i32 %55, i32* %88, align 4, !tbaa !3\n  %89 = icmp sgt i64 %67, 0\n  br i1 %89, label %90, label %93\n\n90:                                               ; preds = %86\n  %91 = bitcast i32* %87 to i8*\n  %92 = bitcast i32* %52 to i8*\n  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %91, i8* align 4 %92, i64 %67, i1 false) #8\n  br label %93\n\n93:                                               ; preds = %90, %86\n  %94 = getelementptr inbounds i32, i32* %88, i64 1\n  %95 = icmp eq i32* %52, null\n  br i1 %95, label %98, label %96\n\n96:                                               ; preds = %93\n  %97 = bitcast i32* %52 to i8*\n  tail call void @_ZdlPv(i8* nonnull %97) #8\n  br label %98\n\n98:                                               ; preds = %96, %93\n  store i32* %87, i32** %5, align 8, !tbaa !10\n  store i32* %94, i32** %3, align 8, !tbaa !7\n  %99 = getelementptr inbounds i32, i32* %87, i64 %79\n  store i32* %99, i32** %4, align 8, !tbaa !11\n  br label %100\n\n100:                                              ; preds = %98, %62\n  %101 = phi i32* [ %87, %98 ], [ %52, %62 ]\n  %102 = phi i32* [ %99, %98 ], [ %53, %62 ]\n  %103 = phi i32* [ %94, %98 ], [ %63, %62 ]\n  %104 = add nsw i32 %55, -1\n  br label %109\n\n105:                                              ; preds = %81\n  %106 = landingpad { i8*, i32 }\n          cleanup\n  br label %121\n\n107:                                              ; preds = %70\n  %108 = landingpad { i8*, i32 }\n          cleanup\n  br label %121\n\n109:                                              ; preds = %51, %100\n  %110 = phi i32* [ %101, %100 ], [ %52, %51 ]\n  %111 = phi i32* [ %102, %100 ], [ %53, %51 ]\n  %112 = phi i32* [ %103, %100 ], [ %54, %51 ]\n  %113 = phi i32 [ %58, %100 ], [ %56, %51 ]\n  %114 = phi i32 [ %104, %100 ], [ %55, %51 ]\n  %115 = add nsw i32 %114, 1\n  %116 = mul nsw i32 %115, %115\n  %117 = icmp sgt i32 %116, %113\n  br i1 %117, label %8, label %51, !llvm.loop !12\n\n118:                                              ; preds = %32, %21\n  %119 = landingpad { i8*, i32 }\n          cleanup\n  br label %121\n\n120:                                              ; preds = %49, %10\n  ret void\n\n121:                                              ; preds = %105, %107, %118\n  %122 = phi i32* [ %15, %118 ], [ %52, %105 ], [ %52, %107 ]\n  %123 = phi { i8*, i32 } [ %119, %118 ], [ %106, %105 ], [ %108, %107 ]\n  %124 = icmp eq i32* %122, null\n  br i1 %124, label %127, label %125\n\n125:                                              ; preds = %121\n  %126 = bitcast i32* %122 to i8*\n  tail call void @_ZdlPv(i8* nonnull %126) #8\n  br label %127\n\n127:                                              ; preds = %121, %125\n  resume { i8*, i32 } %123\n}\n\n; Function Attrs: argmemonly mustprogress nofree nounwind willreturn writeonly\ndeclare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1\n\ndeclare dso_local i32 @__gxx_personality_v0(...)\n\n; Function Attrs: nobuiltin nounwind\ndeclare dso_local void @_ZdlPv(i8*) local_unnamed_addr #2\n\n; Function Attrs: noreturn\ndeclare dso_local void @_ZSt20__throw_length_errorPKc(i8*) local_unnamed_addr #3\n\n; Function Attrs: nobuiltin allocsize(0)\ndeclare dso_local nonnull i8* @_Znwm(i64) local_unnamed_addr #4\n\n; Function Attrs: argmemonly mustprogress nofree nounwind willreturn\ndeclare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #5\n\nattributes #0 = { uwtable \"frame-pointer\"=\"none\" \"min-legal-vector-width\"=\"0\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #1 = { argmemonly mustprogress nofree nounwind willreturn writeonly }\nattributes #2 = { nobuiltin nounwind \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #3 = { noreturn \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #4 = { nobuiltin allocsize(0) \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #5 = { argmemonly mustprogress nofree nounwind willreturn }\nattributes #6 = { noreturn }\nattributes #7 = { allocsize(0) }\nattributes #8 = { nounwind }\n\n!llvm.module.flags = !{!0, !1}\n!llvm.ident = !{!2}\n\n!0 = !{i32 1, !\"wchar_size\", i32 4}\n!1 = !{i32 7, !\"uwtable\", i32 1}\n!2 = !{!\"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)\"}\n!3 = !{!4, !4, i64 0}\n!4 = !{!\"int\", !5, i64 0}\n!5 = !{!\"omnipotent char\", !6, i64 0}\n!6 = !{!\"Simple C++ TBAA\"}\n!7 = !{!8, !9, i64 8}\n!8 = !{!\"_ZTSNSt12_Vector_baseIiSaIiEE17_Vector_impl_dataE\", !9, i64 0, !9, i64 8, !9, i64 16}\n!9 = !{!\"any pointer\", !5, i64 0}\n!10 = !{!8, !9, i64 0}\n!11 = !{!8, !9, i64 16}\n!12 = distinct !{!12, !13}\n!13 = !{!\"llvm.loop.mustprogress\"}\n", "target": "This is the targeted source code:\n/*\nReturn vector of prime factors of given integer in the order from smallest to largest.\nEach of the factors should be vectored number of times corresponding to how many times it appeares in factorization.\nInput number should be equal to the product of all factors\n>>> factorize(8)\n{2, 2, 2}\n>>> factorize(25)\n{5, 5}\n>>> factorize(70)\n{2, 5, 7}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> factorize(int n){\n\n    vector<int> out={};\n    for (int i=2;i*i<=n;i++)\n        if (n%i==0)\n        {\n            n=n/i;\n            out.push_back(i);\n            i-=1;\n        }\n    out.push_back(n);\n    return out;\n}\n"}
{"input": "Convert this to C++:\n; ModuleID = '../../Human_xBenchmarks_164/CPP_26/CPP_26.cpp'\nsource_filename = \"../../Human_xBenchmarks_164/CPP_26/CPP_26.cpp\"\ntarget datalayout = \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\ntarget triple = \"x86_64-unknown-linux-gnu\"\n\n%\"class.std::vector\" = type { %\"struct.std::_Vector_base\" }\n%\"struct.std::_Vector_base\" = type { %\"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl\" }\n%\"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl\" = type { %\"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl_data\" }\n%\"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl_data\" = type { i32*, i32*, i32* }\n\n@.str = private unnamed_addr constant [26 x i8] c\"vector::_M_realloc_insert\\00\", align 1\n\n; Function Attrs: uwtable\ndefine dso_local void @_Z17remove_duplicatesSt6vectorIiSaIiEE(%\"class.std::vector\"* noalias nocapture sret(%\"class.std::vector\") align 8 %0, %\"class.std::vector\"* nocapture readonly %1) local_unnamed_addr #0 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {\n  %3 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %1, i64 0, i32 0, i32 0, i32 0, i32 1\n  %4 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %1, i64 0, i32 0, i32 0, i32 0, i32 0\n  %5 = bitcast %\"class.std::vector\"* %0 to i8*\n  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(24) %5, i8 0, i64 24, i1 false)\n  %6 = load i32*, i32** %3, align 8, !tbaa !3\n  %7 = load i32*, i32** %4, align 8, !tbaa !8\n  %8 = icmp eq i32* %6, %7\n  br i1 %8, label %9, label %24\n\n9:                                                ; preds = %250, %2\n  %10 = phi i32* [ %6, %2 ], [ %259, %250 ]\n  %11 = phi i32* [ %6, %2 ], [ %258, %250 ]\n  %12 = phi i32* [ null, %2 ], [ %252, %250 ]\n  %13 = phi i32* [ null, %2 ], [ %253, %250 ]\n  %14 = phi i32* [ null, %2 ], [ %256, %250 ]\n  %15 = ptrtoint i32* %12 to i64\n  %16 = ptrtoint i32* %13 to i64\n  %17 = sub i64 %15, %16\n  %18 = icmp sgt i64 %17, 15\n  %19 = lshr i64 %17, 4\n  %20 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0, i64 0, i32 0, i32 0, i32 0, i32 1\n  %21 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0, i64 0, i32 0, i32 0, i32 0, i32 2\n  %22 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0, i64 0, i32 0, i32 0, i32 0, i32 0\n  %23 = icmp eq i32* %11, %10\n  br i1 %23, label %265, label %274\n\n24:                                               ; preds = %2, %250\n  %25 = phi i64 [ %257, %250 ], [ 0, %2 ]\n  %26 = phi i32* [ %259, %250 ], [ %7, %2 ]\n  %27 = phi i32* [ %256, %250 ], [ null, %2 ]\n  %28 = phi i32* [ %255, %250 ], [ null, %2 ]\n  %29 = phi i32* [ %254, %250 ], [ null, %2 ]\n  %30 = phi i32* [ %253, %250 ], [ null, %2 ]\n  %31 = phi i32* [ %252, %250 ], [ null, %2 ]\n  %32 = phi i32* [ %251, %250 ], [ null, %2 ]\n  %33 = getelementptr inbounds i32, i32* %26, i64 %25\n  %34 = ptrtoint i32* %31 to i64\n  %35 = ptrtoint i32* %30 to i64\n  %36 = sub i64 %34, %35\n  %37 = icmp sgt i64 %36, 15\n  br i1 %37, label %38, label %65\n\n38:                                               ; preds = %24\n  %39 = lshr i64 %36, 4\n  %40 = load i32, i32* %33, align 4, !tbaa !9\n  br label %41\n\n41:                                               ; preds = %58, %38\n  %42 = phi i64 [ %39, %38 ], [ %60, %58 ]\n  %43 = phi i32* [ %30, %38 ], [ %59, %58 ]\n  %44 = load i32, i32* %43, align 4, !tbaa !9\n  %45 = icmp eq i32 %44, %40\n  br i1 %45, label %97, label %46\n\n46:                                               ; preds = %41\n  %47 = getelementptr inbounds i32, i32* %43, i64 1\n  %48 = load i32, i32* %47, align 4, !tbaa !9\n  %49 = icmp eq i32 %48, %40\n  br i1 %49, label %95, label %50\n\n50:                                               ; preds = %46\n  %51 = getelementptr inbounds i32, i32* %43, i64 2\n  %52 = load i32, i32* %51, align 4, !tbaa !9\n  %53 = icmp eq i32 %52, %40\n  br i1 %53, label %93, label %54\n\n54:                                               ; preds = %50\n  %55 = getelementptr inbounds i32, i32* %43, i64 3\n  %56 = load i32, i32* %55, align 4, !tbaa !9\n  %57 = icmp eq i32 %56, %40\n  br i1 %57, label %91, label %58\n\n58:                                               ; preds = %54\n  %59 = getelementptr inbounds i32, i32* %43, i64 4\n  %60 = add nsw i64 %42, -1\n  %61 = icmp sgt i64 %42, 1\n  br i1 %61, label %41, label %62, !llvm.loop !11\n\n62:                                               ; preds = %58\n  %63 = ptrtoint i32* %59 to i64\n  %64 = sub i64 %34, %63\n  br label %65\n\n65:                                               ; preds = %62, %24\n  %66 = phi i64 [ %64, %62 ], [ %36, %24 ]\n  %67 = phi i32* [ %59, %62 ], [ %30, %24 ]\n  %68 = ashr exact i64 %66, 2\n  switch i64 %68, label %100 [\n    i64 3, label %73\n    i64 2, label %71\n    i64 1, label %69\n  ]\n\n69:                                               ; preds = %65\n  %70 = load i32, i32* %33, align 4, !tbaa !9\n  br label %86\n\n71:                                               ; preds = %65\n  %72 = load i32, i32* %33, align 4, !tbaa !9\n  br label %79\n\n73:                                               ; preds = %65\n  %74 = load i32, i32* %67, align 4, !tbaa !9\n  %75 = load i32, i32* %33, align 4, !tbaa !9\n  %76 = icmp eq i32 %74, %75\n  br i1 %76, label %97, label %77\n\n77:                                               ; preds = %73\n  %78 = getelementptr inbounds i32, i32* %67, i64 1\n  br label %79\n\n79:                                               ; preds = %77, %71\n  %80 = phi i32 [ %72, %71 ], [ %75, %77 ]\n  %81 = phi i32* [ %67, %71 ], [ %78, %77 ]\n  %82 = load i32, i32* %81, align 4, !tbaa !9\n  %83 = icmp eq i32 %82, %80\n  br i1 %83, label %97, label %84\n\n84:                                               ; preds = %79\n  %85 = getelementptr inbounds i32, i32* %81, i64 1\n  br label %86\n\n86:                                               ; preds = %84, %69\n  %87 = phi i32 [ %70, %69 ], [ %80, %84 ]\n  %88 = phi i32* [ %67, %69 ], [ %85, %84 ]\n  %89 = load i32, i32* %88, align 4, !tbaa !9\n  %90 = icmp eq i32 %89, %87\n  br i1 %90, label %97, label %100\n\n91:                                               ; preds = %54\n  %92 = getelementptr inbounds i32, i32* %43, i64 3\n  br label %97\n\n93:                                               ; preds = %50\n  %94 = getelementptr inbounds i32, i32* %43, i64 2\n  br label %97\n\n95:                                               ; preds = %46\n  %96 = getelementptr inbounds i32, i32* %43, i64 1\n  br label %97\n\n97:                                               ; preds = %41, %91, %93, %95, %86, %79, %73\n  %98 = phi i32* [ %67, %73 ], [ %81, %79 ], [ %88, %86 ], [ %92, %91 ], [ %94, %93 ], [ %96, %95 ], [ %43, %41 ]\n  %99 = icmp eq i32* %98, %31\n  br i1 %99, label %100, label %250\n\n100:                                              ; preds = %86, %65, %97\n  %101 = ptrtoint i32* %28 to i64\n  %102 = ptrtoint i32* %27 to i64\n  %103 = sub i64 %101, %102\n  %104 = icmp sgt i64 %103, 15\n  br i1 %104, label %105, label %132\n\n105:                                              ; preds = %100\n  %106 = lshr i64 %103, 4\n  %107 = load i32, i32* %33, align 4, !tbaa !9\n  br label %108\n\n108:                                              ; preds = %125, %105\n  %109 = phi i64 [ %106, %105 ], [ %127, %125 ]\n  %110 = phi i32* [ %27, %105 ], [ %126, %125 ]\n  %111 = load i32, i32* %110, align 4, !tbaa !9\n  %112 = icmp eq i32 %111, %107\n  br i1 %112, label %164, label %113\n\n113:                                              ; preds = %108\n  %114 = getelementptr inbounds i32, i32* %110, i64 1\n  %115 = load i32, i32* %114, align 4, !tbaa !9\n  %116 = icmp eq i32 %115, %107\n  br i1 %116, label %162, label %117\n\n117:                                              ; preds = %113\n  %118 = getelementptr inbounds i32, i32* %110, i64 2\n  %119 = load i32, i32* %118, align 4, !tbaa !9\n  %120 = icmp eq i32 %119, %107\n  br i1 %120, label %160, label %121\n\n121:                                              ; preds = %117\n  %122 = getelementptr inbounds i32, i32* %110, i64 3\n  %123 = load i32, i32* %122, align 4, !tbaa !9\n  %124 = icmp eq i32 %123, %107\n  br i1 %124, label %158, label %125\n\n125:                                              ; preds = %121\n  %126 = getelementptr inbounds i32, i32* %110, i64 4\n  %127 = add nsw i64 %109, -1\n  %128 = icmp sgt i64 %109, 1\n  br i1 %128, label %108, label %129, !llvm.loop !11\n\n129:                                              ; preds = %125\n  %130 = ptrtoint i32* %126 to i64\n  %131 = sub i64 %101, %130\n  br label %132\n\n132:                                              ; preds = %129, %100\n  %133 = phi i64 [ %131, %129 ], [ %103, %100 ]\n  %134 = phi i32* [ %126, %129 ], [ %27, %100 ]\n  %135 = ashr exact i64 %133, 2\n  switch i64 %135, label %211 [\n    i64 3, label %140\n    i64 2, label %138\n    i64 1, label %136\n  ]\n\n136:                                              ; preds = %132\n  %137 = load i32, i32* %33, align 4, !tbaa !9\n  br label %153\n\n138:                                              ; preds = %132\n  %139 = load i32, i32* %33, align 4, !tbaa !9\n  br label %146\n\n140:                                              ; preds = %132\n  %141 = load i32, i32* %134, align 4, !tbaa !9\n  %142 = load i32, i32* %33, align 4, !tbaa !9\n  %143 = icmp eq i32 %141, %142\n  br i1 %143, label %164, label %144\n\n144:                                              ; preds = %140\n  %145 = getelementptr inbounds i32, i32* %134, i64 1\n  br label %146\n\n146:                                              ; preds = %144, %138\n  %147 = phi i32 [ %139, %138 ], [ %142, %144 ]\n  %148 = phi i32* [ %134, %138 ], [ %145, %144 ]\n  %149 = load i32, i32* %148, align 4, !tbaa !9\n  %150 = icmp eq i32 %149, %147\n  br i1 %150, label %164, label %151\n\n151:                                              ; preds = %146\n  %152 = getelementptr inbounds i32, i32* %148, i64 1\n  br label %153\n\n153:                                              ; preds = %151, %136\n  %154 = phi i32 [ %137, %136 ], [ %147, %151 ]\n  %155 = phi i32* [ %134, %136 ], [ %152, %151 ]\n  %156 = load i32, i32* %155, align 4, !tbaa !9\n  %157 = icmp eq i32 %156, %154\n  br i1 %157, label %164, label %211\n\n158:                                              ; preds = %121\n  %159 = getelementptr inbounds i32, i32* %110, i64 3\n  br label %164\n\n160:                                              ; preds = %117\n  %161 = getelementptr inbounds i32, i32* %110, i64 2\n  br label %164\n\n162:                                              ; preds = %113\n  %163 = getelementptr inbounds i32, i32* %110, i64 1\n  br label %164\n\n164:                                              ; preds = %108, %158, %160, %162, %153, %146, %140\n  %165 = phi i32 [ %141, %140 ], [ %147, %146 ], [ %154, %153 ], [ %107, %162 ], [ %107, %160 ], [ %107, %158 ], [ %107, %108 ]\n  %166 = phi i32* [ %134, %140 ], [ %148, %146 ], [ %155, %153 ], [ %163, %162 ], [ %161, %160 ], [ %159, %158 ], [ %110, %108 ]\n  %167 = icmp eq i32* %166, %28\n  br i1 %167, label %211, label %168\n\n168:                                              ; preds = %164\n  %169 = icmp eq i32* %31, %32\n  br i1 %169, label %172, label %170\n\n170:                                              ; preds = %168\n  store i32 %165, i32* %31, align 4, !tbaa !9\n  %171 = getelementptr inbounds i32, i32* %31, i64 1\n  br label %250\n\n172:                                              ; preds = %168\n  %173 = ashr exact i64 %36, 2\n  %174 = icmp eq i64 %36, 9223372036854775804\n  br i1 %174, label %175, label %177\n\n175:                                              ; preds = %172\n  invoke void @_ZSt20__throw_length_errorPKc(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str, i64 0, i64 0)) #6\n          to label %176 unwind label %209\n\n176:                                              ; preds = %175\n  unreachable\n\n177:                                              ; preds = %172\n  %178 = icmp eq i64 %36, 0\n  %179 = select i1 %178, i64 1, i64 %173\n  %180 = add nsw i64 %179, %173\n  %181 = icmp ult i64 %180, %173\n  %182 = icmp ugt i64 %180, 2305843009213693951\n  %183 = or i1 %181, %182\n  %184 = select i1 %183, i64 2305843009213693951, i64 %180\n  %185 = icmp eq i64 %184, 0\n  br i1 %185, label %192, label %186\n\n186:                                              ; preds = %177\n  %187 = shl nuw nsw i64 %184, 2\n  %188 = invoke noalias nonnull i8* @_Znwm(i64 %187) #7\n          to label %189 unwind label %207\n\n189:                                              ; preds = %186\n  %190 = bitcast i8* %188 to i32*\n  %191 = load i32, i32* %33, align 4, !tbaa !9\n  br label %192\n\n192:                                              ; preds = %189, %177\n  %193 = phi i32 [ %191, %189 ], [ %165, %177 ]\n  %194 = phi i32* [ %190, %189 ], [ null, %177 ]\n  %195 = getelementptr inbounds i32, i32* %194, i64 %173\n  store i32 %193, i32* %195, align 4, !tbaa !9\n  %196 = icmp sgt i64 %36, 0\n  br i1 %196, label %197, label %200\n\n197:                                              ; preds = %192\n  %198 = bitcast i32* %194 to i8*\n  %199 = bitcast i32* %30 to i8*\n  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %198, i8* align 4 %199, i64 %36, i1 false) #8\n  br label %200\n\n200:                                              ; preds = %197, %192\n  %201 = getelementptr inbounds i32, i32* %195, i64 1\n  %202 = icmp eq i32* %30, null\n  br i1 %202, label %205, label %203\n\n203:                                              ; preds = %200\n  %204 = bitcast i32* %30 to i8*\n  tail call void @_ZdlPv(i8* nonnull %204) #8\n  br label %205\n\n205:                                              ; preds = %203, %200\n  %206 = getelementptr inbounds i32, i32* %194, i64 %184\n  br label %250\n\n207:                                              ; preds = %186, %230\n  %208 = landingpad { i8*, i32 }\n          cleanup\n  br label %403\n\n209:                                              ; preds = %175, %219\n  %210 = landingpad { i8*, i32 }\n          cleanup\n  br label %403\n\n211:                                              ; preds = %153, %132, %164\n  %212 = icmp eq i32* %28, %29\n  br i1 %212, label %216, label %213\n\n213:                                              ; preds = %211\n  %214 = load i32, i32* %33, align 4, !tbaa !9\n  store i32 %214, i32* %28, align 4, !tbaa !9\n  %215 = getelementptr inbounds i32, i32* %28, i64 1\n  br label %250\n\n216:                                              ; preds = %211\n  %217 = ashr exact i64 %103, 2\n  %218 = icmp eq i64 %103, 9223372036854775804\n  br i1 %218, label %219, label %221\n\n219:                                              ; preds = %216\n  invoke void @_ZSt20__throw_length_errorPKc(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str, i64 0, i64 0)) #6\n          to label %220 unwind label %209\n\n220:                                              ; preds = %219\n  unreachable\n\n221:                                              ; preds = %216\n  %222 = icmp eq i64 %103, 0\n  %223 = select i1 %222, i64 1, i64 %217\n  %224 = add nsw i64 %223, %217\n  %225 = icmp ult i64 %224, %217\n  %226 = icmp ugt i64 %224, 2305843009213693951\n  %227 = or i1 %225, %226\n  %228 = select i1 %227, i64 2305843009213693951, i64 %224\n  %229 = icmp eq i64 %228, 0\n  br i1 %229, label %235, label %230\n\n230:                                              ; preds = %221\n  %231 = shl nuw nsw i64 %228, 2\n  %232 = invoke noalias nonnull i8* @_Znwm(i64 %231) #7\n          to label %233 unwind label %207\n\n233:                                              ; preds = %230\n  %234 = bitcast i8* %232 to i32*\n  br label %235\n\n235:                                              ; preds = %233, %221\n  %236 = phi i32* [ %234, %233 ], [ null, %221 ]\n  %237 = getelementptr inbounds i32, i32* %236, i64 %217\n  %238 = load i32, i32* %33, align 4, !tbaa !9\n  store i32 %238, i32* %237, align 4, !tbaa !9\n  %239 = icmp sgt i64 %103, 0\n  br i1 %239, label %240, label %243\n\n240:                                              ; preds = %235\n  %241 = bitcast i32* %236 to i8*\n  %242 = bitcast i32* %27 to i8*\n  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %241, i8* align 4 %242, i64 %103, i1 false) #8\n  br label %243\n\n243:                                              ; preds = %240, %235\n  %244 = getelementptr inbounds i32, i32* %237, i64 1\n  %245 = icmp eq i32* %27, null\n  br i1 %245, label %248, label %246\n\n246:                                              ; preds = %243\n  %247 = bitcast i32* %27 to i8*\n  tail call void @_ZdlPv(i8* nonnull %247) #8\n  br label %248\n\n248:                                              ; preds = %246, %243\n  %249 = getelementptr inbounds i32, i32* %236, i64 %228\n  br label %250\n\n250:                                              ; preds = %248, %213, %205, %170, %97\n  %251 = phi i32* [ %32, %97 ], [ %206, %205 ], [ %32, %170 ], [ %32, %213 ], [ %32, %248 ]\n  %252 = phi i32* [ %31, %97 ], [ %201, %205 ], [ %171, %170 ], [ %31, %213 ], [ %31, %248 ]\n  %253 = phi i32* [ %30, %97 ], [ %194, %205 ], [ %30, %170 ], [ %30, %213 ], [ %30, %248 ]\n  %254 = phi i32* [ %29, %97 ], [ %29, %205 ], [ %29, %170 ], [ %29, %213 ], [ %249, %248 ]\n  %255 = phi i32* [ %28, %97 ], [ %28, %205 ], [ %28, %170 ], [ %215, %213 ], [ %244, %248 ]\n  %256 = phi i32* [ %27, %97 ], [ %27, %205 ], [ %27, %170 ], [ %27, %213 ], [ %236, %248 ]\n  %257 = add nuw i64 %25, 1\n  %258 = load i32*, i32** %3, align 8, !tbaa !3\n  %259 = load i32*, i32** %4, align 8, !tbaa !8\n  %260 = ptrtoint i32* %258 to i64\n  %261 = ptrtoint i32* %259 to i64\n  %262 = sub i64 %260, %261\n  %263 = ashr exact i64 %262, 2\n  %264 = icmp ugt i64 %263, %257\n  br i1 %264, label %24, label %9, !llvm.loop !13\n\n265:                                              ; preds = %391, %9\n  %266 = icmp eq i32* %13, null\n  br i1 %266, label %269, label %267\n\n267:                                              ; preds = %265\n  %268 = bitcast i32* %13 to i8*\n  tail call void @_ZdlPv(i8* nonnull %268) #8\n  br label %269\n\n269:                                              ; preds = %265, %267\n  %270 = icmp eq i32* %14, null\n  br i1 %270, label %273, label %271\n\n271:                                              ; preds = %269\n  %272 = bitcast i32* %14 to i8*\n  tail call void @_ZdlPv(i8* nonnull %272) #8\n  br label %273\n\n273:                                              ; preds = %269, %271\n  ret void\n\n274:                                              ; preds = %9, %391\n  %275 = phi i32* [ %392, %391 ], [ %10, %9 ]\n  %276 = phi i32* [ %393, %391 ], [ %11, %9 ]\n  %277 = phi i32* [ %394, %391 ], [ null, %9 ]\n  %278 = phi i32* [ %395, %391 ], [ null, %9 ]\n  %279 = phi i32* [ %396, %391 ], [ null, %9 ]\n  %280 = phi i64 [ %397, %391 ], [ 0, %9 ]\n  %281 = getelementptr inbounds i32, i32* %275, i64 %280\n  br i1 %18, label %282, label %308\n\n282:                                              ; preds = %274\n  %283 = load i32, i32* %281, align 4, !tbaa !9\n  br label %284\n\n284:                                              ; preds = %301, %282\n  %285 = phi i64 [ %19, %282 ], [ %303, %301 ]\n  %286 = phi i32* [ %13, %282 ], [ %302, %301 ]\n  %287 = load i32, i32* %286, align 4, !tbaa !9\n  %288 = icmp eq i32 %287, %283\n  br i1 %288, label %340, label %289\n\n289:                                              ; preds = %284\n  %290 = getelementptr inbounds i32, i32* %286, i64 1\n  %291 = load i32, i32* %290, align 4, !tbaa !9\n  %292 = icmp eq i32 %291, %283\n  br i1 %292, label %338, label %293\n\n293:                                              ; preds = %289\n  %294 = getelementptr inbounds i32, i32* %286, i64 2\n  %295 = load i32, i32* %294, align 4, !tbaa !9\n  %296 = icmp eq i32 %295, %283\n  br i1 %296, label %336, label %297\n\n297:                                              ; preds = %293\n  %298 = getelementptr inbounds i32, i32* %286, i64 3\n  %299 = load i32, i32* %298, align 4, !tbaa !9\n  %300 = icmp eq i32 %299, %283\n  br i1 %300, label %334, label %301\n\n301:                                              ; preds = %297\n  %302 = getelementptr inbounds i32, i32* %286, i64 4\n  %303 = add nsw i64 %285, -1\n  %304 = icmp sgt i64 %285, 1\n  br i1 %304, label %284, label %305, !llvm.loop !11\n\n305:                                              ; preds = %301\n  %306 = ptrtoint i32* %302 to i64\n  %307 = sub i64 %15, %306\n  br label %308\n\n308:                                              ; preds = %305, %274\n  %309 = phi i64 [ %307, %305 ], [ %17, %274 ]\n  %310 = phi i32* [ %302, %305 ], [ %13, %274 ]\n  %311 = ashr exact i64 %309, 2\n  switch i64 %311, label %343 [\n    i64 3, label %316\n    i64 2, label %314\n    i64 1, label %312\n  ]\n\n312:                                              ; preds = %308\n  %313 = load i32, i32* %281, align 4, !tbaa !9\n  br label %329\n\n314:                                              ; preds = %308\n  %315 = load i32, i32* %281, align 4, !tbaa !9\n  br label %322\n\n316:                                              ; preds = %308\n  %317 = load i32, i32* %310, align 4, !tbaa !9\n  %318 = load i32, i32* %281, align 4, !tbaa !9\n  %319 = icmp eq i32 %317, %318\n  br i1 %319, label %340, label %320\n\n320:                                              ; preds = %316\n  %321 = getelementptr inbounds i32, i32* %310, i64 1\n  br label %322\n\n322:                                              ; preds = %320, %314\n  %323 = phi i32 [ %315, %314 ], [ %318, %320 ]\n  %324 = phi i32* [ %310, %314 ], [ %321, %320 ]\n  %325 = load i32, i32* %324, align 4, !tbaa !9\n  %326 = icmp eq i32 %325, %323\n  br i1 %326, label %340, label %327\n\n327:                                              ; preds = %322\n  %328 = getelementptr inbounds i32, i32* %324, i64 1\n  br label %329\n\n329:                                              ; preds = %327, %312\n  %330 = phi i32 [ %313, %312 ], [ %323, %327 ]\n  %331 = phi i32* [ %310, %312 ], [ %328, %327 ]\n  %332 = load i32, i32* %331, align 4, !tbaa !9\n  %333 = icmp eq i32 %332, %330\n  br i1 %333, label %340, label %343\n\n334:                                              ; preds = %297\n  %335 = getelementptr inbounds i32, i32* %286, i64 3\n  br label %340\n\n336:                                              ; preds = %293\n  %337 = getelementptr inbounds i32, i32* %286, i64 2\n  br label %340\n\n338:                                              ; preds = %289\n  %339 = getelementptr inbounds i32, i32* %286, i64 1\n  br label %340\n\n340:                                              ; preds = %284, %334, %336, %338, %329, %322, %316\n  %341 = phi i32* [ %310, %316 ], [ %324, %322 ], [ %331, %329 ], [ %335, %334 ], [ %337, %336 ], [ %339, %338 ], [ %286, %284 ]\n  %342 = icmp eq i32* %341, %12\n  br i1 %342, label %343, label %391\n\n343:                                              ; preds = %329, %308, %340\n  %344 = icmp eq i32* %279, %278\n  br i1 %344, label %348, label %345\n\n345:                                              ; preds = %343\n  %346 = load i32, i32* %281, align 4, !tbaa !9\n  store i32 %346, i32* %279, align 4, !tbaa !9\n  %347 = getelementptr inbounds i32, i32* %279, i64 1\n  store i32* %347, i32** %20, align 8, !tbaa !3\n  br label %391\n\n348:                                              ; preds = %343\n  %349 = ptrtoint i32* %278 to i64\n  %350 = ptrtoint i32* %277 to i64\n  %351 = sub i64 %349, %350\n  %352 = ashr exact i64 %351, 2\n  %353 = icmp eq i64 %351, 9223372036854775804\n  br i1 %353, label %354, label %356\n\n354:                                              ; preds = %348\n  invoke void @_ZSt20__throw_length_errorPKc(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str, i64 0, i64 0)) #6\n          to label %355 unwind label %389\n\n355:                                              ; preds = %354\n  unreachable\n\n356:                                              ; preds = %348\n  %357 = icmp eq i64 %351, 0\n  %358 = select i1 %357, i64 1, i64 %352\n  %359 = add nsw i64 %358, %352\n  %360 = icmp ult i64 %359, %352\n  %361 = icmp ugt i64 %359, 2305843009213693951\n  %362 = or i1 %360, %361\n  %363 = select i1 %362, i64 2305843009213693951, i64 %359\n  %364 = icmp eq i64 %363, 0\n  br i1 %364, label %370, label %365\n\n365:                                              ; preds = %356\n  %366 = shl nuw nsw i64 %363, 2\n  %367 = invoke noalias nonnull i8* @_Znwm(i64 %366) #7\n          to label %368 unwind label %387\n\n368:                                              ; preds = %365\n  %369 = bitcast i8* %367 to i32*\n  br label %370\n\n370:                                              ; preds = %368, %356\n  %371 = phi i32* [ %369, %368 ], [ null, %356 ]\n  %372 = getelementptr inbounds i32, i32* %371, i64 %352\n  %373 = load i32, i32* %281, align 4, !tbaa !9\n  store i32 %373, i32* %372, align 4, !tbaa !9\n  %374 = icmp sgt i64 %351, 0\n  br i1 %374, label %375, label %378\n\n375:                                              ; preds = %370\n  %376 = bitcast i32* %371 to i8*\n  %377 = bitcast i32* %277 to i8*\n  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %376, i8* align 4 %377, i64 %351, i1 false) #8\n  br label %378\n\n378:                                              ; preds = %375, %370\n  %379 = getelementptr inbounds i32, i32* %372, i64 1\n  %380 = icmp eq i32* %277, null\n  br i1 %380, label %383, label %381\n\n381:                                              ; preds = %378\n  %382 = bitcast i32* %277 to i8*\n  tail call void @_ZdlPv(i8* nonnull %382) #8\n  br label %383\n\n383:                                              ; preds = %381, %378\n  store i32* %371, i32** %22, align 8, !tbaa !8\n  store i32* %379, i32** %20, align 8, !tbaa !3\n  %384 = getelementptr inbounds i32, i32* %371, i64 %363\n  store i32* %384, i32** %21, align 8, !tbaa !14\n  %385 = load i32*, i32** %3, align 8, !tbaa !3\n  %386 = load i32*, i32** %4, align 8, !tbaa !8\n  br label %391\n\n387:                                              ; preds = %365\n  %388 = landingpad { i8*, i32 }\n          cleanup\n  br label %403\n\n389:                                              ; preds = %354\n  %390 = landingpad { i8*, i32 }\n          cleanup\n  br label %403\n\n391:                                              ; preds = %383, %345, %340\n  %392 = phi i32* [ %386, %383 ], [ %275, %345 ], [ %275, %340 ]\n  %393 = phi i32* [ %385, %383 ], [ %276, %345 ], [ %276, %340 ]\n  %394 = phi i32* [ %371, %383 ], [ %277, %345 ], [ %277, %340 ]\n  %395 = phi i32* [ %384, %383 ], [ %278, %345 ], [ %278, %340 ]\n  %396 = phi i32* [ %379, %383 ], [ %347, %345 ], [ %279, %340 ]\n  %397 = add nuw i64 %280, 1\n  %398 = ptrtoint i32* %393 to i64\n  %399 = ptrtoint i32* %392 to i64\n  %400 = sub i64 %398, %399\n  %401 = ashr exact i64 %400, 2\n  %402 = icmp ugt i64 %401, %397\n  br i1 %402, label %274, label %265, !llvm.loop !15\n\n403:                                              ; preds = %387, %389, %207, %209\n  %404 = phi i32* [ null, %207 ], [ null, %209 ], [ %277, %387 ], [ %277, %389 ]\n  %405 = phi i32* [ %30, %207 ], [ %30, %209 ], [ %13, %387 ], [ %13, %389 ]\n  %406 = phi i32* [ %27, %207 ], [ %27, %209 ], [ %14, %387 ], [ %14, %389 ]\n  %407 = phi { i8*, i32 } [ %208, %207 ], [ %210, %209 ], [ %388, %387 ], [ %390, %389 ]\n  %408 = icmp eq i32* %405, null\n  br i1 %408, label %411, label %409\n\n409:                                              ; preds = %403\n  %410 = bitcast i32* %405 to i8*\n  tail call void @_ZdlPv(i8* nonnull %410) #8\n  br label %411\n\n411:                                              ; preds = %403, %409\n  %412 = icmp eq i32* %406, null\n  br i1 %412, label %415, label %413\n\n413:                                              ; preds = %411\n  %414 = bitcast i32* %406 to i8*\n  tail call void @_ZdlPv(i8* nonnull %414) #8\n  br label %415\n\n415:                                              ; preds = %411, %413\n  %416 = icmp eq i32* %404, null\n  br i1 %416, label %419, label %417\n\n417:                                              ; preds = %415\n  %418 = bitcast i32* %404 to i8*\n  tail call void @_ZdlPv(i8* nonnull %418) #8\n  br label %419\n\n419:                                              ; preds = %415, %417\n  resume { i8*, i32 } %407\n}\n\n; Function Attrs: argmemonly mustprogress nofree nounwind willreturn writeonly\ndeclare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1\n\ndeclare dso_local i32 @__gxx_personality_v0(...)\n\n; Function Attrs: nobuiltin nounwind\ndeclare dso_local void @_ZdlPv(i8*) local_unnamed_addr #2\n\n; Function Attrs: noreturn\ndeclare dso_local void @_ZSt20__throw_length_errorPKc(i8*) local_unnamed_addr #3\n\n; Function Attrs: nobuiltin allocsize(0)\ndeclare dso_local nonnull i8* @_Znwm(i64) local_unnamed_addr #4\n\n; Function Attrs: argmemonly mustprogress nofree nounwind willreturn\ndeclare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #5\n\nattributes #0 = { uwtable \"frame-pointer\"=\"none\" \"min-legal-vector-width\"=\"0\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #1 = { argmemonly mustprogress nofree nounwind willreturn writeonly }\nattributes #2 = { nobuiltin nounwind \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #3 = { noreturn \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #4 = { nobuiltin allocsize(0) \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #5 = { argmemonly mustprogress nofree nounwind willreturn }\nattributes #6 = { noreturn }\nattributes #7 = { allocsize(0) }\nattributes #8 = { nounwind }\n\n!llvm.module.flags = !{!0, !1}\n!llvm.ident = !{!2}\n\n!0 = !{i32 1, !\"wchar_size\", i32 4}\n!1 = !{i32 7, !\"uwtable\", i32 1}\n!2 = !{!\"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)\"}\n!3 = !{!4, !5, i64 8}\n!4 = !{!\"_ZTSNSt12_Vector_baseIiSaIiEE17_Vector_impl_dataE\", !5, i64 0, !5, i64 8, !5, i64 16}\n!5 = !{!\"any pointer\", !6, i64 0}\n!6 = !{!\"omnipotent char\", !7, i64 0}\n!7 = !{!\"Simple C++ TBAA\"}\n!8 = !{!4, !5, i64 0}\n!9 = !{!10, !10, i64 0}\n!10 = !{!\"int\", !6, i64 0}\n!11 = distinct !{!11, !12}\n!12 = !{!\"llvm.loop.mustprogress\"}\n!13 = distinct !{!13, !12}\n!14 = !{!4, !5, i64 16}\n!15 = distinct !{!15, !12}\n", "target": "This is the targeted source code:\n/*\nFrom a vector of integers, remove all elements that occur more than once.\nKeep order of elements left the same as in the input.\n>>> remove_duplicates({1, 2, 3, 2, 4})\n{1, 3, 4}\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> remove_duplicates(vector<int> numbers){\n\n    vector<int> out={};\n    vector<int> has1={};\n    vector<int> has2={};\n    for (int i=0;i<numbers.size();i++)\n    {\n        if (find(has2.begin(),has2.end(),numbers[i])!=has2.end()) continue;\n        if (find(has1.begin(),has1.end(),numbers[i])!=has1.end())\n        {\n\n            has2.push_back(numbers[i]);\n        }\n        else has1.push_back(numbers[i]);\n    }\n    for (int i=0;i<numbers.size();i++)\n    if (find(has2.begin(),has2.end(),numbers[i])==has2.end())\n        out.push_back(numbers[i]);\n    return out;\n\n\n}\n"}
{"input": "Convert this to C++:\n; ModuleID = '../../Human_xBenchmarks_164/CPP_27/CPP_27.cpp'\nsource_filename = \"../../Human_xBenchmarks_164/CPP_27/CPP_27.cpp\"\ntarget datalayout = \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\ntarget triple = \"x86_64-unknown-linux-gnu\"\n\n%\"class.std::__cxx11::basic_string\" = type { %\"struct.std::__cxx11::basic_string<char>::_Alloc_hider\", i64, %union.anon }\n%\"struct.std::__cxx11::basic_string<char>::_Alloc_hider\" = type { i8* }\n%union.anon = type { i64, [8 x i8] }\n\n; Function Attrs: uwtable\ndefine dso_local void @_Z9filp_caseNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE(%\"class.std::__cxx11::basic_string\"* noalias sret(%\"class.std::__cxx11::basic_string\") align 8 %0, %\"class.std::__cxx11::basic_string\"* nocapture readonly %1) local_unnamed_addr #0 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {\n  %3 = alloca i64, align 8\n  %4 = alloca %\"class.std::__cxx11::basic_string\", align 8\n  %5 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 2\n  %6 = bitcast %\"class.std::__cxx11::basic_string\"* %0 to %union.anon**\n  store %union.anon* %5, %union.anon** %6, align 8, !tbaa !3\n  %7 = bitcast %union.anon* %5 to i8*\n  %8 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 0, i32 0\n  %9 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 1\n  store i64 0, i64* %9, align 8, !tbaa !8\n  store i8 0, i8* %7, align 8, !tbaa !11\n  %10 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %1, i64 0, i32 1\n  %11 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %1, i64 0, i32 0, i32 0\n  %12 = bitcast %\"class.std::__cxx11::basic_string\"* %4 to i8*\n  %13 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %4, i64 0, i32 2\n  %14 = bitcast %\"class.std::__cxx11::basic_string\"* %4 to %union.anon**\n  %15 = bitcast i64* %3 to i8*\n  %16 = bitcast %union.anon* %13 to i8*\n  %17 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %4, i64 0, i32 0, i32 0\n  %18 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %4, i64 0, i32 2, i32 0\n  %19 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %4, i64 0, i32 1\n  %20 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 2, i32 0\n  %21 = load i64, i64* %10, align 8, !tbaa !8\n  %22 = icmp eq i64 %21, 0\n  br i1 %22, label %107, label %23\n\n23:                                               ; preds = %2\n  %24 = bitcast i64* %19 to <2 x i64>*\n  %25 = bitcast i64* %9 to <2 x i64>*\n  br label %26\n\n26:                                               ; preds = %23, %96\n  %27 = phi i64 [ %97, %96 ], [ 0, %23 ]\n  %28 = load i8*, i8** %11, align 8, !tbaa !12\n  %29 = getelementptr inbounds i8, i8* %28, i64 %27\n  %30 = load i8, i8* %29, align 1, !tbaa !11\n  %31 = add i8 %30, -97\n  %32 = icmp ult i8 %31, 26\n  br i1 %32, label %33, label %35\n\n33:                                               ; preds = %26\n  %34 = add nsw i8 %30, -32\n  br label %40\n\n35:                                               ; preds = %26\n  %36 = add i8 %30, -65\n  %37 = icmp ult i8 %36, 26\n  %38 = add i8 %30, 32\n  %39 = select i1 %37, i8 %38, i8 %30\n  br label %40\n\n40:                                               ; preds = %35, %33\n  %41 = phi i8 [ %34, %33 ], [ %39, %35 ]\n  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %12) #6\n  call void @llvm.experimental.noalias.scope.decl(metadata !13)\n  store %union.anon* %13, %union.anon** %14, align 8, !tbaa !3, !alias.scope !13\n  %42 = load i8*, i8** %8, align 8, !tbaa !12, !noalias !13\n  %43 = load i64, i64* %9, align 8, !tbaa !8, !noalias !13\n  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %15) #6, !noalias !13\n  store i64 %43, i64* %3, align 8, !tbaa !16, !noalias !13\n  %44 = icmp ugt i64 %43, 15\n  br i1 %44, label %45, label %49\n\n45:                                               ; preds = %40\n  %46 = invoke i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %4, i64* nonnull align 8 dereferenceable(8) %3, i64 0)\n          to label %47 unwind label %100\n\n47:                                               ; preds = %45\n  store i8* %46, i8** %17, align 8, !tbaa !12, !alias.scope !13\n  %48 = load i64, i64* %3, align 8, !tbaa !16, !noalias !13\n  store i64 %48, i64* %18, align 8, !tbaa !11, !alias.scope !13\n  br label %49\n\n49:                                               ; preds = %40, %47\n  %50 = phi i8* [ %46, %47 ], [ %16, %40 ]\n  switch i64 %43, label %53 [\n    i64 1, label %51\n    i64 0, label %54\n  ]\n\n51:                                               ; preds = %49\n  %52 = load i8, i8* %42, align 1, !tbaa !11\n  store i8 %52, i8* %50, align 1, !tbaa !11\n  br label %54\n\n53:                                               ; preds = %49\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %50, i8* align 1 %42, i64 %43, i1 false) #6\n  br label %54\n\n54:                                               ; preds = %53, %51, %49\n  %55 = load i64, i64* %3, align 8, !tbaa !16, !noalias !13\n  store i64 %55, i64* %19, align 8, !tbaa !8, !alias.scope !13\n  %56 = load i8*, i8** %17, align 8, !tbaa !12, !alias.scope !13\n  %57 = getelementptr inbounds i8, i8* %56, i64 %55\n  store i8 0, i8* %57, align 1, !tbaa !11\n  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %15) #6, !noalias !13\n  %58 = load i64, i64* %19, align 8, !tbaa !8, !alias.scope !13\n  %59 = invoke nonnull align 8 dereferenceable(32) %\"class.std::__cxx11::basic_string\"* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEmmmc(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %4, i64 %58, i64 0, i64 1, i8 signext %41)\n          to label %65 unwind label %60\n\n60:                                               ; preds = %54\n  %61 = landingpad { i8*, i32 }\n          cleanup\n  %62 = load i8*, i8** %17, align 8, !tbaa !12, !alias.scope !13\n  %63 = icmp eq i8* %62, %16\n  br i1 %63, label %102, label %64\n\n64:                                               ; preds = %60\n  call void @_ZdlPv(i8* %62) #6\n  br label %102\n\n65:                                               ; preds = %54\n  %66 = load i8*, i8** %17, align 8, !tbaa !12\n  %67 = icmp eq i8* %66, %16\n  br i1 %67, label %68, label %82\n\n68:                                               ; preds = %65\n  %69 = load i64, i64* %19, align 8, !tbaa !8\n  %70 = icmp eq i64 %69, 0\n  br i1 %70, label %77, label %71\n\n71:                                               ; preds = %68\n  %72 = load i8*, i8** %8, align 8, !tbaa !12\n  %73 = icmp eq i64 %69, 1\n  br i1 %73, label %74, label %76\n\n74:                                               ; preds = %71\n  %75 = load i8, i8* %16, align 8, !tbaa !11\n  store i8 %75, i8* %72, align 1, !tbaa !11\n  br label %77\n\n76:                                               ; preds = %71\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %72, i8* nonnull align 8 %16, i64 %69, i1 false) #6\n  br label %77\n\n77:                                               ; preds = %76, %74, %68\n  %78 = load i64, i64* %19, align 8, !tbaa !8\n  store i64 %78, i64* %9, align 8, !tbaa !8\n  %79 = load i8*, i8** %8, align 8, !tbaa !12\n  %80 = getelementptr inbounds i8, i8* %79, i64 %78\n  store i8 0, i8* %80, align 1, !tbaa !11\n  %81 = load i8*, i8** %17, align 8, !tbaa !12\n  br label %91\n\n82:                                               ; preds = %65\n  %83 = load i8*, i8** %8, align 8, !tbaa !12\n  %84 = icmp eq i8* %83, %7\n  %85 = load i64, i64* %20, align 8\n  store i8* %66, i8** %8, align 8, !tbaa !12\n  %86 = load <2 x i64>, <2 x i64>* %24, align 8, !tbaa !11\n  store <2 x i64> %86, <2 x i64>* %25, align 8, !tbaa !11\n  %87 = icmp eq i8* %83, null\n  %88 = or i1 %84, %87\n  br i1 %88, label %90, label %89\n\n89:                                               ; preds = %82\n  store i8* %83, i8** %17, align 8, !tbaa !12\n  store i64 %85, i64* %18, align 8, !tbaa !11\n  br label %91\n\n90:                                               ; preds = %82\n  store %union.anon* %13, %union.anon** %14, align 8, !tbaa !12\n  br label %91\n\n91:                                               ; preds = %77, %89, %90\n  %92 = phi i8* [ %81, %77 ], [ %83, %89 ], [ %16, %90 ]\n  store i64 0, i64* %19, align 8, !tbaa !8\n  store i8 0, i8* %92, align 1, !tbaa !11\n  %93 = load i8*, i8** %17, align 8, !tbaa !12\n  %94 = icmp eq i8* %93, %16\n  br i1 %94, label %96, label %95\n\n95:                                               ; preds = %91\n  call void @_ZdlPv(i8* %93) #6\n  br label %96\n\n96:                                               ; preds = %91, %95\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %12) #6\n  %97 = add nuw i64 %27, 1\n  %98 = load i64, i64* %10, align 8, !tbaa !8\n  %99 = icmp ugt i64 %98, %97\n  br i1 %99, label %26, label %107, !llvm.loop !17\n\n100:                                              ; preds = %45\n  %101 = landingpad { i8*, i32 }\n          cleanup\n  br label %102\n\n102:                                              ; preds = %60, %64, %100\n  %103 = phi { i8*, i32 } [ %101, %100 ], [ %61, %64 ], [ %61, %60 ]\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %12) #6\n  %104 = load i8*, i8** %8, align 8, !tbaa !12\n  %105 = icmp eq i8* %104, %7\n  br i1 %105, label %108, label %106\n\n106:                                              ; preds = %102\n  call void @_ZdlPv(i8* %104) #6\n  br label %108\n\n107:                                              ; preds = %96, %2\n  ret void\n\n108:                                              ; preds = %106, %102\n  resume { i8*, i32 } %103\n}\n\n; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn\ndeclare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1\n\ndeclare dso_local i32 @__gxx_personality_v0(...)\n\n; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn\ndeclare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1\n\n; Function Attrs: nobuiltin nounwind\ndeclare dso_local void @_ZdlPv(i8*) local_unnamed_addr #2\n\ndeclare dso_local i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32), i64* nonnull align 8 dereferenceable(8), i64) local_unnamed_addr #3\n\n; Function Attrs: argmemonly mustprogress nofree nounwind willreturn\ndeclare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #4\n\ndeclare dso_local nonnull align 8 dereferenceable(32) %\"class.std::__cxx11::basic_string\"* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEmmmc(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32), i64, i64, i64, i8 signext) local_unnamed_addr #3\n\n; Function Attrs: inaccessiblememonly nofree nosync nounwind willreturn\ndeclare void @llvm.experimental.noalias.scope.decl(metadata) #5\n\nattributes #0 = { uwtable \"frame-pointer\"=\"none\" \"min-legal-vector-width\"=\"0\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #1 = { argmemonly mustprogress nofree nosync nounwind willreturn }\nattributes #2 = { nobuiltin nounwind \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #3 = { \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #4 = { argmemonly mustprogress nofree nounwind willreturn }\nattributes #5 = { inaccessiblememonly nofree nosync nounwind willreturn }\nattributes #6 = { nounwind }\n\n!llvm.module.flags = !{!0, !1}\n!llvm.ident = !{!2}\n\n!0 = !{i32 1, !\"wchar_size\", i32 4}\n!1 = !{i32 7, !\"uwtable\", i32 1}\n!2 = !{!\"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)\"}\n!3 = !{!4, !5, i64 0}\n!4 = !{!\"_ZTSNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderE\", !5, i64 0}\n!5 = !{!\"any pointer\", !6, i64 0}\n!6 = !{!\"omnipotent char\", !7, i64 0}\n!7 = !{!\"Simple C++ TBAA\"}\n!8 = !{!9, !10, i64 8}\n!9 = !{!\"_ZTSNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE\", !4, i64 0, !10, i64 8, !6, i64 16}\n!10 = !{!\"long\", !6, i64 0}\n!11 = !{!6, !6, i64 0}\n!12 = !{!9, !5, i64 0}\n!13 = !{!14}\n!14 = distinct !{!14, !15, !\"_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_S5_: argument 0\"}\n!15 = distinct !{!15, !\"_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_S5_\"}\n!16 = !{!10, !10, i64 0}\n!17 = distinct !{!17, !18}\n!18 = !{!\"llvm.loop.mustprogress\"}\n", "target": "This is the targeted source code:\n/*\nFor a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n>>> flip_case(\"Hello\")\n\"hELLO\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring filp_case(string str){\n\n    string out=\"\";\n    for (int i=0;i<str.length();i++)\n    {\n        char w=str[i];\n        if (w>=97 and w<=122) {w-=32;}\n        else\n            if (w>=65 and w<=90){ w+=32;}\n        out=out+w;\n    }\n    return out;\n}\n"}
{"input": "Convert this to C++:\n; ModuleID = '../../Human_xBenchmarks_164/CPP_28/CPP_28.cpp'\nsource_filename = \"../../Human_xBenchmarks_164/CPP_28/CPP_28.cpp\"\ntarget datalayout = \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\ntarget triple = \"x86_64-unknown-linux-gnu\"\n\n%\"class.std::__cxx11::basic_string\" = type { %\"struct.std::__cxx11::basic_string<char>::_Alloc_hider\", i64, %union.anon }\n%\"struct.std::__cxx11::basic_string<char>::_Alloc_hider\" = type { i8* }\n%union.anon = type { i64, [8 x i8] }\n%\"class.std::vector\" = type { %\"struct.std::_Vector_base\" }\n%\"struct.std::_Vector_base\" = type { %\"struct.std::_Vector_base<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char>>>::_Vector_impl\" }\n%\"struct.std::_Vector_base<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char>>>::_Vector_impl\" = type { %\"struct.std::_Vector_base<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char>>>::_Vector_impl_data\" }\n%\"struct.std::_Vector_base<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char>>>::_Vector_impl_data\" = type { %\"class.std::__cxx11::basic_string\"*, %\"class.std::__cxx11::basic_string\"*, %\"class.std::__cxx11::basic_string\"* }\n\n; Function Attrs: uwtable\ndefine dso_local void @_Z11concatenateSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE(%\"class.std::__cxx11::basic_string\"* noalias sret(%\"class.std::__cxx11::basic_string\") align 8 %0, %\"class.std::vector\"* nocapture readonly %1) local_unnamed_addr #0 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {\n  %3 = alloca i64, align 8\n  %4 = alloca %\"class.std::__cxx11::basic_string\", align 8\n  %5 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 2\n  %6 = bitcast %\"class.std::__cxx11::basic_string\"* %0 to %union.anon**\n  store %union.anon* %5, %union.anon** %6, align 8, !tbaa !3\n  %7 = bitcast %union.anon* %5 to i8*\n  %8 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 0, i32 0\n  %9 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 1\n  store i64 0, i64* %9, align 8, !tbaa !8\n  store i8 0, i8* %7, align 8, !tbaa !11\n  %10 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %1, i64 0, i32 0, i32 0, i32 0, i32 1\n  %11 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %1, i64 0, i32 0, i32 0, i32 0, i32 0\n  %12 = bitcast %\"class.std::__cxx11::basic_string\"* %4 to i8*\n  %13 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %4, i64 0, i32 2\n  %14 = bitcast %\"class.std::__cxx11::basic_string\"* %4 to %union.anon**\n  %15 = bitcast i64* %3 to i8*\n  %16 = bitcast %union.anon* %13 to i8*\n  %17 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %4, i64 0, i32 0, i32 0\n  %18 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %4, i64 0, i32 2, i32 0\n  %19 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %4, i64 0, i32 1\n  %20 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 2, i32 0\n  %21 = load %\"class.std::__cxx11::basic_string\"*, %\"class.std::__cxx11::basic_string\"** %10, align 8, !tbaa !12\n  %22 = load %\"class.std::__cxx11::basic_string\"*, %\"class.std::__cxx11::basic_string\"** %11, align 8, !tbaa !14\n  %23 = icmp eq %\"class.std::__cxx11::basic_string\"* %21, %22\n  br i1 %23, label %106, label %24\n\n24:                                               ; preds = %2\n  %25 = bitcast i64* %19 to <2 x i64>*\n  %26 = bitcast i64* %9 to <2 x i64>*\n  br label %27\n\n27:                                               ; preds = %24, %96\n  %28 = phi i64 [ %98, %96 ], [ 0, %24 ]\n  %29 = phi i8* [ %97, %96 ], [ %7, %24 ]\n  %30 = phi i64 [ %88, %96 ], [ 0, %24 ]\n  %31 = phi %\"class.std::__cxx11::basic_string\"* [ %90, %96 ], [ %22, %24 ]\n  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %12) #6\n  call void @llvm.experimental.noalias.scope.decl(metadata !15)\n  store %union.anon* %13, %union.anon** %14, align 8, !tbaa !3, !alias.scope !15\n  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %15) #6, !noalias !15\n  store i64 %28, i64* %3, align 8, !tbaa !18, !noalias !15\n  %32 = icmp ugt i64 %28, 15\n  br i1 %32, label %33, label %37\n\n33:                                               ; preds = %27\n  %34 = invoke i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %4, i64* nonnull align 8 dereferenceable(8) %3, i64 0)\n          to label %35 unwind label %99\n\n35:                                               ; preds = %33\n  store i8* %34, i8** %17, align 8, !tbaa !19, !alias.scope !15\n  %36 = load i64, i64* %3, align 8, !tbaa !18, !noalias !15\n  store i64 %36, i64* %18, align 8, !tbaa !11, !alias.scope !15\n  br label %37\n\n37:                                               ; preds = %27, %35\n  %38 = phi i8* [ %34, %35 ], [ %16, %27 ]\n  switch i64 %28, label %41 [\n    i64 1, label %39\n    i64 0, label %42\n  ]\n\n39:                                               ; preds = %37\n  %40 = load i8, i8* %29, align 1, !tbaa !11\n  store i8 %40, i8* %38, align 1, !tbaa !11\n  br label %42\n\n41:                                               ; preds = %37\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %38, i8* align 1 %29, i64 %28, i1 false) #6\n  br label %42\n\n42:                                               ; preds = %41, %39, %37\n  %43 = load i64, i64* %3, align 8, !tbaa !18, !noalias !15\n  store i64 %43, i64* %19, align 8, !tbaa !8, !alias.scope !15\n  %44 = load i8*, i8** %17, align 8, !tbaa !19, !alias.scope !15\n  %45 = getelementptr inbounds i8, i8* %44, i64 %43\n  store i8 0, i8* %45, align 1, !tbaa !11\n  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %15) #6, !noalias !15\n  %46 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %31, i64 %30, i32 0, i32 0\n  %47 = load i8*, i8** %46, align 8, !tbaa !19, !noalias !15\n  %48 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %31, i64 %30, i32 1\n  %49 = load i64, i64* %48, align 8, !tbaa !8, !noalias !15\n  %50 = invoke nonnull align 8 dereferenceable(32) %\"class.std::__cxx11::basic_string\"* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %4, i8* %47, i64 %49)\n          to label %56 unwind label %51\n\n51:                                               ; preds = %42\n  %52 = landingpad { i8*, i32 }\n          cleanup\n  %53 = load i8*, i8** %17, align 8, !tbaa !19, !alias.scope !15\n  %54 = icmp eq i8* %53, %16\n  br i1 %54, label %101, label %55\n\n55:                                               ; preds = %51\n  call void @_ZdlPv(i8* %53) #6\n  br label %101\n\n56:                                               ; preds = %42\n  %57 = load i8*, i8** %17, align 8, !tbaa !19\n  %58 = icmp eq i8* %57, %16\n  br i1 %58, label %59, label %73\n\n59:                                               ; preds = %56\n  %60 = load i64, i64* %19, align 8, !tbaa !8\n  %61 = icmp eq i64 %60, 0\n  br i1 %61, label %68, label %62\n\n62:                                               ; preds = %59\n  %63 = load i8*, i8** %8, align 8, !tbaa !19\n  %64 = icmp eq i64 %60, 1\n  br i1 %64, label %65, label %67\n\n65:                                               ; preds = %62\n  %66 = load i8, i8* %16, align 8, !tbaa !11\n  store i8 %66, i8* %63, align 1, !tbaa !11\n  br label %68\n\n67:                                               ; preds = %62\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %63, i8* nonnull align 8 %16, i64 %60, i1 false) #6\n  br label %68\n\n68:                                               ; preds = %67, %65, %59\n  %69 = load i64, i64* %19, align 8, !tbaa !8\n  store i64 %69, i64* %9, align 8, !tbaa !8\n  %70 = load i8*, i8** %8, align 8, !tbaa !19\n  %71 = getelementptr inbounds i8, i8* %70, i64 %69\n  store i8 0, i8* %71, align 1, !tbaa !11\n  %72 = load i8*, i8** %17, align 8, !tbaa !19\n  br label %82\n\n73:                                               ; preds = %56\n  %74 = load i8*, i8** %8, align 8, !tbaa !19\n  %75 = icmp eq i8* %74, %7\n  %76 = load i64, i64* %20, align 8\n  store i8* %57, i8** %8, align 8, !tbaa !19\n  %77 = load <2 x i64>, <2 x i64>* %25, align 8, !tbaa !11\n  store <2 x i64> %77, <2 x i64>* %26, align 8, !tbaa !11\n  %78 = icmp eq i8* %74, null\n  %79 = or i1 %75, %78\n  br i1 %79, label %81, label %80\n\n80:                                               ; preds = %73\n  store i8* %74, i8** %17, align 8, !tbaa !19\n  store i64 %76, i64* %18, align 8, !tbaa !11\n  br label %82\n\n81:                                               ; preds = %73\n  store %union.anon* %13, %union.anon** %14, align 8, !tbaa !19\n  br label %82\n\n82:                                               ; preds = %68, %80, %81\n  %83 = phi i8* [ %72, %68 ], [ %74, %80 ], [ %16, %81 ]\n  store i64 0, i64* %19, align 8, !tbaa !8\n  store i8 0, i8* %83, align 1, !tbaa !11\n  %84 = load i8*, i8** %17, align 8, !tbaa !19\n  %85 = icmp eq i8* %84, %16\n  br i1 %85, label %87, label %86\n\n86:                                               ; preds = %82\n  call void @_ZdlPv(i8* %84) #6\n  br label %87\n\n87:                                               ; preds = %82, %86\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %12) #6\n  %88 = add nuw i64 %30, 1\n  %89 = load %\"class.std::__cxx11::basic_string\"*, %\"class.std::__cxx11::basic_string\"** %10, align 8, !tbaa !12\n  %90 = load %\"class.std::__cxx11::basic_string\"*, %\"class.std::__cxx11::basic_string\"** %11, align 8, !tbaa !14\n  %91 = ptrtoint %\"class.std::__cxx11::basic_string\"* %89 to i64\n  %92 = ptrtoint %\"class.std::__cxx11::basic_string\"* %90 to i64\n  %93 = sub i64 %91, %92\n  %94 = ashr exact i64 %93, 5\n  %95 = icmp ugt i64 %94, %88\n  br i1 %95, label %96, label %106, !llvm.loop !20\n\n96:                                               ; preds = %87\n  %97 = load i8*, i8** %8, align 8, !tbaa !19, !noalias !15\n  %98 = load i64, i64* %9, align 8, !tbaa !8, !noalias !15\n  br label %27\n\n99:                                               ; preds = %33\n  %100 = landingpad { i8*, i32 }\n          cleanup\n  br label %101\n\n101:                                              ; preds = %51, %55, %99\n  %102 = phi { i8*, i32 } [ %100, %99 ], [ %52, %55 ], [ %52, %51 ]\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %12) #6\n  %103 = load i8*, i8** %8, align 8, !tbaa !19\n  %104 = icmp eq i8* %103, %7\n  br i1 %104, label %107, label %105\n\n105:                                              ; preds = %101\n  call void @_ZdlPv(i8* %103) #6\n  br label %107\n\n106:                                              ; preds = %87, %2\n  ret void\n\n107:                                              ; preds = %105, %101\n  resume { i8*, i32 } %102\n}\n\n; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn\ndeclare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1\n\ndeclare dso_local i32 @__gxx_personality_v0(...)\n\n; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn\ndeclare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1\n\n; Function Attrs: nobuiltin nounwind\ndeclare dso_local void @_ZdlPv(i8*) local_unnamed_addr #2\n\ndeclare dso_local i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32), i64* nonnull align 8 dereferenceable(8), i64) local_unnamed_addr #3\n\n; Function Attrs: argmemonly mustprogress nofree nounwind willreturn\ndeclare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #4\n\ndeclare dso_local nonnull align 8 dereferenceable(32) %\"class.std::__cxx11::basic_string\"* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32), i8*, i64) local_unnamed_addr #3\n\n; Function Attrs: inaccessiblememonly nofree nosync nounwind willreturn\ndeclare void @llvm.experimental.noalias.scope.decl(metadata) #5\n\nattributes #0 = { uwtable \"frame-pointer\"=\"none\" \"min-legal-vector-width\"=\"0\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #1 = { argmemonly mustprogress nofree nosync nounwind willreturn }\nattributes #2 = { nobuiltin nounwind \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #3 = { \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #4 = { argmemonly mustprogress nofree nounwind willreturn }\nattributes #5 = { inaccessiblememonly nofree nosync nounwind willreturn }\nattributes #6 = { nounwind }\n\n!llvm.module.flags = !{!0, !1}\n!llvm.ident = !{!2}\n\n!0 = !{i32 1, !\"wchar_size\", i32 4}\n!1 = !{i32 7, !\"uwtable\", i32 1}\n!2 = !{!\"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)\"}\n!3 = !{!4, !5, i64 0}\n!4 = !{!\"_ZTSNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderE\", !5, i64 0}\n!5 = !{!\"any pointer\", !6, i64 0}\n!6 = !{!\"omnipotent char\", !7, i64 0}\n!7 = !{!\"Simple C++ TBAA\"}\n!8 = !{!9, !10, i64 8}\n!9 = !{!\"_ZTSNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE\", !4, i64 0, !10, i64 8, !6, i64 16}\n!10 = !{!\"long\", !6, i64 0}\n!11 = !{!6, !6, i64 0}\n!12 = !{!13, !5, i64 8}\n!13 = !{!\"_ZTSNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_Vector_impl_dataE\", !5, i64 0, !5, i64 8, !5, i64 16}\n!14 = !{!13, !5, i64 0}\n!15 = !{!16}\n!16 = distinct !{!16, !17, !\"_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_SA_: argument 0\"}\n!17 = distinct !{!17, !\"_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_SA_\"}\n!18 = !{!10, !10, i64 0}\n!19 = !{!9, !5, i64 0}\n!20 = distinct !{!20, !21}\n!21 = !{!\"llvm.loop.mustprogress\"}\n", "target": "This is the targeted source code:\n/*\nConcatenate vector of strings into a single string\n>>> concatenate({})\n\"\"\n>>> concatenate({\"a\", \"b\", \"c\"})\n\"abc\"\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring concatenate(vector<string> strings){\n\n    string out=\"\";\n    for (int i=0;i<strings.size();i++)\n        out=out+strings[i];\n    return out;\n}\n"}
{"input": "Convert this to C++:\n; ModuleID = '../../Human_xBenchmarks_164/CPP_29/CPP_29.cpp'\nsource_filename = \"../../Human_xBenchmarks_164/CPP_29/CPP_29.cpp\"\ntarget datalayout = \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\ntarget triple = \"x86_64-unknown-linux-gnu\"\n\n%\"class.std::vector\" = type { %\"struct.std::_Vector_base\" }\n%\"struct.std::_Vector_base\" = type { %\"struct.std::_Vector_base<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char>>>::_Vector_impl\" }\n%\"struct.std::_Vector_base<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char>>>::_Vector_impl\" = type { %\"struct.std::_Vector_base<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char>>>::_Vector_impl_data\" }\n%\"struct.std::_Vector_base<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char>>>::_Vector_impl_data\" = type { %\"class.std::__cxx11::basic_string\"*, %\"class.std::__cxx11::basic_string\"*, %\"class.std::__cxx11::basic_string\"* }\n%\"class.std::__cxx11::basic_string\" = type { %\"struct.std::__cxx11::basic_string<char>::_Alloc_hider\", i64, %union.anon }\n%\"struct.std::__cxx11::basic_string<char>::_Alloc_hider\" = type { i8* }\n%union.anon = type { i64, [8 x i8] }\n\n$_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED2Ev = comdat any\n\n$__clang_call_terminate = comdat any\n\n$_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_realloc_insertIJRKS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_ = comdat any\n\n@.str.4 = private unnamed_addr constant [26 x i8] c\"vector::_M_realloc_insert\\00\", align 1\n\n; Function Attrs: uwtable\ndefine dso_local void @_Z16filter_by_prefixSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EES5_(%\"class.std::vector\"* noalias sret(%\"class.std::vector\") align 8 %0, %\"class.std::vector\"* nocapture readonly %1, %\"class.std::__cxx11::basic_string\"* nocapture readonly %2) local_unnamed_addr #0 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {\n  %4 = alloca i64, align 8\n  %5 = alloca i64, align 8\n  %6 = alloca %\"class.std::__cxx11::basic_string\", align 8\n  %7 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %1, i64 0, i32 0, i32 0, i32 0, i32 1\n  %8 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %1, i64 0, i32 0, i32 0, i32 0, i32 0\n  %9 = bitcast %\"class.std::__cxx11::basic_string\"* %6 to i8*\n  %10 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %2, i64 0, i32 1\n  %11 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %6, i64 0, i32 2\n  %12 = bitcast %\"class.std::__cxx11::basic_string\"* %6 to %union.anon**\n  %13 = bitcast %union.anon* %11 to i8*\n  %14 = bitcast i64* %5 to i8*\n  %15 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %6, i64 0, i32 0, i32 0\n  %16 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %6, i64 0, i32 2, i32 0\n  %17 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %6, i64 0, i32 1\n  %18 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %2, i64 0, i32 0, i32 0\n  %19 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0, i64 0, i32 0, i32 0, i32 0, i32 1\n  %20 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0, i64 0, i32 0, i32 0, i32 0, i32 2\n  %21 = bitcast i64* %4 to i8*\n  %22 = bitcast %\"class.std::vector\"* %0 to i8*\n  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(24) %22, i8 0, i64 24, i1 false)\n  %23 = load %\"class.std::__cxx11::basic_string\"*, %\"class.std::__cxx11::basic_string\"** %7, align 8, !tbaa !3\n  %24 = load %\"class.std::__cxx11::basic_string\"*, %\"class.std::__cxx11::basic_string\"** %8, align 8, !tbaa !8\n  %25 = icmp eq %\"class.std::__cxx11::basic_string\"* %23, %24\n  br i1 %25, label %117, label %26\n\n26:                                               ; preds = %3, %106\n  %27 = phi i64 [ %107, %106 ], [ 0, %3 ]\n  %28 = phi %\"class.std::__cxx11::basic_string\"* [ %109, %106 ], [ %24, %3 ]\n  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %9) #12\n  %29 = load i64, i64* %10, align 8, !tbaa !9\n  call void @llvm.experimental.noalias.scope.decl(metadata !13)\n  %30 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %28, i64 %27, i32 1\n  %31 = load i64, i64* %30, align 8, !tbaa !9, !noalias !13\n  store %union.anon* %11, %union.anon** %12, align 8, !tbaa !16, !alias.scope !13\n  %32 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %28, i64 %27, i32 0, i32 0\n  %33 = load i8*, i8** %32, align 8, !tbaa !17, !noalias !13\n  %34 = icmp ugt i64 %31, %29\n  %35 = select i1 %34, i64 %29, i64 %31\n  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %14) #12, !noalias !13\n  store i64 %35, i64* %5, align 8, !tbaa !18, !noalias !13\n  %36 = icmp ugt i64 %35, 15\n  br i1 %36, label %37, label %41\n\n37:                                               ; preds = %26\n  %38 = invoke i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %6, i64* nonnull align 8 dereferenceable(8) %5, i64 0)\n          to label %39 unwind label %102\n\n39:                                               ; preds = %37\n  store i8* %38, i8** %15, align 8, !tbaa !17, !alias.scope !13\n  %40 = load i64, i64* %5, align 8, !tbaa !18, !noalias !13\n  store i64 %40, i64* %16, align 8, !tbaa !19, !alias.scope !13\n  br label %41\n\n41:                                               ; preds = %39, %26\n  %42 = phi i8* [ %38, %39 ], [ %13, %26 ]\n  switch i64 %35, label %45 [\n    i64 1, label %43\n    i64 0, label %46\n  ]\n\n43:                                               ; preds = %41\n  %44 = load i8, i8* %33, align 1, !tbaa !19\n  store i8 %44, i8* %42, align 1, !tbaa !19\n  br label %46\n\n45:                                               ; preds = %41\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %42, i8* align 1 %33, i64 %35, i1 false) #12\n  br label %46\n\n46:                                               ; preds = %45, %43, %41\n  %47 = load i64, i64* %5, align 8, !tbaa !18, !noalias !13\n  store i64 %47, i64* %17, align 8, !tbaa !9, !alias.scope !13\n  %48 = load i8*, i8** %15, align 8, !tbaa !17, !alias.scope !13\n  %49 = getelementptr inbounds i8, i8* %48, i64 %47\n  store i8 0, i8* %49, align 1, !tbaa !19\n  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %14) #12, !noalias !13\n  %50 = load i64, i64* %17, align 8, !tbaa !9\n  %51 = load i64, i64* %10, align 8, !tbaa !9\n  %52 = icmp eq i64 %50, %51\n  br i1 %52, label %53, label %60\n\n53:                                               ; preds = %46\n  %54 = icmp eq i64 %50, 0\n  br i1 %54, label %60, label %55\n\n55:                                               ; preds = %53\n  %56 = load i8*, i8** %18, align 8, !tbaa !17\n  %57 = load i8*, i8** %15, align 8, !tbaa !17\n  %58 = call i32 @bcmp(i8* %57, i8* %56, i64 %50) #12\n  %59 = icmp eq i32 %58, 0\n  br label %60\n\n60:                                               ; preds = %46, %53, %55\n  %61 = phi i1 [ false, %46 ], [ %59, %55 ], [ true, %53 ]\n  %62 = load i8*, i8** %15, align 8, !tbaa !17\n  %63 = icmp eq i8* %62, %13\n  br i1 %63, label %65, label %64\n\n64:                                               ; preds = %60\n  call void @_ZdlPv(i8* %62) #12\n  br label %65\n\n65:                                               ; preds = %60, %64\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %9) #12\n  br i1 %61, label %66, label %106\n\n66:                                               ; preds = %65\n  %67 = load %\"class.std::__cxx11::basic_string\"*, %\"class.std::__cxx11::basic_string\"** %8, align 8, !tbaa !8\n  %68 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %67, i64 %27\n  %69 = load %\"class.std::__cxx11::basic_string\"*, %\"class.std::__cxx11::basic_string\"** %19, align 8, !tbaa !3\n  %70 = load %\"class.std::__cxx11::basic_string\"*, %\"class.std::__cxx11::basic_string\"** %20, align 8, !tbaa !20\n  %71 = icmp eq %\"class.std::__cxx11::basic_string\"* %69, %70\n  br i1 %71, label %101, label %72\n\n72:                                               ; preds = %66\n  %73 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %69, i64 0, i32 2\n  %74 = bitcast %\"class.std::__cxx11::basic_string\"* %69 to %union.anon**\n  store %union.anon* %73, %union.anon** %74, align 8, !tbaa !16\n  %75 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %68, i64 0, i32 0, i32 0\n  %76 = load i8*, i8** %75, align 8, !tbaa !17\n  %77 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %67, i64 %27, i32 1\n  %78 = load i64, i64* %77, align 8, !tbaa !9\n  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %21) #12\n  store i64 %78, i64* %4, align 8, !tbaa !18\n  %79 = icmp ugt i64 %78, 15\n  br i1 %79, label %82, label %80\n\n80:                                               ; preds = %72\n  %81 = bitcast %union.anon* %73 to i8*\n  br label %88\n\n82:                                               ; preds = %72\n  %83 = invoke i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %69, i64* nonnull align 8 dereferenceable(8) %4, i64 0)\n          to label %84 unwind label %104\n\n84:                                               ; preds = %82\n  %85 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %69, i64 0, i32 0, i32 0\n  store i8* %83, i8** %85, align 8, !tbaa !17\n  %86 = load i64, i64* %4, align 8, !tbaa !18\n  %87 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %69, i64 0, i32 2, i32 0\n  store i64 %86, i64* %87, align 8, !tbaa !19\n  br label %88\n\n88:                                               ; preds = %84, %80\n  %89 = phi i8* [ %81, %80 ], [ %83, %84 ]\n  switch i64 %78, label %92 [\n    i64 1, label %90\n    i64 0, label %93\n  ]\n\n90:                                               ; preds = %88\n  %91 = load i8, i8* %76, align 1, !tbaa !19\n  store i8 %91, i8* %89, align 1, !tbaa !19\n  br label %93\n\n92:                                               ; preds = %88\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %89, i8* align 1 %76, i64 %78, i1 false) #12\n  br label %93\n\n93:                                               ; preds = %92, %90, %88\n  %94 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %69, i64 0, i32 0, i32 0\n  %95 = load i64, i64* %4, align 8, !tbaa !18\n  %96 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %69, i64 0, i32 1\n  store i64 %95, i64* %96, align 8, !tbaa !9\n  %97 = load i8*, i8** %94, align 8, !tbaa !17\n  %98 = getelementptr inbounds i8, i8* %97, i64 %95\n  store i8 0, i8* %98, align 1, !tbaa !19\n  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %21) #12\n  %99 = load %\"class.std::__cxx11::basic_string\"*, %\"class.std::__cxx11::basic_string\"** %19, align 8, !tbaa !3\n  %100 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %99, i64 1\n  store %\"class.std::__cxx11::basic_string\"* %100, %\"class.std::__cxx11::basic_string\"** %19, align 8, !tbaa !3\n  br label %106\n\n101:                                              ; preds = %66\n  invoke void @_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_realloc_insertIJRKS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_(%\"class.std::vector\"* nonnull align 8 dereferenceable(24) %0, %\"class.std::__cxx11::basic_string\"* %69, %\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %68)\n          to label %106 unwind label %104\n\n102:                                              ; preds = %37\n  %103 = landingpad { i8*, i32 }\n          cleanup\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %9) #12\n  br label %115\n\n104:                                              ; preds = %101, %82\n  %105 = landingpad { i8*, i32 }\n          cleanup\n  br label %115\n\n106:                                              ; preds = %93, %101, %65\n  %107 = add nuw i64 %27, 1\n  %108 = load %\"class.std::__cxx11::basic_string\"*, %\"class.std::__cxx11::basic_string\"** %7, align 8, !tbaa !3\n  %109 = load %\"class.std::__cxx11::basic_string\"*, %\"class.std::__cxx11::basic_string\"** %8, align 8, !tbaa !8\n  %110 = ptrtoint %\"class.std::__cxx11::basic_string\"* %108 to i64\n  %111 = ptrtoint %\"class.std::__cxx11::basic_string\"* %109 to i64\n  %112 = sub i64 %110, %111\n  %113 = ashr exact i64 %112, 5\n  %114 = icmp ugt i64 %113, %107\n  br i1 %114, label %26, label %117, !llvm.loop !21\n\n115:                                              ; preds = %104, %102\n  %116 = phi { i8*, i32 } [ %105, %104 ], [ %103, %102 ]\n  call void @_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED2Ev(%\"class.std::vector\"* nonnull align 8 dereferenceable(24) %0) #12\n  resume { i8*, i32 } %116\n\n117:                                              ; preds = %106, %3\n  ret void\n}\n\n; Function Attrs: argmemonly mustprogress nofree nounwind willreturn writeonly\ndeclare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1\n\n; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn\ndeclare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2\n\ndeclare dso_local i32 @__gxx_personality_v0(...)\n\n; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn\ndeclare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2\n\n; Function Attrs: nounwind uwtable\ndefine linkonce_odr dso_local void @_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED2Ev(%\"class.std::vector\"* nonnull align 8 dereferenceable(24) %0) unnamed_addr #3 comdat align 2 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {\n  %2 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0, i64 0, i32 0, i32 0, i32 0, i32 0\n  %3 = load %\"class.std::__cxx11::basic_string\"*, %\"class.std::__cxx11::basic_string\"** %2, align 8, !tbaa !8\n  %4 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0, i64 0, i32 0, i32 0, i32 0, i32 1\n  %5 = load %\"class.std::__cxx11::basic_string\"*, %\"class.std::__cxx11::basic_string\"** %4, align 8, !tbaa !3\n  %6 = icmp eq %\"class.std::__cxx11::basic_string\"* %3, %5\n  br i1 %6, label %20, label %7\n\n7:                                                ; preds = %1, %15\n  %8 = phi %\"class.std::__cxx11::basic_string\"* [ %16, %15 ], [ %3, %1 ]\n  %9 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %8, i64 0, i32 0, i32 0\n  %10 = load i8*, i8** %9, align 8, !tbaa !17\n  %11 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %8, i64 0, i32 2\n  %12 = bitcast %union.anon* %11 to i8*\n  %13 = icmp eq i8* %10, %12\n  br i1 %13, label %15, label %14\n\n14:                                               ; preds = %7\n  tail call void @_ZdlPv(i8* %10) #12\n  br label %15\n\n15:                                               ; preds = %14, %7\n  %16 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %8, i64 1\n  %17 = icmp eq %\"class.std::__cxx11::basic_string\"* %16, %5\n  br i1 %17, label %18, label %7, !llvm.loop !23\n\n18:                                               ; preds = %15\n  %19 = load %\"class.std::__cxx11::basic_string\"*, %\"class.std::__cxx11::basic_string\"** %2, align 8, !tbaa !8\n  br label %20\n\n20:                                               ; preds = %18, %1\n  %21 = phi %\"class.std::__cxx11::basic_string\"* [ %19, %18 ], [ %3, %1 ]\n  %22 = icmp eq %\"class.std::__cxx11::basic_string\"* %21, null\n  br i1 %22, label %25, label %23\n\n23:                                               ; preds = %20\n  %24 = bitcast %\"class.std::__cxx11::basic_string\"* %21 to i8*\n  tail call void @_ZdlPv(i8* nonnull %24) #12\n  br label %25\n\n25:                                               ; preds = %20, %23\n  ret void\n}\n\n; Function Attrs: noinline noreturn nounwind\ndefine linkonce_odr hidden void @__clang_call_terminate(i8* %0) local_unnamed_addr #4 comdat {\n  %2 = tail call i8* @__cxa_begin_catch(i8* %0) #12\n  tail call void @_ZSt9terminatev() #13\n  unreachable\n}\n\ndeclare dso_local i8* @__cxa_begin_catch(i8*) local_unnamed_addr\n\ndeclare dso_local void @_ZSt9terminatev() local_unnamed_addr\n\n; Function Attrs: nobuiltin nounwind\ndeclare dso_local void @_ZdlPv(i8*) local_unnamed_addr #5\n\ndeclare dso_local i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32), i64* nonnull align 8 dereferenceable(8), i64) local_unnamed_addr #6\n\n; Function Attrs: argmemonly mustprogress nofree nounwind willreturn\ndeclare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #7\n\n; Function Attrs: uwtable\ndefine linkonce_odr dso_local void @_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_realloc_insertIJRKS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_(%\"class.std::vector\"* nonnull align 8 dereferenceable(24) %0, %\"class.std::__cxx11::basic_string\"* %1, %\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %2) local_unnamed_addr #0 comdat align 2 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {\n  %4 = alloca i64, align 8\n  %5 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0, i64 0, i32 0, i32 0, i32 0, i32 1\n  %6 = load %\"class.std::__cxx11::basic_string\"*, %\"class.std::__cxx11::basic_string\"** %5, align 8, !tbaa !3\n  %7 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0, i64 0, i32 0, i32 0, i32 0, i32 0\n  %8 = load %\"class.std::__cxx11::basic_string\"*, %\"class.std::__cxx11::basic_string\"** %7, align 8, !tbaa !8\n  %9 = ptrtoint %\"class.std::__cxx11::basic_string\"* %6 to i64\n  %10 = ptrtoint %\"class.std::__cxx11::basic_string\"* %8 to i64\n  %11 = sub i64 %9, %10\n  %12 = ashr exact i64 %11, 5\n  %13 = icmp eq i64 %11, 9223372036854775776\n  br i1 %13, label %14, label %15\n\n14:                                               ; preds = %3\n  tail call void @_ZSt20__throw_length_errorPKc(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.4, i64 0, i64 0)) #14\n  unreachable\n\n15:                                               ; preds = %3\n  %16 = icmp eq i64 %11, 0\n  %17 = select i1 %16, i64 1, i64 %12\n  %18 = add nsw i64 %17, %12\n  %19 = icmp ult i64 %18, %12\n  %20 = icmp ugt i64 %18, 288230376151711743\n  %21 = or i1 %19, %20\n  %22 = select i1 %21, i64 288230376151711743, i64 %18\n  %23 = ptrtoint %\"class.std::__cxx11::basic_string\"* %1 to i64\n  %24 = sub i64 %23, %10\n  %25 = ashr exact i64 %24, 5\n  %26 = icmp eq i64 %22, 0\n  br i1 %26, label %31, label %27\n\n27:                                               ; preds = %15\n  %28 = shl nuw nsw i64 %22, 5\n  %29 = tail call noalias nonnull i8* @_Znwm(i64 %28) #15\n  %30 = bitcast i8* %29 to %\"class.std::__cxx11::basic_string\"*\n  br label %31\n\n31:                                               ; preds = %15, %27\n  %32 = phi %\"class.std::__cxx11::basic_string\"* [ %30, %27 ], [ null, %15 ]\n  %33 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %32, i64 %25\n  %34 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %32, i64 %25, i32 2\n  %35 = bitcast %\"class.std::__cxx11::basic_string\"* %33 to %union.anon**\n  store %union.anon* %34, %union.anon** %35, align 8, !tbaa !16\n  %36 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %2, i64 0, i32 0, i32 0\n  %37 = load i8*, i8** %36, align 8, !tbaa !17\n  %38 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %2, i64 0, i32 1\n  %39 = load i64, i64* %38, align 8, !tbaa !9\n  %40 = bitcast i64* %4 to i8*\n  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %40) #12\n  store i64 %39, i64* %4, align 8, !tbaa !18\n  %41 = icmp ugt i64 %39, 15\n  br i1 %41, label %44, label %42\n\n42:                                               ; preds = %31\n  %43 = bitcast %union.anon* %34 to i8*\n  br label %50\n\n44:                                               ; preds = %31\n  %45 = invoke i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %33, i64* nonnull align 8 dereferenceable(8) %4, i64 0)\n          to label %46 unwind label %126\n\n46:                                               ; preds = %44\n  %47 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %33, i64 0, i32 0, i32 0\n  store i8* %45, i8** %47, align 8, !tbaa !17\n  %48 = load i64, i64* %4, align 8, !tbaa !18\n  %49 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %32, i64 %25, i32 2, i32 0\n  store i64 %48, i64* %49, align 8, !tbaa !19\n  br label %50\n\n50:                                               ; preds = %46, %42\n  %51 = phi i8* [ %43, %42 ], [ %45, %46 ]\n  switch i64 %39, label %54 [\n    i64 1, label %52\n    i64 0, label %55\n  ]\n\n52:                                               ; preds = %50\n  %53 = load i8, i8* %37, align 1, !tbaa !19\n  store i8 %53, i8* %51, align 1, !tbaa !19\n  br label %55\n\n54:                                               ; preds = %50\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %51, i8* align 1 %37, i64 %39, i1 false) #12\n  br label %55\n\n55:                                               ; preds = %54, %52, %50\n  %56 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %33, i64 0, i32 0, i32 0\n  %57 = load i64, i64* %4, align 8, !tbaa !18\n  %58 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %32, i64 %25, i32 1\n  store i64 %57, i64* %58, align 8, !tbaa !9\n  %59 = load i8*, i8** %56, align 8, !tbaa !17\n  %60 = getelementptr inbounds i8, i8* %59, i64 %57\n  store i8 0, i8* %60, align 1, !tbaa !19\n  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %40) #12\n  %61 = icmp eq %\"class.std::__cxx11::basic_string\"* %8, %1\n  br i1 %61, label %87, label %62\n\n62:                                               ; preds = %55, %79\n  %63 = phi %\"class.std::__cxx11::basic_string\"* [ %85, %79 ], [ %32, %55 ]\n  %64 = phi %\"class.std::__cxx11::basic_string\"* [ %84, %79 ], [ %8, %55 ]\n  %65 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %63, i64 0, i32 2\n  %66 = bitcast %\"class.std::__cxx11::basic_string\"* %63 to %union.anon**\n  store %union.anon* %65, %union.anon** %66, align 8, !tbaa !16\n  %67 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %64, i64 0, i32 0, i32 0\n  %68 = load i8*, i8** %67, align 8, !tbaa !17\n  %69 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %64, i64 0, i32 2\n  %70 = bitcast %union.anon* %69 to i8*\n  %71 = icmp eq i8* %68, %70\n  br i1 %71, label %72, label %74\n\n72:                                               ; preds = %62\n  %73 = bitcast %union.anon* %65 to i8*\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(16) %73, i8* noundef nonnull align 8 dereferenceable(16) %68, i64 16, i1 false) #12\n  br label %79\n\n74:                                               ; preds = %62\n  %75 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %63, i64 0, i32 0, i32 0\n  store i8* %68, i8** %75, align 8, !tbaa !17\n  %76 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %64, i64 0, i32 2, i32 0\n  %77 = load i64, i64* %76, align 8, !tbaa !19\n  %78 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %63, i64 0, i32 2, i32 0\n  store i64 %77, i64* %78, align 8, !tbaa !19\n  br label %79\n\n79:                                               ; preds = %74, %72\n  %80 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %64, i64 0, i32 1\n  %81 = load i64, i64* %80, align 8, !tbaa !9\n  %82 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %63, i64 0, i32 1\n  store i64 %81, i64* %82, align 8, !tbaa !9\n  %83 = bitcast %\"class.std::__cxx11::basic_string\"* %64 to %union.anon**\n  store %union.anon* %69, %union.anon** %83, align 8, !tbaa !17\n  store i64 0, i64* %80, align 8, !tbaa !9\n  store i8 0, i8* %70, align 8, !tbaa !19\n  %84 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %64, i64 1\n  %85 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %63, i64 1\n  %86 = icmp eq %\"class.std::__cxx11::basic_string\"* %84, %1\n  br i1 %86, label %87, label %62, !llvm.loop !24\n\n87:                                               ; preds = %79, %55\n  %88 = phi %\"class.std::__cxx11::basic_string\"* [ %32, %55 ], [ %85, %79 ]\n  %89 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %88, i64 1\n  %90 = icmp eq %\"class.std::__cxx11::basic_string\"* %6, %1\n  br i1 %90, label %116, label %91\n\n91:                                               ; preds = %87, %108\n  %92 = phi %\"class.std::__cxx11::basic_string\"* [ %114, %108 ], [ %89, %87 ]\n  %93 = phi %\"class.std::__cxx11::basic_string\"* [ %113, %108 ], [ %1, %87 ]\n  %94 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %92, i64 0, i32 2\n  %95 = bitcast %\"class.std::__cxx11::basic_string\"* %92 to %union.anon**\n  store %union.anon* %94, %union.anon** %95, align 8, !tbaa !16\n  %96 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %93, i64 0, i32 0, i32 0\n  %97 = load i8*, i8** %96, align 8, !tbaa !17\n  %98 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %93, i64 0, i32 2\n  %99 = bitcast %union.anon* %98 to i8*\n  %100 = icmp eq i8* %97, %99\n  br i1 %100, label %101, label %103\n\n101:                                              ; preds = %91\n  %102 = bitcast %union.anon* %94 to i8*\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(16) %102, i8* noundef nonnull align 8 dereferenceable(16) %97, i64 16, i1 false) #12\n  br label %108\n\n103:                                              ; preds = %91\n  %104 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %92, i64 0, i32 0, i32 0\n  store i8* %97, i8** %104, align 8, !tbaa !17\n  %105 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %93, i64 0, i32 2, i32 0\n  %106 = load i64, i64* %105, align 8, !tbaa !19\n  %107 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %92, i64 0, i32 2, i32 0\n  store i64 %106, i64* %107, align 8, !tbaa !19\n  br label %108\n\n108:                                              ; preds = %103, %101\n  %109 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %93, i64 0, i32 1\n  %110 = load i64, i64* %109, align 8, !tbaa !9\n  %111 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %92, i64 0, i32 1\n  store i64 %110, i64* %111, align 8, !tbaa !9\n  %112 = bitcast %\"class.std::__cxx11::basic_string\"* %93 to %union.anon**\n  store %union.anon* %98, %union.anon** %112, align 8, !tbaa !17\n  store i64 0, i64* %109, align 8, !tbaa !9\n  store i8 0, i8* %99, align 8, !tbaa !19\n  %113 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %93, i64 1\n  %114 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %92, i64 1\n  %115 = icmp eq %\"class.std::__cxx11::basic_string\"* %113, %6\n  br i1 %115, label %116, label %91, !llvm.loop !24\n\n116:                                              ; preds = %108, %87\n  %117 = phi %\"class.std::__cxx11::basic_string\"* [ %89, %87 ], [ %114, %108 ]\n  %118 = icmp eq %\"class.std::__cxx11::basic_string\"* %8, null\n  br i1 %118, label %121, label %119\n\n119:                                              ; preds = %116\n  %120 = bitcast %\"class.std::__cxx11::basic_string\"* %8 to i8*\n  call void @_ZdlPv(i8* nonnull %120) #12\n  br label %121\n\n121:                                              ; preds = %116, %119\n  %122 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0, i64 0, i32 0, i32 0, i32 0, i32 2\n  store %\"class.std::__cxx11::basic_string\"* %32, %\"class.std::__cxx11::basic_string\"** %7, align 8, !tbaa !8\n  store %\"class.std::__cxx11::basic_string\"* %117, %\"class.std::__cxx11::basic_string\"** %5, align 8, !tbaa !3\n  %123 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %32, i64 %22\n  store %\"class.std::__cxx11::basic_string\"* %123, %\"class.std::__cxx11::basic_string\"** %122, align 8, !tbaa !20\n  ret void\n\n124:                                              ; preds = %126\n  %125 = landingpad { i8*, i32 }\n          cleanup\n  invoke void @__cxa_end_catch()\n          to label %131 unwind label %132\n\n126:                                              ; preds = %44\n  %127 = landingpad { i8*, i32 }\n          catch i8* null\n  %128 = extractvalue { i8*, i32 } %127, 0\n  %129 = call i8* @__cxa_begin_catch(i8* %128) #12\n  %130 = bitcast %\"class.std::__cxx11::basic_string\"* %32 to i8*\n  call void @_ZdlPv(i8* nonnull %130) #12\n  invoke void @__cxa_rethrow() #14\n          to label %135 unwind label %124\n\n131:                                              ; preds = %124\n  resume { i8*, i32 } %125\n\n132:                                              ; preds = %124\n  %133 = landingpad { i8*, i32 }\n          catch i8* null\n  %134 = extractvalue { i8*, i32 } %133, 0\n  call void @__clang_call_terminate(i8* %134) #13\n  unreachable\n\n135:                                              ; preds = %126\n  unreachable\n}\n\ndeclare dso_local void @__cxa_rethrow() local_unnamed_addr\n\ndeclare dso_local void @__cxa_end_catch() local_unnamed_addr\n\n; Function Attrs: noreturn\ndeclare dso_local void @_ZSt20__throw_length_errorPKc(i8*) local_unnamed_addr #8\n\n; Function Attrs: nobuiltin allocsize(0)\ndeclare dso_local nonnull i8* @_Znwm(i64) local_unnamed_addr #9\n\n; Function Attrs: argmemonly nofree nounwind readonly willreturn\ndeclare i32 @bcmp(i8* nocapture, i8* nocapture, i64) local_unnamed_addr #10\n\n; Function Attrs: inaccessiblememonly nofree nosync nounwind willreturn\ndeclare void @llvm.experimental.noalias.scope.decl(metadata) #11\n\nattributes #0 = { uwtable \"frame-pointer\"=\"none\" \"min-legal-vector-width\"=\"0\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #1 = { argmemonly mustprogress nofree nounwind willreturn writeonly }\nattributes #2 = { argmemonly mustprogress nofree nosync nounwind willreturn }\nattributes #3 = { nounwind uwtable \"frame-pointer\"=\"none\" \"min-legal-vector-width\"=\"0\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #4 = { noinline noreturn nounwind }\nattributes #5 = { nobuiltin nounwind \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #6 = { \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #7 = { argmemonly mustprogress nofree nounwind willreturn }\nattributes #8 = { noreturn \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #9 = { nobuiltin allocsize(0) \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #10 = { argmemonly nofree nounwind readonly willreturn }\nattributes #11 = { inaccessiblememonly nofree nosync nounwind willreturn }\nattributes #12 = { nounwind }\nattributes #13 = { noreturn nounwind }\nattributes #14 = { noreturn }\nattributes #15 = { allocsize(0) }\n\n!llvm.module.flags = !{!0, !1}\n!llvm.ident = !{!2}\n\n!0 = !{i32 1, !\"wchar_size\", i32 4}\n!1 = !{i32 7, !\"uwtable\", i32 1}\n!2 = !{!\"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)\"}\n!3 = !{!4, !5, i64 8}\n!4 = !{!\"_ZTSNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_Vector_impl_dataE\", !5, i64 0, !5, i64 8, !5, i64 16}\n!5 = !{!\"any pointer\", !6, i64 0}\n!6 = !{!\"omnipotent char\", !7, i64 0}\n!7 = !{!\"Simple C++ TBAA\"}\n!8 = !{!4, !5, i64 0}\n!9 = !{!10, !12, i64 8}\n!10 = !{!\"_ZTSNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE\", !11, i64 0, !12, i64 8, !6, i64 16}\n!11 = !{!\"_ZTSNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderE\", !5, i64 0}\n!12 = !{!\"long\", !6, i64 0}\n!13 = !{!14}\n!14 = distinct !{!14, !15, !\"_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEmm: argument 0\"}\n!15 = distinct !{!15, !\"_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEmm\"}\n!16 = !{!11, !5, i64 0}\n!17 = !{!10, !5, i64 0}\n!18 = !{!12, !12, i64 0}\n!19 = !{!6, !6, i64 0}\n!20 = !{!4, !5, i64 16}\n!21 = distinct !{!21, !22}\n!22 = !{!\"llvm.loop.mustprogress\"}\n!23 = distinct !{!23, !22}\n!24 = distinct !{!24, !22}\n", "target": "This is the targeted source code:\n/*\nFilter an input vector of strings only for ones that start with a given prefix.\n>>> filter_by_prefix({}, \"a\")\n{}\n>>> filter_by_prefix({\"abc\", \"bcd\", \"cde\", \"vector\"}, \"a\")\n{\"abc\", \"vector\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> filter_by_prefix(vector<string> strings, string prefix){\n\n    vector<string> out={};\n    for (int i=0;i<strings.size();i++)\n        if (strings[i].substr(0,prefix.length())==prefix) out.push_back(strings[i]);\n    return out;\n}\n"}
{"input": "Convert this to C++:\n; ModuleID = '../../Human_xBenchmarks_164/CPP_30/CPP_30.cpp'\nsource_filename = \"../../Human_xBenchmarks_164/CPP_30/CPP_30.cpp\"\ntarget datalayout = \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\ntarget triple = \"x86_64-unknown-linux-gnu\"\n\n%\"class.std::vector\" = type { %\"struct.std::_Vector_base\" }\n%\"struct.std::_Vector_base\" = type { %\"struct.std::_Vector_base<float, std::allocator<float>>::_Vector_impl\" }\n%\"struct.std::_Vector_base<float, std::allocator<float>>::_Vector_impl\" = type { %\"struct.std::_Vector_base<float, std::allocator<float>>::_Vector_impl_data\" }\n%\"struct.std::_Vector_base<float, std::allocator<float>>::_Vector_impl_data\" = type { float*, float*, float* }\n\n@.str = private unnamed_addr constant [26 x i8] c\"vector::_M_realloc_insert\\00\", align 1\n\n; Function Attrs: uwtable\ndefine dso_local void @_Z12get_positiveSt6vectorIfSaIfEE(%\"class.std::vector\"* noalias nocapture sret(%\"class.std::vector\") align 8 %0, %\"class.std::vector\"* nocapture readonly %1) local_unnamed_addr #0 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {\n  %3 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %1, i64 0, i32 0, i32 0, i32 0, i32 1\n  %4 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %1, i64 0, i32 0, i32 0, i32 0, i32 0\n  %5 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0, i64 0, i32 0, i32 0, i32 0, i32 1\n  %6 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0, i64 0, i32 0, i32 0, i32 0, i32 2\n  %7 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0, i64 0, i32 0, i32 0, i32 0, i32 0\n  %8 = bitcast %\"class.std::vector\"* %0 to i8*\n  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(24) %8, i8 0, i64 24, i1 false)\n  %9 = load float*, float** %3, align 8, !tbaa !3\n  %10 = load float*, float** %4, align 8, !tbaa !8\n  %11 = icmp eq float* %9, %10\n  br i1 %11, label %88, label %12\n\n12:                                               ; preds = %2, %76\n  %13 = phi float* [ %77, %76 ], [ %10, %2 ]\n  %14 = phi float* [ %78, %76 ], [ %9, %2 ]\n  %15 = phi float* [ %79, %76 ], [ null, %2 ]\n  %16 = phi float* [ %80, %76 ], [ null, %2 ]\n  %17 = phi float* [ %81, %76 ], [ null, %2 ]\n  %18 = phi i64 [ %82, %76 ], [ 0, %2 ]\n  %19 = getelementptr inbounds float, float* %13, i64 %18\n  %20 = load float, float* %19, align 4, !tbaa !9\n  %21 = fcmp ogt float %20, 0.000000e+00\n  br i1 %21, label %22, label %76\n\n22:                                               ; preds = %12\n  %23 = icmp eq float* %17, %16\n  br i1 %23, label %26, label %24\n\n24:                                               ; preds = %22\n  store float %20, float* %17, align 4, !tbaa !9\n  %25 = getelementptr inbounds float, float* %17, i64 1\n  store float* %25, float** %5, align 8, !tbaa !3\n  br label %76\n\n26:                                               ; preds = %22\n  %27 = ptrtoint float* %16 to i64\n  %28 = ptrtoint float* %15 to i64\n  %29 = sub i64 %27, %28\n  %30 = ashr exact i64 %29, 2\n  %31 = icmp eq i64 %29, 9223372036854775804\n  br i1 %31, label %32, label %34\n\n32:                                               ; preds = %26\n  invoke void @_ZSt20__throw_length_errorPKc(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str, i64 0, i64 0)) #6\n          to label %33 unwind label %68\n\n33:                                               ; preds = %32\n  unreachable\n\n34:                                               ; preds = %26\n  %35 = icmp eq i64 %29, 0\n  %36 = select i1 %35, i64 1, i64 %30\n  %37 = add nsw i64 %36, %30\n  %38 = icmp ult i64 %37, %30\n  %39 = icmp ugt i64 %37, 2305843009213693951\n  %40 = or i1 %38, %39\n  %41 = select i1 %40, i64 2305843009213693951, i64 %37\n  %42 = icmp eq i64 %41, 0\n  br i1 %42, label %49, label %43\n\n43:                                               ; preds = %34\n  %44 = shl nuw nsw i64 %41, 2\n  %45 = invoke noalias nonnull i8* @_Znwm(i64 %44) #7\n          to label %46 unwind label %66\n\n46:                                               ; preds = %43\n  %47 = bitcast i8* %45 to float*\n  %48 = load float, float* %19, align 4, !tbaa !9\n  br label %49\n\n49:                                               ; preds = %46, %34\n  %50 = phi float [ %48, %46 ], [ %20, %34 ]\n  %51 = phi float* [ %47, %46 ], [ null, %34 ]\n  %52 = getelementptr inbounds float, float* %51, i64 %30\n  store float %50, float* %52, align 4, !tbaa !9\n  %53 = icmp sgt i64 %29, 0\n  br i1 %53, label %54, label %57\n\n54:                                               ; preds = %49\n  %55 = bitcast float* %51 to i8*\n  %56 = bitcast float* %15 to i8*\n  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %55, i8* align 4 %56, i64 %29, i1 false) #8\n  br label %57\n\n57:                                               ; preds = %49, %54\n  %58 = getelementptr inbounds float, float* %52, i64 1\n  %59 = icmp eq float* %15, null\n  br i1 %59, label %62, label %60\n\n60:                                               ; preds = %57\n  %61 = bitcast float* %15 to i8*\n  tail call void @_ZdlPv(i8* nonnull %61) #8\n  br label %62\n\n62:                                               ; preds = %60, %57\n  store float* %51, float** %7, align 8, !tbaa !8\n  store float* %58, float** %5, align 8, !tbaa !3\n  %63 = getelementptr inbounds float, float* %51, i64 %41\n  store float* %63, float** %6, align 8, !tbaa !11\n  %64 = load float*, float** %3, align 8, !tbaa !3\n  %65 = load float*, float** %4, align 8, !tbaa !8\n  br label %76\n\n66:                                               ; preds = %43\n  %67 = landingpad { i8*, i32 }\n          cleanup\n  br label %70\n\n68:                                               ; preds = %32\n  %69 = landingpad { i8*, i32 }\n          cleanup\n  br label %70\n\n70:                                               ; preds = %68, %66\n  %71 = phi { i8*, i32 } [ %67, %66 ], [ %69, %68 ]\n  %72 = icmp eq float* %15, null\n  br i1 %72, label %75, label %73\n\n73:                                               ; preds = %70\n  %74 = bitcast float* %15 to i8*\n  tail call void @_ZdlPv(i8* nonnull %74) #8\n  br label %75\n\n75:                                               ; preds = %70, %73\n  resume { i8*, i32 } %71\n\n76:                                               ; preds = %62, %24, %12\n  %77 = phi float* [ %65, %62 ], [ %13, %24 ], [ %13, %12 ]\n  %78 = phi float* [ %64, %62 ], [ %14, %24 ], [ %14, %12 ]\n  %79 = phi float* [ %51, %62 ], [ %15, %24 ], [ %15, %12 ]\n  %80 = phi float* [ %63, %62 ], [ %16, %24 ], [ %16, %12 ]\n  %81 = phi float* [ %58, %62 ], [ %25, %24 ], [ %17, %12 ]\n  %82 = add nuw i64 %18, 1\n  %83 = ptrtoint float* %78 to i64\n  %84 = ptrtoint float* %77 to i64\n  %85 = sub i64 %83, %84\n  %86 = ashr exact i64 %85, 2\n  %87 = icmp ugt i64 %86, %82\n  br i1 %87, label %12, label %88, !llvm.loop !12\n\n88:                                               ; preds = %76, %2\n  ret void\n}\n\n; Function Attrs: argmemonly mustprogress nofree nounwind willreturn writeonly\ndeclare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1\n\ndeclare dso_local i32 @__gxx_personality_v0(...)\n\n; Function Attrs: nobuiltin nounwind\ndeclare dso_local void @_ZdlPv(i8*) local_unnamed_addr #2\n\n; Function Attrs: noreturn\ndeclare dso_local void @_ZSt20__throw_length_errorPKc(i8*) local_unnamed_addr #3\n\n; Function Attrs: nobuiltin allocsize(0)\ndeclare dso_local nonnull i8* @_Znwm(i64) local_unnamed_addr #4\n\n; Function Attrs: argmemonly mustprogress nofree nounwind willreturn\ndeclare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #5\n\nattributes #0 = { uwtable \"frame-pointer\"=\"none\" \"min-legal-vector-width\"=\"0\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #1 = { argmemonly mustprogress nofree nounwind willreturn writeonly }\nattributes #2 = { nobuiltin nounwind \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #3 = { noreturn \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #4 = { nobuiltin allocsize(0) \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #5 = { argmemonly mustprogress nofree nounwind willreturn }\nattributes #6 = { noreturn }\nattributes #7 = { allocsize(0) }\nattributes #8 = { nounwind }\n\n!llvm.module.flags = !{!0, !1}\n!llvm.ident = !{!2}\n\n!0 = !{i32 1, !\"wchar_size\", i32 4}\n!1 = !{i32 7, !\"uwtable\", i32 1}\n!2 = !{!\"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)\"}\n!3 = !{!4, !5, i64 8}\n!4 = !{!\"_ZTSNSt12_Vector_baseIfSaIfEE17_Vector_impl_dataE\", !5, i64 0, !5, i64 8, !5, i64 16}\n!5 = !{!\"any pointer\", !6, i64 0}\n!6 = !{!\"omnipotent char\", !7, i64 0}\n!7 = !{!\"Simple C++ TBAA\"}\n!8 = !{!4, !5, i64 0}\n!9 = !{!10, !10, i64 0}\n!10 = !{!\"float\", !6, i64 0}\n!11 = !{!4, !5, i64 16}\n!12 = distinct !{!12, !13}\n!13 = !{!\"llvm.loop.mustprogress\"}\n", "target": "This is the targeted source code:\n/*\nReturn only positive numbers in the vector.\n>>> get_positive({-1, 2, -4, 5, 6})\n{2, 5, 6}\n>>> get_positive({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n{5, 3, 2, 3, 9, 123, 1}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nvector<float> get_positive(vector<float> l){\n\n    vector<float> out={};\n    for (int i=0;i<l.size();i++)\n        if (l[i]>0) out.push_back(l[i]);\n    return out;\n}\n"}
{"input": "Convert this to C++:\n; ModuleID = '../../Human_xBenchmarks_164/CPP_31/CPP_31.cpp'\nsource_filename = \"../../Human_xBenchmarks_164/CPP_31/CPP_31.cpp\"\ntarget datalayout = \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\ntarget triple = \"x86_64-unknown-linux-gnu\"\n\n; Function Attrs: mustprogress nofree norecurse nosync nounwind readnone uwtable willreturn\ndefine dso_local zeroext i1 @_Z8is_primex(i64 %0) local_unnamed_addr #0 {\n  %2 = icmp slt i64 %0, 2\n  br i1 %2, label %15, label %3\n\n3:                                                ; preds = %1\n  %4 = icmp slt i64 %0, 4\n  br i1 %4, label %15, label %5\n\n5:                                                ; preds = %3, %5\n  %6 = phi i64 [ %9, %5 ], [ 2, %3 ]\n  %7 = srem i64 %0, %6\n  %8 = icmp eq i64 %7, 0\n  %9 = add nuw nsw i64 %6, 1\n  %10 = mul nsw i64 %9, %9\n  %11 = icmp sgt i64 %10, %0\n  %12 = select i1 %8, i1 true, i1 %11\n  br i1 %12, label %13, label %5, !llvm.loop !3\n\n13:                                               ; preds = %5\n  %14 = xor i1 %8, true\n  br label %15\n\n15:                                               ; preds = %13, %3, %1\n  %16 = phi i1 [ false, %1 ], [ true, %3 ], [ %14, %13 ]\n  ret i1 %16\n}\n\nattributes #0 = { mustprogress nofree norecurse nosync nounwind readnone uwtable willreturn \"frame-pointer\"=\"none\" \"min-legal-vector-width\"=\"0\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\n\n!llvm.module.flags = !{!0, !1}\n!llvm.ident = !{!2}\n\n!0 = !{i32 1, !\"wchar_size\", i32 4}\n!1 = !{i32 7, !\"uwtable\", i32 1}\n!2 = !{!\"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)\"}\n!3 = distinct !{!3, !4}\n!4 = !{!\"llvm.loop.mustprogress\"}\n", "target": "This is the targeted source code:\n/*\nReturn true if a given number is prime, and false otherwise.\n>>> is_prime(6)\nfalse\n>>> is_prime(101)\ntrue\n>>> is_prime(11)\ntrue\n>>> is_prime(13441)\ntrue\n>>> is_prime(61)\ntrue\n>>> is_prime(4)\nfalse\n>>> is_prime(1)\nfalse\n*/\n#include<stdio.h>\nusing namespace std;\nbool is_prime(long long n){\n\n    if (n<2) return false;\n    for (long long i=2;i*i<=n;i++)\n        if (n%i==0) return false;\n    return true;\n}\n"}
{"input": "Convert this to C++:\n; ModuleID = '../../Human_xBenchmarks_164/CPP_32/CPP_32.cpp'\nsource_filename = \"../../Human_xBenchmarks_164/CPP_32/CPP_32.cpp\"\ntarget datalayout = \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\ntarget triple = \"x86_64-unknown-linux-gnu\"\n\n%\"class.std::vector\" = type { %\"struct.std::_Vector_base\" }\n%\"struct.std::_Vector_base\" = type { %\"struct.std::_Vector_base<double, std::allocator<double>>::_Vector_impl\" }\n%\"struct.std::_Vector_base<double, std::allocator<double>>::_Vector_impl\" = type { %\"struct.std::_Vector_base<double, std::allocator<double>>::_Vector_impl_data\" }\n%\"struct.std::_Vector_base<double, std::allocator<double>>::_Vector_impl_data\" = type { double*, double*, double* }\n\n; Function Attrs: mustprogress nofree nounwind uwtable\ndefine dso_local double @_Z4polySt6vectorIdSaIdEEd(%\"class.std::vector\"* nocapture readonly %0, double %1) local_unnamed_addr #0 {\n  %3 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0, i64 0, i32 0, i32 0, i32 0, i32 1\n  %4 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0, i64 0, i32 0, i32 0, i32 0, i32 0\n  %5 = load double*, double** %3, align 8, !tbaa !3\n  %6 = load double*, double** %4, align 8, !tbaa !8\n  %7 = icmp eq double* %5, %6\n  br i1 %7, label %27, label %8\n\n8:                                                ; preds = %2, %8\n  %9 = phi i64 [ %19, %8 ], [ 0, %2 ]\n  %10 = phi double* [ %21, %8 ], [ %6, %2 ]\n  %11 = phi double [ %18, %8 ], [ 0.000000e+00, %2 ]\n  %12 = getelementptr inbounds double, double* %10, i64 %9\n  %13 = load double, double* %12, align 8, !tbaa !9\n  %14 = trunc i64 %9 to i32\n  %15 = sitofp i32 %14 to double\n  %16 = tail call double @pow(double %1, double %15) #9\n  %17 = fmul double %13, %16\n  %18 = fadd double %11, %17\n  %19 = add nuw nsw i64 %9, 1\n  %20 = load double*, double** %3, align 8, !tbaa !3\n  %21 = load double*, double** %4, align 8, !tbaa !8\n  %22 = ptrtoint double* %20 to i64\n  %23 = ptrtoint double* %21 to i64\n  %24 = sub i64 %22, %23\n  %25 = ashr exact i64 %24, 3\n  %26 = icmp ugt i64 %25, %19\n  br i1 %26, label %8, label %27, !llvm.loop !11\n\n27:                                               ; preds = %8, %2\n  %28 = phi double [ 0.000000e+00, %2 ], [ %18, %8 ]\n  ret double %28\n}\n\n; Function Attrs: uwtable\ndefine dso_local double @_Z9find_zeroSt6vectorIdSaIdEE(%\"class.std::vector\"* nocapture readonly %0) local_unnamed_addr #1 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {\n  %2 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0, i64 0, i32 0, i32 0, i32 0, i32 1\n  %3 = load double*, double** %2, align 8, !tbaa !3\n  %4 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0, i64 0, i32 0, i32 0, i32 0, i32 0\n  %5 = load double*, double** %4, align 8, !tbaa !8\n  %6 = ptrtoint double* %3 to i64\n  %7 = ptrtoint double* %5 to i64\n  %8 = sub i64 %6, %7\n  %9 = icmp eq i64 %8, 0\n  br i1 %9, label %23, label %10\n\n10:                                               ; preds = %1\n  %11 = ashr exact i64 %8, 3\n  %12 = icmp ugt i64 %11, 1152921504606846975\n  br i1 %12, label %13, label %14\n\n13:                                               ; preds = %10\n  tail call void @_ZSt17__throw_bad_allocv() #10\n  unreachable\n\n14:                                               ; preds = %10\n  %15 = tail call noalias nonnull i8* @_Znwm(i64 %8) #11\n  %16 = bitcast i8* %15 to double*\n  %17 = load double*, double** %4, align 8, !tbaa !13\n  %18 = load double*, double** %2, align 8, !tbaa !13\n  %19 = ptrtoint double* %18 to i64\n  %20 = ptrtoint double* %17 to i64\n  %21 = sub i64 %19, %20\n  %22 = icmp eq i64 %21, 0\n  br i1 %22, label %96, label %26\n\n23:                                               ; preds = %1\n  %24 = sub i64 %6, %7\n  %25 = icmp eq i64 %24, 0\n  br i1 %25, label %100, label %26\n\n26:                                               ; preds = %23, %14\n  %27 = phi i64 [ %24, %23 ], [ %21, %14 ]\n  %28 = phi double* [ null, %23 ], [ %16, %14 ]\n  %29 = phi double* [ %5, %23 ], [ %17, %14 ]\n  %30 = bitcast double* %28 to i8*\n  %31 = bitcast double* %29 to i8*\n  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %30, i8* align 8 %31, i64 %27, i1 false) #9\n  %32 = ashr exact i64 %27, 3\n  %33 = call i64 @llvm.umax.i64(i64 %32, i64 1)\n  %34 = add i64 %33, -1\n  %35 = and i64 %33, 3\n  %36 = icmp ult i64 %34, 3\n  br i1 %36, label %77, label %37\n\n37:                                               ; preds = %26\n  %38 = and i64 %33, -4\n  br label %39\n\n39:                                               ; preds = %39, %37\n  %40 = phi i64 [ 0, %37 ], [ %74, %39 ]\n  %41 = phi double [ 0.000000e+00, %37 ], [ %73, %39 ]\n  %42 = phi i64 [ %38, %37 ], [ %75, %39 ]\n  %43 = getelementptr inbounds double, double* %28, i64 %40\n  %44 = load double, double* %43, align 8, !tbaa !9\n  %45 = trunc i64 %40 to i32\n  %46 = sitofp i32 %45 to double\n  %47 = tail call double @pow(double 0.000000e+00, double %46) #9\n  %48 = fmul double %44, %47\n  %49 = fadd double %41, %48\n  %50 = or i64 %40, 1\n  %51 = getelementptr inbounds double, double* %28, i64 %50\n  %52 = load double, double* %51, align 8, !tbaa !9\n  %53 = trunc i64 %50 to i32\n  %54 = sitofp i32 %53 to double\n  %55 = tail call double @pow(double 0.000000e+00, double %54) #9\n  %56 = fmul double %52, %55\n  %57 = fadd double %49, %56\n  %58 = or i64 %40, 2\n  %59 = getelementptr inbounds double, double* %28, i64 %58\n  %60 = load double, double* %59, align 8, !tbaa !9\n  %61 = trunc i64 %58 to i32\n  %62 = sitofp i32 %61 to double\n  %63 = tail call double @pow(double 0.000000e+00, double %62) #9\n  %64 = fmul double %60, %63\n  %65 = fadd double %57, %64\n  %66 = or i64 %40, 3\n  %67 = getelementptr inbounds double, double* %28, i64 %66\n  %68 = load double, double* %67, align 8, !tbaa !9\n  %69 = trunc i64 %66 to i32\n  %70 = sitofp i32 %69 to double\n  %71 = tail call double @pow(double 0.000000e+00, double %70) #9\n  %72 = fmul double %68, %71\n  %73 = fadd double %65, %72\n  %74 = add nuw nsw i64 %40, 4\n  %75 = add i64 %42, -4\n  %76 = icmp eq i64 %75, 0\n  br i1 %76, label %77, label %39, !llvm.loop !11\n\n77:                                               ; preds = %39, %26\n  %78 = phi double [ undef, %26 ], [ %73, %39 ]\n  %79 = phi i64 [ 0, %26 ], [ %74, %39 ]\n  %80 = phi double [ 0.000000e+00, %26 ], [ %73, %39 ]\n  %81 = icmp eq i64 %35, 0\n  br i1 %81, label %96, label %82\n\n82:                                               ; preds = %77, %82\n  %83 = phi i64 [ %93, %82 ], [ %79, %77 ]\n  %84 = phi double [ %92, %82 ], [ %80, %77 ]\n  %85 = phi i64 [ %94, %82 ], [ %35, %77 ]\n  %86 = getelementptr inbounds double, double* %28, i64 %83\n  %87 = load double, double* %86, align 8, !tbaa !9\n  %88 = trunc i64 %83 to i32\n  %89 = sitofp i32 %88 to double\n  %90 = tail call double @pow(double 0.000000e+00, double %89) #9\n  %91 = fmul double %87, %90\n  %92 = fadd double %84, %91\n  %93 = add nuw nsw i64 %83, 1\n  %94 = add i64 %85, -1\n  %95 = icmp eq i64 %94, 0\n  br i1 %95, label %96, label %82, !llvm.loop !14\n\n96:                                               ; preds = %77, %82, %14\n  %97 = phi double* [ %16, %14 ], [ %28, %82 ], [ %28, %77 ]\n  %98 = phi double [ 0.000000e+00, %14 ], [ %78, %77 ], [ %92, %82 ]\n  %99 = bitcast double* %97 to i8*\n  tail call void @_ZdlPv(i8* nonnull %99) #9\n  br label %100\n\n100:                                              ; preds = %23, %96\n  %101 = phi double [ %98, %96 ], [ 0.000000e+00, %23 ]\n  %102 = tail call double @llvm.fabs.f64(double %101) #9\n  %103 = fcmp ogt double %102, 0x3EB0C6F7A0B5ED8D\n  br i1 %103, label %104, label %241\n\n104:                                              ; preds = %100, %237\n  %105 = phi double [ %238, %237 ], [ %101, %100 ]\n  %106 = phi double [ %121, %237 ], [ 0.000000e+00, %100 ]\n  %107 = load double*, double** %2, align 8, !tbaa !3\n  %108 = load double*, double** %4, align 8, !tbaa !8\n  %109 = ptrtoint double* %107 to i64\n  %110 = ptrtoint double* %108 to i64\n  %111 = sub i64 %109, %110\n  %112 = ashr exact i64 %111, 3\n  %113 = icmp ugt i64 %112, 1\n  br i1 %113, label %191, label %114\n\n114:                                              ; preds = %191, %104\n  %115 = phi double* [ %107, %104 ], [ %207, %191 ]\n  %116 = phi double* [ %108, %104 ], [ %208, %191 ]\n  %117 = phi double [ 0.000000e+00, %104 ], [ %205, %191 ]\n  %118 = phi i64 [ %111, %104 ], [ %211, %191 ]\n  %119 = phi i64 [ %112, %104 ], [ %212, %191 ]\n  %120 = fdiv double %105, %117\n  %121 = fsub double %106, %120\n  %122 = icmp eq i64 %118, 0\n  br i1 %122, label %135, label %123\n\n123:                                              ; preds = %114\n  %124 = icmp ugt i64 %119, 1152921504606846975\n  br i1 %124, label %125, label %126\n\n125:                                              ; preds = %123\n  tail call void @_ZSt17__throw_bad_allocv() #10\n  unreachable\n\n126:                                              ; preds = %123\n  %127 = tail call noalias nonnull i8* @_Znwm(i64 %118) #11\n  %128 = bitcast i8* %127 to double*\n  %129 = load double*, double** %4, align 8, !tbaa !13\n  %130 = load double*, double** %2, align 8, !tbaa !13\n  %131 = ptrtoint double* %130 to i64\n  %132 = ptrtoint double* %129 to i64\n  %133 = sub i64 %131, %132\n  %134 = icmp eq i64 %133, 0\n  br i1 %134, label %233, label %140\n\n135:                                              ; preds = %114\n  %136 = ptrtoint double* %115 to i64\n  %137 = ptrtoint double* %116 to i64\n  %138 = sub i64 %136, %137\n  %139 = icmp eq i64 %138, 0\n  br i1 %139, label %237, label %140\n\n140:                                              ; preds = %135, %126\n  %141 = phi i64 [ %138, %135 ], [ %133, %126 ]\n  %142 = phi double* [ null, %135 ], [ %128, %126 ]\n  %143 = phi double* [ %116, %135 ], [ %129, %126 ]\n  %144 = bitcast double* %142 to i8*\n  %145 = bitcast double* %143 to i8*\n  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %144, i8* align 8 %145, i64 %141, i1 false) #9\n  %146 = ashr exact i64 %141, 3\n  %147 = call i64 @llvm.umax.i64(i64 %146, i64 1)\n  %148 = add i64 %147, -1\n  %149 = and i64 %147, 3\n  %150 = icmp ult i64 %148, 3\n  br i1 %150, label %214, label %151\n\n151:                                              ; preds = %140\n  %152 = and i64 %147, -4\n  br label %153\n\n153:                                              ; preds = %153, %151\n  %154 = phi i64 [ 0, %151 ], [ %188, %153 ]\n  %155 = phi double [ 0.000000e+00, %151 ], [ %187, %153 ]\n  %156 = phi i64 [ %152, %151 ], [ %189, %153 ]\n  %157 = getelementptr inbounds double, double* %142, i64 %154\n  %158 = load double, double* %157, align 8, !tbaa !9\n  %159 = trunc i64 %154 to i32\n  %160 = sitofp i32 %159 to double\n  %161 = tail call double @pow(double %121, double %160) #9\n  %162 = fmul double %158, %161\n  %163 = fadd double %155, %162\n  %164 = or i64 %154, 1\n  %165 = getelementptr inbounds double, double* %142, i64 %164\n  %166 = load double, double* %165, align 8, !tbaa !9\n  %167 = trunc i64 %164 to i32\n  %168 = sitofp i32 %167 to double\n  %169 = tail call double @pow(double %121, double %168) #9\n  %170 = fmul double %166, %169\n  %171 = fadd double %163, %170\n  %172 = or i64 %154, 2\n  %173 = getelementptr inbounds double, double* %142, i64 %172\n  %174 = load double, double* %173, align 8, !tbaa !9\n  %175 = trunc i64 %172 to i32\n  %176 = sitofp i32 %175 to double\n  %177 = tail call double @pow(double %121, double %176) #9\n  %178 = fmul double %174, %177\n  %179 = fadd double %171, %178\n  %180 = or i64 %154, 3\n  %181 = getelementptr inbounds double, double* %142, i64 %180\n  %182 = load double, double* %181, align 8, !tbaa !9\n  %183 = trunc i64 %180 to i32\n  %184 = sitofp i32 %183 to double\n  %185 = tail call double @pow(double %121, double %184) #9\n  %186 = fmul double %182, %185\n  %187 = fadd double %179, %186\n  %188 = add nuw nsw i64 %154, 4\n  %189 = add i64 %156, -4\n  %190 = icmp eq i64 %189, 0\n  br i1 %190, label %214, label %153, !llvm.loop !11\n\n191:                                              ; preds = %104, %191\n  %192 = phi i64 [ %206, %191 ], [ 1, %104 ]\n  %193 = phi double* [ %208, %191 ], [ %108, %104 ]\n  %194 = phi double [ %205, %191 ], [ 0.000000e+00, %104 ]\n  %195 = getelementptr inbounds double, double* %193, i64 %192\n  %196 = load double, double* %195, align 8, !tbaa !9\n  %197 = trunc i64 %192 to i32\n  %198 = add i32 %197, -1\n  %199 = sitofp i32 %198 to double\n  %200 = tail call double @pow(double %106, double %199) #9\n  %201 = fmul double %196, %200\n  %202 = trunc i64 %192 to i32\n  %203 = sitofp i32 %202 to double\n  %204 = fmul double %201, %203\n  %205 = fadd double %194, %204\n  %206 = add nuw nsw i64 %192, 1\n  %207 = load double*, double** %2, align 8, !tbaa !3\n  %208 = load double*, double** %4, align 8, !tbaa !8\n  %209 = ptrtoint double* %207 to i64\n  %210 = ptrtoint double* %208 to i64\n  %211 = sub i64 %209, %210\n  %212 = ashr exact i64 %211, 3\n  %213 = icmp ugt i64 %212, %206\n  br i1 %213, label %191, label %114, !llvm.loop !16\n\n214:                                              ; preds = %153, %140\n  %215 = phi double [ undef, %140 ], [ %187, %153 ]\n  %216 = phi i64 [ 0, %140 ], [ %188, %153 ]\n  %217 = phi double [ 0.000000e+00, %140 ], [ %187, %153 ]\n  %218 = icmp eq i64 %149, 0\n  br i1 %218, label %233, label %219\n\n219:                                              ; preds = %214, %219\n  %220 = phi i64 [ %230, %219 ], [ %216, %214 ]\n  %221 = phi double [ %229, %219 ], [ %217, %214 ]\n  %222 = phi i64 [ %231, %219 ], [ %149, %214 ]\n  %223 = getelementptr inbounds double, double* %142, i64 %220\n  %224 = load double, double* %223, align 8, !tbaa !9\n  %225 = trunc i64 %220 to i32\n  %226 = sitofp i32 %225 to double\n  %227 = tail call double @pow(double %121, double %226) #9\n  %228 = fmul double %224, %227\n  %229 = fadd double %221, %228\n  %230 = add nuw nsw i64 %220, 1\n  %231 = add i64 %222, -1\n  %232 = icmp eq i64 %231, 0\n  br i1 %232, label %233, label %219, !llvm.loop !17\n\n233:                                              ; preds = %214, %219, %126\n  %234 = phi double* [ %128, %126 ], [ %142, %219 ], [ %142, %214 ]\n  %235 = phi double [ 0.000000e+00, %126 ], [ %215, %214 ], [ %229, %219 ]\n  %236 = bitcast double* %234 to i8*\n  tail call void @_ZdlPv(i8* nonnull %236) #9\n  br label %237\n\n237:                                              ; preds = %135, %233\n  %238 = phi double [ %235, %233 ], [ 0.000000e+00, %135 ]\n  %239 = tail call double @llvm.fabs.f64(double %238) #9\n  %240 = fcmp ogt double %239, 0x3EB0C6F7A0B5ED8D\n  br i1 %240, label %104, label %241, !llvm.loop !18\n\n241:                                              ; preds = %237, %100\n  %242 = phi double [ 0.000000e+00, %100 ], [ %121, %237 ]\n  ret double %242\n}\n\ndeclare dso_local i32 @__gxx_personality_v0(...)\n\n; Function Attrs: mustprogress nofree nounwind willreturn\ndeclare dso_local double @pow(double, double) local_unnamed_addr #2\n\n; Function Attrs: mustprogress nofree nosync nounwind readnone speculatable willreturn\ndeclare double @llvm.fabs.f64(double) #3\n\n; Function Attrs: noreturn\ndeclare dso_local void @_ZSt17__throw_bad_allocv() local_unnamed_addr #4\n\n; Function Attrs: nobuiltin allocsize(0)\ndeclare dso_local nonnull i8* @_Znwm(i64) local_unnamed_addr #5\n\n; Function Attrs: argmemonly mustprogress nofree nounwind willreturn\ndeclare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #6\n\n; Function Attrs: nobuiltin nounwind\ndeclare dso_local void @_ZdlPv(i8*) local_unnamed_addr #7\n\n; Function Attrs: nofree nosync nounwind readnone speculatable willreturn\ndeclare i64 @llvm.umax.i64(i64, i64) #8\n\nattributes #0 = { mustprogress nofree nounwind uwtable \"frame-pointer\"=\"none\" \"min-legal-vector-width\"=\"0\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #1 = { uwtable \"frame-pointer\"=\"none\" \"min-legal-vector-width\"=\"0\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #2 = { mustprogress nofree nounwind willreturn \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #3 = { mustprogress nofree nosync nounwind readnone speculatable willreturn }\nattributes #4 = { noreturn \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #5 = { nobuiltin allocsize(0) \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #6 = { argmemonly mustprogress nofree nounwind willreturn }\nattributes #7 = { nobuiltin nounwind \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #8 = { nofree nosync nounwind readnone speculatable willreturn }\nattributes #9 = { nounwind }\nattributes #10 = { noreturn }\nattributes #11 = { allocsize(0) }\n\n!llvm.module.flags = !{!0, !1}\n!llvm.ident = !{!2}\n\n!0 = !{i32 1, !\"wchar_size\", i32 4}\n!1 = !{i32 7, !\"uwtable\", i32 1}\n!2 = !{!\"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)\"}\n!3 = !{!4, !5, i64 8}\n!4 = !{!\"_ZTSNSt12_Vector_baseIdSaIdEE17_Vector_impl_dataE\", !5, i64 0, !5, i64 8, !5, i64 16}\n!5 = !{!\"any pointer\", !6, i64 0}\n!6 = !{!\"omnipotent char\", !7, i64 0}\n!7 = !{!\"Simple C++ TBAA\"}\n!8 = !{!4, !5, i64 0}\n!9 = !{!10, !10, i64 0}\n!10 = !{!\"double\", !6, i64 0}\n!11 = distinct !{!11, !12}\n!12 = !{!\"llvm.loop.mustprogress\"}\n!13 = !{!5, !5, i64 0}\n!14 = distinct !{!14, !15}\n!15 = !{!\"llvm.loop.unroll.disable\"}\n!16 = distinct !{!16, !12}\n!17 = distinct !{!17, !15}\n!18 = distinct !{!18, !12}\n", "target": "This is the targeted source code:\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\ndouble poly(vector<double> xs, double x){\n    /* \n    Evaluates polynomial with coefficients xs at point x. return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n \n    */\n    double sum=0;\n    int i;\n    for (i=0;i<xs.size();i++)\n    {\n        sum+=xs[i]*pow(x,i);\n    }\n    return sum;\n}\n\ndouble find_zero(vector<double> xs){\n    /*\n    xs are coefficients of a polynomial. find_zero find x such that poly(x) = 0. find_zero returns only only zero point, even if there are many. \n    Moreover, find_zero only takes list xs having even number of coefficients and largest non zero coefficient as it guarantees a solution.\n    >>> round(find_zero([1, 2]), 2) #f(x) = 1 + 2x \n    -0.5 \n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3 \n    1.0\n    */\n\n    double ans=0;\n    double value;\n    value=poly(xs,ans);\n    while (abs(value)>1e-6)\n    {\n        double driv=0;\n        for (int i=1;i<xs.size();i++)\n        {\n            driv+=xs[i]*pow(ans,i-1)*i;\n        }\n        ans=ans-value/driv;\n        value=poly(xs,ans);\n    }\n    return ans;\n\n}\n"}
{"input": "Convert this to C++:\n; ModuleID = '../../Human_xBenchmarks_164/CPP_33/CPP_33.cpp'\nsource_filename = \"../../Human_xBenchmarks_164/CPP_33/CPP_33.cpp\"\ntarget datalayout = \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\ntarget triple = \"x86_64-unknown-linux-gnu\"\n\n%\"class.std::vector\" = type { %\"struct.std::_Vector_base\" }\n%\"struct.std::_Vector_base\" = type { %\"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl\" }\n%\"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl\" = type { %\"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl_data\" }\n%\"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl_data\" = type { i32*, i32*, i32* }\n%\"struct.__gnu_cxx::__ops::_Iter_less_iter\" = type { i8 }\n\n$_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEElNS0_5__ops15_Iter_less_iterEEvT_S9_T0_T1_ = comdat any\n\n$_ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_ = comdat any\n\n$_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEENS0_5__ops15_Iter_less_iterEEvT_S9_RT0_ = comdat any\n\n@.str = private unnamed_addr constant [26 x i8] c\"vector::_M_realloc_insert\\00\", align 1\n\n; Function Attrs: uwtable\ndefine dso_local void @_Z10sort_thirdSt6vectorIiSaIiEE(%\"class.std::vector\"* noalias nocapture sret(%\"class.std::vector\") align 8 %0, %\"class.std::vector\"* nocapture readonly %1) local_unnamed_addr #0 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {\n  %3 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %1, i64 0, i32 0, i32 0, i32 0, i32 1\n  %4 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %1, i64 0, i32 0, i32 0, i32 0, i32 0\n  %5 = load i32*, i32** %3, align 8, !tbaa !3\n  %6 = load i32*, i32** %4, align 8, !tbaa !8\n  %7 = icmp eq i32* %5, %6\n  br i1 %7, label %92, label %8\n\n8:                                                ; preds = %2, %58\n  %9 = phi i32* [ %59, %58 ], [ %6, %2 ]\n  %10 = phi i32* [ %60, %58 ], [ %5, %2 ]\n  %11 = phi i64 [ %65, %58 ], [ 0, %2 ]\n  %12 = phi i64 [ %67, %58 ], [ 0, %2 ]\n  %13 = phi i32* [ %63, %58 ], [ null, %2 ]\n  %14 = phi i32* [ %64, %58 ], [ null, %2 ]\n  %15 = phi i32* [ %61, %58 ], [ null, %2 ]\n  %16 = getelementptr inbounds i32, i32* %9, i64 %12\n  %17 = icmp eq i32* %14, %13\n  br i1 %17, label %20, label %18\n\n18:                                               ; preds = %8\n  %19 = load i32, i32* %16, align 4, !tbaa !9\n  store i32 %19, i32* %14, align 4, !tbaa !9\n  br label %58\n\n20:                                               ; preds = %8\n  %21 = ptrtoint i32* %13 to i64\n  %22 = ptrtoint i32* %15 to i64\n  %23 = sub i64 %21, %22\n  %24 = ashr exact i64 %23, 2\n  %25 = icmp eq i64 %23, 9223372036854775804\n  br i1 %25, label %26, label %28\n\n26:                                               ; preds = %20\n  invoke void @_ZSt20__throw_length_errorPKc(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str, i64 0, i64 0)) #8\n          to label %27 unwind label %75\n\n27:                                               ; preds = %26\n  unreachable\n\n28:                                               ; preds = %20\n  %29 = icmp eq i64 %23, 0\n  %30 = select i1 %29, i64 1, i64 %24\n  %31 = add nsw i64 %30, %24\n  %32 = icmp ult i64 %31, %24\n  %33 = icmp ugt i64 %31, 2305843009213693951\n  %34 = or i1 %32, %33\n  %35 = select i1 %34, i64 2305843009213693951, i64 %31\n  %36 = icmp eq i64 %35, 0\n  br i1 %36, label %42, label %37\n\n37:                                               ; preds = %28\n  %38 = shl nuw nsw i64 %35, 2\n  %39 = invoke noalias nonnull i8* @_Znwm(i64 %38) #9\n          to label %40 unwind label %73\n\n40:                                               ; preds = %37\n  %41 = bitcast i8* %39 to i32*\n  br label %42\n\n42:                                               ; preds = %40, %28\n  %43 = phi i32* [ %41, %40 ], [ null, %28 ]\n  %44 = getelementptr inbounds i32, i32* %43, i64 %24\n  %45 = load i32, i32* %16, align 4, !tbaa !9\n  store i32 %45, i32* %44, align 4, !tbaa !9\n  %46 = icmp sgt i64 %23, 0\n  br i1 %46, label %47, label %50\n\n47:                                               ; preds = %42\n  %48 = bitcast i32* %43 to i8*\n  %49 = bitcast i32* %15 to i8*\n  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %48, i8* align 4 %49, i64 %23, i1 false) #10\n  br label %50\n\n50:                                               ; preds = %47, %42\n  %51 = icmp eq i32* %15, null\n  br i1 %51, label %54, label %52\n\n52:                                               ; preds = %50\n  %53 = bitcast i32* %15 to i8*\n  tail call void @_ZdlPv(i8* nonnull %53) #10\n  br label %54\n\n54:                                               ; preds = %52, %50\n  %55 = getelementptr inbounds i32, i32* %43, i64 %35\n  %56 = load i32*, i32** %3, align 8, !tbaa !3\n  %57 = load i32*, i32** %4, align 8, !tbaa !8\n  br label %58\n\n58:                                               ; preds = %54, %18\n  %59 = phi i32* [ %57, %54 ], [ %9, %18 ]\n  %60 = phi i32* [ %56, %54 ], [ %10, %18 ]\n  %61 = phi i32* [ %43, %54 ], [ %15, %18 ]\n  %62 = phi i32* [ %44, %54 ], [ %14, %18 ]\n  %63 = phi i32* [ %55, %54 ], [ %13, %18 ]\n  %64 = getelementptr inbounds i32, i32* %62, i64 1\n  %65 = add nuw i64 %11, 1\n  %66 = mul i64 %65, 3\n  %67 = and i64 %66, 4294967295\n  %68 = ptrtoint i32* %60 to i64\n  %69 = ptrtoint i32* %59 to i64\n  %70 = sub i64 %68, %69\n  %71 = ashr exact i64 %70, 2\n  %72 = icmp ugt i64 %71, %67\n  br i1 %72, label %8, label %78, !llvm.loop !11\n\n73:                                               ; preds = %37\n  %74 = landingpad { i8*, i32 }\n          cleanup\n  br label %226\n\n75:                                               ; preds = %26, %80, %88\n  %76 = phi i32* [ %15, %26 ], [ %61, %80 ], [ %61, %88 ]\n  %77 = landingpad { i8*, i32 }\n          cleanup\n  br label %226\n\n78:                                               ; preds = %58\n  %79 = icmp eq i32* %61, %64\n  br i1 %79, label %92, label %80\n\n80:                                               ; preds = %78\n  %81 = ptrtoint i32* %64 to i64\n  %82 = ptrtoint i32* %61 to i64\n  %83 = sub i64 %81, %82\n  %84 = ashr exact i64 %83, 2\n  %85 = tail call i64 @llvm.ctlz.i64(i64 %84, i1 true) #10, !range !13\n  %86 = shl nuw nsw i64 %85, 1\n  %87 = xor i64 %86, 126\n  invoke void @_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEElNS0_5__ops15_Iter_less_iterEEvT_S9_T0_T1_(i32* %61, i32* nonnull %64, i64 %87)\n          to label %88 unwind label %75\n\n88:                                               ; preds = %80\n  invoke void @_ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_(i32* %61, i32* nonnull %64)\n          to label %89 unwind label %75\n\n89:                                               ; preds = %88\n  %90 = load i32*, i32** %3, align 8, !tbaa !3\n  %91 = load i32*, i32** %4, align 8, !tbaa !8\n  br label %92\n\n92:                                               ; preds = %2, %89, %78\n  %93 = phi i32* [ %61, %89 ], [ %61, %78 ], [ null, %2 ]\n  %94 = phi i32* [ %91, %89 ], [ %59, %78 ], [ %5, %2 ]\n  %95 = phi i32* [ %90, %89 ], [ %60, %78 ], [ %5, %2 ]\n  %96 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0, i64 0, i32 0, i32 0, i32 0, i32 1\n  %97 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0, i64 0, i32 0, i32 0, i32 0, i32 2\n  %98 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0, i64 0, i32 0, i32 0, i32 0, i32 0\n  %99 = icmp eq i32* %95, %94\n  %100 = bitcast %\"class.std::vector\"* %0 to i8*\n  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(24) %100, i8 0, i64 24, i1 false)\n  br i1 %99, label %221, label %101\n\n101:                                              ; preds = %92, %208\n  %102 = phi i32* [ %209, %208 ], [ null, %92 ]\n  %103 = phi i32* [ %210, %208 ], [ null, %92 ]\n  %104 = phi i32* [ %211, %208 ], [ null, %92 ]\n  %105 = phi i32* [ %212, %208 ], [ null, %92 ]\n  %106 = phi i64 [ %213, %208 ], [ 0, %92 ]\n  %107 = phi i32* [ %215, %208 ], [ %94, %92 ]\n  %108 = trunc i64 %106 to i32\n  %109 = urem i32 %108, 3\n  %110 = udiv i32 %108, 3\n  %111 = icmp eq i32 %109, 0\n  br i1 %111, label %112, label %165\n\n112:                                              ; preds = %101\n  %113 = zext i32 %110 to i64\n  %114 = getelementptr inbounds i32, i32* %93, i64 %113\n  %115 = icmp eq i32* %105, %102\n  br i1 %115, label %119, label %116\n\n116:                                              ; preds = %112\n  %117 = load i32, i32* %114, align 4, !tbaa !9\n  store i32 %117, i32* %105, align 4, !tbaa !9\n  %118 = getelementptr inbounds i32, i32* %105, i64 1\n  store i32* %118, i32** %96, align 8, !tbaa !3\n  br label %208\n\n119:                                              ; preds = %112\n  %120 = ptrtoint i32* %102 to i64\n  %121 = ptrtoint i32* %103 to i64\n  %122 = sub i64 %120, %121\n  %123 = ashr exact i64 %122, 2\n  %124 = icmp eq i64 %122, 9223372036854775804\n  br i1 %124, label %125, label %127\n\n125:                                              ; preds = %119\n  invoke void @_ZSt20__throw_length_errorPKc(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str, i64 0, i64 0)) #8\n          to label %126 unwind label %158\n\n126:                                              ; preds = %125\n  unreachable\n\n127:                                              ; preds = %119\n  %128 = icmp eq i64 %122, 0\n  %129 = select i1 %128, i64 1, i64 %123\n  %130 = add nsw i64 %129, %123\n  %131 = icmp ult i64 %130, %123\n  %132 = icmp ugt i64 %130, 2305843009213693951\n  %133 = or i1 %131, %132\n  %134 = select i1 %133, i64 2305843009213693951, i64 %130\n  %135 = icmp eq i64 %134, 0\n  br i1 %135, label %141, label %136\n\n136:                                              ; preds = %127\n  %137 = shl nuw nsw i64 %134, 2\n  %138 = invoke noalias nonnull i8* @_Znwm(i64 %137) #9\n          to label %139 unwind label %156\n\n139:                                              ; preds = %136\n  %140 = bitcast i8* %138 to i32*\n  br label %141\n\n141:                                              ; preds = %139, %127\n  %142 = phi i32* [ %140, %139 ], [ null, %127 ]\n  %143 = getelementptr inbounds i32, i32* %142, i64 %123\n  %144 = load i32, i32* %114, align 4, !tbaa !9\n  store i32 %144, i32* %143, align 4, !tbaa !9\n  %145 = icmp sgt i64 %122, 0\n  br i1 %145, label %146, label %149\n\n146:                                              ; preds = %141\n  %147 = bitcast i32* %142 to i8*\n  %148 = bitcast i32* %103 to i8*\n  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %147, i8* align 4 %148, i64 %122, i1 false) #10\n  br label %149\n\n149:                                              ; preds = %146, %141\n  %150 = getelementptr inbounds i32, i32* %143, i64 1\n  %151 = icmp eq i32* %103, null\n  br i1 %151, label %154, label %152\n\n152:                                              ; preds = %149\n  %153 = bitcast i32* %103 to i8*\n  tail call void @_ZdlPv(i8* nonnull %153) #10\n  br label %154\n\n154:                                              ; preds = %152, %149\n  store i32* %142, i32** %98, align 8, !tbaa !8\n  store i32* %150, i32** %96, align 8, !tbaa !3\n  %155 = getelementptr inbounds i32, i32* %142, i64 %134\n  store i32* %155, i32** %97, align 8, !tbaa !14\n  br label %208\n\n156:                                              ; preds = %136, %188\n  %157 = landingpad { i8*, i32 }\n          cleanup\n  br label %160\n\n158:                                              ; preds = %125, %177\n  %159 = landingpad { i8*, i32 }\n          cleanup\n  br label %160\n\n160:                                              ; preds = %158, %156\n  %161 = phi { i8*, i32 } [ %157, %156 ], [ %159, %158 ]\n  %162 = icmp eq i32* %103, null\n  br i1 %162, label %226, label %163\n\n163:                                              ; preds = %160\n  %164 = bitcast i32* %103 to i8*\n  tail call void @_ZdlPv(i8* nonnull %164) #10\n  br label %226\n\n165:                                              ; preds = %101\n  %166 = getelementptr inbounds i32, i32* %107, i64 %106\n  %167 = icmp eq i32* %105, %104\n  br i1 %167, label %171, label %168\n\n168:                                              ; preds = %165\n  %169 = load i32, i32* %166, align 4, !tbaa !9\n  store i32 %169, i32* %105, align 4, !tbaa !9\n  %170 = getelementptr inbounds i32, i32* %105, i64 1\n  store i32* %170, i32** %96, align 8, !tbaa !3\n  br label %208\n\n171:                                              ; preds = %165\n  %172 = ptrtoint i32* %104 to i64\n  %173 = ptrtoint i32* %103 to i64\n  %174 = sub i64 %172, %173\n  %175 = ashr exact i64 %174, 2\n  %176 = icmp eq i64 %174, 9223372036854775804\n  br i1 %176, label %177, label %179\n\n177:                                              ; preds = %171\n  invoke void @_ZSt20__throw_length_errorPKc(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str, i64 0, i64 0)) #8\n          to label %178 unwind label %158\n\n178:                                              ; preds = %177\n  unreachable\n\n179:                                              ; preds = %171\n  %180 = icmp eq i64 %174, 0\n  %181 = select i1 %180, i64 1, i64 %175\n  %182 = add nsw i64 %181, %175\n  %183 = icmp ult i64 %182, %175\n  %184 = icmp ugt i64 %182, 2305843009213693951\n  %185 = or i1 %183, %184\n  %186 = select i1 %185, i64 2305843009213693951, i64 %182\n  %187 = icmp eq i64 %186, 0\n  br i1 %187, label %193, label %188\n\n188:                                              ; preds = %179\n  %189 = shl nuw nsw i64 %186, 2\n  %190 = invoke noalias nonnull i8* @_Znwm(i64 %189) #9\n          to label %191 unwind label %156\n\n191:                                              ; preds = %188\n  %192 = bitcast i8* %190 to i32*\n  br label %193\n\n193:                                              ; preds = %191, %179\n  %194 = phi i32* [ %192, %191 ], [ null, %179 ]\n  %195 = getelementptr inbounds i32, i32* %194, i64 %175\n  %196 = load i32, i32* %166, align 4, !tbaa !9\n  store i32 %196, i32* %195, align 4, !tbaa !9\n  %197 = icmp sgt i64 %174, 0\n  br i1 %197, label %198, label %201\n\n198:                                              ; preds = %193\n  %199 = bitcast i32* %194 to i8*\n  %200 = bitcast i32* %103 to i8*\n  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %199, i8* align 4 %200, i64 %174, i1 false) #10\n  br label %201\n\n201:                                              ; preds = %198, %193\n  %202 = getelementptr inbounds i32, i32* %195, i64 1\n  %203 = icmp eq i32* %103, null\n  br i1 %203, label %206, label %204\n\n204:                                              ; preds = %201\n  %205 = bitcast i32* %103 to i8*\n  tail call void @_ZdlPv(i8* nonnull %205) #10\n  br label %206\n\n206:                                              ; preds = %204, %201\n  store i32* %194, i32** %98, align 8, !tbaa !8\n  store i32* %202, i32** %96, align 8, !tbaa !3\n  %207 = getelementptr inbounds i32, i32* %194, i64 %186\n  store i32* %207, i32** %97, align 8, !tbaa !14\n  br label %208\n\n208:                                              ; preds = %206, %168, %154, %116\n  %209 = phi i32* [ %207, %206 ], [ %102, %168 ], [ %155, %154 ], [ %102, %116 ]\n  %210 = phi i32* [ %194, %206 ], [ %103, %168 ], [ %142, %154 ], [ %103, %116 ]\n  %211 = phi i32* [ %207, %206 ], [ %104, %168 ], [ %155, %154 ], [ %102, %116 ]\n  %212 = phi i32* [ %202, %206 ], [ %170, %168 ], [ %150, %154 ], [ %118, %116 ]\n  %213 = add nuw i64 %106, 1\n  %214 = load i32*, i32** %3, align 8, !tbaa !3\n  %215 = load i32*, i32** %4, align 8, !tbaa !8\n  %216 = ptrtoint i32* %214 to i64\n  %217 = ptrtoint i32* %215 to i64\n  %218 = sub i64 %216, %217\n  %219 = ashr exact i64 %218, 2\n  %220 = icmp ugt i64 %219, %213\n  br i1 %220, label %101, label %221, !llvm.loop !15\n\n221:                                              ; preds = %208, %92\n  %222 = icmp eq i32* %93, null\n  br i1 %222, label %225, label %223\n\n223:                                              ; preds = %221\n  %224 = bitcast i32* %93 to i8*\n  tail call void @_ZdlPv(i8* nonnull %224) #10\n  br label %225\n\n225:                                              ; preds = %221, %223\n  ret void\n\n226:                                              ; preds = %73, %75, %163, %160\n  %227 = phi i32* [ %93, %160 ], [ %93, %163 ], [ %15, %73 ], [ %76, %75 ]\n  %228 = phi { i8*, i32 } [ %161, %160 ], [ %161, %163 ], [ %74, %73 ], [ %77, %75 ]\n  %229 = icmp eq i32* %227, null\n  br i1 %229, label %232, label %230\n\n230:                                              ; preds = %226\n  %231 = bitcast i32* %227 to i8*\n  tail call void @_ZdlPv(i8* nonnull %231) #10\n  br label %232\n\n232:                                              ; preds = %226, %230\n  resume { i8*, i32 } %228\n}\n\n; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn\ndeclare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1\n\n; Function Attrs: argmemonly mustprogress nofree nounwind willreturn writeonly\ndeclare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2\n\ndeclare dso_local i32 @__gxx_personality_v0(...)\n\n; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn\ndeclare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1\n\n; Function Attrs: nobuiltin nounwind\ndeclare dso_local void @_ZdlPv(i8*) local_unnamed_addr #3\n\n; Function Attrs: noreturn\ndeclare dso_local void @_ZSt20__throw_length_errorPKc(i8*) local_unnamed_addr #4\n\n; Function Attrs: nobuiltin allocsize(0)\ndeclare dso_local nonnull i8* @_Znwm(i64) local_unnamed_addr #5\n\n; Function Attrs: argmemonly mustprogress nofree nounwind willreturn\ndeclare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #6\n\n; Function Attrs: uwtable\ndefine linkonce_odr dso_local void @_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEElNS0_5__ops15_Iter_less_iterEEvT_S9_T0_T1_(i32* %0, i32* %1, i64 %2) local_unnamed_addr #0 comdat {\n  %4 = alloca %\"struct.__gnu_cxx::__ops::_Iter_less_iter\", align 1\n  %5 = ptrtoint i32* %0 to i64\n  %6 = getelementptr inbounds i32, i32* %0, i64 1\n  %7 = ptrtoint i32* %1 to i64\n  %8 = sub i64 %7, %5\n  %9 = icmp sgt i64 %8, 64\n  br i1 %9, label %10, label %123\n\n10:                                               ; preds = %3, %119\n  %11 = phi i64 [ %121, %119 ], [ %8, %3 ]\n  %12 = phi i64 [ %76, %119 ], [ %2, %3 ]\n  %13 = phi i32* [ %107, %119 ], [ %1, %3 ]\n  %14 = icmp eq i64 %12, 0\n  br i1 %14, label %15, label %74\n\n15:                                               ; preds = %10\n  %16 = getelementptr inbounds %\"struct.__gnu_cxx::__ops::_Iter_less_iter\", %\"struct.__gnu_cxx::__ops::_Iter_less_iter\"* %4, i64 0, i32 0\n  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %16)\n  call void @_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEENS0_5__ops15_Iter_less_iterEEvT_S9_RT0_(i32* %0, i32* %13, %\"struct.__gnu_cxx::__ops::_Iter_less_iter\"* nonnull align 1 dereferenceable(1) %4)\n  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %16)\n  br label %17\n\n17:                                               ; preds = %15, %70\n  %18 = phi i32* [ %19, %70 ], [ %13, %15 ]\n  %19 = getelementptr inbounds i32, i32* %18, i64 -1\n  %20 = load i32, i32* %19, align 4, !tbaa !9\n  %21 = load i32, i32* %0, align 4, !tbaa !9\n  store i32 %21, i32* %19, align 4, !tbaa !9\n  %22 = ptrtoint i32* %19 to i64\n  %23 = sub i64 %22, %5\n  %24 = ashr exact i64 %23, 2\n  %25 = add nsw i64 %24, -1\n  %26 = sdiv i64 %25, 2\n  %27 = icmp sgt i64 %23, 8\n  br i1 %27, label %28, label %43\n\n28:                                               ; preds = %17, %28\n  %29 = phi i64 [ %38, %28 ], [ 0, %17 ]\n  %30 = shl i64 %29, 1\n  %31 = add i64 %30, 2\n  %32 = getelementptr inbounds i32, i32* %0, i64 %31\n  %33 = or i64 %30, 1\n  %34 = getelementptr inbounds i32, i32* %0, i64 %33\n  %35 = load i32, i32* %32, align 4, !tbaa !9\n  %36 = load i32, i32* %34, align 4, !tbaa !9\n  %37 = icmp slt i32 %35, %36\n  %38 = select i1 %37, i64 %33, i64 %31\n  %39 = getelementptr inbounds i32, i32* %0, i64 %38\n  %40 = load i32, i32* %39, align 4, !tbaa !9\n  %41 = getelementptr inbounds i32, i32* %0, i64 %29\n  store i32 %40, i32* %41, align 4, !tbaa !9\n  %42 = icmp slt i64 %38, %26\n  br i1 %42, label %28, label %43, !llvm.loop !16\n\n43:                                               ; preds = %28, %17\n  %44 = phi i64 [ 0, %17 ], [ %38, %28 ]\n  %45 = and i64 %23, 4\n  %46 = icmp eq i64 %45, 0\n  br i1 %46, label %47, label %57\n\n47:                                               ; preds = %43\n  %48 = add nsw i64 %24, -2\n  %49 = sdiv i64 %48, 2\n  %50 = icmp eq i64 %44, %49\n  br i1 %50, label %51, label %57\n\n51:                                               ; preds = %47\n  %52 = shl i64 %44, 1\n  %53 = or i64 %52, 1\n  %54 = getelementptr inbounds i32, i32* %0, i64 %53\n  %55 = load i32, i32* %54, align 4, !tbaa !9\n  %56 = getelementptr inbounds i32, i32* %0, i64 %44\n  store i32 %55, i32* %56, align 4, !tbaa !9\n  br label %57\n\n57:                                               ; preds = %51, %47, %43\n  %58 = phi i64 [ %53, %51 ], [ %44, %47 ], [ %44, %43 ]\n  %59 = icmp sgt i64 %58, 0\n  br i1 %59, label %60, label %70\n\n60:                                               ; preds = %57, %67\n  %61 = phi i64 [ %63, %67 ], [ %58, %57 ]\n  %62 = add nsw i64 %61, -1\n  %63 = lshr i64 %62, 1\n  %64 = getelementptr inbounds i32, i32* %0, i64 %63\n  %65 = load i32, i32* %64, align 4, !tbaa !9\n  %66 = icmp slt i32 %65, %20\n  br i1 %66, label %67, label %70\n\n67:                                               ; preds = %60\n  %68 = getelementptr inbounds i32, i32* %0, i64 %61\n  store i32 %65, i32* %68, align 4, !tbaa !9\n  %69 = icmp ult i64 %62, 2\n  br i1 %69, label %70, label %60, !llvm.loop !17\n\n70:                                               ; preds = %67, %60, %57\n  %71 = phi i64 [ %58, %57 ], [ %61, %60 ], [ 0, %67 ]\n  %72 = getelementptr inbounds i32, i32* %0, i64 %71\n  store i32 %20, i32* %72, align 4, !tbaa !9\n  %73 = icmp sgt i64 %23, 4\n  br i1 %73, label %17, label %123, !llvm.loop !18\n\n74:                                               ; preds = %10\n  %75 = lshr i64 %11, 3\n  %76 = add nsw i64 %12, -1\n  %77 = getelementptr inbounds i32, i32* %0, i64 %75\n  %78 = getelementptr inbounds i32, i32* %13, i64 -1\n  %79 = load i32, i32* %6, align 4, !tbaa !9\n  %80 = load i32, i32* %77, align 4, !tbaa !9\n  %81 = icmp slt i32 %79, %80\n  %82 = load i32, i32* %78, align 4, !tbaa !9\n  br i1 %81, label %83, label %92\n\n83:                                               ; preds = %74\n  %84 = icmp slt i32 %80, %82\n  br i1 %84, label %85, label %87\n\n85:                                               ; preds = %83\n  %86 = load i32, i32* %0, align 4, !tbaa !9\n  store i32 %80, i32* %0, align 4, !tbaa !9\n  store i32 %86, i32* %77, align 4, !tbaa !9\n  br label %101\n\n87:                                               ; preds = %83\n  %88 = icmp slt i32 %79, %82\n  %89 = load i32, i32* %0, align 4, !tbaa !9\n  br i1 %88, label %90, label %91\n\n90:                                               ; preds = %87\n  store i32 %82, i32* %0, align 4, !tbaa !9\n  store i32 %89, i32* %78, align 4, !tbaa !9\n  br label %101\n\n91:                                               ; preds = %87\n  store i32 %79, i32* %0, align 4, !tbaa !9\n  store i32 %89, i32* %6, align 4, !tbaa !9\n  br label %101\n\n92:                                               ; preds = %74\n  %93 = icmp slt i32 %79, %82\n  br i1 %93, label %94, label %96\n\n94:                                               ; preds = %92\n  %95 = load i32, i32* %0, align 4, !tbaa !9\n  store i32 %79, i32* %0, align 4, !tbaa !9\n  store i32 %95, i32* %6, align 4, !tbaa !9\n  br label %101\n\n96:                                               ; preds = %92\n  %97 = icmp slt i32 %80, %82\n  %98 = load i32, i32* %0, align 4, !tbaa !9\n  br i1 %97, label %99, label %100\n\n99:                                               ; preds = %96\n  store i32 %82, i32* %0, align 4, !tbaa !9\n  store i32 %98, i32* %78, align 4, !tbaa !9\n  br label %101\n\n100:                                              ; preds = %96\n  store i32 %80, i32* %0, align 4, !tbaa !9\n  store i32 %98, i32* %77, align 4, !tbaa !9\n  br label %101\n\n101:                                              ; preds = %100, %99, %94, %91, %90, %85\n  br label %102\n\n102:                                              ; preds = %101, %118\n  %103 = phi i32* [ %110, %118 ], [ %6, %101 ]\n  %104 = phi i32* [ %113, %118 ], [ %13, %101 ]\n  %105 = load i32, i32* %0, align 4, !tbaa !9\n  br label %106\n\n106:                                              ; preds = %106, %102\n  %107 = phi i32* [ %103, %102 ], [ %110, %106 ]\n  %108 = load i32, i32* %107, align 4, !tbaa !9\n  %109 = icmp slt i32 %108, %105\n  %110 = getelementptr inbounds i32, i32* %107, i64 1\n  br i1 %109, label %106, label %111, !llvm.loop !19\n\n111:                                              ; preds = %106, %111\n  %112 = phi i32* [ %113, %111 ], [ %104, %106 ]\n  %113 = getelementptr inbounds i32, i32* %112, i64 -1\n  %114 = load i32, i32* %113, align 4, !tbaa !9\n  %115 = icmp slt i32 %105, %114\n  br i1 %115, label %111, label %116, !llvm.loop !20\n\n116:                                              ; preds = %111\n  %117 = icmp ult i32* %107, %113\n  br i1 %117, label %118, label %119\n\n118:                                              ; preds = %116\n  store i32 %114, i32* %107, align 4, !tbaa !9\n  store i32 %108, i32* %113, align 4, !tbaa !9\n  br label %102, !llvm.loop !21\n\n119:                                              ; preds = %116\n  tail call void @_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEElNS0_5__ops15_Iter_less_iterEEvT_S9_T0_T1_(i32* nonnull %107, i32* %13, i64 %76)\n  %120 = ptrtoint i32* %107 to i64\n  %121 = sub i64 %120, %5\n  %122 = icmp sgt i64 %121, 64\n  br i1 %122, label %10, label %123, !llvm.loop !22\n\n123:                                              ; preds = %119, %70, %3\n  ret void\n}\n\n; Function Attrs: uwtable\ndefine linkonce_odr dso_local void @_ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_(i32* %0, i32* %1) local_unnamed_addr #0 comdat {\n  %3 = ptrtoint i32* %1 to i64\n  %4 = ptrtoint i32* %0 to i64\n  %5 = sub i64 %3, %4\n  %6 = icmp sgt i64 %5, 64\n  br i1 %6, label %7, label %38\n\n7:                                                ; preds = %2\n  %8 = bitcast i32* %0 to i8*\n  %9 = getelementptr i32, i32* %0, i64 1\n  %10 = load i32, i32* %9, align 4, !tbaa !9\n  %11 = load i32, i32* %0, align 4, !tbaa !9\n  %12 = icmp slt i32 %10, %11\n  br i1 %12, label %13, label %15\n\n13:                                               ; preds = %7\n  %14 = load i32, i32* %0, align 4\n  store i32 %14, i32* %9, align 4\n  br label %15\n\n15:                                               ; preds = %7, %13\n  %16 = phi i32* [ %0, %13 ], [ %9, %7 ]\n  store i32 %10, i32* %16, align 4, !tbaa !9\n  %17 = getelementptr inbounds i32, i32* %0, i64 2\n  %18 = load i32, i32* %17, align 4, !tbaa !9\n  %19 = load i32, i32* %0, align 4, !tbaa !9\n  %20 = icmp slt i32 %18, %19\n  br i1 %20, label %84, label %74\n\n21:                                               ; preds = %322, %34\n  %22 = phi i32* [ %36, %34 ], [ %324, %322 ]\n  %23 = load i32, i32* %22, align 4, !tbaa !9\n  %24 = getelementptr inbounds i32, i32* %22, i64 -1\n  %25 = load i32, i32* %24, align 4, !tbaa !9\n  %26 = icmp slt i32 %23, %25\n  br i1 %26, label %27, label %34\n\n27:                                               ; preds = %21, %27\n  %28 = phi i32 [ %32, %27 ], [ %25, %21 ]\n  %29 = phi i32* [ %31, %27 ], [ %24, %21 ]\n  %30 = phi i32* [ %29, %27 ], [ %22, %21 ]\n  store i32 %28, i32* %30, align 4, !tbaa !9\n  %31 = getelementptr inbounds i32, i32* %29, i64 -1\n  %32 = load i32, i32* %31, align 4, !tbaa !9\n  %33 = icmp slt i32 %23, %32\n  br i1 %33, label %27, label %34, !llvm.loop !23\n\n34:                                               ; preds = %27, %21\n  %35 = phi i32* [ %22, %21 ], [ %29, %27 ]\n  store i32 %23, i32* %35, align 4, !tbaa !9\n  %36 = getelementptr inbounds i32, i32* %22, i64 1\n  %37 = icmp eq i32* %36, %1\n  br i1 %37, label %73, label %21, !llvm.loop !24\n\n38:                                               ; preds = %2\n  %39 = icmp eq i32* %0, %1\n  br i1 %39, label %73, label %40\n\n40:                                               ; preds = %38\n  %41 = bitcast i32* %0 to i8*\n  %42 = getelementptr inbounds i32, i32* %0, i64 1\n  %43 = icmp eq i32* %42, %1\n  br i1 %43, label %73, label %44\n\n44:                                               ; preds = %40, %69\n  %45 = phi i32* [ %71, %69 ], [ %42, %40 ]\n  %46 = phi i32* [ %45, %69 ], [ %0, %40 ]\n  %47 = load i32, i32* %45, align 4, !tbaa !9\n  %48 = load i32, i32* %0, align 4, !tbaa !9\n  %49 = icmp slt i32 %47, %48\n  br i1 %49, label %50, label %59\n\n50:                                               ; preds = %44\n  %51 = ptrtoint i32* %45 to i64\n  %52 = sub i64 %51, %4\n  %53 = icmp eq i64 %52, 0\n  br i1 %53, label %69, label %54\n\n54:                                               ; preds = %50\n  %55 = ashr exact i64 %52, 2\n  %56 = sub nsw i64 2, %55\n  %57 = getelementptr inbounds i32, i32* %46, i64 %56\n  %58 = bitcast i32* %57 to i8*\n  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* nonnull align 4 %58, i8* nonnull align 4 %41, i64 %52, i1 false) #10\n  br label %69\n\n59:                                               ; preds = %44\n  %60 = load i32, i32* %46, align 4, !tbaa !9\n  %61 = icmp slt i32 %47, %60\n  br i1 %61, label %62, label %69\n\n62:                                               ; preds = %59, %62\n  %63 = phi i32 [ %67, %62 ], [ %60, %59 ]\n  %64 = phi i32* [ %66, %62 ], [ %46, %59 ]\n  %65 = phi i32* [ %64, %62 ], [ %45, %59 ]\n  store i32 %63, i32* %65, align 4, !tbaa !9\n  %66 = getelementptr inbounds i32, i32* %64, i64 -1\n  %67 = load i32, i32* %66, align 4, !tbaa !9\n  %68 = icmp slt i32 %47, %67\n  br i1 %68, label %62, label %69, !llvm.loop !23\n\n69:                                               ; preds = %62, %59, %54, %50\n  %70 = phi i32* [ %0, %50 ], [ %0, %54 ], [ %45, %59 ], [ %64, %62 ]\n  store i32 %47, i32* %70, align 4, !tbaa !9\n  %71 = getelementptr inbounds i32, i32* %45, i64 1\n  %72 = icmp eq i32* %71, %1\n  br i1 %72, label %73, label %44, !llvm.loop !25\n\n73:                                               ; preds = %69, %34, %40, %38, %322\n  ret void\n\n74:                                               ; preds = %15\n  %75 = load i32, i32* %9, align 4, !tbaa !9\n  %76 = icmp slt i32 %18, %75\n  br i1 %76, label %77, label %88\n\n77:                                               ; preds = %74, %77\n  %78 = phi i32 [ %82, %77 ], [ %75, %74 ]\n  %79 = phi i32* [ %81, %77 ], [ %9, %74 ]\n  %80 = phi i32* [ %79, %77 ], [ %17, %74 ]\n  store i32 %78, i32* %80, align 4, !tbaa !9\n  %81 = getelementptr inbounds i32, i32* %79, i64 -1\n  %82 = load i32, i32* %81, align 4, !tbaa !9\n  %83 = icmp slt i32 %18, %82\n  br i1 %83, label %77, label %88, !llvm.loop !23\n\n84:                                               ; preds = %15\n  %85 = bitcast i32* %0 to i64*\n  %86 = bitcast i32* %9 to i64*\n  %87 = load i64, i64* %85, align 4\n  store i64 %87, i64* %86, align 4\n  br label %88\n\n88:                                               ; preds = %77, %84, %74\n  %89 = phi i32* [ %0, %84 ], [ %17, %74 ], [ %79, %77 ]\n  store i32 %18, i32* %89, align 4, !tbaa !9\n  %90 = getelementptr inbounds i32, i32* %0, i64 3\n  %91 = load i32, i32* %90, align 4, !tbaa !9\n  %92 = load i32, i32* %0, align 4, !tbaa !9\n  %93 = icmp slt i32 %91, %92\n  br i1 %93, label %104, label %94\n\n94:                                               ; preds = %88\n  %95 = load i32, i32* %17, align 4, !tbaa !9\n  %96 = icmp slt i32 %91, %95\n  br i1 %96, label %97, label %106\n\n97:                                               ; preds = %94, %97\n  %98 = phi i32 [ %102, %97 ], [ %95, %94 ]\n  %99 = phi i32* [ %101, %97 ], [ %17, %94 ]\n  %100 = phi i32* [ %99, %97 ], [ %90, %94 ]\n  store i32 %98, i32* %100, align 4, !tbaa !9\n  %101 = getelementptr inbounds i32, i32* %99, i64 -1\n  %102 = load i32, i32* %101, align 4, !tbaa !9\n  %103 = icmp slt i32 %91, %102\n  br i1 %103, label %97, label %106, !llvm.loop !23\n\n104:                                              ; preds = %88\n  %105 = bitcast i32* %9 to i8*\n  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* noundef nonnull align 4 dereferenceable(12) %105, i8* noundef nonnull align 4 dereferenceable(12) %8, i64 12, i1 false) #10\n  br label %106\n\n106:                                              ; preds = %97, %104, %94\n  %107 = phi i32* [ %0, %104 ], [ %90, %94 ], [ %99, %97 ]\n  store i32 %91, i32* %107, align 4, !tbaa !9\n  %108 = getelementptr inbounds i32, i32* %0, i64 4\n  %109 = load i32, i32* %108, align 4, !tbaa !9\n  %110 = load i32, i32* %0, align 4, !tbaa !9\n  %111 = icmp slt i32 %109, %110\n  br i1 %111, label %122, label %112\n\n112:                                              ; preds = %106\n  %113 = load i32, i32* %90, align 4, !tbaa !9\n  %114 = icmp slt i32 %109, %113\n  br i1 %114, label %115, label %124\n\n115:                                              ; preds = %112, %115\n  %116 = phi i32 [ %120, %115 ], [ %113, %112 ]\n  %117 = phi i32* [ %119, %115 ], [ %90, %112 ]\n  %118 = phi i32* [ %117, %115 ], [ %108, %112 ]\n  store i32 %116, i32* %118, align 4, !tbaa !9\n  %119 = getelementptr inbounds i32, i32* %117, i64 -1\n  %120 = load i32, i32* %119, align 4, !tbaa !9\n  %121 = icmp slt i32 %109, %120\n  br i1 %121, label %115, label %124, !llvm.loop !23\n\n122:                                              ; preds = %106\n  %123 = bitcast i32* %9 to i8*\n  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* noundef nonnull align 4 dereferenceable(16) %123, i8* noundef nonnull align 4 dereferenceable(16) %8, i64 16, i1 false) #10\n  br label %124\n\n124:                                              ; preds = %115, %122, %112\n  %125 = phi i32* [ %0, %122 ], [ %108, %112 ], [ %117, %115 ]\n  store i32 %109, i32* %125, align 4, !tbaa !9\n  %126 = getelementptr inbounds i32, i32* %0, i64 5\n  %127 = load i32, i32* %126, align 4, !tbaa !9\n  %128 = load i32, i32* %0, align 4, !tbaa !9\n  %129 = icmp slt i32 %127, %128\n  br i1 %129, label %140, label %130\n\n130:                                              ; preds = %124\n  %131 = load i32, i32* %108, align 4, !tbaa !9\n  %132 = icmp slt i32 %127, %131\n  br i1 %132, label %133, label %142\n\n133:                                              ; preds = %130, %133\n  %134 = phi i32 [ %138, %133 ], [ %131, %130 ]\n  %135 = phi i32* [ %137, %133 ], [ %108, %130 ]\n  %136 = phi i32* [ %135, %133 ], [ %126, %130 ]\n  store i32 %134, i32* %136, align 4, !tbaa !9\n  %137 = getelementptr inbounds i32, i32* %135, i64 -1\n  %138 = load i32, i32* %137, align 4, !tbaa !9\n  %139 = icmp slt i32 %127, %138\n  br i1 %139, label %133, label %142, !llvm.loop !23\n\n140:                                              ; preds = %124\n  %141 = bitcast i32* %9 to i8*\n  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* noundef nonnull align 4 dereferenceable(20) %141, i8* noundef nonnull align 4 dereferenceable(20) %8, i64 20, i1 false) #10\n  br label %142\n\n142:                                              ; preds = %133, %140, %130\n  %143 = phi i32* [ %0, %140 ], [ %126, %130 ], [ %135, %133 ]\n  store i32 %127, i32* %143, align 4, !tbaa !9\n  %144 = getelementptr inbounds i32, i32* %0, i64 6\n  %145 = load i32, i32* %144, align 4, !tbaa !9\n  %146 = load i32, i32* %0, align 4, !tbaa !9\n  %147 = icmp slt i32 %145, %146\n  br i1 %147, label %158, label %148\n\n148:                                              ; preds = %142\n  %149 = load i32, i32* %126, align 4, !tbaa !9\n  %150 = icmp slt i32 %145, %149\n  br i1 %150, label %151, label %160\n\n151:                                              ; preds = %148, %151\n  %152 = phi i32 [ %156, %151 ], [ %149, %148 ]\n  %153 = phi i32* [ %155, %151 ], [ %126, %148 ]\n  %154 = phi i32* [ %153, %151 ], [ %144, %148 ]\n  store i32 %152, i32* %154, align 4, !tbaa !9\n  %155 = getelementptr inbounds i32, i32* %153, i64 -1\n  %156 = load i32, i32* %155, align 4, !tbaa !9\n  %157 = icmp slt i32 %145, %156\n  br i1 %157, label %151, label %160, !llvm.loop !23\n\n158:                                              ; preds = %142\n  %159 = bitcast i32* %9 to i8*\n  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* noundef nonnull align 4 dereferenceable(24) %159, i8* noundef nonnull align 4 dereferenceable(24) %8, i64 24, i1 false) #10\n  br label %160\n\n160:                                              ; preds = %151, %158, %148\n  %161 = phi i32* [ %0, %158 ], [ %144, %148 ], [ %153, %151 ]\n  store i32 %145, i32* %161, align 4, !tbaa !9\n  %162 = getelementptr inbounds i32, i32* %0, i64 7\n  %163 = load i32, i32* %162, align 4, !tbaa !9\n  %164 = load i32, i32* %0, align 4, !tbaa !9\n  %165 = icmp slt i32 %163, %164\n  br i1 %165, label %176, label %166\n\n166:                                              ; preds = %160\n  %167 = load i32, i32* %144, align 4, !tbaa !9\n  %168 = icmp slt i32 %163, %167\n  br i1 %168, label %169, label %178\n\n169:                                              ; preds = %166, %169\n  %170 = phi i32 [ %174, %169 ], [ %167, %166 ]\n  %171 = phi i32* [ %173, %169 ], [ %144, %166 ]\n  %172 = phi i32* [ %171, %169 ], [ %162, %166 ]\n  store i32 %170, i32* %172, align 4, !tbaa !9\n  %173 = getelementptr inbounds i32, i32* %171, i64 -1\n  %174 = load i32, i32* %173, align 4, !tbaa !9\n  %175 = icmp slt i32 %163, %174\n  br i1 %175, label %169, label %178, !llvm.loop !23\n\n176:                                              ; preds = %160\n  %177 = bitcast i32* %9 to i8*\n  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* noundef nonnull align 4 dereferenceable(28) %177, i8* noundef nonnull align 4 dereferenceable(28) %8, i64 28, i1 false) #10\n  br label %178\n\n178:                                              ; preds = %169, %176, %166\n  %179 = phi i32* [ %0, %176 ], [ %162, %166 ], [ %171, %169 ]\n  store i32 %163, i32* %179, align 4, !tbaa !9\n  %180 = getelementptr inbounds i32, i32* %0, i64 8\n  %181 = load i32, i32* %180, align 4, !tbaa !9\n  %182 = load i32, i32* %0, align 4, !tbaa !9\n  %183 = icmp slt i32 %181, %182\n  br i1 %183, label %194, label %184\n\n184:                                              ; preds = %178\n  %185 = load i32, i32* %162, align 4, !tbaa !9\n  %186 = icmp slt i32 %181, %185\n  br i1 %186, label %187, label %196\n\n187:                                              ; preds = %184, %187\n  %188 = phi i32 [ %192, %187 ], [ %185, %184 ]\n  %189 = phi i32* [ %191, %187 ], [ %162, %184 ]\n  %190 = phi i32* [ %189, %187 ], [ %180, %184 ]\n  store i32 %188, i32* %190, align 4, !tbaa !9\n  %191 = getelementptr inbounds i32, i32* %189, i64 -1\n  %192 = load i32, i32* %191, align 4, !tbaa !9\n  %193 = icmp slt i32 %181, %192\n  br i1 %193, label %187, label %196, !llvm.loop !23\n\n194:                                              ; preds = %178\n  %195 = bitcast i32* %9 to i8*\n  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* noundef nonnull align 4 dereferenceable(32) %195, i8* noundef nonnull align 4 dereferenceable(32) %8, i64 32, i1 false) #10\n  br label %196\n\n196:                                              ; preds = %187, %194, %184\n  %197 = phi i32* [ %0, %194 ], [ %180, %184 ], [ %189, %187 ]\n  store i32 %181, i32* %197, align 4, !tbaa !9\n  %198 = getelementptr inbounds i32, i32* %0, i64 9\n  %199 = load i32, i32* %198, align 4, !tbaa !9\n  %200 = load i32, i32* %0, align 4, !tbaa !9\n  %201 = icmp slt i32 %199, %200\n  br i1 %201, label %212, label %202\n\n202:                                              ; preds = %196\n  %203 = load i32, i32* %180, align 4, !tbaa !9\n  %204 = icmp slt i32 %199, %203\n  br i1 %204, label %205, label %214\n\n205:                                              ; preds = %202, %205\n  %206 = phi i32 [ %210, %205 ], [ %203, %202 ]\n  %207 = phi i32* [ %209, %205 ], [ %180, %202 ]\n  %208 = phi i32* [ %207, %205 ], [ %198, %202 ]\n  store i32 %206, i32* %208, align 4, !tbaa !9\n  %209 = getelementptr inbounds i32, i32* %207, i64 -1\n  %210 = load i32, i32* %209, align 4, !tbaa !9\n  %211 = icmp slt i32 %199, %210\n  br i1 %211, label %205, label %214, !llvm.loop !23\n\n212:                                              ; preds = %196\n  %213 = bitcast i32* %9 to i8*\n  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* noundef nonnull align 4 dereferenceable(36) %213, i8* noundef nonnull align 4 dereferenceable(36) %8, i64 36, i1 false) #10\n  br label %214\n\n214:                                              ; preds = %205, %212, %202\n  %215 = phi i32* [ %0, %212 ], [ %198, %202 ], [ %207, %205 ]\n  store i32 %199, i32* %215, align 4, !tbaa !9\n  %216 = getelementptr inbounds i32, i32* %0, i64 10\n  %217 = load i32, i32* %216, align 4, !tbaa !9\n  %218 = load i32, i32* %0, align 4, !tbaa !9\n  %219 = icmp slt i32 %217, %218\n  br i1 %219, label %230, label %220\n\n220:                                              ; preds = %214\n  %221 = load i32, i32* %198, align 4, !tbaa !9\n  %222 = icmp slt i32 %217, %221\n  br i1 %222, label %223, label %232\n\n223:                                              ; preds = %220, %223\n  %224 = phi i32 [ %228, %223 ], [ %221, %220 ]\n  %225 = phi i32* [ %227, %223 ], [ %198, %220 ]\n  %226 = phi i32* [ %225, %223 ], [ %216, %220 ]\n  store i32 %224, i32* %226, align 4, !tbaa !9\n  %227 = getelementptr inbounds i32, i32* %225, i64 -1\n  %228 = load i32, i32* %227, align 4, !tbaa !9\n  %229 = icmp slt i32 %217, %228\n  br i1 %229, label %223, label %232, !llvm.loop !23\n\n230:                                              ; preds = %214\n  %231 = bitcast i32* %9 to i8*\n  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* noundef nonnull align 4 dereferenceable(40) %231, i8* noundef nonnull align 4 dereferenceable(40) %8, i64 40, i1 false) #10\n  br label %232\n\n232:                                              ; preds = %223, %230, %220\n  %233 = phi i32* [ %0, %230 ], [ %216, %220 ], [ %225, %223 ]\n  store i32 %217, i32* %233, align 4, !tbaa !9\n  %234 = getelementptr inbounds i32, i32* %0, i64 11\n  %235 = load i32, i32* %234, align 4, !tbaa !9\n  %236 = load i32, i32* %0, align 4, !tbaa !9\n  %237 = icmp slt i32 %235, %236\n  br i1 %237, label %248, label %238\n\n238:                                              ; preds = %232\n  %239 = load i32, i32* %216, align 4, !tbaa !9\n  %240 = icmp slt i32 %235, %239\n  br i1 %240, label %241, label %250\n\n241:                                              ; preds = %238, %241\n  %242 = phi i32 [ %246, %241 ], [ %239, %238 ]\n  %243 = phi i32* [ %245, %241 ], [ %216, %238 ]\n  %244 = phi i32* [ %243, %241 ], [ %234, %238 ]\n  store i32 %242, i32* %244, align 4, !tbaa !9\n  %245 = getelementptr inbounds i32, i32* %243, i64 -1\n  %246 = load i32, i32* %245, align 4, !tbaa !9\n  %247 = icmp slt i32 %235, %246\n  br i1 %247, label %241, label %250, !llvm.loop !23\n\n248:                                              ; preds = %232\n  %249 = bitcast i32* %9 to i8*\n  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* noundef nonnull align 4 dereferenceable(44) %249, i8* noundef nonnull align 4 dereferenceable(44) %8, i64 44, i1 false) #10\n  br label %250\n\n250:                                              ; preds = %241, %248, %238\n  %251 = phi i32* [ %0, %248 ], [ %234, %238 ], [ %243, %241 ]\n  store i32 %235, i32* %251, align 4, !tbaa !9\n  %252 = getelementptr inbounds i32, i32* %0, i64 12\n  %253 = load i32, i32* %252, align 4, !tbaa !9\n  %254 = load i32, i32* %0, align 4, !tbaa !9\n  %255 = icmp slt i32 %253, %254\n  br i1 %255, label %266, label %256\n\n256:                                              ; preds = %250\n  %257 = load i32, i32* %234, align 4, !tbaa !9\n  %258 = icmp slt i32 %253, %257\n  br i1 %258, label %259, label %268\n\n259:                                              ; preds = %256, %259\n  %260 = phi i32 [ %264, %259 ], [ %257, %256 ]\n  %261 = phi i32* [ %263, %259 ], [ %234, %256 ]\n  %262 = phi i32* [ %261, %259 ], [ %252, %256 ]\n  store i32 %260, i32* %262, align 4, !tbaa !9\n  %263 = getelementptr inbounds i32, i32* %261, i64 -1\n  %264 = load i32, i32* %263, align 4, !tbaa !9\n  %265 = icmp slt i32 %253, %264\n  br i1 %265, label %259, label %268, !llvm.loop !23\n\n266:                                              ; preds = %250\n  %267 = bitcast i32* %9 to i8*\n  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* noundef nonnull align 4 dereferenceable(48) %267, i8* noundef nonnull align 4 dereferenceable(48) %8, i64 48, i1 false) #10\n  br label %268\n\n268:                                              ; preds = %259, %266, %256\n  %269 = phi i32* [ %0, %266 ], [ %252, %256 ], [ %261, %259 ]\n  store i32 %253, i32* %269, align 4, !tbaa !9\n  %270 = getelementptr inbounds i32, i32* %0, i64 13\n  %271 = load i32, i32* %270, align 4, !tbaa !9\n  %272 = load i32, i32* %0, align 4, !tbaa !9\n  %273 = icmp slt i32 %271, %272\n  br i1 %273, label %284, label %274\n\n274:                                              ; preds = %268\n  %275 = load i32, i32* %252, align 4, !tbaa !9\n  %276 = icmp slt i32 %271, %275\n  br i1 %276, label %277, label %286\n\n277:                                              ; preds = %274, %277\n  %278 = phi i32 [ %282, %277 ], [ %275, %274 ]\n  %279 = phi i32* [ %281, %277 ], [ %252, %274 ]\n  %280 = phi i32* [ %279, %277 ], [ %270, %274 ]\n  store i32 %278, i32* %280, align 4, !tbaa !9\n  %281 = getelementptr inbounds i32, i32* %279, i64 -1\n  %282 = load i32, i32* %281, align 4, !tbaa !9\n  %283 = icmp slt i32 %271, %282\n  br i1 %283, label %277, label %286, !llvm.loop !23\n\n284:                                              ; preds = %268\n  %285 = bitcast i32* %9 to i8*\n  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* noundef nonnull align 4 dereferenceable(52) %285, i8* noundef nonnull align 4 dereferenceable(52) %8, i64 52, i1 false) #10\n  br label %286\n\n286:                                              ; preds = %277, %284, %274\n  %287 = phi i32* [ %0, %284 ], [ %270, %274 ], [ %279, %277 ]\n  store i32 %271, i32* %287, align 4, !tbaa !9\n  %288 = getelementptr inbounds i32, i32* %0, i64 14\n  %289 = load i32, i32* %288, align 4, !tbaa !9\n  %290 = load i32, i32* %0, align 4, !tbaa !9\n  %291 = icmp slt i32 %289, %290\n  br i1 %291, label %302, label %292\n\n292:                                              ; preds = %286\n  %293 = load i32, i32* %270, align 4, !tbaa !9\n  %294 = icmp slt i32 %289, %293\n  br i1 %294, label %295, label %304\n\n295:                                              ; preds = %292, %295\n  %296 = phi i32 [ %300, %295 ], [ %293, %292 ]\n  %297 = phi i32* [ %299, %295 ], [ %270, %292 ]\n  %298 = phi i32* [ %297, %295 ], [ %288, %292 ]\n  store i32 %296, i32* %298, align 4, !tbaa !9\n  %299 = getelementptr inbounds i32, i32* %297, i64 -1\n  %300 = load i32, i32* %299, align 4, !tbaa !9\n  %301 = icmp slt i32 %289, %300\n  br i1 %301, label %295, label %304, !llvm.loop !23\n\n302:                                              ; preds = %286\n  %303 = bitcast i32* %9 to i8*\n  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* noundef nonnull align 4 dereferenceable(56) %303, i8* noundef nonnull align 4 dereferenceable(56) %8, i64 56, i1 false) #10\n  br label %304\n\n304:                                              ; preds = %295, %302, %292\n  %305 = phi i32* [ %0, %302 ], [ %288, %292 ], [ %297, %295 ]\n  store i32 %289, i32* %305, align 4, !tbaa !9\n  %306 = getelementptr inbounds i32, i32* %0, i64 15\n  %307 = load i32, i32* %306, align 4, !tbaa !9\n  %308 = load i32, i32* %0, align 4, !tbaa !9\n  %309 = icmp slt i32 %307, %308\n  br i1 %309, label %320, label %310\n\n310:                                              ; preds = %304\n  %311 = load i32, i32* %288, align 4, !tbaa !9\n  %312 = icmp slt i32 %307, %311\n  br i1 %312, label %313, label %322\n\n313:                                              ; preds = %310, %313\n  %314 = phi i32 [ %318, %313 ], [ %311, %310 ]\n  %315 = phi i32* [ %317, %313 ], [ %288, %310 ]\n  %316 = phi i32* [ %315, %313 ], [ %306, %310 ]\n  store i32 %314, i32* %316, align 4, !tbaa !9\n  %317 = getelementptr inbounds i32, i32* %315, i64 -1\n  %318 = load i32, i32* %317, align 4, !tbaa !9\n  %319 = icmp slt i32 %307, %318\n  br i1 %319, label %313, label %322, !llvm.loop !23\n\n320:                                              ; preds = %304\n  %321 = bitcast i32* %9 to i8*\n  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* noundef nonnull align 4 dereferenceable(60) %321, i8* noundef nonnull align 4 dereferenceable(60) %8, i64 60, i1 false) #10\n  br label %322\n\n322:                                              ; preds = %313, %320, %310\n  %323 = phi i32* [ %0, %320 ], [ %306, %310 ], [ %315, %313 ]\n  store i32 %307, i32* %323, align 4, !tbaa !9\n  %324 = getelementptr inbounds i32, i32* %0, i64 16\n  %325 = icmp eq i32* %324, %1\n  br i1 %325, label %73, label %21\n}\n\n; Function Attrs: uwtable\ndefine linkonce_odr dso_local void @_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEENS0_5__ops15_Iter_less_iterEEvT_S9_RT0_(i32* %0, i32* %1, %\"struct.__gnu_cxx::__ops::_Iter_less_iter\"* nonnull align 1 dereferenceable(1) %2) local_unnamed_addr #0 comdat {\n  %4 = ptrtoint i32* %1 to i64\n  %5 = ptrtoint i32* %0 to i64\n  %6 = sub i64 %4, %5\n  %7 = ashr exact i64 %6, 2\n  %8 = icmp slt i64 %6, 8\n  br i1 %8, label %100, label %9\n\n9:                                                ; preds = %3\n  %10 = add nsw i64 %7, -2\n  %11 = lshr i64 %10, 1\n  %12 = add nsw i64 %7, -1\n  %13 = sdiv i64 %12, 2\n  %14 = and i64 %6, 4\n  %15 = icmp eq i64 %14, 0\n  br i1 %15, label %16, label %20\n\n16:                                               ; preds = %9\n  %17 = or i64 %10, 1\n  %18 = getelementptr inbounds i32, i32* %0, i64 %17\n  %19 = getelementptr inbounds i32, i32* %0, i64 %11\n  br label %57\n\n20:                                               ; preds = %9, %52\n  %21 = phi i64 [ %56, %52 ], [ %11, %9 ]\n  %22 = getelementptr inbounds i32, i32* %0, i64 %21\n  %23 = load i32, i32* %22, align 4, !tbaa !9\n  %24 = icmp sgt i64 %13, %21\n  br i1 %24, label %25, label %52\n\n25:                                               ; preds = %20, %25\n  %26 = phi i64 [ %35, %25 ], [ %21, %20 ]\n  %27 = shl i64 %26, 1\n  %28 = add i64 %27, 2\n  %29 = getelementptr inbounds i32, i32* %0, i64 %28\n  %30 = or i64 %27, 1\n  %31 = getelementptr inbounds i32, i32* %0, i64 %30\n  %32 = load i32, i32* %29, align 4, !tbaa !9\n  %33 = load i32, i32* %31, align 4, !tbaa !9\n  %34 = icmp slt i32 %32, %33\n  %35 = select i1 %34, i64 %30, i64 %28\n  %36 = getelementptr inbounds i32, i32* %0, i64 %35\n  %37 = load i32, i32* %36, align 4, !tbaa !9\n  %38 = getelementptr inbounds i32, i32* %0, i64 %26\n  store i32 %37, i32* %38, align 4, !tbaa !9\n  %39 = icmp slt i64 %35, %13\n  br i1 %39, label %25, label %40, !llvm.loop !16\n\n40:                                               ; preds = %25\n  %41 = icmp sgt i64 %35, %21\n  br i1 %41, label %42, label %52\n\n42:                                               ; preds = %40, %49\n  %43 = phi i64 [ %45, %49 ], [ %35, %40 ]\n  %44 = add nsw i64 %43, -1\n  %45 = sdiv i64 %44, 2\n  %46 = getelementptr inbounds i32, i32* %0, i64 %45\n  %47 = load i32, i32* %46, align 4, !tbaa !9\n  %48 = icmp slt i32 %47, %23\n  br i1 %48, label %49, label %52\n\n49:                                               ; preds = %42\n  %50 = getelementptr inbounds i32, i32* %0, i64 %43\n  store i32 %47, i32* %50, align 4, !tbaa !9\n  %51 = icmp sgt i64 %45, %21\n  br i1 %51, label %42, label %52, !llvm.loop !17\n\n52:                                               ; preds = %42, %49, %20, %40\n  %53 = phi i64 [ %35, %40 ], [ %21, %20 ], [ %45, %49 ], [ %43, %42 ]\n  %54 = getelementptr inbounds i32, i32* %0, i64 %53\n  store i32 %23, i32* %54, align 4, !tbaa !9\n  %55 = icmp eq i64 %21, 0\n  %56 = add nsw i64 %21, -1\n  br i1 %55, label %100, label %20, !llvm.loop !26\n\n57:                                               ; preds = %16, %95\n  %58 = phi i64 [ %99, %95 ], [ %11, %16 ]\n  %59 = getelementptr inbounds i32, i32* %0, i64 %58\n  %60 = load i32, i32* %59, align 4, !tbaa !9\n  %61 = icmp sgt i64 %13, %58\n  br i1 %61, label %62, label %77\n\n62:                                               ; preds = %57, %62\n  %63 = phi i64 [ %72, %62 ], [ %58, %57 ]\n  %64 = shl i64 %63, 1\n  %65 = add i64 %64, 2\n  %66 = getelementptr inbounds i32, i32* %0, i64 %65\n  %67 = or i64 %64, 1\n  %68 = getelementptr inbounds i32, i32* %0, i64 %67\n  %69 = load i32, i32* %66, align 4, !tbaa !9\n  %70 = load i32, i32* %68, align 4, !tbaa !9\n  %71 = icmp slt i32 %69, %70\n  %72 = select i1 %71, i64 %67, i64 %65\n  %73 = getelementptr inbounds i32, i32* %0, i64 %72\n  %74 = load i32, i32* %73, align 4, !tbaa !9\n  %75 = getelementptr inbounds i32, i32* %0, i64 %63\n  store i32 %74, i32* %75, align 4, !tbaa !9\n  %76 = icmp slt i64 %72, %13\n  br i1 %76, label %62, label %77, !llvm.loop !16\n\n77:                                               ; preds = %62, %57\n  %78 = phi i64 [ %58, %57 ], [ %72, %62 ]\n  %79 = icmp eq i64 %78, %11\n  br i1 %79, label %80, label %82\n\n80:                                               ; preds = %77\n  %81 = load i32, i32* %18, align 4, !tbaa !9\n  store i32 %81, i32* %19, align 4, !tbaa !9\n  br label %82\n\n82:                                               ; preds = %80, %77\n  %83 = phi i64 [ %17, %80 ], [ %78, %77 ]\n  %84 = icmp sgt i64 %83, %58\n  br i1 %84, label %85, label %95\n\n85:                                               ; preds = %82, %92\n  %86 = phi i64 [ %88, %92 ], [ %83, %82 ]\n  %87 = add nsw i64 %86, -1\n  %88 = sdiv i64 %87, 2\n  %89 = getelementptr inbounds i32, i32* %0, i64 %88\n  %90 = load i32, i32* %89, align 4, !tbaa !9\n  %91 = icmp slt i32 %90, %60\n  br i1 %91, label %92, label %95\n\n92:                                               ; preds = %85\n  %93 = getelementptr inbounds i32, i32* %0, i64 %86\n  store i32 %90, i32* %93, align 4, !tbaa !9\n  %94 = icmp sgt i64 %88, %58\n  br i1 %94, label %85, label %95, !llvm.loop !17\n\n95:                                               ; preds = %85, %92, %82\n  %96 = phi i64 [ %83, %82 ], [ %88, %92 ], [ %86, %85 ]\n  %97 = getelementptr inbounds i32, i32* %0, i64 %96\n  store i32 %60, i32* %97, align 4, !tbaa !9\n  %98 = icmp eq i64 %58, 0\n  %99 = add nsw i64 %58, -1\n  br i1 %98, label %100, label %57, !llvm.loop !26\n\n100:                                              ; preds = %52, %95, %3\n  ret void\n}\n\n; Function Attrs: mustprogress nofree nosync nounwind readnone speculatable willreturn\ndeclare i64 @llvm.ctlz.i64(i64, i1 immarg) #7\n\nattributes #0 = { uwtable \"frame-pointer\"=\"none\" \"min-legal-vector-width\"=\"0\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #1 = { argmemonly mustprogress nofree nosync nounwind willreturn }\nattributes #2 = { argmemonly mustprogress nofree nounwind willreturn writeonly }\nattributes #3 = { nobuiltin nounwind \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #4 = { noreturn \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #5 = { nobuiltin allocsize(0) \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #6 = { argmemonly mustprogress nofree nounwind willreturn }\nattributes #7 = { mustprogress nofree nosync nounwind readnone speculatable willreturn }\nattributes #8 = { noreturn }\nattributes #9 = { allocsize(0) }\nattributes #10 = { nounwind }\n\n!llvm.module.flags = !{!0, !1}\n!llvm.ident = !{!2}\n\n!0 = !{i32 1, !\"wchar_size\", i32 4}\n!1 = !{i32 7, !\"uwtable\", i32 1}\n!2 = !{!\"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)\"}\n!3 = !{!4, !5, i64 8}\n!4 = !{!\"_ZTSNSt12_Vector_baseIiSaIiEE17_Vector_impl_dataE\", !5, i64 0, !5, i64 8, !5, i64 16}\n!5 = !{!\"any pointer\", !6, i64 0}\n!6 = !{!\"omnipotent char\", !7, i64 0}\n!7 = !{!\"Simple C++ TBAA\"}\n!8 = !{!4, !5, i64 0}\n!9 = !{!10, !10, i64 0}\n!10 = !{!\"int\", !6, i64 0}\n!11 = distinct !{!11, !12}\n!12 = !{!\"llvm.loop.mustprogress\"}\n!13 = !{i64 0, i64 65}\n!14 = !{!4, !5, i64 16}\n!15 = distinct !{!15, !12}\n!16 = distinct !{!16, !12}\n!17 = distinct !{!17, !12}\n!18 = distinct !{!18, !12}\n!19 = distinct !{!19, !12}\n!20 = distinct !{!20, !12}\n!21 = distinct !{!21, !12}\n!22 = distinct !{!22, !12}\n!23 = distinct !{!23, !12}\n!24 = distinct !{!24, !12}\n!25 = distinct !{!25, !12}\n!26 = distinct !{!26, !12}\n", "target": "This is the targeted source code:\n/*\nThis function takes a vector l and returns a vector l' such that\nl' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\nto the values of the corresponding indicies of l, but sorted.\n>>> sort_third({1, 2, 3})\n{1, 2, 3}\n>>> sort_third({5, 6, 3, 4, 8, 9, 2})\n{2, 6, 3, 4, 8, 9, 5}\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> sort_third(vector<int> l){\n\n    vector<int> third={};\n    int i;\n    for (i=0;i*3<l.size();i++)\n        third.push_back(l[i*3]);\n    \n    sort(third.begin(),third.end());\n\n    vector<int> out={};\n    for (i=0;i<l.size();i++)\n    {\n        if (i%3==0) {out.push_back(third[i/3]);}\n        else out.push_back(l[i]);\n    }\n    return out;\n\n}\n"}
{"input": "Convert this to C++:\n; ModuleID = '../../Human_xBenchmarks_164/CPP_34/CPP_34.cpp'\nsource_filename = \"../../Human_xBenchmarks_164/CPP_34/CPP_34.cpp\"\ntarget datalayout = \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\ntarget triple = \"x86_64-unknown-linux-gnu\"\n\n%\"class.std::vector\" = type { %\"struct.std::_Vector_base\" }\n%\"struct.std::_Vector_base\" = type { %\"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl\" }\n%\"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl\" = type { %\"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl_data\" }\n%\"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl_data\" = type { i32*, i32*, i32* }\n%\"struct.__gnu_cxx::__ops::_Iter_less_iter\" = type { i8 }\n\n$_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEElNS0_5__ops15_Iter_less_iterEEvT_S9_T0_T1_ = comdat any\n\n$_ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_ = comdat any\n\n$_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEENS0_5__ops15_Iter_less_iterEEvT_S9_RT0_ = comdat any\n\n@.str = private unnamed_addr constant [26 x i8] c\"vector::_M_realloc_insert\\00\", align 1\n\n; Function Attrs: uwtable\ndefine dso_local void @_Z6uniqueSt6vectorIiSaIiEE(%\"class.std::vector\"* noalias nocapture sret(%\"class.std::vector\") align 8 %0, %\"class.std::vector\"* nocapture readonly %1) local_unnamed_addr #0 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {\n  %3 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %1, i64 0, i32 0, i32 0, i32 0, i32 1\n  %4 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %1, i64 0, i32 0, i32 0, i32 0, i32 0\n  %5 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0, i64 0, i32 0, i32 0, i32 0, i32 0\n  %6 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0, i64 0, i32 0, i32 0, i32 0, i32 1\n  %7 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0, i64 0, i32 0, i32 0, i32 0, i32 2\n  %8 = bitcast %\"class.std::vector\"* %0 to i8*\n  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(24) %8, i8 0, i64 24, i1 false)\n  %9 = load i32*, i32** %3, align 8, !tbaa !3\n  %10 = load i32*, i32** %4, align 8, !tbaa !8\n  %11 = icmp eq i32* %9, %10\n  br i1 %11, label %156, label %23\n\n12:                                               ; preds = %142\n  %13 = icmp eq i32* %147, %146\n  br i1 %13, label %156, label %14\n\n14:                                               ; preds = %12\n  %15 = ptrtoint i32* %146 to i64\n  %16 = ptrtoint i32* %147 to i64\n  %17 = sub i64 %15, %16\n  %18 = ashr exact i64 %17, 2\n  %19 = tail call i64 @llvm.ctlz.i64(i64 %18, i1 true) #8, !range !9\n  %20 = shl nuw nsw i64 %19, 1\n  %21 = xor i64 %20, 126\n  invoke void @_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEElNS0_5__ops15_Iter_less_iterEEvT_S9_T0_T1_(i32* %147, i32* %146, i64 %21)\n          to label %22 unwind label %154\n\n22:                                               ; preds = %14\n  invoke void @_ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_(i32* %147, i32* %146)\n          to label %156 unwind label %154\n\n23:                                               ; preds = %2, %142\n  %24 = phi i32* [ %143, %142 ], [ %10, %2 ]\n  %25 = phi i32* [ %144, %142 ], [ %9, %2 ]\n  %26 = phi i32* [ %145, %142 ], [ null, %2 ]\n  %27 = phi i32* [ %146, %142 ], [ null, %2 ]\n  %28 = phi i32* [ %147, %142 ], [ null, %2 ]\n  %29 = phi i64 [ %148, %142 ], [ 0, %2 ]\n  %30 = getelementptr inbounds i32, i32* %24, i64 %29\n  %31 = ptrtoint i32* %27 to i64\n  %32 = ptrtoint i32* %28 to i64\n  %33 = sub i64 %31, %32\n  %34 = icmp sgt i64 %33, 15\n  br i1 %34, label %35, label %62\n\n35:                                               ; preds = %23\n  %36 = lshr i64 %33, 4\n  %37 = load i32, i32* %30, align 4, !tbaa !10\n  br label %38\n\n38:                                               ; preds = %55, %35\n  %39 = phi i64 [ %36, %35 ], [ %57, %55 ]\n  %40 = phi i32* [ %28, %35 ], [ %56, %55 ]\n  %41 = load i32, i32* %40, align 4, !tbaa !10\n  %42 = icmp eq i32 %41, %37\n  br i1 %42, label %94, label %43\n\n43:                                               ; preds = %38\n  %44 = getelementptr inbounds i32, i32* %40, i64 1\n  %45 = load i32, i32* %44, align 4, !tbaa !10\n  %46 = icmp eq i32 %45, %37\n  br i1 %46, label %92, label %47\n\n47:                                               ; preds = %43\n  %48 = getelementptr inbounds i32, i32* %40, i64 2\n  %49 = load i32, i32* %48, align 4, !tbaa !10\n  %50 = icmp eq i32 %49, %37\n  br i1 %50, label %90, label %51\n\n51:                                               ; preds = %47\n  %52 = getelementptr inbounds i32, i32* %40, i64 3\n  %53 = load i32, i32* %52, align 4, !tbaa !10\n  %54 = icmp eq i32 %53, %37\n  br i1 %54, label %88, label %55\n\n55:                                               ; preds = %51\n  %56 = getelementptr inbounds i32, i32* %40, i64 4\n  %57 = add nsw i64 %39, -1\n  %58 = icmp sgt i64 %39, 1\n  br i1 %58, label %38, label %59, !llvm.loop !12\n\n59:                                               ; preds = %55\n  %60 = ptrtoint i32* %56 to i64\n  %61 = sub i64 %31, %60\n  br label %62\n\n62:                                               ; preds = %59, %23\n  %63 = phi i64 [ %61, %59 ], [ %33, %23 ]\n  %64 = phi i32* [ %56, %59 ], [ %28, %23 ]\n  %65 = ashr exact i64 %63, 2\n  switch i64 %65, label %97 [\n    i64 3, label %70\n    i64 2, label %68\n    i64 1, label %66\n  ]\n\n66:                                               ; preds = %62\n  %67 = load i32, i32* %30, align 4, !tbaa !10\n  br label %83\n\n68:                                               ; preds = %62\n  %69 = load i32, i32* %30, align 4, !tbaa !10\n  br label %76\n\n70:                                               ; preds = %62\n  %71 = load i32, i32* %64, align 4, !tbaa !10\n  %72 = load i32, i32* %30, align 4, !tbaa !10\n  %73 = icmp eq i32 %71, %72\n  br i1 %73, label %94, label %74\n\n74:                                               ; preds = %70\n  %75 = getelementptr inbounds i32, i32* %64, i64 1\n  br label %76\n\n76:                                               ; preds = %74, %68\n  %77 = phi i32 [ %69, %68 ], [ %72, %74 ]\n  %78 = phi i32* [ %64, %68 ], [ %75, %74 ]\n  %79 = load i32, i32* %78, align 4, !tbaa !10\n  %80 = icmp eq i32 %79, %77\n  br i1 %80, label %94, label %81\n\n81:                                               ; preds = %76\n  %82 = getelementptr inbounds i32, i32* %78, i64 1\n  br label %83\n\n83:                                               ; preds = %81, %66\n  %84 = phi i32 [ %67, %66 ], [ %77, %81 ]\n  %85 = phi i32* [ %64, %66 ], [ %82, %81 ]\n  %86 = load i32, i32* %85, align 4, !tbaa !10\n  %87 = icmp eq i32 %86, %84\n  br i1 %87, label %94, label %97\n\n88:                                               ; preds = %51\n  %89 = getelementptr inbounds i32, i32* %40, i64 3\n  br label %94\n\n90:                                               ; preds = %47\n  %91 = getelementptr inbounds i32, i32* %40, i64 2\n  br label %94\n\n92:                                               ; preds = %43\n  %93 = getelementptr inbounds i32, i32* %40, i64 1\n  br label %94\n\n94:                                               ; preds = %38, %88, %90, %92, %83, %76, %70\n  %95 = phi i32* [ %64, %70 ], [ %78, %76 ], [ %85, %83 ], [ %89, %88 ], [ %91, %90 ], [ %93, %92 ], [ %40, %38 ]\n  %96 = icmp eq i32* %95, %27\n  br i1 %96, label %97, label %142\n\n97:                                               ; preds = %83, %62, %94\n  %98 = icmp eq i32* %27, %26\n  br i1 %98, label %102, label %99\n\n99:                                               ; preds = %97\n  %100 = load i32, i32* %30, align 4, !tbaa !10\n  store i32 %100, i32* %27, align 4, !tbaa !10\n  %101 = getelementptr inbounds i32, i32* %27, i64 1\n  store i32* %101, i32** %6, align 8, !tbaa !3\n  br label %142\n\n102:                                              ; preds = %97\n  %103 = ashr exact i64 %33, 2\n  %104 = icmp eq i64 %33, 9223372036854775804\n  br i1 %104, label %105, label %107\n\n105:                                              ; preds = %102\n  invoke void @_ZSt20__throw_length_errorPKc(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str, i64 0, i64 0)) #9\n          to label %106 unwind label %140\n\n106:                                              ; preds = %105\n  unreachable\n\n107:                                              ; preds = %102\n  %108 = icmp eq i64 %33, 0\n  %109 = select i1 %108, i64 1, i64 %103\n  %110 = add nsw i64 %109, %103\n  %111 = icmp ult i64 %110, %103\n  %112 = icmp ugt i64 %110, 2305843009213693951\n  %113 = or i1 %111, %112\n  %114 = select i1 %113, i64 2305843009213693951, i64 %110\n  %115 = icmp eq i64 %114, 0\n  br i1 %115, label %121, label %116\n\n116:                                              ; preds = %107\n  %117 = shl nuw nsw i64 %114, 2\n  %118 = invoke noalias nonnull i8* @_Znwm(i64 %117) #10\n          to label %119 unwind label %138\n\n119:                                              ; preds = %116\n  %120 = bitcast i8* %118 to i32*\n  br label %121\n\n121:                                              ; preds = %119, %107\n  %122 = phi i32* [ %120, %119 ], [ null, %107 ]\n  %123 = getelementptr inbounds i32, i32* %122, i64 %103\n  %124 = load i32, i32* %30, align 4, !tbaa !10\n  store i32 %124, i32* %123, align 4, !tbaa !10\n  %125 = icmp sgt i64 %33, 0\n  br i1 %125, label %126, label %129\n\n126:                                              ; preds = %121\n  %127 = bitcast i32* %122 to i8*\n  %128 = bitcast i32* %28 to i8*\n  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %127, i8* align 4 %128, i64 %33, i1 false) #8\n  br label %129\n\n129:                                              ; preds = %121, %126\n  %130 = getelementptr inbounds i32, i32* %123, i64 1\n  %131 = icmp eq i32* %28, null\n  br i1 %131, label %134, label %132\n\n132:                                              ; preds = %129\n  %133 = bitcast i32* %28 to i8*\n  tail call void @_ZdlPv(i8* nonnull %133) #8\n  br label %134\n\n134:                                              ; preds = %132, %129\n  store i32* %122, i32** %5, align 8, !tbaa !8\n  store i32* %130, i32** %6, align 8, !tbaa !3\n  %135 = getelementptr inbounds i32, i32* %122, i64 %114\n  store i32* %135, i32** %7, align 8, !tbaa !14\n  %136 = load i32*, i32** %3, align 8, !tbaa !3\n  %137 = load i32*, i32** %4, align 8, !tbaa !8\n  br label %142\n\n138:                                              ; preds = %116\n  %139 = landingpad { i8*, i32 }\n          cleanup\n  br label %157\n\n140:                                              ; preds = %105\n  %141 = landingpad { i8*, i32 }\n          cleanup\n  br label %157\n\n142:                                              ; preds = %134, %99, %94\n  %143 = phi i32* [ %137, %134 ], [ %24, %99 ], [ %24, %94 ]\n  %144 = phi i32* [ %136, %134 ], [ %25, %99 ], [ %25, %94 ]\n  %145 = phi i32* [ %135, %134 ], [ %26, %99 ], [ %26, %94 ]\n  %146 = phi i32* [ %130, %134 ], [ %101, %99 ], [ %27, %94 ]\n  %147 = phi i32* [ %122, %134 ], [ %28, %99 ], [ %28, %94 ]\n  %148 = add nuw i64 %29, 1\n  %149 = ptrtoint i32* %144 to i64\n  %150 = ptrtoint i32* %143 to i64\n  %151 = sub i64 %149, %150\n  %152 = ashr exact i64 %151, 2\n  %153 = icmp ugt i64 %152, %148\n  br i1 %153, label %23, label %12, !llvm.loop !15\n\n154:                                              ; preds = %22, %14\n  %155 = landingpad { i8*, i32 }\n          cleanup\n  br label %157\n\n156:                                              ; preds = %2, %12, %22\n  ret void\n\n157:                                              ; preds = %138, %140, %154\n  %158 = phi i32* [ %147, %154 ], [ %28, %138 ], [ %28, %140 ]\n  %159 = phi { i8*, i32 } [ %155, %154 ], [ %139, %138 ], [ %141, %140 ]\n  %160 = icmp eq i32* %158, null\n  br i1 %160, label %163, label %161\n\n161:                                              ; preds = %157\n  %162 = bitcast i32* %158 to i8*\n  tail call void @_ZdlPv(i8* nonnull %162) #8\n  br label %163\n\n163:                                              ; preds = %157, %161\n  resume { i8*, i32 } %159\n}\n\n; Function Attrs: argmemonly mustprogress nofree nounwind willreturn writeonly\ndeclare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1\n\n; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn\ndeclare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2\n\ndeclare dso_local i32 @__gxx_personality_v0(...)\n\n; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn\ndeclare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2\n\n; Function Attrs: nobuiltin nounwind\ndeclare dso_local void @_ZdlPv(i8*) local_unnamed_addr #3\n\n; Function Attrs: noreturn\ndeclare dso_local void @_ZSt20__throw_length_errorPKc(i8*) local_unnamed_addr #4\n\n; Function Attrs: nobuiltin allocsize(0)\ndeclare dso_local nonnull i8* @_Znwm(i64) local_unnamed_addr #5\n\n; Function Attrs: argmemonly mustprogress nofree nounwind willreturn\ndeclare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #6\n\n; Function Attrs: uwtable\ndefine linkonce_odr dso_local void @_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEElNS0_5__ops15_Iter_less_iterEEvT_S9_T0_T1_(i32* %0, i32* %1, i64 %2) local_unnamed_addr #0 comdat {\n  %4 = alloca %\"struct.__gnu_cxx::__ops::_Iter_less_iter\", align 1\n  %5 = ptrtoint i32* %0 to i64\n  %6 = getelementptr inbounds i32, i32* %0, i64 1\n  %7 = ptrtoint i32* %1 to i64\n  %8 = sub i64 %7, %5\n  %9 = icmp sgt i64 %8, 64\n  br i1 %9, label %10, label %123\n\n10:                                               ; preds = %3, %119\n  %11 = phi i64 [ %121, %119 ], [ %8, %3 ]\n  %12 = phi i64 [ %76, %119 ], [ %2, %3 ]\n  %13 = phi i32* [ %107, %119 ], [ %1, %3 ]\n  %14 = icmp eq i64 %12, 0\n  br i1 %14, label %15, label %74\n\n15:                                               ; preds = %10\n  %16 = getelementptr inbounds %\"struct.__gnu_cxx::__ops::_Iter_less_iter\", %\"struct.__gnu_cxx::__ops::_Iter_less_iter\"* %4, i64 0, i32 0\n  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %16)\n  call void @_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEENS0_5__ops15_Iter_less_iterEEvT_S9_RT0_(i32* %0, i32* %13, %\"struct.__gnu_cxx::__ops::_Iter_less_iter\"* nonnull align 1 dereferenceable(1) %4)\n  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %16)\n  br label %17\n\n17:                                               ; preds = %15, %70\n  %18 = phi i32* [ %19, %70 ], [ %13, %15 ]\n  %19 = getelementptr inbounds i32, i32* %18, i64 -1\n  %20 = load i32, i32* %19, align 4, !tbaa !10\n  %21 = load i32, i32* %0, align 4, !tbaa !10\n  store i32 %21, i32* %19, align 4, !tbaa !10\n  %22 = ptrtoint i32* %19 to i64\n  %23 = sub i64 %22, %5\n  %24 = ashr exact i64 %23, 2\n  %25 = add nsw i64 %24, -1\n  %26 = sdiv i64 %25, 2\n  %27 = icmp sgt i64 %23, 8\n  br i1 %27, label %28, label %43\n\n28:                                               ; preds = %17, %28\n  %29 = phi i64 [ %38, %28 ], [ 0, %17 ]\n  %30 = shl i64 %29, 1\n  %31 = add i64 %30, 2\n  %32 = getelementptr inbounds i32, i32* %0, i64 %31\n  %33 = or i64 %30, 1\n  %34 = getelementptr inbounds i32, i32* %0, i64 %33\n  %35 = load i32, i32* %32, align 4, !tbaa !10\n  %36 = load i32, i32* %34, align 4, !tbaa !10\n  %37 = icmp slt i32 %35, %36\n  %38 = select i1 %37, i64 %33, i64 %31\n  %39 = getelementptr inbounds i32, i32* %0, i64 %38\n  %40 = load i32, i32* %39, align 4, !tbaa !10\n  %41 = getelementptr inbounds i32, i32* %0, i64 %29\n  store i32 %40, i32* %41, align 4, !tbaa !10\n  %42 = icmp slt i64 %38, %26\n  br i1 %42, label %28, label %43, !llvm.loop !16\n\n43:                                               ; preds = %28, %17\n  %44 = phi i64 [ 0, %17 ], [ %38, %28 ]\n  %45 = and i64 %23, 4\n  %46 = icmp eq i64 %45, 0\n  br i1 %46, label %47, label %57\n\n47:                                               ; preds = %43\n  %48 = add nsw i64 %24, -2\n  %49 = sdiv i64 %48, 2\n  %50 = icmp eq i64 %44, %49\n  br i1 %50, label %51, label %57\n\n51:                                               ; preds = %47\n  %52 = shl i64 %44, 1\n  %53 = or i64 %52, 1\n  %54 = getelementptr inbounds i32, i32* %0, i64 %53\n  %55 = load i32, i32* %54, align 4, !tbaa !10\n  %56 = getelementptr inbounds i32, i32* %0, i64 %44\n  store i32 %55, i32* %56, align 4, !tbaa !10\n  br label %57\n\n57:                                               ; preds = %51, %47, %43\n  %58 = phi i64 [ %53, %51 ], [ %44, %47 ], [ %44, %43 ]\n  %59 = icmp sgt i64 %58, 0\n  br i1 %59, label %60, label %70\n\n60:                                               ; preds = %57, %67\n  %61 = phi i64 [ %63, %67 ], [ %58, %57 ]\n  %62 = add nsw i64 %61, -1\n  %63 = lshr i64 %62, 1\n  %64 = getelementptr inbounds i32, i32* %0, i64 %63\n  %65 = load i32, i32* %64, align 4, !tbaa !10\n  %66 = icmp slt i32 %65, %20\n  br i1 %66, label %67, label %70\n\n67:                                               ; preds = %60\n  %68 = getelementptr inbounds i32, i32* %0, i64 %61\n  store i32 %65, i32* %68, align 4, !tbaa !10\n  %69 = icmp ult i64 %62, 2\n  br i1 %69, label %70, label %60, !llvm.loop !17\n\n70:                                               ; preds = %67, %60, %57\n  %71 = phi i64 [ %58, %57 ], [ %61, %60 ], [ 0, %67 ]\n  %72 = getelementptr inbounds i32, i32* %0, i64 %71\n  store i32 %20, i32* %72, align 4, !tbaa !10\n  %73 = icmp sgt i64 %23, 4\n  br i1 %73, label %17, label %123, !llvm.loop !18\n\n74:                                               ; preds = %10\n  %75 = lshr i64 %11, 3\n  %76 = add nsw i64 %12, -1\n  %77 = getelementptr inbounds i32, i32* %0, i64 %75\n  %78 = getelementptr inbounds i32, i32* %13, i64 -1\n  %79 = load i32, i32* %6, align 4, !tbaa !10\n  %80 = load i32, i32* %77, align 4, !tbaa !10\n  %81 = icmp slt i32 %79, %80\n  %82 = load i32, i32* %78, align 4, !tbaa !10\n  br i1 %81, label %83, label %92\n\n83:                                               ; preds = %74\n  %84 = icmp slt i32 %80, %82\n  br i1 %84, label %85, label %87\n\n85:                                               ; preds = %83\n  %86 = load i32, i32* %0, align 4, !tbaa !10\n  store i32 %80, i32* %0, align 4, !tbaa !10\n  store i32 %86, i32* %77, align 4, !tbaa !10\n  br label %101\n\n87:                                               ; preds = %83\n  %88 = icmp slt i32 %79, %82\n  %89 = load i32, i32* %0, align 4, !tbaa !10\n  br i1 %88, label %90, label %91\n\n90:                                               ; preds = %87\n  store i32 %82, i32* %0, align 4, !tbaa !10\n  store i32 %89, i32* %78, align 4, !tbaa !10\n  br label %101\n\n91:                                               ; preds = %87\n  store i32 %79, i32* %0, align 4, !tbaa !10\n  store i32 %89, i32* %6, align 4, !tbaa !10\n  br label %101\n\n92:                                               ; preds = %74\n  %93 = icmp slt i32 %79, %82\n  br i1 %93, label %94, label %96\n\n94:                                               ; preds = %92\n  %95 = load i32, i32* %0, align 4, !tbaa !10\n  store i32 %79, i32* %0, align 4, !tbaa !10\n  store i32 %95, i32* %6, align 4, !tbaa !10\n  br label %101\n\n96:                                               ; preds = %92\n  %97 = icmp slt i32 %80, %82\n  %98 = load i32, i32* %0, align 4, !tbaa !10\n  br i1 %97, label %99, label %100\n\n99:                                               ; preds = %96\n  store i32 %82, i32* %0, align 4, !tbaa !10\n  store i32 %98, i32* %78, align 4, !tbaa !10\n  br label %101\n\n100:                                              ; preds = %96\n  store i32 %80, i32* %0, align 4, !tbaa !10\n  store i32 %98, i32* %77, align 4, !tbaa !10\n  br label %101\n\n101:                                              ; preds = %100, %99, %94, %91, %90, %85\n  br label %102\n\n102:                                              ; preds = %101, %118\n  %103 = phi i32* [ %110, %118 ], [ %6, %101 ]\n  %104 = phi i32* [ %113, %118 ], [ %13, %101 ]\n  %105 = load i32, i32* %0, align 4, !tbaa !10\n  br label %106\n\n106:                                              ; preds = %106, %102\n  %107 = phi i32* [ %103, %102 ], [ %110, %106 ]\n  %108 = load i32, i32* %107, align 4, !tbaa !10\n  %109 = icmp slt i32 %108, %105\n  %110 = getelementptr inbounds i32, i32* %107, i64 1\n  br i1 %109, label %106, label %111, !llvm.loop !19\n\n111:                                              ; preds = %106, %111\n  %112 = phi i32* [ %113, %111 ], [ %104, %106 ]\n  %113 = getelementptr inbounds i32, i32* %112, i64 -1\n  %114 = load i32, i32* %113, align 4, !tbaa !10\n  %115 = icmp slt i32 %105, %114\n  br i1 %115, label %111, label %116, !llvm.loop !20\n\n116:                                              ; preds = %111\n  %117 = icmp ult i32* %107, %113\n  br i1 %117, label %118, label %119\n\n118:                                              ; preds = %116\n  store i32 %114, i32* %107, align 4, !tbaa !10\n  store i32 %108, i32* %113, align 4, !tbaa !10\n  br label %102, !llvm.loop !21\n\n119:                                              ; preds = %116\n  tail call void @_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEElNS0_5__ops15_Iter_less_iterEEvT_S9_T0_T1_(i32* nonnull %107, i32* %13, i64 %76)\n  %120 = ptrtoint i32* %107 to i64\n  %121 = sub i64 %120, %5\n  %122 = icmp sgt i64 %121, 64\n  br i1 %122, label %10, label %123, !llvm.loop !22\n\n123:                                              ; preds = %119, %70, %3\n  ret void\n}\n\n; Function Attrs: uwtable\ndefine linkonce_odr dso_local void @_ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_(i32* %0, i32* %1) local_unnamed_addr #0 comdat {\n  %3 = ptrtoint i32* %1 to i64\n  %4 = ptrtoint i32* %0 to i64\n  %5 = sub i64 %3, %4\n  %6 = icmp sgt i64 %5, 64\n  br i1 %6, label %7, label %38\n\n7:                                                ; preds = %2\n  %8 = bitcast i32* %0 to i8*\n  %9 = getelementptr i32, i32* %0, i64 1\n  %10 = load i32, i32* %9, align 4, !tbaa !10\n  %11 = load i32, i32* %0, align 4, !tbaa !10\n  %12 = icmp slt i32 %10, %11\n  br i1 %12, label %13, label %15\n\n13:                                               ; preds = %7\n  %14 = load i32, i32* %0, align 4\n  store i32 %14, i32* %9, align 4\n  br label %15\n\n15:                                               ; preds = %7, %13\n  %16 = phi i32* [ %0, %13 ], [ %9, %7 ]\n  store i32 %10, i32* %16, align 4, !tbaa !10\n  %17 = getelementptr inbounds i32, i32* %0, i64 2\n  %18 = load i32, i32* %17, align 4, !tbaa !10\n  %19 = load i32, i32* %0, align 4, !tbaa !10\n  %20 = icmp slt i32 %18, %19\n  br i1 %20, label %84, label %74\n\n21:                                               ; preds = %322, %34\n  %22 = phi i32* [ %36, %34 ], [ %324, %322 ]\n  %23 = load i32, i32* %22, align 4, !tbaa !10\n  %24 = getelementptr inbounds i32, i32* %22, i64 -1\n  %25 = load i32, i32* %24, align 4, !tbaa !10\n  %26 = icmp slt i32 %23, %25\n  br i1 %26, label %27, label %34\n\n27:                                               ; preds = %21, %27\n  %28 = phi i32 [ %32, %27 ], [ %25, %21 ]\n  %29 = phi i32* [ %31, %27 ], [ %24, %21 ]\n  %30 = phi i32* [ %29, %27 ], [ %22, %21 ]\n  store i32 %28, i32* %30, align 4, !tbaa !10\n  %31 = getelementptr inbounds i32, i32* %29, i64 -1\n  %32 = load i32, i32* %31, align 4, !tbaa !10\n  %33 = icmp slt i32 %23, %32\n  br i1 %33, label %27, label %34, !llvm.loop !23\n\n34:                                               ; preds = %27, %21\n  %35 = phi i32* [ %22, %21 ], [ %29, %27 ]\n  store i32 %23, i32* %35, align 4, !tbaa !10\n  %36 = getelementptr inbounds i32, i32* %22, i64 1\n  %37 = icmp eq i32* %36, %1\n  br i1 %37, label %73, label %21, !llvm.loop !24\n\n38:                                               ; preds = %2\n  %39 = icmp eq i32* %0, %1\n  br i1 %39, label %73, label %40\n\n40:                                               ; preds = %38\n  %41 = bitcast i32* %0 to i8*\n  %42 = getelementptr inbounds i32, i32* %0, i64 1\n  %43 = icmp eq i32* %42, %1\n  br i1 %43, label %73, label %44\n\n44:                                               ; preds = %40, %69\n  %45 = phi i32* [ %71, %69 ], [ %42, %40 ]\n  %46 = phi i32* [ %45, %69 ], [ %0, %40 ]\n  %47 = load i32, i32* %45, align 4, !tbaa !10\n  %48 = load i32, i32* %0, align 4, !tbaa !10\n  %49 = icmp slt i32 %47, %48\n  br i1 %49, label %50, label %59\n\n50:                                               ; preds = %44\n  %51 = ptrtoint i32* %45 to i64\n  %52 = sub i64 %51, %4\n  %53 = icmp eq i64 %52, 0\n  br i1 %53, label %69, label %54\n\n54:                                               ; preds = %50\n  %55 = ashr exact i64 %52, 2\n  %56 = sub nsw i64 2, %55\n  %57 = getelementptr inbounds i32, i32* %46, i64 %56\n  %58 = bitcast i32* %57 to i8*\n  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* nonnull align 4 %58, i8* nonnull align 4 %41, i64 %52, i1 false) #8\n  br label %69\n\n59:                                               ; preds = %44\n  %60 = load i32, i32* %46, align 4, !tbaa !10\n  %61 = icmp slt i32 %47, %60\n  br i1 %61, label %62, label %69\n\n62:                                               ; preds = %59, %62\n  %63 = phi i32 [ %67, %62 ], [ %60, %59 ]\n  %64 = phi i32* [ %66, %62 ], [ %46, %59 ]\n  %65 = phi i32* [ %64, %62 ], [ %45, %59 ]\n  store i32 %63, i32* %65, align 4, !tbaa !10\n  %66 = getelementptr inbounds i32, i32* %64, i64 -1\n  %67 = load i32, i32* %66, align 4, !tbaa !10\n  %68 = icmp slt i32 %47, %67\n  br i1 %68, label %62, label %69, !llvm.loop !23\n\n69:                                               ; preds = %62, %59, %54, %50\n  %70 = phi i32* [ %0, %50 ], [ %0, %54 ], [ %45, %59 ], [ %64, %62 ]\n  store i32 %47, i32* %70, align 4, !tbaa !10\n  %71 = getelementptr inbounds i32, i32* %45, i64 1\n  %72 = icmp eq i32* %71, %1\n  br i1 %72, label %73, label %44, !llvm.loop !25\n\n73:                                               ; preds = %69, %34, %40, %38, %322\n  ret void\n\n74:                                               ; preds = %15\n  %75 = load i32, i32* %9, align 4, !tbaa !10\n  %76 = icmp slt i32 %18, %75\n  br i1 %76, label %77, label %88\n\n77:                                               ; preds = %74, %77\n  %78 = phi i32 [ %82, %77 ], [ %75, %74 ]\n  %79 = phi i32* [ %81, %77 ], [ %9, %74 ]\n  %80 = phi i32* [ %79, %77 ], [ %17, %74 ]\n  store i32 %78, i32* %80, align 4, !tbaa !10\n  %81 = getelementptr inbounds i32, i32* %79, i64 -1\n  %82 = load i32, i32* %81, align 4, !tbaa !10\n  %83 = icmp slt i32 %18, %82\n  br i1 %83, label %77, label %88, !llvm.loop !23\n\n84:                                               ; preds = %15\n  %85 = bitcast i32* %0 to i64*\n  %86 = bitcast i32* %9 to i64*\n  %87 = load i64, i64* %85, align 4\n  store i64 %87, i64* %86, align 4\n  br label %88\n\n88:                                               ; preds = %77, %84, %74\n  %89 = phi i32* [ %0, %84 ], [ %17, %74 ], [ %79, %77 ]\n  store i32 %18, i32* %89, align 4, !tbaa !10\n  %90 = getelementptr inbounds i32, i32* %0, i64 3\n  %91 = load i32, i32* %90, align 4, !tbaa !10\n  %92 = load i32, i32* %0, align 4, !tbaa !10\n  %93 = icmp slt i32 %91, %92\n  br i1 %93, label %104, label %94\n\n94:                                               ; preds = %88\n  %95 = load i32, i32* %17, align 4, !tbaa !10\n  %96 = icmp slt i32 %91, %95\n  br i1 %96, label %97, label %106\n\n97:                                               ; preds = %94, %97\n  %98 = phi i32 [ %102, %97 ], [ %95, %94 ]\n  %99 = phi i32* [ %101, %97 ], [ %17, %94 ]\n  %100 = phi i32* [ %99, %97 ], [ %90, %94 ]\n  store i32 %98, i32* %100, align 4, !tbaa !10\n  %101 = getelementptr inbounds i32, i32* %99, i64 -1\n  %102 = load i32, i32* %101, align 4, !tbaa !10\n  %103 = icmp slt i32 %91, %102\n  br i1 %103, label %97, label %106, !llvm.loop !23\n\n104:                                              ; preds = %88\n  %105 = bitcast i32* %9 to i8*\n  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* noundef nonnull align 4 dereferenceable(12) %105, i8* noundef nonnull align 4 dereferenceable(12) %8, i64 12, i1 false) #8\n  br label %106\n\n106:                                              ; preds = %97, %104, %94\n  %107 = phi i32* [ %0, %104 ], [ %90, %94 ], [ %99, %97 ]\n  store i32 %91, i32* %107, align 4, !tbaa !10\n  %108 = getelementptr inbounds i32, i32* %0, i64 4\n  %109 = load i32, i32* %108, align 4, !tbaa !10\n  %110 = load i32, i32* %0, align 4, !tbaa !10\n  %111 = icmp slt i32 %109, %110\n  br i1 %111, label %122, label %112\n\n112:                                              ; preds = %106\n  %113 = load i32, i32* %90, align 4, !tbaa !10\n  %114 = icmp slt i32 %109, %113\n  br i1 %114, label %115, label %124\n\n115:                                              ; preds = %112, %115\n  %116 = phi i32 [ %120, %115 ], [ %113, %112 ]\n  %117 = phi i32* [ %119, %115 ], [ %90, %112 ]\n  %118 = phi i32* [ %117, %115 ], [ %108, %112 ]\n  store i32 %116, i32* %118, align 4, !tbaa !10\n  %119 = getelementptr inbounds i32, i32* %117, i64 -1\n  %120 = load i32, i32* %119, align 4, !tbaa !10\n  %121 = icmp slt i32 %109, %120\n  br i1 %121, label %115, label %124, !llvm.loop !23\n\n122:                                              ; preds = %106\n  %123 = bitcast i32* %9 to i8*\n  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* noundef nonnull align 4 dereferenceable(16) %123, i8* noundef nonnull align 4 dereferenceable(16) %8, i64 16, i1 false) #8\n  br label %124\n\n124:                                              ; preds = %115, %122, %112\n  %125 = phi i32* [ %0, %122 ], [ %108, %112 ], [ %117, %115 ]\n  store i32 %109, i32* %125, align 4, !tbaa !10\n  %126 = getelementptr inbounds i32, i32* %0, i64 5\n  %127 = load i32, i32* %126, align 4, !tbaa !10\n  %128 = load i32, i32* %0, align 4, !tbaa !10\n  %129 = icmp slt i32 %127, %128\n  br i1 %129, label %140, label %130\n\n130:                                              ; preds = %124\n  %131 = load i32, i32* %108, align 4, !tbaa !10\n  %132 = icmp slt i32 %127, %131\n  br i1 %132, label %133, label %142\n\n133:                                              ; preds = %130, %133\n  %134 = phi i32 [ %138, %133 ], [ %131, %130 ]\n  %135 = phi i32* [ %137, %133 ], [ %108, %130 ]\n  %136 = phi i32* [ %135, %133 ], [ %126, %130 ]\n  store i32 %134, i32* %136, align 4, !tbaa !10\n  %137 = getelementptr inbounds i32, i32* %135, i64 -1\n  %138 = load i32, i32* %137, align 4, !tbaa !10\n  %139 = icmp slt i32 %127, %138\n  br i1 %139, label %133, label %142, !llvm.loop !23\n\n140:                                              ; preds = %124\n  %141 = bitcast i32* %9 to i8*\n  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* noundef nonnull align 4 dereferenceable(20) %141, i8* noundef nonnull align 4 dereferenceable(20) %8, i64 20, i1 false) #8\n  br label %142\n\n142:                                              ; preds = %133, %140, %130\n  %143 = phi i32* [ %0, %140 ], [ %126, %130 ], [ %135, %133 ]\n  store i32 %127, i32* %143, align 4, !tbaa !10\n  %144 = getelementptr inbounds i32, i32* %0, i64 6\n  %145 = load i32, i32* %144, align 4, !tbaa !10\n  %146 = load i32, i32* %0, align 4, !tbaa !10\n  %147 = icmp slt i32 %145, %146\n  br i1 %147, label %158, label %148\n\n148:                                              ; preds = %142\n  %149 = load i32, i32* %126, align 4, !tbaa !10\n  %150 = icmp slt i32 %145, %149\n  br i1 %150, label %151, label %160\n\n151:                                              ; preds = %148, %151\n  %152 = phi i32 [ %156, %151 ], [ %149, %148 ]\n  %153 = phi i32* [ %155, %151 ], [ %126, %148 ]\n  %154 = phi i32* [ %153, %151 ], [ %144, %148 ]\n  store i32 %152, i32* %154, align 4, !tbaa !10\n  %155 = getelementptr inbounds i32, i32* %153, i64 -1\n  %156 = load i32, i32* %155, align 4, !tbaa !10\n  %157 = icmp slt i32 %145, %156\n  br i1 %157, label %151, label %160, !llvm.loop !23\n\n158:                                              ; preds = %142\n  %159 = bitcast i32* %9 to i8*\n  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* noundef nonnull align 4 dereferenceable(24) %159, i8* noundef nonnull align 4 dereferenceable(24) %8, i64 24, i1 false) #8\n  br label %160\n\n160:                                              ; preds = %151, %158, %148\n  %161 = phi i32* [ %0, %158 ], [ %144, %148 ], [ %153, %151 ]\n  store i32 %145, i32* %161, align 4, !tbaa !10\n  %162 = getelementptr inbounds i32, i32* %0, i64 7\n  %163 = load i32, i32* %162, align 4, !tbaa !10\n  %164 = load i32, i32* %0, align 4, !tbaa !10\n  %165 = icmp slt i32 %163, %164\n  br i1 %165, label %176, label %166\n\n166:                                              ; preds = %160\n  %167 = load i32, i32* %144, align 4, !tbaa !10\n  %168 = icmp slt i32 %163, %167\n  br i1 %168, label %169, label %178\n\n169:                                              ; preds = %166, %169\n  %170 = phi i32 [ %174, %169 ], [ %167, %166 ]\n  %171 = phi i32* [ %173, %169 ], [ %144, %166 ]\n  %172 = phi i32* [ %171, %169 ], [ %162, %166 ]\n  store i32 %170, i32* %172, align 4, !tbaa !10\n  %173 = getelementptr inbounds i32, i32* %171, i64 -1\n  %174 = load i32, i32* %173, align 4, !tbaa !10\n  %175 = icmp slt i32 %163, %174\n  br i1 %175, label %169, label %178, !llvm.loop !23\n\n176:                                              ; preds = %160\n  %177 = bitcast i32* %9 to i8*\n  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* noundef nonnull align 4 dereferenceable(28) %177, i8* noundef nonnull align 4 dereferenceable(28) %8, i64 28, i1 false) #8\n  br label %178\n\n178:                                              ; preds = %169, %176, %166\n  %179 = phi i32* [ %0, %176 ], [ %162, %166 ], [ %171, %169 ]\n  store i32 %163, i32* %179, align 4, !tbaa !10\n  %180 = getelementptr inbounds i32, i32* %0, i64 8\n  %181 = load i32, i32* %180, align 4, !tbaa !10\n  %182 = load i32, i32* %0, align 4, !tbaa !10\n  %183 = icmp slt i32 %181, %182\n  br i1 %183, label %194, label %184\n\n184:                                              ; preds = %178\n  %185 = load i32, i32* %162, align 4, !tbaa !10\n  %186 = icmp slt i32 %181, %185\n  br i1 %186, label %187, label %196\n\n187:                                              ; preds = %184, %187\n  %188 = phi i32 [ %192, %187 ], [ %185, %184 ]\n  %189 = phi i32* [ %191, %187 ], [ %162, %184 ]\n  %190 = phi i32* [ %189, %187 ], [ %180, %184 ]\n  store i32 %188, i32* %190, align 4, !tbaa !10\n  %191 = getelementptr inbounds i32, i32* %189, i64 -1\n  %192 = load i32, i32* %191, align 4, !tbaa !10\n  %193 = icmp slt i32 %181, %192\n  br i1 %193, label %187, label %196, !llvm.loop !23\n\n194:                                              ; preds = %178\n  %195 = bitcast i32* %9 to i8*\n  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* noundef nonnull align 4 dereferenceable(32) %195, i8* noundef nonnull align 4 dereferenceable(32) %8, i64 32, i1 false) #8\n  br label %196\n\n196:                                              ; preds = %187, %194, %184\n  %197 = phi i32* [ %0, %194 ], [ %180, %184 ], [ %189, %187 ]\n  store i32 %181, i32* %197, align 4, !tbaa !10\n  %198 = getelementptr inbounds i32, i32* %0, i64 9\n  %199 = load i32, i32* %198, align 4, !tbaa !10\n  %200 = load i32, i32* %0, align 4, !tbaa !10\n  %201 = icmp slt i32 %199, %200\n  br i1 %201, label %212, label %202\n\n202:                                              ; preds = %196\n  %203 = load i32, i32* %180, align 4, !tbaa !10\n  %204 = icmp slt i32 %199, %203\n  br i1 %204, label %205, label %214\n\n205:                                              ; preds = %202, %205\n  %206 = phi i32 [ %210, %205 ], [ %203, %202 ]\n  %207 = phi i32* [ %209, %205 ], [ %180, %202 ]\n  %208 = phi i32* [ %207, %205 ], [ %198, %202 ]\n  store i32 %206, i32* %208, align 4, !tbaa !10\n  %209 = getelementptr inbounds i32, i32* %207, i64 -1\n  %210 = load i32, i32* %209, align 4, !tbaa !10\n  %211 = icmp slt i32 %199, %210\n  br i1 %211, label %205, label %214, !llvm.loop !23\n\n212:                                              ; preds = %196\n  %213 = bitcast i32* %9 to i8*\n  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* noundef nonnull align 4 dereferenceable(36) %213, i8* noundef nonnull align 4 dereferenceable(36) %8, i64 36, i1 false) #8\n  br label %214\n\n214:                                              ; preds = %205, %212, %202\n  %215 = phi i32* [ %0, %212 ], [ %198, %202 ], [ %207, %205 ]\n  store i32 %199, i32* %215, align 4, !tbaa !10\n  %216 = getelementptr inbounds i32, i32* %0, i64 10\n  %217 = load i32, i32* %216, align 4, !tbaa !10\n  %218 = load i32, i32* %0, align 4, !tbaa !10\n  %219 = icmp slt i32 %217, %218\n  br i1 %219, label %230, label %220\n\n220:                                              ; preds = %214\n  %221 = load i32, i32* %198, align 4, !tbaa !10\n  %222 = icmp slt i32 %217, %221\n  br i1 %222, label %223, label %232\n\n223:                                              ; preds = %220, %223\n  %224 = phi i32 [ %228, %223 ], [ %221, %220 ]\n  %225 = phi i32* [ %227, %223 ], [ %198, %220 ]\n  %226 = phi i32* [ %225, %223 ], [ %216, %220 ]\n  store i32 %224, i32* %226, align 4, !tbaa !10\n  %227 = getelementptr inbounds i32, i32* %225, i64 -1\n  %228 = load i32, i32* %227, align 4, !tbaa !10\n  %229 = icmp slt i32 %217, %228\n  br i1 %229, label %223, label %232, !llvm.loop !23\n\n230:                                              ; preds = %214\n  %231 = bitcast i32* %9 to i8*\n  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* noundef nonnull align 4 dereferenceable(40) %231, i8* noundef nonnull align 4 dereferenceable(40) %8, i64 40, i1 false) #8\n  br label %232\n\n232:                                              ; preds = %223, %230, %220\n  %233 = phi i32* [ %0, %230 ], [ %216, %220 ], [ %225, %223 ]\n  store i32 %217, i32* %233, align 4, !tbaa !10\n  %234 = getelementptr inbounds i32, i32* %0, i64 11\n  %235 = load i32, i32* %234, align 4, !tbaa !10\n  %236 = load i32, i32* %0, align 4, !tbaa !10\n  %237 = icmp slt i32 %235, %236\n  br i1 %237, label %248, label %238\n\n238:                                              ; preds = %232\n  %239 = load i32, i32* %216, align 4, !tbaa !10\n  %240 = icmp slt i32 %235, %239\n  br i1 %240, label %241, label %250\n\n241:                                              ; preds = %238, %241\n  %242 = phi i32 [ %246, %241 ], [ %239, %238 ]\n  %243 = phi i32* [ %245, %241 ], [ %216, %238 ]\n  %244 = phi i32* [ %243, %241 ], [ %234, %238 ]\n  store i32 %242, i32* %244, align 4, !tbaa !10\n  %245 = getelementptr inbounds i32, i32* %243, i64 -1\n  %246 = load i32, i32* %245, align 4, !tbaa !10\n  %247 = icmp slt i32 %235, %246\n  br i1 %247, label %241, label %250, !llvm.loop !23\n\n248:                                              ; preds = %232\n  %249 = bitcast i32* %9 to i8*\n  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* noundef nonnull align 4 dereferenceable(44) %249, i8* noundef nonnull align 4 dereferenceable(44) %8, i64 44, i1 false) #8\n  br label %250\n\n250:                                              ; preds = %241, %248, %238\n  %251 = phi i32* [ %0, %248 ], [ %234, %238 ], [ %243, %241 ]\n  store i32 %235, i32* %251, align 4, !tbaa !10\n  %252 = getelementptr inbounds i32, i32* %0, i64 12\n  %253 = load i32, i32* %252, align 4, !tbaa !10\n  %254 = load i32, i32* %0, align 4, !tbaa !10\n  %255 = icmp slt i32 %253, %254\n  br i1 %255, label %266, label %256\n\n256:                                              ; preds = %250\n  %257 = load i32, i32* %234, align 4, !tbaa !10\n  %258 = icmp slt i32 %253, %257\n  br i1 %258, label %259, label %268\n\n259:                                              ; preds = %256, %259\n  %260 = phi i32 [ %264, %259 ], [ %257, %256 ]\n  %261 = phi i32* [ %263, %259 ], [ %234, %256 ]\n  %262 = phi i32* [ %261, %259 ], [ %252, %256 ]\n  store i32 %260, i32* %262, align 4, !tbaa !10\n  %263 = getelementptr inbounds i32, i32* %261, i64 -1\n  %264 = load i32, i32* %263, align 4, !tbaa !10\n  %265 = icmp slt i32 %253, %264\n  br i1 %265, label %259, label %268, !llvm.loop !23\n\n266:                                              ; preds = %250\n  %267 = bitcast i32* %9 to i8*\n  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* noundef nonnull align 4 dereferenceable(48) %267, i8* noundef nonnull align 4 dereferenceable(48) %8, i64 48, i1 false) #8\n  br label %268\n\n268:                                              ; preds = %259, %266, %256\n  %269 = phi i32* [ %0, %266 ], [ %252, %256 ], [ %261, %259 ]\n  store i32 %253, i32* %269, align 4, !tbaa !10\n  %270 = getelementptr inbounds i32, i32* %0, i64 13\n  %271 = load i32, i32* %270, align 4, !tbaa !10\n  %272 = load i32, i32* %0, align 4, !tbaa !10\n  %273 = icmp slt i32 %271, %272\n  br i1 %273, label %284, label %274\n\n274:                                              ; preds = %268\n  %275 = load i32, i32* %252, align 4, !tbaa !10\n  %276 = icmp slt i32 %271, %275\n  br i1 %276, label %277, label %286\n\n277:                                              ; preds = %274, %277\n  %278 = phi i32 [ %282, %277 ], [ %275, %274 ]\n  %279 = phi i32* [ %281, %277 ], [ %252, %274 ]\n  %280 = phi i32* [ %279, %277 ], [ %270, %274 ]\n  store i32 %278, i32* %280, align 4, !tbaa !10\n  %281 = getelementptr inbounds i32, i32* %279, i64 -1\n  %282 = load i32, i32* %281, align 4, !tbaa !10\n  %283 = icmp slt i32 %271, %282\n  br i1 %283, label %277, label %286, !llvm.loop !23\n\n284:                                              ; preds = %268\n  %285 = bitcast i32* %9 to i8*\n  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* noundef nonnull align 4 dereferenceable(52) %285, i8* noundef nonnull align 4 dereferenceable(52) %8, i64 52, i1 false) #8\n  br label %286\n\n286:                                              ; preds = %277, %284, %274\n  %287 = phi i32* [ %0, %284 ], [ %270, %274 ], [ %279, %277 ]\n  store i32 %271, i32* %287, align 4, !tbaa !10\n  %288 = getelementptr inbounds i32, i32* %0, i64 14\n  %289 = load i32, i32* %288, align 4, !tbaa !10\n  %290 = load i32, i32* %0, align 4, !tbaa !10\n  %291 = icmp slt i32 %289, %290\n  br i1 %291, label %302, label %292\n\n292:                                              ; preds = %286\n  %293 = load i32, i32* %270, align 4, !tbaa !10\n  %294 = icmp slt i32 %289, %293\n  br i1 %294, label %295, label %304\n\n295:                                              ; preds = %292, %295\n  %296 = phi i32 [ %300, %295 ], [ %293, %292 ]\n  %297 = phi i32* [ %299, %295 ], [ %270, %292 ]\n  %298 = phi i32* [ %297, %295 ], [ %288, %292 ]\n  store i32 %296, i32* %298, align 4, !tbaa !10\n  %299 = getelementptr inbounds i32, i32* %297, i64 -1\n  %300 = load i32, i32* %299, align 4, !tbaa !10\n  %301 = icmp slt i32 %289, %300\n  br i1 %301, label %295, label %304, !llvm.loop !23\n\n302:                                              ; preds = %286\n  %303 = bitcast i32* %9 to i8*\n  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* noundef nonnull align 4 dereferenceable(56) %303, i8* noundef nonnull align 4 dereferenceable(56) %8, i64 56, i1 false) #8\n  br label %304\n\n304:                                              ; preds = %295, %302, %292\n  %305 = phi i32* [ %0, %302 ], [ %288, %292 ], [ %297, %295 ]\n  store i32 %289, i32* %305, align 4, !tbaa !10\n  %306 = getelementptr inbounds i32, i32* %0, i64 15\n  %307 = load i32, i32* %306, align 4, !tbaa !10\n  %308 = load i32, i32* %0, align 4, !tbaa !10\n  %309 = icmp slt i32 %307, %308\n  br i1 %309, label %320, label %310\n\n310:                                              ; preds = %304\n  %311 = load i32, i32* %288, align 4, !tbaa !10\n  %312 = icmp slt i32 %307, %311\n  br i1 %312, label %313, label %322\n\n313:                                              ; preds = %310, %313\n  %314 = phi i32 [ %318, %313 ], [ %311, %310 ]\n  %315 = phi i32* [ %317, %313 ], [ %288, %310 ]\n  %316 = phi i32* [ %315, %313 ], [ %306, %310 ]\n  store i32 %314, i32* %316, align 4, !tbaa !10\n  %317 = getelementptr inbounds i32, i32* %315, i64 -1\n  %318 = load i32, i32* %317, align 4, !tbaa !10\n  %319 = icmp slt i32 %307, %318\n  br i1 %319, label %313, label %322, !llvm.loop !23\n\n320:                                              ; preds = %304\n  %321 = bitcast i32* %9 to i8*\n  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* noundef nonnull align 4 dereferenceable(60) %321, i8* noundef nonnull align 4 dereferenceable(60) %8, i64 60, i1 false) #8\n  br label %322\n\n322:                                              ; preds = %313, %320, %310\n  %323 = phi i32* [ %0, %320 ], [ %306, %310 ], [ %315, %313 ]\n  store i32 %307, i32* %323, align 4, !tbaa !10\n  %324 = getelementptr inbounds i32, i32* %0, i64 16\n  %325 = icmp eq i32* %324, %1\n  br i1 %325, label %73, label %21\n}\n\n; Function Attrs: uwtable\ndefine linkonce_odr dso_local void @_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEENS0_5__ops15_Iter_less_iterEEvT_S9_RT0_(i32* %0, i32* %1, %\"struct.__gnu_cxx::__ops::_Iter_less_iter\"* nonnull align 1 dereferenceable(1) %2) local_unnamed_addr #0 comdat {\n  %4 = ptrtoint i32* %1 to i64\n  %5 = ptrtoint i32* %0 to i64\n  %6 = sub i64 %4, %5\n  %7 = ashr exact i64 %6, 2\n  %8 = icmp slt i64 %6, 8\n  br i1 %8, label %100, label %9\n\n9:                                                ; preds = %3\n  %10 = add nsw i64 %7, -2\n  %11 = lshr i64 %10, 1\n  %12 = add nsw i64 %7, -1\n  %13 = sdiv i64 %12, 2\n  %14 = and i64 %6, 4\n  %15 = icmp eq i64 %14, 0\n  br i1 %15, label %16, label %20\n\n16:                                               ; preds = %9\n  %17 = or i64 %10, 1\n  %18 = getelementptr inbounds i32, i32* %0, i64 %17\n  %19 = getelementptr inbounds i32, i32* %0, i64 %11\n  br label %57\n\n20:                                               ; preds = %9, %52\n  %21 = phi i64 [ %56, %52 ], [ %11, %9 ]\n  %22 = getelementptr inbounds i32, i32* %0, i64 %21\n  %23 = load i32, i32* %22, align 4, !tbaa !10\n  %24 = icmp sgt i64 %13, %21\n  br i1 %24, label %25, label %52\n\n25:                                               ; preds = %20, %25\n  %26 = phi i64 [ %35, %25 ], [ %21, %20 ]\n  %27 = shl i64 %26, 1\n  %28 = add i64 %27, 2\n  %29 = getelementptr inbounds i32, i32* %0, i64 %28\n  %30 = or i64 %27, 1\n  %31 = getelementptr inbounds i32, i32* %0, i64 %30\n  %32 = load i32, i32* %29, align 4, !tbaa !10\n  %33 = load i32, i32* %31, align 4, !tbaa !10\n  %34 = icmp slt i32 %32, %33\n  %35 = select i1 %34, i64 %30, i64 %28\n  %36 = getelementptr inbounds i32, i32* %0, i64 %35\n  %37 = load i32, i32* %36, align 4, !tbaa !10\n  %38 = getelementptr inbounds i32, i32* %0, i64 %26\n  store i32 %37, i32* %38, align 4, !tbaa !10\n  %39 = icmp slt i64 %35, %13\n  br i1 %39, label %25, label %40, !llvm.loop !16\n\n40:                                               ; preds = %25\n  %41 = icmp sgt i64 %35, %21\n  br i1 %41, label %42, label %52\n\n42:                                               ; preds = %40, %49\n  %43 = phi i64 [ %45, %49 ], [ %35, %40 ]\n  %44 = add nsw i64 %43, -1\n  %45 = sdiv i64 %44, 2\n  %46 = getelementptr inbounds i32, i32* %0, i64 %45\n  %47 = load i32, i32* %46, align 4, !tbaa !10\n  %48 = icmp slt i32 %47, %23\n  br i1 %48, label %49, label %52\n\n49:                                               ; preds = %42\n  %50 = getelementptr inbounds i32, i32* %0, i64 %43\n  store i32 %47, i32* %50, align 4, !tbaa !10\n  %51 = icmp sgt i64 %45, %21\n  br i1 %51, label %42, label %52, !llvm.loop !17\n\n52:                                               ; preds = %42, %49, %20, %40\n  %53 = phi i64 [ %35, %40 ], [ %21, %20 ], [ %45, %49 ], [ %43, %42 ]\n  %54 = getelementptr inbounds i32, i32* %0, i64 %53\n  store i32 %23, i32* %54, align 4, !tbaa !10\n  %55 = icmp eq i64 %21, 0\n  %56 = add nsw i64 %21, -1\n  br i1 %55, label %100, label %20, !llvm.loop !26\n\n57:                                               ; preds = %16, %95\n  %58 = phi i64 [ %99, %95 ], [ %11, %16 ]\n  %59 = getelementptr inbounds i32, i32* %0, i64 %58\n  %60 = load i32, i32* %59, align 4, !tbaa !10\n  %61 = icmp sgt i64 %13, %58\n  br i1 %61, label %62, label %77\n\n62:                                               ; preds = %57, %62\n  %63 = phi i64 [ %72, %62 ], [ %58, %57 ]\n  %64 = shl i64 %63, 1\n  %65 = add i64 %64, 2\n  %66 = getelementptr inbounds i32, i32* %0, i64 %65\n  %67 = or i64 %64, 1\n  %68 = getelementptr inbounds i32, i32* %0, i64 %67\n  %69 = load i32, i32* %66, align 4, !tbaa !10\n  %70 = load i32, i32* %68, align 4, !tbaa !10\n  %71 = icmp slt i32 %69, %70\n  %72 = select i1 %71, i64 %67, i64 %65\n  %73 = getelementptr inbounds i32, i32* %0, i64 %72\n  %74 = load i32, i32* %73, align 4, !tbaa !10\n  %75 = getelementptr inbounds i32, i32* %0, i64 %63\n  store i32 %74, i32* %75, align 4, !tbaa !10\n  %76 = icmp slt i64 %72, %13\n  br i1 %76, label %62, label %77, !llvm.loop !16\n\n77:                                               ; preds = %62, %57\n  %78 = phi i64 [ %58, %57 ], [ %72, %62 ]\n  %79 = icmp eq i64 %78, %11\n  br i1 %79, label %80, label %82\n\n80:                                               ; preds = %77\n  %81 = load i32, i32* %18, align 4, !tbaa !10\n  store i32 %81, i32* %19, align 4, !tbaa !10\n  br label %82\n\n82:                                               ; preds = %80, %77\n  %83 = phi i64 [ %17, %80 ], [ %78, %77 ]\n  %84 = icmp sgt i64 %83, %58\n  br i1 %84, label %85, label %95\n\n85:                                               ; preds = %82, %92\n  %86 = phi i64 [ %88, %92 ], [ %83, %82 ]\n  %87 = add nsw i64 %86, -1\n  %88 = sdiv i64 %87, 2\n  %89 = getelementptr inbounds i32, i32* %0, i64 %88\n  %90 = load i32, i32* %89, align 4, !tbaa !10\n  %91 = icmp slt i32 %90, %60\n  br i1 %91, label %92, label %95\n\n92:                                               ; preds = %85\n  %93 = getelementptr inbounds i32, i32* %0, i64 %86\n  store i32 %90, i32* %93, align 4, !tbaa !10\n  %94 = icmp sgt i64 %88, %58\n  br i1 %94, label %85, label %95, !llvm.loop !17\n\n95:                                               ; preds = %85, %92, %82\n  %96 = phi i64 [ %83, %82 ], [ %88, %92 ], [ %86, %85 ]\n  %97 = getelementptr inbounds i32, i32* %0, i64 %96\n  store i32 %60, i32* %97, align 4, !tbaa !10\n  %98 = icmp eq i64 %58, 0\n  %99 = add nsw i64 %58, -1\n  br i1 %98, label %100, label %57, !llvm.loop !26\n\n100:                                              ; preds = %52, %95, %3\n  ret void\n}\n\n; Function Attrs: mustprogress nofree nosync nounwind readnone speculatable willreturn\ndeclare i64 @llvm.ctlz.i64(i64, i1 immarg) #7\n\nattributes #0 = { uwtable \"frame-pointer\"=\"none\" \"min-legal-vector-width\"=\"0\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #1 = { argmemonly mustprogress nofree nounwind willreturn writeonly }\nattributes #2 = { argmemonly mustprogress nofree nosync nounwind willreturn }\nattributes #3 = { nobuiltin nounwind \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #4 = { noreturn \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #5 = { nobuiltin allocsize(0) \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #6 = { argmemonly mustprogress nofree nounwind willreturn }\nattributes #7 = { mustprogress nofree nosync nounwind readnone speculatable willreturn }\nattributes #8 = { nounwind }\nattributes #9 = { noreturn }\nattributes #10 = { allocsize(0) }\n\n!llvm.module.flags = !{!0, !1}\n!llvm.ident = !{!2}\n\n!0 = !{i32 1, !\"wchar_size\", i32 4}\n!1 = !{i32 7, !\"uwtable\", i32 1}\n!2 = !{!\"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)\"}\n!3 = !{!4, !5, i64 8}\n!4 = !{!\"_ZTSNSt12_Vector_baseIiSaIiEE17_Vector_impl_dataE\", !5, i64 0, !5, i64 8, !5, i64 16}\n!5 = !{!\"any pointer\", !6, i64 0}\n!6 = !{!\"omnipotent char\", !7, i64 0}\n!7 = !{!\"Simple C++ TBAA\"}\n!8 = !{!4, !5, i64 0}\n!9 = !{i64 0, i64 65}\n!10 = !{!11, !11, i64 0}\n!11 = !{!\"int\", !6, i64 0}\n!12 = distinct !{!12, !13}\n!13 = !{!\"llvm.loop.mustprogress\"}\n!14 = !{!4, !5, i64 16}\n!15 = distinct !{!15, !13}\n!16 = distinct !{!16, !13}\n!17 = distinct !{!17, !13}\n!18 = distinct !{!18, !13}\n!19 = distinct !{!19, !13}\n!20 = distinct !{!20, !13}\n!21 = distinct !{!21, !13}\n!22 = distinct !{!22, !13}\n!23 = distinct !{!23, !13}\n!24 = distinct !{!24, !13}\n!25 = distinct !{!25, !13}\n!26 = distinct !{!26, !13}\n", "target": "This is the targeted source code:\n/*\nReturn sorted unique elements in a vector\n>>> unique({5, 3, 5, 2, 3, 3, 9, 0, 123})\n{0, 2, 3, 5, 9, 123}\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> unique(vector<int> l){\n\n    vector<int> out={};\n    for (int i=0;i<l.size();i++)\n        if (find(out.begin(),out.end(),l[i])==out.end())\n            out.push_back(l[i]);\n    sort(out.begin(),out.end());\n    return out;\n}\n"}
{"input": "Convert this to C++:\n; ModuleID = '../../Human_xBenchmarks_164/CPP_35/CPP_35.cpp'\nsource_filename = \"../../Human_xBenchmarks_164/CPP_35/CPP_35.cpp\"\ntarget datalayout = \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\ntarget triple = \"x86_64-unknown-linux-gnu\"\n\n%\"class.std::vector\" = type { %\"struct.std::_Vector_base\" }\n%\"struct.std::_Vector_base\" = type { %\"struct.std::_Vector_base<float, std::allocator<float>>::_Vector_impl\" }\n%\"struct.std::_Vector_base<float, std::allocator<float>>::_Vector_impl\" = type { %\"struct.std::_Vector_base<float, std::allocator<float>>::_Vector_impl_data\" }\n%\"struct.std::_Vector_base<float, std::allocator<float>>::_Vector_impl_data\" = type { float*, float*, float* }\n\n; Function Attrs: mustprogress nofree norecurse nosync nounwind readonly uwtable willreturn\ndefine dso_local float @_Z11max_elementSt6vectorIfSaIfEE(%\"class.std::vector\"* nocapture readonly %0) local_unnamed_addr #0 {\n  %2 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0, i64 0, i32 0, i32 0, i32 0, i32 1\n  %3 = load float*, float** %2, align 8, !tbaa !3\n  %4 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0, i64 0, i32 0, i32 0, i32 0, i32 0\n  %5 = load float*, float** %4, align 8, !tbaa !8\n  %6 = ptrtoint float* %3 to i64\n  %7 = ptrtoint float* %5 to i64\n  %8 = sub i64 %6, %7\n  %9 = icmp eq i64 %8, 0\n  br i1 %9, label %34, label %10\n\n10:                                               ; preds = %1\n  %11 = ashr exact i64 %8, 2\n  %12 = call i64 @llvm.umax.i64(i64 %11, i64 1)\n  %13 = add i64 %12, -1\n  %14 = and i64 %12, 3\n  %15 = icmp ult i64 %13, 3\n  br i1 %15, label %18, label %16\n\n16:                                               ; preds = %10\n  %17 = and i64 %12, -4\n  br label %36\n\n18:                                               ; preds = %36, %10\n  %19 = phi float [ undef, %10 ], [ %58, %36 ]\n  %20 = phi i64 [ 0, %10 ], [ %59, %36 ]\n  %21 = phi float [ -1.000000e+04, %10 ], [ %58, %36 ]\n  %22 = icmp eq i64 %14, 0\n  br i1 %22, label %34, label %23\n\n23:                                               ; preds = %18, %23\n  %24 = phi i64 [ %31, %23 ], [ %20, %18 ]\n  %25 = phi float [ %30, %23 ], [ %21, %18 ]\n  %26 = phi i64 [ %32, %23 ], [ %14, %18 ]\n  %27 = getelementptr inbounds float, float* %5, i64 %24\n  %28 = load float, float* %27, align 4, !tbaa !9\n  %29 = fcmp olt float %25, %28\n  %30 = select i1 %29, float %28, float %25\n  %31 = add nuw nsw i64 %24, 1\n  %32 = add i64 %26, -1\n  %33 = icmp eq i64 %32, 0\n  br i1 %33, label %34, label %23, !llvm.loop !11\n\n34:                                               ; preds = %18, %23, %1\n  %35 = phi float [ -1.000000e+04, %1 ], [ %19, %18 ], [ %30, %23 ]\n  ret float %35\n\n36:                                               ; preds = %36, %16\n  %37 = phi i64 [ 0, %16 ], [ %59, %36 ]\n  %38 = phi float [ -1.000000e+04, %16 ], [ %58, %36 ]\n  %39 = phi i64 [ %17, %16 ], [ %60, %36 ]\n  %40 = getelementptr inbounds float, float* %5, i64 %37\n  %41 = load float, float* %40, align 4, !tbaa !9\n  %42 = fcmp olt float %38, %41\n  %43 = select i1 %42, float %41, float %38\n  %44 = or i64 %37, 1\n  %45 = getelementptr inbounds float, float* %5, i64 %44\n  %46 = load float, float* %45, align 4, !tbaa !9\n  %47 = fcmp olt float %43, %46\n  %48 = select i1 %47, float %46, float %43\n  %49 = or i64 %37, 2\n  %50 = getelementptr inbounds float, float* %5, i64 %49\n  %51 = load float, float* %50, align 4, !tbaa !9\n  %52 = fcmp olt float %48, %51\n  %53 = select i1 %52, float %51, float %48\n  %54 = or i64 %37, 3\n  %55 = getelementptr inbounds float, float* %5, i64 %54\n  %56 = load float, float* %55, align 4, !tbaa !9\n  %57 = fcmp olt float %53, %56\n  %58 = select i1 %57, float %56, float %53\n  %59 = add nuw nsw i64 %37, 4\n  %60 = add i64 %39, -4\n  %61 = icmp eq i64 %60, 0\n  br i1 %61, label %18, label %36, !llvm.loop !13\n}\n\n; Function Attrs: nofree nosync nounwind readnone speculatable willreturn\ndeclare i64 @llvm.umax.i64(i64, i64) #1\n\nattributes #0 = { mustprogress nofree norecurse nosync nounwind readonly uwtable willreturn \"frame-pointer\"=\"none\" \"min-legal-vector-width\"=\"0\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #1 = { nofree nosync nounwind readnone speculatable willreturn }\n\n!llvm.module.flags = !{!0, !1}\n!llvm.ident = !{!2}\n\n!0 = !{i32 1, !\"wchar_size\", i32 4}\n!1 = !{i32 7, !\"uwtable\", i32 1}\n!2 = !{!\"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)\"}\n!3 = !{!4, !5, i64 8}\n!4 = !{!\"_ZTSNSt12_Vector_baseIfSaIfEE17_Vector_impl_dataE\", !5, i64 0, !5, i64 8, !5, i64 16}\n!5 = !{!\"any pointer\", !6, i64 0}\n!6 = !{!\"omnipotent char\", !7, i64 0}\n!7 = !{!\"Simple C++ TBAA\"}\n!8 = !{!4, !5, i64 0}\n!9 = !{!10, !10, i64 0}\n!10 = !{!\"float\", !6, i64 0}\n!11 = distinct !{!11, !12}\n!12 = !{!\"llvm.loop.unroll.disable\"}\n!13 = distinct !{!13, !14}\n!14 = !{!\"llvm.loop.mustprogress\"}\n", "target": "This is the targeted source code:\n/*\nReturn maximum element in the vector.\n>>> max_element({1, 2, 3})\n3\n>>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n123\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nfloat max_element(vector<float> l){\n\n  float max=-10000;\n  for (int i=0;i<l.size();i++)\n  if (max<l[i]) max=l[i];\n  return max;\n\n}\n"}
{"input": "Convert this to C++:\n; ModuleID = '../../Human_xBenchmarks_164/CPP_36/CPP_36.cpp'\nsource_filename = \"../../Human_xBenchmarks_164/CPP_36/CPP_36.cpp\"\ntarget datalayout = \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\ntarget triple = \"x86_64-unknown-linux-gnu\"\n\n; Function Attrs: mustprogress nofree norecurse nosync nounwind readnone uwtable willreturn\ndefine dso_local i32 @_Z9fizz_buzzi(i32 %0) local_unnamed_addr #0 {\n  %2 = icmp sgt i32 %0, 0\n  br i1 %2, label %5, label %3\n\n3:                                                ; preds = %24, %1\n  %4 = phi i32 [ 0, %1 ], [ %25, %24 ]\n  ret i32 %4\n\n5:                                                ; preds = %1, %24\n  %6 = phi i32 [ %26, %24 ], [ 0, %1 ]\n  %7 = phi i32 [ %25, %24 ], [ 0, %1 ]\n  %8 = urem i32 %6, 11\n  %9 = icmp ne i32 %8, 0\n  %10 = urem i32 %6, 13\n  %11 = icmp ne i32 %10, 0\n  %12 = and i1 %9, %11\n  %13 = icmp eq i32 %6, 0\n  %14 = select i1 %12, i1 true, i1 %13\n  br i1 %14, label %24, label %15\n\n15:                                               ; preds = %5, %15\n  %16 = phi i32 [ %22, %15 ], [ %6, %5 ]\n  %17 = phi i32 [ %21, %15 ], [ %7, %5 ]\n  %18 = urem i32 %16, 10\n  %19 = icmp eq i32 %18, 7\n  %20 = zext i1 %19 to i32\n  %21 = add nsw i32 %17, %20\n  %22 = udiv i32 %16, 10\n  %23 = icmp ult i32 %16, 10\n  br i1 %23, label %24, label %15, !llvm.loop !3\n\n24:                                               ; preds = %15, %5\n  %25 = phi i32 [ %7, %5 ], [ %21, %15 ]\n  %26 = add nuw nsw i32 %6, 1\n  %27 = icmp eq i32 %26, %0\n  br i1 %27, label %3, label %5, !llvm.loop !5\n}\n\nattributes #0 = { mustprogress nofree norecurse nosync nounwind readnone uwtable willreturn \"frame-pointer\"=\"none\" \"min-legal-vector-width\"=\"0\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\n\n!llvm.module.flags = !{!0, !1}\n!llvm.ident = !{!2}\n\n!0 = !{i32 1, !\"wchar_size\", i32 4}\n!1 = !{i32 7, !\"uwtable\", i32 1}\n!2 = !{!\"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)\"}\n!3 = distinct !{!3, !4}\n!4 = !{!\"llvm.loop.mustprogress\"}\n!5 = distinct !{!5, !4}\n", "target": "This is the targeted source code:\n/*\nReturn the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n>>> fizz_buzz(50)\n0\n>>> fizz_buzz(78)\n2\n>>> fizz_buzz(79)\n3\n*/\n#include<stdio.h>\nusing namespace std;\nint fizz_buzz(int n){\n\n    int count=0;\n    for (int i=0;i<n;i++)\n    if (i%11==0 or i%13==0)\n    {\n        int q=i;\n        while (q>0)\n        {\n            if (q%10==7) count+=1;\n            q=q/10;\n        }\n    } \n    return count;\n}\n"}
{"input": "Convert this to C++:\n; ModuleID = '../../Human_xBenchmarks_164/CPP_37/CPP_37.cpp'\nsource_filename = \"../../Human_xBenchmarks_164/CPP_37/CPP_37.cpp\"\ntarget datalayout = \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\ntarget triple = \"x86_64-unknown-linux-gnu\"\n\n%\"class.std::vector\" = type { %\"struct.std::_Vector_base\" }\n%\"struct.std::_Vector_base\" = type { %\"struct.std::_Vector_base<float, std::allocator<float>>::_Vector_impl\" }\n%\"struct.std::_Vector_base<float, std::allocator<float>>::_Vector_impl\" = type { %\"struct.std::_Vector_base<float, std::allocator<float>>::_Vector_impl_data\" }\n%\"struct.std::_Vector_base<float, std::allocator<float>>::_Vector_impl_data\" = type { float*, float*, float* }\n%\"struct.__gnu_cxx::__ops::_Iter_less_iter\" = type { i8 }\n\n$_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEElNS0_5__ops15_Iter_less_iterEEvT_S9_T0_T1_ = comdat any\n\n$_ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_ = comdat any\n\n$_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_RT0_ = comdat any\n\n@.str = private unnamed_addr constant [26 x i8] c\"vector::_M_realloc_insert\\00\", align 1\n\n; Function Attrs: uwtable\ndefine dso_local void @_Z9sort_evenSt6vectorIfSaIfEE(%\"class.std::vector\"* noalias nocapture sret(%\"class.std::vector\") align 8 %0, %\"class.std::vector\"* nocapture readonly %1) local_unnamed_addr #0 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {\n  %3 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %1, i64 0, i32 0, i32 0, i32 0, i32 1\n  %4 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %1, i64 0, i32 0, i32 0, i32 0, i32 0\n  %5 = bitcast %\"class.std::vector\"* %0 to i8*\n  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(24) %5, i8 0, i64 24, i1 false)\n  %6 = load float*, float** %3, align 8, !tbaa !3\n  %7 = load float*, float** %4, align 8, !tbaa !8\n  %8 = icmp eq float* %6, %7\n  br i1 %8, label %103, label %30\n\n9:                                                ; preds = %80\n  %10 = icmp eq float* %83, %86\n  br i1 %10, label %23, label %11\n\n11:                                               ; preds = %9\n  %12 = ptrtoint float* %86 to i64\n  %13 = ptrtoint float* %83 to i64\n  %14 = sub i64 %12, %13\n  %15 = ashr exact i64 %14, 2\n  %16 = tail call i64 @llvm.ctlz.i64(i64 %15, i1 true) #8, !range !9\n  %17 = shl nuw nsw i64 %16, 1\n  %18 = xor i64 %17, 126\n  invoke void @_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEElNS0_5__ops15_Iter_less_iterEEvT_S9_T0_T1_(float* %83, float* nonnull %86, i64 %18)\n          to label %19 unwind label %104\n\n19:                                               ; preds = %11\n  invoke void @_ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_(float* %83, float* nonnull %86)\n          to label %20 unwind label %104\n\n20:                                               ; preds = %19\n  %21 = load float*, float** %3, align 8, !tbaa !3\n  %22 = load float*, float** %4, align 8, !tbaa !8\n  br label %23\n\n23:                                               ; preds = %20, %9\n  %24 = phi float* [ %22, %20 ], [ %81, %9 ]\n  %25 = phi float* [ %21, %20 ], [ %82, %9 ]\n  %26 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0, i64 0, i32 0, i32 0, i32 0, i32 1\n  %27 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0, i64 0, i32 0, i32 0, i32 0, i32 2\n  %28 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0, i64 0, i32 0, i32 0, i32 0, i32 0\n  %29 = icmp eq float* %25, %24\n  br i1 %29, label %99, label %106\n\n30:                                               ; preds = %2, %80\n  %31 = phi float* [ %81, %80 ], [ %7, %2 ]\n  %32 = phi float* [ %82, %80 ], [ %6, %2 ]\n  %33 = phi i64 [ %87, %80 ], [ 0, %2 ]\n  %34 = phi i64 [ %89, %80 ], [ 0, %2 ]\n  %35 = phi float* [ %85, %80 ], [ null, %2 ]\n  %36 = phi float* [ %86, %80 ], [ null, %2 ]\n  %37 = phi float* [ %83, %80 ], [ null, %2 ]\n  %38 = getelementptr inbounds float, float* %31, i64 %34\n  %39 = icmp eq float* %36, %35\n  br i1 %39, label %42, label %40\n\n40:                                               ; preds = %30\n  %41 = load float, float* %38, align 4, !tbaa !10\n  store float %41, float* %36, align 4, !tbaa !10\n  br label %80\n\n42:                                               ; preds = %30\n  %43 = ptrtoint float* %35 to i64\n  %44 = ptrtoint float* %37 to i64\n  %45 = sub i64 %43, %44\n  %46 = ashr exact i64 %45, 2\n  %47 = icmp eq i64 %45, 9223372036854775804\n  br i1 %47, label %48, label %50\n\n48:                                               ; preds = %42\n  invoke void @_ZSt20__throw_length_errorPKc(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str, i64 0, i64 0)) #9\n          to label %49 unwind label %97\n\n49:                                               ; preds = %48\n  unreachable\n\n50:                                               ; preds = %42\n  %51 = icmp eq i64 %45, 0\n  %52 = select i1 %51, i64 1, i64 %46\n  %53 = add nsw i64 %52, %46\n  %54 = icmp ult i64 %53, %46\n  %55 = icmp ugt i64 %53, 2305843009213693951\n  %56 = or i1 %54, %55\n  %57 = select i1 %56, i64 2305843009213693951, i64 %53\n  %58 = icmp eq i64 %57, 0\n  br i1 %58, label %64, label %59\n\n59:                                               ; preds = %50\n  %60 = shl nuw nsw i64 %57, 2\n  %61 = invoke noalias nonnull i8* @_Znwm(i64 %60) #10\n          to label %62 unwind label %95\n\n62:                                               ; preds = %59\n  %63 = bitcast i8* %61 to float*\n  br label %64\n\n64:                                               ; preds = %62, %50\n  %65 = phi float* [ %63, %62 ], [ null, %50 ]\n  %66 = getelementptr inbounds float, float* %65, i64 %46\n  %67 = load float, float* %38, align 4, !tbaa !10\n  store float %67, float* %66, align 4, !tbaa !10\n  %68 = icmp sgt i64 %45, 0\n  br i1 %68, label %69, label %72\n\n69:                                               ; preds = %64\n  %70 = bitcast float* %65 to i8*\n  %71 = bitcast float* %37 to i8*\n  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %70, i8* align 4 %71, i64 %45, i1 false) #8\n  br label %72\n\n72:                                               ; preds = %69, %64\n  %73 = icmp eq float* %37, null\n  br i1 %73, label %76, label %74\n\n74:                                               ; preds = %72\n  %75 = bitcast float* %37 to i8*\n  tail call void @_ZdlPv(i8* nonnull %75) #8\n  br label %76\n\n76:                                               ; preds = %74, %72\n  %77 = getelementptr inbounds float, float* %65, i64 %57\n  %78 = load float*, float** %3, align 8, !tbaa !3\n  %79 = load float*, float** %4, align 8, !tbaa !8\n  br label %80\n\n80:                                               ; preds = %76, %40\n  %81 = phi float* [ %79, %76 ], [ %31, %40 ]\n  %82 = phi float* [ %78, %76 ], [ %32, %40 ]\n  %83 = phi float* [ %65, %76 ], [ %37, %40 ]\n  %84 = phi float* [ %66, %76 ], [ %36, %40 ]\n  %85 = phi float* [ %77, %76 ], [ %35, %40 ]\n  %86 = getelementptr inbounds float, float* %84, i64 1\n  %87 = add nuw i64 %33, 1\n  %88 = shl i64 %87, 1\n  %89 = and i64 %88, 4294967294\n  %90 = ptrtoint float* %82 to i64\n  %91 = ptrtoint float* %81 to i64\n  %92 = sub i64 %90, %91\n  %93 = ashr exact i64 %92, 2\n  %94 = icmp ugt i64 %93, %89\n  br i1 %94, label %30, label %9, !llvm.loop !12\n\n95:                                               ; preds = %59\n  %96 = landingpad { i8*, i32 }\n          cleanup\n  br label %220\n\n97:                                               ; preds = %48\n  %98 = landingpad { i8*, i32 }\n          cleanup\n  br label %220\n\n99:                                               ; preds = %207, %23\n  %100 = icmp eq float* %83, null\n  br i1 %100, label %103, label %101\n\n101:                                              ; preds = %99\n  %102 = bitcast float* %83 to i8*\n  tail call void @_ZdlPv(i8* nonnull %102) #8\n  br label %103\n\n103:                                              ; preds = %2, %99, %101\n  ret void\n\n104:                                              ; preds = %19, %11\n  %105 = landingpad { i8*, i32 }\n          cleanup\n  br label %220\n\n106:                                              ; preds = %23, %207\n  %107 = phi float* [ %208, %207 ], [ null, %23 ]\n  %108 = phi float* [ %209, %207 ], [ null, %23 ]\n  %109 = phi float* [ %210, %207 ], [ null, %23 ]\n  %110 = phi float* [ %211, %207 ], [ null, %23 ]\n  %111 = phi float* [ %214, %207 ], [ %24, %23 ]\n  %112 = phi i64 [ %212, %207 ], [ 0, %23 ]\n  %113 = and i64 %112, 1\n  %114 = icmp eq i64 %113, 0\n  br i1 %114, label %115, label %164\n\n115:                                              ; preds = %106\n  %116 = lshr i64 %112, 1\n  %117 = and i64 %116, 2147483647\n  %118 = getelementptr inbounds float, float* %83, i64 %117\n  %119 = icmp eq float* %110, %107\n  br i1 %119, label %123, label %120\n\n120:                                              ; preds = %115\n  %121 = load float, float* %118, align 4, !tbaa !10\n  store float %121, float* %110, align 4, !tbaa !10\n  %122 = getelementptr inbounds float, float* %110, i64 1\n  store float* %122, float** %26, align 8, !tbaa !3\n  br label %207\n\n123:                                              ; preds = %115\n  %124 = ptrtoint float* %107 to i64\n  %125 = ptrtoint float* %108 to i64\n  %126 = sub i64 %124, %125\n  %127 = ashr exact i64 %126, 2\n  %128 = icmp eq i64 %126, 9223372036854775804\n  br i1 %128, label %129, label %131\n\n129:                                              ; preds = %123\n  invoke void @_ZSt20__throw_length_errorPKc(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str, i64 0, i64 0)) #9\n          to label %130 unwind label %162\n\n130:                                              ; preds = %129\n  unreachable\n\n131:                                              ; preds = %123\n  %132 = icmp eq i64 %126, 0\n  %133 = select i1 %132, i64 1, i64 %127\n  %134 = add nsw i64 %133, %127\n  %135 = icmp ult i64 %134, %127\n  %136 = icmp ugt i64 %134, 2305843009213693951\n  %137 = or i1 %135, %136\n  %138 = select i1 %137, i64 2305843009213693951, i64 %134\n  %139 = icmp eq i64 %138, 0\n  br i1 %139, label %145, label %140\n\n140:                                              ; preds = %131\n  %141 = shl nuw nsw i64 %138, 2\n  %142 = invoke noalias nonnull i8* @_Znwm(i64 %141) #10\n          to label %143 unwind label %160\n\n143:                                              ; preds = %140\n  %144 = bitcast i8* %142 to float*\n  br label %145\n\n145:                                              ; preds = %143, %131\n  %146 = phi float* [ %144, %143 ], [ null, %131 ]\n  %147 = getelementptr inbounds float, float* %146, i64 %127\n  %148 = load float, float* %118, align 4, !tbaa !10\n  store float %148, float* %147, align 4, !tbaa !10\n  %149 = icmp sgt i64 %126, 0\n  br i1 %149, label %150, label %153\n\n150:                                              ; preds = %145\n  %151 = bitcast float* %146 to i8*\n  %152 = bitcast float* %108 to i8*\n  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %151, i8* align 4 %152, i64 %126, i1 false) #8\n  br label %153\n\n153:                                              ; preds = %150, %145\n  %154 = getelementptr inbounds float, float* %147, i64 1\n  %155 = icmp eq float* %108, null\n  br i1 %155, label %158, label %156\n\n156:                                              ; preds = %153\n  %157 = bitcast float* %108 to i8*\n  tail call void @_ZdlPv(i8* nonnull %157) #8\n  br label %158\n\n158:                                              ; preds = %156, %153\n  store float* %146, float** %28, align 8, !tbaa !8\n  store float* %154, float** %26, align 8, !tbaa !3\n  %159 = getelementptr inbounds float, float* %146, i64 %138\n  store float* %159, float** %27, align 8, !tbaa !14\n  br label %207\n\n160:                                              ; preds = %140, %187\n  %161 = landingpad { i8*, i32 }\n          cleanup\n  br label %220\n\n162:                                              ; preds = %129, %176\n  %163 = landingpad { i8*, i32 }\n          cleanup\n  br label %220\n\n164:                                              ; preds = %106\n  %165 = getelementptr inbounds float, float* %111, i64 %112\n  %166 = icmp eq float* %110, %109\n  br i1 %166, label %170, label %167\n\n167:                                              ; preds = %164\n  %168 = load float, float* %165, align 4, !tbaa !10\n  store float %168, float* %110, align 4, !tbaa !10\n  %169 = getelementptr inbounds float, float* %110, i64 1\n  store float* %169, float** %26, align 8, !tbaa !3\n  br label %207\n\n170:                                              ; preds = %164\n  %171 = ptrtoint float* %109 to i64\n  %172 = ptrtoint float* %108 to i64\n  %173 = sub i64 %171, %172\n  %174 = ashr exact i64 %173, 2\n  %175 = icmp eq i64 %173, 9223372036854775804\n  br i1 %175, label %176, label %178\n\n176:                                              ; preds = %170\n  invoke void @_ZSt20__throw_length_errorPKc(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str, i64 0, i64 0)) #9\n          to label %177 unwind label %162\n\n177:                                              ; preds = %176\n  unreachable\n\n178:                                              ; preds = %170\n  %179 = icmp eq i64 %173, 0\n  %180 = select i1 %179, i64 1, i64 %174\n  %181 = add nsw i64 %180, %174\n  %182 = icmp ult i64 %181, %174\n  %183 = icmp ugt i64 %181, 2305843009213693951\n  %184 = or i1 %182, %183\n  %185 = select i1 %184, i64 2305843009213693951, i64 %181\n  %186 = icmp eq i64 %185, 0\n  br i1 %186, label %192, label %187\n\n187:                                              ; preds = %178\n  %188 = shl nuw nsw i64 %185, 2\n  %189 = invoke noalias nonnull i8* @_Znwm(i64 %188) #10\n          to label %190 unwind label %160\n\n190:                                              ; preds = %187\n  %191 = bitcast i8* %189 to float*\n  br label %192\n\n192:                                              ; preds = %190, %178\n  %193 = phi float* [ %191, %190 ], [ null, %178 ]\n  %194 = getelementptr inbounds float, float* %193, i64 %174\n  %195 = load float, float* %165, align 4, !tbaa !10\n  store float %195, float* %194, align 4, !tbaa !10\n  %196 = icmp sgt i64 %173, 0\n  br i1 %196, label %197, label %200\n\n197:                                              ; preds = %192\n  %198 = bitcast float* %193 to i8*\n  %199 = bitcast float* %108 to i8*\n  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %198, i8* align 4 %199, i64 %173, i1 false) #8\n  br label %200\n\n200:                                              ; preds = %197, %192\n  %201 = getelementptr inbounds float, float* %194, i64 1\n  %202 = icmp eq float* %108, null\n  br i1 %202, label %205, label %203\n\n203:                                              ; preds = %200\n  %204 = bitcast float* %108 to i8*\n  tail call void @_ZdlPv(i8* nonnull %204) #8\n  br label %205\n\n205:                                              ; preds = %203, %200\n  store float* %193, float** %28, align 8, !tbaa !8\n  store float* %201, float** %26, align 8, !tbaa !3\n  %206 = getelementptr inbounds float, float* %193, i64 %185\n  store float* %206, float** %27, align 8, !tbaa !14\n  br label %207\n\n207:                                              ; preds = %205, %167, %120, %158\n  %208 = phi float* [ %206, %205 ], [ %107, %167 ], [ %107, %120 ], [ %159, %158 ]\n  %209 = phi float* [ %193, %205 ], [ %108, %167 ], [ %108, %120 ], [ %146, %158 ]\n  %210 = phi float* [ %206, %205 ], [ %109, %167 ], [ %107, %120 ], [ %159, %158 ]\n  %211 = phi float* [ %201, %205 ], [ %169, %167 ], [ %122, %120 ], [ %154, %158 ]\n  %212 = add nuw i64 %112, 1\n  %213 = load float*, float** %3, align 8, !tbaa !3\n  %214 = load float*, float** %4, align 8, !tbaa !8\n  %215 = ptrtoint float* %213 to i64\n  %216 = ptrtoint float* %214 to i64\n  %217 = sub i64 %215, %216\n  %218 = ashr exact i64 %217, 2\n  %219 = icmp ugt i64 %218, %212\n  br i1 %219, label %106, label %99, !llvm.loop !15\n\n220:                                              ; preds = %160, %162, %95, %97, %104\n  %221 = phi float* [ null, %104 ], [ null, %95 ], [ null, %97 ], [ %108, %160 ], [ %108, %162 ]\n  %222 = phi float* [ %83, %104 ], [ %37, %95 ], [ %37, %97 ], [ %83, %160 ], [ %83, %162 ]\n  %223 = phi { i8*, i32 } [ %105, %104 ], [ %96, %95 ], [ %98, %97 ], [ %161, %160 ], [ %163, %162 ]\n  %224 = icmp eq float* %222, null\n  br i1 %224, label %227, label %225\n\n225:                                              ; preds = %220\n  %226 = bitcast float* %222 to i8*\n  tail call void @_ZdlPv(i8* nonnull %226) #8\n  br label %227\n\n227:                                              ; preds = %220, %225\n  %228 = icmp eq float* %221, null\n  br i1 %228, label %231, label %229\n\n229:                                              ; preds = %227\n  %230 = bitcast float* %221 to i8*\n  tail call void @_ZdlPv(i8* nonnull %230) #8\n  br label %231\n\n231:                                              ; preds = %227, %229\n  resume { i8*, i32 } %223\n}\n\n; Function Attrs: argmemonly mustprogress nofree nounwind willreturn writeonly\ndeclare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1\n\n; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn\ndeclare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2\n\ndeclare dso_local i32 @__gxx_personality_v0(...)\n\n; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn\ndeclare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2\n\n; Function Attrs: nobuiltin nounwind\ndeclare dso_local void @_ZdlPv(i8*) local_unnamed_addr #3\n\n; Function Attrs: noreturn\ndeclare dso_local void @_ZSt20__throw_length_errorPKc(i8*) local_unnamed_addr #4\n\n; Function Attrs: nobuiltin allocsize(0)\ndeclare dso_local nonnull i8* @_Znwm(i64) local_unnamed_addr #5\n\n; Function Attrs: argmemonly mustprogress nofree nounwind willreturn\ndeclare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #6\n\n; Function Attrs: uwtable\ndefine linkonce_odr dso_local void @_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEElNS0_5__ops15_Iter_less_iterEEvT_S9_T0_T1_(float* %0, float* %1, i64 %2) local_unnamed_addr #0 comdat {\n  %4 = alloca %\"struct.__gnu_cxx::__ops::_Iter_less_iter\", align 1\n  %5 = ptrtoint float* %0 to i64\n  %6 = getelementptr inbounds float, float* %0, i64 1\n  %7 = ptrtoint float* %1 to i64\n  %8 = sub i64 %7, %5\n  %9 = icmp sgt i64 %8, 64\n  br i1 %9, label %10, label %123\n\n10:                                               ; preds = %3, %119\n  %11 = phi i64 [ %121, %119 ], [ %8, %3 ]\n  %12 = phi i64 [ %76, %119 ], [ %2, %3 ]\n  %13 = phi float* [ %107, %119 ], [ %1, %3 ]\n  %14 = icmp eq i64 %12, 0\n  br i1 %14, label %15, label %74\n\n15:                                               ; preds = %10\n  %16 = getelementptr inbounds %\"struct.__gnu_cxx::__ops::_Iter_less_iter\", %\"struct.__gnu_cxx::__ops::_Iter_less_iter\"* %4, i64 0, i32 0\n  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %16)\n  call void @_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_RT0_(float* %0, float* %13, %\"struct.__gnu_cxx::__ops::_Iter_less_iter\"* nonnull align 1 dereferenceable(1) %4)\n  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %16)\n  br label %17\n\n17:                                               ; preds = %15, %70\n  %18 = phi float* [ %19, %70 ], [ %13, %15 ]\n  %19 = getelementptr inbounds float, float* %18, i64 -1\n  %20 = load float, float* %19, align 4, !tbaa !10\n  %21 = load float, float* %0, align 4, !tbaa !10\n  store float %21, float* %19, align 4, !tbaa !10\n  %22 = ptrtoint float* %19 to i64\n  %23 = sub i64 %22, %5\n  %24 = ashr exact i64 %23, 2\n  %25 = add nsw i64 %24, -1\n  %26 = sdiv i64 %25, 2\n  %27 = icmp sgt i64 %23, 8\n  br i1 %27, label %28, label %43\n\n28:                                               ; preds = %17, %28\n  %29 = phi i64 [ %38, %28 ], [ 0, %17 ]\n  %30 = shl i64 %29, 1\n  %31 = add i64 %30, 2\n  %32 = getelementptr inbounds float, float* %0, i64 %31\n  %33 = or i64 %30, 1\n  %34 = getelementptr inbounds float, float* %0, i64 %33\n  %35 = load float, float* %32, align 4, !tbaa !10\n  %36 = load float, float* %34, align 4, !tbaa !10\n  %37 = fcmp olt float %35, %36\n  %38 = select i1 %37, i64 %33, i64 %31\n  %39 = getelementptr inbounds float, float* %0, i64 %38\n  %40 = load float, float* %39, align 4, !tbaa !10\n  %41 = getelementptr inbounds float, float* %0, i64 %29\n  store float %40, float* %41, align 4, !tbaa !10\n  %42 = icmp slt i64 %38, %26\n  br i1 %42, label %28, label %43, !llvm.loop !16\n\n43:                                               ; preds = %28, %17\n  %44 = phi i64 [ 0, %17 ], [ %38, %28 ]\n  %45 = and i64 %23, 4\n  %46 = icmp eq i64 %45, 0\n  br i1 %46, label %47, label %57\n\n47:                                               ; preds = %43\n  %48 = add nsw i64 %24, -2\n  %49 = sdiv i64 %48, 2\n  %50 = icmp eq i64 %44, %49\n  br i1 %50, label %51, label %57\n\n51:                                               ; preds = %47\n  %52 = shl i64 %44, 1\n  %53 = or i64 %52, 1\n  %54 = getelementptr inbounds float, float* %0, i64 %53\n  %55 = load float, float* %54, align 4, !tbaa !10\n  %56 = getelementptr inbounds float, float* %0, i64 %44\n  store float %55, float* %56, align 4, !tbaa !10\n  br label %57\n\n57:                                               ; preds = %51, %47, %43\n  %58 = phi i64 [ %53, %51 ], [ %44, %47 ], [ %44, %43 ]\n  %59 = icmp sgt i64 %58, 0\n  br i1 %59, label %60, label %70\n\n60:                                               ; preds = %57, %67\n  %61 = phi i64 [ %63, %67 ], [ %58, %57 ]\n  %62 = add nsw i64 %61, -1\n  %63 = lshr i64 %62, 1\n  %64 = getelementptr inbounds float, float* %0, i64 %63\n  %65 = load float, float* %64, align 4, !tbaa !10\n  %66 = fcmp olt float %65, %20\n  br i1 %66, label %67, label %70\n\n67:                                               ; preds = %60\n  %68 = getelementptr inbounds float, float* %0, i64 %61\n  store float %65, float* %68, align 4, !tbaa !10\n  %69 = icmp ult i64 %62, 2\n  br i1 %69, label %70, label %60, !llvm.loop !17\n\n70:                                               ; preds = %67, %60, %57\n  %71 = phi i64 [ %58, %57 ], [ %61, %60 ], [ 0, %67 ]\n  %72 = getelementptr inbounds float, float* %0, i64 %71\n  store float %20, float* %72, align 4, !tbaa !10\n  %73 = icmp sgt i64 %23, 4\n  br i1 %73, label %17, label %123, !llvm.loop !18\n\n74:                                               ; preds = %10\n  %75 = lshr i64 %11, 3\n  %76 = add nsw i64 %12, -1\n  %77 = getelementptr inbounds float, float* %0, i64 %75\n  %78 = getelementptr inbounds float, float* %13, i64 -1\n  %79 = load float, float* %6, align 4, !tbaa !10\n  %80 = load float, float* %77, align 4, !tbaa !10\n  %81 = fcmp olt float %79, %80\n  %82 = load float, float* %78, align 4, !tbaa !10\n  br i1 %81, label %83, label %92\n\n83:                                               ; preds = %74\n  %84 = fcmp olt float %80, %82\n  br i1 %84, label %85, label %87\n\n85:                                               ; preds = %83\n  %86 = load float, float* %0, align 4, !tbaa !10\n  store float %80, float* %0, align 4, !tbaa !10\n  store float %86, float* %77, align 4, !tbaa !10\n  br label %101\n\n87:                                               ; preds = %83\n  %88 = fcmp olt float %79, %82\n  %89 = load float, float* %0, align 4, !tbaa !10\n  br i1 %88, label %90, label %91\n\n90:                                               ; preds = %87\n  store float %82, float* %0, align 4, !tbaa !10\n  store float %89, float* %78, align 4, !tbaa !10\n  br label %101\n\n91:                                               ; preds = %87\n  store float %79, float* %0, align 4, !tbaa !10\n  store float %89, float* %6, align 4, !tbaa !10\n  br label %101\n\n92:                                               ; preds = %74\n  %93 = fcmp olt float %79, %82\n  br i1 %93, label %94, label %96\n\n94:                                               ; preds = %92\n  %95 = load float, float* %0, align 4, !tbaa !10\n  store float %79, float* %0, align 4, !tbaa !10\n  store float %95, float* %6, align 4, !tbaa !10\n  br label %101\n\n96:                                               ; preds = %92\n  %97 = fcmp olt float %80, %82\n  %98 = load float, float* %0, align 4, !tbaa !10\n  br i1 %97, label %99, label %100\n\n99:                                               ; preds = %96\n  store float %82, float* %0, align 4, !tbaa !10\n  store float %98, float* %78, align 4, !tbaa !10\n  br label %101\n\n100:                                              ; preds = %96\n  store float %80, float* %0, align 4, !tbaa !10\n  store float %98, float* %77, align 4, !tbaa !10\n  br label %101\n\n101:                                              ; preds = %100, %99, %94, %91, %90, %85\n  br label %102\n\n102:                                              ; preds = %101, %118\n  %103 = phi float* [ %110, %118 ], [ %6, %101 ]\n  %104 = phi float* [ %113, %118 ], [ %13, %101 ]\n  %105 = load float, float* %0, align 4, !tbaa !10\n  br label %106\n\n106:                                              ; preds = %106, %102\n  %107 = phi float* [ %103, %102 ], [ %110, %106 ]\n  %108 = load float, float* %107, align 4, !tbaa !10\n  %109 = fcmp olt float %108, %105\n  %110 = getelementptr inbounds float, float* %107, i64 1\n  br i1 %109, label %106, label %111, !llvm.loop !19\n\n111:                                              ; preds = %106, %111\n  %112 = phi float* [ %113, %111 ], [ %104, %106 ]\n  %113 = getelementptr inbounds float, float* %112, i64 -1\n  %114 = load float, float* %113, align 4, !tbaa !10\n  %115 = fcmp olt float %105, %114\n  br i1 %115, label %111, label %116, !llvm.loop !20\n\n116:                                              ; preds = %111\n  %117 = icmp ult float* %107, %113\n  br i1 %117, label %118, label %119\n\n118:                                              ; preds = %116\n  store float %114, float* %107, align 4, !tbaa !10\n  store float %108, float* %113, align 4, !tbaa !10\n  br label %102, !llvm.loop !21\n\n119:                                              ; preds = %116\n  tail call void @_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEElNS0_5__ops15_Iter_less_iterEEvT_S9_T0_T1_(float* nonnull %107, float* %13, i64 %76)\n  %120 = ptrtoint float* %107 to i64\n  %121 = sub i64 %120, %5\n  %122 = icmp sgt i64 %121, 64\n  br i1 %122, label %10, label %123, !llvm.loop !22\n\n123:                                              ; preds = %119, %70, %3\n  ret void\n}\n\n; Function Attrs: uwtable\ndefine linkonce_odr dso_local void @_ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_(float* %0, float* %1) local_unnamed_addr #0 comdat {\n  %3 = ptrtoint float* %1 to i64\n  %4 = ptrtoint float* %0 to i64\n  %5 = sub i64 %3, %4\n  %6 = icmp sgt i64 %5, 64\n  br i1 %6, label %7, label %40\n\n7:                                                ; preds = %2\n  %8 = bitcast float* %0 to i8*\n  %9 = getelementptr float, float* %0, i64 1\n  %10 = load float, float* %9, align 4, !tbaa !10\n  %11 = load float, float* %0, align 4, !tbaa !10\n  %12 = fcmp olt float %10, %11\n  br i1 %12, label %13, label %17\n\n13:                                               ; preds = %7\n  %14 = bitcast float* %0 to i32*\n  %15 = bitcast float* %9 to i32*\n  %16 = load i32, i32* %14, align 4\n  store i32 %16, i32* %15, align 4\n  br label %17\n\n17:                                               ; preds = %7, %13\n  %18 = phi float* [ %0, %13 ], [ %9, %7 ]\n  store float %10, float* %18, align 4, !tbaa !10\n  %19 = getelementptr inbounds float, float* %0, i64 2\n  %20 = load float, float* %19, align 4, !tbaa !10\n  %21 = load float, float* %0, align 4, !tbaa !10\n  %22 = fcmp olt float %20, %21\n  br i1 %22, label %86, label %76\n\n23:                                               ; preds = %324, %36\n  %24 = phi float* [ %38, %36 ], [ %326, %324 ]\n  %25 = load float, float* %24, align 4, !tbaa !10\n  %26 = getelementptr inbounds float, float* %24, i64 -1\n  %27 = load float, float* %26, align 4, !tbaa !10\n  %28 = fcmp olt float %25, %27\n  br i1 %28, label %29, label %36\n\n29:                                               ; preds = %23, %29\n  %30 = phi float [ %34, %29 ], [ %27, %23 ]\n  %31 = phi float* [ %33, %29 ], [ %26, %23 ]\n  %32 = phi float* [ %31, %29 ], [ %24, %23 ]\n  store float %30, float* %32, align 4, !tbaa !10\n  %33 = getelementptr inbounds float, float* %31, i64 -1\n  %34 = load float, float* %33, align 4, !tbaa !10\n  %35 = fcmp olt float %25, %34\n  br i1 %35, label %29, label %36, !llvm.loop !23\n\n36:                                               ; preds = %29, %23\n  %37 = phi float* [ %24, %23 ], [ %31, %29 ]\n  store float %25, float* %37, align 4, !tbaa !10\n  %38 = getelementptr inbounds float, float* %24, i64 1\n  %39 = icmp eq float* %38, %1\n  br i1 %39, label %75, label %23, !llvm.loop !24\n\n40:                                               ; preds = %2\n  %41 = icmp eq float* %0, %1\n  br i1 %41, label %75, label %42\n\n42:                                               ; preds = %40\n  %43 = bitcast float* %0 to i8*\n  %44 = getelementptr inbounds float, float* %0, i64 1\n  %45 = icmp eq float* %44, %1\n  br i1 %45, label %75, label %46\n\n46:                                               ; preds = %42, %71\n  %47 = phi float* [ %73, %71 ], [ %44, %42 ]\n  %48 = phi float* [ %47, %71 ], [ %0, %42 ]\n  %49 = load float, float* %47, align 4, !tbaa !10\n  %50 = load float, float* %0, align 4, !tbaa !10\n  %51 = fcmp olt float %49, %50\n  br i1 %51, label %52, label %61\n\n52:                                               ; preds = %46\n  %53 = ptrtoint float* %47 to i64\n  %54 = sub i64 %53, %4\n  %55 = icmp eq i64 %54, 0\n  br i1 %55, label %71, label %56\n\n56:                                               ; preds = %52\n  %57 = ashr exact i64 %54, 2\n  %58 = sub nsw i64 2, %57\n  %59 = getelementptr inbounds float, float* %48, i64 %58\n  %60 = bitcast float* %59 to i8*\n  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* nonnull align 4 %60, i8* nonnull align 4 %43, i64 %54, i1 false) #8\n  br label %71\n\n61:                                               ; preds = %46\n  %62 = load float, float* %48, align 4, !tbaa !10\n  %63 = fcmp olt float %49, %62\n  br i1 %63, label %64, label %71\n\n64:                                               ; preds = %61, %64\n  %65 = phi float [ %69, %64 ], [ %62, %61 ]\n  %66 = phi float* [ %68, %64 ], [ %48, %61 ]\n  %67 = phi float* [ %66, %64 ], [ %47, %61 ]\n  store float %65, float* %67, align 4, !tbaa !10\n  %68 = getelementptr inbounds float, float* %66, i64 -1\n  %69 = load float, float* %68, align 4, !tbaa !10\n  %70 = fcmp olt float %49, %69\n  br i1 %70, label %64, label %71, !llvm.loop !23\n\n71:                                               ; preds = %64, %61, %56, %52\n  %72 = phi float* [ %0, %52 ], [ %0, %56 ], [ %47, %61 ], [ %66, %64 ]\n  store float %49, float* %72, align 4, !tbaa !10\n  %73 = getelementptr inbounds float, float* %47, i64 1\n  %74 = icmp eq float* %73, %1\n  br i1 %74, label %75, label %46, !llvm.loop !25\n\n75:                                               ; preds = %71, %36, %42, %40, %324\n  ret void\n\n76:                                               ; preds = %17\n  %77 = load float, float* %9, align 4, !tbaa !10\n  %78 = fcmp olt float %20, %77\n  br i1 %78, label %79, label %90\n\n79:                                               ; preds = %76, %79\n  %80 = phi float [ %84, %79 ], [ %77, %76 ]\n  %81 = phi float* [ %83, %79 ], [ %9, %76 ]\n  %82 = phi float* [ %81, %79 ], [ %19, %76 ]\n  store float %80, float* %82, align 4, !tbaa !10\n  %83 = getelementptr inbounds float, float* %81, i64 -1\n  %84 = load float, float* %83, align 4, !tbaa !10\n  %85 = fcmp olt float %20, %84\n  br i1 %85, label %79, label %90, !llvm.loop !23\n\n86:                                               ; preds = %17\n  %87 = bitcast float* %0 to i64*\n  %88 = bitcast float* %9 to i64*\n  %89 = load i64, i64* %87, align 4\n  store i64 %89, i64* %88, align 4\n  br label %90\n\n90:                                               ; preds = %79, %86, %76\n  %91 = phi float* [ %0, %86 ], [ %19, %76 ], [ %81, %79 ]\n  store float %20, float* %91, align 4, !tbaa !10\n  %92 = getelementptr inbounds float, float* %0, i64 3\n  %93 = load float, float* %92, align 4, !tbaa !10\n  %94 = load float, float* %0, align 4, !tbaa !10\n  %95 = fcmp olt float %93, %94\n  br i1 %95, label %106, label %96\n\n96:                                               ; preds = %90\n  %97 = load float, float* %19, align 4, !tbaa !10\n  %98 = fcmp olt float %93, %97\n  br i1 %98, label %99, label %108\n\n99:                                               ; preds = %96, %99\n  %100 = phi float [ %104, %99 ], [ %97, %96 ]\n  %101 = phi float* [ %103, %99 ], [ %19, %96 ]\n  %102 = phi float* [ %101, %99 ], [ %92, %96 ]\n  store float %100, float* %102, align 4, !tbaa !10\n  %103 = getelementptr inbounds float, float* %101, i64 -1\n  %104 = load float, float* %103, align 4, !tbaa !10\n  %105 = fcmp olt float %93, %104\n  br i1 %105, label %99, label %108, !llvm.loop !23\n\n106:                                              ; preds = %90\n  %107 = bitcast float* %9 to i8*\n  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* noundef nonnull align 4 dereferenceable(12) %107, i8* noundef nonnull align 4 dereferenceable(12) %8, i64 12, i1 false) #8\n  br label %108\n\n108:                                              ; preds = %99, %106, %96\n  %109 = phi float* [ %0, %106 ], [ %92, %96 ], [ %101, %99 ]\n  store float %93, float* %109, align 4, !tbaa !10\n  %110 = getelementptr inbounds float, float* %0, i64 4\n  %111 = load float, float* %110, align 4, !tbaa !10\n  %112 = load float, float* %0, align 4, !tbaa !10\n  %113 = fcmp olt float %111, %112\n  br i1 %113, label %124, label %114\n\n114:                                              ; preds = %108\n  %115 = load float, float* %92, align 4, !tbaa !10\n  %116 = fcmp olt float %111, %115\n  br i1 %116, label %117, label %126\n\n117:                                              ; preds = %114, %117\n  %118 = phi float [ %122, %117 ], [ %115, %114 ]\n  %119 = phi float* [ %121, %117 ], [ %92, %114 ]\n  %120 = phi float* [ %119, %117 ], [ %110, %114 ]\n  store float %118, float* %120, align 4, !tbaa !10\n  %121 = getelementptr inbounds float, float* %119, i64 -1\n  %122 = load float, float* %121, align 4, !tbaa !10\n  %123 = fcmp olt float %111, %122\n  br i1 %123, label %117, label %126, !llvm.loop !23\n\n124:                                              ; preds = %108\n  %125 = bitcast float* %9 to i8*\n  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* noundef nonnull align 4 dereferenceable(16) %125, i8* noundef nonnull align 4 dereferenceable(16) %8, i64 16, i1 false) #8\n  br label %126\n\n126:                                              ; preds = %117, %124, %114\n  %127 = phi float* [ %0, %124 ], [ %110, %114 ], [ %119, %117 ]\n  store float %111, float* %127, align 4, !tbaa !10\n  %128 = getelementptr inbounds float, float* %0, i64 5\n  %129 = load float, float* %128, align 4, !tbaa !10\n  %130 = load float, float* %0, align 4, !tbaa !10\n  %131 = fcmp olt float %129, %130\n  br i1 %131, label %142, label %132\n\n132:                                              ; preds = %126\n  %133 = load float, float* %110, align 4, !tbaa !10\n  %134 = fcmp olt float %129, %133\n  br i1 %134, label %135, label %144\n\n135:                                              ; preds = %132, %135\n  %136 = phi float [ %140, %135 ], [ %133, %132 ]\n  %137 = phi float* [ %139, %135 ], [ %110, %132 ]\n  %138 = phi float* [ %137, %135 ], [ %128, %132 ]\n  store float %136, float* %138, align 4, !tbaa !10\n  %139 = getelementptr inbounds float, float* %137, i64 -1\n  %140 = load float, float* %139, align 4, !tbaa !10\n  %141 = fcmp olt float %129, %140\n  br i1 %141, label %135, label %144, !llvm.loop !23\n\n142:                                              ; preds = %126\n  %143 = bitcast float* %9 to i8*\n  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* noundef nonnull align 4 dereferenceable(20) %143, i8* noundef nonnull align 4 dereferenceable(20) %8, i64 20, i1 false) #8\n  br label %144\n\n144:                                              ; preds = %135, %142, %132\n  %145 = phi float* [ %0, %142 ], [ %128, %132 ], [ %137, %135 ]\n  store float %129, float* %145, align 4, !tbaa !10\n  %146 = getelementptr inbounds float, float* %0, i64 6\n  %147 = load float, float* %146, align 4, !tbaa !10\n  %148 = load float, float* %0, align 4, !tbaa !10\n  %149 = fcmp olt float %147, %148\n  br i1 %149, label %160, label %150\n\n150:                                              ; preds = %144\n  %151 = load float, float* %128, align 4, !tbaa !10\n  %152 = fcmp olt float %147, %151\n  br i1 %152, label %153, label %162\n\n153:                                              ; preds = %150, %153\n  %154 = phi float [ %158, %153 ], [ %151, %150 ]\n  %155 = phi float* [ %157, %153 ], [ %128, %150 ]\n  %156 = phi float* [ %155, %153 ], [ %146, %150 ]\n  store float %154, float* %156, align 4, !tbaa !10\n  %157 = getelementptr inbounds float, float* %155, i64 -1\n  %158 = load float, float* %157, align 4, !tbaa !10\n  %159 = fcmp olt float %147, %158\n  br i1 %159, label %153, label %162, !llvm.loop !23\n\n160:                                              ; preds = %144\n  %161 = bitcast float* %9 to i8*\n  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* noundef nonnull align 4 dereferenceable(24) %161, i8* noundef nonnull align 4 dereferenceable(24) %8, i64 24, i1 false) #8\n  br label %162\n\n162:                                              ; preds = %153, %160, %150\n  %163 = phi float* [ %0, %160 ], [ %146, %150 ], [ %155, %153 ]\n  store float %147, float* %163, align 4, !tbaa !10\n  %164 = getelementptr inbounds float, float* %0, i64 7\n  %165 = load float, float* %164, align 4, !tbaa !10\n  %166 = load float, float* %0, align 4, !tbaa !10\n  %167 = fcmp olt float %165, %166\n  br i1 %167, label %178, label %168\n\n168:                                              ; preds = %162\n  %169 = load float, float* %146, align 4, !tbaa !10\n  %170 = fcmp olt float %165, %169\n  br i1 %170, label %171, label %180\n\n171:                                              ; preds = %168, %171\n  %172 = phi float [ %176, %171 ], [ %169, %168 ]\n  %173 = phi float* [ %175, %171 ], [ %146, %168 ]\n  %174 = phi float* [ %173, %171 ], [ %164, %168 ]\n  store float %172, float* %174, align 4, !tbaa !10\n  %175 = getelementptr inbounds float, float* %173, i64 -1\n  %176 = load float, float* %175, align 4, !tbaa !10\n  %177 = fcmp olt float %165, %176\n  br i1 %177, label %171, label %180, !llvm.loop !23\n\n178:                                              ; preds = %162\n  %179 = bitcast float* %9 to i8*\n  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* noundef nonnull align 4 dereferenceable(28) %179, i8* noundef nonnull align 4 dereferenceable(28) %8, i64 28, i1 false) #8\n  br label %180\n\n180:                                              ; preds = %171, %178, %168\n  %181 = phi float* [ %0, %178 ], [ %164, %168 ], [ %173, %171 ]\n  store float %165, float* %181, align 4, !tbaa !10\n  %182 = getelementptr inbounds float, float* %0, i64 8\n  %183 = load float, float* %182, align 4, !tbaa !10\n  %184 = load float, float* %0, align 4, !tbaa !10\n  %185 = fcmp olt float %183, %184\n  br i1 %185, label %196, label %186\n\n186:                                              ; preds = %180\n  %187 = load float, float* %164, align 4, !tbaa !10\n  %188 = fcmp olt float %183, %187\n  br i1 %188, label %189, label %198\n\n189:                                              ; preds = %186, %189\n  %190 = phi float [ %194, %189 ], [ %187, %186 ]\n  %191 = phi float* [ %193, %189 ], [ %164, %186 ]\n  %192 = phi float* [ %191, %189 ], [ %182, %186 ]\n  store float %190, float* %192, align 4, !tbaa !10\n  %193 = getelementptr inbounds float, float* %191, i64 -1\n  %194 = load float, float* %193, align 4, !tbaa !10\n  %195 = fcmp olt float %183, %194\n  br i1 %195, label %189, label %198, !llvm.loop !23\n\n196:                                              ; preds = %180\n  %197 = bitcast float* %9 to i8*\n  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* noundef nonnull align 4 dereferenceable(32) %197, i8* noundef nonnull align 4 dereferenceable(32) %8, i64 32, i1 false) #8\n  br label %198\n\n198:                                              ; preds = %189, %196, %186\n  %199 = phi float* [ %0, %196 ], [ %182, %186 ], [ %191, %189 ]\n  store float %183, float* %199, align 4, !tbaa !10\n  %200 = getelementptr inbounds float, float* %0, i64 9\n  %201 = load float, float* %200, align 4, !tbaa !10\n  %202 = load float, float* %0, align 4, !tbaa !10\n  %203 = fcmp olt float %201, %202\n  br i1 %203, label %214, label %204\n\n204:                                              ; preds = %198\n  %205 = load float, float* %182, align 4, !tbaa !10\n  %206 = fcmp olt float %201, %205\n  br i1 %206, label %207, label %216\n\n207:                                              ; preds = %204, %207\n  %208 = phi float [ %212, %207 ], [ %205, %204 ]\n  %209 = phi float* [ %211, %207 ], [ %182, %204 ]\n  %210 = phi float* [ %209, %207 ], [ %200, %204 ]\n  store float %208, float* %210, align 4, !tbaa !10\n  %211 = getelementptr inbounds float, float* %209, i64 -1\n  %212 = load float, float* %211, align 4, !tbaa !10\n  %213 = fcmp olt float %201, %212\n  br i1 %213, label %207, label %216, !llvm.loop !23\n\n214:                                              ; preds = %198\n  %215 = bitcast float* %9 to i8*\n  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* noundef nonnull align 4 dereferenceable(36) %215, i8* noundef nonnull align 4 dereferenceable(36) %8, i64 36, i1 false) #8\n  br label %216\n\n216:                                              ; preds = %207, %214, %204\n  %217 = phi float* [ %0, %214 ], [ %200, %204 ], [ %209, %207 ]\n  store float %201, float* %217, align 4, !tbaa !10\n  %218 = getelementptr inbounds float, float* %0, i64 10\n  %219 = load float, float* %218, align 4, !tbaa !10\n  %220 = load float, float* %0, align 4, !tbaa !10\n  %221 = fcmp olt float %219, %220\n  br i1 %221, label %232, label %222\n\n222:                                              ; preds = %216\n  %223 = load float, float* %200, align 4, !tbaa !10\n  %224 = fcmp olt float %219, %223\n  br i1 %224, label %225, label %234\n\n225:                                              ; preds = %222, %225\n  %226 = phi float [ %230, %225 ], [ %223, %222 ]\n  %227 = phi float* [ %229, %225 ], [ %200, %222 ]\n  %228 = phi float* [ %227, %225 ], [ %218, %222 ]\n  store float %226, float* %228, align 4, !tbaa !10\n  %229 = getelementptr inbounds float, float* %227, i64 -1\n  %230 = load float, float* %229, align 4, !tbaa !10\n  %231 = fcmp olt float %219, %230\n  br i1 %231, label %225, label %234, !llvm.loop !23\n\n232:                                              ; preds = %216\n  %233 = bitcast float* %9 to i8*\n  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* noundef nonnull align 4 dereferenceable(40) %233, i8* noundef nonnull align 4 dereferenceable(40) %8, i64 40, i1 false) #8\n  br label %234\n\n234:                                              ; preds = %225, %232, %222\n  %235 = phi float* [ %0, %232 ], [ %218, %222 ], [ %227, %225 ]\n  store float %219, float* %235, align 4, !tbaa !10\n  %236 = getelementptr inbounds float, float* %0, i64 11\n  %237 = load float, float* %236, align 4, !tbaa !10\n  %238 = load float, float* %0, align 4, !tbaa !10\n  %239 = fcmp olt float %237, %238\n  br i1 %239, label %250, label %240\n\n240:                                              ; preds = %234\n  %241 = load float, float* %218, align 4, !tbaa !10\n  %242 = fcmp olt float %237, %241\n  br i1 %242, label %243, label %252\n\n243:                                              ; preds = %240, %243\n  %244 = phi float [ %248, %243 ], [ %241, %240 ]\n  %245 = phi float* [ %247, %243 ], [ %218, %240 ]\n  %246 = phi float* [ %245, %243 ], [ %236, %240 ]\n  store float %244, float* %246, align 4, !tbaa !10\n  %247 = getelementptr inbounds float, float* %245, i64 -1\n  %248 = load float, float* %247, align 4, !tbaa !10\n  %249 = fcmp olt float %237, %248\n  br i1 %249, label %243, label %252, !llvm.loop !23\n\n250:                                              ; preds = %234\n  %251 = bitcast float* %9 to i8*\n  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* noundef nonnull align 4 dereferenceable(44) %251, i8* noundef nonnull align 4 dereferenceable(44) %8, i64 44, i1 false) #8\n  br label %252\n\n252:                                              ; preds = %243, %250, %240\n  %253 = phi float* [ %0, %250 ], [ %236, %240 ], [ %245, %243 ]\n  store float %237, float* %253, align 4, !tbaa !10\n  %254 = getelementptr inbounds float, float* %0, i64 12\n  %255 = load float, float* %254, align 4, !tbaa !10\n  %256 = load float, float* %0, align 4, !tbaa !10\n  %257 = fcmp olt float %255, %256\n  br i1 %257, label %268, label %258\n\n258:                                              ; preds = %252\n  %259 = load float, float* %236, align 4, !tbaa !10\n  %260 = fcmp olt float %255, %259\n  br i1 %260, label %261, label %270\n\n261:                                              ; preds = %258, %261\n  %262 = phi float [ %266, %261 ], [ %259, %258 ]\n  %263 = phi float* [ %265, %261 ], [ %236, %258 ]\n  %264 = phi float* [ %263, %261 ], [ %254, %258 ]\n  store float %262, float* %264, align 4, !tbaa !10\n  %265 = getelementptr inbounds float, float* %263, i64 -1\n  %266 = load float, float* %265, align 4, !tbaa !10\n  %267 = fcmp olt float %255, %266\n  br i1 %267, label %261, label %270, !llvm.loop !23\n\n268:                                              ; preds = %252\n  %269 = bitcast float* %9 to i8*\n  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* noundef nonnull align 4 dereferenceable(48) %269, i8* noundef nonnull align 4 dereferenceable(48) %8, i64 48, i1 false) #8\n  br label %270\n\n270:                                              ; preds = %261, %268, %258\n  %271 = phi float* [ %0, %268 ], [ %254, %258 ], [ %263, %261 ]\n  store float %255, float* %271, align 4, !tbaa !10\n  %272 = getelementptr inbounds float, float* %0, i64 13\n  %273 = load float, float* %272, align 4, !tbaa !10\n  %274 = load float, float* %0, align 4, !tbaa !10\n  %275 = fcmp olt float %273, %274\n  br i1 %275, label %286, label %276\n\n276:                                              ; preds = %270\n  %277 = load float, float* %254, align 4, !tbaa !10\n  %278 = fcmp olt float %273, %277\n  br i1 %278, label %279, label %288\n\n279:                                              ; preds = %276, %279\n  %280 = phi float [ %284, %279 ], [ %277, %276 ]\n  %281 = phi float* [ %283, %279 ], [ %254, %276 ]\n  %282 = phi float* [ %281, %279 ], [ %272, %276 ]\n  store float %280, float* %282, align 4, !tbaa !10\n  %283 = getelementptr inbounds float, float* %281, i64 -1\n  %284 = load float, float* %283, align 4, !tbaa !10\n  %285 = fcmp olt float %273, %284\n  br i1 %285, label %279, label %288, !llvm.loop !23\n\n286:                                              ; preds = %270\n  %287 = bitcast float* %9 to i8*\n  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* noundef nonnull align 4 dereferenceable(52) %287, i8* noundef nonnull align 4 dereferenceable(52) %8, i64 52, i1 false) #8\n  br label %288\n\n288:                                              ; preds = %279, %286, %276\n  %289 = phi float* [ %0, %286 ], [ %272, %276 ], [ %281, %279 ]\n  store float %273, float* %289, align 4, !tbaa !10\n  %290 = getelementptr inbounds float, float* %0, i64 14\n  %291 = load float, float* %290, align 4, !tbaa !10\n  %292 = load float, float* %0, align 4, !tbaa !10\n  %293 = fcmp olt float %291, %292\n  br i1 %293, label %304, label %294\n\n294:                                              ; preds = %288\n  %295 = load float, float* %272, align 4, !tbaa !10\n  %296 = fcmp olt float %291, %295\n  br i1 %296, label %297, label %306\n\n297:                                              ; preds = %294, %297\n  %298 = phi float [ %302, %297 ], [ %295, %294 ]\n  %299 = phi float* [ %301, %297 ], [ %272, %294 ]\n  %300 = phi float* [ %299, %297 ], [ %290, %294 ]\n  store float %298, float* %300, align 4, !tbaa !10\n  %301 = getelementptr inbounds float, float* %299, i64 -1\n  %302 = load float, float* %301, align 4, !tbaa !10\n  %303 = fcmp olt float %291, %302\n  br i1 %303, label %297, label %306, !llvm.loop !23\n\n304:                                              ; preds = %288\n  %305 = bitcast float* %9 to i8*\n  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* noundef nonnull align 4 dereferenceable(56) %305, i8* noundef nonnull align 4 dereferenceable(56) %8, i64 56, i1 false) #8\n  br label %306\n\n306:                                              ; preds = %297, %304, %294\n  %307 = phi float* [ %0, %304 ], [ %290, %294 ], [ %299, %297 ]\n  store float %291, float* %307, align 4, !tbaa !10\n  %308 = getelementptr inbounds float, float* %0, i64 15\n  %309 = load float, float* %308, align 4, !tbaa !10\n  %310 = load float, float* %0, align 4, !tbaa !10\n  %311 = fcmp olt float %309, %310\n  br i1 %311, label %322, label %312\n\n312:                                              ; preds = %306\n  %313 = load float, float* %290, align 4, !tbaa !10\n  %314 = fcmp olt float %309, %313\n  br i1 %314, label %315, label %324\n\n315:                                              ; preds = %312, %315\n  %316 = phi float [ %320, %315 ], [ %313, %312 ]\n  %317 = phi float* [ %319, %315 ], [ %290, %312 ]\n  %318 = phi float* [ %317, %315 ], [ %308, %312 ]\n  store float %316, float* %318, align 4, !tbaa !10\n  %319 = getelementptr inbounds float, float* %317, i64 -1\n  %320 = load float, float* %319, align 4, !tbaa !10\n  %321 = fcmp olt float %309, %320\n  br i1 %321, label %315, label %324, !llvm.loop !23\n\n322:                                              ; preds = %306\n  %323 = bitcast float* %9 to i8*\n  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* noundef nonnull align 4 dereferenceable(60) %323, i8* noundef nonnull align 4 dereferenceable(60) %8, i64 60, i1 false) #8\n  br label %324\n\n324:                                              ; preds = %315, %322, %312\n  %325 = phi float* [ %0, %322 ], [ %308, %312 ], [ %317, %315 ]\n  store float %309, float* %325, align 4, !tbaa !10\n  %326 = getelementptr inbounds float, float* %0, i64 16\n  %327 = icmp eq float* %326, %1\n  br i1 %327, label %75, label %23\n}\n\n; Function Attrs: uwtable\ndefine linkonce_odr dso_local void @_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_RT0_(float* %0, float* %1, %\"struct.__gnu_cxx::__ops::_Iter_less_iter\"* nonnull align 1 dereferenceable(1) %2) local_unnamed_addr #0 comdat {\n  %4 = ptrtoint float* %1 to i64\n  %5 = ptrtoint float* %0 to i64\n  %6 = sub i64 %4, %5\n  %7 = ashr exact i64 %6, 2\n  %8 = icmp slt i64 %6, 8\n  br i1 %8, label %100, label %9\n\n9:                                                ; preds = %3\n  %10 = add nsw i64 %7, -2\n  %11 = lshr i64 %10, 1\n  %12 = add nsw i64 %7, -1\n  %13 = sdiv i64 %12, 2\n  %14 = and i64 %6, 4\n  %15 = icmp eq i64 %14, 0\n  br i1 %15, label %16, label %20\n\n16:                                               ; preds = %9\n  %17 = or i64 %10, 1\n  %18 = getelementptr inbounds float, float* %0, i64 %17\n  %19 = getelementptr inbounds float, float* %0, i64 %11\n  br label %57\n\n20:                                               ; preds = %9, %52\n  %21 = phi i64 [ %56, %52 ], [ %11, %9 ]\n  %22 = getelementptr inbounds float, float* %0, i64 %21\n  %23 = load float, float* %22, align 4, !tbaa !10\n  %24 = icmp sgt i64 %13, %21\n  br i1 %24, label %25, label %52\n\n25:                                               ; preds = %20, %25\n  %26 = phi i64 [ %35, %25 ], [ %21, %20 ]\n  %27 = shl i64 %26, 1\n  %28 = add i64 %27, 2\n  %29 = getelementptr inbounds float, float* %0, i64 %28\n  %30 = or i64 %27, 1\n  %31 = getelementptr inbounds float, float* %0, i64 %30\n  %32 = load float, float* %29, align 4, !tbaa !10\n  %33 = load float, float* %31, align 4, !tbaa !10\n  %34 = fcmp olt float %32, %33\n  %35 = select i1 %34, i64 %30, i64 %28\n  %36 = getelementptr inbounds float, float* %0, i64 %35\n  %37 = load float, float* %36, align 4, !tbaa !10\n  %38 = getelementptr inbounds float, float* %0, i64 %26\n  store float %37, float* %38, align 4, !tbaa !10\n  %39 = icmp slt i64 %35, %13\n  br i1 %39, label %25, label %40, !llvm.loop !16\n\n40:                                               ; preds = %25\n  %41 = icmp sgt i64 %35, %21\n  br i1 %41, label %42, label %52\n\n42:                                               ; preds = %40, %49\n  %43 = phi i64 [ %45, %49 ], [ %35, %40 ]\n  %44 = add nsw i64 %43, -1\n  %45 = sdiv i64 %44, 2\n  %46 = getelementptr inbounds float, float* %0, i64 %45\n  %47 = load float, float* %46, align 4, !tbaa !10\n  %48 = fcmp olt float %47, %23\n  br i1 %48, label %49, label %52\n\n49:                                               ; preds = %42\n  %50 = getelementptr inbounds float, float* %0, i64 %43\n  store float %47, float* %50, align 4, !tbaa !10\n  %51 = icmp sgt i64 %45, %21\n  br i1 %51, label %42, label %52, !llvm.loop !17\n\n52:                                               ; preds = %42, %49, %20, %40\n  %53 = phi i64 [ %35, %40 ], [ %21, %20 ], [ %45, %49 ], [ %43, %42 ]\n  %54 = getelementptr inbounds float, float* %0, i64 %53\n  store float %23, float* %54, align 4, !tbaa !10\n  %55 = icmp eq i64 %21, 0\n  %56 = add nsw i64 %21, -1\n  br i1 %55, label %100, label %20, !llvm.loop !26\n\n57:                                               ; preds = %16, %95\n  %58 = phi i64 [ %99, %95 ], [ %11, %16 ]\n  %59 = getelementptr inbounds float, float* %0, i64 %58\n  %60 = load float, float* %59, align 4, !tbaa !10\n  %61 = icmp sgt i64 %13, %58\n  br i1 %61, label %62, label %77\n\n62:                                               ; preds = %57, %62\n  %63 = phi i64 [ %72, %62 ], [ %58, %57 ]\n  %64 = shl i64 %63, 1\n  %65 = add i64 %64, 2\n  %66 = getelementptr inbounds float, float* %0, i64 %65\n  %67 = or i64 %64, 1\n  %68 = getelementptr inbounds float, float* %0, i64 %67\n  %69 = load float, float* %66, align 4, !tbaa !10\n  %70 = load float, float* %68, align 4, !tbaa !10\n  %71 = fcmp olt float %69, %70\n  %72 = select i1 %71, i64 %67, i64 %65\n  %73 = getelementptr inbounds float, float* %0, i64 %72\n  %74 = load float, float* %73, align 4, !tbaa !10\n  %75 = getelementptr inbounds float, float* %0, i64 %63\n  store float %74, float* %75, align 4, !tbaa !10\n  %76 = icmp slt i64 %72, %13\n  br i1 %76, label %62, label %77, !llvm.loop !16\n\n77:                                               ; preds = %62, %57\n  %78 = phi i64 [ %58, %57 ], [ %72, %62 ]\n  %79 = icmp eq i64 %78, %11\n  br i1 %79, label %80, label %82\n\n80:                                               ; preds = %77\n  %81 = load float, float* %18, align 4, !tbaa !10\n  store float %81, float* %19, align 4, !tbaa !10\n  br label %82\n\n82:                                               ; preds = %80, %77\n  %83 = phi i64 [ %17, %80 ], [ %78, %77 ]\n  %84 = icmp sgt i64 %83, %58\n  br i1 %84, label %85, label %95\n\n85:                                               ; preds = %82, %92\n  %86 = phi i64 [ %88, %92 ], [ %83, %82 ]\n  %87 = add nsw i64 %86, -1\n  %88 = sdiv i64 %87, 2\n  %89 = getelementptr inbounds float, float* %0, i64 %88\n  %90 = load float, float* %89, align 4, !tbaa !10\n  %91 = fcmp olt float %90, %60\n  br i1 %91, label %92, label %95\n\n92:                                               ; preds = %85\n  %93 = getelementptr inbounds float, float* %0, i64 %86\n  store float %90, float* %93, align 4, !tbaa !10\n  %94 = icmp sgt i64 %88, %58\n  br i1 %94, label %85, label %95, !llvm.loop !17\n\n95:                                               ; preds = %85, %92, %82\n  %96 = phi i64 [ %83, %82 ], [ %88, %92 ], [ %86, %85 ]\n  %97 = getelementptr inbounds float, float* %0, i64 %96\n  store float %60, float* %97, align 4, !tbaa !10\n  %98 = icmp eq i64 %58, 0\n  %99 = add nsw i64 %58, -1\n  br i1 %98, label %100, label %57, !llvm.loop !26\n\n100:                                              ; preds = %52, %95, %3\n  ret void\n}\n\n; Function Attrs: mustprogress nofree nosync nounwind readnone speculatable willreturn\ndeclare i64 @llvm.ctlz.i64(i64, i1 immarg) #7\n\nattributes #0 = { uwtable \"frame-pointer\"=\"none\" \"min-legal-vector-width\"=\"0\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #1 = { argmemonly mustprogress nofree nounwind willreturn writeonly }\nattributes #2 = { argmemonly mustprogress nofree nosync nounwind willreturn }\nattributes #3 = { nobuiltin nounwind \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #4 = { noreturn \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #5 = { nobuiltin allocsize(0) \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #6 = { argmemonly mustprogress nofree nounwind willreturn }\nattributes #7 = { mustprogress nofree nosync nounwind readnone speculatable willreturn }\nattributes #8 = { nounwind }\nattributes #9 = { noreturn }\nattributes #10 = { allocsize(0) }\n\n!llvm.module.flags = !{!0, !1}\n!llvm.ident = !{!2}\n\n!0 = !{i32 1, !\"wchar_size\", i32 4}\n!1 = !{i32 7, !\"uwtable\", i32 1}\n!2 = !{!\"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)\"}\n!3 = !{!4, !5, i64 8}\n!4 = !{!\"_ZTSNSt12_Vector_baseIfSaIfEE17_Vector_impl_dataE\", !5, i64 0, !5, i64 8, !5, i64 16}\n!5 = !{!\"any pointer\", !6, i64 0}\n!6 = !{!\"omnipotent char\", !7, i64 0}\n!7 = !{!\"Simple C++ TBAA\"}\n!8 = !{!4, !5, i64 0}\n!9 = !{i64 0, i64 65}\n!10 = !{!11, !11, i64 0}\n!11 = !{!\"float\", !6, i64 0}\n!12 = distinct !{!12, !13}\n!13 = !{!\"llvm.loop.mustprogress\"}\n!14 = !{!4, !5, i64 16}\n!15 = distinct !{!15, !13}\n!16 = distinct !{!16, !13}\n!17 = distinct !{!17, !13}\n!18 = distinct !{!18, !13}\n!19 = distinct !{!19, !13}\n!20 = distinct !{!20, !13}\n!21 = distinct !{!21, !13}\n!22 = distinct !{!22, !13}\n!23 = distinct !{!23, !13}\n!24 = distinct !{!24, !13}\n!25 = distinct !{!25, !13}\n!26 = distinct !{!26, !13}\n", "target": "This is the targeted source code:\n/*\nThis function takes a vector l and returns a vector l' such that\nl' is identical to l in the odd indicies, while its values at the even indicies are equal\nto the values of the even indicies of l, but sorted.\n>>> sort_even({1, 2, 3})\n{1, 2, 3}\n>>> sort_even({5, 6, 3, 4})\n{3, 6, 5, 4}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<float> sort_even(vector<float> l){\n\n    vector<float> out={};\n    vector<float> even={};\n    for (int i=0;i*2<l.size();i++)\n        even.push_back(l[i*2]);\n    sort(even.begin(),even.end());\n    for (int i=0;i<l.size();i++)\n    {\n        if (i%2==0) out.push_back(even[i/2]);\n        if (i%2==1) out.push_back(l[i]);\n    }\n    return out;\n}\n"}
{"input": "Convert this to C++:\n; ModuleID = '../../Human_xBenchmarks_164/CPP_38/CPP_38.cpp'\nsource_filename = \"../../Human_xBenchmarks_164/CPP_38/CPP_38.cpp\"\ntarget datalayout = \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\ntarget triple = \"x86_64-unknown-linux-gnu\"\n\n%\"class.std::__cxx11::basic_string\" = type { %\"struct.std::__cxx11::basic_string<char>::_Alloc_hider\", i64, %union.anon }\n%\"struct.std::__cxx11::basic_string<char>::_Alloc_hider\" = type { i8* }\n%union.anon = type { i64, [8 x i8] }\n\n@.str = private unnamed_addr constant [21 x i8] c\"basic_string::substr\\00\", align 1\n@.str.1 = private unnamed_addr constant [55 x i8] c\"%s: __pos (which is %zu) > this->size() (which is %zu)\\00\", align 1\n\n; Function Attrs: uwtable\ndefine dso_local void @_Z13encode_cyclicNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE(%\"class.std::__cxx11::basic_string\"* noalias sret(%\"class.std::__cxx11::basic_string\") align 8 %0, %\"class.std::__cxx11::basic_string\"* nocapture readonly %1) local_unnamed_addr #0 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {\n  %3 = alloca i64, align 8\n  %4 = alloca %\"class.std::__cxx11::basic_string\", align 8\n  %5 = alloca %\"class.std::__cxx11::basic_string\", align 8\n  %6 = alloca %\"class.std::__cxx11::basic_string\", align 8\n  %7 = alloca %\"class.std::__cxx11::basic_string\", align 8\n  %8 = alloca %\"class.std::__cxx11::basic_string\", align 8\n  %9 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %1, i64 0, i32 1\n  %10 = load i64, i64* %9, align 8, !tbaa !3\n  %11 = trunc i64 %10 to i32\n  %12 = bitcast %\"class.std::__cxx11::basic_string\"* %4 to i8*\n  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %12) #7\n  %13 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %4, i64 0, i32 2\n  %14 = bitcast %\"class.std::__cxx11::basic_string\"* %4 to %union.anon**\n  store %union.anon* %13, %union.anon** %14, align 8, !tbaa !10\n  %15 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %4, i64 0, i32 1\n  store i64 0, i64* %15, align 8, !tbaa !3\n  %16 = bitcast %union.anon* %13 to i8*\n  store i8 0, i8* %16, align 8, !tbaa !11\n  %17 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 2\n  %18 = bitcast %\"class.std::__cxx11::basic_string\"* %0 to %union.anon**\n  store %union.anon* %17, %union.anon** %18, align 8, !tbaa !10\n  %19 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 1\n  store i64 0, i64* %19, align 8, !tbaa !3\n  %20 = bitcast %union.anon* %17 to i8*\n  store i8 0, i8* %20, align 8, !tbaa !11\n  %21 = bitcast %\"class.std::__cxx11::basic_string\"* %5 to i8*\n  %22 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %5, i64 0, i32 2\n  %23 = bitcast %\"class.std::__cxx11::basic_string\"* %5 to %union.anon**\n  %24 = bitcast %union.anon* %22 to i8*\n  %25 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %1, i64 0, i32 0, i32 0\n  %26 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %5, i64 0, i32 0, i32 0\n  %27 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %5, i64 0, i32 1\n  %28 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %4, i64 0, i32 0, i32 0\n  %29 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %4, i64 0, i32 2, i32 0\n  %30 = bitcast %\"class.std::__cxx11::basic_string\"* %6 to i8*\n  %31 = bitcast %\"class.std::__cxx11::basic_string\"* %7 to i8*\n  %32 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %7, i64 0, i32 2\n  %33 = bitcast %\"class.std::__cxx11::basic_string\"* %7 to %union.anon**\n  %34 = bitcast %union.anon* %32 to i8*\n  %35 = bitcast %union.anon* %32 to i16*\n  %36 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %7, i64 0, i32 0, i32 0\n  %37 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %7, i64 0, i32 1\n  %38 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %6, i64 0, i32 2\n  %39 = bitcast %\"class.std::__cxx11::basic_string\"* %6 to %union.anon**\n  %40 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %6, i64 0, i32 0, i32 0\n  %41 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %6, i64 0, i32 2, i32 0\n  %42 = bitcast %union.anon* %38 to i8*\n  %43 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %6, i64 0, i32 1\n  %44 = bitcast %\"class.std::__cxx11::basic_string\"* %8 to i8*\n  %45 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %8, i64 0, i32 2\n  %46 = bitcast %\"class.std::__cxx11::basic_string\"* %8 to %union.anon**\n  %47 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 0, i32 0\n  %48 = bitcast i64* %3 to i8*\n  %49 = bitcast %union.anon* %45 to i8*\n  %50 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %8, i64 0, i32 0, i32 0\n  %51 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %8, i64 0, i32 2, i32 0\n  %52 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %8, i64 0, i32 1\n  %53 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 2, i32 0\n  %54 = icmp sgt i32 %11, 0\n  br i1 %54, label %55, label %241\n\n55:                                               ; preds = %2\n  %56 = getelementptr inbounds i8, i8* %34, i64 2\n  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %21) #7\n  %57 = bitcast i64* %43 to <2 x i64>*\n  %58 = bitcast i64* %15 to <2 x i64>*\n  %59 = bitcast i64* %52 to <2 x i64>*\n  %60 = bitcast i64* %19 to <2 x i64>*\n  br label %64\n\n61:                                               ; preds = %219\n  %62 = zext i32 %217 to i64\n  invoke void (i8*, ...) @_ZSt24__throw_out_of_range_fmtPKcz(i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str, i64 0, i64 0), i64 %62, i64 %220) #8\n          to label %63 unwind label %150\n\n63:                                               ; preds = %61\n  unreachable\n\n64:                                               ; preds = %55, %219\n  %65 = phi i64 [ 0, %55 ], [ %221, %219 ]\n  %66 = phi i64 [ 0, %55 ], [ %215, %219 ]\n  %67 = phi i64 [ %10, %55 ], [ %220, %219 ]\n  call void @llvm.experimental.noalias.scope.decl(metadata !12)\n  store %union.anon* %22, %union.anon** %23, align 8, !tbaa !10, !alias.scope !12\n  %68 = load i8*, i8** %25, align 8, !tbaa !15, !noalias !12\n  %69 = getelementptr inbounds i8, i8* %68, i64 %65\n  %70 = sub i64 %67, %65\n  %71 = icmp ult i64 %70, 3\n  %72 = select i1 %71, i64 %70, i64 3\n  switch i64 %72, label %80 [\n    i64 1, label %75\n    i64 0, label %73\n  ]\n\n73:                                               ; preds = %64\n  store i64 %72, i64* %27, align 8, !tbaa !3, !alias.scope !12\n  %74 = getelementptr inbounds i8, i8* %24, i64 %72\n  store i8 0, i8* %74, align 1, !tbaa !11\n  br label %83\n\n75:                                               ; preds = %64\n  %76 = load i8, i8* %69, align 1, !tbaa !11\n  store i8 %76, i8* %24, align 8, !tbaa !11\n  store i64 %72, i64* %27, align 8, !tbaa !3, !alias.scope !12\n  %77 = getelementptr inbounds i8, i8* %24, i64 %72\n  store i8 0, i8* %77, align 1, !tbaa !11\n  %78 = load i8*, i8** %28, align 8, !tbaa !15\n  %79 = load i8, i8* %24, align 8, !tbaa !11\n  store i8 %79, i8* %78, align 1, !tbaa !11\n  br label %83\n\n80:                                               ; preds = %64\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %24, i8* align 1 %69, i64 %72, i1 false) #7\n  store i64 %72, i64* %27, align 8, !tbaa !3, !alias.scope !12\n  %81 = getelementptr inbounds i8, i8* %24, i64 %72\n  store i8 0, i8* %81, align 1, !tbaa !11\n  %82 = load i8*, i8** %28, align 8, !tbaa !15\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %82, i8* nonnull align 8 %24, i64 %72, i1 false) #7\n  br label %83\n\n83:                                               ; preds = %75, %80, %73\n  %84 = load i64, i64* %27, align 8, !tbaa !3\n  store i64 %84, i64* %15, align 8, !tbaa !3\n  %85 = load i8*, i8** %28, align 8, !tbaa !15\n  %86 = getelementptr inbounds i8, i8* %85, i64 %84\n  store i8 0, i8* %86, align 1, !tbaa !11\n  %87 = load i8*, i8** %26, align 8, !tbaa !15\n  store i64 0, i64* %27, align 8, !tbaa !3\n  store i8 0, i8* %87, align 1, !tbaa !11\n  %88 = load i8*, i8** %26, align 8, !tbaa !15\n  %89 = icmp eq i8* %88, %24\n  br i1 %89, label %91, label %90\n\n90:                                               ; preds = %83\n  call void @_ZdlPv(i8* %88) #7\n  br label %91\n\n91:                                               ; preds = %83, %90\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %21) #7\n  %92 = load i64, i64* %15, align 8, !tbaa !3\n  %93 = icmp eq i64 %92, 3\n  br i1 %93, label %94, label %158\n\n94:                                               ; preds = %91\n  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %30) #7\n  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %31) #7\n  store %union.anon* %32, %union.anon** %33, align 8, !tbaa !10, !alias.scope !16\n  %95 = load i8*, i8** %28, align 8, !tbaa !15\n  %96 = getelementptr inbounds i8, i8* %95, i64 1\n  %97 = bitcast i8* %96 to i16*\n  %98 = load i16, i16* %97, align 1\n  store i16 %98, i16* %35, align 8\n  store i64 2, i64* %37, align 8, !tbaa !3, !alias.scope !16\n  store i8 0, i8* %56, align 2, !tbaa !11\n  %99 = load i8, i8* %95, align 1, !tbaa !11\n  %100 = invoke nonnull align 8 dereferenceable(32) %\"class.std::__cxx11::basic_string\"* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEmmmc(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %7, i64 2, i64 0, i64 1, i8 signext %99)\n          to label %101 unwind label %152\n\n101:                                              ; preds = %94\n  store %union.anon* %38, %union.anon** %39, align 8, !tbaa !10, !alias.scope !19\n  %102 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %100, i64 0, i32 0, i32 0\n  %103 = load i8*, i8** %102, align 8, !tbaa !15\n  %104 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %100, i64 0, i32 2\n  %105 = bitcast %union.anon* %104 to i8*\n  %106 = icmp eq i8* %103, %105\n  br i1 %106, label %107, label %108\n\n107:                                              ; preds = %101\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(16) %42, i8* noundef nonnull align 8 dereferenceable(16) %103, i64 16, i1 false) #7\n  br label %111\n\n108:                                              ; preds = %101\n  store i8* %103, i8** %40, align 8, !tbaa !15, !alias.scope !19\n  %109 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %100, i64 0, i32 2, i32 0\n  %110 = load i64, i64* %109, align 8, !tbaa !11\n  store i64 %110, i64* %41, align 8, !tbaa !11, !alias.scope !19\n  br label %111\n\n111:                                              ; preds = %108, %107\n  %112 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %100, i64 0, i32 1\n  %113 = load i64, i64* %112, align 8, !tbaa !3\n  store i64 %113, i64* %43, align 8, !tbaa !3, !alias.scope !19\n  %114 = bitcast %\"class.std::__cxx11::basic_string\"* %100 to %union.anon**\n  store %union.anon* %104, %union.anon** %114, align 8, !tbaa !15\n  store i64 0, i64* %112, align 8, !tbaa !3\n  store i8 0, i8* %105, align 8, !tbaa !11\n  %115 = load i8*, i8** %40, align 8, !tbaa !15\n  %116 = icmp eq i8* %115, %42\n  br i1 %116, label %117, label %131\n\n117:                                              ; preds = %111\n  %118 = load i64, i64* %43, align 8, !tbaa !3\n  %119 = icmp eq i64 %118, 0\n  br i1 %119, label %126, label %120\n\n120:                                              ; preds = %117\n  %121 = load i8*, i8** %28, align 8, !tbaa !15\n  %122 = icmp eq i64 %118, 1\n  br i1 %122, label %123, label %125\n\n123:                                              ; preds = %120\n  %124 = load i8, i8* %42, align 8, !tbaa !11\n  store i8 %124, i8* %121, align 1, !tbaa !11\n  br label %126\n\n125:                                              ; preds = %120\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %121, i8* nonnull align 8 %42, i64 %118, i1 false) #7\n  br label %126\n\n126:                                              ; preds = %125, %123, %117\n  %127 = load i64, i64* %43, align 8, !tbaa !3\n  store i64 %127, i64* %15, align 8, !tbaa !3\n  %128 = load i8*, i8** %28, align 8, !tbaa !15\n  %129 = getelementptr inbounds i8, i8* %128, i64 %127\n  store i8 0, i8* %129, align 1, !tbaa !11\n  %130 = load i8*, i8** %40, align 8, !tbaa !15\n  br label %140\n\n131:                                              ; preds = %111\n  %132 = load i8*, i8** %28, align 8, !tbaa !15\n  %133 = icmp eq i8* %132, %16\n  %134 = load i64, i64* %29, align 8\n  store i8* %115, i8** %28, align 8, !tbaa !15\n  %135 = load <2 x i64>, <2 x i64>* %57, align 8, !tbaa !11\n  store <2 x i64> %135, <2 x i64>* %58, align 8, !tbaa !11\n  %136 = icmp eq i8* %132, null\n  %137 = or i1 %133, %136\n  br i1 %137, label %139, label %138\n\n138:                                              ; preds = %131\n  store i8* %132, i8** %40, align 8, !tbaa !15\n  store i64 %134, i64* %41, align 8, !tbaa !11\n  br label %140\n\n139:                                              ; preds = %131\n  store %union.anon* %38, %union.anon** %39, align 8, !tbaa !15\n  br label %140\n\n140:                                              ; preds = %126, %138, %139\n  %141 = phi i8* [ %130, %126 ], [ %132, %138 ], [ %42, %139 ]\n  store i64 0, i64* %43, align 8, !tbaa !3\n  store i8 0, i8* %141, align 1, !tbaa !11\n  %142 = load i8*, i8** %40, align 8, !tbaa !15\n  %143 = icmp eq i8* %142, %42\n  br i1 %143, label %145, label %144\n\n144:                                              ; preds = %140\n  call void @_ZdlPv(i8* %142) #7\n  br label %145\n\n145:                                              ; preds = %140, %144\n  %146 = load i8*, i8** %36, align 8, !tbaa !15\n  %147 = icmp eq i8* %146, %34\n  br i1 %147, label %149, label %148\n\n148:                                              ; preds = %145\n  call void @_ZdlPv(i8* %146) #7\n  br label %149\n\n149:                                              ; preds = %145, %148\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %31) #7\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %30) #7\n  br label %158\n\n150:                                              ; preds = %61\n  %151 = landingpad { i8*, i32 }\n          cleanup\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %21) #7\n  br label %227\n\n152:                                              ; preds = %94\n  %153 = landingpad { i8*, i32 }\n          cleanup\n  %154 = load i8*, i8** %36, align 8, !tbaa !15\n  %155 = icmp eq i8* %154, %34\n  br i1 %155, label %157, label %156\n\n156:                                              ; preds = %152\n  call void @_ZdlPv(i8* %154) #7\n  br label %157\n\n157:                                              ; preds = %156, %152\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %31) #7\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %30) #7\n  br label %227\n\n158:                                              ; preds = %149, %91\n  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %44) #7\n  call void @llvm.experimental.noalias.scope.decl(metadata !22)\n  store %union.anon* %45, %union.anon** %46, align 8, !tbaa !10, !alias.scope !22\n  %159 = load i8*, i8** %47, align 8, !tbaa !15, !noalias !22\n  %160 = load i64, i64* %19, align 8, !tbaa !3, !noalias !22\n  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %48) #7, !noalias !22\n  store i64 %160, i64* %3, align 8, !tbaa !25, !noalias !22\n  %161 = icmp ugt i64 %160, 15\n  br i1 %161, label %162, label %166\n\n162:                                              ; preds = %158\n  %163 = invoke i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %8, i64* nonnull align 8 dereferenceable(8) %3, i64 0)\n          to label %164 unwind label %223\n\n164:                                              ; preds = %162\n  store i8* %163, i8** %50, align 8, !tbaa !15, !alias.scope !22\n  %165 = load i64, i64* %3, align 8, !tbaa !25, !noalias !22\n  store i64 %165, i64* %51, align 8, !tbaa !11, !alias.scope !22\n  br label %166\n\n166:                                              ; preds = %158, %164\n  %167 = phi i8* [ %163, %164 ], [ %49, %158 ]\n  switch i64 %160, label %170 [\n    i64 1, label %168\n    i64 0, label %171\n  ]\n\n168:                                              ; preds = %166\n  %169 = load i8, i8* %159, align 1, !tbaa !11\n  store i8 %169, i8* %167, align 1, !tbaa !11\n  br label %171\n\n170:                                              ; preds = %166\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %167, i8* align 1 %159, i64 %160, i1 false) #7\n  br label %171\n\n171:                                              ; preds = %170, %168, %166\n  %172 = load i64, i64* %3, align 8, !tbaa !25, !noalias !22\n  store i64 %172, i64* %52, align 8, !tbaa !3, !alias.scope !22\n  %173 = load i8*, i8** %50, align 8, !tbaa !15, !alias.scope !22\n  %174 = getelementptr inbounds i8, i8* %173, i64 %172\n  store i8 0, i8* %174, align 1, !tbaa !11\n  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %48) #7, !noalias !22\n  %175 = load i8*, i8** %28, align 8, !tbaa !15, !noalias !22\n  %176 = load i64, i64* %15, align 8, !tbaa !3, !noalias !22\n  %177 = invoke nonnull align 8 dereferenceable(32) %\"class.std::__cxx11::basic_string\"* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %8, i8* %175, i64 %176)\n          to label %183 unwind label %178\n\n178:                                              ; preds = %171\n  %179 = landingpad { i8*, i32 }\n          cleanup\n  %180 = load i8*, i8** %50, align 8, !tbaa !15, !alias.scope !22\n  %181 = icmp eq i8* %180, %49\n  br i1 %181, label %225, label %182\n\n182:                                              ; preds = %178\n  call void @_ZdlPv(i8* %180) #7\n  br label %225\n\n183:                                              ; preds = %171\n  %184 = load i8*, i8** %50, align 8, !tbaa !15\n  %185 = icmp eq i8* %184, %49\n  br i1 %185, label %186, label %200\n\n186:                                              ; preds = %183\n  %187 = load i64, i64* %52, align 8, !tbaa !3\n  %188 = icmp eq i64 %187, 0\n  br i1 %188, label %195, label %189\n\n189:                                              ; preds = %186\n  %190 = load i8*, i8** %47, align 8, !tbaa !15\n  %191 = icmp eq i64 %187, 1\n  br i1 %191, label %192, label %194\n\n192:                                              ; preds = %189\n  %193 = load i8, i8* %49, align 8, !tbaa !11\n  store i8 %193, i8* %190, align 1, !tbaa !11\n  br label %195\n\n194:                                              ; preds = %189\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %190, i8* nonnull align 8 %49, i64 %187, i1 false) #7\n  br label %195\n\n195:                                              ; preds = %194, %192, %186\n  %196 = load i64, i64* %52, align 8, !tbaa !3\n  store i64 %196, i64* %19, align 8, !tbaa !3\n  %197 = load i8*, i8** %47, align 8, !tbaa !15\n  %198 = getelementptr inbounds i8, i8* %197, i64 %196\n  store i8 0, i8* %198, align 1, !tbaa !11\n  %199 = load i8*, i8** %50, align 8, !tbaa !15\n  br label %209\n\n200:                                              ; preds = %183\n  %201 = load i8*, i8** %47, align 8, !tbaa !15\n  %202 = icmp eq i8* %201, %20\n  %203 = load i64, i64* %53, align 8\n  store i8* %184, i8** %47, align 8, !tbaa !15\n  %204 = load <2 x i64>, <2 x i64>* %59, align 8, !tbaa !11\n  store <2 x i64> %204, <2 x i64>* %60, align 8, !tbaa !11\n  %205 = icmp eq i8* %201, null\n  %206 = or i1 %202, %205\n  br i1 %206, label %208, label %207\n\n207:                                              ; preds = %200\n  store i8* %201, i8** %50, align 8, !tbaa !15\n  store i64 %203, i64* %51, align 8, !tbaa !11\n  br label %209\n\n208:                                              ; preds = %200\n  store %union.anon* %45, %union.anon** %46, align 8, !tbaa !15\n  br label %209\n\n209:                                              ; preds = %195, %207, %208\n  %210 = phi i8* [ %199, %195 ], [ %201, %207 ], [ %49, %208 ]\n  store i64 0, i64* %52, align 8, !tbaa !3\n  store i8 0, i8* %210, align 1, !tbaa !11\n  %211 = load i8*, i8** %50, align 8, !tbaa !15\n  %212 = icmp eq i8* %211, %49\n  br i1 %212, label %214, label %213\n\n213:                                              ; preds = %209\n  call void @_ZdlPv(i8* %211) #7\n  br label %214\n\n214:                                              ; preds = %209, %213\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %44) #7\n  %215 = add nuw i64 %66, 1\n  %216 = trunc i64 %215 to i32\n  %217 = mul nsw i32 %216, 3\n  %218 = icmp slt i32 %217, %11\n  br i1 %218, label %219, label %237, !llvm.loop !26\n\n219:                                              ; preds = %214\n  %220 = load i64, i64* %9, align 8, !tbaa !3, !noalias !12\n  %221 = zext i32 %217 to i64\n  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %21) #7\n  %222 = icmp ult i64 %220, %221\n  br i1 %222, label %61, label %64\n\n223:                                              ; preds = %162\n  %224 = landingpad { i8*, i32 }\n          cleanup\n  br label %225\n\n225:                                              ; preds = %178, %182, %223\n  %226 = phi { i8*, i32 } [ %224, %223 ], [ %179, %182 ], [ %179, %178 ]\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %44) #7\n  br label %227\n\n227:                                              ; preds = %225, %157, %150\n  %228 = phi { i8*, i32 } [ %226, %225 ], [ %153, %157 ], [ %151, %150 ]\n  %229 = load i8*, i8** %47, align 8, !tbaa !15\n  %230 = icmp eq i8* %229, %20\n  br i1 %230, label %232, label %231\n\n231:                                              ; preds = %227\n  call void @_ZdlPv(i8* %229) #7\n  br label %232\n\n232:                                              ; preds = %227, %231\n  %233 = load i8*, i8** %28, align 8, !tbaa !15\n  %234 = icmp eq i8* %233, %16\n  br i1 %234, label %236, label %235\n\n235:                                              ; preds = %232\n  call void @_ZdlPv(i8* %233) #7\n  br label %236\n\n236:                                              ; preds = %232, %235\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %12) #7\n  resume { i8*, i32 } %228\n\n237:                                              ; preds = %214\n  %238 = load i8*, i8** %28, align 8, !tbaa !15\n  %239 = icmp eq i8* %238, %16\n  br i1 %239, label %241, label %240\n\n240:                                              ; preds = %237\n  call void @_ZdlPv(i8* %238) #7\n  br label %241\n\n241:                                              ; preds = %2, %237, %240\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %12) #7\n  ret void\n}\n\n; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn\ndeclare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1\n\ndeclare dso_local i32 @__gxx_personality_v0(...)\n\n; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn\ndeclare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1\n\n; Function Attrs: uwtable\ndefine dso_local void @_Z13decode_cyclicNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE(%\"class.std::__cxx11::basic_string\"* noalias sret(%\"class.std::__cxx11::basic_string\") align 8 %0, %\"class.std::__cxx11::basic_string\"* nocapture readonly %1) local_unnamed_addr #0 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {\n  %3 = alloca i64, align 8\n  %4 = alloca %\"class.std::__cxx11::basic_string\", align 8\n  %5 = alloca %\"class.std::__cxx11::basic_string\", align 8\n  %6 = alloca %\"class.std::__cxx11::basic_string\", align 8\n  %7 = alloca %\"class.std::__cxx11::basic_string\", align 8\n  %8 = alloca %\"class.std::__cxx11::basic_string\", align 8\n  %9 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %1, i64 0, i32 1\n  %10 = load i64, i64* %9, align 8, !tbaa !3\n  %11 = trunc i64 %10 to i32\n  %12 = bitcast %\"class.std::__cxx11::basic_string\"* %4 to i8*\n  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %12) #7\n  %13 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %4, i64 0, i32 2\n  %14 = bitcast %\"class.std::__cxx11::basic_string\"* %4 to %union.anon**\n  store %union.anon* %13, %union.anon** %14, align 8, !tbaa !10\n  %15 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %4, i64 0, i32 1\n  store i64 0, i64* %15, align 8, !tbaa !3\n  %16 = bitcast %union.anon* %13 to i8*\n  store i8 0, i8* %16, align 8, !tbaa !11\n  %17 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 2\n  %18 = bitcast %\"class.std::__cxx11::basic_string\"* %0 to %union.anon**\n  store %union.anon* %17, %union.anon** %18, align 8, !tbaa !10\n  %19 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 1\n  store i64 0, i64* %19, align 8, !tbaa !3\n  %20 = bitcast %union.anon* %17 to i8*\n  store i8 0, i8* %20, align 8, !tbaa !11\n  %21 = bitcast %\"class.std::__cxx11::basic_string\"* %5 to i8*\n  %22 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %5, i64 0, i32 2\n  %23 = bitcast %\"class.std::__cxx11::basic_string\"* %5 to %union.anon**\n  %24 = bitcast %union.anon* %22 to i8*\n  %25 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %1, i64 0, i32 0, i32 0\n  %26 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %5, i64 0, i32 0, i32 0\n  %27 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %5, i64 0, i32 1\n  %28 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %4, i64 0, i32 0, i32 0\n  %29 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %4, i64 0, i32 2, i32 0\n  %30 = bitcast %\"class.std::__cxx11::basic_string\"* %6 to i8*\n  %31 = bitcast %\"class.std::__cxx11::basic_string\"* %7 to i8*\n  %32 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %7, i64 0, i32 2\n  %33 = bitcast %\"class.std::__cxx11::basic_string\"* %7 to %union.anon**\n  %34 = bitcast %union.anon* %32 to i8*\n  %35 = bitcast %union.anon* %32 to i16*\n  %36 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %7, i64 0, i32 0, i32 0\n  %37 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %7, i64 0, i32 1\n  %38 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %6, i64 0, i32 2\n  %39 = bitcast %\"class.std::__cxx11::basic_string\"* %6 to %union.anon**\n  %40 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %6, i64 0, i32 0, i32 0\n  %41 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %6, i64 0, i32 2, i32 0\n  %42 = bitcast %union.anon* %38 to i8*\n  %43 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %6, i64 0, i32 1\n  %44 = bitcast %\"class.std::__cxx11::basic_string\"* %8 to i8*\n  %45 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %8, i64 0, i32 2\n  %46 = bitcast %\"class.std::__cxx11::basic_string\"* %8 to %union.anon**\n  %47 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 0, i32 0\n  %48 = bitcast i64* %3 to i8*\n  %49 = bitcast %union.anon* %45 to i8*\n  %50 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %8, i64 0, i32 0, i32 0\n  %51 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %8, i64 0, i32 2, i32 0\n  %52 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %8, i64 0, i32 1\n  %53 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 2, i32 0\n  %54 = icmp sgt i32 %11, 0\n  br i1 %54, label %55, label %241\n\n55:                                               ; preds = %2\n  %56 = getelementptr inbounds i8, i8* %34, i64 2\n  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %21) #7\n  %57 = bitcast i64* %43 to <2 x i64>*\n  %58 = bitcast i64* %15 to <2 x i64>*\n  %59 = bitcast i64* %52 to <2 x i64>*\n  %60 = bitcast i64* %19 to <2 x i64>*\n  br label %64\n\n61:                                               ; preds = %219\n  %62 = zext i32 %217 to i64\n  invoke void (i8*, ...) @_ZSt24__throw_out_of_range_fmtPKcz(i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str, i64 0, i64 0), i64 %62, i64 %220) #8\n          to label %63 unwind label %150\n\n63:                                               ; preds = %61\n  unreachable\n\n64:                                               ; preds = %55, %219\n  %65 = phi i64 [ 0, %55 ], [ %221, %219 ]\n  %66 = phi i64 [ 0, %55 ], [ %215, %219 ]\n  %67 = phi i64 [ %10, %55 ], [ %220, %219 ]\n  call void @llvm.experimental.noalias.scope.decl(metadata !28)\n  store %union.anon* %22, %union.anon** %23, align 8, !tbaa !10, !alias.scope !28\n  %68 = load i8*, i8** %25, align 8, !tbaa !15, !noalias !28\n  %69 = getelementptr inbounds i8, i8* %68, i64 %65\n  %70 = sub i64 %67, %65\n  %71 = icmp ult i64 %70, 3\n  %72 = select i1 %71, i64 %70, i64 3\n  switch i64 %72, label %80 [\n    i64 1, label %75\n    i64 0, label %73\n  ]\n\n73:                                               ; preds = %64\n  store i64 %72, i64* %27, align 8, !tbaa !3, !alias.scope !28\n  %74 = getelementptr inbounds i8, i8* %24, i64 %72\n  store i8 0, i8* %74, align 1, !tbaa !11\n  br label %83\n\n75:                                               ; preds = %64\n  %76 = load i8, i8* %69, align 1, !tbaa !11\n  store i8 %76, i8* %24, align 8, !tbaa !11\n  store i64 %72, i64* %27, align 8, !tbaa !3, !alias.scope !28\n  %77 = getelementptr inbounds i8, i8* %24, i64 %72\n  store i8 0, i8* %77, align 1, !tbaa !11\n  %78 = load i8*, i8** %28, align 8, !tbaa !15\n  %79 = load i8, i8* %24, align 8, !tbaa !11\n  store i8 %79, i8* %78, align 1, !tbaa !11\n  br label %83\n\n80:                                               ; preds = %64\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %24, i8* align 1 %69, i64 %72, i1 false) #7\n  store i64 %72, i64* %27, align 8, !tbaa !3, !alias.scope !28\n  %81 = getelementptr inbounds i8, i8* %24, i64 %72\n  store i8 0, i8* %81, align 1, !tbaa !11\n  %82 = load i8*, i8** %28, align 8, !tbaa !15\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %82, i8* nonnull align 8 %24, i64 %72, i1 false) #7\n  br label %83\n\n83:                                               ; preds = %75, %80, %73\n  %84 = load i64, i64* %27, align 8, !tbaa !3\n  store i64 %84, i64* %15, align 8, !tbaa !3\n  %85 = load i8*, i8** %28, align 8, !tbaa !15\n  %86 = getelementptr inbounds i8, i8* %85, i64 %84\n  store i8 0, i8* %86, align 1, !tbaa !11\n  %87 = load i8*, i8** %26, align 8, !tbaa !15\n  store i64 0, i64* %27, align 8, !tbaa !3\n  store i8 0, i8* %87, align 1, !tbaa !11\n  %88 = load i8*, i8** %26, align 8, !tbaa !15\n  %89 = icmp eq i8* %88, %24\n  br i1 %89, label %91, label %90\n\n90:                                               ; preds = %83\n  call void @_ZdlPv(i8* %88) #7\n  br label %91\n\n91:                                               ; preds = %83, %90\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %21) #7\n  %92 = load i64, i64* %15, align 8, !tbaa !3\n  %93 = icmp eq i64 %92, 3\n  br i1 %93, label %94, label %158\n\n94:                                               ; preds = %91\n  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %30) #7\n  %95 = load i8*, i8** %28, align 8, !tbaa !15\n  %96 = getelementptr inbounds i8, i8* %95, i64 2\n  %97 = load i8, i8* %96, align 1, !tbaa !11\n  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %31) #7\n  store %union.anon* %32, %union.anon** %33, align 8, !tbaa !10, !alias.scope !31\n  %98 = bitcast i8* %95 to i16*\n  %99 = load i16, i16* %98, align 1\n  store i16 %99, i16* %35, align 8\n  store i64 2, i64* %37, align 8, !tbaa !3, !alias.scope !31\n  store i8 0, i8* %56, align 2, !tbaa !11\n  %100 = invoke nonnull align 8 dereferenceable(32) %\"class.std::__cxx11::basic_string\"* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEmmmc(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %7, i64 0, i64 0, i64 1, i8 signext %97)\n          to label %101 unwind label %152\n\n101:                                              ; preds = %94\n  store %union.anon* %38, %union.anon** %39, align 8, !tbaa !10, !alias.scope !34\n  %102 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %100, i64 0, i32 0, i32 0\n  %103 = load i8*, i8** %102, align 8, !tbaa !15\n  %104 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %100, i64 0, i32 2\n  %105 = bitcast %union.anon* %104 to i8*\n  %106 = icmp eq i8* %103, %105\n  br i1 %106, label %107, label %108\n\n107:                                              ; preds = %101\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(16) %42, i8* noundef nonnull align 8 dereferenceable(16) %103, i64 16, i1 false) #7\n  br label %111\n\n108:                                              ; preds = %101\n  store i8* %103, i8** %40, align 8, !tbaa !15, !alias.scope !34\n  %109 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %100, i64 0, i32 2, i32 0\n  %110 = load i64, i64* %109, align 8, !tbaa !11\n  store i64 %110, i64* %41, align 8, !tbaa !11, !alias.scope !34\n  br label %111\n\n111:                                              ; preds = %108, %107\n  %112 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %100, i64 0, i32 1\n  %113 = load i64, i64* %112, align 8, !tbaa !3\n  store i64 %113, i64* %43, align 8, !tbaa !3, !alias.scope !34\n  %114 = bitcast %\"class.std::__cxx11::basic_string\"* %100 to %union.anon**\n  store %union.anon* %104, %union.anon** %114, align 8, !tbaa !15\n  store i64 0, i64* %112, align 8, !tbaa !3\n  store i8 0, i8* %105, align 8, !tbaa !11\n  %115 = load i8*, i8** %40, align 8, !tbaa !15\n  %116 = icmp eq i8* %115, %42\n  br i1 %116, label %117, label %131\n\n117:                                              ; preds = %111\n  %118 = load i64, i64* %43, align 8, !tbaa !3\n  %119 = icmp eq i64 %118, 0\n  br i1 %119, label %126, label %120\n\n120:                                              ; preds = %117\n  %121 = load i8*, i8** %28, align 8, !tbaa !15\n  %122 = icmp eq i64 %118, 1\n  br i1 %122, label %123, label %125\n\n123:                                              ; preds = %120\n  %124 = load i8, i8* %42, align 8, !tbaa !11\n  store i8 %124, i8* %121, align 1, !tbaa !11\n  br label %126\n\n125:                                              ; preds = %120\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %121, i8* nonnull align 8 %42, i64 %118, i1 false) #7\n  br label %126\n\n126:                                              ; preds = %125, %123, %117\n  %127 = load i64, i64* %43, align 8, !tbaa !3\n  store i64 %127, i64* %15, align 8, !tbaa !3\n  %128 = load i8*, i8** %28, align 8, !tbaa !15\n  %129 = getelementptr inbounds i8, i8* %128, i64 %127\n  store i8 0, i8* %129, align 1, !tbaa !11\n  %130 = load i8*, i8** %40, align 8, !tbaa !15\n  br label %140\n\n131:                                              ; preds = %111\n  %132 = load i8*, i8** %28, align 8, !tbaa !15\n  %133 = icmp eq i8* %132, %16\n  %134 = load i64, i64* %29, align 8\n  store i8* %115, i8** %28, align 8, !tbaa !15\n  %135 = load <2 x i64>, <2 x i64>* %57, align 8, !tbaa !11\n  store <2 x i64> %135, <2 x i64>* %58, align 8, !tbaa !11\n  %136 = icmp eq i8* %132, null\n  %137 = or i1 %133, %136\n  br i1 %137, label %139, label %138\n\n138:                                              ; preds = %131\n  store i8* %132, i8** %40, align 8, !tbaa !15\n  store i64 %134, i64* %41, align 8, !tbaa !11\n  br label %140\n\n139:                                              ; preds = %131\n  store %union.anon* %38, %union.anon** %39, align 8, !tbaa !15\n  br label %140\n\n140:                                              ; preds = %126, %138, %139\n  %141 = phi i8* [ %130, %126 ], [ %132, %138 ], [ %42, %139 ]\n  store i64 0, i64* %43, align 8, !tbaa !3\n  store i8 0, i8* %141, align 1, !tbaa !11\n  %142 = load i8*, i8** %40, align 8, !tbaa !15\n  %143 = icmp eq i8* %142, %42\n  br i1 %143, label %145, label %144\n\n144:                                              ; preds = %140\n  call void @_ZdlPv(i8* %142) #7\n  br label %145\n\n145:                                              ; preds = %140, %144\n  %146 = load i8*, i8** %36, align 8, !tbaa !15\n  %147 = icmp eq i8* %146, %34\n  br i1 %147, label %149, label %148\n\n148:                                              ; preds = %145\n  call void @_ZdlPv(i8* %146) #7\n  br label %149\n\n149:                                              ; preds = %145, %148\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %31) #7\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %30) #7\n  br label %158\n\n150:                                              ; preds = %61\n  %151 = landingpad { i8*, i32 }\n          cleanup\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %21) #7\n  br label %227\n\n152:                                              ; preds = %94\n  %153 = landingpad { i8*, i32 }\n          cleanup\n  %154 = load i8*, i8** %36, align 8, !tbaa !15\n  %155 = icmp eq i8* %154, %34\n  br i1 %155, label %157, label %156\n\n156:                                              ; preds = %152\n  call void @_ZdlPv(i8* %154) #7\n  br label %157\n\n157:                                              ; preds = %156, %152\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %31) #7\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %30) #7\n  br label %227\n\n158:                                              ; preds = %149, %91\n  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %44) #7\n  call void @llvm.experimental.noalias.scope.decl(metadata !37)\n  store %union.anon* %45, %union.anon** %46, align 8, !tbaa !10, !alias.scope !37\n  %159 = load i8*, i8** %47, align 8, !tbaa !15, !noalias !37\n  %160 = load i64, i64* %19, align 8, !tbaa !3, !noalias !37\n  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %48) #7, !noalias !37\n  store i64 %160, i64* %3, align 8, !tbaa !25, !noalias !37\n  %161 = icmp ugt i64 %160, 15\n  br i1 %161, label %162, label %166\n\n162:                                              ; preds = %158\n  %163 = invoke i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %8, i64* nonnull align 8 dereferenceable(8) %3, i64 0)\n          to label %164 unwind label %223\n\n164:                                              ; preds = %162\n  store i8* %163, i8** %50, align 8, !tbaa !15, !alias.scope !37\n  %165 = load i64, i64* %3, align 8, !tbaa !25, !noalias !37\n  store i64 %165, i64* %51, align 8, !tbaa !11, !alias.scope !37\n  br label %166\n\n166:                                              ; preds = %158, %164\n  %167 = phi i8* [ %163, %164 ], [ %49, %158 ]\n  switch i64 %160, label %170 [\n    i64 1, label %168\n    i64 0, label %171\n  ]\n\n168:                                              ; preds = %166\n  %169 = load i8, i8* %159, align 1, !tbaa !11\n  store i8 %169, i8* %167, align 1, !tbaa !11\n  br label %171\n\n170:                                              ; preds = %166\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %167, i8* align 1 %159, i64 %160, i1 false) #7\n  br label %171\n\n171:                                              ; preds = %170, %168, %166\n  %172 = load i64, i64* %3, align 8, !tbaa !25, !noalias !37\n  store i64 %172, i64* %52, align 8, !tbaa !3, !alias.scope !37\n  %173 = load i8*, i8** %50, align 8, !tbaa !15, !alias.scope !37\n  %174 = getelementptr inbounds i8, i8* %173, i64 %172\n  store i8 0, i8* %174, align 1, !tbaa !11\n  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %48) #7, !noalias !37\n  %175 = load i8*, i8** %28, align 8, !tbaa !15, !noalias !37\n  %176 = load i64, i64* %15, align 8, !tbaa !3, !noalias !37\n  %177 = invoke nonnull align 8 dereferenceable(32) %\"class.std::__cxx11::basic_string\"* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %8, i8* %175, i64 %176)\n          to label %183 unwind label %178\n\n178:                                              ; preds = %171\n  %179 = landingpad { i8*, i32 }\n          cleanup\n  %180 = load i8*, i8** %50, align 8, !tbaa !15, !alias.scope !37\n  %181 = icmp eq i8* %180, %49\n  br i1 %181, label %225, label %182\n\n182:                                              ; preds = %178\n  call void @_ZdlPv(i8* %180) #7\n  br label %225\n\n183:                                              ; preds = %171\n  %184 = load i8*, i8** %50, align 8, !tbaa !15\n  %185 = icmp eq i8* %184, %49\n  br i1 %185, label %186, label %200\n\n186:                                              ; preds = %183\n  %187 = load i64, i64* %52, align 8, !tbaa !3\n  %188 = icmp eq i64 %187, 0\n  br i1 %188, label %195, label %189\n\n189:                                              ; preds = %186\n  %190 = load i8*, i8** %47, align 8, !tbaa !15\n  %191 = icmp eq i64 %187, 1\n  br i1 %191, label %192, label %194\n\n192:                                              ; preds = %189\n  %193 = load i8, i8* %49, align 8, !tbaa !11\n  store i8 %193, i8* %190, align 1, !tbaa !11\n  br label %195\n\n194:                                              ; preds = %189\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %190, i8* nonnull align 8 %49, i64 %187, i1 false) #7\n  br label %195\n\n195:                                              ; preds = %194, %192, %186\n  %196 = load i64, i64* %52, align 8, !tbaa !3\n  store i64 %196, i64* %19, align 8, !tbaa !3\n  %197 = load i8*, i8** %47, align 8, !tbaa !15\n  %198 = getelementptr inbounds i8, i8* %197, i64 %196\n  store i8 0, i8* %198, align 1, !tbaa !11\n  %199 = load i8*, i8** %50, align 8, !tbaa !15\n  br label %209\n\n200:                                              ; preds = %183\n  %201 = load i8*, i8** %47, align 8, !tbaa !15\n  %202 = icmp eq i8* %201, %20\n  %203 = load i64, i64* %53, align 8\n  store i8* %184, i8** %47, align 8, !tbaa !15\n  %204 = load <2 x i64>, <2 x i64>* %59, align 8, !tbaa !11\n  store <2 x i64> %204, <2 x i64>* %60, align 8, !tbaa !11\n  %205 = icmp eq i8* %201, null\n  %206 = or i1 %202, %205\n  br i1 %206, label %208, label %207\n\n207:                                              ; preds = %200\n  store i8* %201, i8** %50, align 8, !tbaa !15\n  store i64 %203, i64* %51, align 8, !tbaa !11\n  br label %209\n\n208:                                              ; preds = %200\n  store %union.anon* %45, %union.anon** %46, align 8, !tbaa !15\n  br label %209\n\n209:                                              ; preds = %195, %207, %208\n  %210 = phi i8* [ %199, %195 ], [ %201, %207 ], [ %49, %208 ]\n  store i64 0, i64* %52, align 8, !tbaa !3\n  store i8 0, i8* %210, align 1, !tbaa !11\n  %211 = load i8*, i8** %50, align 8, !tbaa !15\n  %212 = icmp eq i8* %211, %49\n  br i1 %212, label %214, label %213\n\n213:                                              ; preds = %209\n  call void @_ZdlPv(i8* %211) #7\n  br label %214\n\n214:                                              ; preds = %209, %213\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %44) #7\n  %215 = add nuw i64 %66, 1\n  %216 = trunc i64 %215 to i32\n  %217 = mul nsw i32 %216, 3\n  %218 = icmp slt i32 %217, %11\n  br i1 %218, label %219, label %237, !llvm.loop !40\n\n219:                                              ; preds = %214\n  %220 = load i64, i64* %9, align 8, !tbaa !3, !noalias !28\n  %221 = zext i32 %217 to i64\n  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %21) #7\n  %222 = icmp ult i64 %220, %221\n  br i1 %222, label %61, label %64\n\n223:                                              ; preds = %162\n  %224 = landingpad { i8*, i32 }\n          cleanup\n  br label %225\n\n225:                                              ; preds = %178, %182, %223\n  %226 = phi { i8*, i32 } [ %224, %223 ], [ %179, %182 ], [ %179, %178 ]\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %44) #7\n  br label %227\n\n227:                                              ; preds = %225, %157, %150\n  %228 = phi { i8*, i32 } [ %226, %225 ], [ %153, %157 ], [ %151, %150 ]\n  %229 = load i8*, i8** %47, align 8, !tbaa !15\n  %230 = icmp eq i8* %229, %20\n  br i1 %230, label %232, label %231\n\n231:                                              ; preds = %227\n  call void @_ZdlPv(i8* %229) #7\n  br label %232\n\n232:                                              ; preds = %227, %231\n  %233 = load i8*, i8** %28, align 8, !tbaa !15\n  %234 = icmp eq i8* %233, %16\n  br i1 %234, label %236, label %235\n\n235:                                              ; preds = %232\n  call void @_ZdlPv(i8* %233) #7\n  br label %236\n\n236:                                              ; preds = %232, %235\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %12) #7\n  resume { i8*, i32 } %228\n\n237:                                              ; preds = %214\n  %238 = load i8*, i8** %28, align 8, !tbaa !15\n  %239 = icmp eq i8* %238, %16\n  br i1 %239, label %241, label %240\n\n240:                                              ; preds = %237\n  call void @_ZdlPv(i8* %238) #7\n  br label %241\n\n241:                                              ; preds = %2, %237, %240\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %12) #7\n  ret void\n}\n\n; Function Attrs: nobuiltin nounwind\ndeclare dso_local void @_ZdlPv(i8*) local_unnamed_addr #2\n\n; Function Attrs: noreturn\ndeclare dso_local void @_ZSt24__throw_out_of_range_fmtPKcz(i8*, ...) local_unnamed_addr #3\n\ndeclare dso_local i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32), i64* nonnull align 8 dereferenceable(8), i64) local_unnamed_addr #4\n\n; Function Attrs: argmemonly mustprogress nofree nounwind willreturn\ndeclare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #5\n\ndeclare dso_local nonnull align 8 dereferenceable(32) %\"class.std::__cxx11::basic_string\"* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEmmmc(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32), i64, i64, i64, i8 signext) local_unnamed_addr #4\n\ndeclare dso_local nonnull align 8 dereferenceable(32) %\"class.std::__cxx11::basic_string\"* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32), i8*, i64) local_unnamed_addr #4\n\n; Function Attrs: inaccessiblememonly nofree nosync nounwind willreturn\ndeclare void @llvm.experimental.noalias.scope.decl(metadata) #6\n\nattributes #0 = { uwtable \"frame-pointer\"=\"none\" \"min-legal-vector-width\"=\"0\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #1 = { argmemonly mustprogress nofree nosync nounwind willreturn }\nattributes #2 = { nobuiltin nounwind \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #3 = { noreturn \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #4 = { \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #5 = { argmemonly mustprogress nofree nounwind willreturn }\nattributes #6 = { inaccessiblememonly nofree nosync nounwind willreturn }\nattributes #7 = { nounwind }\nattributes #8 = { noreturn }\n\n!llvm.module.flags = !{!0, !1}\n!llvm.ident = !{!2}\n\n!0 = !{i32 1, !\"wchar_size\", i32 4}\n!1 = !{i32 7, !\"uwtable\", i32 1}\n!2 = !{!\"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)\"}\n!3 = !{!4, !9, i64 8}\n!4 = !{!\"_ZTSNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE\", !5, i64 0, !9, i64 8, !7, i64 16}\n!5 = !{!\"_ZTSNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderE\", !6, i64 0}\n!6 = !{!\"any pointer\", !7, i64 0}\n!7 = !{!\"omnipotent char\", !8, i64 0}\n!8 = !{!\"Simple C++ TBAA\"}\n!9 = !{!\"long\", !7, i64 0}\n!10 = !{!5, !6, i64 0}\n!11 = !{!7, !7, i64 0}\n!12 = !{!13}\n!13 = distinct !{!13, !14, !\"_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEmm: argument 0\"}\n!14 = distinct !{!14, !\"_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEmm\"}\n!15 = !{!4, !6, i64 0}\n!16 = !{!17}\n!17 = distinct !{!17, !18, !\"_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEmm: argument 0\"}\n!18 = distinct !{!18, !\"_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEmm\"}\n!19 = !{!20}\n!20 = distinct !{!20, !21, !\"_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_S5_: argument 0\"}\n!21 = distinct !{!21, !\"_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_S5_\"}\n!22 = !{!23}\n!23 = distinct !{!23, !24, !\"_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_SA_: argument 0\"}\n!24 = distinct !{!24, !\"_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_SA_\"}\n!25 = !{!9, !9, i64 0}\n!26 = distinct !{!26, !27}\n!27 = !{!\"llvm.loop.mustprogress\"}\n!28 = !{!29}\n!29 = distinct !{!29, !30, !\"_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEmm: argument 0\"}\n!30 = distinct !{!30, !\"_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEmm\"}\n!31 = !{!32}\n!32 = distinct !{!32, !33, !\"_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEmm: argument 0\"}\n!33 = distinct !{!33, !\"_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEmm\"}\n!34 = !{!35}\n!35 = distinct !{!35, !36, !\"_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EES5_OS8_: argument 0\"}\n!36 = distinct !{!36, !\"_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EES5_OS8_\"}\n!37 = !{!38}\n!38 = distinct !{!38, !39, !\"_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_SA_: argument 0\"}\n!39 = distinct !{!39, !\"_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_SA_\"}\n!40 = distinct !{!40, !27}\n", "target": "This is the targeted source code:\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring encode_cyclic(string s){ \n    // returns encoded string by cycling groups of three characters.  \n    // split string to groups. Each of length 3.\n    int l=s.length();\n    int num=(l+2)/3;\n    string x,output;\n    int i;\n    for (i=0;i*3<l;i++)\n    {\n        //cycle elements in each group. Unless group has fewer elements than 3.\n        x=s.substr(i*3,3);\n        if (x.length()==3) x=x.substr(1)+x[0];\n        output=output+x;\n    }\n    return output;\n}\n\n\nstring decode_cyclic(string s){ \n    /*\n    takes as input string encoded with encode_cyclic function. Returns decoded string. \n    */\n\n    int l=s.length();\n    int num=(l+2)/3;\n    string x,output;\n    int i;\n    for (i=0;i*3<l;i++)\n    {\n        x=s.substr(i*3,3);\n        if (x.length()==3) x=x[2]+x.substr(0,2);\n        output=output+x;\n    }\n    return output;\n\n\n}\n"}
{"input": "Convert this to C++:\n; ModuleID = '../../Human_xBenchmarks_164/CPP_39/CPP_39.cpp'\nsource_filename = \"../../Human_xBenchmarks_164/CPP_39/CPP_39.cpp\"\ntarget datalayout = \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\ntarget triple = \"x86_64-unknown-linux-gnu\"\n\n; Function Attrs: mustprogress nofree nosync nounwind uwtable\ndefine dso_local i32 @_Z9prime_fibi(i32 %0) local_unnamed_addr #0 {\n  br label %2\n\n2:                                                ; preds = %19, %1\n  %3 = phi i32 [ 1, %1 ], [ %4, %19 ]\n  %4 = phi i32 [ 2, %1 ], [ %7, %19 ]\n  %5 = phi i32 [ 0, %1 ], [ %22, %19 ]\n  %6 = icmp slt i32 %5, %0\n  tail call void @llvm.assume(i1 %6)\n  %7 = add nsw i32 %4, %3\n  %8 = icmp slt i32 %4, 4\n  br i1 %8, label %19, label %9\n\n9:                                                ; preds = %2, %9\n  %10 = phi i32 [ %13, %9 ], [ 2, %2 ]\n  %11 = srem i32 %4, %10\n  %12 = icmp eq i32 %11, 0\n  %13 = add nuw nsw i32 %10, 1\n  %14 = mul nsw i32 %13, %13\n  %15 = icmp sgt i32 %14, %4\n  %16 = select i1 %12, i1 true, i1 %15\n  br i1 %16, label %17, label %9, !llvm.loop !3\n\n17:                                               ; preds = %9\n  %18 = xor i1 %12, true\n  br label %19\n\n19:                                               ; preds = %17, %2\n  %20 = phi i1 [ true, %2 ], [ %18, %17 ]\n  %21 = zext i1 %20 to i32\n  %22 = add nuw nsw i32 %5, %21\n  %23 = icmp eq i32 %22, %0\n  br i1 %23, label %24, label %2, !llvm.loop !5\n\n24:                                               ; preds = %19\n  ret i32 %4\n}\n\n; Function Attrs: inaccessiblememonly nofree nosync nounwind willreturn\ndeclare void @llvm.assume(i1 noundef) #1\n\nattributes #0 = { mustprogress nofree nosync nounwind uwtable \"frame-pointer\"=\"none\" \"min-legal-vector-width\"=\"0\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #1 = { inaccessiblememonly nofree nosync nounwind willreturn }\n\n!llvm.module.flags = !{!0, !1}\n!llvm.ident = !{!2}\n\n!0 = !{i32 1, !\"wchar_size\", i32 4}\n!1 = !{i32 7, !\"uwtable\", i32 1}\n!2 = !{!\"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)\"}\n!3 = distinct !{!3, !4}\n!4 = !{!\"llvm.loop.mustprogress\"}\n!5 = distinct !{!5, !4}\n", "target": "This is the targeted source code:\n/*\nprime_fib returns n-th number that is a Fibonacci number and it's also prime.\n>>> prime_fib(1)\n2\n>>> prime_fib(2)\n3\n>>> prime_fib(3)\n5\n>>> prime_fib(4)\n13\n>>> prime_fib(5)\n89\n*/\n#include<stdio.h>\nusing namespace std;\nint prime_fib(int n){\n\n    int f1,f2,m;\n    f1=1;f2=2;\n    int count=0;\n    while (count<n)\n    {\n        f1=f1+f2;\n        m=f1;f1=f2;f2=m;\n        bool isprime=true;\n        for (int w=2;w*w<=f1;w++)\n            if (f1%w==0)\n            {\n             isprime=false; break;\n            }\n        if (isprime) count+=1;\n        if (count==n) return f1;\n    }\n\n}\n"}
{"input": "Convert this to C++:\n; ModuleID = '../../Human_xBenchmarks_164/CPP_40/CPP_40.cpp'\nsource_filename = \"../../Human_xBenchmarks_164/CPP_40/CPP_40.cpp\"\ntarget datalayout = \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\ntarget triple = \"x86_64-unknown-linux-gnu\"\n\n%\"class.std::vector\" = type { %\"struct.std::_Vector_base\" }\n%\"struct.std::_Vector_base\" = type { %\"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl\" }\n%\"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl\" = type { %\"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl_data\" }\n%\"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl_data\" = type { i32*, i32*, i32* }\n\n; Function Attrs: mustprogress nofree norecurse nosync nounwind readonly uwtable willreturn\ndefine dso_local zeroext i1 @_Z19triples_sum_to_zeroSt6vectorIiSaIiEE(%\"class.std::vector\"* nocapture readonly %0) local_unnamed_addr #0 {\n  %2 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0, i64 0, i32 0, i32 0, i32 0, i32 1\n  %3 = load i32*, i32** %2, align 8, !tbaa !3\n  %4 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0, i64 0, i32 0, i32 0, i32 0, i32 0\n  %5 = load i32*, i32** %4, align 8, !tbaa !8\n  %6 = ptrtoint i32* %3 to i64\n  %7 = ptrtoint i32* %5 to i64\n  %8 = sub i64 %6, %7\n  %9 = ashr exact i64 %8, 2\n  %10 = icmp eq i64 %8, 0\n  br i1 %10, label %47, label %11\n\n11:                                               ; preds = %1\n  %12 = call i64 @llvm.umax.i64(i64 %9, i64 1)\n  br label %17\n\n13:                                               ; preds = %27, %25, %17\n  %14 = add i32 %20, 1\n  %15 = add nuw i64 %19, 1\n  %16 = icmp eq i64 %22, %12\n  br i1 %16, label %47, label %17\n\n17:                                               ; preds = %11, %13\n  %18 = phi i64 [ 0, %11 ], [ %22, %13 ]\n  %19 = phi i64 [ 1, %11 ], [ %15, %13 ]\n  %20 = phi i32 [ 2, %11 ], [ %14, %13 ]\n  %21 = phi i1 [ true, %11 ], [ %24, %13 ]\n  %22 = add nuw i64 %18, 1\n  %23 = getelementptr inbounds i32, i32* %5, i64 %18\n  %24 = icmp ugt i64 %9, %22\n  br i1 %24, label %27, label %13\n\n25:                                               ; preds = %38\n  %26 = add i32 %29, 1\n  br i1 %31, label %27, label %13\n\n27:                                               ; preds = %17, %25\n  %28 = phi i64 [ %30, %25 ], [ %19, %17 ]\n  %29 = phi i32 [ %26, %25 ], [ %20, %17 ]\n  %30 = add i64 %28, 1\n  %31 = icmp ugt i64 %9, %30\n  br i1 %31, label %32, label %13\n\n32:                                               ; preds = %27\n  %33 = zext i32 %29 to i64\n  %34 = getelementptr inbounds i32, i32* %5, i64 %28\n  %35 = load i32, i32* %23, align 4, !tbaa !9\n  %36 = load i32, i32* %34, align 4, !tbaa !9\n  %37 = add nsw i32 %36, %35\n  br label %40\n\n38:                                               ; preds = %40\n  %39 = icmp ugt i64 %9, %46\n  br i1 %39, label %40, label %25, !llvm.loop !11\n\n40:                                               ; preds = %32, %38\n  %41 = phi i64 [ %33, %32 ], [ %46, %38 ]\n  %42 = getelementptr inbounds i32, i32* %5, i64 %41\n  %43 = load i32, i32* %42, align 4, !tbaa !9\n  %44 = sub i32 0, %43\n  %45 = icmp eq i32 %37, %44\n  %46 = add nuw i64 %41, 1\n  br i1 %45, label %47, label %38\n\n47:                                               ; preds = %13, %40, %1\n  %48 = phi i1 [ false, %1 ], [ %21, %40 ], [ %24, %13 ]\n  ret i1 %48\n}\n\n; Function Attrs: nofree nosync nounwind readnone speculatable willreturn\ndeclare i64 @llvm.umax.i64(i64, i64) #1\n\nattributes #0 = { mustprogress nofree norecurse nosync nounwind readonly uwtable willreturn \"frame-pointer\"=\"none\" \"min-legal-vector-width\"=\"0\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #1 = { nofree nosync nounwind readnone speculatable willreturn }\n\n!llvm.module.flags = !{!0, !1}\n!llvm.ident = !{!2}\n\n!0 = !{i32 1, !\"wchar_size\", i32 4}\n!1 = !{i32 7, !\"uwtable\", i32 1}\n!2 = !{!\"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)\"}\n!3 = !{!4, !5, i64 8}\n!4 = !{!\"_ZTSNSt12_Vector_baseIiSaIiEE17_Vector_impl_dataE\", !5, i64 0, !5, i64 8, !5, i64 16}\n!5 = !{!\"any pointer\", !6, i64 0}\n!6 = !{!\"omnipotent char\", !7, i64 0}\n!7 = !{!\"Simple C++ TBAA\"}\n!8 = !{!4, !5, i64 0}\n!9 = !{!10, !10, i64 0}\n!10 = !{!\"int\", !6, i64 0}\n!11 = distinct !{!11, !12}\n!12 = !{!\"llvm.loop.mustprogress\"}\n", "target": "This is the targeted source code:\n/*\ntriples_sum_to_zero takes a vector of integers as an input.\nit returns true if there are three distinct elements in the vector that\nsum to zero, and false otherwise.\n\n>>> triples_sum_to_zero({1, 3, 5, 0})\nfalse\n>>> triples_sum_to_zero({1, 3, -2, 1})\ntrue\n>>> triples_sum_to_zero({1, 2, 3, 7})\nfalse\n>>> triples_sum_to_zero({2, 4, -5, 3, 9, 7})\ntrue\n>>> triples_sum_to_zero({1})\nfalse\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool triples_sum_to_zero(vector<int> l){\n\n    for (int i=0;i<l.size();i++)\n    for (int j=i+1;j<l.size();j++)\n    for (int k=j+1;k<l.size();k++)\n        if (l[i]+l[j]+l[k]==0) return true;\n    return false;\n}\n"}
{"input": "Convert this to C++:\n; ModuleID = '../../Human_xBenchmarks_164/CPP_41/CPP_41.cpp'\nsource_filename = \"../../Human_xBenchmarks_164/CPP_41/CPP_41.cpp\"\ntarget datalayout = \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\ntarget triple = \"x86_64-unknown-linux-gnu\"\n\n; Function Attrs: mustprogress nofree norecurse nosync nounwind readnone uwtable willreturn\ndefine dso_local i32 @_Z18car_race_collisioni(i32 %0) local_unnamed_addr #0 {\n  %2 = mul nsw i32 %0, %0\n  ret i32 %2\n}\n\nattributes #0 = { mustprogress nofree norecurse nosync nounwind readnone uwtable willreturn \"frame-pointer\"=\"none\" \"min-legal-vector-width\"=\"0\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\n\n!llvm.module.flags = !{!0, !1}\n!llvm.ident = !{!2}\n\n!0 = !{i32 1, !\"wchar_size\", i32 4}\n!1 = !{i32 7, !\"uwtable\", i32 1}\n!2 = !{!\"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)\"}\n", "target": "This is the targeted source code:\n/*\nImagine a road that's a perfectly straight infinitely long line.\nn cars are driving left to right;  simultaneously, a different set of n cars\nare driving right to left.   The two sets of cars start out being very far from\neach other.  All cars move in the same speed.  Two cars are said to collide\nwhen a car that's moving left to right hits a car that's moving right to left.\nHowever, the cars are infinitely sturdy and strong; as a result, they continue moving\nin their trajectory as if they did not collide.\n\nThis function outputs the number of such collisions.\n*/\n#include<stdio.h>\nusing namespace std;\nint car_race_collision(int n){\n\n    return n*n;\n}\n"}
{"input": "Convert this to C++:\n; ModuleID = '../../Human_xBenchmarks_164/CPP_42/CPP_42.cpp'\nsource_filename = \"../../Human_xBenchmarks_164/CPP_42/CPP_42.cpp\"\ntarget datalayout = \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\ntarget triple = \"x86_64-unknown-linux-gnu\"\n\n%\"class.std::vector\" = type { %\"struct.std::_Vector_base\" }\n%\"struct.std::_Vector_base\" = type { %\"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl\" }\n%\"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl\" = type { %\"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl_data\" }\n%\"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl_data\" = type { i32*, i32*, i32* }\n\n; Function Attrs: nofree nosync nounwind uwtable\ndefine dso_local void @_Z9incr_listSt6vectorIiSaIiEE(%\"class.std::vector\"* noalias nocapture sret(%\"class.std::vector\") align 8 %0, %\"class.std::vector\"* nocapture %1) local_unnamed_addr #0 {\n  %3 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %1, i64 0, i32 0, i32 0, i32 0, i32 1\n  %4 = load i32*, i32** %3, align 8, !tbaa !3\n  %5 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %1, i64 0, i32 0, i32 0, i32 0, i32 0\n  %6 = load i32*, i32** %5, align 8, !tbaa !8\n  %7 = ptrtoint i32* %4 to i64\n  %8 = ptrtoint i32* %6 to i64\n  %9 = sub i64 %7, %8\n  %10 = icmp eq i64 %9, 0\n  br i1 %10, label %69, label %11\n\n11:                                               ; preds = %2\n  %12 = ashr exact i64 %9, 2\n  %13 = call i64 @llvm.umax.i64(i64 %12, i64 1)\n  %14 = icmp ult i64 %13, 8\n  br i1 %14, label %67, label %15\n\n15:                                               ; preds = %11\n  %16 = and i64 %13, -8\n  %17 = add i64 %16, -8\n  %18 = lshr exact i64 %17, 3\n  %19 = add nuw nsw i64 %18, 1\n  %20 = and i64 %19, 1\n  %21 = icmp eq i64 %17, 0\n  br i1 %21, label %51, label %22\n\n22:                                               ; preds = %15\n  %23 = and i64 %19, 4611686018427387902\n  br label %24\n\n24:                                               ; preds = %24, %22\n  %25 = phi i64 [ 0, %22 ], [ %48, %24 ]\n  %26 = phi i64 [ %23, %22 ], [ %49, %24 ]\n  %27 = getelementptr inbounds i32, i32* %6, i64 %25\n  %28 = bitcast i32* %27 to <4 x i32>*\n  %29 = load <4 x i32>, <4 x i32>* %28, align 4, !tbaa !9\n  %30 = getelementptr inbounds i32, i32* %27, i64 4\n  %31 = bitcast i32* %30 to <4 x i32>*\n  %32 = load <4 x i32>, <4 x i32>* %31, align 4, !tbaa !9\n  %33 = add nsw <4 x i32> %29, <i32 1, i32 1, i32 1, i32 1>\n  %34 = add nsw <4 x i32> %32, <i32 1, i32 1, i32 1, i32 1>\n  %35 = bitcast i32* %27 to <4 x i32>*\n  store <4 x i32> %33, <4 x i32>* %35, align 4, !tbaa !9\n  %36 = bitcast i32* %30 to <4 x i32>*\n  store <4 x i32> %34, <4 x i32>* %36, align 4, !tbaa !9\n  %37 = or i64 %25, 8\n  %38 = getelementptr inbounds i32, i32* %6, i64 %37\n  %39 = bitcast i32* %38 to <4 x i32>*\n  %40 = load <4 x i32>, <4 x i32>* %39, align 4, !tbaa !9\n  %41 = getelementptr inbounds i32, i32* %38, i64 4\n  %42 = bitcast i32* %41 to <4 x i32>*\n  %43 = load <4 x i32>, <4 x i32>* %42, align 4, !tbaa !9\n  %44 = add nsw <4 x i32> %40, <i32 1, i32 1, i32 1, i32 1>\n  %45 = add nsw <4 x i32> %43, <i32 1, i32 1, i32 1, i32 1>\n  %46 = bitcast i32* %38 to <4 x i32>*\n  store <4 x i32> %44, <4 x i32>* %46, align 4, !tbaa !9\n  %47 = bitcast i32* %41 to <4 x i32>*\n  store <4 x i32> %45, <4 x i32>* %47, align 4, !tbaa !9\n  %48 = add nuw i64 %25, 16\n  %49 = add i64 %26, -2\n  %50 = icmp eq i64 %49, 0\n  br i1 %50, label %51, label %24, !llvm.loop !11\n\n51:                                               ; preds = %24, %15\n  %52 = phi i64 [ 0, %15 ], [ %48, %24 ]\n  %53 = icmp eq i64 %20, 0\n  br i1 %53, label %65, label %54\n\n54:                                               ; preds = %51\n  %55 = getelementptr inbounds i32, i32* %6, i64 %52\n  %56 = bitcast i32* %55 to <4 x i32>*\n  %57 = load <4 x i32>, <4 x i32>* %56, align 4, !tbaa !9\n  %58 = getelementptr inbounds i32, i32* %55, i64 4\n  %59 = bitcast i32* %58 to <4 x i32>*\n  %60 = load <4 x i32>, <4 x i32>* %59, align 4, !tbaa !9\n  %61 = add nsw <4 x i32> %57, <i32 1, i32 1, i32 1, i32 1>\n  %62 = add nsw <4 x i32> %60, <i32 1, i32 1, i32 1, i32 1>\n  %63 = bitcast i32* %55 to <4 x i32>*\n  store <4 x i32> %61, <4 x i32>* %63, align 4, !tbaa !9\n  %64 = bitcast i32* %58 to <4 x i32>*\n  store <4 x i32> %62, <4 x i32>* %64, align 4, !tbaa !9\n  br label %65\n\n65:                                               ; preds = %51, %54\n  %66 = icmp eq i64 %13, %16\n  br i1 %66, label %69, label %67\n\n67:                                               ; preds = %11, %65\n  %68 = phi i64 [ 0, %11 ], [ %16, %65 ]\n  br label %76\n\n69:                                               ; preds = %76, %65, %2\n  %70 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0, i64 0, i32 0, i32 0, i32 0, i32 0\n  store i32* %6, i32** %70, align 8, !tbaa !8\n  %71 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0, i64 0, i32 0, i32 0, i32 0, i32 1\n  store i32* %4, i32** %71, align 8, !tbaa !3\n  %72 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0, i64 0, i32 0, i32 0, i32 0, i32 2\n  %73 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %1, i64 0, i32 0, i32 0, i32 0, i32 2\n  %74 = load i32*, i32** %73, align 8, !tbaa !14\n  store i32* %74, i32** %72, align 8, !tbaa !14\n  %75 = bitcast %\"class.std::vector\"* %1 to i8*\n  tail call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(24) %75, i8 0, i64 24, i1 false) #3\n  ret void\n\n76:                                               ; preds = %67, %76\n  %77 = phi i64 [ %81, %76 ], [ %68, %67 ]\n  %78 = getelementptr inbounds i32, i32* %6, i64 %77\n  %79 = load i32, i32* %78, align 4, !tbaa !9\n  %80 = add nsw i32 %79, 1\n  store i32 %80, i32* %78, align 4, !tbaa !9\n  %81 = add nuw nsw i64 %77, 1\n  %82 = icmp eq i64 %81, %13\n  br i1 %82, label %69, label %76, !llvm.loop !15\n}\n\n; Function Attrs: argmemonly nofree nounwind willreturn writeonly\ndeclare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1\n\n; Function Attrs: nofree nosync nounwind readnone speculatable willreturn\ndeclare i64 @llvm.umax.i64(i64, i64) #2\n\nattributes #0 = { nofree nosync nounwind uwtable \"frame-pointer\"=\"none\" \"min-legal-vector-width\"=\"0\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #1 = { argmemonly nofree nounwind willreturn writeonly }\nattributes #2 = { nofree nosync nounwind readnone speculatable willreturn }\nattributes #3 = { nounwind }\n\n!llvm.module.flags = !{!0, !1}\n!llvm.ident = !{!2}\n\n!0 = !{i32 1, !\"wchar_size\", i32 4}\n!1 = !{i32 7, !\"uwtable\", i32 1}\n!2 = !{!\"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)\"}\n!3 = !{!4, !5, i64 8}\n!4 = !{!\"_ZTSNSt12_Vector_baseIiSaIiEE17_Vector_impl_dataE\", !5, i64 0, !5, i64 8, !5, i64 16}\n!5 = !{!\"any pointer\", !6, i64 0}\n!6 = !{!\"omnipotent char\", !7, i64 0}\n!7 = !{!\"Simple C++ TBAA\"}\n!8 = !{!4, !5, i64 0}\n!9 = !{!10, !10, i64 0}\n!10 = !{!\"int\", !6, i64 0}\n!11 = distinct !{!11, !12, !13}\n!12 = !{!\"llvm.loop.mustprogress\"}\n!13 = !{!\"llvm.loop.isvectorized\", i32 1}\n!14 = !{!4, !5, i64 16}\n!15 = distinct !{!15, !12, !16, !13}\n!16 = !{!\"llvm.loop.unroll.runtime.disable\"}\n", "target": "This is the targeted source code:\n/*\nReturn vector with elements incremented by 1.\n>>> incr_vector({1, 2, 3})\n{2, 3, 4}\n>>> incr_vector({5, 3, 5, 2, 3, 3, 9, 0, 123})\n{6, 4, 6, 3, 4, 4, 10, 1, 124}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> incr_list(vector<int> l){\n\n    for (int i=0;i<l.size();i++)\n        l[i]+=1;\n    return l;\n}\n"}
{"input": "Convert this to C++:\n; ModuleID = '../../Human_xBenchmarks_164/CPP_43/CPP_43.cpp'\nsource_filename = \"../../Human_xBenchmarks_164/CPP_43/CPP_43.cpp\"\ntarget datalayout = \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\ntarget triple = \"x86_64-unknown-linux-gnu\"\n\n%\"class.std::vector\" = type { %\"struct.std::_Vector_base\" }\n%\"struct.std::_Vector_base\" = type { %\"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl\" }\n%\"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl\" = type { %\"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl_data\" }\n%\"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl_data\" = type { i32*, i32*, i32* }\n\n; Function Attrs: mustprogress nofree norecurse nosync nounwind readonly uwtable willreturn\ndefine dso_local zeroext i1 @_Z17pairs_sum_to_zeroSt6vectorIiSaIiEE(%\"class.std::vector\"* nocapture readonly %0) local_unnamed_addr #0 {\n  %2 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0, i64 0, i32 0, i32 0, i32 0, i32 1\n  %3 = load i32*, i32** %2, align 8, !tbaa !3\n  %4 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0, i64 0, i32 0, i32 0, i32 0, i32 0\n  %5 = load i32*, i32** %4, align 8, !tbaa !8\n  %6 = ptrtoint i32* %3 to i64\n  %7 = ptrtoint i32* %5 to i64\n  %8 = sub i64 %6, %7\n  %9 = ashr exact i64 %8, 2\n  %10 = icmp eq i64 %8, 0\n  br i1 %10, label %34, label %11\n\n11:                                               ; preds = %1\n  %12 = call i64 @llvm.umax.i64(i64 %9, i64 1)\n  br label %16\n\n13:                                               ; preds = %25, %16\n  %14 = add i64 %18, 1\n  %15 = icmp eq i64 %20, %12\n  br i1 %15, label %34, label %16\n\n16:                                               ; preds = %11, %13\n  %17 = phi i64 [ 0, %11 ], [ %20, %13 ]\n  %18 = phi i64 [ 1, %11 ], [ %14, %13 ]\n  %19 = phi i1 [ true, %11 ], [ %21, %13 ]\n  %20 = add nuw i64 %17, 1\n  %21 = icmp ugt i64 %9, %20\n  br i1 %21, label %22, label %13\n\n22:                                               ; preds = %16\n  %23 = getelementptr inbounds i32, i32* %5, i64 %17\n  %24 = load i32, i32* %23, align 4, !tbaa !9\n  br label %27\n\n25:                                               ; preds = %27\n  %26 = icmp ugt i64 %9, %33\n  br i1 %26, label %27, label %13, !llvm.loop !11\n\n27:                                               ; preds = %22, %25\n  %28 = phi i64 [ %18, %22 ], [ %33, %25 ]\n  %29 = getelementptr inbounds i32, i32* %5, i64 %28\n  %30 = load i32, i32* %29, align 4, !tbaa !9\n  %31 = sub i32 0, %30\n  %32 = icmp eq i32 %24, %31\n  %33 = add i64 %28, 1\n  br i1 %32, label %34, label %25\n\n34:                                               ; preds = %13, %27, %1\n  %35 = phi i1 [ false, %1 ], [ %19, %27 ], [ %21, %13 ]\n  ret i1 %35\n}\n\n; Function Attrs: nofree nosync nounwind readnone speculatable willreturn\ndeclare i64 @llvm.umax.i64(i64, i64) #1\n\nattributes #0 = { mustprogress nofree norecurse nosync nounwind readonly uwtable willreturn \"frame-pointer\"=\"none\" \"min-legal-vector-width\"=\"0\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #1 = { nofree nosync nounwind readnone speculatable willreturn }\n\n!llvm.module.flags = !{!0, !1}\n!llvm.ident = !{!2}\n\n!0 = !{i32 1, !\"wchar_size\", i32 4}\n!1 = !{i32 7, !\"uwtable\", i32 1}\n!2 = !{!\"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)\"}\n!3 = !{!4, !5, i64 8}\n!4 = !{!\"_ZTSNSt12_Vector_baseIiSaIiEE17_Vector_impl_dataE\", !5, i64 0, !5, i64 8, !5, i64 16}\n!5 = !{!\"any pointer\", !6, i64 0}\n!6 = !{!\"omnipotent char\", !7, i64 0}\n!7 = !{!\"Simple C++ TBAA\"}\n!8 = !{!4, !5, i64 0}\n!9 = !{!10, !10, i64 0}\n!10 = !{!\"int\", !6, i64 0}\n!11 = distinct !{!11, !12}\n!12 = !{!\"llvm.loop.mustprogress\"}\n", "target": "This is the targeted source code:\n/*\npairs_sum_to_zero takes a vector of integers as an input.\nit returns true if there are two distinct elements in the vector that\nsum to zero, and false otherwise.\n>>> pairs_sum_to_zero({1, 3, 5, 0})\nfalse\n>>> pairs_sum_to_zero({1, 3, -2, 1})\nfalse\n>>> pairs_sum_to_zero({1, 2, 3, 7})\nfalse\n>>> pairs_sum_to_zero({2, 4, -5, 3, 5, 7})\ntrue\n>>> pairs_sum_to_zero({1})\nfalse\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool pairs_sum_to_zero(vector<int> l){\n\n    for (int i=0;i<l.size();i++)\n    for (int j=i+1;j<l.size();j++)\n    if (l[i]+l[j]==0) return true;\n    return false;\n}\n"}
{"input": "Convert this to C++:\n; ModuleID = '../../Human_xBenchmarks_164/CPP_44/CPP_44.cpp'\nsource_filename = \"../../Human_xBenchmarks_164/CPP_44/CPP_44.cpp\"\ntarget datalayout = \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\ntarget triple = \"x86_64-unknown-linux-gnu\"\n\n%\"class.std::__cxx11::basic_string\" = type { %\"struct.std::__cxx11::basic_string<char>::_Alloc_hider\", i64, %union.anon }\n%\"struct.std::__cxx11::basic_string<char>::_Alloc_hider\" = type { i8* }\n%union.anon = type { i64, [8 x i8] }\n%struct.__va_list_tag = type { i32, i32, i8*, i8* }\n\n$_ZN9__gnu_cxx12__to_xstringINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcEET_PFiPT0_mPKS8_P13__va_list_tagEmSB_z = comdat any\n\n@.str.1 = private unnamed_addr constant [3 x i8] c\"%d\\00\", align 1\n\n; Function Attrs: uwtable\ndefine dso_local void @_Z11change_baseB5cxx11ii(%\"class.std::__cxx11::basic_string\"* noalias sret(%\"class.std::__cxx11::basic_string\") align 8 %0, i32 %1, i32 %2) local_unnamed_addr #0 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {\n  %4 = alloca %\"class.std::__cxx11::basic_string\", align 8\n  %5 = alloca %\"class.std::__cxx11::basic_string\", align 8\n  %6 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 2\n  %7 = bitcast %\"class.std::__cxx11::basic_string\"* %0 to %union.anon**\n  store %union.anon* %6, %union.anon** %7, align 8, !tbaa !3\n  %8 = bitcast %union.anon* %6 to i8*\n  %9 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 0, i32 0\n  %10 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 1\n  store i64 0, i64* %10, align 8, !tbaa !8\n  store i8 0, i8* %8, align 8, !tbaa !11\n  %11 = bitcast %\"class.std::__cxx11::basic_string\"* %4 to i8*\n  %12 = bitcast %\"class.std::__cxx11::basic_string\"* %5 to i8*\n  %13 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %4, i64 0, i32 2\n  %14 = bitcast %\"class.std::__cxx11::basic_string\"* %4 to %union.anon**\n  %15 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %4, i64 0, i32 0, i32 0\n  %16 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %4, i64 0, i32 2, i32 0\n  %17 = bitcast %union.anon* %13 to i8*\n  %18 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %4, i64 0, i32 1\n  %19 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 2, i32 0\n  %20 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %5, i64 0, i32 0, i32 0\n  %21 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %5, i64 0, i32 2\n  %22 = bitcast %union.anon* %21 to i8*\n  %23 = icmp sgt i32 %1, 0\n  br i1 %23, label %24, label %97\n\n24:                                               ; preds = %3\n  %25 = bitcast i64* %18 to <2 x i64>*\n  %26 = bitcast i64* %10 to <2 x i64>*\n  br label %27\n\n27:                                               ; preds = %24, %83\n  %28 = phi i32 [ %30, %83 ], [ %1, %24 ]\n  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %11) #8\n  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %12) #8\n  %29 = srem i32 %28, %2\n  %30 = sdiv i32 %28, %2\n  invoke void (%\"class.std::__cxx11::basic_string\"*, i32 (i8*, i64, i8*, %struct.__va_list_tag*)*, i64, i8*, ...) @_ZN9__gnu_cxx12__to_xstringINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcEET_PFiPT0_mPKS8_P13__va_list_tagEmSB_z(%\"class.std::__cxx11::basic_string\"* nonnull sret(%\"class.std::__cxx11::basic_string\") align 8 %5, i32 (i8*, i64, i8*, %struct.__va_list_tag*)* nonnull @vsnprintf, i64 16, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32 %29)\n          to label %31 unwind label %85\n\n31:                                               ; preds = %27\n  call void @llvm.experimental.noalias.scope.decl(metadata !12)\n  %32 = load i8*, i8** %9, align 8, !tbaa !15, !noalias !12\n  %33 = load i64, i64* %10, align 8, !tbaa !8, !noalias !12\n  %34 = invoke nonnull align 8 dereferenceable(32) %\"class.std::__cxx11::basic_string\"* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %5, i8* %32, i64 %33)\n          to label %35 unwind label %87\n\n35:                                               ; preds = %31\n  store %union.anon* %13, %union.anon** %14, align 8, !tbaa !3, !alias.scope !12\n  %36 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %34, i64 0, i32 0, i32 0\n  %37 = load i8*, i8** %36, align 8, !tbaa !15\n  %38 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %34, i64 0, i32 2\n  %39 = bitcast %union.anon* %38 to i8*\n  %40 = icmp eq i8* %37, %39\n  br i1 %40, label %41, label %42\n\n41:                                               ; preds = %35\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(16) %17, i8* noundef nonnull align 8 dereferenceable(16) %37, i64 16, i1 false) #8\n  br label %45\n\n42:                                               ; preds = %35\n  store i8* %37, i8** %15, align 8, !tbaa !15, !alias.scope !12\n  %43 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %34, i64 0, i32 2, i32 0\n  %44 = load i64, i64* %43, align 8, !tbaa !11\n  store i64 %44, i64* %16, align 8, !tbaa !11, !alias.scope !12\n  br label %45\n\n45:                                               ; preds = %42, %41\n  %46 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %34, i64 0, i32 1\n  %47 = load i64, i64* %46, align 8, !tbaa !8\n  store i64 %47, i64* %18, align 8, !tbaa !8, !alias.scope !12\n  %48 = bitcast %\"class.std::__cxx11::basic_string\"* %34 to %union.anon**\n  store %union.anon* %38, %union.anon** %48, align 8, !tbaa !15\n  store i64 0, i64* %46, align 8, !tbaa !8\n  store i8 0, i8* %39, align 8, !tbaa !11\n  %49 = load i8*, i8** %15, align 8, !tbaa !15\n  %50 = icmp eq i8* %49, %17\n  br i1 %50, label %51, label %65\n\n51:                                               ; preds = %45\n  %52 = load i64, i64* %18, align 8, !tbaa !8\n  %53 = icmp eq i64 %52, 0\n  br i1 %53, label %60, label %54\n\n54:                                               ; preds = %51\n  %55 = load i8*, i8** %9, align 8, !tbaa !15\n  %56 = icmp eq i64 %52, 1\n  br i1 %56, label %57, label %59\n\n57:                                               ; preds = %54\n  %58 = load i8, i8* %17, align 8, !tbaa !11\n  store i8 %58, i8* %55, align 1, !tbaa !11\n  br label %60\n\n59:                                               ; preds = %54\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %55, i8* nonnull align 8 %17, i64 %52, i1 false) #8\n  br label %60\n\n60:                                               ; preds = %59, %57, %51\n  %61 = load i64, i64* %18, align 8, !tbaa !8\n  store i64 %61, i64* %10, align 8, !tbaa !8\n  %62 = load i8*, i8** %9, align 8, !tbaa !15\n  %63 = getelementptr inbounds i8, i8* %62, i64 %61\n  store i8 0, i8* %63, align 1, !tbaa !11\n  %64 = load i8*, i8** %15, align 8, !tbaa !15\n  br label %74\n\n65:                                               ; preds = %45\n  %66 = load i8*, i8** %9, align 8, !tbaa !15\n  %67 = icmp eq i8* %66, %8\n  %68 = load i64, i64* %19, align 8\n  store i8* %49, i8** %9, align 8, !tbaa !15\n  %69 = load <2 x i64>, <2 x i64>* %25, align 8, !tbaa !11\n  store <2 x i64> %69, <2 x i64>* %26, align 8, !tbaa !11\n  %70 = icmp eq i8* %66, null\n  %71 = or i1 %67, %70\n  br i1 %71, label %73, label %72\n\n72:                                               ; preds = %65\n  store i8* %66, i8** %15, align 8, !tbaa !15\n  store i64 %68, i64* %16, align 8, !tbaa !11\n  br label %74\n\n73:                                               ; preds = %65\n  store %union.anon* %13, %union.anon** %14, align 8, !tbaa !15\n  br label %74\n\n74:                                               ; preds = %60, %72, %73\n  %75 = phi i8* [ %64, %60 ], [ %66, %72 ], [ %17, %73 ]\n  store i64 0, i64* %18, align 8, !tbaa !8\n  store i8 0, i8* %75, align 1, !tbaa !11\n  %76 = load i8*, i8** %15, align 8, !tbaa !15\n  %77 = icmp eq i8* %76, %17\n  br i1 %77, label %79, label %78\n\n78:                                               ; preds = %74\n  call void @_ZdlPv(i8* %76) #8\n  br label %79\n\n79:                                               ; preds = %74, %78\n  %80 = load i8*, i8** %20, align 8, !tbaa !15\n  %81 = icmp eq i8* %80, %22\n  br i1 %81, label %83, label %82\n\n82:                                               ; preds = %79\n  call void @_ZdlPv(i8* %80) #8\n  br label %83\n\n83:                                               ; preds = %79, %82\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %12) #8\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %11) #8\n  %84 = icmp sgt i32 %30, 0\n  br i1 %84, label %27, label %97, !llvm.loop !16\n\n85:                                               ; preds = %27\n  %86 = landingpad { i8*, i32 }\n          cleanup\n  br label %92\n\n87:                                               ; preds = %31\n  %88 = landingpad { i8*, i32 }\n          cleanup\n  %89 = load i8*, i8** %20, align 8, !tbaa !15\n  %90 = icmp eq i8* %89, %22\n  br i1 %90, label %92, label %91\n\n91:                                               ; preds = %87\n  call void @_ZdlPv(i8* %89) #8\n  br label %92\n\n92:                                               ; preds = %91, %87, %85\n  %93 = phi { i8*, i32 } [ %86, %85 ], [ %88, %87 ], [ %88, %91 ]\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %12) #8\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %11) #8\n  %94 = load i8*, i8** %9, align 8, !tbaa !15\n  %95 = icmp eq i8* %94, %8\n  br i1 %95, label %98, label %96\n\n96:                                               ; preds = %92\n  call void @_ZdlPv(i8* %94) #8\n  br label %98\n\n97:                                               ; preds = %83, %3\n  ret void\n\n98:                                               ; preds = %96, %92\n  resume { i8*, i32 } %93\n}\n\n; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn\ndeclare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1\n\ndeclare dso_local i32 @__gxx_personality_v0(...)\n\n; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn\ndeclare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1\n\n; Function Attrs: uwtable\ndefine linkonce_odr dso_local void @_ZN9__gnu_cxx12__to_xstringINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcEET_PFiPT0_mPKS8_P13__va_list_tagEmSB_z(%\"class.std::__cxx11::basic_string\"* noalias sret(%\"class.std::__cxx11::basic_string\") align 8 %0, i32 (i8*, i64, i8*, %struct.__va_list_tag*)* %1, i64 %2, i8* %3, ...) local_unnamed_addr #0 comdat personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {\n  %5 = alloca i64, align 8\n  %6 = alloca [1 x %struct.__va_list_tag], align 16\n  %7 = alloca i8, i64 %2, align 16\n  %8 = bitcast [1 x %struct.__va_list_tag]* %6 to i8*\n  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %8) #8\n  %9 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %6, i64 0, i64 0\n  call void @llvm.va_start(i8* nonnull %8)\n  %10 = call i32 %1(i8* nonnull %7, i64 %2, i8* %3, %struct.__va_list_tag* nonnull %9)\n  call void @llvm.va_end(i8* nonnull %8)\n  %11 = sext i32 %10 to i64\n  %12 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 2\n  %13 = bitcast %\"class.std::__cxx11::basic_string\"* %0 to %union.anon**\n  store %union.anon* %12, %union.anon** %13, align 8, !tbaa !3\n  %14 = bitcast %union.anon* %12 to i8*\n  %15 = bitcast i64* %5 to i8*\n  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %15) #8\n  store i64 %11, i64* %5, align 8, !tbaa !18\n  %16 = icmp ugt i32 %10, 15\n  br i1 %16, label %17, label %22\n\n17:                                               ; preds = %4\n  %18 = call i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %0, i64* nonnull align 8 dereferenceable(8) %5, i64 0)\n  %19 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 0, i32 0\n  store i8* %18, i8** %19, align 8, !tbaa !15\n  %20 = load i64, i64* %5, align 8, !tbaa !18\n  %21 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 2, i32 0\n  store i64 %20, i64* %21, align 8, !tbaa !11\n  br label %22\n\n22:                                               ; preds = %17, %4\n  %23 = phi i8* [ %18, %17 ], [ %14, %4 ]\n  switch i64 %11, label %26 [\n    i64 1, label %24\n    i64 0, label %27\n  ]\n\n24:                                               ; preds = %22\n  %25 = load i8, i8* %7, align 16, !tbaa !11\n  store i8 %25, i8* %23, align 1, !tbaa !11\n  br label %27\n\n26:                                               ; preds = %22\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %23, i8* nonnull align 16 %7, i64 %11, i1 false) #8\n  br label %27\n\n27:                                               ; preds = %26, %24, %22\n  %28 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 0, i32 0\n  %29 = load i64, i64* %5, align 8, !tbaa !18\n  %30 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 1\n  store i64 %29, i64* %30, align 8, !tbaa !8\n  %31 = load i8*, i8** %28, align 8, !tbaa !15\n  %32 = getelementptr inbounds i8, i8* %31, i64 %29\n  store i8 0, i8* %32, align 1, !tbaa !11\n  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %15) #8\n  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %8) #8\n  ret void\n}\n\n; Function Attrs: nofree nounwind\ndeclare dso_local noundef i32 @vsnprintf(i8* nocapture noundef, i64 noundef, i8* nocapture noundef readonly, %struct.__va_list_tag* noundef) #2\n\n; Function Attrs: mustprogress nofree nosync nounwind willreturn\ndeclare void @llvm.va_start(i8*) #3\n\n; Function Attrs: mustprogress nofree nosync nounwind willreturn\ndeclare void @llvm.va_end(i8*) #3\n\ndeclare dso_local i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32), i64* nonnull align 8 dereferenceable(8), i64) local_unnamed_addr #4\n\n; Function Attrs: argmemonly mustprogress nofree nounwind willreturn\ndeclare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #5\n\n; Function Attrs: nobuiltin nounwind\ndeclare dso_local void @_ZdlPv(i8*) local_unnamed_addr #6\n\ndeclare dso_local nonnull align 8 dereferenceable(32) %\"class.std::__cxx11::basic_string\"* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32), i8*, i64) local_unnamed_addr #4\n\n; Function Attrs: inaccessiblememonly nofree nosync nounwind willreturn\ndeclare void @llvm.experimental.noalias.scope.decl(metadata) #7\n\nattributes #0 = { uwtable \"frame-pointer\"=\"none\" \"min-legal-vector-width\"=\"0\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #1 = { argmemonly mustprogress nofree nosync nounwind willreturn }\nattributes #2 = { nofree nounwind \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #3 = { mustprogress nofree nosync nounwind willreturn }\nattributes #4 = { \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #5 = { argmemonly mustprogress nofree nounwind willreturn }\nattributes #6 = { nobuiltin nounwind \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #7 = { inaccessiblememonly nofree nosync nounwind willreturn }\nattributes #8 = { nounwind }\n\n!llvm.module.flags = !{!0, !1}\n!llvm.ident = !{!2}\n\n!0 = !{i32 1, !\"wchar_size\", i32 4}\n!1 = !{i32 7, !\"uwtable\", i32 1}\n!2 = !{!\"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)\"}\n!3 = !{!4, !5, i64 0}\n!4 = !{!\"_ZTSNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderE\", !5, i64 0}\n!5 = !{!\"any pointer\", !6, i64 0}\n!6 = !{!\"omnipotent char\", !7, i64 0}\n!7 = !{!\"Simple C++ TBAA\"}\n!8 = !{!9, !10, i64 8}\n!9 = !{!\"_ZTSNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE\", !4, i64 0, !10, i64 8, !6, i64 16}\n!10 = !{!\"long\", !6, i64 0}\n!11 = !{!6, !6, i64 0}\n!12 = !{!13}\n!13 = distinct !{!13, !14, !\"_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_: argument 0\"}\n!14 = distinct !{!14, !\"_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_\"}\n!15 = !{!9, !5, i64 0}\n!16 = distinct !{!16, !17}\n!17 = !{!\"llvm.loop.mustprogress\"}\n!18 = !{!10, !10, i64 0}\n", "target": "This is the targeted source code:\n/*\nChange numerical base of input number x to base.\nreturn string representation after the conversion.\nbase numbers are less than 10.\n>>> change_base(8, 3)\n\"22\"\n>>> change_base(8, 2)\n\"1000\"\n>>> change_base(7, 2)\n\"111\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring change_base(int x,int base){\n\n    string out=\"\";\n    while (x>0)\n    {\n        out=to_string(x%base)+out;\n        x=x/base;\n    }\n    return out;\n}\n"}
{"input": "Convert this to C++:\n; ModuleID = '../../Human_xBenchmarks_164/CPP_45/CPP_45.cpp'\nsource_filename = \"../../Human_xBenchmarks_164/CPP_45/CPP_45.cpp\"\ntarget datalayout = \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\ntarget triple = \"x86_64-unknown-linux-gnu\"\n\n; Function Attrs: mustprogress nofree norecurse nosync nounwind readnone uwtable willreturn\ndefine dso_local float @_Z13triangle_areaff(float %0, float %1) local_unnamed_addr #0 {\n  %3 = fmul float %0, %1\n  %4 = fmul float %3, 5.000000e-01\n  ret float %4\n}\n\nattributes #0 = { mustprogress nofree norecurse nosync nounwind readnone uwtable willreturn \"frame-pointer\"=\"none\" \"min-legal-vector-width\"=\"0\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\n\n!llvm.module.flags = !{!0, !1}\n!llvm.ident = !{!2}\n\n!0 = !{i32 1, !\"wchar_size\", i32 4}\n!1 = !{i32 7, !\"uwtable\", i32 1}\n!2 = !{!\"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)\"}\n", "target": "This is the targeted source code:\n/*\nGiven length of a side and high return area for a triangle.\n>>> triangle_area(5, 3)\n7.5\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nfloat triangle_area(float a,float h){\n\nreturn (a*h)*0.5;\n\n}\n"}
{"input": "Convert this to C++:\n; ModuleID = '../../Human_xBenchmarks_164/CPP_46/CPP_46.cpp'\nsource_filename = \"../../Human_xBenchmarks_164/CPP_46/CPP_46.cpp\"\ntarget datalayout = \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\ntarget triple = \"x86_64-unknown-linux-gnu\"\n\n; Function Attrs: mustprogress nofree nosync nounwind readnone uwtable willreturn\ndefine dso_local i32 @_Z4fib4i(i32 %0) local_unnamed_addr #0 {\n  %2 = alloca [100 x i32], align 16\n  %3 = bitcast [100 x i32]* %2 to i8*\n  call void @llvm.lifetime.start.p0i8(i64 400, i8* nonnull %3) #2\n  %4 = bitcast [100 x i32]* %2 to <4 x i32>*\n  store <4 x i32> <i32 0, i32 0, i32 2, i32 0>, <4 x i32>* %4, align 16, !tbaa !3\n  %5 = icmp slt i32 %0, 4\n  br i1 %5, label %34, label %6\n\n6:                                                ; preds = %1\n  %7 = add nuw i32 %0, 1\n  %8 = getelementptr inbounds [100 x i32], [100 x i32]* %2, i64 0, i64 4\n  store i32 2, i32* %8, align 16, !tbaa !3\n  %9 = icmp eq i32 %7, 5\n  br i1 %9, label %34, label %10, !llvm.loop !7\n\n10:                                               ; preds = %6\n  %11 = zext i32 %0 to i64\n  %12 = and i64 %11, 1\n  %13 = icmp eq i32 %7, 6\n  br i1 %13, label %17, label %14\n\n14:                                               ; preds = %10\n  %15 = add nsw i64 %11, -4\n  %16 = and i64 %15, -2\n  br label %38\n\n17:                                               ; preds = %38, %10\n  %18 = phi i64 [ 5, %10 ], [ %65, %38 ]\n  %19 = phi i32 [ 2, %10 ], [ %63, %38 ]\n  %20 = phi i64 [ 4, %10 ], [ %54, %38 ]\n  %21 = phi i32 [ 2, %10 ], [ %59, %38 ]\n  %22 = icmp eq i64 %12, 0\n  br i1 %22, label %34, label %23\n\n23:                                               ; preds = %17\n  %24 = add nsw i64 %20, -3\n  %25 = getelementptr inbounds [100 x i32], [100 x i32]* %2, i64 0, i64 %24\n  %26 = add nsw i64 %20, -1\n  %27 = getelementptr inbounds [100 x i32], [100 x i32]* %2, i64 0, i64 %26\n  %28 = load i32, i32* %27, align 4, !tbaa !3\n  %29 = load i32, i32* %25, align 4, !tbaa !3\n  %30 = add nsw i32 %28, %19\n  %31 = add nsw i32 %30, %21\n  %32 = add nsw i32 %31, %29\n  %33 = getelementptr inbounds [100 x i32], [100 x i32]* %2, i64 0, i64 %18\n  store i32 %32, i32* %33, align 4, !tbaa !3\n  br label %34\n\n34:                                               ; preds = %23, %17, %6, %1\n  %35 = sext i32 %0 to i64\n  %36 = getelementptr inbounds [100 x i32], [100 x i32]* %2, i64 0, i64 %35\n  %37 = load i32, i32* %36, align 4, !tbaa !3\n  call void @llvm.lifetime.end.p0i8(i64 400, i8* nonnull %3) #2\n  ret i32 %37\n\n38:                                               ; preds = %38, %14\n  %39 = phi i64 [ 5, %14 ], [ %65, %38 ]\n  %40 = phi i32 [ 2, %14 ], [ %63, %38 ]\n  %41 = phi i64 [ 4, %14 ], [ %54, %38 ]\n  %42 = phi i32 [ 2, %14 ], [ %59, %38 ]\n  %43 = phi i64 [ %16, %14 ], [ %66, %38 ]\n  %44 = add nsw i64 %41, -3\n  %45 = getelementptr inbounds [100 x i32], [100 x i32]* %2, i64 0, i64 %44\n  %46 = add nsw i64 %41, -1\n  %47 = getelementptr inbounds [100 x i32], [100 x i32]* %2, i64 0, i64 %46\n  %48 = load i32, i32* %47, align 4, !tbaa !3\n  %49 = load i32, i32* %45, align 4, !tbaa !3\n  %50 = add nsw i32 %48, %40\n  %51 = add nsw i32 %50, %42\n  %52 = add nsw i32 %51, %49\n  %53 = getelementptr inbounds [100 x i32], [100 x i32]* %2, i64 0, i64 %39\n  store i32 %52, i32* %53, align 4, !tbaa !3\n  %54 = add nuw nsw i64 %39, 1\n  %55 = add nsw i64 %39, -3\n  %56 = getelementptr inbounds [100 x i32], [100 x i32]* %2, i64 0, i64 %55\n  %57 = add nsw i64 %39, -1\n  %58 = getelementptr inbounds [100 x i32], [100 x i32]* %2, i64 0, i64 %57\n  %59 = load i32, i32* %58, align 4, !tbaa !3\n  %60 = load i32, i32* %56, align 4, !tbaa !3\n  %61 = add nsw i32 %59, %52\n  %62 = add nsw i32 %61, %48\n  %63 = add nsw i32 %62, %60\n  %64 = getelementptr inbounds [100 x i32], [100 x i32]* %2, i64 0, i64 %54\n  store i32 %63, i32* %64, align 4, !tbaa !3\n  %65 = add nuw nsw i64 %39, 2\n  %66 = add i64 %43, -2\n  %67 = icmp eq i64 %66, 0\n  br i1 %67, label %17, label %38, !llvm.loop !7\n}\n\n; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn\ndeclare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1\n\n; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn\ndeclare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1\n\nattributes #0 = { mustprogress nofree nosync nounwind readnone uwtable willreturn \"frame-pointer\"=\"none\" \"min-legal-vector-width\"=\"0\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #1 = { argmemonly mustprogress nofree nosync nounwind willreturn }\nattributes #2 = { nounwind }\n\n!llvm.module.flags = !{!0, !1}\n!llvm.ident = !{!2}\n\n!0 = !{i32 1, !\"wchar_size\", i32 4}\n!1 = !{i32 7, !\"uwtable\", i32 1}\n!2 = !{!\"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)\"}\n!3 = !{!4, !4, i64 0}\n!4 = !{!\"int\", !5, i64 0}\n!5 = !{!\"omnipotent char\", !6, i64 0}\n!6 = !{!\"Simple C++ TBAA\"}\n!7 = distinct !{!7, !8}\n!8 = !{!\"llvm.loop.mustprogress\"}\n", "target": "This is the targeted source code:\n/*\nThe Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\nfib4(0) -> 0\nfib4(1) -> 0\nfib4(2) -> 2\nfib4(3) -> 0\nfib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\nPlease write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n>>> fib4(5)\n4\n>>> fib4(6)\n8\n>>> fib4(7)\n14\n*/\n#include<stdio.h>\nusing namespace std;\nint fib4(int n){\n\n    int f[100];\n    f[0]=0;\n    f[1]=0;\n    f[2]=2;\n    f[3]=0;\n    for (int i=4;i<=n;i++)\n    {\n        f[i]=f[i-1]+f[i-2]+f[i-3]+f[i-4];\n    }\n    return f[n];\n}\n"}
{"input": "Convert this to C++:\n; ModuleID = '../../Human_xBenchmarks_164/CPP_47/CPP_47.cpp'\nsource_filename = \"../../Human_xBenchmarks_164/CPP_47/CPP_47.cpp\"\ntarget datalayout = \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\ntarget triple = \"x86_64-unknown-linux-gnu\"\n\n%\"class.std::vector\" = type { %\"struct.std::_Vector_base\" }\n%\"struct.std::_Vector_base\" = type { %\"struct.std::_Vector_base<float, std::allocator<float>>::_Vector_impl\" }\n%\"struct.std::_Vector_base<float, std::allocator<float>>::_Vector_impl\" = type { %\"struct.std::_Vector_base<float, std::allocator<float>>::_Vector_impl_data\" }\n%\"struct.std::_Vector_base<float, std::allocator<float>>::_Vector_impl_data\" = type { float*, float*, float* }\n%\"struct.__gnu_cxx::__ops::_Iter_less_iter\" = type { i8 }\n\n$_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEElNS0_5__ops15_Iter_less_iterEEvT_S9_T0_T1_ = comdat any\n\n$_ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_ = comdat any\n\n$_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_RT0_ = comdat any\n\n; Function Attrs: uwtable\ndefine dso_local float @_Z6medianSt6vectorIfSaIfEE(%\"class.std::vector\"* nocapture readonly %0) local_unnamed_addr #0 {\n  %2 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0, i64 0, i32 0, i32 0, i32 0, i32 0\n  %3 = load float*, float** %2, align 8, !tbaa !3\n  %4 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0, i64 0, i32 0, i32 0, i32 0, i32 1\n  %5 = load float*, float** %4, align 8, !tbaa !3\n  %6 = icmp eq float* %3, %5\n  br i1 %6, label %17, label %7\n\n7:                                                ; preds = %1\n  %8 = ptrtoint float* %5 to i64\n  %9 = ptrtoint float* %3 to i64\n  %10 = sub i64 %8, %9\n  %11 = ashr exact i64 %10, 2\n  %12 = tail call i64 @llvm.ctlz.i64(i64 %11, i1 true) #4, !range !7\n  %13 = shl nuw nsw i64 %12, 1\n  %14 = xor i64 %13, 126\n  tail call void @_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEElNS0_5__ops15_Iter_less_iterEEvT_S9_T0_T1_(float* %3, float* %5, i64 %14)\n  tail call void @_ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_(float* %3, float* %5)\n  %15 = load float*, float** %4, align 8, !tbaa !8\n  %16 = load float*, float** %2, align 8, !tbaa !10\n  br label %17\n\n17:                                               ; preds = %1, %7\n  %18 = phi float* [ %3, %1 ], [ %16, %7 ]\n  %19 = phi float* [ %3, %1 ], [ %15, %7 ]\n  %20 = ptrtoint float* %19 to i64\n  %21 = ptrtoint float* %18 to i64\n  %22 = sub i64 %20, %21\n  %23 = ashr exact i64 %22, 2\n  %24 = and i64 %22, 4\n  %25 = icmp eq i64 %24, 0\n  %26 = lshr i64 %23, 1\n  %27 = getelementptr inbounds float, float* %18, i64 %26\n  %28 = load float, float* %27, align 4, !tbaa !11\n  br i1 %25, label %29, label %35\n\n29:                                               ; preds = %17\n  %30 = add nsw i64 %26, -1\n  %31 = getelementptr inbounds float, float* %18, i64 %30\n  %32 = load float, float* %31, align 4, !tbaa !11\n  %33 = fadd float %28, %32\n  %34 = fmul float %33, 5.000000e-01\n  br label %35\n\n35:                                               ; preds = %17, %29\n  %36 = phi float [ %34, %29 ], [ %28, %17 ]\n  ret float %36\n}\n\n; Function Attrs: uwtable\ndefine linkonce_odr dso_local void @_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEElNS0_5__ops15_Iter_less_iterEEvT_S9_T0_T1_(float* %0, float* %1, i64 %2) local_unnamed_addr #0 comdat {\n  %4 = alloca %\"struct.__gnu_cxx::__ops::_Iter_less_iter\", align 1\n  %5 = ptrtoint float* %0 to i64\n  %6 = getelementptr inbounds float, float* %0, i64 1\n  %7 = ptrtoint float* %1 to i64\n  %8 = sub i64 %7, %5\n  %9 = icmp sgt i64 %8, 64\n  br i1 %9, label %10, label %123\n\n10:                                               ; preds = %3, %119\n  %11 = phi i64 [ %121, %119 ], [ %8, %3 ]\n  %12 = phi i64 [ %76, %119 ], [ %2, %3 ]\n  %13 = phi float* [ %107, %119 ], [ %1, %3 ]\n  %14 = icmp eq i64 %12, 0\n  br i1 %14, label %15, label %74\n\n15:                                               ; preds = %10\n  %16 = getelementptr inbounds %\"struct.__gnu_cxx::__ops::_Iter_less_iter\", %\"struct.__gnu_cxx::__ops::_Iter_less_iter\"* %4, i64 0, i32 0\n  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %16)\n  call void @_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_RT0_(float* %0, float* %13, %\"struct.__gnu_cxx::__ops::_Iter_less_iter\"* nonnull align 1 dereferenceable(1) %4)\n  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %16)\n  br label %17\n\n17:                                               ; preds = %15, %70\n  %18 = phi float* [ %19, %70 ], [ %13, %15 ]\n  %19 = getelementptr inbounds float, float* %18, i64 -1\n  %20 = load float, float* %19, align 4, !tbaa !11\n  %21 = load float, float* %0, align 4, !tbaa !11\n  store float %21, float* %19, align 4, !tbaa !11\n  %22 = ptrtoint float* %19 to i64\n  %23 = sub i64 %22, %5\n  %24 = ashr exact i64 %23, 2\n  %25 = add nsw i64 %24, -1\n  %26 = sdiv i64 %25, 2\n  %27 = icmp sgt i64 %23, 8\n  br i1 %27, label %28, label %43\n\n28:                                               ; preds = %17, %28\n  %29 = phi i64 [ %38, %28 ], [ 0, %17 ]\n  %30 = shl i64 %29, 1\n  %31 = add i64 %30, 2\n  %32 = getelementptr inbounds float, float* %0, i64 %31\n  %33 = or i64 %30, 1\n  %34 = getelementptr inbounds float, float* %0, i64 %33\n  %35 = load float, float* %32, align 4, !tbaa !11\n  %36 = load float, float* %34, align 4, !tbaa !11\n  %37 = fcmp olt float %35, %36\n  %38 = select i1 %37, i64 %33, i64 %31\n  %39 = getelementptr inbounds float, float* %0, i64 %38\n  %40 = load float, float* %39, align 4, !tbaa !11\n  %41 = getelementptr inbounds float, float* %0, i64 %29\n  store float %40, float* %41, align 4, !tbaa !11\n  %42 = icmp slt i64 %38, %26\n  br i1 %42, label %28, label %43, !llvm.loop !13\n\n43:                                               ; preds = %28, %17\n  %44 = phi i64 [ 0, %17 ], [ %38, %28 ]\n  %45 = and i64 %23, 4\n  %46 = icmp eq i64 %45, 0\n  br i1 %46, label %47, label %57\n\n47:                                               ; preds = %43\n  %48 = add nsw i64 %24, -2\n  %49 = sdiv i64 %48, 2\n  %50 = icmp eq i64 %44, %49\n  br i1 %50, label %51, label %57\n\n51:                                               ; preds = %47\n  %52 = shl i64 %44, 1\n  %53 = or i64 %52, 1\n  %54 = getelementptr inbounds float, float* %0, i64 %53\n  %55 = load float, float* %54, align 4, !tbaa !11\n  %56 = getelementptr inbounds float, float* %0, i64 %44\n  store float %55, float* %56, align 4, !tbaa !11\n  br label %57\n\n57:                                               ; preds = %51, %47, %43\n  %58 = phi i64 [ %53, %51 ], [ %44, %47 ], [ %44, %43 ]\n  %59 = icmp sgt i64 %58, 0\n  br i1 %59, label %60, label %70\n\n60:                                               ; preds = %57, %67\n  %61 = phi i64 [ %63, %67 ], [ %58, %57 ]\n  %62 = add nsw i64 %61, -1\n  %63 = lshr i64 %62, 1\n  %64 = getelementptr inbounds float, float* %0, i64 %63\n  %65 = load float, float* %64, align 4, !tbaa !11\n  %66 = fcmp olt float %65, %20\n  br i1 %66, label %67, label %70\n\n67:                                               ; preds = %60\n  %68 = getelementptr inbounds float, float* %0, i64 %61\n  store float %65, float* %68, align 4, !tbaa !11\n  %69 = icmp ult i64 %62, 2\n  br i1 %69, label %70, label %60, !llvm.loop !15\n\n70:                                               ; preds = %67, %60, %57\n  %71 = phi i64 [ %58, %57 ], [ %61, %60 ], [ 0, %67 ]\n  %72 = getelementptr inbounds float, float* %0, i64 %71\n  store float %20, float* %72, align 4, !tbaa !11\n  %73 = icmp sgt i64 %23, 4\n  br i1 %73, label %17, label %123, !llvm.loop !16\n\n74:                                               ; preds = %10\n  %75 = lshr i64 %11, 3\n  %76 = add nsw i64 %12, -1\n  %77 = getelementptr inbounds float, float* %0, i64 %75\n  %78 = getelementptr inbounds float, float* %13, i64 -1\n  %79 = load float, float* %6, align 4, !tbaa !11\n  %80 = load float, float* %77, align 4, !tbaa !11\n  %81 = fcmp olt float %79, %80\n  %82 = load float, float* %78, align 4, !tbaa !11\n  br i1 %81, label %83, label %92\n\n83:                                               ; preds = %74\n  %84 = fcmp olt float %80, %82\n  br i1 %84, label %85, label %87\n\n85:                                               ; preds = %83\n  %86 = load float, float* %0, align 4, !tbaa !11\n  store float %80, float* %0, align 4, !tbaa !11\n  store float %86, float* %77, align 4, !tbaa !11\n  br label %101\n\n87:                                               ; preds = %83\n  %88 = fcmp olt float %79, %82\n  %89 = load float, float* %0, align 4, !tbaa !11\n  br i1 %88, label %90, label %91\n\n90:                                               ; preds = %87\n  store float %82, float* %0, align 4, !tbaa !11\n  store float %89, float* %78, align 4, !tbaa !11\n  br label %101\n\n91:                                               ; preds = %87\n  store float %79, float* %0, align 4, !tbaa !11\n  store float %89, float* %6, align 4, !tbaa !11\n  br label %101\n\n92:                                               ; preds = %74\n  %93 = fcmp olt float %79, %82\n  br i1 %93, label %94, label %96\n\n94:                                               ; preds = %92\n  %95 = load float, float* %0, align 4, !tbaa !11\n  store float %79, float* %0, align 4, !tbaa !11\n  store float %95, float* %6, align 4, !tbaa !11\n  br label %101\n\n96:                                               ; preds = %92\n  %97 = fcmp olt float %80, %82\n  %98 = load float, float* %0, align 4, !tbaa !11\n  br i1 %97, label %99, label %100\n\n99:                                               ; preds = %96\n  store float %82, float* %0, align 4, !tbaa !11\n  store float %98, float* %78, align 4, !tbaa !11\n  br label %101\n\n100:                                              ; preds = %96\n  store float %80, float* %0, align 4, !tbaa !11\n  store float %98, float* %77, align 4, !tbaa !11\n  br label %101\n\n101:                                              ; preds = %100, %99, %94, %91, %90, %85\n  br label %102\n\n102:                                              ; preds = %101, %118\n  %103 = phi float* [ %110, %118 ], [ %6, %101 ]\n  %104 = phi float* [ %113, %118 ], [ %13, %101 ]\n  %105 = load float, float* %0, align 4, !tbaa !11\n  br label %106\n\n106:                                              ; preds = %106, %102\n  %107 = phi float* [ %103, %102 ], [ %110, %106 ]\n  %108 = load float, float* %107, align 4, !tbaa !11\n  %109 = fcmp olt float %108, %105\n  %110 = getelementptr inbounds float, float* %107, i64 1\n  br i1 %109, label %106, label %111, !llvm.loop !17\n\n111:                                              ; preds = %106, %111\n  %112 = phi float* [ %113, %111 ], [ %104, %106 ]\n  %113 = getelementptr inbounds float, float* %112, i64 -1\n  %114 = load float, float* %113, align 4, !tbaa !11\n  %115 = fcmp olt float %105, %114\n  br i1 %115, label %111, label %116, !llvm.loop !18\n\n116:                                              ; preds = %111\n  %117 = icmp ult float* %107, %113\n  br i1 %117, label %118, label %119\n\n118:                                              ; preds = %116\n  store float %114, float* %107, align 4, !tbaa !11\n  store float %108, float* %113, align 4, !tbaa !11\n  br label %102, !llvm.loop !19\n\n119:                                              ; preds = %116\n  tail call void @_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEElNS0_5__ops15_Iter_less_iterEEvT_S9_T0_T1_(float* nonnull %107, float* %13, i64 %76)\n  %120 = ptrtoint float* %107 to i64\n  %121 = sub i64 %120, %5\n  %122 = icmp sgt i64 %121, 64\n  br i1 %122, label %10, label %123, !llvm.loop !20\n\n123:                                              ; preds = %119, %70, %3\n  ret void\n}\n\n; Function Attrs: uwtable\ndefine linkonce_odr dso_local void @_ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_(float* %0, float* %1) local_unnamed_addr #0 comdat {\n  %3 = ptrtoint float* %1 to i64\n  %4 = ptrtoint float* %0 to i64\n  %5 = sub i64 %3, %4\n  %6 = icmp sgt i64 %5, 64\n  br i1 %6, label %7, label %40\n\n7:                                                ; preds = %2\n  %8 = bitcast float* %0 to i8*\n  %9 = getelementptr float, float* %0, i64 1\n  %10 = load float, float* %9, align 4, !tbaa !11\n  %11 = load float, float* %0, align 4, !tbaa !11\n  %12 = fcmp olt float %10, %11\n  br i1 %12, label %13, label %17\n\n13:                                               ; preds = %7\n  %14 = bitcast float* %0 to i32*\n  %15 = bitcast float* %9 to i32*\n  %16 = load i32, i32* %14, align 4\n  store i32 %16, i32* %15, align 4\n  br label %17\n\n17:                                               ; preds = %7, %13\n  %18 = phi float* [ %0, %13 ], [ %9, %7 ]\n  store float %10, float* %18, align 4, !tbaa !11\n  %19 = getelementptr inbounds float, float* %0, i64 2\n  %20 = load float, float* %19, align 4, !tbaa !11\n  %21 = load float, float* %0, align 4, !tbaa !11\n  %22 = fcmp olt float %20, %21\n  br i1 %22, label %86, label %76\n\n23:                                               ; preds = %324, %36\n  %24 = phi float* [ %38, %36 ], [ %326, %324 ]\n  %25 = load float, float* %24, align 4, !tbaa !11\n  %26 = getelementptr inbounds float, float* %24, i64 -1\n  %27 = load float, float* %26, align 4, !tbaa !11\n  %28 = fcmp olt float %25, %27\n  br i1 %28, label %29, label %36\n\n29:                                               ; preds = %23, %29\n  %30 = phi float [ %34, %29 ], [ %27, %23 ]\n  %31 = phi float* [ %33, %29 ], [ %26, %23 ]\n  %32 = phi float* [ %31, %29 ], [ %24, %23 ]\n  store float %30, float* %32, align 4, !tbaa !11\n  %33 = getelementptr inbounds float, float* %31, i64 -1\n  %34 = load float, float* %33, align 4, !tbaa !11\n  %35 = fcmp olt float %25, %34\n  br i1 %35, label %29, label %36, !llvm.loop !21\n\n36:                                               ; preds = %29, %23\n  %37 = phi float* [ %24, %23 ], [ %31, %29 ]\n  store float %25, float* %37, align 4, !tbaa !11\n  %38 = getelementptr inbounds float, float* %24, i64 1\n  %39 = icmp eq float* %38, %1\n  br i1 %39, label %75, label %23, !llvm.loop !22\n\n40:                                               ; preds = %2\n  %41 = icmp eq float* %0, %1\n  br i1 %41, label %75, label %42\n\n42:                                               ; preds = %40\n  %43 = bitcast float* %0 to i8*\n  %44 = getelementptr inbounds float, float* %0, i64 1\n  %45 = icmp eq float* %44, %1\n  br i1 %45, label %75, label %46\n\n46:                                               ; preds = %42, %71\n  %47 = phi float* [ %73, %71 ], [ %44, %42 ]\n  %48 = phi float* [ %47, %71 ], [ %0, %42 ]\n  %49 = load float, float* %47, align 4, !tbaa !11\n  %50 = load float, float* %0, align 4, !tbaa !11\n  %51 = fcmp olt float %49, %50\n  br i1 %51, label %52, label %61\n\n52:                                               ; preds = %46\n  %53 = ptrtoint float* %47 to i64\n  %54 = sub i64 %53, %4\n  %55 = icmp eq i64 %54, 0\n  br i1 %55, label %71, label %56\n\n56:                                               ; preds = %52\n  %57 = ashr exact i64 %54, 2\n  %58 = sub nsw i64 2, %57\n  %59 = getelementptr inbounds float, float* %48, i64 %58\n  %60 = bitcast float* %59 to i8*\n  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* nonnull align 4 %60, i8* nonnull align 4 %43, i64 %54, i1 false) #4\n  br label %71\n\n61:                                               ; preds = %46\n  %62 = load float, float* %48, align 4, !tbaa !11\n  %63 = fcmp olt float %49, %62\n  br i1 %63, label %64, label %71\n\n64:                                               ; preds = %61, %64\n  %65 = phi float [ %69, %64 ], [ %62, %61 ]\n  %66 = phi float* [ %68, %64 ], [ %48, %61 ]\n  %67 = phi float* [ %66, %64 ], [ %47, %61 ]\n  store float %65, float* %67, align 4, !tbaa !11\n  %68 = getelementptr inbounds float, float* %66, i64 -1\n  %69 = load float, float* %68, align 4, !tbaa !11\n  %70 = fcmp olt float %49, %69\n  br i1 %70, label %64, label %71, !llvm.loop !21\n\n71:                                               ; preds = %64, %61, %56, %52\n  %72 = phi float* [ %0, %52 ], [ %0, %56 ], [ %47, %61 ], [ %66, %64 ]\n  store float %49, float* %72, align 4, !tbaa !11\n  %73 = getelementptr inbounds float, float* %47, i64 1\n  %74 = icmp eq float* %73, %1\n  br i1 %74, label %75, label %46, !llvm.loop !23\n\n75:                                               ; preds = %71, %36, %42, %40, %324\n  ret void\n\n76:                                               ; preds = %17\n  %77 = load float, float* %9, align 4, !tbaa !11\n  %78 = fcmp olt float %20, %77\n  br i1 %78, label %79, label %90\n\n79:                                               ; preds = %76, %79\n  %80 = phi float [ %84, %79 ], [ %77, %76 ]\n  %81 = phi float* [ %83, %79 ], [ %9, %76 ]\n  %82 = phi float* [ %81, %79 ], [ %19, %76 ]\n  store float %80, float* %82, align 4, !tbaa !11\n  %83 = getelementptr inbounds float, float* %81, i64 -1\n  %84 = load float, float* %83, align 4, !tbaa !11\n  %85 = fcmp olt float %20, %84\n  br i1 %85, label %79, label %90, !llvm.loop !21\n\n86:                                               ; preds = %17\n  %87 = bitcast float* %0 to i64*\n  %88 = bitcast float* %9 to i64*\n  %89 = load i64, i64* %87, align 4\n  store i64 %89, i64* %88, align 4\n  br label %90\n\n90:                                               ; preds = %79, %86, %76\n  %91 = phi float* [ %0, %86 ], [ %19, %76 ], [ %81, %79 ]\n  store float %20, float* %91, align 4, !tbaa !11\n  %92 = getelementptr inbounds float, float* %0, i64 3\n  %93 = load float, float* %92, align 4, !tbaa !11\n  %94 = load float, float* %0, align 4, !tbaa !11\n  %95 = fcmp olt float %93, %94\n  br i1 %95, label %106, label %96\n\n96:                                               ; preds = %90\n  %97 = load float, float* %19, align 4, !tbaa !11\n  %98 = fcmp olt float %93, %97\n  br i1 %98, label %99, label %108\n\n99:                                               ; preds = %96, %99\n  %100 = phi float [ %104, %99 ], [ %97, %96 ]\n  %101 = phi float* [ %103, %99 ], [ %19, %96 ]\n  %102 = phi float* [ %101, %99 ], [ %92, %96 ]\n  store float %100, float* %102, align 4, !tbaa !11\n  %103 = getelementptr inbounds float, float* %101, i64 -1\n  %104 = load float, float* %103, align 4, !tbaa !11\n  %105 = fcmp olt float %93, %104\n  br i1 %105, label %99, label %108, !llvm.loop !21\n\n106:                                              ; preds = %90\n  %107 = bitcast float* %9 to i8*\n  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* noundef nonnull align 4 dereferenceable(12) %107, i8* noundef nonnull align 4 dereferenceable(12) %8, i64 12, i1 false) #4\n  br label %108\n\n108:                                              ; preds = %99, %106, %96\n  %109 = phi float* [ %0, %106 ], [ %92, %96 ], [ %101, %99 ]\n  store float %93, float* %109, align 4, !tbaa !11\n  %110 = getelementptr inbounds float, float* %0, i64 4\n  %111 = load float, float* %110, align 4, !tbaa !11\n  %112 = load float, float* %0, align 4, !tbaa !11\n  %113 = fcmp olt float %111, %112\n  br i1 %113, label %124, label %114\n\n114:                                              ; preds = %108\n  %115 = load float, float* %92, align 4, !tbaa !11\n  %116 = fcmp olt float %111, %115\n  br i1 %116, label %117, label %126\n\n117:                                              ; preds = %114, %117\n  %118 = phi float [ %122, %117 ], [ %115, %114 ]\n  %119 = phi float* [ %121, %117 ], [ %92, %114 ]\n  %120 = phi float* [ %119, %117 ], [ %110, %114 ]\n  store float %118, float* %120, align 4, !tbaa !11\n  %121 = getelementptr inbounds float, float* %119, i64 -1\n  %122 = load float, float* %121, align 4, !tbaa !11\n  %123 = fcmp olt float %111, %122\n  br i1 %123, label %117, label %126, !llvm.loop !21\n\n124:                                              ; preds = %108\n  %125 = bitcast float* %9 to i8*\n  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* noundef nonnull align 4 dereferenceable(16) %125, i8* noundef nonnull align 4 dereferenceable(16) %8, i64 16, i1 false) #4\n  br label %126\n\n126:                                              ; preds = %117, %124, %114\n  %127 = phi float* [ %0, %124 ], [ %110, %114 ], [ %119, %117 ]\n  store float %111, float* %127, align 4, !tbaa !11\n  %128 = getelementptr inbounds float, float* %0, i64 5\n  %129 = load float, float* %128, align 4, !tbaa !11\n  %130 = load float, float* %0, align 4, !tbaa !11\n  %131 = fcmp olt float %129, %130\n  br i1 %131, label %142, label %132\n\n132:                                              ; preds = %126\n  %133 = load float, float* %110, align 4, !tbaa !11\n  %134 = fcmp olt float %129, %133\n  br i1 %134, label %135, label %144\n\n135:                                              ; preds = %132, %135\n  %136 = phi float [ %140, %135 ], [ %133, %132 ]\n  %137 = phi float* [ %139, %135 ], [ %110, %132 ]\n  %138 = phi float* [ %137, %135 ], [ %128, %132 ]\n  store float %136, float* %138, align 4, !tbaa !11\n  %139 = getelementptr inbounds float, float* %137, i64 -1\n  %140 = load float, float* %139, align 4, !tbaa !11\n  %141 = fcmp olt float %129, %140\n  br i1 %141, label %135, label %144, !llvm.loop !21\n\n142:                                              ; preds = %126\n  %143 = bitcast float* %9 to i8*\n  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* noundef nonnull align 4 dereferenceable(20) %143, i8* noundef nonnull align 4 dereferenceable(20) %8, i64 20, i1 false) #4\n  br label %144\n\n144:                                              ; preds = %135, %142, %132\n  %145 = phi float* [ %0, %142 ], [ %128, %132 ], [ %137, %135 ]\n  store float %129, float* %145, align 4, !tbaa !11\n  %146 = getelementptr inbounds float, float* %0, i64 6\n  %147 = load float, float* %146, align 4, !tbaa !11\n  %148 = load float, float* %0, align 4, !tbaa !11\n  %149 = fcmp olt float %147, %148\n  br i1 %149, label %160, label %150\n\n150:                                              ; preds = %144\n  %151 = load float, float* %128, align 4, !tbaa !11\n  %152 = fcmp olt float %147, %151\n  br i1 %152, label %153, label %162\n\n153:                                              ; preds = %150, %153\n  %154 = phi float [ %158, %153 ], [ %151, %150 ]\n  %155 = phi float* [ %157, %153 ], [ %128, %150 ]\n  %156 = phi float* [ %155, %153 ], [ %146, %150 ]\n  store float %154, float* %156, align 4, !tbaa !11\n  %157 = getelementptr inbounds float, float* %155, i64 -1\n  %158 = load float, float* %157, align 4, !tbaa !11\n  %159 = fcmp olt float %147, %158\n  br i1 %159, label %153, label %162, !llvm.loop !21\n\n160:                                              ; preds = %144\n  %161 = bitcast float* %9 to i8*\n  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* noundef nonnull align 4 dereferenceable(24) %161, i8* noundef nonnull align 4 dereferenceable(24) %8, i64 24, i1 false) #4\n  br label %162\n\n162:                                              ; preds = %153, %160, %150\n  %163 = phi float* [ %0, %160 ], [ %146, %150 ], [ %155, %153 ]\n  store float %147, float* %163, align 4, !tbaa !11\n  %164 = getelementptr inbounds float, float* %0, i64 7\n  %165 = load float, float* %164, align 4, !tbaa !11\n  %166 = load float, float* %0, align 4, !tbaa !11\n  %167 = fcmp olt float %165, %166\n  br i1 %167, label %178, label %168\n\n168:                                              ; preds = %162\n  %169 = load float, float* %146, align 4, !tbaa !11\n  %170 = fcmp olt float %165, %169\n  br i1 %170, label %171, label %180\n\n171:                                              ; preds = %168, %171\n  %172 = phi float [ %176, %171 ], [ %169, %168 ]\n  %173 = phi float* [ %175, %171 ], [ %146, %168 ]\n  %174 = phi float* [ %173, %171 ], [ %164, %168 ]\n  store float %172, float* %174, align 4, !tbaa !11\n  %175 = getelementptr inbounds float, float* %173, i64 -1\n  %176 = load float, float* %175, align 4, !tbaa !11\n  %177 = fcmp olt float %165, %176\n  br i1 %177, label %171, label %180, !llvm.loop !21\n\n178:                                              ; preds = %162\n  %179 = bitcast float* %9 to i8*\n  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* noundef nonnull align 4 dereferenceable(28) %179, i8* noundef nonnull align 4 dereferenceable(28) %8, i64 28, i1 false) #4\n  br label %180\n\n180:                                              ; preds = %171, %178, %168\n  %181 = phi float* [ %0, %178 ], [ %164, %168 ], [ %173, %171 ]\n  store float %165, float* %181, align 4, !tbaa !11\n  %182 = getelementptr inbounds float, float* %0, i64 8\n  %183 = load float, float* %182, align 4, !tbaa !11\n  %184 = load float, float* %0, align 4, !tbaa !11\n  %185 = fcmp olt float %183, %184\n  br i1 %185, label %196, label %186\n\n186:                                              ; preds = %180\n  %187 = load float, float* %164, align 4, !tbaa !11\n  %188 = fcmp olt float %183, %187\n  br i1 %188, label %189, label %198\n\n189:                                              ; preds = %186, %189\n  %190 = phi float [ %194, %189 ], [ %187, %186 ]\n  %191 = phi float* [ %193, %189 ], [ %164, %186 ]\n  %192 = phi float* [ %191, %189 ], [ %182, %186 ]\n  store float %190, float* %192, align 4, !tbaa !11\n  %193 = getelementptr inbounds float, float* %191, i64 -1\n  %194 = load float, float* %193, align 4, !tbaa !11\n  %195 = fcmp olt float %183, %194\n  br i1 %195, label %189, label %198, !llvm.loop !21\n\n196:                                              ; preds = %180\n  %197 = bitcast float* %9 to i8*\n  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* noundef nonnull align 4 dereferenceable(32) %197, i8* noundef nonnull align 4 dereferenceable(32) %8, i64 32, i1 false) #4\n  br label %198\n\n198:                                              ; preds = %189, %196, %186\n  %199 = phi float* [ %0, %196 ], [ %182, %186 ], [ %191, %189 ]\n  store float %183, float* %199, align 4, !tbaa !11\n  %200 = getelementptr inbounds float, float* %0, i64 9\n  %201 = load float, float* %200, align 4, !tbaa !11\n  %202 = load float, float* %0, align 4, !tbaa !11\n  %203 = fcmp olt float %201, %202\n  br i1 %203, label %214, label %204\n\n204:                                              ; preds = %198\n  %205 = load float, float* %182, align 4, !tbaa !11\n  %206 = fcmp olt float %201, %205\n  br i1 %206, label %207, label %216\n\n207:                                              ; preds = %204, %207\n  %208 = phi float [ %212, %207 ], [ %205, %204 ]\n  %209 = phi float* [ %211, %207 ], [ %182, %204 ]\n  %210 = phi float* [ %209, %207 ], [ %200, %204 ]\n  store float %208, float* %210, align 4, !tbaa !11\n  %211 = getelementptr inbounds float, float* %209, i64 -1\n  %212 = load float, float* %211, align 4, !tbaa !11\n  %213 = fcmp olt float %201, %212\n  br i1 %213, label %207, label %216, !llvm.loop !21\n\n214:                                              ; preds = %198\n  %215 = bitcast float* %9 to i8*\n  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* noundef nonnull align 4 dereferenceable(36) %215, i8* noundef nonnull align 4 dereferenceable(36) %8, i64 36, i1 false) #4\n  br label %216\n\n216:                                              ; preds = %207, %214, %204\n  %217 = phi float* [ %0, %214 ], [ %200, %204 ], [ %209, %207 ]\n  store float %201, float* %217, align 4, !tbaa !11\n  %218 = getelementptr inbounds float, float* %0, i64 10\n  %219 = load float, float* %218, align 4, !tbaa !11\n  %220 = load float, float* %0, align 4, !tbaa !11\n  %221 = fcmp olt float %219, %220\n  br i1 %221, label %232, label %222\n\n222:                                              ; preds = %216\n  %223 = load float, float* %200, align 4, !tbaa !11\n  %224 = fcmp olt float %219, %223\n  br i1 %224, label %225, label %234\n\n225:                                              ; preds = %222, %225\n  %226 = phi float [ %230, %225 ], [ %223, %222 ]\n  %227 = phi float* [ %229, %225 ], [ %200, %222 ]\n  %228 = phi float* [ %227, %225 ], [ %218, %222 ]\n  store float %226, float* %228, align 4, !tbaa !11\n  %229 = getelementptr inbounds float, float* %227, i64 -1\n  %230 = load float, float* %229, align 4, !tbaa !11\n  %231 = fcmp olt float %219, %230\n  br i1 %231, label %225, label %234, !llvm.loop !21\n\n232:                                              ; preds = %216\n  %233 = bitcast float* %9 to i8*\n  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* noundef nonnull align 4 dereferenceable(40) %233, i8* noundef nonnull align 4 dereferenceable(40) %8, i64 40, i1 false) #4\n  br label %234\n\n234:                                              ; preds = %225, %232, %222\n  %235 = phi float* [ %0, %232 ], [ %218, %222 ], [ %227, %225 ]\n  store float %219, float* %235, align 4, !tbaa !11\n  %236 = getelementptr inbounds float, float* %0, i64 11\n  %237 = load float, float* %236, align 4, !tbaa !11\n  %238 = load float, float* %0, align 4, !tbaa !11\n  %239 = fcmp olt float %237, %238\n  br i1 %239, label %250, label %240\n\n240:                                              ; preds = %234\n  %241 = load float, float* %218, align 4, !tbaa !11\n  %242 = fcmp olt float %237, %241\n  br i1 %242, label %243, label %252\n\n243:                                              ; preds = %240, %243\n  %244 = phi float [ %248, %243 ], [ %241, %240 ]\n  %245 = phi float* [ %247, %243 ], [ %218, %240 ]\n  %246 = phi float* [ %245, %243 ], [ %236, %240 ]\n  store float %244, float* %246, align 4, !tbaa !11\n  %247 = getelementptr inbounds float, float* %245, i64 -1\n  %248 = load float, float* %247, align 4, !tbaa !11\n  %249 = fcmp olt float %237, %248\n  br i1 %249, label %243, label %252, !llvm.loop !21\n\n250:                                              ; preds = %234\n  %251 = bitcast float* %9 to i8*\n  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* noundef nonnull align 4 dereferenceable(44) %251, i8* noundef nonnull align 4 dereferenceable(44) %8, i64 44, i1 false) #4\n  br label %252\n\n252:                                              ; preds = %243, %250, %240\n  %253 = phi float* [ %0, %250 ], [ %236, %240 ], [ %245, %243 ]\n  store float %237, float* %253, align 4, !tbaa !11\n  %254 = getelementptr inbounds float, float* %0, i64 12\n  %255 = load float, float* %254, align 4, !tbaa !11\n  %256 = load float, float* %0, align 4, !tbaa !11\n  %257 = fcmp olt float %255, %256\n  br i1 %257, label %268, label %258\n\n258:                                              ; preds = %252\n  %259 = load float, float* %236, align 4, !tbaa !11\n  %260 = fcmp olt float %255, %259\n  br i1 %260, label %261, label %270\n\n261:                                              ; preds = %258, %261\n  %262 = phi float [ %266, %261 ], [ %259, %258 ]\n  %263 = phi float* [ %265, %261 ], [ %236, %258 ]\n  %264 = phi float* [ %263, %261 ], [ %254, %258 ]\n  store float %262, float* %264, align 4, !tbaa !11\n  %265 = getelementptr inbounds float, float* %263, i64 -1\n  %266 = load float, float* %265, align 4, !tbaa !11\n  %267 = fcmp olt float %255, %266\n  br i1 %267, label %261, label %270, !llvm.loop !21\n\n268:                                              ; preds = %252\n  %269 = bitcast float* %9 to i8*\n  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* noundef nonnull align 4 dereferenceable(48) %269, i8* noundef nonnull align 4 dereferenceable(48) %8, i64 48, i1 false) #4\n  br label %270\n\n270:                                              ; preds = %261, %268, %258\n  %271 = phi float* [ %0, %268 ], [ %254, %258 ], [ %263, %261 ]\n  store float %255, float* %271, align 4, !tbaa !11\n  %272 = getelementptr inbounds float, float* %0, i64 13\n  %273 = load float, float* %272, align 4, !tbaa !11\n  %274 = load float, float* %0, align 4, !tbaa !11\n  %275 = fcmp olt float %273, %274\n  br i1 %275, label %286, label %276\n\n276:                                              ; preds = %270\n  %277 = load float, float* %254, align 4, !tbaa !11\n  %278 = fcmp olt float %273, %277\n  br i1 %278, label %279, label %288\n\n279:                                              ; preds = %276, %279\n  %280 = phi float [ %284, %279 ], [ %277, %276 ]\n  %281 = phi float* [ %283, %279 ], [ %254, %276 ]\n  %282 = phi float* [ %281, %279 ], [ %272, %276 ]\n  store float %280, float* %282, align 4, !tbaa !11\n  %283 = getelementptr inbounds float, float* %281, i64 -1\n  %284 = load float, float* %283, align 4, !tbaa !11\n  %285 = fcmp olt float %273, %284\n  br i1 %285, label %279, label %288, !llvm.loop !21\n\n286:                                              ; preds = %270\n  %287 = bitcast float* %9 to i8*\n  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* noundef nonnull align 4 dereferenceable(52) %287, i8* noundef nonnull align 4 dereferenceable(52) %8, i64 52, i1 false) #4\n  br label %288\n\n288:                                              ; preds = %279, %286, %276\n  %289 = phi float* [ %0, %286 ], [ %272, %276 ], [ %281, %279 ]\n  store float %273, float* %289, align 4, !tbaa !11\n  %290 = getelementptr inbounds float, float* %0, i64 14\n  %291 = load float, float* %290, align 4, !tbaa !11\n  %292 = load float, float* %0, align 4, !tbaa !11\n  %293 = fcmp olt float %291, %292\n  br i1 %293, label %304, label %294\n\n294:                                              ; preds = %288\n  %295 = load float, float* %272, align 4, !tbaa !11\n  %296 = fcmp olt float %291, %295\n  br i1 %296, label %297, label %306\n\n297:                                              ; preds = %294, %297\n  %298 = phi float [ %302, %297 ], [ %295, %294 ]\n  %299 = phi float* [ %301, %297 ], [ %272, %294 ]\n  %300 = phi float* [ %299, %297 ], [ %290, %294 ]\n  store float %298, float* %300, align 4, !tbaa !11\n  %301 = getelementptr inbounds float, float* %299, i64 -1\n  %302 = load float, float* %301, align 4, !tbaa !11\n  %303 = fcmp olt float %291, %302\n  br i1 %303, label %297, label %306, !llvm.loop !21\n\n304:                                              ; preds = %288\n  %305 = bitcast float* %9 to i8*\n  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* noundef nonnull align 4 dereferenceable(56) %305, i8* noundef nonnull align 4 dereferenceable(56) %8, i64 56, i1 false) #4\n  br label %306\n\n306:                                              ; preds = %297, %304, %294\n  %307 = phi float* [ %0, %304 ], [ %290, %294 ], [ %299, %297 ]\n  store float %291, float* %307, align 4, !tbaa !11\n  %308 = getelementptr inbounds float, float* %0, i64 15\n  %309 = load float, float* %308, align 4, !tbaa !11\n  %310 = load float, float* %0, align 4, !tbaa !11\n  %311 = fcmp olt float %309, %310\n  br i1 %311, label %322, label %312\n\n312:                                              ; preds = %306\n  %313 = load float, float* %290, align 4, !tbaa !11\n  %314 = fcmp olt float %309, %313\n  br i1 %314, label %315, label %324\n\n315:                                              ; preds = %312, %315\n  %316 = phi float [ %320, %315 ], [ %313, %312 ]\n  %317 = phi float* [ %319, %315 ], [ %290, %312 ]\n  %318 = phi float* [ %317, %315 ], [ %308, %312 ]\n  store float %316, float* %318, align 4, !tbaa !11\n  %319 = getelementptr inbounds float, float* %317, i64 -1\n  %320 = load float, float* %319, align 4, !tbaa !11\n  %321 = fcmp olt float %309, %320\n  br i1 %321, label %315, label %324, !llvm.loop !21\n\n322:                                              ; preds = %306\n  %323 = bitcast float* %9 to i8*\n  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* noundef nonnull align 4 dereferenceable(60) %323, i8* noundef nonnull align 4 dereferenceable(60) %8, i64 60, i1 false) #4\n  br label %324\n\n324:                                              ; preds = %315, %322, %312\n  %325 = phi float* [ %0, %322 ], [ %308, %312 ], [ %317, %315 ]\n  store float %309, float* %325, align 4, !tbaa !11\n  %326 = getelementptr inbounds float, float* %0, i64 16\n  %327 = icmp eq float* %326, %1\n  br i1 %327, label %75, label %23\n}\n\n; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn\ndeclare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1\n\n; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn\ndeclare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1\n\n; Function Attrs: uwtable\ndefine linkonce_odr dso_local void @_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_RT0_(float* %0, float* %1, %\"struct.__gnu_cxx::__ops::_Iter_less_iter\"* nonnull align 1 dereferenceable(1) %2) local_unnamed_addr #0 comdat {\n  %4 = ptrtoint float* %1 to i64\n  %5 = ptrtoint float* %0 to i64\n  %6 = sub i64 %4, %5\n  %7 = ashr exact i64 %6, 2\n  %8 = icmp slt i64 %6, 8\n  br i1 %8, label %100, label %9\n\n9:                                                ; preds = %3\n  %10 = add nsw i64 %7, -2\n  %11 = lshr i64 %10, 1\n  %12 = add nsw i64 %7, -1\n  %13 = sdiv i64 %12, 2\n  %14 = and i64 %6, 4\n  %15 = icmp eq i64 %14, 0\n  br i1 %15, label %16, label %20\n\n16:                                               ; preds = %9\n  %17 = or i64 %10, 1\n  %18 = getelementptr inbounds float, float* %0, i64 %17\n  %19 = getelementptr inbounds float, float* %0, i64 %11\n  br label %57\n\n20:                                               ; preds = %9, %52\n  %21 = phi i64 [ %56, %52 ], [ %11, %9 ]\n  %22 = getelementptr inbounds float, float* %0, i64 %21\n  %23 = load float, float* %22, align 4, !tbaa !11\n  %24 = icmp sgt i64 %13, %21\n  br i1 %24, label %25, label %52\n\n25:                                               ; preds = %20, %25\n  %26 = phi i64 [ %35, %25 ], [ %21, %20 ]\n  %27 = shl i64 %26, 1\n  %28 = add i64 %27, 2\n  %29 = getelementptr inbounds float, float* %0, i64 %28\n  %30 = or i64 %27, 1\n  %31 = getelementptr inbounds float, float* %0, i64 %30\n  %32 = load float, float* %29, align 4, !tbaa !11\n  %33 = load float, float* %31, align 4, !tbaa !11\n  %34 = fcmp olt float %32, %33\n  %35 = select i1 %34, i64 %30, i64 %28\n  %36 = getelementptr inbounds float, float* %0, i64 %35\n  %37 = load float, float* %36, align 4, !tbaa !11\n  %38 = getelementptr inbounds float, float* %0, i64 %26\n  store float %37, float* %38, align 4, !tbaa !11\n  %39 = icmp slt i64 %35, %13\n  br i1 %39, label %25, label %40, !llvm.loop !13\n\n40:                                               ; preds = %25\n  %41 = icmp sgt i64 %35, %21\n  br i1 %41, label %42, label %52\n\n42:                                               ; preds = %40, %49\n  %43 = phi i64 [ %45, %49 ], [ %35, %40 ]\n  %44 = add nsw i64 %43, -1\n  %45 = sdiv i64 %44, 2\n  %46 = getelementptr inbounds float, float* %0, i64 %45\n  %47 = load float, float* %46, align 4, !tbaa !11\n  %48 = fcmp olt float %47, %23\n  br i1 %48, label %49, label %52\n\n49:                                               ; preds = %42\n  %50 = getelementptr inbounds float, float* %0, i64 %43\n  store float %47, float* %50, align 4, !tbaa !11\n  %51 = icmp sgt i64 %45, %21\n  br i1 %51, label %42, label %52, !llvm.loop !15\n\n52:                                               ; preds = %42, %49, %20, %40\n  %53 = phi i64 [ %35, %40 ], [ %21, %20 ], [ %45, %49 ], [ %43, %42 ]\n  %54 = getelementptr inbounds float, float* %0, i64 %53\n  store float %23, float* %54, align 4, !tbaa !11\n  %55 = icmp eq i64 %21, 0\n  %56 = add nsw i64 %21, -1\n  br i1 %55, label %100, label %20, !llvm.loop !24\n\n57:                                               ; preds = %16, %95\n  %58 = phi i64 [ %99, %95 ], [ %11, %16 ]\n  %59 = getelementptr inbounds float, float* %0, i64 %58\n  %60 = load float, float* %59, align 4, !tbaa !11\n  %61 = icmp sgt i64 %13, %58\n  br i1 %61, label %62, label %77\n\n62:                                               ; preds = %57, %62\n  %63 = phi i64 [ %72, %62 ], [ %58, %57 ]\n  %64 = shl i64 %63, 1\n  %65 = add i64 %64, 2\n  %66 = getelementptr inbounds float, float* %0, i64 %65\n  %67 = or i64 %64, 1\n  %68 = getelementptr inbounds float, float* %0, i64 %67\n  %69 = load float, float* %66, align 4, !tbaa !11\n  %70 = load float, float* %68, align 4, !tbaa !11\n  %71 = fcmp olt float %69, %70\n  %72 = select i1 %71, i64 %67, i64 %65\n  %73 = getelementptr inbounds float, float* %0, i64 %72\n  %74 = load float, float* %73, align 4, !tbaa !11\n  %75 = getelementptr inbounds float, float* %0, i64 %63\n  store float %74, float* %75, align 4, !tbaa !11\n  %76 = icmp slt i64 %72, %13\n  br i1 %76, label %62, label %77, !llvm.loop !13\n\n77:                                               ; preds = %62, %57\n  %78 = phi i64 [ %58, %57 ], [ %72, %62 ]\n  %79 = icmp eq i64 %78, %11\n  br i1 %79, label %80, label %82\n\n80:                                               ; preds = %77\n  %81 = load float, float* %18, align 4, !tbaa !11\n  store float %81, float* %19, align 4, !tbaa !11\n  br label %82\n\n82:                                               ; preds = %80, %77\n  %83 = phi i64 [ %17, %80 ], [ %78, %77 ]\n  %84 = icmp sgt i64 %83, %58\n  br i1 %84, label %85, label %95\n\n85:                                               ; preds = %82, %92\n  %86 = phi i64 [ %88, %92 ], [ %83, %82 ]\n  %87 = add nsw i64 %86, -1\n  %88 = sdiv i64 %87, 2\n  %89 = getelementptr inbounds float, float* %0, i64 %88\n  %90 = load float, float* %89, align 4, !tbaa !11\n  %91 = fcmp olt float %90, %60\n  br i1 %91, label %92, label %95\n\n92:                                               ; preds = %85\n  %93 = getelementptr inbounds float, float* %0, i64 %86\n  store float %90, float* %93, align 4, !tbaa !11\n  %94 = icmp sgt i64 %88, %58\n  br i1 %94, label %85, label %95, !llvm.loop !15\n\n95:                                               ; preds = %85, %92, %82\n  %96 = phi i64 [ %83, %82 ], [ %88, %92 ], [ %86, %85 ]\n  %97 = getelementptr inbounds float, float* %0, i64 %96\n  store float %60, float* %97, align 4, !tbaa !11\n  %98 = icmp eq i64 %58, 0\n  %99 = add nsw i64 %58, -1\n  br i1 %98, label %100, label %57, !llvm.loop !24\n\n100:                                              ; preds = %52, %95, %3\n  ret void\n}\n\n; Function Attrs: mustprogress nofree nosync nounwind readnone speculatable willreturn\ndeclare i64 @llvm.ctlz.i64(i64, i1 immarg) #2\n\n; Function Attrs: argmemonly mustprogress nofree nounwind willreturn\ndeclare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #3\n\nattributes #0 = { uwtable \"frame-pointer\"=\"none\" \"min-legal-vector-width\"=\"0\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #1 = { argmemonly mustprogress nofree nosync nounwind willreturn }\nattributes #2 = { mustprogress nofree nosync nounwind readnone speculatable willreturn }\nattributes #3 = { argmemonly mustprogress nofree nounwind willreturn }\nattributes #4 = { nounwind }\n\n!llvm.module.flags = !{!0, !1}\n!llvm.ident = !{!2}\n\n!0 = !{i32 1, !\"wchar_size\", i32 4}\n!1 = !{i32 7, !\"uwtable\", i32 1}\n!2 = !{!\"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)\"}\n!3 = !{!4, !4, i64 0}\n!4 = !{!\"any pointer\", !5, i64 0}\n!5 = !{!\"omnipotent char\", !6, i64 0}\n!6 = !{!\"Simple C++ TBAA\"}\n!7 = !{i64 0, i64 65}\n!8 = !{!9, !4, i64 8}\n!9 = !{!\"_ZTSNSt12_Vector_baseIfSaIfEE17_Vector_impl_dataE\", !4, i64 0, !4, i64 8, !4, i64 16}\n!10 = !{!9, !4, i64 0}\n!11 = !{!12, !12, i64 0}\n!12 = !{!\"float\", !5, i64 0}\n!13 = distinct !{!13, !14}\n!14 = !{!\"llvm.loop.mustprogress\"}\n!15 = distinct !{!15, !14}\n!16 = distinct !{!16, !14}\n!17 = distinct !{!17, !14}\n!18 = distinct !{!18, !14}\n!19 = distinct !{!19, !14}\n!20 = distinct !{!20, !14}\n!21 = distinct !{!21, !14}\n!22 = distinct !{!22, !14}\n!23 = distinct !{!23, !14}\n!24 = distinct !{!24, !14}\n", "target": "This is the targeted source code:\n/*\nReturn median of elements in the vector l.\n>>> median({3, 1, 2, 4, 5})\n3\n>>> median({-10, 4, 6, 1000, 10, 20})\n15.0\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nfloat median(vector<float> l){\n\n    sort(l.begin(),l.end());\n    if (l.size()%2==1) return l[l.size()/2];\n    return 0.5*(l[l.size()/2]+l[l.size()/2-1]);\n}\n"}
{"input": "Convert this to C++:\n; ModuleID = '../../Human_xBenchmarks_164/CPP_48/CPP_48.cpp'\nsource_filename = \"../../Human_xBenchmarks_164/CPP_48/CPP_48.cpp\"\ntarget datalayout = \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\ntarget triple = \"x86_64-unknown-linux-gnu\"\n\n%\"class.std::__cxx11::basic_string\" = type { %\"struct.std::__cxx11::basic_string<char>::_Alloc_hider\", i64, %union.anon }\n%\"struct.std::__cxx11::basic_string<char>::_Alloc_hider\" = type { i8* }\n%union.anon = type { i64, [8 x i8] }\n\n; Function Attrs: uwtable\ndefine dso_local zeroext i1 @_Z13is_palindromeNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE(%\"class.std::__cxx11::basic_string\"* nocapture readonly %0) local_unnamed_addr #0 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {\n  %2 = alloca i64, align 8\n  %3 = alloca %\"class.std::__cxx11::basic_string\", align 8\n  %4 = bitcast %\"class.std::__cxx11::basic_string\"* %3 to i8*\n  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %4) #5\n  %5 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 0, i32 0\n  %6 = load i8*, i8** %5, align 8, !tbaa !3, !noalias !10\n  %7 = ptrtoint i8* %6 to i64\n  %8 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 1\n  %9 = load i64, i64* %8, align 8, !tbaa !13, !noalias !10\n  %10 = getelementptr inbounds i8, i8* %6, i64 %9\n  %11 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %3, i64 0, i32 2\n  %12 = bitcast %\"class.std::__cxx11::basic_string\"* %3 to %union.anon**\n  store %union.anon* %11, %union.anon** %12, align 8, !tbaa !14\n  %13 = bitcast i64* %2 to i8*\n  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %13) #5\n  store i64 %9, i64* %2, align 8, !tbaa !15\n  %14 = icmp ugt i64 %9, 15\n  br i1 %14, label %15, label %20\n\n15:                                               ; preds = %1\n  %16 = call i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %3, i64* nonnull align 8 dereferenceable(8) %2, i64 0)\n  %17 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %3, i64 0, i32 0, i32 0\n  store i8* %16, i8** %17, align 8, !tbaa !3\n  %18 = load i64, i64* %2, align 8, !tbaa !15\n  %19 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %3, i64 0, i32 2, i32 0\n  store i64 %18, i64* %19, align 8, !tbaa !16\n  br label %23\n\n20:                                               ; preds = %1\n  %21 = bitcast %union.anon* %11 to i8*\n  %22 = icmp eq i64 %9, 0\n  br i1 %22, label %134, label %23\n\n23:                                               ; preds = %15, %20\n  %24 = phi i8* [ %16, %15 ], [ %21, %20 ]\n  %25 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %3, i64 0, i32 0, i32 0\n  %26 = icmp ult i64 %9, 4\n  br i1 %26, label %81, label %27\n\n27:                                               ; preds = %23\n  %28 = getelementptr i8, i8* %24, i64 %9\n  %29 = icmp ult i8* %24, %10\n  %30 = icmp ult i8* %6, %28\n  %31 = and i1 %29, %30\n  br i1 %31, label %81, label %32\n\n32:                                               ; preds = %27\n  %33 = icmp ult i64 %9, 32\n  br i1 %33, label %62, label %34\n\n34:                                               ; preds = %32\n  %35 = and i64 %9, -32\n  br label %36\n\n36:                                               ; preds = %36, %34\n  %37 = phi i64 [ 0, %34 ], [ %52, %36 ]\n  %38 = getelementptr i8, i8* %24, i64 %37\n  %39 = xor i64 %37, -1\n  %40 = getelementptr i8, i8* %10, i64 %39\n  %41 = getelementptr inbounds i8, i8* %40, i64 -15\n  %42 = bitcast i8* %41 to <16 x i8>*\n  %43 = load <16 x i8>, <16 x i8>* %42, align 1, !tbaa !16, !alias.scope !17\n  %44 = shufflevector <16 x i8> %43, <16 x i8> poison, <16 x i32> <i32 15, i32 14, i32 13, i32 12, i32 11, i32 10, i32 9, i32 8, i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0>\n  %45 = getelementptr inbounds i8, i8* %40, i64 -31\n  %46 = bitcast i8* %45 to <16 x i8>*\n  %47 = load <16 x i8>, <16 x i8>* %46, align 1, !tbaa !16, !alias.scope !17\n  %48 = shufflevector <16 x i8> %47, <16 x i8> poison, <16 x i32> <i32 15, i32 14, i32 13, i32 12, i32 11, i32 10, i32 9, i32 8, i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0>\n  %49 = bitcast i8* %38 to <16 x i8>*\n  store <16 x i8> %44, <16 x i8>* %49, align 1, !tbaa !16, !alias.scope !20, !noalias !17\n  %50 = getelementptr i8, i8* %38, i64 16\n  %51 = bitcast i8* %50 to <16 x i8>*\n  store <16 x i8> %48, <16 x i8>* %51, align 1, !tbaa !16, !alias.scope !20, !noalias !17\n  %52 = add nuw i64 %37, 32\n  %53 = icmp eq i64 %52, %35\n  br i1 %53, label %54, label %36, !llvm.loop !22\n\n54:                                               ; preds = %36\n  %55 = icmp eq i64 %9, %35\n  br i1 %55, label %131, label %56\n\n56:                                               ; preds = %54\n  %57 = getelementptr i8, i8* %24, i64 %35\n  %58 = sub i64 0, %35\n  %59 = getelementptr i8, i8* %10, i64 %58\n  %60 = and i64 %9, 28\n  %61 = icmp eq i64 %60, 0\n  br i1 %61, label %81, label %62\n\n62:                                               ; preds = %32, %56\n  %63 = phi i64 [ %35, %56 ], [ 0, %32 ]\n  %64 = and i64 %9, -4\n  %65 = sub i64 0, %64\n  %66 = getelementptr i8, i8* %10, i64 %65\n  %67 = getelementptr i8, i8* %24, i64 %64\n  br label %68\n\n68:                                               ; preds = %68, %62\n  %69 = phi i64 [ %63, %62 ], [ %77, %68 ]\n  %70 = getelementptr i8, i8* %24, i64 %69\n  %71 = sub nuw nsw i64 -4, %69\n  %72 = getelementptr i8, i8* %10, i64 %71\n  %73 = bitcast i8* %72 to <4 x i8>*\n  %74 = load <4 x i8>, <4 x i8>* %73, align 1, !tbaa !16\n  %75 = shufflevector <4 x i8> %74, <4 x i8> poison, <4 x i32> <i32 3, i32 2, i32 1, i32 0>\n  %76 = bitcast i8* %70 to <4 x i8>*\n  store <4 x i8> %75, <4 x i8>* %76, align 1, !tbaa !16\n  %77 = add nuw i64 %69, 4\n  %78 = icmp eq i64 %77, %64\n  br i1 %78, label %79, label %68, !llvm.loop !25\n\n79:                                               ; preds = %68\n  %80 = icmp eq i64 %9, %64\n  br i1 %80, label %131, label %81\n\n81:                                               ; preds = %27, %23, %56, %79\n  %82 = phi i8* [ %10, %23 ], [ %10, %27 ], [ %59, %56 ], [ %66, %79 ]\n  %83 = phi i8* [ %24, %23 ], [ %24, %27 ], [ %57, %56 ], [ %67, %79 ]\n  %84 = ptrtoint i8* %82 to i64\n  %85 = sub i64 %84, %7\n  %86 = xor i64 %7, -1\n  %87 = add i64 %86, %84\n  %88 = and i64 %85, 7\n  %89 = icmp eq i64 %88, 0\n  br i1 %89, label %99, label %90\n\n90:                                               ; preds = %81, %90\n  %91 = phi i8* [ %94, %90 ], [ %82, %81 ]\n  %92 = phi i8* [ %96, %90 ], [ %83, %81 ]\n  %93 = phi i64 [ %97, %90 ], [ %88, %81 ]\n  %94 = getelementptr inbounds i8, i8* %91, i64 -1\n  %95 = load i8, i8* %94, align 1, !tbaa !16\n  store i8 %95, i8* %92, align 1, !tbaa !16\n  %96 = getelementptr inbounds i8, i8* %92, i64 1\n  %97 = add i64 %93, -1\n  %98 = icmp eq i64 %97, 0\n  br i1 %98, label %99, label %90, !llvm.loop !26\n\n99:                                               ; preds = %90, %81\n  %100 = phi i8* [ %82, %81 ], [ %94, %90 ]\n  %101 = phi i8* [ %83, %81 ], [ %96, %90 ]\n  %102 = icmp ult i64 %87, 7\n  br i1 %102, label %131, label %103\n\n103:                                              ; preds = %99, %103\n  %104 = phi i8* [ %127, %103 ], [ %100, %99 ]\n  %105 = phi i8* [ %129, %103 ], [ %101, %99 ]\n  %106 = getelementptr inbounds i8, i8* %104, i64 -1\n  %107 = load i8, i8* %106, align 1, !tbaa !16\n  store i8 %107, i8* %105, align 1, !tbaa !16\n  %108 = getelementptr inbounds i8, i8* %105, i64 1\n  %109 = getelementptr inbounds i8, i8* %104, i64 -2\n  %110 = load i8, i8* %109, align 1, !tbaa !16\n  store i8 %110, i8* %108, align 1, !tbaa !16\n  %111 = getelementptr inbounds i8, i8* %105, i64 2\n  %112 = getelementptr inbounds i8, i8* %104, i64 -3\n  %113 = load i8, i8* %112, align 1, !tbaa !16\n  store i8 %113, i8* %111, align 1, !tbaa !16\n  %114 = getelementptr inbounds i8, i8* %105, i64 3\n  %115 = getelementptr inbounds i8, i8* %104, i64 -4\n  %116 = load i8, i8* %115, align 1, !tbaa !16\n  store i8 %116, i8* %114, align 1, !tbaa !16\n  %117 = getelementptr inbounds i8, i8* %105, i64 4\n  %118 = getelementptr inbounds i8, i8* %104, i64 -5\n  %119 = load i8, i8* %118, align 1, !tbaa !16\n  store i8 %119, i8* %117, align 1, !tbaa !16\n  %120 = getelementptr inbounds i8, i8* %105, i64 5\n  %121 = getelementptr inbounds i8, i8* %104, i64 -6\n  %122 = load i8, i8* %121, align 1, !tbaa !16\n  store i8 %122, i8* %120, align 1, !tbaa !16\n  %123 = getelementptr inbounds i8, i8* %105, i64 6\n  %124 = getelementptr inbounds i8, i8* %104, i64 -7\n  %125 = load i8, i8* %124, align 1, !tbaa !16\n  store i8 %125, i8* %123, align 1, !tbaa !16\n  %126 = getelementptr inbounds i8, i8* %105, i64 7\n  %127 = getelementptr inbounds i8, i8* %104, i64 -8\n  %128 = load i8, i8* %127, align 1, !tbaa !16\n  store i8 %128, i8* %126, align 1, !tbaa !16\n  %129 = getelementptr inbounds i8, i8* %105, i64 8\n  %130 = icmp eq i8* %127, %6\n  br i1 %130, label %131, label %103, !llvm.loop !28\n\n131:                                              ; preds = %99, %103, %79, %54\n  %132 = load i64, i64* %2, align 8, !tbaa !15\n  %133 = load i8*, i8** %25, align 8, !tbaa !3\n  br label %134\n\n134:                                              ; preds = %131, %20\n  %135 = phi i8* [ %133, %131 ], [ %21, %20 ]\n  %136 = phi i64 [ %132, %131 ], [ 0, %20 ]\n  %137 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %3, i64 0, i32 0, i32 0\n  %138 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %3, i64 0, i32 1\n  store i64 %136, i64* %138, align 8, !tbaa !13\n  %139 = getelementptr inbounds i8, i8* %135, i64 %136\n  store i8 0, i8* %139, align 1, !tbaa !16\n  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %13) #5\n  %140 = load i64, i64* %138, align 8, !tbaa !13\n  %141 = load i64, i64* %8, align 8, !tbaa !13\n  %142 = icmp eq i64 %140, %141\n  br i1 %142, label %143, label %150\n\n143:                                              ; preds = %134\n  %144 = icmp eq i64 %140, 0\n  br i1 %144, label %150, label %145\n\n145:                                              ; preds = %143\n  %146 = load i8*, i8** %5, align 8, !tbaa !3\n  %147 = load i8*, i8** %137, align 8, !tbaa !3\n  %148 = call i32 @bcmp(i8* %147, i8* %146, i64 %140) #5\n  %149 = icmp eq i32 %148, 0\n  br label %150\n\n150:                                              ; preds = %134, %143, %145\n  %151 = phi i1 [ false, %134 ], [ %149, %145 ], [ true, %143 ]\n  %152 = load i8*, i8** %137, align 8, !tbaa !3\n  %153 = bitcast %union.anon* %11 to i8*\n  %154 = icmp eq i8* %152, %153\n  br i1 %154, label %156, label %155\n\n155:                                              ; preds = %150\n  call void @_ZdlPv(i8* %152) #5\n  br label %156\n\n156:                                              ; preds = %150, %155\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %4) #5\n  ret i1 %151\n}\n\n; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn\ndeclare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1\n\ndeclare dso_local i32 @__gxx_personality_v0(...)\n\n; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn\ndeclare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1\n\n; Function Attrs: nobuiltin nounwind\ndeclare dso_local void @_ZdlPv(i8*) local_unnamed_addr #2\n\ndeclare dso_local i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32), i64* nonnull align 8 dereferenceable(8), i64) local_unnamed_addr #3\n\n; Function Attrs: argmemonly nofree nounwind readonly willreturn\ndeclare i32 @bcmp(i8* nocapture, i8* nocapture, i64) local_unnamed_addr #4\n\nattributes #0 = { uwtable \"frame-pointer\"=\"none\" \"min-legal-vector-width\"=\"0\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #1 = { argmemonly mustprogress nofree nosync nounwind willreturn }\nattributes #2 = { nobuiltin nounwind \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #3 = { \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #4 = { argmemonly nofree nounwind readonly willreturn }\nattributes #5 = { nounwind }\n\n!llvm.module.flags = !{!0, !1}\n!llvm.ident = !{!2}\n\n!0 = !{i32 1, !\"wchar_size\", i32 4}\n!1 = !{i32 7, !\"uwtable\", i32 1}\n!2 = !{!\"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)\"}\n!3 = !{!4, !6, i64 0}\n!4 = !{!\"_ZTSNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE\", !5, i64 0, !9, i64 8, !7, i64 16}\n!5 = !{!\"_ZTSNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderE\", !6, i64 0}\n!6 = !{!\"any pointer\", !7, i64 0}\n!7 = !{!\"omnipotent char\", !8, i64 0}\n!8 = !{!\"Simple C++ TBAA\"}\n!9 = !{!\"long\", !7, i64 0}\n!10 = !{!11}\n!11 = distinct !{!11, !12, !\"_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6rbeginEv: argument 0\"}\n!12 = distinct !{!12, !\"_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6rbeginEv\"}\n!13 = !{!4, !9, i64 8}\n!14 = !{!5, !6, i64 0}\n!15 = !{!9, !9, i64 0}\n!16 = !{!7, !7, i64 0}\n!17 = !{!18}\n!18 = distinct !{!18, !19}\n!19 = distinct !{!19, !\"LVerDomain\"}\n!20 = !{!21}\n!21 = distinct !{!21, !19}\n!22 = distinct !{!22, !23, !24}\n!23 = !{!\"llvm.loop.mustprogress\"}\n!24 = !{!\"llvm.loop.isvectorized\", i32 1}\n!25 = distinct !{!25, !23, !24}\n!26 = distinct !{!26, !27}\n!27 = !{!\"llvm.loop.unroll.disable\"}\n!28 = distinct !{!28, !23, !24}\n", "target": "This is the targeted source code:\n/*\nChecks if given string is a palindrome\n>>> is_palindrome(\"\")\ntrue\n>>> is_palindrome(\"aba\")\ntrue\n>>> is_palindrome(\"aaaaa\")\ntrue\n>>> is_palindrome(\"zbcd\")\nfalse\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool is_palindrome(string text){\n\n    string pr(text.rbegin(),text.rend());\n    return pr==text;\n}\n"}
{"input": "Convert this to C++:\n; ModuleID = '../../Human_xBenchmarks_164/CPP_49/CPP_49.cpp'\nsource_filename = \"../../Human_xBenchmarks_164/CPP_49/CPP_49.cpp\"\ntarget datalayout = \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\ntarget triple = \"x86_64-unknown-linux-gnu\"\n\n; Function Attrs: mustprogress nofree norecurse nosync nounwind readnone uwtable willreturn\ndefine dso_local i32 @_Z4modpii(i32 %0, i32 %1) local_unnamed_addr #0 {\n  %3 = icmp sgt i32 %0, 0\n  br i1 %3, label %4, label %21\n\n4:                                                ; preds = %2\n  %5 = add i32 %0, -1\n  %6 = and i32 %0, 3\n  %7 = icmp ult i32 %5, 3\n  br i1 %7, label %10, label %8\n\n8:                                                ; preds = %4\n  %9 = and i32 %0, -4\n  br label %23\n\n10:                                               ; preds = %23, %4\n  %11 = phi i32 [ undef, %4 ], [ %33, %23 ]\n  %12 = phi i32 [ 1, %4 ], [ %33, %23 ]\n  %13 = icmp eq i32 %6, 0\n  br i1 %13, label %21, label %14\n\n14:                                               ; preds = %10, %14\n  %15 = phi i32 [ %18, %14 ], [ %12, %10 ]\n  %16 = phi i32 [ %19, %14 ], [ %6, %10 ]\n  %17 = shl nsw i32 %15, 1\n  %18 = srem i32 %17, %1\n  %19 = add i32 %16, -1\n  %20 = icmp eq i32 %19, 0\n  br i1 %20, label %21, label %14, !llvm.loop !3\n\n21:                                               ; preds = %10, %14, %2\n  %22 = phi i32 [ 1, %2 ], [ %11, %10 ], [ %18, %14 ]\n  ret i32 %22\n\n23:                                               ; preds = %23, %8\n  %24 = phi i32 [ 1, %8 ], [ %33, %23 ]\n  %25 = phi i32 [ %9, %8 ], [ %34, %23 ]\n  %26 = shl nsw i32 %24, 1\n  %27 = srem i32 %26, %1\n  %28 = shl nsw i32 %27, 1\n  %29 = srem i32 %28, %1\n  %30 = shl nsw i32 %29, 1\n  %31 = srem i32 %30, %1\n  %32 = shl nsw i32 %31, 1\n  %33 = srem i32 %32, %1\n  %34 = add i32 %25, -4\n  %35 = icmp eq i32 %34, 0\n  br i1 %35, label %10, label %23, !llvm.loop !5\n}\n\nattributes #0 = { mustprogress nofree norecurse nosync nounwind readnone uwtable willreturn \"frame-pointer\"=\"none\" \"min-legal-vector-width\"=\"0\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\n\n!llvm.module.flags = !{!0, !1}\n!llvm.ident = !{!2}\n\n!0 = !{i32 1, !\"wchar_size\", i32 4}\n!1 = !{i32 7, !\"uwtable\", i32 1}\n!2 = !{!\"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)\"}\n!3 = distinct !{!3, !4}\n!4 = !{!\"llvm.loop.unroll.disable\"}\n!5 = distinct !{!5, !6}\n!6 = !{!\"llvm.loop.mustprogress\"}\n", "target": "This is the targeted source code:\n/*\nReturn 2^n modulo p (be aware of numerics).\n>>> modp(3, 5)\n3\n>>> modp(1101, 101)\n2\n>>> modp(0, 101)\n1\n>>> modp(3, 11)\n8\n>>> modp(100, 101)\n1\n*/\n#include<stdio.h>\nusing namespace std;\nint modp(int n,int p){\n\n    int out=1;\n    for (int i=0;i<n;i++)\n        out=(out*2)%p;\n    return out;\n}\n"}
{"input": "Convert this to C++:\n; ModuleID = '../../Human_xBenchmarks_164/CPP_50/CPP_50.cpp'\nsource_filename = \"../../Human_xBenchmarks_164/CPP_50/CPP_50.cpp\"\ntarget datalayout = \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\ntarget triple = \"x86_64-unknown-linux-gnu\"\n\n%\"class.std::__cxx11::basic_string\" = type { %\"struct.std::__cxx11::basic_string<char>::_Alloc_hider\", i64, %union.anon }\n%\"struct.std::__cxx11::basic_string<char>::_Alloc_hider\" = type { i8* }\n%union.anon = type { i64, [8 x i8] }\n\n; Function Attrs: uwtable\ndefine dso_local void @_Z12encode_shiftNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE(%\"class.std::__cxx11::basic_string\"* noalias sret(%\"class.std::__cxx11::basic_string\") align 8 %0, %\"class.std::__cxx11::basic_string\"* nocapture readonly %1) local_unnamed_addr #0 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {\n  %3 = alloca i64, align 8\n  %4 = alloca %\"class.std::__cxx11::basic_string\", align 8\n  %5 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 2\n  %6 = bitcast %\"class.std::__cxx11::basic_string\"* %0 to %union.anon**\n  store %union.anon* %5, %union.anon** %6, align 8, !tbaa !3\n  %7 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 1\n  store i64 0, i64* %7, align 8, !tbaa !8\n  %8 = bitcast %union.anon* %5 to i8*\n  store i8 0, i8* %8, align 8, !tbaa !11\n  %9 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %1, i64 0, i32 1\n  %10 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %1, i64 0, i32 0, i32 0\n  %11 = bitcast %\"class.std::__cxx11::basic_string\"* %4 to i8*\n  %12 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %4, i64 0, i32 2\n  %13 = bitcast %\"class.std::__cxx11::basic_string\"* %4 to %union.anon**\n  %14 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 0, i32 0\n  %15 = bitcast i64* %3 to i8*\n  %16 = bitcast %union.anon* %12 to i8*\n  %17 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %4, i64 0, i32 0, i32 0\n  %18 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %4, i64 0, i32 2, i32 0\n  %19 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %4, i64 0, i32 1\n  %20 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 2, i32 0\n  %21 = load i64, i64* %9, align 8, !tbaa !8\n  %22 = icmp eq i64 %21, 0\n  br i1 %22, label %105, label %23\n\n23:                                               ; preds = %2\n  %24 = bitcast i64* %19 to <2 x i64>*\n  %25 = bitcast i64* %7 to <2 x i64>*\n  br label %26\n\n26:                                               ; preds = %23, %94\n  %27 = phi i64 [ %96, %94 ], [ 0, %23 ]\n  %28 = phi i8* [ %95, %94 ], [ %8, %23 ]\n  %29 = phi i64 [ %91, %94 ], [ 0, %23 ]\n  %30 = load i8*, i8** %10, align 8, !tbaa !12\n  %31 = getelementptr inbounds i8, i8* %30, i64 %29\n  %32 = load i8, i8* %31, align 1, !tbaa !11\n  %33 = sext i8 %32 to i16\n  %34 = add nsw i16 %33, -92\n  %35 = srem i16 %34, 26\n  %36 = trunc i16 %35 to i8\n  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %11) #6\n  %37 = add nsw i8 %36, 97\n  call void @llvm.experimental.noalias.scope.decl(metadata !13)\n  store %union.anon* %12, %union.anon** %13, align 8, !tbaa !3, !alias.scope !13\n  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %15) #6, !noalias !13\n  store i64 %27, i64* %3, align 8, !tbaa !16, !noalias !13\n  %38 = icmp ugt i64 %27, 15\n  br i1 %38, label %39, label %43\n\n39:                                               ; preds = %26\n  %40 = invoke i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %4, i64* nonnull align 8 dereferenceable(8) %3, i64 0)\n          to label %41 unwind label %97\n\n41:                                               ; preds = %39\n  store i8* %40, i8** %17, align 8, !tbaa !12, !alias.scope !13\n  %42 = load i64, i64* %3, align 8, !tbaa !16, !noalias !13\n  store i64 %42, i64* %18, align 8, !tbaa !11, !alias.scope !13\n  br label %43\n\n43:                                               ; preds = %26, %41\n  %44 = phi i8* [ %40, %41 ], [ %16, %26 ]\n  switch i64 %27, label %47 [\n    i64 1, label %45\n    i64 0, label %48\n  ]\n\n45:                                               ; preds = %43\n  %46 = load i8, i8* %28, align 1, !tbaa !11\n  store i8 %46, i8* %44, align 1, !tbaa !11\n  br label %48\n\n47:                                               ; preds = %43\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %44, i8* align 1 %28, i64 %27, i1 false) #6\n  br label %48\n\n48:                                               ; preds = %47, %45, %43\n  %49 = load i64, i64* %3, align 8, !tbaa !16, !noalias !13\n  store i64 %49, i64* %19, align 8, !tbaa !8, !alias.scope !13\n  %50 = load i8*, i8** %17, align 8, !tbaa !12, !alias.scope !13\n  %51 = getelementptr inbounds i8, i8* %50, i64 %49\n  store i8 0, i8* %51, align 1, !tbaa !11\n  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %15) #6, !noalias !13\n  %52 = load i64, i64* %19, align 8, !tbaa !8, !alias.scope !13\n  %53 = invoke nonnull align 8 dereferenceable(32) %\"class.std::__cxx11::basic_string\"* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEmmmc(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %4, i64 %52, i64 0, i64 1, i8 signext %37)\n          to label %59 unwind label %54\n\n54:                                               ; preds = %48\n  %55 = landingpad { i8*, i32 }\n          cleanup\n  %56 = load i8*, i8** %17, align 8, !tbaa !12, !alias.scope !13\n  %57 = icmp eq i8* %56, %16\n  br i1 %57, label %99, label %58\n\n58:                                               ; preds = %54\n  call void @_ZdlPv(i8* %56) #6\n  br label %99\n\n59:                                               ; preds = %48\n  %60 = load i8*, i8** %17, align 8, !tbaa !12\n  %61 = icmp eq i8* %60, %16\n  br i1 %61, label %62, label %76\n\n62:                                               ; preds = %59\n  %63 = load i64, i64* %19, align 8, !tbaa !8\n  %64 = icmp eq i64 %63, 0\n  br i1 %64, label %71, label %65\n\n65:                                               ; preds = %62\n  %66 = load i8*, i8** %14, align 8, !tbaa !12\n  %67 = icmp eq i64 %63, 1\n  br i1 %67, label %68, label %70\n\n68:                                               ; preds = %65\n  %69 = load i8, i8* %16, align 8, !tbaa !11\n  store i8 %69, i8* %66, align 1, !tbaa !11\n  br label %71\n\n70:                                               ; preds = %65\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %66, i8* nonnull align 8 %16, i64 %63, i1 false) #6\n  br label %71\n\n71:                                               ; preds = %70, %68, %62\n  %72 = load i64, i64* %19, align 8, !tbaa !8\n  store i64 %72, i64* %7, align 8, !tbaa !8\n  %73 = load i8*, i8** %14, align 8, !tbaa !12\n  %74 = getelementptr inbounds i8, i8* %73, i64 %72\n  store i8 0, i8* %74, align 1, !tbaa !11\n  %75 = load i8*, i8** %17, align 8, !tbaa !12\n  br label %85\n\n76:                                               ; preds = %59\n  %77 = load i8*, i8** %14, align 8, !tbaa !12\n  %78 = icmp eq i8* %77, %8\n  %79 = load i64, i64* %20, align 8\n  store i8* %60, i8** %14, align 8, !tbaa !12\n  %80 = load <2 x i64>, <2 x i64>* %24, align 8, !tbaa !11\n  store <2 x i64> %80, <2 x i64>* %25, align 8, !tbaa !11\n  %81 = icmp eq i8* %77, null\n  %82 = or i1 %78, %81\n  br i1 %82, label %84, label %83\n\n83:                                               ; preds = %76\n  store i8* %77, i8** %17, align 8, !tbaa !12\n  store i64 %79, i64* %18, align 8, !tbaa !11\n  br label %85\n\n84:                                               ; preds = %76\n  store %union.anon* %12, %union.anon** %13, align 8, !tbaa !12\n  br label %85\n\n85:                                               ; preds = %71, %83, %84\n  %86 = phi i8* [ %75, %71 ], [ %77, %83 ], [ %16, %84 ]\n  store i64 0, i64* %19, align 8, !tbaa !8\n  store i8 0, i8* %86, align 1, !tbaa !11\n  %87 = load i8*, i8** %17, align 8, !tbaa !12\n  %88 = icmp eq i8* %87, %16\n  br i1 %88, label %90, label %89\n\n89:                                               ; preds = %85\n  call void @_ZdlPv(i8* %87) #6\n  br label %90\n\n90:                                               ; preds = %85, %89\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %11) #6\n  %91 = add nuw i64 %29, 1\n  %92 = load i64, i64* %9, align 8, !tbaa !8\n  %93 = icmp ugt i64 %92, %91\n  br i1 %93, label %94, label %105, !llvm.loop !17\n\n94:                                               ; preds = %90\n  %95 = load i8*, i8** %14, align 8, !tbaa !12, !noalias !13\n  %96 = load i64, i64* %7, align 8, !tbaa !8, !noalias !13\n  br label %26\n\n97:                                               ; preds = %39\n  %98 = landingpad { i8*, i32 }\n          cleanup\n  br label %99\n\n99:                                               ; preds = %54, %58, %97\n  %100 = phi { i8*, i32 } [ %98, %97 ], [ %55, %58 ], [ %55, %54 ]\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %11) #6\n  %101 = load i8*, i8** %14, align 8, !tbaa !12\n  %102 = icmp eq i8* %101, %8\n  br i1 %102, label %104, label %103\n\n103:                                              ; preds = %99\n  call void @_ZdlPv(i8* %101) #6\n  br label %104\n\n104:                                              ; preds = %99, %103\n  resume { i8*, i32 } %100\n\n105:                                              ; preds = %90, %2\n  ret void\n}\n\n; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn\ndeclare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1\n\ndeclare dso_local i32 @__gxx_personality_v0(...)\n\n; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn\ndeclare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1\n\n; Function Attrs: uwtable\ndefine dso_local void @_Z12decode_shiftNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE(%\"class.std::__cxx11::basic_string\"* noalias sret(%\"class.std::__cxx11::basic_string\") align 8 %0, %\"class.std::__cxx11::basic_string\"* nocapture readonly %1) local_unnamed_addr #0 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {\n  %3 = alloca i64, align 8\n  %4 = alloca %\"class.std::__cxx11::basic_string\", align 8\n  %5 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 2\n  %6 = bitcast %\"class.std::__cxx11::basic_string\"* %0 to %union.anon**\n  store %union.anon* %5, %union.anon** %6, align 8, !tbaa !3\n  %7 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 1\n  store i64 0, i64* %7, align 8, !tbaa !8\n  %8 = bitcast %union.anon* %5 to i8*\n  store i8 0, i8* %8, align 8, !tbaa !11\n  %9 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %1, i64 0, i32 1\n  %10 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %1, i64 0, i32 0, i32 0\n  %11 = bitcast %\"class.std::__cxx11::basic_string\"* %4 to i8*\n  %12 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %4, i64 0, i32 2\n  %13 = bitcast %\"class.std::__cxx11::basic_string\"* %4 to %union.anon**\n  %14 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 0, i32 0\n  %15 = bitcast i64* %3 to i8*\n  %16 = bitcast %union.anon* %12 to i8*\n  %17 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %4, i64 0, i32 0, i32 0\n  %18 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %4, i64 0, i32 2, i32 0\n  %19 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %4, i64 0, i32 1\n  %20 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 2, i32 0\n  %21 = load i64, i64* %9, align 8, !tbaa !8\n  %22 = icmp eq i64 %21, 0\n  br i1 %22, label %105, label %23\n\n23:                                               ; preds = %2\n  %24 = bitcast i64* %19 to <2 x i64>*\n  %25 = bitcast i64* %7 to <2 x i64>*\n  br label %26\n\n26:                                               ; preds = %23, %94\n  %27 = phi i64 [ %96, %94 ], [ 0, %23 ]\n  %28 = phi i8* [ %95, %94 ], [ %8, %23 ]\n  %29 = phi i64 [ %91, %94 ], [ 0, %23 ]\n  %30 = load i8*, i8** %10, align 8, !tbaa !12\n  %31 = getelementptr inbounds i8, i8* %30, i64 %29\n  %32 = load i8, i8* %31, align 1, !tbaa !11\n  %33 = sext i8 %32 to i16\n  %34 = add nsw i16 %33, -76\n  %35 = srem i16 %34, 26\n  %36 = trunc i16 %35 to i8\n  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %11) #6\n  %37 = add nsw i8 %36, 97\n  call void @llvm.experimental.noalias.scope.decl(metadata !19)\n  store %union.anon* %12, %union.anon** %13, align 8, !tbaa !3, !alias.scope !19\n  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %15) #6, !noalias !19\n  store i64 %27, i64* %3, align 8, !tbaa !16, !noalias !19\n  %38 = icmp ugt i64 %27, 15\n  br i1 %38, label %39, label %43\n\n39:                                               ; preds = %26\n  %40 = invoke i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %4, i64* nonnull align 8 dereferenceable(8) %3, i64 0)\n          to label %41 unwind label %97\n\n41:                                               ; preds = %39\n  store i8* %40, i8** %17, align 8, !tbaa !12, !alias.scope !19\n  %42 = load i64, i64* %3, align 8, !tbaa !16, !noalias !19\n  store i64 %42, i64* %18, align 8, !tbaa !11, !alias.scope !19\n  br label %43\n\n43:                                               ; preds = %26, %41\n  %44 = phi i8* [ %40, %41 ], [ %16, %26 ]\n  switch i64 %27, label %47 [\n    i64 1, label %45\n    i64 0, label %48\n  ]\n\n45:                                               ; preds = %43\n  %46 = load i8, i8* %28, align 1, !tbaa !11\n  store i8 %46, i8* %44, align 1, !tbaa !11\n  br label %48\n\n47:                                               ; preds = %43\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %44, i8* align 1 %28, i64 %27, i1 false) #6\n  br label %48\n\n48:                                               ; preds = %47, %45, %43\n  %49 = load i64, i64* %3, align 8, !tbaa !16, !noalias !19\n  store i64 %49, i64* %19, align 8, !tbaa !8, !alias.scope !19\n  %50 = load i8*, i8** %17, align 8, !tbaa !12, !alias.scope !19\n  %51 = getelementptr inbounds i8, i8* %50, i64 %49\n  store i8 0, i8* %51, align 1, !tbaa !11\n  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %15) #6, !noalias !19\n  %52 = load i64, i64* %19, align 8, !tbaa !8, !alias.scope !19\n  %53 = invoke nonnull align 8 dereferenceable(32) %\"class.std::__cxx11::basic_string\"* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEmmmc(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %4, i64 %52, i64 0, i64 1, i8 signext %37)\n          to label %59 unwind label %54\n\n54:                                               ; preds = %48\n  %55 = landingpad { i8*, i32 }\n          cleanup\n  %56 = load i8*, i8** %17, align 8, !tbaa !12, !alias.scope !19\n  %57 = icmp eq i8* %56, %16\n  br i1 %57, label %99, label %58\n\n58:                                               ; preds = %54\n  call void @_ZdlPv(i8* %56) #6\n  br label %99\n\n59:                                               ; preds = %48\n  %60 = load i8*, i8** %17, align 8, !tbaa !12\n  %61 = icmp eq i8* %60, %16\n  br i1 %61, label %62, label %76\n\n62:                                               ; preds = %59\n  %63 = load i64, i64* %19, align 8, !tbaa !8\n  %64 = icmp eq i64 %63, 0\n  br i1 %64, label %71, label %65\n\n65:                                               ; preds = %62\n  %66 = load i8*, i8** %14, align 8, !tbaa !12\n  %67 = icmp eq i64 %63, 1\n  br i1 %67, label %68, label %70\n\n68:                                               ; preds = %65\n  %69 = load i8, i8* %16, align 8, !tbaa !11\n  store i8 %69, i8* %66, align 1, !tbaa !11\n  br label %71\n\n70:                                               ; preds = %65\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %66, i8* nonnull align 8 %16, i64 %63, i1 false) #6\n  br label %71\n\n71:                                               ; preds = %70, %68, %62\n  %72 = load i64, i64* %19, align 8, !tbaa !8\n  store i64 %72, i64* %7, align 8, !tbaa !8\n  %73 = load i8*, i8** %14, align 8, !tbaa !12\n  %74 = getelementptr inbounds i8, i8* %73, i64 %72\n  store i8 0, i8* %74, align 1, !tbaa !11\n  %75 = load i8*, i8** %17, align 8, !tbaa !12\n  br label %85\n\n76:                                               ; preds = %59\n  %77 = load i8*, i8** %14, align 8, !tbaa !12\n  %78 = icmp eq i8* %77, %8\n  %79 = load i64, i64* %20, align 8\n  store i8* %60, i8** %14, align 8, !tbaa !12\n  %80 = load <2 x i64>, <2 x i64>* %24, align 8, !tbaa !11\n  store <2 x i64> %80, <2 x i64>* %25, align 8, !tbaa !11\n  %81 = icmp eq i8* %77, null\n  %82 = or i1 %78, %81\n  br i1 %82, label %84, label %83\n\n83:                                               ; preds = %76\n  store i8* %77, i8** %17, align 8, !tbaa !12\n  store i64 %79, i64* %18, align 8, !tbaa !11\n  br label %85\n\n84:                                               ; preds = %76\n  store %union.anon* %12, %union.anon** %13, align 8, !tbaa !12\n  br label %85\n\n85:                                               ; preds = %71, %83, %84\n  %86 = phi i8* [ %75, %71 ], [ %77, %83 ], [ %16, %84 ]\n  store i64 0, i64* %19, align 8, !tbaa !8\n  store i8 0, i8* %86, align 1, !tbaa !11\n  %87 = load i8*, i8** %17, align 8, !tbaa !12\n  %88 = icmp eq i8* %87, %16\n  br i1 %88, label %90, label %89\n\n89:                                               ; preds = %85\n  call void @_ZdlPv(i8* %87) #6\n  br label %90\n\n90:                                               ; preds = %85, %89\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %11) #6\n  %91 = add nuw i64 %29, 1\n  %92 = load i64, i64* %9, align 8, !tbaa !8\n  %93 = icmp ugt i64 %92, %91\n  br i1 %93, label %94, label %105, !llvm.loop !22\n\n94:                                               ; preds = %90\n  %95 = load i8*, i8** %14, align 8, !tbaa !12, !noalias !19\n  %96 = load i64, i64* %7, align 8, !tbaa !8, !noalias !19\n  br label %26\n\n97:                                               ; preds = %39\n  %98 = landingpad { i8*, i32 }\n          cleanup\n  br label %99\n\n99:                                               ; preds = %54, %58, %97\n  %100 = phi { i8*, i32 } [ %98, %97 ], [ %55, %58 ], [ %55, %54 ]\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %11) #6\n  %101 = load i8*, i8** %14, align 8, !tbaa !12\n  %102 = icmp eq i8* %101, %8\n  br i1 %102, label %104, label %103\n\n103:                                              ; preds = %99\n  call void @_ZdlPv(i8* %101) #6\n  br label %104\n\n104:                                              ; preds = %99, %103\n  resume { i8*, i32 } %100\n\n105:                                              ; preds = %90, %2\n  ret void\n}\n\n; Function Attrs: nobuiltin nounwind\ndeclare dso_local void @_ZdlPv(i8*) local_unnamed_addr #2\n\ndeclare dso_local i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32), i64* nonnull align 8 dereferenceable(8), i64) local_unnamed_addr #3\n\n; Function Attrs: argmemonly mustprogress nofree nounwind willreturn\ndeclare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #4\n\ndeclare dso_local nonnull align 8 dereferenceable(32) %\"class.std::__cxx11::basic_string\"* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEmmmc(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32), i64, i64, i64, i8 signext) local_unnamed_addr #3\n\n; Function Attrs: inaccessiblememonly nofree nosync nounwind willreturn\ndeclare void @llvm.experimental.noalias.scope.decl(metadata) #5\n\nattributes #0 = { uwtable \"frame-pointer\"=\"none\" \"min-legal-vector-width\"=\"0\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #1 = { argmemonly mustprogress nofree nosync nounwind willreturn }\nattributes #2 = { nobuiltin nounwind \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #3 = { \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #4 = { argmemonly mustprogress nofree nounwind willreturn }\nattributes #5 = { inaccessiblememonly nofree nosync nounwind willreturn }\nattributes #6 = { nounwind }\n\n!llvm.module.flags = !{!0, !1}\n!llvm.ident = !{!2}\n\n!0 = !{i32 1, !\"wchar_size\", i32 4}\n!1 = !{i32 7, !\"uwtable\", i32 1}\n!2 = !{!\"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)\"}\n!3 = !{!4, !5, i64 0}\n!4 = !{!\"_ZTSNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderE\", !5, i64 0}\n!5 = !{!\"any pointer\", !6, i64 0}\n!6 = !{!\"omnipotent char\", !7, i64 0}\n!7 = !{!\"Simple C++ TBAA\"}\n!8 = !{!9, !10, i64 8}\n!9 = !{!\"_ZTSNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE\", !4, i64 0, !10, i64 8, !6, i64 16}\n!10 = !{!\"long\", !6, i64 0}\n!11 = !{!6, !6, i64 0}\n!12 = !{!9, !5, i64 0}\n!13 = !{!14}\n!14 = distinct !{!14, !15, !\"_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_S5_: argument 0\"}\n!15 = distinct !{!15, !\"_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_S5_\"}\n!16 = !{!10, !10, i64 0}\n!17 = distinct !{!17, !18}\n!18 = !{!\"llvm.loop.mustprogress\"}\n!19 = !{!20}\n!20 = distinct !{!20, !21, !\"_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_S5_: argument 0\"}\n!21 = distinct !{!21, !\"_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_S5_\"}\n!22 = distinct !{!22, !18}\n", "target": "This is the targeted source code:\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring encode_shift(string s){\n    // returns encoded string by shifting every character by 5 in the alphabet.\n    string out;\n    int i;\n    for (i=0;i<s.length();i++)\n    {\n        int w=((int)s[i]+5-(int)'a')%26+(int)'a';   \n        out=out+(char)w;\n    }\n    return out;\n}\nstring decode_shift(string s){\n    // takes as input string encoded with encode_shift function. Returns decoded string.\n\n    string out;\n    int i;\n    for (i=0;i<s.length();i++)\n    {\n        int w=((int)s[i]+21-(int)'a')%26+(int)'a';   \n        out=out+(char)w;\n    }\n    return out;\n}\n"}
{"input": "Convert this to C++:\n; ModuleID = '../../Human_xBenchmarks_164/CPP_51/CPP_51.cpp'\nsource_filename = \"../../Human_xBenchmarks_164/CPP_51/CPP_51.cpp\"\ntarget datalayout = \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\ntarget triple = \"x86_64-unknown-linux-gnu\"\n\n%\"class.std::__cxx11::basic_string\" = type { %\"struct.std::__cxx11::basic_string<char>::_Alloc_hider\", i64, %union.anon }\n%\"struct.std::__cxx11::basic_string<char>::_Alloc_hider\" = type { i8* }\n%union.anon = type { i64, [8 x i8] }\n\n@.str.1 = private unnamed_addr constant [11 x i8] c\"AEIOUaeiou\\00\", align 1\n\n; Function Attrs: uwtable\ndefine dso_local void @_Z13remove_vowelsNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE(%\"class.std::__cxx11::basic_string\"* noalias sret(%\"class.std::__cxx11::basic_string\") align 8 %0, %\"class.std::__cxx11::basic_string\"* nocapture readonly %1) local_unnamed_addr #0 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {\n  %3 = alloca i64, align 8\n  %4 = alloca %\"class.std::__cxx11::basic_string\", align 8\n  %5 = alloca %\"class.std::__cxx11::basic_string\", align 8\n  %6 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 2\n  %7 = bitcast %\"class.std::__cxx11::basic_string\"* %0 to %union.anon**\n  store %union.anon* %6, %union.anon** %7, align 8, !tbaa !3\n  %8 = bitcast %union.anon* %6 to i8*\n  %9 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 0, i32 0\n  %10 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 1\n  store i64 0, i64* %10, align 8, !tbaa !8\n  store i8 0, i8* %8, align 8, !tbaa !11\n  %11 = bitcast %\"class.std::__cxx11::basic_string\"* %4 to i8*\n  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %11) #6\n  %12 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %4, i64 0, i32 2\n  %13 = bitcast %\"class.std::__cxx11::basic_string\"* %4 to %union.anon**\n  store %union.anon* %12, %union.anon** %13, align 8, !tbaa !3\n  %14 = bitcast %union.anon* %12 to i8*\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(10) %14, i8* noundef nonnull align 1 dereferenceable(10) getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0), i64 10, i1 false) #6\n  %15 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %4, i64 0, i32 0, i32 0\n  %16 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %4, i64 0, i32 1\n  store i64 10, i64* %16, align 8, !tbaa !8\n  %17 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %4, i64 0, i32 2, i32 1, i64 2\n  store i8 0, i8* %17, align 2, !tbaa !11\n  %18 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %1, i64 0, i32 1\n  %19 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %1, i64 0, i32 0, i32 0\n  %20 = bitcast %\"class.std::__cxx11::basic_string\"* %5 to i8*\n  %21 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %5, i64 0, i32 2\n  %22 = bitcast %\"class.std::__cxx11::basic_string\"* %5 to %union.anon**\n  %23 = bitcast i64* %3 to i8*\n  %24 = bitcast %union.anon* %21 to i8*\n  %25 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %5, i64 0, i32 0, i32 0\n  %26 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %5, i64 0, i32 2, i32 0\n  %27 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %5, i64 0, i32 1\n  %28 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 2, i32 0\n  %29 = load i64, i64* %18, align 8, !tbaa !8\n  %30 = icmp eq i64 %29, 0\n  br i1 %30, label %37, label %31\n\n31:                                               ; preds = %2\n  %32 = bitcast i64* %27 to <2 x i64>*\n  %33 = bitcast i64* %10 to <2 x i64>*\n  br label %38\n\n34:                                               ; preds = %174\n  %35 = icmp eq i8* %178, %14\n  br i1 %35, label %37, label %36\n\n36:                                               ; preds = %34\n  call void @_ZdlPv(i8* %178) #6\n  br label %37\n\n37:                                               ; preds = %2, %34, %36\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %11) #6\n  ret void\n\n38:                                               ; preds = %31, %179\n  %39 = phi i64 [ %175, %179 ], [ %29, %31 ]\n  %40 = phi i64 [ %180, %179 ], [ 10, %31 ]\n  %41 = phi i8* [ %178, %179 ], [ %14, %31 ]\n  %42 = phi i64 [ %176, %179 ], [ 0, %31 ]\n  %43 = getelementptr inbounds i8, i8* %41, i64 %40\n  %44 = load i8*, i8** %19, align 8, !tbaa !12\n  %45 = getelementptr inbounds i8, i8* %44, i64 %42\n  %46 = ptrtoint i8* %43 to i64\n  %47 = icmp sgt i64 %40, 3\n  br i1 %47, label %48, label %72\n\n48:                                               ; preds = %38\n  %49 = lshr i64 %40, 2\n  %50 = load i8, i8* %45, align 1, !tbaa !11\n  br label %51\n\n51:                                               ; preds = %68, %48\n  %52 = phi i64 [ %49, %48 ], [ %70, %68 ]\n  %53 = phi i8* [ %41, %48 ], [ %69, %68 ]\n  %54 = load i8, i8* %53, align 1, !tbaa !11\n  %55 = icmp eq i8 %54, %50\n  br i1 %55, label %106, label %56\n\n56:                                               ; preds = %51\n  %57 = getelementptr inbounds i8, i8* %53, i64 1\n  %58 = load i8, i8* %57, align 1, !tbaa !11\n  %59 = icmp eq i8 %58, %50\n  br i1 %59, label %104, label %60\n\n60:                                               ; preds = %56\n  %61 = getelementptr inbounds i8, i8* %53, i64 2\n  %62 = load i8, i8* %61, align 1, !tbaa !11\n  %63 = icmp eq i8 %62, %50\n  br i1 %63, label %102, label %64\n\n64:                                               ; preds = %60\n  %65 = getelementptr inbounds i8, i8* %53, i64 3\n  %66 = load i8, i8* %65, align 1, !tbaa !11\n  %67 = icmp eq i8 %66, %50\n  br i1 %67, label %100, label %68\n\n68:                                               ; preds = %64\n  %69 = getelementptr inbounds i8, i8* %53, i64 4\n  %70 = add nsw i64 %52, -1\n  %71 = icmp sgt i64 %52, 1\n  br i1 %71, label %51, label %72, !llvm.loop !13\n\n72:                                               ; preds = %68, %38\n  %73 = phi i8* [ %41, %38 ], [ %69, %68 ]\n  %74 = ptrtoint i8* %73 to i64\n  %75 = sub i64 %46, %74\n  switch i64 %75, label %76 [\n    i64 3, label %82\n    i64 2, label %80\n    i64 1, label %78\n  ]\n\n76:                                               ; preds = %72\n  %77 = load i8, i8* %45, align 1, !tbaa !11\n  br label %110\n\n78:                                               ; preds = %72\n  %79 = load i8, i8* %45, align 1, !tbaa !11\n  br label %95\n\n80:                                               ; preds = %72\n  %81 = load i8, i8* %45, align 1, !tbaa !11\n  br label %88\n\n82:                                               ; preds = %72\n  %83 = load i8, i8* %73, align 1, !tbaa !11\n  %84 = load i8, i8* %45, align 1, !tbaa !11\n  %85 = icmp eq i8 %83, %84\n  br i1 %85, label %106, label %86\n\n86:                                               ; preds = %82\n  %87 = getelementptr inbounds i8, i8* %73, i64 1\n  br label %88\n\n88:                                               ; preds = %86, %80\n  %89 = phi i8 [ %81, %80 ], [ %84, %86 ]\n  %90 = phi i8* [ %73, %80 ], [ %87, %86 ]\n  %91 = load i8, i8* %90, align 1, !tbaa !11\n  %92 = icmp eq i8 %91, %89\n  br i1 %92, label %106, label %93\n\n93:                                               ; preds = %88\n  %94 = getelementptr inbounds i8, i8* %90, i64 1\n  br label %95\n\n95:                                               ; preds = %93, %78\n  %96 = phi i8 [ %79, %78 ], [ %89, %93 ]\n  %97 = phi i8* [ %73, %78 ], [ %94, %93 ]\n  %98 = load i8, i8* %97, align 1, !tbaa !11\n  %99 = icmp eq i8 %98, %96\n  br i1 %99, label %106, label %110\n\n100:                                              ; preds = %64\n  %101 = getelementptr inbounds i8, i8* %53, i64 3\n  br label %106\n\n102:                                              ; preds = %60\n  %103 = getelementptr inbounds i8, i8* %53, i64 2\n  br label %106\n\n104:                                              ; preds = %56\n  %105 = getelementptr inbounds i8, i8* %53, i64 1\n  br label %106\n\n106:                                              ; preds = %51, %100, %102, %104, %95, %88, %82\n  %107 = phi i8 [ %83, %82 ], [ %89, %88 ], [ %96, %95 ], [ %50, %104 ], [ %50, %102 ], [ %50, %100 ], [ %50, %51 ]\n  %108 = phi i8* [ %73, %82 ], [ %90, %88 ], [ %97, %95 ], [ %105, %104 ], [ %103, %102 ], [ %101, %100 ], [ %53, %51 ]\n  %109 = icmp eq i8* %108, %43\n  br i1 %109, label %110, label %174\n\n110:                                              ; preds = %76, %95, %106\n  %111 = phi i8 [ %77, %76 ], [ %96, %95 ], [ %107, %106 ]\n  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %20) #6\n  call void @llvm.experimental.noalias.scope.decl(metadata !15)\n  store %union.anon* %21, %union.anon** %22, align 8, !tbaa !3, !alias.scope !15\n  %112 = load i8*, i8** %9, align 8, !tbaa !12, !noalias !15\n  %113 = load i64, i64* %10, align 8, !tbaa !8, !noalias !15\n  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %23) #6, !noalias !15\n  store i64 %113, i64* %3, align 8, !tbaa !18, !noalias !15\n  %114 = icmp ugt i64 %113, 15\n  br i1 %114, label %115, label %119\n\n115:                                              ; preds = %110\n  %116 = invoke i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %5, i64* nonnull align 8 dereferenceable(8) %3, i64 0)\n          to label %117 unwind label %168\n\n117:                                              ; preds = %115\n  store i8* %116, i8** %25, align 8, !tbaa !12, !alias.scope !15\n  %118 = load i64, i64* %3, align 8, !tbaa !18, !noalias !15\n  store i64 %118, i64* %26, align 8, !tbaa !11, !alias.scope !15\n  br label %119\n\n119:                                              ; preds = %110, %117\n  %120 = phi i8* [ %116, %117 ], [ %24, %110 ]\n  switch i64 %113, label %123 [\n    i64 1, label %121\n    i64 0, label %124\n  ]\n\n121:                                              ; preds = %119\n  %122 = load i8, i8* %112, align 1, !tbaa !11\n  store i8 %122, i8* %120, align 1, !tbaa !11\n  br label %124\n\n123:                                              ; preds = %119\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %120, i8* align 1 %112, i64 %113, i1 false) #6\n  br label %124\n\n124:                                              ; preds = %123, %121, %119\n  %125 = load i64, i64* %3, align 8, !tbaa !18, !noalias !15\n  store i64 %125, i64* %27, align 8, !tbaa !8, !alias.scope !15\n  %126 = load i8*, i8** %25, align 8, !tbaa !12, !alias.scope !15\n  %127 = getelementptr inbounds i8, i8* %126, i64 %125\n  store i8 0, i8* %127, align 1, !tbaa !11\n  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %23) #6, !noalias !15\n  %128 = load i64, i64* %27, align 8, !tbaa !8, !alias.scope !15\n  %129 = invoke nonnull align 8 dereferenceable(32) %\"class.std::__cxx11::basic_string\"* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEmmmc(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %5, i64 %128, i64 0, i64 1, i8 signext %111)\n          to label %135 unwind label %130\n\n130:                                              ; preds = %124\n  %131 = landingpad { i8*, i32 }\n          cleanup\n  %132 = load i8*, i8** %25, align 8, !tbaa !12, !alias.scope !15\n  %133 = icmp eq i8* %132, %24\n  br i1 %133, label %170, label %134\n\n134:                                              ; preds = %130\n  call void @_ZdlPv(i8* %132) #6\n  br label %170\n\n135:                                              ; preds = %124\n  %136 = load i8*, i8** %25, align 8, !tbaa !12\n  %137 = icmp eq i8* %136, %24\n  br i1 %137, label %138, label %152\n\n138:                                              ; preds = %135\n  %139 = load i64, i64* %27, align 8, !tbaa !8\n  %140 = icmp eq i64 %139, 0\n  br i1 %140, label %147, label %141\n\n141:                                              ; preds = %138\n  %142 = load i8*, i8** %9, align 8, !tbaa !12\n  %143 = icmp eq i64 %139, 1\n  br i1 %143, label %144, label %146\n\n144:                                              ; preds = %141\n  %145 = load i8, i8* %24, align 8, !tbaa !11\n  store i8 %145, i8* %142, align 1, !tbaa !11\n  br label %147\n\n146:                                              ; preds = %141\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %142, i8* nonnull align 8 %24, i64 %139, i1 false) #6\n  br label %147\n\n147:                                              ; preds = %146, %144, %138\n  %148 = load i64, i64* %27, align 8, !tbaa !8\n  store i64 %148, i64* %10, align 8, !tbaa !8\n  %149 = load i8*, i8** %9, align 8, !tbaa !12\n  %150 = getelementptr inbounds i8, i8* %149, i64 %148\n  store i8 0, i8* %150, align 1, !tbaa !11\n  %151 = load i8*, i8** %25, align 8, !tbaa !12\n  br label %161\n\n152:                                              ; preds = %135\n  %153 = load i8*, i8** %9, align 8, !tbaa !12\n  %154 = icmp eq i8* %153, %8\n  %155 = load i64, i64* %28, align 8\n  store i8* %136, i8** %9, align 8, !tbaa !12\n  %156 = load <2 x i64>, <2 x i64>* %32, align 8, !tbaa !11\n  store <2 x i64> %156, <2 x i64>* %33, align 8, !tbaa !11\n  %157 = icmp eq i8* %153, null\n  %158 = or i1 %154, %157\n  br i1 %158, label %160, label %159\n\n159:                                              ; preds = %152\n  store i8* %153, i8** %25, align 8, !tbaa !12\n  store i64 %155, i64* %26, align 8, !tbaa !11\n  br label %161\n\n160:                                              ; preds = %152\n  store %union.anon* %21, %union.anon** %22, align 8, !tbaa !12\n  br label %161\n\n161:                                              ; preds = %147, %159, %160\n  %162 = phi i8* [ %151, %147 ], [ %153, %159 ], [ %24, %160 ]\n  store i64 0, i64* %27, align 8, !tbaa !8\n  store i8 0, i8* %162, align 1, !tbaa !11\n  %163 = load i8*, i8** %25, align 8, !tbaa !12\n  %164 = icmp eq i8* %163, %24\n  br i1 %164, label %166, label %165\n\n165:                                              ; preds = %161\n  call void @_ZdlPv(i8* %163) #6\n  br label %166\n\n166:                                              ; preds = %161, %165\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %20) #6\n  %167 = load i64, i64* %18, align 8, !tbaa !8\n  br label %174\n\n168:                                              ; preds = %115\n  %169 = landingpad { i8*, i32 }\n          cleanup\n  br label %170\n\n170:                                              ; preds = %130, %134, %168\n  %171 = phi { i8*, i32 } [ %169, %168 ], [ %131, %134 ], [ %131, %130 ]\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %20) #6\n  %172 = load i8*, i8** %15, align 8, !tbaa !12\n  %173 = icmp eq i8* %172, %14\n  br i1 %173, label %182, label %181\n\n174:                                              ; preds = %106, %166\n  %175 = phi i64 [ %39, %106 ], [ %167, %166 ]\n  %176 = add nuw i64 %42, 1\n  %177 = icmp ugt i64 %175, %176\n  %178 = load i8*, i8** %15, align 8, !tbaa !12\n  br i1 %177, label %179, label %34, !llvm.loop !19\n\n179:                                              ; preds = %174\n  %180 = load i64, i64* %16, align 8, !tbaa !8\n  br label %38\n\n181:                                              ; preds = %170\n  call void @_ZdlPv(i8* %172) #6\n  br label %182\n\n182:                                              ; preds = %181, %170\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %11) #6\n  %183 = load i8*, i8** %9, align 8, !tbaa !12\n  %184 = icmp eq i8* %183, %8\n  br i1 %184, label %186, label %185\n\n185:                                              ; preds = %182\n  call void @_ZdlPv(i8* %183) #6\n  br label %186\n\n186:                                              ; preds = %185, %182\n  resume { i8*, i32 } %171\n}\n\n; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn\ndeclare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1\n\ndeclare dso_local i32 @__gxx_personality_v0(...)\n\n; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn\ndeclare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1\n\n; Function Attrs: nobuiltin nounwind\ndeclare dso_local void @_ZdlPv(i8*) local_unnamed_addr #2\n\ndeclare dso_local i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32), i64* nonnull align 8 dereferenceable(8), i64) local_unnamed_addr #3\n\n; Function Attrs: argmemonly mustprogress nofree nounwind willreturn\ndeclare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #4\n\ndeclare dso_local nonnull align 8 dereferenceable(32) %\"class.std::__cxx11::basic_string\"* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEmmmc(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32), i64, i64, i64, i8 signext) local_unnamed_addr #3\n\n; Function Attrs: inaccessiblememonly nofree nosync nounwind willreturn\ndeclare void @llvm.experimental.noalias.scope.decl(metadata) #5\n\nattributes #0 = { uwtable \"frame-pointer\"=\"none\" \"min-legal-vector-width\"=\"0\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #1 = { argmemonly mustprogress nofree nosync nounwind willreturn }\nattributes #2 = { nobuiltin nounwind \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #3 = { \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #4 = { argmemonly mustprogress nofree nounwind willreturn }\nattributes #5 = { inaccessiblememonly nofree nosync nounwind willreturn }\nattributes #6 = { nounwind }\n\n!llvm.module.flags = !{!0, !1}\n!llvm.ident = !{!2}\n\n!0 = !{i32 1, !\"wchar_size\", i32 4}\n!1 = !{i32 7, !\"uwtable\", i32 1}\n!2 = !{!\"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)\"}\n!3 = !{!4, !5, i64 0}\n!4 = !{!\"_ZTSNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderE\", !5, i64 0}\n!5 = !{!\"any pointer\", !6, i64 0}\n!6 = !{!\"omnipotent char\", !7, i64 0}\n!7 = !{!\"Simple C++ TBAA\"}\n!8 = !{!9, !10, i64 8}\n!9 = !{!\"_ZTSNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE\", !4, i64 0, !10, i64 8, !6, i64 16}\n!10 = !{!\"long\", !6, i64 0}\n!11 = !{!6, !6, i64 0}\n!12 = !{!9, !5, i64 0}\n!13 = distinct !{!13, !14}\n!14 = !{!\"llvm.loop.mustprogress\"}\n!15 = !{!16}\n!16 = distinct !{!16, !17, !\"_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_S5_: argument 0\"}\n!17 = distinct !{!17, !\"_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_S5_\"}\n!18 = !{!10, !10, i64 0}\n!19 = distinct !{!19, !14}\n", "target": "This is the targeted source code:\n/*\nremove_vowels is a function that takes string and returns string without vowels.\n>>> remove_vowels(\"\")\n\"\"\n>>> remove_vowels(\"abcdef\\nghijklm\")\n\"bcdf\\nghjklm\"\n>>> remove_vowels(\"abcdef\")\n\"bcdf\"\n>>> remove_vowels(\"aaaaa\")\n\"\"\n>>> remove_vowels(\"aaBAA\")\n\"B\"\n>>> remove_vowels(\"zbcd\")\n\"zbcd\"\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nstring remove_vowels(string text){\n\n    string out=\"\";\n    string vowels=\"AEIOUaeiou\";\n    for (int i=0;i<text.length();i++)\n        if (find(vowels.begin(),vowels.end(),text[i])==vowels.end())\n            out=out+text[i];\n    return out;\n\n}\n"}
{"input": "Convert this to C++:\n; ModuleID = '../../Human_xBenchmarks_164/CPP_52/CPP_52.cpp'\nsource_filename = \"../../Human_xBenchmarks_164/CPP_52/CPP_52.cpp\"\ntarget datalayout = \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\ntarget triple = \"x86_64-unknown-linux-gnu\"\n\n%\"class.std::vector\" = type { %\"struct.std::_Vector_base\" }\n%\"struct.std::_Vector_base\" = type { %\"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl\" }\n%\"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl\" = type { %\"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl_data\" }\n%\"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl_data\" = type { i32*, i32*, i32* }\n\n; Function Attrs: mustprogress nofree norecurse nosync nounwind readonly uwtable willreturn\ndefine dso_local zeroext i1 @_Z15below_thresholdSt6vectorIiSaIiEEi(%\"class.std::vector\"* nocapture readonly %0, i32 %1) local_unnamed_addr #0 {\n  %3 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0, i64 0, i32 0, i32 0, i32 0, i32 1\n  %4 = load i32*, i32** %3, align 8, !tbaa !3\n  %5 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0, i64 0, i32 0, i32 0, i32 0, i32 0\n  %6 = load i32*, i32** %5, align 8, !tbaa !8\n  %7 = ptrtoint i32* %4 to i64\n  %8 = ptrtoint i32* %6 to i64\n  %9 = sub i64 %7, %8\n  %10 = ashr exact i64 %9, 2\n  %11 = icmp eq i64 %9, 0\n  br i1 %11, label %26, label %12\n\n12:                                               ; preds = %2\n  %13 = call i64 @llvm.umax.i64(i64 %10, i64 1)\n  %14 = load i32, i32* %6, align 4, !tbaa !9\n  %15 = icmp slt i32 %14, %1\n  br i1 %15, label %16, label %26\n\n16:                                               ; preds = %12, %19\n  %17 = phi i64 [ %23, %19 ], [ 1, %12 ]\n  %18 = icmp eq i64 %17, %13\n  br i1 %18, label %24, label %19, !llvm.loop !11\n\n19:                                               ; preds = %16\n  %20 = getelementptr inbounds i32, i32* %6, i64 %17\n  %21 = load i32, i32* %20, align 4, !tbaa !9\n  %22 = icmp slt i32 %21, %1\n  %23 = add nuw i64 %17, 1\n  br i1 %22, label %16, label %24, !llvm.loop !11\n\n24:                                               ; preds = %19, %16\n  %25 = icmp ule i64 %10, %17\n  br label %26\n\n26:                                               ; preds = %24, %12, %2\n  %27 = phi i1 [ true, %2 ], [ false, %12 ], [ %25, %24 ]\n  ret i1 %27\n}\n\n; Function Attrs: nofree nosync nounwind readnone speculatable willreturn\ndeclare i64 @llvm.umax.i64(i64, i64) #1\n\nattributes #0 = { mustprogress nofree norecurse nosync nounwind readonly uwtable willreturn \"frame-pointer\"=\"none\" \"min-legal-vector-width\"=\"0\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #1 = { nofree nosync nounwind readnone speculatable willreturn }\n\n!llvm.module.flags = !{!0, !1}\n!llvm.ident = !{!2}\n\n!0 = !{i32 1, !\"wchar_size\", i32 4}\n!1 = !{i32 7, !\"uwtable\", i32 1}\n!2 = !{!\"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)\"}\n!3 = !{!4, !5, i64 8}\n!4 = !{!\"_ZTSNSt12_Vector_baseIiSaIiEE17_Vector_impl_dataE\", !5, i64 0, !5, i64 8, !5, i64 16}\n!5 = !{!\"any pointer\", !6, i64 0}\n!6 = !{!\"omnipotent char\", !7, i64 0}\n!7 = !{!\"Simple C++ TBAA\"}\n!8 = !{!4, !5, i64 0}\n!9 = !{!10, !10, i64 0}\n!10 = !{!\"int\", !6, i64 0}\n!11 = distinct !{!11, !12}\n!12 = !{!\"llvm.loop.mustprogress\"}\n", "target": "This is the targeted source code:\n/*\nReturn true if all numbers in the vector l are below threshold t.\n>>> below_threshold({1, 2, 4, 10}, 100)\ntrue\n>>> below_threshold({1, 20, 4, 10}, 5)\nfalse\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool below_threshold(vector<int>l, int t){\n\n    for (int i=0;i<l.size();i++)\n        if (l[i]>=t) return false;\n    return true;\n}\n"}
{"input": "Convert this to C++:\n; ModuleID = '../../Human_xBenchmarks_164/CPP_53/CPP_53.cpp'\nsource_filename = \"../../Human_xBenchmarks_164/CPP_53/CPP_53.cpp\"\ntarget datalayout = \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\ntarget triple = \"x86_64-unknown-linux-gnu\"\n\n; Function Attrs: mustprogress nofree norecurse nosync nounwind readnone uwtable willreturn\ndefine dso_local i32 @_Z3addii(i32 %0, i32 %1) local_unnamed_addr #0 {\n  %3 = add nsw i32 %1, %0\n  ret i32 %3\n}\n\nattributes #0 = { mustprogress nofree norecurse nosync nounwind readnone uwtable willreturn \"frame-pointer\"=\"none\" \"min-legal-vector-width\"=\"0\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\n\n!llvm.module.flags = !{!0, !1}\n!llvm.ident = !{!2}\n\n!0 = !{i32 1, !\"wchar_size\", i32 4}\n!1 = !{i32 7, !\"uwtable\", i32 1}\n!2 = !{!\"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)\"}\n", "target": "This is the targeted source code:\n/*\nAdd two numbers x and y\n>>> add(2, 3)\n5\n>>> add(5, 7)\n12\n*/\n#include<stdio.h>\n#include<stdlib.h>\nusing namespace std;\nint add(int x,int y){\n\n    return x+y;\n}\n"}
{"input": "Convert this to C++:\n; ModuleID = '../../Human_xBenchmarks_164/CPP_54/CPP_54.cpp'\nsource_filename = \"../../Human_xBenchmarks_164/CPP_54/CPP_54.cpp\"\ntarget datalayout = \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\ntarget triple = \"x86_64-unknown-linux-gnu\"\n\n%\"class.std::__cxx11::basic_string\" = type { %\"struct.std::__cxx11::basic_string<char>::_Alloc_hider\", i64, %union.anon }\n%\"struct.std::__cxx11::basic_string<char>::_Alloc_hider\" = type { i8* }\n%union.anon = type { i64, [8 x i8] }\n\n; Function Attrs: nofree nosync nounwind readonly uwtable\ndefine dso_local zeroext i1 @_Z10same_charsNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES4_(%\"class.std::__cxx11::basic_string\"* nocapture readonly %0, %\"class.std::__cxx11::basic_string\"* nocapture readonly %1) local_unnamed_addr #0 personality i32 (...)* @__gxx_personality_v0 {\n  %3 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 1\n  %4 = load i64, i64* %3, align 8, !tbaa !3\n  %5 = icmp eq i64 %4, 0\n  br i1 %5, label %6, label %9\n\n6:                                                ; preds = %2\n  %7 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %1, i64 0, i32 1\n  %8 = load i64, i64* %7, align 8, !tbaa !3\n  br label %118\n\n9:                                                ; preds = %2\n  %10 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 0, i32 0\n  %11 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %1, i64 0, i32 1\n  %12 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %1, i64 0, i32 0, i32 0\n  %13 = load i8*, i8** %12, align 8, !tbaa !10\n  %14 = load i64, i64* %11, align 8, !tbaa !3\n  %15 = getelementptr inbounds i8, i8* %13, i64 %14\n  %16 = load i8*, i8** %10, align 8, !tbaa !10\n  %17 = ptrtoint i8* %15 to i64\n  %18 = icmp sgt i64 %14, 3\n  %19 = lshr i64 %14, 2\n  br i1 %18, label %20, label %75\n\n20:                                               ; preds = %9, %24\n  %21 = phi i64 [ %71, %24 ], [ 0, %9 ]\n  %22 = getelementptr inbounds i8, i8* %16, i64 %21\n  %23 = load i8, i8* %22, align 1, !tbaa !11\n  br label %26\n\n24:                                               ; preds = %68\n  %25 = icmp eq i64 %71, %4\n  br i1 %25, label %118, label %20, !llvm.loop !12\n\n26:                                               ; preds = %43, %20\n  %27 = phi i64 [ %19, %20 ], [ %45, %43 ]\n  %28 = phi i8* [ %13, %20 ], [ %44, %43 ]\n  %29 = load i8, i8* %28, align 1, !tbaa !11\n  %30 = icmp eq i8 %29, %23\n  br i1 %30, label %68, label %31\n\n31:                                               ; preds = %26\n  %32 = getelementptr inbounds i8, i8* %28, i64 1\n  %33 = load i8, i8* %32, align 1, !tbaa !11\n  %34 = icmp eq i8 %33, %23\n  br i1 %34, label %62, label %35\n\n35:                                               ; preds = %31\n  %36 = getelementptr inbounds i8, i8* %28, i64 2\n  %37 = load i8, i8* %36, align 1, !tbaa !11\n  %38 = icmp eq i8 %37, %23\n  br i1 %38, label %64, label %39\n\n39:                                               ; preds = %35\n  %40 = getelementptr inbounds i8, i8* %28, i64 3\n  %41 = load i8, i8* %40, align 1, !tbaa !11\n  %42 = icmp eq i8 %41, %23\n  br i1 %42, label %66, label %43\n\n43:                                               ; preds = %39\n  %44 = getelementptr inbounds i8, i8* %28, i64 4\n  %45 = add nsw i64 %27, -1\n  %46 = icmp sgt i64 %27, 1\n  br i1 %46, label %26, label %72, !llvm.loop !14\n\n47:                                               ; preds = %72\n  %48 = load i8, i8* %44, align 1, !tbaa !11\n  %49 = icmp eq i8 %48, %23\n  br i1 %49, label %68, label %50\n\n50:                                               ; preds = %47\n  %51 = getelementptr inbounds i8, i8* %28, i64 5\n  br label %52\n\n52:                                               ; preds = %72, %50\n  %53 = phi i8* [ %51, %50 ], [ %44, %72 ]\n  %54 = load i8, i8* %53, align 1, !tbaa !11\n  %55 = icmp eq i8 %54, %23\n  br i1 %55, label %68, label %56\n\n56:                                               ; preds = %52\n  %57 = getelementptr inbounds i8, i8* %53, i64 1\n  br label %58\n\n58:                                               ; preds = %72, %56\n  %59 = phi i8* [ %57, %56 ], [ %44, %72 ]\n  %60 = load i8, i8* %59, align 1, !tbaa !11\n  %61 = icmp eq i8 %60, %23\n  br i1 %61, label %68, label %232\n\n62:                                               ; preds = %31\n  %63 = getelementptr inbounds i8, i8* %28, i64 1\n  br label %68\n\n64:                                               ; preds = %35\n  %65 = getelementptr inbounds i8, i8* %28, i64 2\n  br label %68\n\n66:                                               ; preds = %39\n  %67 = getelementptr inbounds i8, i8* %28, i64 3\n  br label %68\n\n68:                                               ; preds = %26, %62, %64, %66, %58, %52, %47\n  %69 = phi i8* [ %44, %47 ], [ %53, %52 ], [ %59, %58 ], [ %63, %62 ], [ %65, %64 ], [ %67, %66 ], [ %28, %26 ]\n  %70 = icmp eq i8* %69, %15\n  %71 = add nuw i64 %21, 1\n  br i1 %70, label %232, label %24\n\n72:                                               ; preds = %43\n  %73 = ptrtoint i8* %44 to i64\n  %74 = sub i64 %17, %73\n  switch i64 %74, label %232 [\n    i64 3, label %47\n    i64 2, label %52\n    i64 1, label %58\n  ]\n\n75:                                               ; preds = %9\n  %76 = getelementptr inbounds i8, i8* %13, i64 1\n  %77 = add i64 %14, -1\n  %78 = icmp ult i64 %77, 3\n  br i1 %78, label %79, label %232\n\n79:                                               ; preds = %75\n  switch i64 %14, label %116 [\n    i64 3, label %80\n    i64 2, label %100\n  ]\n\n80:                                               ; preds = %79\n  %81 = load i8, i8* %13, align 1, !tbaa !11\n  %82 = getelementptr inbounds i8, i8* %13, i64 2\n  br label %83\n\n83:                                               ; preds = %88, %80\n  %84 = phi i64 [ %99, %88 ], [ 0, %80 ]\n  %85 = getelementptr inbounds i8, i8* %16, i64 %84\n  %86 = load i8, i8* %85, align 1, !tbaa !11\n  %87 = icmp eq i8 %81, %86\n  br i1 %87, label %96, label %90\n\n88:                                               ; preds = %96\n  %89 = icmp eq i64 %99, %4\n  br i1 %89, label %121, label %83, !llvm.loop !12\n\n90:                                               ; preds = %83\n  %91 = load i8, i8* %76, align 1, !tbaa !11\n  %92 = icmp eq i8 %91, %86\n  br i1 %92, label %96, label %93\n\n93:                                               ; preds = %90\n  %94 = load i8, i8* %82, align 1, !tbaa !11\n  %95 = icmp eq i8 %94, %86\n  br i1 %95, label %96, label %232\n\n96:                                               ; preds = %93, %90, %83\n  %97 = phi i8* [ %13, %83 ], [ %76, %90 ], [ %82, %93 ]\n  %98 = icmp eq i8* %97, %15\n  %99 = add nuw i64 %84, 1\n  br i1 %98, label %232, label %88\n\n100:                                              ; preds = %79\n  %101 = load i8, i8* %13, align 1, !tbaa !11\n  br label %102\n\n102:                                              ; preds = %107, %100\n  %103 = phi i64 [ %115, %107 ], [ 0, %100 ]\n  %104 = getelementptr inbounds i8, i8* %16, i64 %103\n  %105 = load i8, i8* %104, align 1, !tbaa !11\n  %106 = icmp eq i8 %101, %105\n  br i1 %106, label %112, label %109\n\n107:                                              ; preds = %112\n  %108 = icmp eq i64 %115, %4\n  br i1 %108, label %121, label %102, !llvm.loop !12\n\n109:                                              ; preds = %102\n  %110 = load i8, i8* %76, align 1, !tbaa !11\n  %111 = icmp eq i8 %110, %105\n  br i1 %111, label %112, label %232\n\n112:                                              ; preds = %109, %102\n  %113 = phi i8* [ %13, %102 ], [ %76, %109 ]\n  %114 = icmp eq i8* %113, %15\n  %115 = add nuw i64 %103, 1\n  br i1 %114, label %232, label %107\n\n116:                                              ; preds = %79\n  %117 = load i8, i8* %13, align 1, !tbaa !11\n  br label %190\n\n118:                                              ; preds = %195, %24, %6\n  %119 = phi i64 [ %8, %6 ], [ %14, %24 ], [ %14, %195 ]\n  %120 = icmp eq i64 %119, 0\n  br i1 %120, label %229, label %121\n\n121:                                              ; preds = %107, %88, %118\n  %122 = phi i64 [ %119, %118 ], [ 3, %88 ], [ 2, %107 ]\n  %123 = lshr i64 %4, 2\n  %124 = icmp sgt i64 %4, 3\n  %125 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %1, i64 0, i32 0, i32 0\n  %126 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 0, i32 0\n  %127 = load i8*, i8** %126, align 8, !tbaa !10\n  %128 = getelementptr inbounds i8, i8* %127, i64 %4\n  %129 = load i8*, i8** %125, align 8, !tbaa !10\n  %130 = ptrtoint i8* %128 to i64\n  br i1 %124, label %131, label %188\n\n131:                                              ; preds = %121, %136\n  %132 = phi i64 [ %184, %136 ], [ 0, %121 ]\n  %133 = phi i1 [ %137, %136 ], [ true, %121 ]\n  %134 = getelementptr inbounds i8, i8* %129, i64 %132\n  %135 = load i8, i8* %134, align 1, !tbaa !11\n  br label %139\n\n136:                                              ; preds = %181\n  %137 = icmp ugt i64 %122, %184\n  %138 = icmp eq i64 %184, %122\n  br i1 %138, label %229, label %131, !llvm.loop !15\n\n139:                                              ; preds = %156, %131\n  %140 = phi i64 [ %123, %131 ], [ %158, %156 ]\n  %141 = phi i8* [ %127, %131 ], [ %157, %156 ]\n  %142 = load i8, i8* %141, align 1, !tbaa !11\n  %143 = icmp eq i8 %142, %135\n  br i1 %143, label %181, label %144\n\n144:                                              ; preds = %139\n  %145 = getelementptr inbounds i8, i8* %141, i64 1\n  %146 = load i8, i8* %145, align 1, !tbaa !11\n  %147 = icmp eq i8 %146, %135\n  br i1 %147, label %175, label %148\n\n148:                                              ; preds = %144\n  %149 = getelementptr inbounds i8, i8* %141, i64 2\n  %150 = load i8, i8* %149, align 1, !tbaa !11\n  %151 = icmp eq i8 %150, %135\n  br i1 %151, label %177, label %152\n\n152:                                              ; preds = %148\n  %153 = getelementptr inbounds i8, i8* %141, i64 3\n  %154 = load i8, i8* %153, align 1, !tbaa !11\n  %155 = icmp eq i8 %154, %135\n  br i1 %155, label %179, label %156\n\n156:                                              ; preds = %152\n  %157 = getelementptr inbounds i8, i8* %141, i64 4\n  %158 = add nsw i64 %140, -1\n  %159 = icmp sgt i64 %140, 1\n  br i1 %159, label %139, label %185, !llvm.loop !14\n\n160:                                              ; preds = %185\n  %161 = load i8, i8* %157, align 1, !tbaa !11\n  %162 = icmp eq i8 %161, %135\n  br i1 %162, label %181, label %163\n\n163:                                              ; preds = %160\n  %164 = getelementptr inbounds i8, i8* %141, i64 5\n  br label %165\n\n165:                                              ; preds = %185, %163\n  %166 = phi i8* [ %164, %163 ], [ %157, %185 ]\n  %167 = load i8, i8* %166, align 1, !tbaa !11\n  %168 = icmp eq i8 %167, %135\n  br i1 %168, label %181, label %169\n\n169:                                              ; preds = %165\n  %170 = getelementptr inbounds i8, i8* %166, i64 1\n  br label %171\n\n171:                                              ; preds = %185, %169\n  %172 = phi i8* [ %170, %169 ], [ %157, %185 ]\n  %173 = load i8, i8* %172, align 1, !tbaa !11\n  %174 = icmp eq i8 %173, %135\n  br i1 %174, label %181, label %229\n\n175:                                              ; preds = %144\n  %176 = getelementptr inbounds i8, i8* %141, i64 1\n  br label %181\n\n177:                                              ; preds = %148\n  %178 = getelementptr inbounds i8, i8* %141, i64 2\n  br label %181\n\n179:                                              ; preds = %152\n  %180 = getelementptr inbounds i8, i8* %141, i64 3\n  br label %181\n\n181:                                              ; preds = %139, %175, %177, %179, %171, %165, %160\n  %182 = phi i8* [ %157, %160 ], [ %166, %165 ], [ %172, %171 ], [ %176, %175 ], [ %178, %177 ], [ %180, %179 ], [ %141, %139 ]\n  %183 = icmp eq i8* %182, %128\n  %184 = add nuw i64 %132, 1\n  br i1 %183, label %229, label %136\n\n185:                                              ; preds = %156\n  %186 = ptrtoint i8* %157 to i64\n  %187 = sub i64 %130, %186\n  switch i64 %187, label %229 [\n    i64 3, label %160\n    i64 2, label %165\n    i64 1, label %171\n  ]\n\n188:                                              ; preds = %121\n  %189 = getelementptr inbounds i8, i8* %127, i64 1\n  br label %201\n\n190:                                              ; preds = %116, %195\n  %191 = phi i64 [ 0, %116 ], [ %196, %195 ]\n  %192 = getelementptr inbounds i8, i8* %16, i64 %191\n  %193 = load i8, i8* %192, align 1, !tbaa !11\n  %194 = icmp eq i8 %117, %193\n  br i1 %194, label %195, label %232\n\n195:                                              ; preds = %190\n  %196 = add nuw i64 %191, 1\n  %197 = icmp eq i64 %196, %4\n  br i1 %197, label %118, label %190, !llvm.loop !12\n\n198:                                              ; preds = %225\n  %199 = icmp ugt i64 %122, %228\n  %200 = icmp eq i64 %228, %122\n  br i1 %200, label %229, label %201, !llvm.loop !15\n\n201:                                              ; preds = %188, %198\n  %202 = phi i64 [ 0, %188 ], [ %228, %198 ]\n  %203 = phi i1 [ true, %188 ], [ %199, %198 ]\n  %204 = getelementptr inbounds i8, i8* %129, i64 %202\n  switch i64 %4, label %229 [\n    i64 3, label %209\n    i64 2, label %207\n    i64 1, label %205\n  ]\n\n205:                                              ; preds = %201\n  %206 = load i8, i8* %204, align 1, !tbaa !11\n  br label %220\n\n207:                                              ; preds = %201\n  %208 = load i8, i8* %204, align 1, !tbaa !11\n  br label %213\n\n209:                                              ; preds = %201\n  %210 = load i8, i8* %127, align 1, !tbaa !11\n  %211 = load i8, i8* %204, align 1, !tbaa !11\n  %212 = icmp eq i8 %210, %211\n  br i1 %212, label %225, label %213\n\n213:                                              ; preds = %209, %207\n  %214 = phi i8 [ %208, %207 ], [ %211, %209 ]\n  %215 = phi i8* [ %127, %207 ], [ %189, %209 ]\n  %216 = load i8, i8* %215, align 1, !tbaa !11\n  %217 = icmp eq i8 %216, %214\n  br i1 %217, label %225, label %218\n\n218:                                              ; preds = %213\n  %219 = getelementptr inbounds i8, i8* %215, i64 1\n  br label %220\n\n220:                                              ; preds = %218, %205\n  %221 = phi i8 [ %206, %205 ], [ %214, %218 ]\n  %222 = phi i8* [ %127, %205 ], [ %219, %218 ]\n  %223 = load i8, i8* %222, align 1, !tbaa !11\n  %224 = icmp eq i8 %223, %221\n  br i1 %224, label %225, label %229\n\n225:                                              ; preds = %209, %213, %220\n  %226 = phi i8* [ %127, %209 ], [ %215, %213 ], [ %222, %220 ]\n  %227 = icmp eq i8* %226, %128\n  %228 = add nuw i64 %202, 1\n  br i1 %227, label %229, label %198\n\n229:                                              ; preds = %198, %225, %201, %220, %136, %181, %185, %171, %118\n  %230 = phi i1 [ false, %118 ], [ %133, %171 ], [ %133, %185 ], [ %133, %181 ], [ %137, %136 ], [ %203, %220 ], [ true, %201 ], [ %203, %225 ], [ %199, %198 ]\n  %231 = xor i1 %230, true\n  br label %232\n\n232:                                              ; preds = %109, %112, %96, %93, %190, %68, %58, %72, %75, %229\n  %233 = phi i1 [ %231, %229 ], [ false, %75 ], [ false, %72 ], [ false, %58 ], [ false, %68 ], [ false, %190 ], [ false, %93 ], [ false, %96 ], [ false, %112 ], [ false, %109 ]\n  ret i1 %233\n}\n\ndeclare dso_local i32 @__gxx_personality_v0(...)\n\nattributes #0 = { nofree nosync nounwind readonly uwtable \"frame-pointer\"=\"none\" \"min-legal-vector-width\"=\"0\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\n\n!llvm.module.flags = !{!0, !1}\n!llvm.ident = !{!2}\n\n!0 = !{i32 1, !\"wchar_size\", i32 4}\n!1 = !{i32 7, !\"uwtable\", i32 1}\n!2 = !{!\"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)\"}\n!3 = !{!4, !9, i64 8}\n!4 = !{!\"_ZTSNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE\", !5, i64 0, !9, i64 8, !7, i64 16}\n!5 = !{!\"_ZTSNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderE\", !6, i64 0}\n!6 = !{!\"any pointer\", !7, i64 0}\n!7 = !{!\"omnipotent char\", !8, i64 0}\n!8 = !{!\"Simple C++ TBAA\"}\n!9 = !{!\"long\", !7, i64 0}\n!10 = !{!4, !6, i64 0}\n!11 = !{!7, !7, i64 0}\n!12 = distinct !{!12, !13}\n!13 = !{!\"llvm.loop.mustprogress\"}\n!14 = distinct !{!14, !13}\n!15 = distinct !{!15, !13}\n", "target": "This is the targeted source code:\n/*\nCheck if two words have the same characters.\n>>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\ntrue\n>>> same_chars(\"abcd\", \"dddddddabc\")\ntrue\n>>> same_chars(\"dddddddabc\", \"abcd\")\ntrue\n>>> same_chars(\"eabcd\", \"dddddddabc\")\nfalse\n>>> same_chars(\"abcd\", \"dddddddabce\")\nfalse\n>>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\nfalse\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nbool same_chars(string s0,string s1){\n\n    for (int i=0;i<s0.length();i++)\n    if (find(s1.begin(),s1.end(),s0[i])==s1.end())\n        return false;\n    for (int i=0;i<s1.length();i++)\n    if (find(s0.begin(),s0.end(),s1[i])==s0.end())\n        return false;\n    return true;   \n}\n"}
{"input": "Convert this to C++:\n; ModuleID = '../../Human_xBenchmarks_164/CPP_55/CPP_55.cpp'\nsource_filename = \"../../Human_xBenchmarks_164/CPP_55/CPP_55.cpp\"\ntarget datalayout = \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\ntarget triple = \"x86_64-unknown-linux-gnu\"\n\n; Function Attrs: mustprogress nofree nosync nounwind readnone uwtable willreturn\ndefine dso_local i32 @_Z3fibi(i32 %0) local_unnamed_addr #0 {\n  %2 = alloca [1000 x i32], align 16\n  %3 = bitcast [1000 x i32]* %2 to i8*\n  call void @llvm.lifetime.start.p0i8(i64 4000, i8* nonnull %3) #2\n  %4 = getelementptr inbounds [1000 x i32], [1000 x i32]* %2, i64 0, i64 0\n  store i32 0, i32* %4, align 16, !tbaa !3\n  %5 = getelementptr inbounds [1000 x i32], [1000 x i32]* %2, i64 0, i64 1\n  store i32 1, i32* %5, align 4, !tbaa !3\n  %6 = icmp slt i32 %0, 2\n  br i1 %6, label %37, label %7\n\n7:                                                ; preds = %1\n  %8 = add nuw i32 %0, 1\n  %9 = zext i32 %8 to i64\n  %10 = getelementptr inbounds [1000 x i32], [1000 x i32]* %2, i64 0, i64 2\n  store i32 1, i32* %10, align 8, !tbaa !3\n  %11 = icmp eq i32 %8, 3\n  br i1 %11, label %37, label %12, !llvm.loop !7\n\n12:                                               ; preds = %7\n  %13 = add nsw i64 %9, -3\n  %14 = add nsw i64 %9, -4\n  %15 = and i64 %13, 3\n  %16 = icmp ult i64 %14, 3\n  br i1 %16, label %19, label %17\n\n17:                                               ; preds = %12\n  %18 = and i64 %13, -4\n  br label %41\n\n19:                                               ; preds = %41, %12\n  %20 = phi i64 [ 3, %12 ], [ %67, %41 ]\n  %21 = phi i32 [ 1, %12 ], [ %65, %41 ]\n  %22 = phi i64 [ 2, %12 ], [ %62, %41 ]\n  %23 = icmp eq i64 %15, 0\n  br i1 %23, label %37, label %24\n\n24:                                               ; preds = %19, %24\n  %25 = phi i64 [ %34, %24 ], [ %20, %19 ]\n  %26 = phi i32 [ %32, %24 ], [ %21, %19 ]\n  %27 = phi i64 [ %25, %24 ], [ %22, %19 ]\n  %28 = phi i64 [ %35, %24 ], [ %15, %19 ]\n  %29 = add nsw i64 %27, -1\n  %30 = getelementptr inbounds [1000 x i32], [1000 x i32]* %2, i64 0, i64 %29\n  %31 = load i32, i32* %30, align 4, !tbaa !3\n  %32 = add nsw i32 %31, %26\n  %33 = getelementptr inbounds [1000 x i32], [1000 x i32]* %2, i64 0, i64 %25\n  store i32 %32, i32* %33, align 4, !tbaa !3\n  %34 = add nuw nsw i64 %25, 1\n  %35 = add i64 %28, -1\n  %36 = icmp eq i64 %35, 0\n  br i1 %36, label %37, label %24, !llvm.loop !9\n\n37:                                               ; preds = %19, %24, %7, %1\n  %38 = sext i32 %0 to i64\n  %39 = getelementptr inbounds [1000 x i32], [1000 x i32]* %2, i64 0, i64 %38\n  %40 = load i32, i32* %39, align 4, !tbaa !3\n  call void @llvm.lifetime.end.p0i8(i64 4000, i8* nonnull %3) #2\n  ret i32 %40\n\n41:                                               ; preds = %41, %17\n  %42 = phi i64 [ 3, %17 ], [ %67, %41 ]\n  %43 = phi i32 [ 1, %17 ], [ %65, %41 ]\n  %44 = phi i64 [ 2, %17 ], [ %62, %41 ]\n  %45 = phi i64 [ %18, %17 ], [ %68, %41 ]\n  %46 = add nsw i64 %44, -1\n  %47 = getelementptr inbounds [1000 x i32], [1000 x i32]* %2, i64 0, i64 %46\n  %48 = load i32, i32* %47, align 4, !tbaa !3\n  %49 = add nsw i32 %48, %43\n  %50 = getelementptr inbounds [1000 x i32], [1000 x i32]* %2, i64 0, i64 %42\n  store i32 %49, i32* %50, align 4, !tbaa !3\n  %51 = add nuw nsw i64 %42, 1\n  %52 = add nsw i64 %42, -1\n  %53 = getelementptr inbounds [1000 x i32], [1000 x i32]* %2, i64 0, i64 %52\n  %54 = load i32, i32* %53, align 4, !tbaa !3\n  %55 = add nsw i32 %54, %49\n  %56 = getelementptr inbounds [1000 x i32], [1000 x i32]* %2, i64 0, i64 %51\n  store i32 %55, i32* %56, align 4, !tbaa !3\n  %57 = add nuw nsw i64 %42, 2\n  %58 = getelementptr inbounds [1000 x i32], [1000 x i32]* %2, i64 0, i64 %42\n  %59 = load i32, i32* %58, align 4, !tbaa !3\n  %60 = add nsw i32 %59, %55\n  %61 = getelementptr inbounds [1000 x i32], [1000 x i32]* %2, i64 0, i64 %57\n  store i32 %60, i32* %61, align 4, !tbaa !3\n  %62 = add nuw nsw i64 %42, 3\n  %63 = getelementptr inbounds [1000 x i32], [1000 x i32]* %2, i64 0, i64 %51\n  %64 = load i32, i32* %63, align 4, !tbaa !3\n  %65 = add nsw i32 %64, %60\n  %66 = getelementptr inbounds [1000 x i32], [1000 x i32]* %2, i64 0, i64 %62\n  store i32 %65, i32* %66, align 4, !tbaa !3\n  %67 = add nuw nsw i64 %42, 4\n  %68 = add i64 %45, -4\n  %69 = icmp eq i64 %68, 0\n  br i1 %69, label %19, label %41, !llvm.loop !7\n}\n\n; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn\ndeclare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1\n\n; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn\ndeclare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1\n\nattributes #0 = { mustprogress nofree nosync nounwind readnone uwtable willreturn \"frame-pointer\"=\"none\" \"min-legal-vector-width\"=\"0\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #1 = { argmemonly mustprogress nofree nosync nounwind willreturn }\nattributes #2 = { nounwind }\n\n!llvm.module.flags = !{!0, !1}\n!llvm.ident = !{!2}\n\n!0 = !{i32 1, !\"wchar_size\", i32 4}\n!1 = !{i32 7, !\"uwtable\", i32 1}\n!2 = !{!\"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)\"}\n!3 = !{!4, !4, i64 0}\n!4 = !{!\"int\", !5, i64 0}\n!5 = !{!\"omnipotent char\", !6, i64 0}\n!6 = !{!\"Simple C++ TBAA\"}\n!7 = distinct !{!7, !8}\n!8 = !{!\"llvm.loop.mustprogress\"}\n!9 = distinct !{!9, !10}\n!10 = !{!\"llvm.loop.unroll.disable\"}\n", "target": "This is the targeted source code:\n/*\nReturn n-th Fibonacci number.\n>>> fib(10)\n55\n>>> fib(1)\n1\n>>> fib(8)\n21\n*/\n#include<stdio.h>\nusing namespace std;\nint fib(int n){\n\n    int f[1000];\n    f[0]=0;f[1]=1;\n    for (int i=2;i<=n; i++)\n    f[i]=f[i-1]+f[i-2];\n    return f[n];\n}\n"}
{"input": "Convert this to C++:\n; ModuleID = '../../Human_xBenchmarks_164/CPP_56/CPP_56.cpp'\nsource_filename = \"../../Human_xBenchmarks_164/CPP_56/CPP_56.cpp\"\ntarget datalayout = \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\ntarget triple = \"x86_64-unknown-linux-gnu\"\n\n%\"class.std::__cxx11::basic_string\" = type { %\"struct.std::__cxx11::basic_string<char>::_Alloc_hider\", i64, %union.anon }\n%\"struct.std::__cxx11::basic_string<char>::_Alloc_hider\" = type { i8* }\n%union.anon = type { i64, [8 x i8] }\n\n; Function Attrs: mustprogress nofree norecurse nosync nounwind readonly uwtable willreturn\ndefine dso_local zeroext i1 @_Z18correct_bracketingNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE(%\"class.std::__cxx11::basic_string\"* nocapture readonly %0) local_unnamed_addr #0 {\n  %2 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 1\n  %3 = load i64, i64* %2, align 8, !tbaa !3\n  %4 = icmp eq i64 %3, 0\n  br i1 %4, label %25, label %5\n\n5:                                                ; preds = %1\n  %6 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 0, i32 0\n  %7 = load i8*, i8** %6, align 8, !tbaa !10\n  br label %10\n\n8:                                                ; preds = %10\n  %9 = icmp eq i64 %22, %3\n  br i1 %9, label %23, label %10, !llvm.loop !11\n\n10:                                               ; preds = %5, %8\n  %11 = phi i64 [ 0, %5 ], [ %22, %8 ]\n  %12 = phi i32 [ 0, %5 ], [ %20, %8 ]\n  %13 = getelementptr inbounds i8, i8* %7, i64 %11\n  %14 = load i8, i8* %13, align 1, !tbaa !13\n  %15 = icmp eq i8 %14, 60\n  %16 = zext i1 %15 to i32\n  %17 = add nuw nsw i32 %12, %16\n  %18 = icmp eq i8 %14, 62\n  %19 = sext i1 %18 to i32\n  %20 = add nsw i32 %17, %19\n  %21 = icmp slt i32 %20, 0\n  %22 = add nuw i64 %11, 1\n  br i1 %21, label %25, label %8\n\n23:                                               ; preds = %8\n  %24 = icmp eq i32 %20, 0\n  br label %25\n\n25:                                               ; preds = %10, %1, %23\n  %26 = phi i1 [ true, %1 ], [ %24, %23 ], [ false, %10 ]\n  ret i1 %26\n}\n\nattributes #0 = { mustprogress nofree norecurse nosync nounwind readonly uwtable willreturn \"frame-pointer\"=\"none\" \"min-legal-vector-width\"=\"0\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\n\n!llvm.module.flags = !{!0, !1}\n!llvm.ident = !{!2}\n\n!0 = !{i32 1, !\"wchar_size\", i32 4}\n!1 = !{i32 7, !\"uwtable\", i32 1}\n!2 = !{!\"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)\"}\n!3 = !{!4, !9, i64 8}\n!4 = !{!\"_ZTSNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE\", !5, i64 0, !9, i64 8, !7, i64 16}\n!5 = !{!\"_ZTSNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderE\", !6, i64 0}\n!6 = !{!\"any pointer\", !7, i64 0}\n!7 = !{!\"omnipotent char\", !8, i64 0}\n!8 = !{!\"Simple C++ TBAA\"}\n!9 = !{!\"long\", !7, i64 0}\n!10 = !{!4, !6, i64 0}\n!11 = distinct !{!11, !12}\n!12 = !{!\"llvm.loop.mustprogress\"}\n!13 = !{!7, !7, i64 0}\n", "target": "This is the targeted source code:\n/*\nbrackets is a string of '<' and '>'.\nreturn true if every opening bracket has a corresponding closing bracket.\n\n>>> correct_bracketing(\"<\")\nfalse\n>>> correct_bracketing(\"<>\")\ntrue\n>>> correct_bracketing(\"<<><>>\")\ntrue\n>>> correct_bracketing(\"><<>\")\nfalse\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool correct_bracketing(string brackets){\n\n    int level=0;\n    for (int i=0;i<brackets.length();i++)\n    {\n        if (brackets[i]=='<') level+=1;\n        if (brackets[i]=='>') level-=1;\n        if (level<0) return false;\n    }\n    if (level!=0) return false;\n    return true;\n}\n"}
{"input": "Convert this to C++:\n; ModuleID = '../../Human_xBenchmarks_164/CPP_57/CPP_57.cpp'\nsource_filename = \"../../Human_xBenchmarks_164/CPP_57/CPP_57.cpp\"\ntarget datalayout = \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\ntarget triple = \"x86_64-unknown-linux-gnu\"\n\n%\"class.std::vector\" = type { %\"struct.std::_Vector_base\" }\n%\"struct.std::_Vector_base\" = type { %\"struct.std::_Vector_base<float, std::allocator<float>>::_Vector_impl\" }\n%\"struct.std::_Vector_base<float, std::allocator<float>>::_Vector_impl\" = type { %\"struct.std::_Vector_base<float, std::allocator<float>>::_Vector_impl_data\" }\n%\"struct.std::_Vector_base<float, std::allocator<float>>::_Vector_impl_data\" = type { float*, float*, float* }\n\n; Function Attrs: mustprogress nofree norecurse nosync nounwind readonly uwtable willreturn\ndefine dso_local zeroext i1 @_Z9monotonicSt6vectorIfSaIfEE(%\"class.std::vector\"* nocapture readonly %0) local_unnamed_addr #0 {\n  %2 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0, i64 0, i32 0, i32 0, i32 0, i32 1\n  %3 = load float*, float** %2, align 8, !tbaa !3\n  %4 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0, i64 0, i32 0, i32 0, i32 0, i32 0\n  %5 = load float*, float** %4, align 8, !tbaa !8\n  %6 = ptrtoint float* %3 to i64\n  %7 = ptrtoint float* %5 to i64\n  %8 = sub i64 %6, %7\n  %9 = ashr exact i64 %8, 2\n  %10 = icmp ugt i64 %9, 1\n  br i1 %10, label %11, label %42\n\n11:                                               ; preds = %1\n  %12 = load float, float* %5, align 4, !tbaa !9\n  %13 = add nsw i64 %9, -1\n  %14 = add nsw i64 %9, -2\n  %15 = and i64 %13, 3\n  %16 = icmp ult i64 %14, 3\n  br i1 %16, label %19, label %17\n\n17:                                               ; preds = %11\n  %18 = and i64 %13, -4\n  br label %47\n\n19:                                               ; preds = %47, %11\n  %20 = phi i32 [ undef, %11 ], [ %74, %47 ]\n  %21 = phi i32 [ undef, %11 ], [ %79, %47 ]\n  %22 = phi float [ %12, %11 ], [ %69, %47 ]\n  %23 = phi i64 [ 1, %11 ], [ %80, %47 ]\n  %24 = phi i32 [ 0, %11 ], [ %79, %47 ]\n  %25 = phi i32 [ 0, %11 ], [ %74, %47 ]\n  %26 = icmp eq i64 %15, 0\n  br i1 %26, label %42, label %27\n\n27:                                               ; preds = %19, %27\n  %28 = phi float [ %34, %27 ], [ %22, %19 ]\n  %29 = phi i64 [ %39, %27 ], [ %23, %19 ]\n  %30 = phi i32 [ %38, %27 ], [ %24, %19 ]\n  %31 = phi i32 [ %36, %27 ], [ %25, %19 ]\n  %32 = phi i64 [ %40, %27 ], [ %15, %19 ]\n  %33 = getelementptr inbounds float, float* %5, i64 %29\n  %34 = load float, float* %33, align 4, !tbaa !9\n  %35 = fcmp ogt float %34, %28\n  %36 = select i1 %35, i32 1, i32 %31\n  %37 = fcmp olt float %34, %28\n  %38 = select i1 %37, i32 1, i32 %30\n  %39 = add nuw nsw i64 %29, 1\n  %40 = add i64 %32, -1\n  %41 = icmp eq i64 %40, 0\n  br i1 %41, label %42, label %27, !llvm.loop !11\n\n42:                                               ; preds = %19, %27, %1\n  %43 = phi i32 [ 0, %1 ], [ %20, %19 ], [ %36, %27 ]\n  %44 = phi i32 [ 0, %1 ], [ %21, %19 ], [ %38, %27 ]\n  %45 = add nsw i32 %44, %43\n  %46 = icmp ne i32 %45, 2\n  ret i1 %46\n\n47:                                               ; preds = %47, %17\n  %48 = phi float [ %12, %17 ], [ %69, %47 ]\n  %49 = phi i64 [ 1, %17 ], [ %80, %47 ]\n  %50 = phi i32 [ 0, %17 ], [ %79, %47 ]\n  %51 = phi i32 [ 0, %17 ], [ %74, %47 ]\n  %52 = phi i64 [ %18, %17 ], [ %81, %47 ]\n  %53 = getelementptr inbounds float, float* %5, i64 %49\n  %54 = load float, float* %53, align 4, !tbaa !9\n  %55 = fcmp ogt float %54, %48\n  %56 = fcmp olt float %54, %48\n  %57 = add nuw nsw i64 %49, 1\n  %58 = getelementptr inbounds float, float* %5, i64 %57\n  %59 = load float, float* %58, align 4, !tbaa !9\n  %60 = fcmp ogt float %59, %54\n  %61 = fcmp olt float %59, %54\n  %62 = add nuw nsw i64 %49, 2\n  %63 = getelementptr inbounds float, float* %5, i64 %62\n  %64 = load float, float* %63, align 4, !tbaa !9\n  %65 = fcmp ogt float %64, %59\n  %66 = fcmp olt float %64, %59\n  %67 = add nuw nsw i64 %49, 3\n  %68 = getelementptr inbounds float, float* %5, i64 %67\n  %69 = load float, float* %68, align 4, !tbaa !9\n  %70 = fcmp ogt float %69, %64\n  %71 = select i1 %70, i1 true, i1 %65\n  %72 = select i1 %71, i1 true, i1 %60\n  %73 = select i1 %72, i1 true, i1 %55\n  %74 = select i1 %73, i32 1, i32 %51\n  %75 = fcmp olt float %69, %64\n  %76 = select i1 %75, i1 true, i1 %66\n  %77 = select i1 %76, i1 true, i1 %61\n  %78 = select i1 %77, i1 true, i1 %56\n  %79 = select i1 %78, i32 1, i32 %50\n  %80 = add nuw nsw i64 %49, 4\n  %81 = add i64 %52, -4\n  %82 = icmp eq i64 %81, 0\n  br i1 %82, label %19, label %47, !llvm.loop !13\n}\n\nattributes #0 = { mustprogress nofree norecurse nosync nounwind readonly uwtable willreturn \"frame-pointer\"=\"none\" \"min-legal-vector-width\"=\"0\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\n\n!llvm.module.flags = !{!0, !1}\n!llvm.ident = !{!2}\n\n!0 = !{i32 1, !\"wchar_size\", i32 4}\n!1 = !{i32 7, !\"uwtable\", i32 1}\n!2 = !{!\"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)\"}\n!3 = !{!4, !5, i64 8}\n!4 = !{!\"_ZTSNSt12_Vector_baseIfSaIfEE17_Vector_impl_dataE\", !5, i64 0, !5, i64 8, !5, i64 16}\n!5 = !{!\"any pointer\", !6, i64 0}\n!6 = !{!\"omnipotent char\", !7, i64 0}\n!7 = !{!\"Simple C++ TBAA\"}\n!8 = !{!4, !5, i64 0}\n!9 = !{!10, !10, i64 0}\n!10 = !{!\"float\", !6, i64 0}\n!11 = distinct !{!11, !12}\n!12 = !{!\"llvm.loop.unroll.disable\"}\n!13 = distinct !{!13, !14}\n!14 = !{!\"llvm.loop.mustprogress\"}\n", "target": "This is the targeted source code:\n/*\nReturn true is vector elements are monotonically increasing or decreasing.\n>>> monotonic({1, 2, 4, 20})\ntrue\n>>> monotonic({1, 20, 4, 10})\nfalse\n>>> monotonic({4, 1, 0, -10})\ntrue\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool monotonic(vector<float> l){\n\n    int incr,decr;\n    incr=0;decr=0;\n    for (int i=1;i<l.size();i++)\n    {\n        if (l[i]>l[i-1]) incr=1;\n        if (l[i]<l[i-1]) decr=1;\n    }\n    if (incr+decr==2) return false;\n    return true;\n}\n"}
{"input": "Convert this to C++:\n; ModuleID = '../../Human_xBenchmarks_164/CPP_58/CPP_58.cpp'\nsource_filename = \"../../Human_xBenchmarks_164/CPP_58/CPP_58.cpp\"\ntarget datalayout = \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\ntarget triple = \"x86_64-unknown-linux-gnu\"\n\n%\"class.std::vector\" = type { %\"struct.std::_Vector_base\" }\n%\"struct.std::_Vector_base\" = type { %\"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl\" }\n%\"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl\" = type { %\"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl_data\" }\n%\"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl_data\" = type { i32*, i32*, i32* }\n%\"struct.__gnu_cxx::__ops::_Iter_less_iter\" = type { i8 }\n\n$_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEElNS0_5__ops15_Iter_less_iterEEvT_S9_T0_T1_ = comdat any\n\n$_ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_ = comdat any\n\n$_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEENS0_5__ops15_Iter_less_iterEEvT_S9_RT0_ = comdat any\n\n@.str = private unnamed_addr constant [26 x i8] c\"vector::_M_realloc_insert\\00\", align 1\n\n; Function Attrs: uwtable\ndefine dso_local void @_Z6commonSt6vectorIiSaIiEES1_(%\"class.std::vector\"* noalias nocapture sret(%\"class.std::vector\") align 8 %0, %\"class.std::vector\"* nocapture readonly %1, %\"class.std::vector\"* nocapture readonly %2) local_unnamed_addr #0 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {\n  %4 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %1, i64 0, i32 0, i32 0, i32 0, i32 1\n  %5 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %1, i64 0, i32 0, i32 0, i32 0, i32 0\n  %6 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0, i64 0, i32 0, i32 0, i32 0, i32 0\n  %7 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0, i64 0, i32 0, i32 0, i32 0, i32 1\n  %8 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %2, i64 0, i32 0, i32 0, i32 0, i32 0\n  %9 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %2, i64 0, i32 0, i32 0, i32 0, i32 1\n  %10 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0, i64 0, i32 0, i32 0, i32 0, i32 2\n  %11 = bitcast %\"class.std::vector\"* %0 to i8*\n  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(24) %11, i8 0, i64 24, i1 false)\n  %12 = load i32*, i32** %4, align 8, !tbaa !3\n  %13 = load i32*, i32** %5, align 8, !tbaa !8\n  %14 = icmp eq i32* %12, %13\n  br i1 %14, label %229, label %26\n\n15:                                               ; preds = %215\n  %16 = icmp eq i32* %220, %219\n  br i1 %16, label %229, label %17\n\n17:                                               ; preds = %15\n  %18 = ptrtoint i32* %219 to i64\n  %19 = ptrtoint i32* %220 to i64\n  %20 = sub i64 %18, %19\n  %21 = ashr exact i64 %20, 2\n  %22 = tail call i64 @llvm.ctlz.i64(i64 %21, i1 true) #8, !range !9\n  %23 = shl nuw nsw i64 %22, 1\n  %24 = xor i64 %23, 126\n  invoke void @_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEElNS0_5__ops15_Iter_less_iterEEvT_S9_T0_T1_(i32* %220, i32* %219, i64 %24)\n          to label %25 unwind label %227\n\n25:                                               ; preds = %17\n  invoke void @_ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_(i32* %220, i32* %219)\n          to label %229 unwind label %227\n\n26:                                               ; preds = %3, %215\n  %27 = phi i32* [ %216, %215 ], [ %13, %3 ]\n  %28 = phi i32* [ %217, %215 ], [ %12, %3 ]\n  %29 = phi i32* [ %218, %215 ], [ null, %3 ]\n  %30 = phi i32* [ %219, %215 ], [ null, %3 ]\n  %31 = phi i32* [ %220, %215 ], [ null, %3 ]\n  %32 = phi i64 [ %221, %215 ], [ 0, %3 ]\n  %33 = getelementptr inbounds i32, i32* %27, i64 %32\n  %34 = ptrtoint i32* %30 to i64\n  %35 = ptrtoint i32* %31 to i64\n  %36 = sub i64 %34, %35\n  %37 = icmp sgt i64 %36, 15\n  br i1 %37, label %38, label %65\n\n38:                                               ; preds = %26\n  %39 = lshr i64 %36, 4\n  %40 = load i32, i32* %33, align 4, !tbaa !10\n  br label %41\n\n41:                                               ; preds = %58, %38\n  %42 = phi i64 [ %39, %38 ], [ %60, %58 ]\n  %43 = phi i32* [ %31, %38 ], [ %59, %58 ]\n  %44 = load i32, i32* %43, align 4, !tbaa !10\n  %45 = icmp eq i32 %44, %40\n  br i1 %45, label %97, label %46\n\n46:                                               ; preds = %41\n  %47 = getelementptr inbounds i32, i32* %43, i64 1\n  %48 = load i32, i32* %47, align 4, !tbaa !10\n  %49 = icmp eq i32 %48, %40\n  br i1 %49, label %95, label %50\n\n50:                                               ; preds = %46\n  %51 = getelementptr inbounds i32, i32* %43, i64 2\n  %52 = load i32, i32* %51, align 4, !tbaa !10\n  %53 = icmp eq i32 %52, %40\n  br i1 %53, label %93, label %54\n\n54:                                               ; preds = %50\n  %55 = getelementptr inbounds i32, i32* %43, i64 3\n  %56 = load i32, i32* %55, align 4, !tbaa !10\n  %57 = icmp eq i32 %56, %40\n  br i1 %57, label %91, label %58\n\n58:                                               ; preds = %54\n  %59 = getelementptr inbounds i32, i32* %43, i64 4\n  %60 = add nsw i64 %42, -1\n  %61 = icmp sgt i64 %42, 1\n  br i1 %61, label %41, label %62, !llvm.loop !12\n\n62:                                               ; preds = %58\n  %63 = ptrtoint i32* %59 to i64\n  %64 = sub i64 %34, %63\n  br label %65\n\n65:                                               ; preds = %62, %26\n  %66 = phi i64 [ %64, %62 ], [ %36, %26 ]\n  %67 = phi i32* [ %59, %62 ], [ %31, %26 ]\n  %68 = ashr exact i64 %66, 2\n  switch i64 %68, label %100 [\n    i64 3, label %73\n    i64 2, label %71\n    i64 1, label %69\n  ]\n\n69:                                               ; preds = %65\n  %70 = load i32, i32* %33, align 4, !tbaa !10\n  br label %86\n\n71:                                               ; preds = %65\n  %72 = load i32, i32* %33, align 4, !tbaa !10\n  br label %79\n\n73:                                               ; preds = %65\n  %74 = load i32, i32* %67, align 4, !tbaa !10\n  %75 = load i32, i32* %33, align 4, !tbaa !10\n  %76 = icmp eq i32 %74, %75\n  br i1 %76, label %97, label %77\n\n77:                                               ; preds = %73\n  %78 = getelementptr inbounds i32, i32* %67, i64 1\n  br label %79\n\n79:                                               ; preds = %77, %71\n  %80 = phi i32 [ %72, %71 ], [ %75, %77 ]\n  %81 = phi i32* [ %67, %71 ], [ %78, %77 ]\n  %82 = load i32, i32* %81, align 4, !tbaa !10\n  %83 = icmp eq i32 %82, %80\n  br i1 %83, label %97, label %84\n\n84:                                               ; preds = %79\n  %85 = getelementptr inbounds i32, i32* %81, i64 1\n  br label %86\n\n86:                                               ; preds = %84, %69\n  %87 = phi i32 [ %70, %69 ], [ %80, %84 ]\n  %88 = phi i32* [ %67, %69 ], [ %85, %84 ]\n  %89 = load i32, i32* %88, align 4, !tbaa !10\n  %90 = icmp eq i32 %89, %87\n  br i1 %90, label %97, label %100\n\n91:                                               ; preds = %54\n  %92 = getelementptr inbounds i32, i32* %43, i64 3\n  br label %97\n\n93:                                               ; preds = %50\n  %94 = getelementptr inbounds i32, i32* %43, i64 2\n  br label %97\n\n95:                                               ; preds = %46\n  %96 = getelementptr inbounds i32, i32* %43, i64 1\n  br label %97\n\n97:                                               ; preds = %41, %91, %93, %95, %86, %79, %73\n  %98 = phi i32* [ %67, %73 ], [ %81, %79 ], [ %88, %86 ], [ %92, %91 ], [ %94, %93 ], [ %96, %95 ], [ %43, %41 ]\n  %99 = icmp eq i32* %98, %30\n  br i1 %99, label %100, label %215\n\n100:                                              ; preds = %86, %65, %97\n  %101 = load i32*, i32** %8, align 8, !tbaa !14\n  %102 = load i32*, i32** %9, align 8, !tbaa !14\n  %103 = ptrtoint i32* %102 to i64\n  %104 = ptrtoint i32* %101 to i64\n  %105 = sub i64 %103, %104\n  %106 = icmp sgt i64 %105, 15\n  br i1 %106, label %107, label %134\n\n107:                                              ; preds = %100\n  %108 = lshr i64 %105, 4\n  %109 = load i32, i32* %33, align 4, !tbaa !10\n  br label %110\n\n110:                                              ; preds = %127, %107\n  %111 = phi i64 [ %108, %107 ], [ %129, %127 ]\n  %112 = phi i32* [ %101, %107 ], [ %128, %127 ]\n  %113 = load i32, i32* %112, align 4, !tbaa !10\n  %114 = icmp eq i32 %113, %109\n  br i1 %114, label %166, label %115\n\n115:                                              ; preds = %110\n  %116 = getelementptr inbounds i32, i32* %112, i64 1\n  %117 = load i32, i32* %116, align 4, !tbaa !10\n  %118 = icmp eq i32 %117, %109\n  br i1 %118, label %164, label %119\n\n119:                                              ; preds = %115\n  %120 = getelementptr inbounds i32, i32* %112, i64 2\n  %121 = load i32, i32* %120, align 4, !tbaa !10\n  %122 = icmp eq i32 %121, %109\n  br i1 %122, label %162, label %123\n\n123:                                              ; preds = %119\n  %124 = getelementptr inbounds i32, i32* %112, i64 3\n  %125 = load i32, i32* %124, align 4, !tbaa !10\n  %126 = icmp eq i32 %125, %109\n  br i1 %126, label %160, label %127\n\n127:                                              ; preds = %123\n  %128 = getelementptr inbounds i32, i32* %112, i64 4\n  %129 = add nsw i64 %111, -1\n  %130 = icmp sgt i64 %111, 1\n  br i1 %130, label %110, label %131, !llvm.loop !12\n\n131:                                              ; preds = %127\n  %132 = ptrtoint i32* %128 to i64\n  %133 = sub i64 %103, %132\n  br label %134\n\n134:                                              ; preds = %131, %100\n  %135 = phi i64 [ %133, %131 ], [ %105, %100 ]\n  %136 = phi i32* [ %128, %131 ], [ %101, %100 ]\n  %137 = ashr exact i64 %135, 2\n  switch i64 %137, label %215 [\n    i64 3, label %142\n    i64 2, label %140\n    i64 1, label %138\n  ]\n\n138:                                              ; preds = %134\n  %139 = load i32, i32* %33, align 4, !tbaa !10\n  br label %155\n\n140:                                              ; preds = %134\n  %141 = load i32, i32* %33, align 4, !tbaa !10\n  br label %148\n\n142:                                              ; preds = %134\n  %143 = load i32, i32* %136, align 4, !tbaa !10\n  %144 = load i32, i32* %33, align 4, !tbaa !10\n  %145 = icmp eq i32 %143, %144\n  br i1 %145, label %166, label %146\n\n146:                                              ; preds = %142\n  %147 = getelementptr inbounds i32, i32* %136, i64 1\n  br label %148\n\n148:                                              ; preds = %146, %140\n  %149 = phi i32 [ %141, %140 ], [ %144, %146 ]\n  %150 = phi i32* [ %136, %140 ], [ %147, %146 ]\n  %151 = load i32, i32* %150, align 4, !tbaa !10\n  %152 = icmp eq i32 %151, %149\n  br i1 %152, label %166, label %153\n\n153:                                              ; preds = %148\n  %154 = getelementptr inbounds i32, i32* %150, i64 1\n  br label %155\n\n155:                                              ; preds = %153, %138\n  %156 = phi i32 [ %139, %138 ], [ %149, %153 ]\n  %157 = phi i32* [ %136, %138 ], [ %154, %153 ]\n  %158 = load i32, i32* %157, align 4, !tbaa !10\n  %159 = icmp eq i32 %158, %156\n  br i1 %159, label %166, label %215\n\n160:                                              ; preds = %123\n  %161 = getelementptr inbounds i32, i32* %112, i64 3\n  br label %166\n\n162:                                              ; preds = %119\n  %163 = getelementptr inbounds i32, i32* %112, i64 2\n  br label %166\n\n164:                                              ; preds = %115\n  %165 = getelementptr inbounds i32, i32* %112, i64 1\n  br label %166\n\n166:                                              ; preds = %110, %160, %162, %164, %155, %148, %142\n  %167 = phi i32 [ %143, %142 ], [ %149, %148 ], [ %156, %155 ], [ %109, %164 ], [ %109, %162 ], [ %109, %160 ], [ %109, %110 ]\n  %168 = phi i32* [ %136, %142 ], [ %150, %148 ], [ %157, %155 ], [ %165, %164 ], [ %163, %162 ], [ %161, %160 ], [ %112, %110 ]\n  %169 = icmp eq i32* %168, %102\n  br i1 %169, label %215, label %170\n\n170:                                              ; preds = %166\n  %171 = icmp eq i32* %30, %29\n  br i1 %171, label %174, label %172\n\n172:                                              ; preds = %170\n  store i32 %167, i32* %30, align 4, !tbaa !10\n  %173 = getelementptr inbounds i32, i32* %30, i64 1\n  store i32* %173, i32** %7, align 8, !tbaa !3\n  br label %215\n\n174:                                              ; preds = %170\n  %175 = ashr exact i64 %36, 2\n  %176 = icmp eq i64 %36, 9223372036854775804\n  br i1 %176, label %177, label %179\n\n177:                                              ; preds = %174\n  invoke void @_ZSt20__throw_length_errorPKc(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str, i64 0, i64 0)) #9\n          to label %178 unwind label %213\n\n178:                                              ; preds = %177\n  unreachable\n\n179:                                              ; preds = %174\n  %180 = icmp eq i64 %36, 0\n  %181 = select i1 %180, i64 1, i64 %175\n  %182 = add nsw i64 %181, %175\n  %183 = icmp ult i64 %182, %175\n  %184 = icmp ugt i64 %182, 2305843009213693951\n  %185 = or i1 %183, %184\n  %186 = select i1 %185, i64 2305843009213693951, i64 %182\n  %187 = icmp eq i64 %186, 0\n  br i1 %187, label %194, label %188\n\n188:                                              ; preds = %179\n  %189 = shl nuw nsw i64 %186, 2\n  %190 = invoke noalias nonnull i8* @_Znwm(i64 %189) #10\n          to label %191 unwind label %211\n\n191:                                              ; preds = %188\n  %192 = bitcast i8* %190 to i32*\n  %193 = load i32, i32* %33, align 4, !tbaa !10\n  br label %194\n\n194:                                              ; preds = %191, %179\n  %195 = phi i32 [ %193, %191 ], [ %167, %179 ]\n  %196 = phi i32* [ %192, %191 ], [ null, %179 ]\n  %197 = getelementptr inbounds i32, i32* %196, i64 %175\n  store i32 %195, i32* %197, align 4, !tbaa !10\n  %198 = icmp sgt i64 %36, 0\n  br i1 %198, label %199, label %202\n\n199:                                              ; preds = %194\n  %200 = bitcast i32* %196 to i8*\n  %201 = bitcast i32* %31 to i8*\n  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %200, i8* align 4 %201, i64 %36, i1 false) #8\n  br label %202\n\n202:                                              ; preds = %194, %199\n  %203 = getelementptr inbounds i32, i32* %197, i64 1\n  %204 = icmp eq i32* %31, null\n  br i1 %204, label %207, label %205\n\n205:                                              ; preds = %202\n  %206 = bitcast i32* %31 to i8*\n  tail call void @_ZdlPv(i8* nonnull %206) #8\n  br label %207\n\n207:                                              ; preds = %205, %202\n  store i32* %196, i32** %6, align 8, !tbaa !8\n  store i32* %203, i32** %7, align 8, !tbaa !3\n  %208 = getelementptr inbounds i32, i32* %196, i64 %186\n  store i32* %208, i32** %10, align 8, !tbaa !15\n  %209 = load i32*, i32** %4, align 8, !tbaa !3\n  %210 = load i32*, i32** %5, align 8, !tbaa !8\n  br label %215\n\n211:                                              ; preds = %188\n  %212 = landingpad { i8*, i32 }\n          cleanup\n  br label %230\n\n213:                                              ; preds = %177\n  %214 = landingpad { i8*, i32 }\n          cleanup\n  br label %230\n\n215:                                              ; preds = %155, %134, %207, %172, %97, %166\n  %216 = phi i32* [ %27, %155 ], [ %27, %134 ], [ %210, %207 ], [ %27, %172 ], [ %27, %97 ], [ %27, %166 ]\n  %217 = phi i32* [ %28, %155 ], [ %28, %134 ], [ %209, %207 ], [ %28, %172 ], [ %28, %97 ], [ %28, %166 ]\n  %218 = phi i32* [ %29, %155 ], [ %29, %134 ], [ %208, %207 ], [ %29, %172 ], [ %29, %97 ], [ %29, %166 ]\n  %219 = phi i32* [ %30, %155 ], [ %30, %134 ], [ %203, %207 ], [ %173, %172 ], [ %30, %97 ], [ %30, %166 ]\n  %220 = phi i32* [ %31, %155 ], [ %31, %134 ], [ %196, %207 ], [ %31, %172 ], [ %31, %97 ], [ %31, %166 ]\n  %221 = add nuw i64 %32, 1\n  %222 = ptrtoint i32* %217 to i64\n  %223 = ptrtoint i32* %216 to i64\n  %224 = sub i64 %222, %223\n  %225 = ashr exact i64 %224, 2\n  %226 = icmp ugt i64 %225, %221\n  br i1 %226, label %26, label %15, !llvm.loop !16\n\n227:                                              ; preds = %25, %17\n  %228 = landingpad { i8*, i32 }\n          cleanup\n  br label %230\n\n229:                                              ; preds = %3, %15, %25\n  ret void\n\n230:                                              ; preds = %211, %213, %227\n  %231 = phi i32* [ %220, %227 ], [ %31, %211 ], [ %31, %213 ]\n  %232 = phi { i8*, i32 } [ %228, %227 ], [ %212, %211 ], [ %214, %213 ]\n  %233 = icmp eq i32* %231, null\n  br i1 %233, label %236, label %234\n\n234:                                              ; preds = %230\n  %235 = bitcast i32* %231 to i8*\n  tail call void @_ZdlPv(i8* nonnull %235) #8\n  br label %236\n\n236:                                              ; preds = %230, %234\n  resume { i8*, i32 } %232\n}\n\n; Function Attrs: argmemonly mustprogress nofree nounwind willreturn writeonly\ndeclare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1\n\n; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn\ndeclare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2\n\ndeclare dso_local i32 @__gxx_personality_v0(...)\n\n; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn\ndeclare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2\n\n; Function Attrs: nobuiltin nounwind\ndeclare dso_local void @_ZdlPv(i8*) local_unnamed_addr #3\n\n; Function Attrs: noreturn\ndeclare dso_local void @_ZSt20__throw_length_errorPKc(i8*) local_unnamed_addr #4\n\n; Function Attrs: nobuiltin allocsize(0)\ndeclare dso_local nonnull i8* @_Znwm(i64) local_unnamed_addr #5\n\n; Function Attrs: argmemonly mustprogress nofree nounwind willreturn\ndeclare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #6\n\n; Function Attrs: uwtable\ndefine linkonce_odr dso_local void @_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEElNS0_5__ops15_Iter_less_iterEEvT_S9_T0_T1_(i32* %0, i32* %1, i64 %2) local_unnamed_addr #0 comdat {\n  %4 = alloca %\"struct.__gnu_cxx::__ops::_Iter_less_iter\", align 1\n  %5 = ptrtoint i32* %0 to i64\n  %6 = getelementptr inbounds i32, i32* %0, i64 1\n  %7 = ptrtoint i32* %1 to i64\n  %8 = sub i64 %7, %5\n  %9 = icmp sgt i64 %8, 64\n  br i1 %9, label %10, label %123\n\n10:                                               ; preds = %3, %119\n  %11 = phi i64 [ %121, %119 ], [ %8, %3 ]\n  %12 = phi i64 [ %76, %119 ], [ %2, %3 ]\n  %13 = phi i32* [ %107, %119 ], [ %1, %3 ]\n  %14 = icmp eq i64 %12, 0\n  br i1 %14, label %15, label %74\n\n15:                                               ; preds = %10\n  %16 = getelementptr inbounds %\"struct.__gnu_cxx::__ops::_Iter_less_iter\", %\"struct.__gnu_cxx::__ops::_Iter_less_iter\"* %4, i64 0, i32 0\n  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %16)\n  call void @_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEENS0_5__ops15_Iter_less_iterEEvT_S9_RT0_(i32* %0, i32* %13, %\"struct.__gnu_cxx::__ops::_Iter_less_iter\"* nonnull align 1 dereferenceable(1) %4)\n  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %16)\n  br label %17\n\n17:                                               ; preds = %15, %70\n  %18 = phi i32* [ %19, %70 ], [ %13, %15 ]\n  %19 = getelementptr inbounds i32, i32* %18, i64 -1\n  %20 = load i32, i32* %19, align 4, !tbaa !10\n  %21 = load i32, i32* %0, align 4, !tbaa !10\n  store i32 %21, i32* %19, align 4, !tbaa !10\n  %22 = ptrtoint i32* %19 to i64\n  %23 = sub i64 %22, %5\n  %24 = ashr exact i64 %23, 2\n  %25 = add nsw i64 %24, -1\n  %26 = sdiv i64 %25, 2\n  %27 = icmp sgt i64 %23, 8\n  br i1 %27, label %28, label %43\n\n28:                                               ; preds = %17, %28\n  %29 = phi i64 [ %38, %28 ], [ 0, %17 ]\n  %30 = shl i64 %29, 1\n  %31 = add i64 %30, 2\n  %32 = getelementptr inbounds i32, i32* %0, i64 %31\n  %33 = or i64 %30, 1\n  %34 = getelementptr inbounds i32, i32* %0, i64 %33\n  %35 = load i32, i32* %32, align 4, !tbaa !10\n  %36 = load i32, i32* %34, align 4, !tbaa !10\n  %37 = icmp slt i32 %35, %36\n  %38 = select i1 %37, i64 %33, i64 %31\n  %39 = getelementptr inbounds i32, i32* %0, i64 %38\n  %40 = load i32, i32* %39, align 4, !tbaa !10\n  %41 = getelementptr inbounds i32, i32* %0, i64 %29\n  store i32 %40, i32* %41, align 4, !tbaa !10\n  %42 = icmp slt i64 %38, %26\n  br i1 %42, label %28, label %43, !llvm.loop !17\n\n43:                                               ; preds = %28, %17\n  %44 = phi i64 [ 0, %17 ], [ %38, %28 ]\n  %45 = and i64 %23, 4\n  %46 = icmp eq i64 %45, 0\n  br i1 %46, label %47, label %57\n\n47:                                               ; preds = %43\n  %48 = add nsw i64 %24, -2\n  %49 = sdiv i64 %48, 2\n  %50 = icmp eq i64 %44, %49\n  br i1 %50, label %51, label %57\n\n51:                                               ; preds = %47\n  %52 = shl i64 %44, 1\n  %53 = or i64 %52, 1\n  %54 = getelementptr inbounds i32, i32* %0, i64 %53\n  %55 = load i32, i32* %54, align 4, !tbaa !10\n  %56 = getelementptr inbounds i32, i32* %0, i64 %44\n  store i32 %55, i32* %56, align 4, !tbaa !10\n  br label %57\n\n57:                                               ; preds = %51, %47, %43\n  %58 = phi i64 [ %53, %51 ], [ %44, %47 ], [ %44, %43 ]\n  %59 = icmp sgt i64 %58, 0\n  br i1 %59, label %60, label %70\n\n60:                                               ; preds = %57, %67\n  %61 = phi i64 [ %63, %67 ], [ %58, %57 ]\n  %62 = add nsw i64 %61, -1\n  %63 = lshr i64 %62, 1\n  %64 = getelementptr inbounds i32, i32* %0, i64 %63\n  %65 = load i32, i32* %64, align 4, !tbaa !10\n  %66 = icmp slt i32 %65, %20\n  br i1 %66, label %67, label %70\n\n67:                                               ; preds = %60\n  %68 = getelementptr inbounds i32, i32* %0, i64 %61\n  store i32 %65, i32* %68, align 4, !tbaa !10\n  %69 = icmp ult i64 %62, 2\n  br i1 %69, label %70, label %60, !llvm.loop !18\n\n70:                                               ; preds = %67, %60, %57\n  %71 = phi i64 [ %58, %57 ], [ %61, %60 ], [ 0, %67 ]\n  %72 = getelementptr inbounds i32, i32* %0, i64 %71\n  store i32 %20, i32* %72, align 4, !tbaa !10\n  %73 = icmp sgt i64 %23, 4\n  br i1 %73, label %17, label %123, !llvm.loop !19\n\n74:                                               ; preds = %10\n  %75 = lshr i64 %11, 3\n  %76 = add nsw i64 %12, -1\n  %77 = getelementptr inbounds i32, i32* %0, i64 %75\n  %78 = getelementptr inbounds i32, i32* %13, i64 -1\n  %79 = load i32, i32* %6, align 4, !tbaa !10\n  %80 = load i32, i32* %77, align 4, !tbaa !10\n  %81 = icmp slt i32 %79, %80\n  %82 = load i32, i32* %78, align 4, !tbaa !10\n  br i1 %81, label %83, label %92\n\n83:                                               ; preds = %74\n  %84 = icmp slt i32 %80, %82\n  br i1 %84, label %85, label %87\n\n85:                                               ; preds = %83\n  %86 = load i32, i32* %0, align 4, !tbaa !10\n  store i32 %80, i32* %0, align 4, !tbaa !10\n  store i32 %86, i32* %77, align 4, !tbaa !10\n  br label %101\n\n87:                                               ; preds = %83\n  %88 = icmp slt i32 %79, %82\n  %89 = load i32, i32* %0, align 4, !tbaa !10\n  br i1 %88, label %90, label %91\n\n90:                                               ; preds = %87\n  store i32 %82, i32* %0, align 4, !tbaa !10\n  store i32 %89, i32* %78, align 4, !tbaa !10\n  br label %101\n\n91:                                               ; preds = %87\n  store i32 %79, i32* %0, align 4, !tbaa !10\n  store i32 %89, i32* %6, align 4, !tbaa !10\n  br label %101\n\n92:                                               ; preds = %74\n  %93 = icmp slt i32 %79, %82\n  br i1 %93, label %94, label %96\n\n94:                                               ; preds = %92\n  %95 = load i32, i32* %0, align 4, !tbaa !10\n  store i32 %79, i32* %0, align 4, !tbaa !10\n  store i32 %95, i32* %6, align 4, !tbaa !10\n  br label %101\n\n96:                                               ; preds = %92\n  %97 = icmp slt i32 %80, %82\n  %98 = load i32, i32* %0, align 4, !tbaa !10\n  br i1 %97, label %99, label %100\n\n99:                                               ; preds = %96\n  store i32 %82, i32* %0, align 4, !tbaa !10\n  store i32 %98, i32* %78, align 4, !tbaa !10\n  br label %101\n\n100:                                              ; preds = %96\n  store i32 %80, i32* %0, align 4, !tbaa !10\n  store i32 %98, i32* %77, align 4, !tbaa !10\n  br label %101\n\n101:                                              ; preds = %100, %99, %94, %91, %90, %85\n  br label %102\n\n102:                                              ; preds = %101, %118\n  %103 = phi i32* [ %110, %118 ], [ %6, %101 ]\n  %104 = phi i32* [ %113, %118 ], [ %13, %101 ]\n  %105 = load i32, i32* %0, align 4, !tbaa !10\n  br label %106\n\n106:                                              ; preds = %106, %102\n  %107 = phi i32* [ %103, %102 ], [ %110, %106 ]\n  %108 = load i32, i32* %107, align 4, !tbaa !10\n  %109 = icmp slt i32 %108, %105\n  %110 = getelementptr inbounds i32, i32* %107, i64 1\n  br i1 %109, label %106, label %111, !llvm.loop !20\n\n111:                                              ; preds = %106, %111\n  %112 = phi i32* [ %113, %111 ], [ %104, %106 ]\n  %113 = getelementptr inbounds i32, i32* %112, i64 -1\n  %114 = load i32, i32* %113, align 4, !tbaa !10\n  %115 = icmp slt i32 %105, %114\n  br i1 %115, label %111, label %116, !llvm.loop !21\n\n116:                                              ; preds = %111\n  %117 = icmp ult i32* %107, %113\n  br i1 %117, label %118, label %119\n\n118:                                              ; preds = %116\n  store i32 %114, i32* %107, align 4, !tbaa !10\n  store i32 %108, i32* %113, align 4, !tbaa !10\n  br label %102, !llvm.loop !22\n\n119:                                              ; preds = %116\n  tail call void @_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEElNS0_5__ops15_Iter_less_iterEEvT_S9_T0_T1_(i32* nonnull %107, i32* %13, i64 %76)\n  %120 = ptrtoint i32* %107 to i64\n  %121 = sub i64 %120, %5\n  %122 = icmp sgt i64 %121, 64\n  br i1 %122, label %10, label %123, !llvm.loop !23\n\n123:                                              ; preds = %119, %70, %3\n  ret void\n}\n\n; Function Attrs: uwtable\ndefine linkonce_odr dso_local void @_ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_(i32* %0, i32* %1) local_unnamed_addr #0 comdat {\n  %3 = ptrtoint i32* %1 to i64\n  %4 = ptrtoint i32* %0 to i64\n  %5 = sub i64 %3, %4\n  %6 = icmp sgt i64 %5, 64\n  br i1 %6, label %7, label %38\n\n7:                                                ; preds = %2\n  %8 = bitcast i32* %0 to i8*\n  %9 = getelementptr i32, i32* %0, i64 1\n  %10 = load i32, i32* %9, align 4, !tbaa !10\n  %11 = load i32, i32* %0, align 4, !tbaa !10\n  %12 = icmp slt i32 %10, %11\n  br i1 %12, label %13, label %15\n\n13:                                               ; preds = %7\n  %14 = load i32, i32* %0, align 4\n  store i32 %14, i32* %9, align 4\n  br label %15\n\n15:                                               ; preds = %7, %13\n  %16 = phi i32* [ %0, %13 ], [ %9, %7 ]\n  store i32 %10, i32* %16, align 4, !tbaa !10\n  %17 = getelementptr inbounds i32, i32* %0, i64 2\n  %18 = load i32, i32* %17, align 4, !tbaa !10\n  %19 = load i32, i32* %0, align 4, !tbaa !10\n  %20 = icmp slt i32 %18, %19\n  br i1 %20, label %84, label %74\n\n21:                                               ; preds = %322, %34\n  %22 = phi i32* [ %36, %34 ], [ %324, %322 ]\n  %23 = load i32, i32* %22, align 4, !tbaa !10\n  %24 = getelementptr inbounds i32, i32* %22, i64 -1\n  %25 = load i32, i32* %24, align 4, !tbaa !10\n  %26 = icmp slt i32 %23, %25\n  br i1 %26, label %27, label %34\n\n27:                                               ; preds = %21, %27\n  %28 = phi i32 [ %32, %27 ], [ %25, %21 ]\n  %29 = phi i32* [ %31, %27 ], [ %24, %21 ]\n  %30 = phi i32* [ %29, %27 ], [ %22, %21 ]\n  store i32 %28, i32* %30, align 4, !tbaa !10\n  %31 = getelementptr inbounds i32, i32* %29, i64 -1\n  %32 = load i32, i32* %31, align 4, !tbaa !10\n  %33 = icmp slt i32 %23, %32\n  br i1 %33, label %27, label %34, !llvm.loop !24\n\n34:                                               ; preds = %27, %21\n  %35 = phi i32* [ %22, %21 ], [ %29, %27 ]\n  store i32 %23, i32* %35, align 4, !tbaa !10\n  %36 = getelementptr inbounds i32, i32* %22, i64 1\n  %37 = icmp eq i32* %36, %1\n  br i1 %37, label %73, label %21, !llvm.loop !25\n\n38:                                               ; preds = %2\n  %39 = icmp eq i32* %0, %1\n  br i1 %39, label %73, label %40\n\n40:                                               ; preds = %38\n  %41 = bitcast i32* %0 to i8*\n  %42 = getelementptr inbounds i32, i32* %0, i64 1\n  %43 = icmp eq i32* %42, %1\n  br i1 %43, label %73, label %44\n\n44:                                               ; preds = %40, %69\n  %45 = phi i32* [ %71, %69 ], [ %42, %40 ]\n  %46 = phi i32* [ %45, %69 ], [ %0, %40 ]\n  %47 = load i32, i32* %45, align 4, !tbaa !10\n  %48 = load i32, i32* %0, align 4, !tbaa !10\n  %49 = icmp slt i32 %47, %48\n  br i1 %49, label %50, label %59\n\n50:                                               ; preds = %44\n  %51 = ptrtoint i32* %45 to i64\n  %52 = sub i64 %51, %4\n  %53 = icmp eq i64 %52, 0\n  br i1 %53, label %69, label %54\n\n54:                                               ; preds = %50\n  %55 = ashr exact i64 %52, 2\n  %56 = sub nsw i64 2, %55\n  %57 = getelementptr inbounds i32, i32* %46, i64 %56\n  %58 = bitcast i32* %57 to i8*\n  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* nonnull align 4 %58, i8* nonnull align 4 %41, i64 %52, i1 false) #8\n  br label %69\n\n59:                                               ; preds = %44\n  %60 = load i32, i32* %46, align 4, !tbaa !10\n  %61 = icmp slt i32 %47, %60\n  br i1 %61, label %62, label %69\n\n62:                                               ; preds = %59, %62\n  %63 = phi i32 [ %67, %62 ], [ %60, %59 ]\n  %64 = phi i32* [ %66, %62 ], [ %46, %59 ]\n  %65 = phi i32* [ %64, %62 ], [ %45, %59 ]\n  store i32 %63, i32* %65, align 4, !tbaa !10\n  %66 = getelementptr inbounds i32, i32* %64, i64 -1\n  %67 = load i32, i32* %66, align 4, !tbaa !10\n  %68 = icmp slt i32 %47, %67\n  br i1 %68, label %62, label %69, !llvm.loop !24\n\n69:                                               ; preds = %62, %59, %54, %50\n  %70 = phi i32* [ %0, %50 ], [ %0, %54 ], [ %45, %59 ], [ %64, %62 ]\n  store i32 %47, i32* %70, align 4, !tbaa !10\n  %71 = getelementptr inbounds i32, i32* %45, i64 1\n  %72 = icmp eq i32* %71, %1\n  br i1 %72, label %73, label %44, !llvm.loop !26\n\n73:                                               ; preds = %69, %34, %40, %38, %322\n  ret void\n\n74:                                               ; preds = %15\n  %75 = load i32, i32* %9, align 4, !tbaa !10\n  %76 = icmp slt i32 %18, %75\n  br i1 %76, label %77, label %88\n\n77:                                               ; preds = %74, %77\n  %78 = phi i32 [ %82, %77 ], [ %75, %74 ]\n  %79 = phi i32* [ %81, %77 ], [ %9, %74 ]\n  %80 = phi i32* [ %79, %77 ], [ %17, %74 ]\n  store i32 %78, i32* %80, align 4, !tbaa !10\n  %81 = getelementptr inbounds i32, i32* %79, i64 -1\n  %82 = load i32, i32* %81, align 4, !tbaa !10\n  %83 = icmp slt i32 %18, %82\n  br i1 %83, label %77, label %88, !llvm.loop !24\n\n84:                                               ; preds = %15\n  %85 = bitcast i32* %0 to i64*\n  %86 = bitcast i32* %9 to i64*\n  %87 = load i64, i64* %85, align 4\n  store i64 %87, i64* %86, align 4\n  br label %88\n\n88:                                               ; preds = %77, %84, %74\n  %89 = phi i32* [ %0, %84 ], [ %17, %74 ], [ %79, %77 ]\n  store i32 %18, i32* %89, align 4, !tbaa !10\n  %90 = getelementptr inbounds i32, i32* %0, i64 3\n  %91 = load i32, i32* %90, align 4, !tbaa !10\n  %92 = load i32, i32* %0, align 4, !tbaa !10\n  %93 = icmp slt i32 %91, %92\n  br i1 %93, label %104, label %94\n\n94:                                               ; preds = %88\n  %95 = load i32, i32* %17, align 4, !tbaa !10\n  %96 = icmp slt i32 %91, %95\n  br i1 %96, label %97, label %106\n\n97:                                               ; preds = %94, %97\n  %98 = phi i32 [ %102, %97 ], [ %95, %94 ]\n  %99 = phi i32* [ %101, %97 ], [ %17, %94 ]\n  %100 = phi i32* [ %99, %97 ], [ %90, %94 ]\n  store i32 %98, i32* %100, align 4, !tbaa !10\n  %101 = getelementptr inbounds i32, i32* %99, i64 -1\n  %102 = load i32, i32* %101, align 4, !tbaa !10\n  %103 = icmp slt i32 %91, %102\n  br i1 %103, label %97, label %106, !llvm.loop !24\n\n104:                                              ; preds = %88\n  %105 = bitcast i32* %9 to i8*\n  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* noundef nonnull align 4 dereferenceable(12) %105, i8* noundef nonnull align 4 dereferenceable(12) %8, i64 12, i1 false) #8\n  br label %106\n\n106:                                              ; preds = %97, %104, %94\n  %107 = phi i32* [ %0, %104 ], [ %90, %94 ], [ %99, %97 ]\n  store i32 %91, i32* %107, align 4, !tbaa !10\n  %108 = getelementptr inbounds i32, i32* %0, i64 4\n  %109 = load i32, i32* %108, align 4, !tbaa !10\n  %110 = load i32, i32* %0, align 4, !tbaa !10\n  %111 = icmp slt i32 %109, %110\n  br i1 %111, label %122, label %112\n\n112:                                              ; preds = %106\n  %113 = load i32, i32* %90, align 4, !tbaa !10\n  %114 = icmp slt i32 %109, %113\n  br i1 %114, label %115, label %124\n\n115:                                              ; preds = %112, %115\n  %116 = phi i32 [ %120, %115 ], [ %113, %112 ]\n  %117 = phi i32* [ %119, %115 ], [ %90, %112 ]\n  %118 = phi i32* [ %117, %115 ], [ %108, %112 ]\n  store i32 %116, i32* %118, align 4, !tbaa !10\n  %119 = getelementptr inbounds i32, i32* %117, i64 -1\n  %120 = load i32, i32* %119, align 4, !tbaa !10\n  %121 = icmp slt i32 %109, %120\n  br i1 %121, label %115, label %124, !llvm.loop !24\n\n122:                                              ; preds = %106\n  %123 = bitcast i32* %9 to i8*\n  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* noundef nonnull align 4 dereferenceable(16) %123, i8* noundef nonnull align 4 dereferenceable(16) %8, i64 16, i1 false) #8\n  br label %124\n\n124:                                              ; preds = %115, %122, %112\n  %125 = phi i32* [ %0, %122 ], [ %108, %112 ], [ %117, %115 ]\n  store i32 %109, i32* %125, align 4, !tbaa !10\n  %126 = getelementptr inbounds i32, i32* %0, i64 5\n  %127 = load i32, i32* %126, align 4, !tbaa !10\n  %128 = load i32, i32* %0, align 4, !tbaa !10\n  %129 = icmp slt i32 %127, %128\n  br i1 %129, label %140, label %130\n\n130:                                              ; preds = %124\n  %131 = load i32, i32* %108, align 4, !tbaa !10\n  %132 = icmp slt i32 %127, %131\n  br i1 %132, label %133, label %142\n\n133:                                              ; preds = %130, %133\n  %134 = phi i32 [ %138, %133 ], [ %131, %130 ]\n  %135 = phi i32* [ %137, %133 ], [ %108, %130 ]\n  %136 = phi i32* [ %135, %133 ], [ %126, %130 ]\n  store i32 %134, i32* %136, align 4, !tbaa !10\n  %137 = getelementptr inbounds i32, i32* %135, i64 -1\n  %138 = load i32, i32* %137, align 4, !tbaa !10\n  %139 = icmp slt i32 %127, %138\n  br i1 %139, label %133, label %142, !llvm.loop !24\n\n140:                                              ; preds = %124\n  %141 = bitcast i32* %9 to i8*\n  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* noundef nonnull align 4 dereferenceable(20) %141, i8* noundef nonnull align 4 dereferenceable(20) %8, i64 20, i1 false) #8\n  br label %142\n\n142:                                              ; preds = %133, %140, %130\n  %143 = phi i32* [ %0, %140 ], [ %126, %130 ], [ %135, %133 ]\n  store i32 %127, i32* %143, align 4, !tbaa !10\n  %144 = getelementptr inbounds i32, i32* %0, i64 6\n  %145 = load i32, i32* %144, align 4, !tbaa !10\n  %146 = load i32, i32* %0, align 4, !tbaa !10\n  %147 = icmp slt i32 %145, %146\n  br i1 %147, label %158, label %148\n\n148:                                              ; preds = %142\n  %149 = load i32, i32* %126, align 4, !tbaa !10\n  %150 = icmp slt i32 %145, %149\n  br i1 %150, label %151, label %160\n\n151:                                              ; preds = %148, %151\n  %152 = phi i32 [ %156, %151 ], [ %149, %148 ]\n  %153 = phi i32* [ %155, %151 ], [ %126, %148 ]\n  %154 = phi i32* [ %153, %151 ], [ %144, %148 ]\n  store i32 %152, i32* %154, align 4, !tbaa !10\n  %155 = getelementptr inbounds i32, i32* %153, i64 -1\n  %156 = load i32, i32* %155, align 4, !tbaa !10\n  %157 = icmp slt i32 %145, %156\n  br i1 %157, label %151, label %160, !llvm.loop !24\n\n158:                                              ; preds = %142\n  %159 = bitcast i32* %9 to i8*\n  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* noundef nonnull align 4 dereferenceable(24) %159, i8* noundef nonnull align 4 dereferenceable(24) %8, i64 24, i1 false) #8\n  br label %160\n\n160:                                              ; preds = %151, %158, %148\n  %161 = phi i32* [ %0, %158 ], [ %144, %148 ], [ %153, %151 ]\n  store i32 %145, i32* %161, align 4, !tbaa !10\n  %162 = getelementptr inbounds i32, i32* %0, i64 7\n  %163 = load i32, i32* %162, align 4, !tbaa !10\n  %164 = load i32, i32* %0, align 4, !tbaa !10\n  %165 = icmp slt i32 %163, %164\n  br i1 %165, label %176, label %166\n\n166:                                              ; preds = %160\n  %167 = load i32, i32* %144, align 4, !tbaa !10\n  %168 = icmp slt i32 %163, %167\n  br i1 %168, label %169, label %178\n\n169:                                              ; preds = %166, %169\n  %170 = phi i32 [ %174, %169 ], [ %167, %166 ]\n  %171 = phi i32* [ %173, %169 ], [ %144, %166 ]\n  %172 = phi i32* [ %171, %169 ], [ %162, %166 ]\n  store i32 %170, i32* %172, align 4, !tbaa !10\n  %173 = getelementptr inbounds i32, i32* %171, i64 -1\n  %174 = load i32, i32* %173, align 4, !tbaa !10\n  %175 = icmp slt i32 %163, %174\n  br i1 %175, label %169, label %178, !llvm.loop !24\n\n176:                                              ; preds = %160\n  %177 = bitcast i32* %9 to i8*\n  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* noundef nonnull align 4 dereferenceable(28) %177, i8* noundef nonnull align 4 dereferenceable(28) %8, i64 28, i1 false) #8\n  br label %178\n\n178:                                              ; preds = %169, %176, %166\n  %179 = phi i32* [ %0, %176 ], [ %162, %166 ], [ %171, %169 ]\n  store i32 %163, i32* %179, align 4, !tbaa !10\n  %180 = getelementptr inbounds i32, i32* %0, i64 8\n  %181 = load i32, i32* %180, align 4, !tbaa !10\n  %182 = load i32, i32* %0, align 4, !tbaa !10\n  %183 = icmp slt i32 %181, %182\n  br i1 %183, label %194, label %184\n\n184:                                              ; preds = %178\n  %185 = load i32, i32* %162, align 4, !tbaa !10\n  %186 = icmp slt i32 %181, %185\n  br i1 %186, label %187, label %196\n\n187:                                              ; preds = %184, %187\n  %188 = phi i32 [ %192, %187 ], [ %185, %184 ]\n  %189 = phi i32* [ %191, %187 ], [ %162, %184 ]\n  %190 = phi i32* [ %189, %187 ], [ %180, %184 ]\n  store i32 %188, i32* %190, align 4, !tbaa !10\n  %191 = getelementptr inbounds i32, i32* %189, i64 -1\n  %192 = load i32, i32* %191, align 4, !tbaa !10\n  %193 = icmp slt i32 %181, %192\n  br i1 %193, label %187, label %196, !llvm.loop !24\n\n194:                                              ; preds = %178\n  %195 = bitcast i32* %9 to i8*\n  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* noundef nonnull align 4 dereferenceable(32) %195, i8* noundef nonnull align 4 dereferenceable(32) %8, i64 32, i1 false) #8\n  br label %196\n\n196:                                              ; preds = %187, %194, %184\n  %197 = phi i32* [ %0, %194 ], [ %180, %184 ], [ %189, %187 ]\n  store i32 %181, i32* %197, align 4, !tbaa !10\n  %198 = getelementptr inbounds i32, i32* %0, i64 9\n  %199 = load i32, i32* %198, align 4, !tbaa !10\n  %200 = load i32, i32* %0, align 4, !tbaa !10\n  %201 = icmp slt i32 %199, %200\n  br i1 %201, label %212, label %202\n\n202:                                              ; preds = %196\n  %203 = load i32, i32* %180, align 4, !tbaa !10\n  %204 = icmp slt i32 %199, %203\n  br i1 %204, label %205, label %214\n\n205:                                              ; preds = %202, %205\n  %206 = phi i32 [ %210, %205 ], [ %203, %202 ]\n  %207 = phi i32* [ %209, %205 ], [ %180, %202 ]\n  %208 = phi i32* [ %207, %205 ], [ %198, %202 ]\n  store i32 %206, i32* %208, align 4, !tbaa !10\n  %209 = getelementptr inbounds i32, i32* %207, i64 -1\n  %210 = load i32, i32* %209, align 4, !tbaa !10\n  %211 = icmp slt i32 %199, %210\n  br i1 %211, label %205, label %214, !llvm.loop !24\n\n212:                                              ; preds = %196\n  %213 = bitcast i32* %9 to i8*\n  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* noundef nonnull align 4 dereferenceable(36) %213, i8* noundef nonnull align 4 dereferenceable(36) %8, i64 36, i1 false) #8\n  br label %214\n\n214:                                              ; preds = %205, %212, %202\n  %215 = phi i32* [ %0, %212 ], [ %198, %202 ], [ %207, %205 ]\n  store i32 %199, i32* %215, align 4, !tbaa !10\n  %216 = getelementptr inbounds i32, i32* %0, i64 10\n  %217 = load i32, i32* %216, align 4, !tbaa !10\n  %218 = load i32, i32* %0, align 4, !tbaa !10\n  %219 = icmp slt i32 %217, %218\n  br i1 %219, label %230, label %220\n\n220:                                              ; preds = %214\n  %221 = load i32, i32* %198, align 4, !tbaa !10\n  %222 = icmp slt i32 %217, %221\n  br i1 %222, label %223, label %232\n\n223:                                              ; preds = %220, %223\n  %224 = phi i32 [ %228, %223 ], [ %221, %220 ]\n  %225 = phi i32* [ %227, %223 ], [ %198, %220 ]\n  %226 = phi i32* [ %225, %223 ], [ %216, %220 ]\n  store i32 %224, i32* %226, align 4, !tbaa !10\n  %227 = getelementptr inbounds i32, i32* %225, i64 -1\n  %228 = load i32, i32* %227, align 4, !tbaa !10\n  %229 = icmp slt i32 %217, %228\n  br i1 %229, label %223, label %232, !llvm.loop !24\n\n230:                                              ; preds = %214\n  %231 = bitcast i32* %9 to i8*\n  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* noundef nonnull align 4 dereferenceable(40) %231, i8* noundef nonnull align 4 dereferenceable(40) %8, i64 40, i1 false) #8\n  br label %232\n\n232:                                              ; preds = %223, %230, %220\n  %233 = phi i32* [ %0, %230 ], [ %216, %220 ], [ %225, %223 ]\n  store i32 %217, i32* %233, align 4, !tbaa !10\n  %234 = getelementptr inbounds i32, i32* %0, i64 11\n  %235 = load i32, i32* %234, align 4, !tbaa !10\n  %236 = load i32, i32* %0, align 4, !tbaa !10\n  %237 = icmp slt i32 %235, %236\n  br i1 %237, label %248, label %238\n\n238:                                              ; preds = %232\n  %239 = load i32, i32* %216, align 4, !tbaa !10\n  %240 = icmp slt i32 %235, %239\n  br i1 %240, label %241, label %250\n\n241:                                              ; preds = %238, %241\n  %242 = phi i32 [ %246, %241 ], [ %239, %238 ]\n  %243 = phi i32* [ %245, %241 ], [ %216, %238 ]\n  %244 = phi i32* [ %243, %241 ], [ %234, %238 ]\n  store i32 %242, i32* %244, align 4, !tbaa !10\n  %245 = getelementptr inbounds i32, i32* %243, i64 -1\n  %246 = load i32, i32* %245, align 4, !tbaa !10\n  %247 = icmp slt i32 %235, %246\n  br i1 %247, label %241, label %250, !llvm.loop !24\n\n248:                                              ; preds = %232\n  %249 = bitcast i32* %9 to i8*\n  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* noundef nonnull align 4 dereferenceable(44) %249, i8* noundef nonnull align 4 dereferenceable(44) %8, i64 44, i1 false) #8\n  br label %250\n\n250:                                              ; preds = %241, %248, %238\n  %251 = phi i32* [ %0, %248 ], [ %234, %238 ], [ %243, %241 ]\n  store i32 %235, i32* %251, align 4, !tbaa !10\n  %252 = getelementptr inbounds i32, i32* %0, i64 12\n  %253 = load i32, i32* %252, align 4, !tbaa !10\n  %254 = load i32, i32* %0, align 4, !tbaa !10\n  %255 = icmp slt i32 %253, %254\n  br i1 %255, label %266, label %256\n\n256:                                              ; preds = %250\n  %257 = load i32, i32* %234, align 4, !tbaa !10\n  %258 = icmp slt i32 %253, %257\n  br i1 %258, label %259, label %268\n\n259:                                              ; preds = %256, %259\n  %260 = phi i32 [ %264, %259 ], [ %257, %256 ]\n  %261 = phi i32* [ %263, %259 ], [ %234, %256 ]\n  %262 = phi i32* [ %261, %259 ], [ %252, %256 ]\n  store i32 %260, i32* %262, align 4, !tbaa !10\n  %263 = getelementptr inbounds i32, i32* %261, i64 -1\n  %264 = load i32, i32* %263, align 4, !tbaa !10\n  %265 = icmp slt i32 %253, %264\n  br i1 %265, label %259, label %268, !llvm.loop !24\n\n266:                                              ; preds = %250\n  %267 = bitcast i32* %9 to i8*\n  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* noundef nonnull align 4 dereferenceable(48) %267, i8* noundef nonnull align 4 dereferenceable(48) %8, i64 48, i1 false) #8\n  br label %268\n\n268:                                              ; preds = %259, %266, %256\n  %269 = phi i32* [ %0, %266 ], [ %252, %256 ], [ %261, %259 ]\n  store i32 %253, i32* %269, align 4, !tbaa !10\n  %270 = getelementptr inbounds i32, i32* %0, i64 13\n  %271 = load i32, i32* %270, align 4, !tbaa !10\n  %272 = load i32, i32* %0, align 4, !tbaa !10\n  %273 = icmp slt i32 %271, %272\n  br i1 %273, label %284, label %274\n\n274:                                              ; preds = %268\n  %275 = load i32, i32* %252, align 4, !tbaa !10\n  %276 = icmp slt i32 %271, %275\n  br i1 %276, label %277, label %286\n\n277:                                              ; preds = %274, %277\n  %278 = phi i32 [ %282, %277 ], [ %275, %274 ]\n  %279 = phi i32* [ %281, %277 ], [ %252, %274 ]\n  %280 = phi i32* [ %279, %277 ], [ %270, %274 ]\n  store i32 %278, i32* %280, align 4, !tbaa !10\n  %281 = getelementptr inbounds i32, i32* %279, i64 -1\n  %282 = load i32, i32* %281, align 4, !tbaa !10\n  %283 = icmp slt i32 %271, %282\n  br i1 %283, label %277, label %286, !llvm.loop !24\n\n284:                                              ; preds = %268\n  %285 = bitcast i32* %9 to i8*\n  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* noundef nonnull align 4 dereferenceable(52) %285, i8* noundef nonnull align 4 dereferenceable(52) %8, i64 52, i1 false) #8\n  br label %286\n\n286:                                              ; preds = %277, %284, %274\n  %287 = phi i32* [ %0, %284 ], [ %270, %274 ], [ %279, %277 ]\n  store i32 %271, i32* %287, align 4, !tbaa !10\n  %288 = getelementptr inbounds i32, i32* %0, i64 14\n  %289 = load i32, i32* %288, align 4, !tbaa !10\n  %290 = load i32, i32* %0, align 4, !tbaa !10\n  %291 = icmp slt i32 %289, %290\n  br i1 %291, label %302, label %292\n\n292:                                              ; preds = %286\n  %293 = load i32, i32* %270, align 4, !tbaa !10\n  %294 = icmp slt i32 %289, %293\n  br i1 %294, label %295, label %304\n\n295:                                              ; preds = %292, %295\n  %296 = phi i32 [ %300, %295 ], [ %293, %292 ]\n  %297 = phi i32* [ %299, %295 ], [ %270, %292 ]\n  %298 = phi i32* [ %297, %295 ], [ %288, %292 ]\n  store i32 %296, i32* %298, align 4, !tbaa !10\n  %299 = getelementptr inbounds i32, i32* %297, i64 -1\n  %300 = load i32, i32* %299, align 4, !tbaa !10\n  %301 = icmp slt i32 %289, %300\n  br i1 %301, label %295, label %304, !llvm.loop !24\n\n302:                                              ; preds = %286\n  %303 = bitcast i32* %9 to i8*\n  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* noundef nonnull align 4 dereferenceable(56) %303, i8* noundef nonnull align 4 dereferenceable(56) %8, i64 56, i1 false) #8\n  br label %304\n\n304:                                              ; preds = %295, %302, %292\n  %305 = phi i32* [ %0, %302 ], [ %288, %292 ], [ %297, %295 ]\n  store i32 %289, i32* %305, align 4, !tbaa !10\n  %306 = getelementptr inbounds i32, i32* %0, i64 15\n  %307 = load i32, i32* %306, align 4, !tbaa !10\n  %308 = load i32, i32* %0, align 4, !tbaa !10\n  %309 = icmp slt i32 %307, %308\n  br i1 %309, label %320, label %310\n\n310:                                              ; preds = %304\n  %311 = load i32, i32* %288, align 4, !tbaa !10\n  %312 = icmp slt i32 %307, %311\n  br i1 %312, label %313, label %322\n\n313:                                              ; preds = %310, %313\n  %314 = phi i32 [ %318, %313 ], [ %311, %310 ]\n  %315 = phi i32* [ %317, %313 ], [ %288, %310 ]\n  %316 = phi i32* [ %315, %313 ], [ %306, %310 ]\n  store i32 %314, i32* %316, align 4, !tbaa !10\n  %317 = getelementptr inbounds i32, i32* %315, i64 -1\n  %318 = load i32, i32* %317, align 4, !tbaa !10\n  %319 = icmp slt i32 %307, %318\n  br i1 %319, label %313, label %322, !llvm.loop !24\n\n320:                                              ; preds = %304\n  %321 = bitcast i32* %9 to i8*\n  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* noundef nonnull align 4 dereferenceable(60) %321, i8* noundef nonnull align 4 dereferenceable(60) %8, i64 60, i1 false) #8\n  br label %322\n\n322:                                              ; preds = %313, %320, %310\n  %323 = phi i32* [ %0, %320 ], [ %306, %310 ], [ %315, %313 ]\n  store i32 %307, i32* %323, align 4, !tbaa !10\n  %324 = getelementptr inbounds i32, i32* %0, i64 16\n  %325 = icmp eq i32* %324, %1\n  br i1 %325, label %73, label %21\n}\n\n; Function Attrs: uwtable\ndefine linkonce_odr dso_local void @_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEENS0_5__ops15_Iter_less_iterEEvT_S9_RT0_(i32* %0, i32* %1, %\"struct.__gnu_cxx::__ops::_Iter_less_iter\"* nonnull align 1 dereferenceable(1) %2) local_unnamed_addr #0 comdat {\n  %4 = ptrtoint i32* %1 to i64\n  %5 = ptrtoint i32* %0 to i64\n  %6 = sub i64 %4, %5\n  %7 = ashr exact i64 %6, 2\n  %8 = icmp slt i64 %6, 8\n  br i1 %8, label %100, label %9\n\n9:                                                ; preds = %3\n  %10 = add nsw i64 %7, -2\n  %11 = lshr i64 %10, 1\n  %12 = add nsw i64 %7, -1\n  %13 = sdiv i64 %12, 2\n  %14 = and i64 %6, 4\n  %15 = icmp eq i64 %14, 0\n  br i1 %15, label %16, label %20\n\n16:                                               ; preds = %9\n  %17 = or i64 %10, 1\n  %18 = getelementptr inbounds i32, i32* %0, i64 %17\n  %19 = getelementptr inbounds i32, i32* %0, i64 %11\n  br label %57\n\n20:                                               ; preds = %9, %52\n  %21 = phi i64 [ %56, %52 ], [ %11, %9 ]\n  %22 = getelementptr inbounds i32, i32* %0, i64 %21\n  %23 = load i32, i32* %22, align 4, !tbaa !10\n  %24 = icmp sgt i64 %13, %21\n  br i1 %24, label %25, label %52\n\n25:                                               ; preds = %20, %25\n  %26 = phi i64 [ %35, %25 ], [ %21, %20 ]\n  %27 = shl i64 %26, 1\n  %28 = add i64 %27, 2\n  %29 = getelementptr inbounds i32, i32* %0, i64 %28\n  %30 = or i64 %27, 1\n  %31 = getelementptr inbounds i32, i32* %0, i64 %30\n  %32 = load i32, i32* %29, align 4, !tbaa !10\n  %33 = load i32, i32* %31, align 4, !tbaa !10\n  %34 = icmp slt i32 %32, %33\n  %35 = select i1 %34, i64 %30, i64 %28\n  %36 = getelementptr inbounds i32, i32* %0, i64 %35\n  %37 = load i32, i32* %36, align 4, !tbaa !10\n  %38 = getelementptr inbounds i32, i32* %0, i64 %26\n  store i32 %37, i32* %38, align 4, !tbaa !10\n  %39 = icmp slt i64 %35, %13\n  br i1 %39, label %25, label %40, !llvm.loop !17\n\n40:                                               ; preds = %25\n  %41 = icmp sgt i64 %35, %21\n  br i1 %41, label %42, label %52\n\n42:                                               ; preds = %40, %49\n  %43 = phi i64 [ %45, %49 ], [ %35, %40 ]\n  %44 = add nsw i64 %43, -1\n  %45 = sdiv i64 %44, 2\n  %46 = getelementptr inbounds i32, i32* %0, i64 %45\n  %47 = load i32, i32* %46, align 4, !tbaa !10\n  %48 = icmp slt i32 %47, %23\n  br i1 %48, label %49, label %52\n\n49:                                               ; preds = %42\n  %50 = getelementptr inbounds i32, i32* %0, i64 %43\n  store i32 %47, i32* %50, align 4, !tbaa !10\n  %51 = icmp sgt i64 %45, %21\n  br i1 %51, label %42, label %52, !llvm.loop !18\n\n52:                                               ; preds = %42, %49, %20, %40\n  %53 = phi i64 [ %35, %40 ], [ %21, %20 ], [ %45, %49 ], [ %43, %42 ]\n  %54 = getelementptr inbounds i32, i32* %0, i64 %53\n  store i32 %23, i32* %54, align 4, !tbaa !10\n  %55 = icmp eq i64 %21, 0\n  %56 = add nsw i64 %21, -1\n  br i1 %55, label %100, label %20, !llvm.loop !27\n\n57:                                               ; preds = %16, %95\n  %58 = phi i64 [ %99, %95 ], [ %11, %16 ]\n  %59 = getelementptr inbounds i32, i32* %0, i64 %58\n  %60 = load i32, i32* %59, align 4, !tbaa !10\n  %61 = icmp sgt i64 %13, %58\n  br i1 %61, label %62, label %77\n\n62:                                               ; preds = %57, %62\n  %63 = phi i64 [ %72, %62 ], [ %58, %57 ]\n  %64 = shl i64 %63, 1\n  %65 = add i64 %64, 2\n  %66 = getelementptr inbounds i32, i32* %0, i64 %65\n  %67 = or i64 %64, 1\n  %68 = getelementptr inbounds i32, i32* %0, i64 %67\n  %69 = load i32, i32* %66, align 4, !tbaa !10\n  %70 = load i32, i32* %68, align 4, !tbaa !10\n  %71 = icmp slt i32 %69, %70\n  %72 = select i1 %71, i64 %67, i64 %65\n  %73 = getelementptr inbounds i32, i32* %0, i64 %72\n  %74 = load i32, i32* %73, align 4, !tbaa !10\n  %75 = getelementptr inbounds i32, i32* %0, i64 %63\n  store i32 %74, i32* %75, align 4, !tbaa !10\n  %76 = icmp slt i64 %72, %13\n  br i1 %76, label %62, label %77, !llvm.loop !17\n\n77:                                               ; preds = %62, %57\n  %78 = phi i64 [ %58, %57 ], [ %72, %62 ]\n  %79 = icmp eq i64 %78, %11\n  br i1 %79, label %80, label %82\n\n80:                                               ; preds = %77\n  %81 = load i32, i32* %18, align 4, !tbaa !10\n  store i32 %81, i32* %19, align 4, !tbaa !10\n  br label %82\n\n82:                                               ; preds = %80, %77\n  %83 = phi i64 [ %17, %80 ], [ %78, %77 ]\n  %84 = icmp sgt i64 %83, %58\n  br i1 %84, label %85, label %95\n\n85:                                               ; preds = %82, %92\n  %86 = phi i64 [ %88, %92 ], [ %83, %82 ]\n  %87 = add nsw i64 %86, -1\n  %88 = sdiv i64 %87, 2\n  %89 = getelementptr inbounds i32, i32* %0, i64 %88\n  %90 = load i32, i32* %89, align 4, !tbaa !10\n  %91 = icmp slt i32 %90, %60\n  br i1 %91, label %92, label %95\n\n92:                                               ; preds = %85\n  %93 = getelementptr inbounds i32, i32* %0, i64 %86\n  store i32 %90, i32* %93, align 4, !tbaa !10\n  %94 = icmp sgt i64 %88, %58\n  br i1 %94, label %85, label %95, !llvm.loop !18\n\n95:                                               ; preds = %85, %92, %82\n  %96 = phi i64 [ %83, %82 ], [ %88, %92 ], [ %86, %85 ]\n  %97 = getelementptr inbounds i32, i32* %0, i64 %96\n  store i32 %60, i32* %97, align 4, !tbaa !10\n  %98 = icmp eq i64 %58, 0\n  %99 = add nsw i64 %58, -1\n  br i1 %98, label %100, label %57, !llvm.loop !27\n\n100:                                              ; preds = %52, %95, %3\n  ret void\n}\n\n; Function Attrs: mustprogress nofree nosync nounwind readnone speculatable willreturn\ndeclare i64 @llvm.ctlz.i64(i64, i1 immarg) #7\n\nattributes #0 = { uwtable \"frame-pointer\"=\"none\" \"min-legal-vector-width\"=\"0\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #1 = { argmemonly mustprogress nofree nounwind willreturn writeonly }\nattributes #2 = { argmemonly mustprogress nofree nosync nounwind willreturn }\nattributes #3 = { nobuiltin nounwind \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #4 = { noreturn \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #5 = { nobuiltin allocsize(0) \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #6 = { argmemonly mustprogress nofree nounwind willreturn }\nattributes #7 = { mustprogress nofree nosync nounwind readnone speculatable willreturn }\nattributes #8 = { nounwind }\nattributes #9 = { noreturn }\nattributes #10 = { allocsize(0) }\n\n!llvm.module.flags = !{!0, !1}\n!llvm.ident = !{!2}\n\n!0 = !{i32 1, !\"wchar_size\", i32 4}\n!1 = !{i32 7, !\"uwtable\", i32 1}\n!2 = !{!\"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)\"}\n!3 = !{!4, !5, i64 8}\n!4 = !{!\"_ZTSNSt12_Vector_baseIiSaIiEE17_Vector_impl_dataE\", !5, i64 0, !5, i64 8, !5, i64 16}\n!5 = !{!\"any pointer\", !6, i64 0}\n!6 = !{!\"omnipotent char\", !7, i64 0}\n!7 = !{!\"Simple C++ TBAA\"}\n!8 = !{!4, !5, i64 0}\n!9 = !{i64 0, i64 65}\n!10 = !{!11, !11, i64 0}\n!11 = !{!\"int\", !6, i64 0}\n!12 = distinct !{!12, !13}\n!13 = !{!\"llvm.loop.mustprogress\"}\n!14 = !{!5, !5, i64 0}\n!15 = !{!4, !5, i64 16}\n!16 = distinct !{!16, !13}\n!17 = distinct !{!17, !13}\n!18 = distinct !{!18, !13}\n!19 = distinct !{!19, !13}\n!20 = distinct !{!20, !13}\n!21 = distinct !{!21, !13}\n!22 = distinct !{!22, !13}\n!23 = distinct !{!23, !13}\n!24 = distinct !{!24, !13}\n!25 = distinct !{!25, !13}\n!26 = distinct !{!26, !13}\n!27 = distinct !{!27, !13}\n", "target": "This is the targeted source code:\n/*\nReturn sorted unique common elements for two vectors.\n>>> common({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n{1, 5, 653}\n>>> common({5, 3, 2, 8}, {3, 2})\n{2, 3}\n\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> common(vector<int> l1,vector<int> l2){\n\n    vector<int> out={};\n    for (int i=0;i<l1.size();i++)\n        if (find(out.begin(),out.end(),l1[i])==out.end())\n            if (find(l2.begin(),l2.end(),l1[i])!=l2.end())\n                out.push_back(l1[i]);\n    sort(out.begin(),out.end());\n    return out;\n}\n"}
{"input": "Convert this to C++:\n; ModuleID = '../../Human_xBenchmarks_164/CPP_59/CPP_59.cpp'\nsource_filename = \"../../Human_xBenchmarks_164/CPP_59/CPP_59.cpp\"\ntarget datalayout = \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\ntarget triple = \"x86_64-unknown-linux-gnu\"\n\n; Function Attrs: mustprogress nofree norecurse nosync nounwind readnone uwtable willreturn\ndefine dso_local i32 @_Z20largest_prime_factori(i32 %0) local_unnamed_addr #0 {\n  %2 = icmp slt i32 %0, 4\n  br i1 %2, label %10, label %3\n\n3:                                                ; preds = %1, %19\n  %4 = phi i32 [ %21, %19 ], [ 2, %1 ]\n  %5 = phi i32 [ %20, %19 ], [ %0, %1 ]\n  %6 = srem i32 %5, %4\n  %7 = icmp eq i32 %6, 0\n  %8 = icmp sgt i32 %5, %4\n  %9 = and i1 %8, %7\n  br i1 %9, label %12, label %19\n\n10:                                               ; preds = %19, %1\n  %11 = phi i32 [ %0, %1 ], [ %20, %19 ]\n  ret i32 %11\n\n12:                                               ; preds = %3, %12\n  %13 = phi i32 [ %14, %12 ], [ %5, %3 ]\n  %14 = sdiv i32 %13, %4\n  %15 = srem i32 %14, %4\n  %16 = icmp eq i32 %15, 0\n  %17 = icmp sgt i32 %14, %4\n  %18 = and i1 %17, %16\n  br i1 %18, label %12, label %19, !llvm.loop !3\n\n19:                                               ; preds = %12, %3\n  %20 = phi i32 [ %5, %3 ], [ %14, %12 ]\n  %21 = add nuw nsw i32 %4, 1\n  %22 = mul nsw i32 %21, %21\n  %23 = icmp sgt i32 %22, %20\n  br i1 %23, label %10, label %3, !llvm.loop !5\n}\n\nattributes #0 = { mustprogress nofree norecurse nosync nounwind readnone uwtable willreturn \"frame-pointer\"=\"none\" \"min-legal-vector-width\"=\"0\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\n\n!llvm.module.flags = !{!0, !1}\n!llvm.ident = !{!2}\n\n!0 = !{i32 1, !\"wchar_size\", i32 4}\n!1 = !{i32 7, !\"uwtable\", i32 1}\n!2 = !{!\"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)\"}\n!3 = distinct !{!3, !4}\n!4 = !{!\"llvm.loop.mustprogress\"}\n!5 = distinct !{!5, !4}\n", "target": "This is the targeted source code:\n/*\nReturn the largest prime factor of n. Assume n > 1 and is not a prime.\n>>> largest_prime_factor(13195)\n29\n>>> largest_prime_factor(2048)\n2\n*/\n#include<stdio.h>\nusing namespace std;\nint largest_prime_factor(int n){\n\n    for (int i=2;i*i<=n;i++)\n    while (n%i==0 and n>i)  n=n/i;\n    return n;\n}\n"}
{"input": "Convert this to C++:\n; ModuleID = '../../Human_xBenchmarks_164/CPP_60/CPP_60.cpp'\nsource_filename = \"../../Human_xBenchmarks_164/CPP_60/CPP_60.cpp\"\ntarget datalayout = \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\ntarget triple = \"x86_64-unknown-linux-gnu\"\n\n; Function Attrs: mustprogress nofree norecurse nosync nounwind readnone uwtable willreturn\ndefine dso_local i32 @_Z8sum_to_ni(i32 %0) local_unnamed_addr #0 {\n  %2 = add nsw i32 %0, 1\n  %3 = mul nsw i32 %2, %0\n  %4 = sdiv i32 %3, 2\n  ret i32 %4\n}\n\nattributes #0 = { mustprogress nofree norecurse nosync nounwind readnone uwtable willreturn \"frame-pointer\"=\"none\" \"min-legal-vector-width\"=\"0\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\n\n!llvm.module.flags = !{!0, !1}\n!llvm.ident = !{!2}\n\n!0 = !{i32 1, !\"wchar_size\", i32 4}\n!1 = !{i32 7, !\"uwtable\", i32 1}\n!2 = !{!\"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)\"}\n", "target": "This is the targeted source code:\n/*\nsum_to_n is a function that sums numbers from 1 to n.\n>>> sum_to_n(30)\n465\n>>> sum_to_n(100)\n5050\n>>> sum_to_n(5)\n15\n>>> sum_to_n(10)\n55\n>>> sum_to_n(1)\n1\n*/\n#include<stdio.h>\nusing namespace std;\nint sum_to_n(int n){\n\n    return n*(n+1)/2;\n}\n"}
{"input": "Convert this to C++:\n; ModuleID = '../../Human_xBenchmarks_164/CPP_61/CPP_61.cpp'\nsource_filename = \"../../Human_xBenchmarks_164/CPP_61/CPP_61.cpp\"\ntarget datalayout = \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\ntarget triple = \"x86_64-unknown-linux-gnu\"\n\n%\"class.std::__cxx11::basic_string\" = type { %\"struct.std::__cxx11::basic_string<char>::_Alloc_hider\", i64, %union.anon }\n%\"struct.std::__cxx11::basic_string<char>::_Alloc_hider\" = type { i8* }\n%union.anon = type { i64, [8 x i8] }\n\n; Function Attrs: mustprogress nofree norecurse nosync nounwind readonly uwtable willreturn\ndefine dso_local zeroext i1 @_Z18correct_bracketingNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE(%\"class.std::__cxx11::basic_string\"* nocapture readonly %0) local_unnamed_addr #0 {\n  %2 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 1\n  %3 = load i64, i64* %2, align 8, !tbaa !3\n  %4 = icmp eq i64 %3, 0\n  br i1 %4, label %25, label %5\n\n5:                                                ; preds = %1\n  %6 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 0, i32 0\n  %7 = load i8*, i8** %6, align 8, !tbaa !10\n  br label %10\n\n8:                                                ; preds = %10\n  %9 = icmp eq i64 %22, %3\n  br i1 %9, label %23, label %10, !llvm.loop !11\n\n10:                                               ; preds = %5, %8\n  %11 = phi i64 [ 0, %5 ], [ %22, %8 ]\n  %12 = phi i32 [ 0, %5 ], [ %20, %8 ]\n  %13 = getelementptr inbounds i8, i8* %7, i64 %11\n  %14 = load i8, i8* %13, align 1, !tbaa !13\n  %15 = icmp eq i8 %14, 40\n  %16 = zext i1 %15 to i32\n  %17 = add nuw nsw i32 %12, %16\n  %18 = icmp eq i8 %14, 41\n  %19 = sext i1 %18 to i32\n  %20 = add nsw i32 %17, %19\n  %21 = icmp slt i32 %20, 0\n  %22 = add nuw i64 %11, 1\n  br i1 %21, label %25, label %8\n\n23:                                               ; preds = %8\n  %24 = icmp eq i32 %20, 0\n  br label %25\n\n25:                                               ; preds = %10, %1, %23\n  %26 = phi i1 [ true, %1 ], [ %24, %23 ], [ false, %10 ]\n  ret i1 %26\n}\n\nattributes #0 = { mustprogress nofree norecurse nosync nounwind readonly uwtable willreturn \"frame-pointer\"=\"none\" \"min-legal-vector-width\"=\"0\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\n\n!llvm.module.flags = !{!0, !1}\n!llvm.ident = !{!2}\n\n!0 = !{i32 1, !\"wchar_size\", i32 4}\n!1 = !{i32 7, !\"uwtable\", i32 1}\n!2 = !{!\"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)\"}\n!3 = !{!4, !9, i64 8}\n!4 = !{!\"_ZTSNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE\", !5, i64 0, !9, i64 8, !7, i64 16}\n!5 = !{!\"_ZTSNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderE\", !6, i64 0}\n!6 = !{!\"any pointer\", !7, i64 0}\n!7 = !{!\"omnipotent char\", !8, i64 0}\n!8 = !{!\"Simple C++ TBAA\"}\n!9 = !{!\"long\", !7, i64 0}\n!10 = !{!4, !6, i64 0}\n!11 = distinct !{!11, !12}\n!12 = !{!\"llvm.loop.mustprogress\"}\n!13 = !{!7, !7, i64 0}\n", "target": "This is the targeted source code:\n/*\nbrackets is a string of '(' and ')'.\nreturn true if every opening bracket has a corresponding closing bracket.\n\n>>> correct_bracketing(\"(\")\nfalse\n>>> correct_bracketing(\"()\")\ntrue\n>>> correct_bracketing(\"(()())\")\ntrue\n>>> correct_bracketing(\")(()\")\nfalse\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool correct_bracketing(string brackets){\n\n    int level=0;\n    for (int i=0;i<brackets.length();i++)\n    {\n        if (brackets[i]=='(') level+=1;\n        if (brackets[i]==')') level-=1;\n        if (level<0) return false;\n    }\n    if (level!=0) return false;\n    return true;\n}\n"}
{"input": "Convert this to C++:\n; ModuleID = '../../Human_xBenchmarks_164/CPP_62/CPP_62.cpp'\nsource_filename = \"../../Human_xBenchmarks_164/CPP_62/CPP_62.cpp\"\ntarget datalayout = \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\ntarget triple = \"x86_64-unknown-linux-gnu\"\n\n%\"class.std::vector\" = type { %\"struct.std::_Vector_base\" }\n%\"struct.std::_Vector_base\" = type { %\"struct.std::_Vector_base<float, std::allocator<float>>::_Vector_impl\" }\n%\"struct.std::_Vector_base<float, std::allocator<float>>::_Vector_impl\" = type { %\"struct.std::_Vector_base<float, std::allocator<float>>::_Vector_impl_data\" }\n%\"struct.std::_Vector_base<float, std::allocator<float>>::_Vector_impl_data\" = type { float*, float*, float* }\n\n@.str = private unnamed_addr constant [26 x i8] c\"vector::_M_realloc_insert\\00\", align 1\n\n; Function Attrs: uwtable\ndefine dso_local void @_Z10derivativeSt6vectorIfSaIfEE(%\"class.std::vector\"* noalias nocapture sret(%\"class.std::vector\") align 8 %0, %\"class.std::vector\"* nocapture readonly %1) local_unnamed_addr #0 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {\n  %3 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %1, i64 0, i32 0, i32 0, i32 0, i32 1\n  %4 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %1, i64 0, i32 0, i32 0, i32 0, i32 0\n  %5 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0, i64 0, i32 0, i32 0, i32 0, i32 1\n  %6 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0, i64 0, i32 0, i32 0, i32 0, i32 2\n  %7 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0, i64 0, i32 0, i32 0, i32 0, i32 0\n  %8 = bitcast %\"class.std::vector\"* %0 to i8*\n  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(24) %8, i8 0, i64 24, i1 false)\n  %9 = load float*, float** %3, align 8, !tbaa !3\n  %10 = load float*, float** %4, align 8, !tbaa !8\n  %11 = ptrtoint float* %9 to i64\n  %12 = ptrtoint float* %10 to i64\n  %13 = sub i64 %11, %12\n  %14 = ashr exact i64 %13, 2\n  %15 = icmp ugt i64 %14, 1\n  br i1 %15, label %16, label %91\n\n16:                                               ; preds = %2, %69\n  %17 = phi float* [ %70, %69 ], [ %10, %2 ]\n  %18 = phi float* [ %71, %69 ], [ %9, %2 ]\n  %19 = phi float* [ %72, %69 ], [ null, %2 ]\n  %20 = phi float* [ %73, %69 ], [ null, %2 ]\n  %21 = phi float* [ %74, %69 ], [ null, %2 ]\n  %22 = phi i64 [ %75, %69 ], [ 1, %2 ]\n  %23 = trunc i64 %22 to i32\n  %24 = sitofp i32 %23 to float\n  %25 = getelementptr inbounds float, float* %17, i64 %22\n  %26 = load float, float* %25, align 4, !tbaa !9\n  %27 = fmul float %26, %24\n  %28 = icmp eq float* %21, %20\n  br i1 %28, label %31, label %29\n\n29:                                               ; preds = %16\n  store float %27, float* %21, align 4, !tbaa !9\n  %30 = getelementptr inbounds float, float* %21, i64 1\n  store float* %30, float** %5, align 8, !tbaa !3\n  br label %69\n\n31:                                               ; preds = %16\n  %32 = ptrtoint float* %20 to i64\n  %33 = ptrtoint float* %19 to i64\n  %34 = sub i64 %32, %33\n  %35 = ashr exact i64 %34, 2\n  %36 = icmp eq i64 %34, 9223372036854775804\n  br i1 %36, label %37, label %39\n\n37:                                               ; preds = %31\n  invoke void @_ZSt20__throw_length_errorPKc(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str, i64 0, i64 0)) #6\n          to label %38 unwind label %83\n\n38:                                               ; preds = %37\n  unreachable\n\n39:                                               ; preds = %31\n  %40 = icmp eq i64 %34, 0\n  %41 = select i1 %40, i64 1, i64 %35\n  %42 = add nsw i64 %41, %35\n  %43 = icmp ult i64 %42, %35\n  %44 = icmp ugt i64 %42, 2305843009213693951\n  %45 = or i1 %43, %44\n  %46 = select i1 %45, i64 2305843009213693951, i64 %42\n  %47 = icmp eq i64 %46, 0\n  br i1 %47, label %53, label %48\n\n48:                                               ; preds = %39\n  %49 = shl nuw nsw i64 %46, 2\n  %50 = invoke noalias nonnull i8* @_Znwm(i64 %49) #7\n          to label %51 unwind label %81\n\n51:                                               ; preds = %48\n  %52 = bitcast i8* %50 to float*\n  br label %53\n\n53:                                               ; preds = %51, %39\n  %54 = phi float* [ %52, %51 ], [ null, %39 ]\n  %55 = getelementptr inbounds float, float* %54, i64 %35\n  store float %27, float* %55, align 4, !tbaa !9\n  %56 = icmp sgt i64 %34, 0\n  br i1 %56, label %57, label %60\n\n57:                                               ; preds = %53\n  %58 = bitcast float* %54 to i8*\n  %59 = bitcast float* %19 to i8*\n  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %58, i8* align 4 %59, i64 %34, i1 false) #8\n  br label %60\n\n60:                                               ; preds = %53, %57\n  %61 = getelementptr inbounds float, float* %55, i64 1\n  %62 = icmp eq float* %19, null\n  br i1 %62, label %65, label %63\n\n63:                                               ; preds = %60\n  %64 = bitcast float* %19 to i8*\n  tail call void @_ZdlPv(i8* nonnull %64) #8\n  br label %65\n\n65:                                               ; preds = %63, %60\n  store float* %54, float** %7, align 8, !tbaa !8\n  store float* %61, float** %5, align 8, !tbaa !3\n  %66 = getelementptr inbounds float, float* %54, i64 %46\n  store float* %66, float** %6, align 8, !tbaa !11\n  %67 = load float*, float** %3, align 8, !tbaa !3\n  %68 = load float*, float** %4, align 8, !tbaa !8\n  br label %69\n\n69:                                               ; preds = %65, %29\n  %70 = phi float* [ %68, %65 ], [ %17, %29 ]\n  %71 = phi float* [ %67, %65 ], [ %18, %29 ]\n  %72 = phi float* [ %54, %65 ], [ %19, %29 ]\n  %73 = phi float* [ %66, %65 ], [ %20, %29 ]\n  %74 = phi float* [ %61, %65 ], [ %30, %29 ]\n  %75 = add nuw i64 %22, 1\n  %76 = ptrtoint float* %71 to i64\n  %77 = ptrtoint float* %70 to i64\n  %78 = sub i64 %76, %77\n  %79 = ashr exact i64 %78, 2\n  %80 = icmp ugt i64 %79, %75\n  br i1 %80, label %16, label %91, !llvm.loop !12\n\n81:                                               ; preds = %48\n  %82 = landingpad { i8*, i32 }\n          cleanup\n  br label %85\n\n83:                                               ; preds = %37\n  %84 = landingpad { i8*, i32 }\n          cleanup\n  br label %85\n\n85:                                               ; preds = %83, %81\n  %86 = phi { i8*, i32 } [ %82, %81 ], [ %84, %83 ]\n  %87 = icmp eq float* %19, null\n  br i1 %87, label %90, label %88\n\n88:                                               ; preds = %85\n  %89 = bitcast float* %19 to i8*\n  tail call void @_ZdlPv(i8* nonnull %89) #8\n  br label %90\n\n90:                                               ; preds = %85, %88\n  resume { i8*, i32 } %86\n\n91:                                               ; preds = %69, %2\n  ret void\n}\n\n; Function Attrs: argmemonly mustprogress nofree nounwind willreturn writeonly\ndeclare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1\n\ndeclare dso_local i32 @__gxx_personality_v0(...)\n\n; Function Attrs: nobuiltin nounwind\ndeclare dso_local void @_ZdlPv(i8*) local_unnamed_addr #2\n\n; Function Attrs: noreturn\ndeclare dso_local void @_ZSt20__throw_length_errorPKc(i8*) local_unnamed_addr #3\n\n; Function Attrs: nobuiltin allocsize(0)\ndeclare dso_local nonnull i8* @_Znwm(i64) local_unnamed_addr #4\n\n; Function Attrs: argmemonly mustprogress nofree nounwind willreturn\ndeclare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #5\n\nattributes #0 = { uwtable \"frame-pointer\"=\"none\" \"min-legal-vector-width\"=\"0\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #1 = { argmemonly mustprogress nofree nounwind willreturn writeonly }\nattributes #2 = { nobuiltin nounwind \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #3 = { noreturn \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #4 = { nobuiltin allocsize(0) \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #5 = { argmemonly mustprogress nofree nounwind willreturn }\nattributes #6 = { noreturn }\nattributes #7 = { allocsize(0) }\nattributes #8 = { nounwind }\n\n!llvm.module.flags = !{!0, !1}\n!llvm.ident = !{!2}\n\n!0 = !{i32 1, !\"wchar_size\", i32 4}\n!1 = !{i32 7, !\"uwtable\", i32 1}\n!2 = !{!\"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)\"}\n!3 = !{!4, !5, i64 8}\n!4 = !{!\"_ZTSNSt12_Vector_baseIfSaIfEE17_Vector_impl_dataE\", !5, i64 0, !5, i64 8, !5, i64 16}\n!5 = !{!\"any pointer\", !6, i64 0}\n!6 = !{!\"omnipotent char\", !7, i64 0}\n!7 = !{!\"Simple C++ TBAA\"}\n!8 = !{!4, !5, i64 0}\n!9 = !{!10, !10, i64 0}\n!10 = !{!\"float\", !6, i64 0}\n!11 = !{!4, !5, i64 16}\n!12 = distinct !{!12, !13}\n!13 = !{!\"llvm.loop.mustprogress\"}\n", "target": "This is the targeted source code:\n/*\nxs represent coefficients of a polynomial.\nxs{0} + xs{1} * x + xs{2} * x^2 + ....\n Return derivative of this polynomial in the same form.\n>>> derivative({3, 1, 2, 4, 5})\n{1, 4, 12, 20}\n>>> derivative({1, 2, 3})\n{2, 6}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nvector<float> derivative(vector<float> xs){\n\n    vector<float> out={};\n    for (int i=1;i<xs.size();i++)\n        out.push_back(i*xs[i]);\n    return out;\n}\n"}
{"input": "Convert this to C++:\n; ModuleID = '../../Human_xBenchmarks_164/CPP_63/CPP_63.cpp'\nsource_filename = \"../../Human_xBenchmarks_164/CPP_63/CPP_63.cpp\"\ntarget datalayout = \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\ntarget triple = \"x86_64-unknown-linux-gnu\"\n\n; Function Attrs: mustprogress nofree nosync nounwind readnone uwtable willreturn\ndefine dso_local i32 @_Z6fibfibi(i32 %0) local_unnamed_addr #0 {\n  %2 = alloca [100 x i32], align 16\n  %3 = bitcast [100 x i32]* %2 to i8*\n  call void @llvm.lifetime.start.p0i8(i64 400, i8* nonnull %3) #2\n  %4 = getelementptr inbounds [100 x i32], [100 x i32]* %2, i64 0, i64 0\n  store i32 0, i32* %4, align 16, !tbaa !3\n  %5 = getelementptr inbounds [100 x i32], [100 x i32]* %2, i64 0, i64 1\n  store i32 0, i32* %5, align 4, !tbaa !3\n  %6 = getelementptr inbounds [100 x i32], [100 x i32]* %2, i64 0, i64 2\n  store i32 1, i32* %6, align 8, !tbaa !3\n  %7 = icmp slt i32 %0, 3\n  br i1 %7, label %31, label %8\n\n8:                                                ; preds = %1\n  %9 = add nuw i32 %0, 1\n  %10 = zext i32 %9 to i64\n  %11 = getelementptr inbounds [100 x i32], [100 x i32]* %2, i64 0, i64 3\n  store i32 1, i32* %11, align 4, !tbaa !3\n  %12 = icmp eq i32 %9, 4\n  br i1 %12, label %31, label %13, !llvm.loop !7\n\n13:                                               ; preds = %8\n  %14 = and i64 %10, 1\n  %15 = icmp eq i32 %9, 5\n  br i1 %15, label %19, label %16\n\n16:                                               ; preds = %13\n  %17 = add nsw i64 %10, -4\n  %18 = and i64 %17, -2\n  br label %35\n\n19:                                               ; preds = %35, %13\n  %20 = phi i64 [ 4, %13 ], [ %54, %35 ]\n  %21 = phi i32 [ 1, %13 ], [ %52, %35 ]\n  %22 = phi i64 [ 2, %13 ], [ %36, %35 ]\n  %23 = phi i32 [ 0, %13 ], [ %50, %35 ]\n  %24 = icmp eq i64 %14, 0\n  br i1 %24, label %31, label %25\n\n25:                                               ; preds = %19\n  %26 = getelementptr inbounds [100 x i32], [100 x i32]* %2, i64 0, i64 %22\n  %27 = load i32, i32* %26, align 8, !tbaa !3\n  %28 = add nsw i32 %27, %21\n  %29 = add nsw i32 %28, %23\n  %30 = getelementptr inbounds [100 x i32], [100 x i32]* %2, i64 0, i64 %20\n  store i32 %29, i32* %30, align 4, !tbaa !3\n  br label %31\n\n31:                                               ; preds = %25, %19, %8, %1\n  %32 = sext i32 %0 to i64\n  %33 = getelementptr inbounds [100 x i32], [100 x i32]* %2, i64 0, i64 %32\n  %34 = load i32, i32* %33, align 4, !tbaa !3\n  call void @llvm.lifetime.end.p0i8(i64 400, i8* nonnull %3) #2\n  ret i32 %34\n\n35:                                               ; preds = %35, %16\n  %36 = phi i64 [ 4, %16 ], [ %54, %35 ]\n  %37 = phi i32 [ 1, %16 ], [ %52, %35 ]\n  %38 = phi i64 [ 3, %16 ], [ %47, %35 ]\n  %39 = phi i32 [ 0, %16 ], [ %50, %35 ]\n  %40 = phi i64 [ %18, %16 ], [ %55, %35 ]\n  %41 = add nsw i64 %38, -1\n  %42 = getelementptr inbounds [100 x i32], [100 x i32]* %2, i64 0, i64 %41\n  %43 = load i32, i32* %42, align 8, !tbaa !3\n  %44 = add nsw i32 %43, %37\n  %45 = add nsw i32 %44, %39\n  %46 = getelementptr inbounds [100 x i32], [100 x i32]* %2, i64 0, i64 %36\n  store i32 %45, i32* %46, align 8, !tbaa !3\n  %47 = or i64 %36, 1\n  %48 = add nsw i64 %36, -1\n  %49 = getelementptr inbounds [100 x i32], [100 x i32]* %2, i64 0, i64 %48\n  %50 = load i32, i32* %49, align 4, !tbaa !3\n  %51 = add nsw i32 %50, %45\n  %52 = add nsw i32 %51, %43\n  %53 = getelementptr inbounds [100 x i32], [100 x i32]* %2, i64 0, i64 %47\n  store i32 %52, i32* %53, align 4, !tbaa !3\n  %54 = add nuw nsw i64 %36, 2\n  %55 = add i64 %40, -2\n  %56 = icmp eq i64 %55, 0\n  br i1 %56, label %19, label %35, !llvm.loop !7\n}\n\n; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn\ndeclare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1\n\n; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn\ndeclare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1\n\nattributes #0 = { mustprogress nofree nosync nounwind readnone uwtable willreturn \"frame-pointer\"=\"none\" \"min-legal-vector-width\"=\"0\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #1 = { argmemonly mustprogress nofree nosync nounwind willreturn }\nattributes #2 = { nounwind }\n\n!llvm.module.flags = !{!0, !1}\n!llvm.ident = !{!2}\n\n!0 = !{i32 1, !\"wchar_size\", i32 4}\n!1 = !{i32 7, !\"uwtable\", i32 1}\n!2 = !{!\"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)\"}\n!3 = !{!4, !4, i64 0}\n!4 = !{!\"int\", !5, i64 0}\n!5 = !{!\"omnipotent char\", !6, i64 0}\n!6 = !{!\"Simple C++ TBAA\"}\n!7 = distinct !{!7, !8}\n!8 = !{!\"llvm.loop.mustprogress\"}\n", "target": "This is the targeted source code:\n/*\nThe FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\nfibfib(0) == 0\nfibfib(1) == 0\nfibfib(2) == 1\nfibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\nPlease write a function to efficiently compute the n-th element of the fibfib number sequence.\n>>> fibfib(1)\n0\n>>> fibfib(5)\n4\n>>> fibfib(8)\n24\n*/\n#include<stdio.h>\nusing namespace std;\nint fibfib(int n){\n\n    int ff[100];\n    ff[0]=0;\n    ff[1]=0;\n    ff[2]=1;\n    for (int i=3;i<=n;i++)\n        ff[i]=ff[i-1]+ff[i-2]+ff[i-3];\n    return ff[n];\n\n}\n"}
{"input": "Convert this to C++:\n; ModuleID = '../../Human_xBenchmarks_164/CPP_64/CPP_64.cpp'\nsource_filename = \"../../Human_xBenchmarks_164/CPP_64/CPP_64.cpp\"\ntarget datalayout = \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\ntarget triple = \"x86_64-unknown-linux-gnu\"\n\n%\"class.std::__cxx11::basic_string\" = type { %\"struct.std::__cxx11::basic_string<char>::_Alloc_hider\", i64, %union.anon }\n%\"struct.std::__cxx11::basic_string<char>::_Alloc_hider\" = type { i8* }\n%union.anon = type { i64, [8 x i8] }\n\n@.str = private unnamed_addr constant [11 x i8] c\"aeiouAEIOU\\00\", align 1\n\n; Function Attrs: uwtable\ndefine dso_local i32 @_Z12vowels_countNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE(%\"class.std::__cxx11::basic_string\"* nocapture readonly %0) local_unnamed_addr #0 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {\n  %2 = alloca %\"class.std::__cxx11::basic_string\", align 8\n  %3 = bitcast %\"class.std::__cxx11::basic_string\"* %2 to i8*\n  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %3) #3\n  %4 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %2, i64 0, i32 2\n  %5 = bitcast %\"class.std::__cxx11::basic_string\"* %2 to %union.anon**\n  store %union.anon* %4, %union.anon** %5, align 8, !tbaa !3\n  %6 = bitcast %union.anon* %4 to i8*\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(10) %6, i8* noundef nonnull align 1 dereferenceable(10) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), i64 10, i1 false) #3\n  %7 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %2, i64 0, i32 1\n  store i64 10, i64* %7, align 8, !tbaa !8\n  %8 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %2, i64 0, i32 2, i32 1, i64 2\n  store i8 0, i8* %8, align 2, !tbaa !11\n  %9 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 1\n  %10 = load i64, i64* %9, align 8, !tbaa !8\n  %11 = icmp eq i64 %10, 0\n  %12 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 0, i32 0\n  %13 = load i8*, i8** %12, align 8, !tbaa !12\n  br i1 %11, label %43, label %14\n\n14:                                               ; preds = %1\n  %15 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %2, i64 0, i32 2, i32 1, i64 0\n  %16 = load i8, i8* %15, align 8\n  %17 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %2, i64 0, i32 2, i32 1, i64 1\n  %18 = load i8, i8* %17, align 1\n  br label %19\n\n19:                                               ; preds = %14, %36\n  %20 = phi i64 [ 0, %14 ], [ %41, %36 ]\n  %21 = phi i32 [ 0, %14 ], [ %40, %36 ]\n  %22 = getelementptr inbounds i8, i8* %13, i64 %20\n  %23 = load i8, i8* %22, align 1, !tbaa !11\n  switch i8 %23, label %24 [\n    i8 97, label %36\n    i8 101, label %29\n    i8 105, label %30\n    i8 111, label %31\n    i8 117, label %32\n    i8 65, label %33\n    i8 69, label %34\n    i8 73, label %35\n  ]\n\n24:                                               ; preds = %19\n  %25 = icmp eq i8 %16, %23\n  br i1 %25, label %36, label %26\n\n26:                                               ; preds = %24\n  %27 = icmp eq i8 %18, %23\n  %28 = select i1 %27, i64 9, i64 10\n  br label %36\n\n29:                                               ; preds = %19\n  br label %36\n\n30:                                               ; preds = %19\n  br label %36\n\n31:                                               ; preds = %19\n  br label %36\n\n32:                                               ; preds = %19\n  br label %36\n\n33:                                               ; preds = %19\n  br label %36\n\n34:                                               ; preds = %19\n  br label %36\n\n35:                                               ; preds = %19\n  br label %36\n\n36:                                               ; preds = %26, %19, %35, %34, %33, %32, %31, %30, %29, %24\n  %37 = phi i64 [ 8, %24 ], [ 0, %19 ], [ 1, %29 ], [ 2, %30 ], [ 3, %31 ], [ 4, %32 ], [ %28, %26 ], [ 5, %33 ], [ 6, %34 ], [ 7, %35 ]\n  %38 = icmp ne i64 %37, 10\n  %39 = zext i1 %38 to i32\n  %40 = add nuw nsw i32 %21, %39\n  %41 = add nuw nsw i64 %20, 1\n  %42 = icmp eq i64 %41, %10\n  br i1 %42, label %43, label %19, !llvm.loop !13\n\n43:                                               ; preds = %36, %1\n  %44 = phi i32 [ 0, %1 ], [ %40, %36 ]\n  %45 = add i64 %10, -1\n  %46 = getelementptr inbounds i8, i8* %13, i64 %45\n  %47 = load i8, i8* %46, align 1, !tbaa !11\n  switch i8 %47, label %50 [\n    i8 121, label %48\n    i8 89, label %48\n  ]\n\n48:                                               ; preds = %43, %43\n  %49 = add nuw nsw i32 %44, 1\n  br label %50\n\n50:                                               ; preds = %48, %43\n  %51 = phi i32 [ %49, %48 ], [ %44, %43 ]\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %3) #3\n  ret i32 %51\n}\n\n; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn\ndeclare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1\n\ndeclare dso_local i32 @__gxx_personality_v0(...)\n\n; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn\ndeclare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1\n\n; Function Attrs: argmemonly mustprogress nofree nounwind willreturn\ndeclare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #2\n\nattributes #0 = { uwtable \"frame-pointer\"=\"none\" \"min-legal-vector-width\"=\"0\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #1 = { argmemonly mustprogress nofree nosync nounwind willreturn }\nattributes #2 = { argmemonly mustprogress nofree nounwind willreturn }\nattributes #3 = { nounwind }\n\n!llvm.module.flags = !{!0, !1}\n!llvm.ident = !{!2}\n\n!0 = !{i32 1, !\"wchar_size\", i32 4}\n!1 = !{i32 7, !\"uwtable\", i32 1}\n!2 = !{!\"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)\"}\n!3 = !{!4, !5, i64 0}\n!4 = !{!\"_ZTSNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderE\", !5, i64 0}\n!5 = !{!\"any pointer\", !6, i64 0}\n!6 = !{!\"omnipotent char\", !7, i64 0}\n!7 = !{!\"Simple C++ TBAA\"}\n!8 = !{!9, !10, i64 8}\n!9 = !{!\"_ZTSNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE\", !4, i64 0, !10, i64 8, !6, i64 16}\n!10 = !{!\"long\", !6, i64 0}\n!11 = !{!6, !6, i64 0}\n!12 = !{!9, !5, i64 0}\n!13 = distinct !{!13, !14}\n!14 = !{!\"llvm.loop.mustprogress\"}\n", "target": "This is the targeted source code:\n/*\nWrite a function vowels_count which takes a string representing a word as input and returns the number of vowels in the string. Vowels in this case are 'a', 'e', 'i', 'o', 'u'. \nHere, 'y' is also a vowel, but only when it is at the end of the given word.\nExample: \n>>> vowels_count(\"abcde\") \n2 \n>>> vowels_count(\"ACEDY\") \n3\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nint vowels_count(string s){\n\n    string vowels=\"aeiouAEIOU\";\n    int count=0;\n    for (int i=0;i<s.length();i++)\n    if (find(vowels.begin(),vowels.end(),s[i])!=vowels.end())\n        count+=1;\n    if (s[s.length()-1]=='y' or s[s.length()-1]=='Y') count+=1;\n    return count;\n}\n"}
{"input": "Convert this to C++:\n; ModuleID = '../../Human_xBenchmarks_164/CPP_65/CPP_65.cpp'\nsource_filename = \"../../Human_xBenchmarks_164/CPP_65/CPP_65.cpp\"\ntarget datalayout = \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\ntarget triple = \"x86_64-unknown-linux-gnu\"\n\n%\"class.std::__cxx11::basic_string\" = type { %\"struct.std::__cxx11::basic_string<char>::_Alloc_hider\", i64, %union.anon }\n%\"struct.std::__cxx11::basic_string<char>::_Alloc_hider\" = type { i8* }\n%union.anon = type { i64, [8 x i8] }\n%struct.__va_list_tag = type { i32, i32, i8*, i8* }\n\n$_ZN9__gnu_cxx12__to_xstringINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcEET_PFiPT0_mPKS8_P13__va_list_tagEmSB_z = comdat any\n\n@.str = private unnamed_addr constant [3 x i8] c\"%d\\00\", align 1\n\n; Function Attrs: uwtable\ndefine dso_local void @_Z14circular_shiftB5cxx11ii(%\"class.std::__cxx11::basic_string\"* noalias sret(%\"class.std::__cxx11::basic_string\") align 8 %0, i32 %1, i32 %2) local_unnamed_addr #0 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {\n  %4 = alloca i64, align 8\n  %5 = alloca i64, align 8\n  %6 = alloca i64, align 8\n  %7 = alloca %\"class.std::__cxx11::basic_string\", align 8\n  %8 = alloca %\"class.std::__cxx11::basic_string\", align 8\n  %9 = alloca %\"class.std::__cxx11::basic_string\", align 8\n  %10 = alloca %\"class.std::__cxx11::basic_string\", align 8\n  %11 = alloca %\"class.std::__cxx11::basic_string\", align 8\n  %12 = bitcast %\"class.std::__cxx11::basic_string\"* %7 to i8*\n  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %12) #8\n  %13 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %7, i64 0, i32 2\n  %14 = bitcast %\"class.std::__cxx11::basic_string\"* %7 to %union.anon**\n  store %union.anon* %13, %union.anon** %14, align 8, !tbaa !3\n  %15 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %7, i64 0, i32 1\n  store i64 0, i64* %15, align 8, !tbaa !8\n  %16 = bitcast %union.anon* %13 to i8*\n  store i8 0, i8* %16, align 8, !tbaa !11\n  %17 = bitcast %\"class.std::__cxx11::basic_string\"* %8 to i8*\n  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %17) #8\n  invoke void (%\"class.std::__cxx11::basic_string\"*, i32 (i8*, i64, i8*, %struct.__va_list_tag*)*, i64, i8*, ...) @_ZN9__gnu_cxx12__to_xstringINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcEET_PFiPT0_mPKS8_P13__va_list_tagEmSB_z(%\"class.std::__cxx11::basic_string\"* nonnull sret(%\"class.std::__cxx11::basic_string\") align 8 %8, i32 (i8*, i64, i8*, %struct.__va_list_tag*)* nonnull @vsnprintf, i64 16, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %1)\n          to label %18 unwind label %193\n\n18:                                               ; preds = %3\n  %19 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %7, i64 0, i32 0, i32 0\n  %20 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %8, i64 0, i32 0, i32 0\n  %21 = load i8*, i8** %20, align 8, !tbaa !12\n  %22 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %8, i64 0, i32 2\n  %23 = bitcast %union.anon* %22 to i8*\n  %24 = icmp eq i8* %21, %23\n  br i1 %24, label %25, label %40\n\n25:                                               ; preds = %18\n  %26 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %8, i64 0, i32 1\n  %27 = load i64, i64* %26, align 8, !tbaa !8\n  %28 = icmp eq i64 %27, 0\n  br i1 %28, label %35, label %29\n\n29:                                               ; preds = %25\n  %30 = load i8*, i8** %19, align 8, !tbaa !12\n  %31 = icmp eq i64 %27, 1\n  br i1 %31, label %32, label %34\n\n32:                                               ; preds = %29\n  %33 = load i8, i8* %21, align 1, !tbaa !11\n  store i8 %33, i8* %30, align 1, !tbaa !11\n  br label %35\n\n34:                                               ; preds = %29\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %30, i8* align 1 %21, i64 %27, i1 false) #8\n  br label %35\n\n35:                                               ; preds = %34, %32, %25\n  %36 = load i64, i64* %26, align 8, !tbaa !8\n  store i64 %36, i64* %15, align 8, !tbaa !8\n  %37 = load i8*, i8** %19, align 8, !tbaa !12\n  %38 = getelementptr inbounds i8, i8* %37, i64 %36\n  store i8 0, i8* %38, align 1, !tbaa !11\n  %39 = load i8*, i8** %20, align 8, !tbaa !12\n  br label %55\n\n40:                                               ; preds = %18\n  %41 = load i8*, i8** %19, align 8, !tbaa !12\n  %42 = icmp eq i8* %41, %16\n  %43 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %7, i64 0, i32 2, i32 0\n  %44 = load i64, i64* %43, align 8\n  store i8* %21, i8** %19, align 8, !tbaa !12\n  %45 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %8, i64 0, i32 1\n  %46 = bitcast i64* %45 to <2 x i64>*\n  %47 = load <2 x i64>, <2 x i64>* %46, align 8, !tbaa !11\n  %48 = bitcast i64* %15 to <2 x i64>*\n  store <2 x i64> %47, <2 x i64>* %48, align 8, !tbaa !11\n  %49 = icmp eq i8* %41, null\n  %50 = or i1 %42, %49\n  br i1 %50, label %53, label %51\n\n51:                                               ; preds = %40\n  store i8* %41, i8** %20, align 8, !tbaa !12\n  %52 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %8, i64 0, i32 2, i32 0\n  store i64 %44, i64* %52, align 8, !tbaa !11\n  br label %55\n\n53:                                               ; preds = %40\n  %54 = bitcast %\"class.std::__cxx11::basic_string\"* %8 to %union.anon**\n  store %union.anon* %22, %union.anon** %54, align 8, !tbaa !12\n  br label %55\n\n55:                                               ; preds = %35, %51, %53\n  %56 = phi i8* [ %39, %35 ], [ %41, %51 ], [ %23, %53 ]\n  %57 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %8, i64 0, i32 1\n  store i64 0, i64* %57, align 8, !tbaa !8\n  store i8 0, i8* %56, align 1, !tbaa !11\n  %58 = load i8*, i8** %20, align 8, !tbaa !12\n  %59 = icmp eq i8* %58, %23\n  br i1 %59, label %61, label %60\n\n60:                                               ; preds = %55\n  call void @_ZdlPv(i8* %58) #8\n  br label %61\n\n61:                                               ; preds = %55, %60\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %17) #8\n  %62 = load i64, i64* %15, align 8, !tbaa !8\n  %63 = sext i32 %2 to i64\n  %64 = icmp ult i64 %62, %63\n  br i1 %64, label %65, label %197\n\n65:                                               ; preds = %61\n  %66 = load i8*, i8** %19, align 8, !tbaa !12, !noalias !13\n  %67 = ptrtoint i8* %66 to i64\n  %68 = getelementptr inbounds i8, i8* %66, i64 %62\n  %69 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 2\n  %70 = bitcast %\"class.std::__cxx11::basic_string\"* %0 to %union.anon**\n  store %union.anon* %69, %union.anon** %70, align 8, !tbaa !3\n  %71 = bitcast i64* %6 to i8*\n  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %71) #8\n  store i64 %62, i64* %6, align 8, !tbaa !16\n  %72 = icmp ugt i64 %62, 15\n  br i1 %72, label %73, label %79\n\n73:                                               ; preds = %65\n  %74 = invoke i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %0, i64* nonnull align 8 dereferenceable(8) %6, i64 0)\n          to label %75 unwind label %195\n\n75:                                               ; preds = %73\n  %76 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 0, i32 0\n  store i8* %74, i8** %76, align 8, !tbaa !12\n  %77 = load i64, i64* %6, align 8, !tbaa !16\n  %78 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 2, i32 0\n  store i64 %77, i64* %78, align 8, !tbaa !11\n  br label %82\n\n79:                                               ; preds = %65\n  %80 = bitcast %union.anon* %69 to i8*\n  %81 = icmp eq i64 %62, 0\n  br i1 %81, label %369, label %82\n\n82:                                               ; preds = %75, %79\n  %83 = phi i8* [ %74, %75 ], [ %80, %79 ]\n  %84 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 0, i32 0\n  %85 = icmp ult i64 %62, 4\n  br i1 %85, label %140, label %86\n\n86:                                               ; preds = %82\n  %87 = getelementptr i8, i8* %83, i64 %62\n  %88 = icmp ult i8* %83, %68\n  %89 = icmp ult i8* %66, %87\n  %90 = and i1 %88, %89\n  br i1 %90, label %140, label %91\n\n91:                                               ; preds = %86\n  %92 = icmp ult i64 %62, 32\n  br i1 %92, label %121, label %93\n\n93:                                               ; preds = %91\n  %94 = and i64 %62, -32\n  br label %95\n\n95:                                               ; preds = %95, %93\n  %96 = phi i64 [ 0, %93 ], [ %111, %95 ]\n  %97 = getelementptr i8, i8* %83, i64 %96\n  %98 = xor i64 %96, -1\n  %99 = getelementptr i8, i8* %68, i64 %98\n  %100 = getelementptr inbounds i8, i8* %99, i64 -15\n  %101 = bitcast i8* %100 to <16 x i8>*\n  %102 = load <16 x i8>, <16 x i8>* %101, align 1, !tbaa !11, !alias.scope !17\n  %103 = shufflevector <16 x i8> %102, <16 x i8> poison, <16 x i32> <i32 15, i32 14, i32 13, i32 12, i32 11, i32 10, i32 9, i32 8, i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0>\n  %104 = getelementptr inbounds i8, i8* %99, i64 -31\n  %105 = bitcast i8* %104 to <16 x i8>*\n  %106 = load <16 x i8>, <16 x i8>* %105, align 1, !tbaa !11, !alias.scope !17\n  %107 = shufflevector <16 x i8> %106, <16 x i8> poison, <16 x i32> <i32 15, i32 14, i32 13, i32 12, i32 11, i32 10, i32 9, i32 8, i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0>\n  %108 = bitcast i8* %97 to <16 x i8>*\n  store <16 x i8> %103, <16 x i8>* %108, align 1, !tbaa !11, !alias.scope !20, !noalias !17\n  %109 = getelementptr i8, i8* %97, i64 16\n  %110 = bitcast i8* %109 to <16 x i8>*\n  store <16 x i8> %107, <16 x i8>* %110, align 1, !tbaa !11, !alias.scope !20, !noalias !17\n  %111 = add nuw i64 %96, 32\n  %112 = icmp eq i64 %111, %94\n  br i1 %112, label %113, label %95, !llvm.loop !22\n\n113:                                              ; preds = %95\n  %114 = icmp eq i64 %62, %94\n  br i1 %114, label %190, label %115\n\n115:                                              ; preds = %113\n  %116 = getelementptr i8, i8* %83, i64 %94\n  %117 = sub i64 0, %94\n  %118 = getelementptr i8, i8* %68, i64 %117\n  %119 = and i64 %62, 28\n  %120 = icmp eq i64 %119, 0\n  br i1 %120, label %140, label %121\n\n121:                                              ; preds = %91, %115\n  %122 = phi i64 [ %94, %115 ], [ 0, %91 ]\n  %123 = and i64 %62, -4\n  %124 = sub i64 0, %123\n  %125 = getelementptr i8, i8* %68, i64 %124\n  %126 = getelementptr i8, i8* %83, i64 %123\n  br label %127\n\n127:                                              ; preds = %127, %121\n  %128 = phi i64 [ %122, %121 ], [ %136, %127 ]\n  %129 = getelementptr i8, i8* %83, i64 %128\n  %130 = sub nuw nsw i64 -4, %128\n  %131 = getelementptr i8, i8* %68, i64 %130\n  %132 = bitcast i8* %131 to <4 x i8>*\n  %133 = load <4 x i8>, <4 x i8>* %132, align 1, !tbaa !11\n  %134 = shufflevector <4 x i8> %133, <4 x i8> poison, <4 x i32> <i32 3, i32 2, i32 1, i32 0>\n  %135 = bitcast i8* %129 to <4 x i8>*\n  store <4 x i8> %134, <4 x i8>* %135, align 1, !tbaa !11\n  %136 = add nuw i64 %128, 4\n  %137 = icmp eq i64 %136, %123\n  br i1 %137, label %138, label %127, !llvm.loop !25\n\n138:                                              ; preds = %127\n  %139 = icmp eq i64 %62, %123\n  br i1 %139, label %190, label %140\n\n140:                                              ; preds = %86, %82, %115, %138\n  %141 = phi i8* [ %68, %82 ], [ %68, %86 ], [ %118, %115 ], [ %125, %138 ]\n  %142 = phi i8* [ %83, %82 ], [ %83, %86 ], [ %116, %115 ], [ %126, %138 ]\n  %143 = ptrtoint i8* %141 to i64\n  %144 = sub i64 %143, %67\n  %145 = xor i64 %67, -1\n  %146 = add i64 %145, %143\n  %147 = and i64 %144, 7\n  %148 = icmp eq i64 %147, 0\n  br i1 %148, label %158, label %149\n\n149:                                              ; preds = %140, %149\n  %150 = phi i8* [ %153, %149 ], [ %141, %140 ]\n  %151 = phi i8* [ %155, %149 ], [ %142, %140 ]\n  %152 = phi i64 [ %156, %149 ], [ %147, %140 ]\n  %153 = getelementptr inbounds i8, i8* %150, i64 -1\n  %154 = load i8, i8* %153, align 1, !tbaa !11\n  store i8 %154, i8* %151, align 1, !tbaa !11\n  %155 = getelementptr inbounds i8, i8* %151, i64 1\n  %156 = add i64 %152, -1\n  %157 = icmp eq i64 %156, 0\n  br i1 %157, label %158, label %149, !llvm.loop !26\n\n158:                                              ; preds = %149, %140\n  %159 = phi i8* [ %141, %140 ], [ %153, %149 ]\n  %160 = phi i8* [ %142, %140 ], [ %155, %149 ]\n  %161 = icmp ult i64 %146, 7\n  br i1 %161, label %190, label %162\n\n162:                                              ; preds = %158, %162\n  %163 = phi i8* [ %186, %162 ], [ %159, %158 ]\n  %164 = phi i8* [ %188, %162 ], [ %160, %158 ]\n  %165 = getelementptr inbounds i8, i8* %163, i64 -1\n  %166 = load i8, i8* %165, align 1, !tbaa !11\n  store i8 %166, i8* %164, align 1, !tbaa !11\n  %167 = getelementptr inbounds i8, i8* %164, i64 1\n  %168 = getelementptr inbounds i8, i8* %163, i64 -2\n  %169 = load i8, i8* %168, align 1, !tbaa !11\n  store i8 %169, i8* %167, align 1, !tbaa !11\n  %170 = getelementptr inbounds i8, i8* %164, i64 2\n  %171 = getelementptr inbounds i8, i8* %163, i64 -3\n  %172 = load i8, i8* %171, align 1, !tbaa !11\n  store i8 %172, i8* %170, align 1, !tbaa !11\n  %173 = getelementptr inbounds i8, i8* %164, i64 3\n  %174 = getelementptr inbounds i8, i8* %163, i64 -4\n  %175 = load i8, i8* %174, align 1, !tbaa !11\n  store i8 %175, i8* %173, align 1, !tbaa !11\n  %176 = getelementptr inbounds i8, i8* %164, i64 4\n  %177 = getelementptr inbounds i8, i8* %163, i64 -5\n  %178 = load i8, i8* %177, align 1, !tbaa !11\n  store i8 %178, i8* %176, align 1, !tbaa !11\n  %179 = getelementptr inbounds i8, i8* %164, i64 5\n  %180 = getelementptr inbounds i8, i8* %163, i64 -6\n  %181 = load i8, i8* %180, align 1, !tbaa !11\n  store i8 %181, i8* %179, align 1, !tbaa !11\n  %182 = getelementptr inbounds i8, i8* %164, i64 6\n  %183 = getelementptr inbounds i8, i8* %163, i64 -7\n  %184 = load i8, i8* %183, align 1, !tbaa !11\n  store i8 %184, i8* %182, align 1, !tbaa !11\n  %185 = getelementptr inbounds i8, i8* %164, i64 7\n  %186 = getelementptr inbounds i8, i8* %163, i64 -8\n  %187 = load i8, i8* %186, align 1, !tbaa !11\n  store i8 %187, i8* %185, align 1, !tbaa !11\n  %188 = getelementptr inbounds i8, i8* %164, i64 8\n  %189 = icmp eq i8* %186, %66\n  br i1 %189, label %190, label %162, !llvm.loop !28\n\n190:                                              ; preds = %158, %162, %138, %113\n  %191 = load i64, i64* %6, align 8, !tbaa !16\n  %192 = load i8*, i8** %84, align 8, !tbaa !12\n  br label %369\n\n193:                                              ; preds = %3\n  %194 = landingpad { i8*, i32 }\n          cleanup\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %17) #8\n  br label %378\n\n195:                                              ; preds = %73\n  %196 = landingpad { i8*, i32 }\n          cleanup\n  br label %378\n\n197:                                              ; preds = %61\n  %198 = bitcast %\"class.std::__cxx11::basic_string\"* %9 to i8*\n  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %198) #8\n  %199 = bitcast %\"class.std::__cxx11::basic_string\"* %10 to i8*\n  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %199) #8\n  %200 = sub i64 %62, %63\n  call void @llvm.experimental.noalias.scope.decl(metadata !29)\n  %201 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %10, i64 0, i32 2\n  %202 = bitcast %\"class.std::__cxx11::basic_string\"* %10 to %union.anon**\n  store %union.anon* %201, %union.anon** %202, align 8, !tbaa !3, !alias.scope !29\n  %203 = bitcast %union.anon* %201 to i8*\n  %204 = load i8*, i8** %19, align 8, !tbaa !12, !noalias !29\n  %205 = getelementptr inbounds i8, i8* %204, i64 %200\n  %206 = bitcast i64* %5 to i8*\n  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %206) #8, !noalias !29\n  store i64 %63, i64* %5, align 8, !tbaa !16, !noalias !29\n  %207 = icmp ugt i32 %2, 15\n  br i1 %207, label %208, label %214\n\n208:                                              ; preds = %197\n  %209 = invoke i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %10, i64* nonnull align 8 dereferenceable(8) %5, i64 0)\n          to label %210 unwind label %353\n\n210:                                              ; preds = %208\n  %211 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %10, i64 0, i32 0, i32 0\n  store i8* %209, i8** %211, align 8, !tbaa !12, !alias.scope !29\n  %212 = load i64, i64* %5, align 8, !tbaa !16, !noalias !29\n  %213 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %10, i64 0, i32 2, i32 0\n  store i64 %212, i64* %213, align 8, !tbaa !11, !alias.scope !29\n  br label %214\n\n214:                                              ; preds = %210, %197\n  %215 = phi i8* [ %209, %210 ], [ %203, %197 ]\n  switch i64 %63, label %218 [\n    i64 1, label %216\n    i64 0, label %219\n  ]\n\n216:                                              ; preds = %214\n  %217 = load i8, i8* %205, align 1, !tbaa !11\n  store i8 %217, i8* %215, align 1, !tbaa !11\n  br label %219\n\n218:                                              ; preds = %214\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %215, i8* align 1 %205, i64 %63, i1 false) #8\n  br label %219\n\n219:                                              ; preds = %218, %216, %214\n  %220 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %10, i64 0, i32 0, i32 0\n  %221 = load i64, i64* %5, align 8, !tbaa !16, !noalias !29\n  %222 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %10, i64 0, i32 1\n  store i64 %221, i64* %222, align 8, !tbaa !8, !alias.scope !29\n  %223 = load i8*, i8** %220, align 8, !tbaa !12, !alias.scope !29\n  %224 = getelementptr inbounds i8, i8* %223, i64 %221\n  store i8 0, i8* %224, align 1, !tbaa !11\n  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %206) #8, !noalias !29\n  %225 = bitcast %\"class.std::__cxx11::basic_string\"* %11 to i8*\n  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %225) #8\n  %226 = load i64, i64* %15, align 8, !tbaa !8\n  %227 = sub i64 %226, %63\n  call void @llvm.experimental.noalias.scope.decl(metadata !32)\n  %228 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %11, i64 0, i32 2\n  %229 = bitcast %\"class.std::__cxx11::basic_string\"* %11 to %union.anon**\n  store %union.anon* %228, %union.anon** %229, align 8, !tbaa !3, !alias.scope !32\n  %230 = bitcast %union.anon* %228 to i8*\n  %231 = load i8*, i8** %19, align 8, !tbaa !12, !noalias !32\n  %232 = icmp ugt i64 %226, %227\n  %233 = select i1 %232, i64 %227, i64 %226\n  %234 = bitcast i64* %4 to i8*\n  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %234) #8, !noalias !32\n  store i64 %233, i64* %4, align 8, !tbaa !16, !noalias !32\n  %235 = icmp ugt i64 %233, 15\n  br i1 %235, label %236, label %242\n\n236:                                              ; preds = %219\n  %237 = invoke i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %11, i64* nonnull align 8 dereferenceable(8) %4, i64 0)\n          to label %238 unwind label %355\n\n238:                                              ; preds = %236\n  %239 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %11, i64 0, i32 0, i32 0\n  store i8* %237, i8** %239, align 8, !tbaa !12, !alias.scope !32\n  %240 = load i64, i64* %4, align 8, !tbaa !16, !noalias !32\n  %241 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %11, i64 0, i32 2, i32 0\n  store i64 %240, i64* %241, align 8, !tbaa !11, !alias.scope !32\n  br label %242\n\n242:                                              ; preds = %238, %219\n  %243 = phi i8* [ %237, %238 ], [ %230, %219 ]\n  switch i64 %233, label %246 [\n    i64 1, label %244\n    i64 0, label %247\n  ]\n\n244:                                              ; preds = %242\n  %245 = load i8, i8* %231, align 1, !tbaa !11\n  store i8 %245, i8* %243, align 1, !tbaa !11\n  br label %247\n\n246:                                              ; preds = %242\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %243, i8* align 1 %231, i64 %233, i1 false) #8\n  br label %247\n\n247:                                              ; preds = %246, %244, %242\n  %248 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %11, i64 0, i32 0, i32 0\n  %249 = load i64, i64* %4, align 8, !tbaa !16, !noalias !32\n  %250 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %11, i64 0, i32 1\n  store i64 %249, i64* %250, align 8, !tbaa !8, !alias.scope !32\n  %251 = load i8*, i8** %248, align 8, !tbaa !12, !alias.scope !32\n  %252 = getelementptr inbounds i8, i8* %251, i64 %249\n  store i8 0, i8* %252, align 1, !tbaa !11\n  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %234) #8, !noalias !32\n  call void @llvm.experimental.noalias.scope.decl(metadata !35)\n  %253 = load i64, i64* %222, align 8, !tbaa !8, !noalias !35\n  %254 = load i64, i64* %250, align 8, !tbaa !8, !noalias !35\n  %255 = add i64 %254, %253\n  %256 = load i8*, i8** %220, align 8, !tbaa !12, !noalias !35\n  %257 = icmp eq i8* %256, %203\n  %258 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %10, i64 0, i32 2, i32 0\n  %259 = load i64, i64* %258, align 8, !noalias !35\n  %260 = select i1 %257, i64 15, i64 %259\n  %261 = icmp ugt i64 %255, %260\n  %262 = load i8*, i8** %248, align 8, !tbaa !12, !noalias !35\n  br i1 %261, label %263, label %271\n\n263:                                              ; preds = %247\n  %264 = icmp eq i8* %262, %230\n  %265 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %11, i64 0, i32 2, i32 0\n  %266 = load i64, i64* %265, align 8, !noalias !35\n  %267 = select i1 %264, i64 15, i64 %266\n  %268 = icmp ugt i64 %255, %267\n  br i1 %268, label %271, label %269\n\n269:                                              ; preds = %263\n  %270 = invoke nonnull align 8 dereferenceable(32) %\"class.std::__cxx11::basic_string\"* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %11, i64 0, i64 0, i8* %256, i64 %253)\n          to label %273 unwind label %357\n\n271:                                              ; preds = %263, %247\n  %272 = invoke nonnull align 8 dereferenceable(32) %\"class.std::__cxx11::basic_string\"* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %10, i8* %262, i64 %254)\n          to label %273 unwind label %357\n\n273:                                              ; preds = %271, %269\n  %274 = phi %\"class.std::__cxx11::basic_string\"* [ %270, %269 ], [ %272, %271 ]\n  %275 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %9, i64 0, i32 2\n  %276 = bitcast %\"class.std::__cxx11::basic_string\"* %9 to %union.anon**\n  store %union.anon* %275, %union.anon** %276, align 8, !tbaa !3, !alias.scope !35\n  %277 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %274, i64 0, i32 0, i32 0\n  %278 = load i8*, i8** %277, align 8, !tbaa !12\n  %279 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %274, i64 0, i32 2\n  %280 = bitcast %union.anon* %279 to i8*\n  %281 = icmp eq i8* %278, %280\n  br i1 %281, label %282, label %284\n\n282:                                              ; preds = %273\n  %283 = bitcast %union.anon* %275 to i8*\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(16) %283, i8* noundef nonnull align 8 dereferenceable(16) %278, i64 16, i1 false) #8\n  br label %289\n\n284:                                              ; preds = %273\n  %285 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %9, i64 0, i32 0, i32 0\n  store i8* %278, i8** %285, align 8, !tbaa !12, !alias.scope !35\n  %286 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %274, i64 0, i32 2, i32 0\n  %287 = load i64, i64* %286, align 8, !tbaa !11\n  %288 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %9, i64 0, i32 2, i32 0\n  store i64 %287, i64* %288, align 8, !tbaa !11, !alias.scope !35\n  br label %289\n\n289:                                              ; preds = %284, %282\n  %290 = bitcast %union.anon* %275 to i8*\n  %291 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %274, i64 0, i32 1\n  %292 = load i64, i64* %291, align 8, !tbaa !8\n  %293 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %9, i64 0, i32 1\n  store i64 %292, i64* %293, align 8, !tbaa !8, !alias.scope !35\n  %294 = bitcast %\"class.std::__cxx11::basic_string\"* %274 to %union.anon**\n  store %union.anon* %279, %union.anon** %294, align 8, !tbaa !12\n  store i64 0, i64* %291, align 8, !tbaa !8\n  store i8 0, i8* %280, align 8, !tbaa !11\n  %295 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %9, i64 0, i32 0, i32 0\n  %296 = load i8*, i8** %295, align 8, !tbaa !12\n  %297 = icmp eq i8* %296, %290\n  br i1 %297, label %298, label %312\n\n298:                                              ; preds = %289\n  %299 = load i64, i64* %293, align 8, !tbaa !8\n  %300 = icmp eq i64 %299, 0\n  br i1 %300, label %307, label %301\n\n301:                                              ; preds = %298\n  %302 = load i8*, i8** %19, align 8, !tbaa !12\n  %303 = icmp eq i64 %299, 1\n  br i1 %303, label %304, label %306\n\n304:                                              ; preds = %301\n  %305 = load i8, i8* %290, align 8, !tbaa !11\n  store i8 %305, i8* %302, align 1, !tbaa !11\n  br label %307\n\n306:                                              ; preds = %301\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %302, i8* nonnull align 8 %290, i64 %299, i1 false) #8\n  br label %307\n\n307:                                              ; preds = %306, %304, %298\n  %308 = load i64, i64* %293, align 8, !tbaa !8\n  store i64 %308, i64* %15, align 8, !tbaa !8\n  %309 = load i8*, i8** %19, align 8, !tbaa !12\n  %310 = getelementptr inbounds i8, i8* %309, i64 %308\n  store i8 0, i8* %310, align 1, !tbaa !11\n  %311 = load i8*, i8** %295, align 8, !tbaa !12\n  br label %325\n\n312:                                              ; preds = %289\n  %313 = load i8*, i8** %19, align 8, !tbaa !12\n  %314 = icmp eq i8* %313, %16\n  %315 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %7, i64 0, i32 2, i32 0\n  %316 = load i64, i64* %315, align 8\n  store i8* %296, i8** %19, align 8, !tbaa !12\n  %317 = bitcast i64* %293 to <2 x i64>*\n  %318 = load <2 x i64>, <2 x i64>* %317, align 8, !tbaa !11\n  %319 = bitcast i64* %15 to <2 x i64>*\n  store <2 x i64> %318, <2 x i64>* %319, align 8, !tbaa !11\n  %320 = icmp eq i8* %313, null\n  %321 = or i1 %314, %320\n  br i1 %321, label %324, label %322\n\n322:                                              ; preds = %312\n  store i8* %313, i8** %295, align 8, !tbaa !12\n  %323 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %9, i64 0, i32 2, i32 0\n  store i64 %316, i64* %323, align 8, !tbaa !11\n  br label %325\n\n324:                                              ; preds = %312\n  store %union.anon* %275, %union.anon** %276, align 8, !tbaa !12\n  br label %325\n\n325:                                              ; preds = %307, %322, %324\n  %326 = phi i8* [ %311, %307 ], [ %313, %322 ], [ %290, %324 ]\n  store i64 0, i64* %293, align 8, !tbaa !8\n  store i8 0, i8* %326, align 1, !tbaa !11\n  %327 = load i8*, i8** %295, align 8, !tbaa !12\n  %328 = icmp eq i8* %327, %290\n  br i1 %328, label %330, label %329\n\n329:                                              ; preds = %325\n  call void @_ZdlPv(i8* %327) #8\n  br label %330\n\n330:                                              ; preds = %325, %329\n  %331 = load i8*, i8** %248, align 8, !tbaa !12\n  %332 = icmp eq i8* %331, %230\n  br i1 %332, label %334, label %333\n\n333:                                              ; preds = %330\n  call void @_ZdlPv(i8* %331) #8\n  br label %334\n\n334:                                              ; preds = %330, %333\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %225) #8\n  %335 = load i8*, i8** %220, align 8, !tbaa !12\n  %336 = icmp eq i8* %335, %203\n  br i1 %336, label %338, label %337\n\n337:                                              ; preds = %334\n  call void @_ZdlPv(i8* %335) #8\n  br label %338\n\n338:                                              ; preds = %334, %337\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %199) #8\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %198) #8\n  %339 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 2\n  %340 = bitcast %\"class.std::__cxx11::basic_string\"* %0 to %union.anon**\n  store %union.anon* %339, %union.anon** %340, align 8, !tbaa !3\n  %341 = load i8*, i8** %19, align 8, !tbaa !12\n  %342 = icmp eq i8* %341, %16\n  br i1 %342, label %343, label %345\n\n343:                                              ; preds = %338\n  %344 = bitcast %union.anon* %339 to i8*\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(16) %344, i8* noundef nonnull align 8 dereferenceable(16) %16, i64 16, i1 false) #8\n  br label %350\n\n345:                                              ; preds = %338\n  %346 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 0, i32 0\n  store i8* %341, i8** %346, align 8, !tbaa !12\n  %347 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %7, i64 0, i32 2, i32 0\n  %348 = load i64, i64* %347, align 8, !tbaa !11\n  %349 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 2, i32 0\n  store i64 %348, i64* %349, align 8, !tbaa !11\n  br label %350\n\n350:                                              ; preds = %345, %343\n  %351 = load i64, i64* %15, align 8, !tbaa !8\n  %352 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 1\n  store i64 %351, i64* %352, align 8, !tbaa !8\n  store %union.anon* %13, %union.anon** %14, align 8, !tbaa !12\n  br label %377\n\n353:                                              ; preds = %208\n  %354 = landingpad { i8*, i32 }\n          cleanup\n  br label %367\n\n355:                                              ; preds = %236\n  %356 = landingpad { i8*, i32 }\n          cleanup\n  br label %362\n\n357:                                              ; preds = %271, %269\n  %358 = landingpad { i8*, i32 }\n          cleanup\n  %359 = load i8*, i8** %248, align 8, !tbaa !12\n  %360 = icmp eq i8* %359, %230\n  br i1 %360, label %362, label %361\n\n361:                                              ; preds = %357\n  call void @_ZdlPv(i8* %359) #8\n  br label %362\n\n362:                                              ; preds = %361, %357, %355\n  %363 = phi { i8*, i32 } [ %356, %355 ], [ %358, %357 ], [ %358, %361 ]\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %225) #8\n  %364 = load i8*, i8** %220, align 8, !tbaa !12\n  %365 = icmp eq i8* %364, %203\n  br i1 %365, label %367, label %366\n\n366:                                              ; preds = %362\n  call void @_ZdlPv(i8* %364) #8\n  br label %367\n\n367:                                              ; preds = %366, %362, %353\n  %368 = phi { i8*, i32 } [ %354, %353 ], [ %363, %362 ], [ %363, %366 ]\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %199) #8\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %198) #8\n  br label %378\n\n369:                                              ; preds = %79, %190\n  %370 = phi i8* [ %192, %190 ], [ %80, %79 ]\n  %371 = phi i64 [ %191, %190 ], [ 0, %79 ]\n  %372 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 1\n  store i64 %371, i64* %372, align 8, !tbaa !8\n  %373 = getelementptr inbounds i8, i8* %370, i64 %371\n  store i8 0, i8* %373, align 1, !tbaa !11\n  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %71) #8\n  %374 = load i8*, i8** %19, align 8, !tbaa !12\n  %375 = icmp eq i8* %374, %16\n  br i1 %375, label %377, label %376\n\n376:                                              ; preds = %369\n  call void @_ZdlPv(i8* %374) #8\n  br label %377\n\n377:                                              ; preds = %350, %369, %376\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %12) #8\n  ret void\n\n378:                                              ; preds = %367, %195, %193\n  %379 = phi { i8*, i32 } [ %196, %195 ], [ %368, %367 ], [ %194, %193 ]\n  %380 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %7, i64 0, i32 0, i32 0\n  %381 = load i8*, i8** %380, align 8, !tbaa !12\n  %382 = icmp eq i8* %381, %16\n  br i1 %382, label %384, label %383\n\n383:                                              ; preds = %378\n  call void @_ZdlPv(i8* %381) #8\n  br label %384\n\n384:                                              ; preds = %378, %383\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %12) #8\n  resume { i8*, i32 } %379\n}\n\n; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn\ndeclare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1\n\ndeclare dso_local i32 @__gxx_personality_v0(...)\n\n; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn\ndeclare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1\n\n; Function Attrs: uwtable\ndefine linkonce_odr dso_local void @_ZN9__gnu_cxx12__to_xstringINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcEET_PFiPT0_mPKS8_P13__va_list_tagEmSB_z(%\"class.std::__cxx11::basic_string\"* noalias sret(%\"class.std::__cxx11::basic_string\") align 8 %0, i32 (i8*, i64, i8*, %struct.__va_list_tag*)* %1, i64 %2, i8* %3, ...) local_unnamed_addr #0 comdat personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {\n  %5 = alloca i64, align 8\n  %6 = alloca [1 x %struct.__va_list_tag], align 16\n  %7 = alloca i8, i64 %2, align 16\n  %8 = bitcast [1 x %struct.__va_list_tag]* %6 to i8*\n  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %8) #8\n  %9 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %6, i64 0, i64 0\n  call void @llvm.va_start(i8* nonnull %8)\n  %10 = call i32 %1(i8* nonnull %7, i64 %2, i8* %3, %struct.__va_list_tag* nonnull %9)\n  call void @llvm.va_end(i8* nonnull %8)\n  %11 = sext i32 %10 to i64\n  %12 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 2\n  %13 = bitcast %\"class.std::__cxx11::basic_string\"* %0 to %union.anon**\n  store %union.anon* %12, %union.anon** %13, align 8, !tbaa !3\n  %14 = bitcast %union.anon* %12 to i8*\n  %15 = bitcast i64* %5 to i8*\n  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %15) #8\n  store i64 %11, i64* %5, align 8, !tbaa !16\n  %16 = icmp ugt i32 %10, 15\n  br i1 %16, label %17, label %22\n\n17:                                               ; preds = %4\n  %18 = call i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %0, i64* nonnull align 8 dereferenceable(8) %5, i64 0)\n  %19 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 0, i32 0\n  store i8* %18, i8** %19, align 8, !tbaa !12\n  %20 = load i64, i64* %5, align 8, !tbaa !16\n  %21 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 2, i32 0\n  store i64 %20, i64* %21, align 8, !tbaa !11\n  br label %22\n\n22:                                               ; preds = %17, %4\n  %23 = phi i8* [ %18, %17 ], [ %14, %4 ]\n  switch i64 %11, label %26 [\n    i64 1, label %24\n    i64 0, label %27\n  ]\n\n24:                                               ; preds = %22\n  %25 = load i8, i8* %7, align 16, !tbaa !11\n  store i8 %25, i8* %23, align 1, !tbaa !11\n  br label %27\n\n26:                                               ; preds = %22\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %23, i8* nonnull align 16 %7, i64 %11, i1 false) #8\n  br label %27\n\n27:                                               ; preds = %26, %24, %22\n  %28 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 0, i32 0\n  %29 = load i64, i64* %5, align 8, !tbaa !16\n  %30 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 1\n  store i64 %29, i64* %30, align 8, !tbaa !8\n  %31 = load i8*, i8** %28, align 8, !tbaa !12\n  %32 = getelementptr inbounds i8, i8* %31, i64 %29\n  store i8 0, i8* %32, align 1, !tbaa !11\n  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %15) #8\n  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %8) #8\n  ret void\n}\n\n; Function Attrs: nofree nounwind\ndeclare dso_local noundef i32 @vsnprintf(i8* nocapture noundef, i64 noundef, i8* nocapture noundef readonly, %struct.__va_list_tag* noundef) #2\n\n; Function Attrs: mustprogress nofree nosync nounwind willreturn\ndeclare void @llvm.va_start(i8*) #3\n\n; Function Attrs: mustprogress nofree nosync nounwind willreturn\ndeclare void @llvm.va_end(i8*) #3\n\ndeclare dso_local i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32), i64* nonnull align 8 dereferenceable(8), i64) local_unnamed_addr #4\n\n; Function Attrs: argmemonly mustprogress nofree nounwind willreturn\ndeclare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #5\n\n; Function Attrs: nobuiltin nounwind\ndeclare dso_local void @_ZdlPv(i8*) local_unnamed_addr #6\n\ndeclare dso_local nonnull align 8 dereferenceable(32) %\"class.std::__cxx11::basic_string\"* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32), i64, i64, i8*, i64) local_unnamed_addr #4\n\ndeclare dso_local nonnull align 8 dereferenceable(32) %\"class.std::__cxx11::basic_string\"* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32), i8*, i64) local_unnamed_addr #4\n\n; Function Attrs: inaccessiblememonly nofree nosync nounwind willreturn\ndeclare void @llvm.experimental.noalias.scope.decl(metadata) #7\n\nattributes #0 = { uwtable \"frame-pointer\"=\"none\" \"min-legal-vector-width\"=\"0\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #1 = { argmemonly mustprogress nofree nosync nounwind willreturn }\nattributes #2 = { nofree nounwind \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #3 = { mustprogress nofree nosync nounwind willreturn }\nattributes #4 = { \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #5 = { argmemonly mustprogress nofree nounwind willreturn }\nattributes #6 = { nobuiltin nounwind \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #7 = { inaccessiblememonly nofree nosync nounwind willreturn }\nattributes #8 = { nounwind }\n\n!llvm.module.flags = !{!0, !1}\n!llvm.ident = !{!2}\n\n!0 = !{i32 1, !\"wchar_size\", i32 4}\n!1 = !{i32 7, !\"uwtable\", i32 1}\n!2 = !{!\"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)\"}\n!3 = !{!4, !5, i64 0}\n!4 = !{!\"_ZTSNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderE\", !5, i64 0}\n!5 = !{!\"any pointer\", !6, i64 0}\n!6 = !{!\"omnipotent char\", !7, i64 0}\n!7 = !{!\"Simple C++ TBAA\"}\n!8 = !{!9, !10, i64 8}\n!9 = !{!\"_ZTSNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE\", !4, i64 0, !10, i64 8, !6, i64 16}\n!10 = !{!\"long\", !6, i64 0}\n!11 = !{!6, !6, i64 0}\n!12 = !{!9, !5, i64 0}\n!13 = !{!14}\n!14 = distinct !{!14, !15, !\"_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6rbeginEv: argument 0\"}\n!15 = distinct !{!15, !\"_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6rbeginEv\"}\n!16 = !{!10, !10, i64 0}\n!17 = !{!18}\n!18 = distinct !{!18, !19}\n!19 = distinct !{!19, !\"LVerDomain\"}\n!20 = !{!21}\n!21 = distinct !{!21, !19}\n!22 = distinct !{!22, !23, !24}\n!23 = !{!\"llvm.loop.mustprogress\"}\n!24 = !{!\"llvm.loop.isvectorized\", i32 1}\n!25 = distinct !{!25, !23, !24}\n!26 = distinct !{!26, !27}\n!27 = !{!\"llvm.loop.unroll.disable\"}\n!28 = distinct !{!28, !23, !24}\n!29 = !{!30}\n!30 = distinct !{!30, !31, !\"_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEmm: argument 0\"}\n!31 = distinct !{!31, !\"_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEmm\"}\n!32 = !{!33}\n!33 = distinct !{!33, !34, !\"_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEmm: argument 0\"}\n!34 = distinct !{!34, !\"_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEmm\"}\n!35 = !{!36}\n!36 = distinct !{!36, !37, !\"_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_S9_: argument 0\"}\n!37 = distinct !{!37, !\"_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_S9_\"}\n", "target": "This is the targeted source code:\n/*\nCircular shift the digits of the integer x, shift the digits right by shift\nand return the result as a string.\nIf shift > number of digits, return digits reversed.\n>>> circular_shift(12, 1)\n\"21\"\n>>> circular_shift(12, 2)\n\"12\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring circular_shift(int x,int shift){\n\n    string xs;\n    xs=to_string(x);\n    if (xs.length()<shift)\n    {\n        string s(xs.rbegin(),xs.rend());\n        return s;\n    }\n    xs=xs.substr(xs.length()-shift)+xs.substr(0,xs.length()-shift);\n    return xs;\n}\n"}
{"input": "Convert this to C++:\n; ModuleID = '../../Human_xBenchmarks_164/CPP_66/CPP_66.cpp'\nsource_filename = \"../../Human_xBenchmarks_164/CPP_66/CPP_66.cpp\"\ntarget datalayout = \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\ntarget triple = \"x86_64-unknown-linux-gnu\"\n\n%\"class.std::__cxx11::basic_string\" = type { %\"struct.std::__cxx11::basic_string<char>::_Alloc_hider\", i64, %union.anon }\n%\"struct.std::__cxx11::basic_string<char>::_Alloc_hider\" = type { i8* }\n%union.anon = type { i64, [8 x i8] }\n\n; Function Attrs: mustprogress nofree norecurse nosync nounwind readonly uwtable willreturn\ndefine dso_local i32 @_Z8digitSumNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE(%\"class.std::__cxx11::basic_string\"* nocapture readonly %0) local_unnamed_addr #0 {\n  %2 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 1\n  %3 = load i64, i64* %2, align 8, !tbaa !3\n  %4 = icmp eq i64 %3, 0\n  br i1 %4, label %92, label %5\n\n5:                                                ; preds = %1\n  %6 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 0, i32 0\n  %7 = load i8*, i8** %6, align 8, !tbaa !10\n  %8 = icmp ult i64 %3, 8\n  br i1 %8, label %89, label %9\n\n9:                                                ; preds = %5\n  %10 = and i64 %3, -8\n  %11 = add i64 %10, -8\n  %12 = lshr exact i64 %11, 3\n  %13 = add nuw nsw i64 %12, 1\n  %14 = and i64 %13, 1\n  %15 = icmp eq i64 %11, 0\n  br i1 %15, label %59, label %16\n\n16:                                               ; preds = %9\n  %17 = and i64 %13, 4611686018427387902\n  br label %18\n\n18:                                               ; preds = %18, %16\n  %19 = phi i64 [ 0, %16 ], [ %56, %18 ]\n  %20 = phi <4 x i32> [ zeroinitializer, %16 ], [ %54, %18 ]\n  %21 = phi <4 x i32> [ zeroinitializer, %16 ], [ %55, %18 ]\n  %22 = phi i64 [ %17, %16 ], [ %57, %18 ]\n  %23 = getelementptr inbounds i8, i8* %7, i64 %19\n  %24 = bitcast i8* %23 to <4 x i8>*\n  %25 = load <4 x i8>, <4 x i8>* %24, align 1, !tbaa !11\n  %26 = getelementptr inbounds i8, i8* %23, i64 4\n  %27 = bitcast i8* %26 to <4 x i8>*\n  %28 = load <4 x i8>, <4 x i8>* %27, align 1, !tbaa !11\n  %29 = add <4 x i8> %25, <i8 -65, i8 -65, i8 -65, i8 -65>\n  %30 = add <4 x i8> %28, <i8 -65, i8 -65, i8 -65, i8 -65>\n  %31 = icmp ult <4 x i8> %29, <i8 26, i8 26, i8 26, i8 26>\n  %32 = icmp ult <4 x i8> %30, <i8 26, i8 26, i8 26, i8 26>\n  %33 = select <4 x i1> %31, <4 x i8> %25, <4 x i8> zeroinitializer\n  %34 = select <4 x i1> %32, <4 x i8> %28, <4 x i8> zeroinitializer\n  %35 = zext <4 x i8> %33 to <4 x i32>\n  %36 = zext <4 x i8> %34 to <4 x i32>\n  %37 = add <4 x i32> %20, %35\n  %38 = add <4 x i32> %21, %36\n  %39 = or i64 %19, 8\n  %40 = getelementptr inbounds i8, i8* %7, i64 %39\n  %41 = bitcast i8* %40 to <4 x i8>*\n  %42 = load <4 x i8>, <4 x i8>* %41, align 1, !tbaa !11\n  %43 = getelementptr inbounds i8, i8* %40, i64 4\n  %44 = bitcast i8* %43 to <4 x i8>*\n  %45 = load <4 x i8>, <4 x i8>* %44, align 1, !tbaa !11\n  %46 = add <4 x i8> %42, <i8 -65, i8 -65, i8 -65, i8 -65>\n  %47 = add <4 x i8> %45, <i8 -65, i8 -65, i8 -65, i8 -65>\n  %48 = icmp ult <4 x i8> %46, <i8 26, i8 26, i8 26, i8 26>\n  %49 = icmp ult <4 x i8> %47, <i8 26, i8 26, i8 26, i8 26>\n  %50 = select <4 x i1> %48, <4 x i8> %42, <4 x i8> zeroinitializer\n  %51 = select <4 x i1> %49, <4 x i8> %45, <4 x i8> zeroinitializer\n  %52 = zext <4 x i8> %50 to <4 x i32>\n  %53 = zext <4 x i8> %51 to <4 x i32>\n  %54 = add <4 x i32> %37, %52\n  %55 = add <4 x i32> %38, %53\n  %56 = add nuw i64 %19, 16\n  %57 = add i64 %22, -2\n  %58 = icmp eq i64 %57, 0\n  br i1 %58, label %59, label %18, !llvm.loop !12\n\n59:                                               ; preds = %18, %9\n  %60 = phi <4 x i32> [ undef, %9 ], [ %54, %18 ]\n  %61 = phi <4 x i32> [ undef, %9 ], [ %55, %18 ]\n  %62 = phi i64 [ 0, %9 ], [ %56, %18 ]\n  %63 = phi <4 x i32> [ zeroinitializer, %9 ], [ %54, %18 ]\n  %64 = phi <4 x i32> [ zeroinitializer, %9 ], [ %55, %18 ]\n  %65 = icmp eq i64 %14, 0\n  br i1 %65, label %83, label %66\n\n66:                                               ; preds = %59\n  %67 = getelementptr inbounds i8, i8* %7, i64 %62\n  %68 = bitcast i8* %67 to <4 x i8>*\n  %69 = load <4 x i8>, <4 x i8>* %68, align 1, !tbaa !11\n  %70 = getelementptr inbounds i8, i8* %67, i64 4\n  %71 = bitcast i8* %70 to <4 x i8>*\n  %72 = load <4 x i8>, <4 x i8>* %71, align 1, !tbaa !11\n  %73 = add <4 x i8> %72, <i8 -65, i8 -65, i8 -65, i8 -65>\n  %74 = icmp ult <4 x i8> %73, <i8 26, i8 26, i8 26, i8 26>\n  %75 = select <4 x i1> %74, <4 x i8> %72, <4 x i8> zeroinitializer\n  %76 = zext <4 x i8> %75 to <4 x i32>\n  %77 = add <4 x i32> %64, %76\n  %78 = add <4 x i8> %69, <i8 -65, i8 -65, i8 -65, i8 -65>\n  %79 = icmp ult <4 x i8> %78, <i8 26, i8 26, i8 26, i8 26>\n  %80 = select <4 x i1> %79, <4 x i8> %69, <4 x i8> zeroinitializer\n  %81 = zext <4 x i8> %80 to <4 x i32>\n  %82 = add <4 x i32> %63, %81\n  br label %83\n\n83:                                               ; preds = %59, %66\n  %84 = phi <4 x i32> [ %60, %59 ], [ %82, %66 ]\n  %85 = phi <4 x i32> [ %61, %59 ], [ %77, %66 ]\n  %86 = add <4 x i32> %85, %84\n  %87 = call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %86)\n  %88 = icmp eq i64 %3, %10\n  br i1 %88, label %92, label %89\n\n89:                                               ; preds = %5, %83\n  %90 = phi i64 [ 0, %5 ], [ %10, %83 ]\n  %91 = phi i32 [ 0, %5 ], [ %87, %83 ]\n  br label %94\n\n92:                                               ; preds = %94, %83, %1\n  %93 = phi i32 [ 0, %1 ], [ %87, %83 ], [ %103, %94 ]\n  ret i32 %93\n\n94:                                               ; preds = %89, %94\n  %95 = phi i64 [ %104, %94 ], [ %90, %89 ]\n  %96 = phi i32 [ %103, %94 ], [ %91, %89 ]\n  %97 = getelementptr inbounds i8, i8* %7, i64 %95\n  %98 = load i8, i8* %97, align 1, !tbaa !11\n  %99 = add i8 %98, -65\n  %100 = icmp ult i8 %99, 26\n  %101 = select i1 %100, i8 %98, i8 0\n  %102 = zext i8 %101 to i32\n  %103 = add nuw nsw i32 %96, %102\n  %104 = add nuw nsw i64 %95, 1\n  %105 = icmp eq i64 %104, %3\n  br i1 %105, label %92, label %94, !llvm.loop !15\n}\n\n; Function Attrs: nofree nosync nounwind readnone willreturn\ndeclare i32 @llvm.vector.reduce.add.v4i32(<4 x i32>) #1\n\nattributes #0 = { mustprogress nofree norecurse nosync nounwind readonly uwtable willreturn \"frame-pointer\"=\"none\" \"min-legal-vector-width\"=\"0\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #1 = { nofree nosync nounwind readnone willreturn }\n\n!llvm.module.flags = !{!0, !1}\n!llvm.ident = !{!2}\n\n!0 = !{i32 1, !\"wchar_size\", i32 4}\n!1 = !{i32 7, !\"uwtable\", i32 1}\n!2 = !{!\"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)\"}\n!3 = !{!4, !9, i64 8}\n!4 = !{!\"_ZTSNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE\", !5, i64 0, !9, i64 8, !7, i64 16}\n!5 = !{!\"_ZTSNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderE\", !6, i64 0}\n!6 = !{!\"any pointer\", !7, i64 0}\n!7 = !{!\"omnipotent char\", !8, i64 0}\n!8 = !{!\"Simple C++ TBAA\"}\n!9 = !{!\"long\", !7, i64 0}\n!10 = !{!4, !6, i64 0}\n!11 = !{!7, !7, i64 0}\n!12 = distinct !{!12, !13, !14}\n!13 = !{!\"llvm.loop.mustprogress\"}\n!14 = !{!\"llvm.loop.isvectorized\", i32 1}\n!15 = distinct !{!15, !13, !16, !14}\n!16 = !{!\"llvm.loop.unroll.runtime.disable\"}\n", "target": "This is the targeted source code:\n/*\nTask\nWrite a function that takes a string as input and returns the sum of the upper characters only's\nASCII codes.\n\nExamples:\n    digitSum(\"\") => 0\n    digitSum(\"abAB\") => 131\n    digitSum(\"abcCd\") => 67\n    digitSum(\"helloE\") => 69\n    digitSum(\"woArBld\") => 131\n    digitSum(\"aAaaaXa\") => 153\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nint digitSum(string s){\n\n    int sum=0;\n    for (int i=0;i<s.length();i++)\n        if (s[i]>=65 and s[i]<=90)\n            sum+=s[i];\n    return sum;\n}\n"}
{"input": "Convert this to C++:\n; ModuleID = '../../Human_xBenchmarks_164/CPP_67/CPP_67.cpp'\nsource_filename = \"../../Human_xBenchmarks_164/CPP_67/CPP_67.cpp\"\ntarget datalayout = \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\ntarget triple = \"x86_64-unknown-linux-gnu\"\n\n%\"class.std::__cxx11::basic_string\" = type { %\"struct.std::__cxx11::basic_string<char>::_Alloc_hider\", i64, %union.anon }\n%\"struct.std::__cxx11::basic_string<char>::_Alloc_hider\" = type { i8* }\n%union.anon = type { i64, [8 x i8] }\n\n; Function Attrs: uwtable\ndefine dso_local i32 @_Z18fruit_distributionNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi(%\"class.std::__cxx11::basic_string\"* nocapture readonly %0, i32 %1) local_unnamed_addr #0 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {\n  %3 = alloca i64, align 8\n  %4 = alloca i64, align 8\n  %5 = alloca %\"class.std::__cxx11::basic_string\", align 8\n  %6 = alloca %\"class.std::__cxx11::basic_string\", align 8\n  %7 = alloca %\"class.std::__cxx11::basic_string\", align 8\n  %8 = alloca %\"class.std::__cxx11::basic_string\", align 8\n  %9 = bitcast %\"class.std::__cxx11::basic_string\"* %5 to i8*\n  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %9) #7\n  %10 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %5, i64 0, i32 2\n  %11 = bitcast %\"class.std::__cxx11::basic_string\"* %5 to %union.anon**\n  store %union.anon* %10, %union.anon** %11, align 8, !tbaa !3\n  %12 = bitcast %union.anon* %10 to i8*\n  %13 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %5, i64 0, i32 0, i32 0\n  %14 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %5, i64 0, i32 1\n  store i64 0, i64* %14, align 8, !tbaa !8\n  store i8 0, i8* %12, align 8, !tbaa !11\n  %15 = bitcast %\"class.std::__cxx11::basic_string\"* %6 to i8*\n  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %15) #7\n  %16 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %6, i64 0, i32 2\n  %17 = bitcast %\"class.std::__cxx11::basic_string\"* %6 to %union.anon**\n  store %union.anon* %16, %union.anon** %17, align 8, !tbaa !3\n  %18 = bitcast %union.anon* %16 to i8*\n  %19 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %6, i64 0, i32 0, i32 0\n  %20 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %6, i64 0, i32 1\n  store i64 0, i64* %20, align 8, !tbaa !8\n  store i8 0, i8* %18, align 8, !tbaa !11\n  %21 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 1\n  %22 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 0, i32 0\n  %23 = bitcast %\"class.std::__cxx11::basic_string\"* %8 to i8*\n  %24 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %8, i64 0, i32 2\n  %25 = bitcast %\"class.std::__cxx11::basic_string\"* %8 to %union.anon**\n  %26 = bitcast i64* %3 to i8*\n  %27 = bitcast %union.anon* %24 to i8*\n  %28 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %8, i64 0, i32 0, i32 0\n  %29 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %8, i64 0, i32 2, i32 0\n  %30 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %8, i64 0, i32 1\n  %31 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %6, i64 0, i32 2, i32 0\n  %32 = bitcast %\"class.std::__cxx11::basic_string\"* %7 to i8*\n  %33 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %7, i64 0, i32 2\n  %34 = bitcast %\"class.std::__cxx11::basic_string\"* %7 to %union.anon**\n  %35 = bitcast i64* %4 to i8*\n  %36 = bitcast %union.anon* %33 to i8*\n  %37 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %7, i64 0, i32 0, i32 0\n  %38 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %7, i64 0, i32 2, i32 0\n  %39 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %7, i64 0, i32 1\n  %40 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %5, i64 0, i32 2, i32 0\n  %41 = load i64, i64* %21, align 8, !tbaa !8\n  %42 = icmp eq i64 %41, 0\n  br i1 %42, label %50, label %43\n\n43:                                               ; preds = %2\n  %44 = bitcast i64* %30 to <2 x i64>*\n  %45 = bitcast i64* %20 to <2 x i64>*\n  %46 = bitcast i64* %39 to <2 x i64>*\n  %47 = bitcast i64* %14 to <2 x i64>*\n  br label %67\n\n48:                                               ; preds = %202\n  %49 = load i8*, i8** %13, align 8, !tbaa !12\n  br label %50\n\n50:                                               ; preds = %48, %2\n  %51 = phi i8* [ %49, %48 ], [ %12, %2 ]\n  %52 = call i64 @strtol(i8* nocapture nonnull %51, i8** null, i32 10) #7\n  %53 = load i8*, i8** %19, align 8, !tbaa !12\n  %54 = call i64 @strtol(i8* nocapture nonnull %53, i8** null, i32 10) #7\n  %55 = load i8*, i8** %19, align 8, !tbaa !12\n  %56 = icmp eq i8* %55, %18\n  br i1 %56, label %58, label %57\n\n57:                                               ; preds = %50\n  call void @_ZdlPv(i8* %55) #7\n  br label %58\n\n58:                                               ; preds = %50, %57\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %15) #7\n  %59 = load i8*, i8** %13, align 8, !tbaa !12\n  %60 = icmp eq i8* %59, %12\n  br i1 %60, label %62, label %61\n\n61:                                               ; preds = %58\n  call void @_ZdlPv(i8* %59) #7\n  br label %62\n\n62:                                               ; preds = %58, %61\n  %63 = trunc i64 %52 to i32\n  %64 = trunc i64 %54 to i32\n  %65 = add i32 %63, %64\n  %66 = sub i32 %1, %65\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %9) #7\n  ret i32 %66\n\n67:                                               ; preds = %43, %202\n  %68 = phi i64 [ %204, %202 ], [ 0, %43 ]\n  %69 = phi i32 [ %203, %202 ], [ 0, %43 ]\n  %70 = load i8*, i8** %22, align 8, !tbaa !12\n  %71 = getelementptr inbounds i8, i8* %70, i64 %68\n  %72 = load i8, i8* %71, align 1, !tbaa !11\n  %73 = add i8 %72, -48\n  %74 = icmp ult i8 %73, 10\n  br i1 %74, label %75, label %196\n\n75:                                               ; preds = %67\n  switch i32 %69, label %202 [\n    i32 0, label %76\n    i32 1, label %136\n  ]\n\n76:                                               ; preds = %75\n  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %32) #7\n  call void @llvm.experimental.noalias.scope.decl(metadata !13)\n  store %union.anon* %33, %union.anon** %34, align 8, !tbaa !3, !alias.scope !13\n  %77 = load i8*, i8** %13, align 8, !tbaa !12, !noalias !13\n  %78 = load i64, i64* %14, align 8, !tbaa !8, !noalias !13\n  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %35) #7, !noalias !13\n  store i64 %78, i64* %4, align 8, !tbaa !16, !noalias !13\n  %79 = icmp ugt i64 %78, 15\n  br i1 %79, label %80, label %84\n\n80:                                               ; preds = %76\n  %81 = invoke i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %7, i64* nonnull align 8 dereferenceable(8) %4, i64 0)\n          to label %82 unwind label %132\n\n82:                                               ; preds = %80\n  store i8* %81, i8** %37, align 8, !tbaa !12, !alias.scope !13\n  %83 = load i64, i64* %4, align 8, !tbaa !16, !noalias !13\n  store i64 %83, i64* %38, align 8, !tbaa !11, !alias.scope !13\n  br label %84\n\n84:                                               ; preds = %76, %82\n  %85 = phi i8* [ %81, %82 ], [ %36, %76 ]\n  switch i64 %78, label %88 [\n    i64 1, label %86\n    i64 0, label %89\n  ]\n\n86:                                               ; preds = %84\n  %87 = load i8, i8* %77, align 1, !tbaa !11\n  store i8 %87, i8* %85, align 1, !tbaa !11\n  br label %89\n\n88:                                               ; preds = %84\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %85, i8* align 1 %77, i64 %78, i1 false) #7\n  br label %89\n\n89:                                               ; preds = %88, %86, %84\n  %90 = load i64, i64* %4, align 8, !tbaa !16, !noalias !13\n  store i64 %90, i64* %39, align 8, !tbaa !8, !alias.scope !13\n  %91 = load i8*, i8** %37, align 8, !tbaa !12, !alias.scope !13\n  %92 = getelementptr inbounds i8, i8* %91, i64 %90\n  store i8 0, i8* %92, align 1, !tbaa !11\n  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %35) #7, !noalias !13\n  %93 = load i64, i64* %39, align 8, !tbaa !8, !alias.scope !13\n  %94 = invoke nonnull align 8 dereferenceable(32) %\"class.std::__cxx11::basic_string\"* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEmmmc(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %7, i64 %93, i64 0, i64 1, i8 signext %72)\n          to label %100 unwind label %95\n\n95:                                               ; preds = %89\n  %96 = landingpad { i8*, i32 }\n          cleanup\n  %97 = load i8*, i8** %37, align 8, !tbaa !12, !alias.scope !13\n  %98 = icmp eq i8* %97, %36\n  br i1 %98, label %134, label %99\n\n99:                                               ; preds = %95\n  call void @_ZdlPv(i8* %97) #7\n  br label %134\n\n100:                                              ; preds = %89\n  %101 = load i8*, i8** %37, align 8, !tbaa !12\n  %102 = icmp eq i8* %101, %36\n  br i1 %102, label %103, label %117\n\n103:                                              ; preds = %100\n  %104 = load i64, i64* %39, align 8, !tbaa !8\n  %105 = icmp eq i64 %104, 0\n  br i1 %105, label %112, label %106\n\n106:                                              ; preds = %103\n  %107 = load i8*, i8** %13, align 8, !tbaa !12\n  %108 = icmp eq i64 %104, 1\n  br i1 %108, label %109, label %111\n\n109:                                              ; preds = %106\n  %110 = load i8, i8* %36, align 8, !tbaa !11\n  store i8 %110, i8* %107, align 1, !tbaa !11\n  br label %112\n\n111:                                              ; preds = %106\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %107, i8* nonnull align 8 %36, i64 %104, i1 false) #7\n  br label %112\n\n112:                                              ; preds = %111, %109, %103\n  %113 = load i64, i64* %39, align 8, !tbaa !8\n  store i64 %113, i64* %14, align 8, !tbaa !8\n  %114 = load i8*, i8** %13, align 8, !tbaa !12\n  %115 = getelementptr inbounds i8, i8* %114, i64 %113\n  store i8 0, i8* %115, align 1, !tbaa !11\n  %116 = load i8*, i8** %37, align 8, !tbaa !12\n  br label %126\n\n117:                                              ; preds = %100\n  %118 = load i8*, i8** %13, align 8, !tbaa !12\n  %119 = icmp eq i8* %118, %12\n  %120 = load i64, i64* %40, align 8\n  store i8* %101, i8** %13, align 8, !tbaa !12\n  %121 = load <2 x i64>, <2 x i64>* %46, align 8, !tbaa !11\n  store <2 x i64> %121, <2 x i64>* %47, align 8, !tbaa !11\n  %122 = icmp eq i8* %118, null\n  %123 = or i1 %119, %122\n  br i1 %123, label %125, label %124\n\n124:                                              ; preds = %117\n  store i8* %118, i8** %37, align 8, !tbaa !12\n  store i64 %120, i64* %38, align 8, !tbaa !11\n  br label %126\n\n125:                                              ; preds = %117\n  store %union.anon* %33, %union.anon** %34, align 8, !tbaa !12\n  br label %126\n\n126:                                              ; preds = %112, %124, %125\n  %127 = phi i8* [ %116, %112 ], [ %118, %124 ], [ %36, %125 ]\n  store i64 0, i64* %39, align 8, !tbaa !8\n  store i8 0, i8* %127, align 1, !tbaa !11\n  %128 = load i8*, i8** %37, align 8, !tbaa !12\n  %129 = icmp eq i8* %128, %36\n  br i1 %129, label %131, label %130\n\n130:                                              ; preds = %126\n  call void @_ZdlPv(i8* %128) #7\n  br label %131\n\n131:                                              ; preds = %126, %130\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %32) #7\n  br label %202\n\n132:                                              ; preds = %80\n  %133 = landingpad { i8*, i32 }\n          cleanup\n  br label %134\n\n134:                                              ; preds = %95, %99, %132\n  %135 = phi { i8*, i32 } [ %133, %132 ], [ %96, %99 ], [ %96, %95 ]\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %32) #7\n  br label %207\n\n136:                                              ; preds = %75\n  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %23) #7\n  call void @llvm.experimental.noalias.scope.decl(metadata !17)\n  store %union.anon* %24, %union.anon** %25, align 8, !tbaa !3, !alias.scope !17\n  %137 = load i8*, i8** %19, align 8, !tbaa !12, !noalias !17\n  %138 = load i64, i64* %20, align 8, !tbaa !8, !noalias !17\n  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %26) #7, !noalias !17\n  store i64 %138, i64* %3, align 8, !tbaa !16, !noalias !17\n  %139 = icmp ugt i64 %138, 15\n  br i1 %139, label %140, label %144\n\n140:                                              ; preds = %136\n  %141 = invoke i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %8, i64* nonnull align 8 dereferenceable(8) %3, i64 0)\n          to label %142 unwind label %192\n\n142:                                              ; preds = %140\n  store i8* %141, i8** %28, align 8, !tbaa !12, !alias.scope !17\n  %143 = load i64, i64* %3, align 8, !tbaa !16, !noalias !17\n  store i64 %143, i64* %29, align 8, !tbaa !11, !alias.scope !17\n  br label %144\n\n144:                                              ; preds = %136, %142\n  %145 = phi i8* [ %141, %142 ], [ %27, %136 ]\n  switch i64 %138, label %148 [\n    i64 1, label %146\n    i64 0, label %149\n  ]\n\n146:                                              ; preds = %144\n  %147 = load i8, i8* %137, align 1, !tbaa !11\n  store i8 %147, i8* %145, align 1, !tbaa !11\n  br label %149\n\n148:                                              ; preds = %144\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %145, i8* align 1 %137, i64 %138, i1 false) #7\n  br label %149\n\n149:                                              ; preds = %148, %146, %144\n  %150 = load i64, i64* %3, align 8, !tbaa !16, !noalias !17\n  store i64 %150, i64* %30, align 8, !tbaa !8, !alias.scope !17\n  %151 = load i8*, i8** %28, align 8, !tbaa !12, !alias.scope !17\n  %152 = getelementptr inbounds i8, i8* %151, i64 %150\n  store i8 0, i8* %152, align 1, !tbaa !11\n  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %26) #7, !noalias !17\n  %153 = load i64, i64* %30, align 8, !tbaa !8, !alias.scope !17\n  %154 = invoke nonnull align 8 dereferenceable(32) %\"class.std::__cxx11::basic_string\"* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEmmmc(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %8, i64 %153, i64 0, i64 1, i8 signext %72)\n          to label %160 unwind label %155\n\n155:                                              ; preds = %149\n  %156 = landingpad { i8*, i32 }\n          cleanup\n  %157 = load i8*, i8** %28, align 8, !tbaa !12, !alias.scope !17\n  %158 = icmp eq i8* %157, %27\n  br i1 %158, label %194, label %159\n\n159:                                              ; preds = %155\n  call void @_ZdlPv(i8* %157) #7\n  br label %194\n\n160:                                              ; preds = %149\n  %161 = load i8*, i8** %28, align 8, !tbaa !12\n  %162 = icmp eq i8* %161, %27\n  br i1 %162, label %163, label %177\n\n163:                                              ; preds = %160\n  %164 = load i64, i64* %30, align 8, !tbaa !8\n  %165 = icmp eq i64 %164, 0\n  br i1 %165, label %172, label %166\n\n166:                                              ; preds = %163\n  %167 = load i8*, i8** %19, align 8, !tbaa !12\n  %168 = icmp eq i64 %164, 1\n  br i1 %168, label %169, label %171\n\n169:                                              ; preds = %166\n  %170 = load i8, i8* %27, align 8, !tbaa !11\n  store i8 %170, i8* %167, align 1, !tbaa !11\n  br label %172\n\n171:                                              ; preds = %166\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %167, i8* nonnull align 8 %27, i64 %164, i1 false) #7\n  br label %172\n\n172:                                              ; preds = %171, %169, %163\n  %173 = load i64, i64* %30, align 8, !tbaa !8\n  store i64 %173, i64* %20, align 8, !tbaa !8\n  %174 = load i8*, i8** %19, align 8, !tbaa !12\n  %175 = getelementptr inbounds i8, i8* %174, i64 %173\n  store i8 0, i8* %175, align 1, !tbaa !11\n  %176 = load i8*, i8** %28, align 8, !tbaa !12\n  br label %186\n\n177:                                              ; preds = %160\n  %178 = load i8*, i8** %19, align 8, !tbaa !12\n  %179 = icmp eq i8* %178, %18\n  %180 = load i64, i64* %31, align 8\n  store i8* %161, i8** %19, align 8, !tbaa !12\n  %181 = load <2 x i64>, <2 x i64>* %44, align 8, !tbaa !11\n  store <2 x i64> %181, <2 x i64>* %45, align 8, !tbaa !11\n  %182 = icmp eq i8* %178, null\n  %183 = or i1 %179, %182\n  br i1 %183, label %185, label %184\n\n184:                                              ; preds = %177\n  store i8* %178, i8** %28, align 8, !tbaa !12\n  store i64 %180, i64* %29, align 8, !tbaa !11\n  br label %186\n\n185:                                              ; preds = %177\n  store %union.anon* %24, %union.anon** %25, align 8, !tbaa !12\n  br label %186\n\n186:                                              ; preds = %172, %184, %185\n  %187 = phi i8* [ %176, %172 ], [ %178, %184 ], [ %27, %185 ]\n  store i64 0, i64* %30, align 8, !tbaa !8\n  store i8 0, i8* %187, align 1, !tbaa !11\n  %188 = load i8*, i8** %28, align 8, !tbaa !12\n  %189 = icmp eq i8* %188, %27\n  br i1 %189, label %191, label %190\n\n190:                                              ; preds = %186\n  call void @_ZdlPv(i8* %188) #7\n  br label %191\n\n191:                                              ; preds = %186, %190\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %23) #7\n  br label %202\n\n192:                                              ; preds = %140\n  %193 = landingpad { i8*, i32 }\n          cleanup\n  br label %194\n\n194:                                              ; preds = %155, %159, %192\n  %195 = phi { i8*, i32 } [ %193, %192 ], [ %156, %159 ], [ %156, %155 ]\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %23) #7\n  br label %207\n\n196:                                              ; preds = %67\n  %197 = icmp eq i32 %69, 0\n  br i1 %197, label %198, label %202\n\n198:                                              ; preds = %196\n  %199 = load i64, i64* %14, align 8, !tbaa !8\n  %200 = icmp ne i64 %199, 0\n  %201 = zext i1 %200 to i32\n  br label %202\n\n202:                                              ; preds = %131, %198, %75, %191, %196\n  %203 = phi i32 [ 1, %191 ], [ 0, %131 ], [ 1, %196 ], [ 0, %75 ], [ %201, %198 ]\n  %204 = add nuw i64 %68, 1\n  %205 = load i64, i64* %21, align 8, !tbaa !8\n  %206 = icmp ugt i64 %205, %204\n  br i1 %206, label %67, label %48, !llvm.loop !20\n\n207:                                              ; preds = %194, %134\n  %208 = phi { i8*, i32 } [ %195, %194 ], [ %135, %134 ]\n  %209 = load i8*, i8** %19, align 8, !tbaa !12\n  %210 = icmp eq i8* %209, %18\n  br i1 %210, label %212, label %211\n\n211:                                              ; preds = %207\n  call void @_ZdlPv(i8* %209) #7\n  br label %212\n\n212:                                              ; preds = %211, %207\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %15) #7\n  %213 = load i8*, i8** %13, align 8, !tbaa !12\n  %214 = icmp eq i8* %213, %12\n  br i1 %214, label %216, label %215\n\n215:                                              ; preds = %212\n  call void @_ZdlPv(i8* %213) #7\n  br label %216\n\n216:                                              ; preds = %215, %212\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %9) #7\n  resume { i8*, i32 } %208\n}\n\n; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn\ndeclare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1\n\ndeclare dso_local i32 @__gxx_personality_v0(...)\n\n; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn\ndeclare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1\n\n; Function Attrs: mustprogress nofree nounwind willreturn\ndeclare dso_local i64 @strtol(i8* readonly, i8** nocapture, i32) local_unnamed_addr #2\n\n; Function Attrs: nobuiltin nounwind\ndeclare dso_local void @_ZdlPv(i8*) local_unnamed_addr #3\n\ndeclare dso_local i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32), i64* nonnull align 8 dereferenceable(8), i64) local_unnamed_addr #4\n\n; Function Attrs: argmemonly mustprogress nofree nounwind willreturn\ndeclare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #5\n\ndeclare dso_local nonnull align 8 dereferenceable(32) %\"class.std::__cxx11::basic_string\"* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEmmmc(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32), i64, i64, i64, i8 signext) local_unnamed_addr #4\n\n; Function Attrs: inaccessiblememonly nofree nosync nounwind willreturn\ndeclare void @llvm.experimental.noalias.scope.decl(metadata) #6\n\nattributes #0 = { uwtable \"frame-pointer\"=\"none\" \"min-legal-vector-width\"=\"0\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #1 = { argmemonly mustprogress nofree nosync nounwind willreturn }\nattributes #2 = { mustprogress nofree nounwind willreturn \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #3 = { nobuiltin nounwind \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #4 = { \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #5 = { argmemonly mustprogress nofree nounwind willreturn }\nattributes #6 = { inaccessiblememonly nofree nosync nounwind willreturn }\nattributes #7 = { nounwind }\n\n!llvm.module.flags = !{!0, !1}\n!llvm.ident = !{!2}\n\n!0 = !{i32 1, !\"wchar_size\", i32 4}\n!1 = !{i32 7, !\"uwtable\", i32 1}\n!2 = !{!\"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)\"}\n!3 = !{!4, !5, i64 0}\n!4 = !{!\"_ZTSNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderE\", !5, i64 0}\n!5 = !{!\"any pointer\", !6, i64 0}\n!6 = !{!\"omnipotent char\", !7, i64 0}\n!7 = !{!\"Simple C++ TBAA\"}\n!8 = !{!9, !10, i64 8}\n!9 = !{!\"_ZTSNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE\", !4, i64 0, !10, i64 8, !6, i64 16}\n!10 = !{!\"long\", !6, i64 0}\n!11 = !{!6, !6, i64 0}\n!12 = !{!9, !5, i64 0}\n!13 = !{!14}\n!14 = distinct !{!14, !15, !\"_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_S5_: argument 0\"}\n!15 = distinct !{!15, !\"_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_S5_\"}\n!16 = !{!10, !10, i64 0}\n!17 = !{!18}\n!18 = distinct !{!18, !19, !\"_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_S5_: argument 0\"}\n!19 = distinct !{!19, !\"_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_S5_\"}\n!20 = distinct !{!20, !21}\n!21 = !{!\"llvm.loop.mustprogress\"}\n", "target": "This is the targeted source code:\n/*\nIn this task, you will be given a string that represents a number of apples and oranges \nthat are distributed in a basket of fruit this basket contains \napples, oranges, and mango fruits. Given the string that represents the total number of \nthe oranges and apples and an integer that represent the total number of the fruits \nin the basket return the number of the mango fruits in the basket.\nfor example:\nfruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\nfruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\nfruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\nfruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nint fruit_distribution(string s,int n){\n\n    string num1=\"\",num2=\"\";\n    int is12;\n    is12=0;\n    for (int i=0;i<s.size();i++)\n        \n        if (s[i]>=48 and s[i]<=57)\n        {\n            if (is12==0) num1=num1+s[i];\n            if (is12==1) num2=num2+s[i];\n        }\n        else\n          if (is12==0 and num1.length()>0) is12=1;\n    return n-atoi(num1.c_str())-atoi(num2.c_str());\n\n}\n"}
{"input": "Convert this to C++:\n; ModuleID = '../../Human_xBenchmarks_164/CPP_68/CPP_68.cpp'\nsource_filename = \"../../Human_xBenchmarks_164/CPP_68/CPP_68.cpp\"\ntarget datalayout = \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\ntarget triple = \"x86_64-unknown-linux-gnu\"\n\n%\"class.std::vector\" = type { %\"struct.std::_Vector_base\" }\n%\"struct.std::_Vector_base\" = type { %\"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl\" }\n%\"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl\" = type { %\"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl_data\" }\n%\"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl_data\" = type { i32*, i32*, i32* }\n\n; Function Attrs: uwtable\ndefine dso_local void @_Z5pluckSt6vectorIiSaIiEE(%\"class.std::vector\"* noalias nocapture sret(%\"class.std::vector\") align 8 %0, %\"class.std::vector\"* nocapture readonly %1) local_unnamed_addr #0 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {\n  %3 = alloca i64, align 8\n  %4 = bitcast i64* %3 to [2 x i32]*\n  %5 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %1, i64 0, i32 0, i32 0, i32 0, i32 1\n  %6 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %1, i64 0, i32 0, i32 0, i32 0, i32 0\n  %7 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0, i64 0, i32 0, i32 0, i32 0, i32 1\n  %8 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0, i64 0, i32 0, i32 0, i32 0, i32 0\n  %9 = bitcast i64* %3 to i8*\n  %10 = bitcast i64* %3 to i32*\n  %11 = getelementptr inbounds [2 x i32], [2 x i32]* %4, i64 0, i64 1\n  %12 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0, i64 0, i32 0, i32 0, i32 0, i32 2\n  %13 = bitcast %\"class.std::vector\"* %0 to i8**\n  %14 = bitcast i32** %7 to i8**\n  %15 = bitcast i32** %12 to i8**\n  %16 = bitcast %\"class.std::vector\"* %0 to i8*\n  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(24) %16, i8 0, i64 24, i1 false)\n  %17 = load i32*, i32** %5, align 8, !tbaa !3\n  %18 = load i32*, i32** %6, align 8, !tbaa !8\n  %19 = icmp eq i32* %17, %18\n  br i1 %19, label %98, label %20\n\n20:                                               ; preds = %2, %88\n  %21 = phi i32* [ %89, %88 ], [ %18, %2 ]\n  %22 = phi i32* [ %90, %88 ], [ %17, %2 ]\n  %23 = phi i32* [ %91, %88 ], [ null, %2 ]\n  %24 = phi i64 [ %92, %88 ], [ 0, %2 ]\n  %25 = getelementptr inbounds i32, i32* %21, i64 %24\n  %26 = load i32, i32* %25, align 4, !tbaa !9\n  %27 = and i32 %26, 1\n  %28 = icmp eq i32 %27, 0\n  br i1 %28, label %29, label %88\n\n29:                                               ; preds = %20\n  %30 = load i32*, i32** %8, align 8, !tbaa !8\n  %31 = ptrtoint i32* %23 to i64\n  %32 = ptrtoint i32* %30 to i64\n  %33 = sub i64 %31, %32\n  %34 = ashr exact i64 %33, 2\n  %35 = icmp eq i64 %33, 0\n  br i1 %35, label %39, label %36\n\n36:                                               ; preds = %29\n  %37 = load i32, i32* %30, align 4, !tbaa !9\n  %38 = icmp slt i32 %26, %37\n  br i1 %38, label %39, label %88\n\n39:                                               ; preds = %36, %29\n  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %9) #7\n  store i32 %26, i32* %10, align 8, !tbaa !9\n  %40 = trunc i64 %24 to i32\n  store i32 %40, i32* %11, align 4, !tbaa !9\n  %41 = load i32*, i32** %12, align 8, !tbaa !11\n  %42 = ptrtoint i32* %41 to i64\n  %43 = sub i64 %42, %32\n  %44 = ashr exact i64 %43, 2\n  %45 = icmp ult i64 %44, 2\n  br i1 %45, label %46, label %57\n\n46:                                               ; preds = %39\n  %47 = invoke noalias nonnull i8* @_Znwm(i64 8) #8\n          to label %48 unwind label %82\n\n48:                                               ; preds = %46\n  %49 = bitcast i8* %47 to i64*\n  %50 = load i64, i64* %3, align 8\n  store i64 %50, i64* %49, align 4\n  %51 = icmp eq i32* %30, null\n  br i1 %51, label %54, label %52\n\n52:                                               ; preds = %48\n  %53 = bitcast i32* %30 to i8*\n  tail call void @_ZdlPv(i8* nonnull %53) #7\n  br label %54\n\n54:                                               ; preds = %52, %48\n  store i8* %47, i8** %13, align 8, !tbaa !8\n  %55 = getelementptr inbounds i8, i8* %47, i64 8\n  store i8* %55, i8** %14, align 8, !tbaa !3\n  store i8* %55, i8** %15, align 8, !tbaa !11\n  %56 = bitcast i8* %55 to i32*\n  br label %78\n\n57:                                               ; preds = %39\n  %58 = icmp ult i64 %34, 2\n  br i1 %58, label %65, label %59\n\n59:                                               ; preds = %57\n  %60 = bitcast i32* %30 to i64*\n  %61 = load i64, i64* %3, align 8\n  store i64 %61, i64* %60, align 4\n  %62 = getelementptr inbounds i32, i32* %30, i64 2\n  %63 = icmp eq i32* %23, %62\n  br i1 %63, label %78, label %64\n\n64:                                               ; preds = %59\n  store i32* %62, i32** %7, align 8, !tbaa !3\n  br label %78\n\n65:                                               ; preds = %57\n  %66 = getelementptr inbounds i32, i32* %10, i64 %34\n  %67 = icmp eq i64 %33, 0\n  br i1 %67, label %72, label %68\n\n68:                                               ; preds = %65\n  %69 = bitcast i32* %30 to i8*\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %69, i8* nonnull align 8 %9, i64 %33, i1 false) #7\n  %70 = mul nsw i64 %34, -4\n  %71 = add nsw i64 %70, 8\n  br label %72\n\n72:                                               ; preds = %65, %68\n  %73 = phi i64 [ %71, %68 ], [ 8, %65 ]\n  %74 = bitcast i32* %23 to i8*\n  %75 = bitcast i32* %66 to i8*\n  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %74, i8* nonnull align 4 %75, i64 %73, i1 false) #7\n  %76 = lshr exact i64 %73, 2\n  %77 = getelementptr inbounds i32, i32* %23, i64 %76\n  store i32* %77, i32** %7, align 8, !tbaa !3\n  br label %78\n\n78:                                               ; preds = %54, %59, %64, %72\n  %79 = phi i32* [ %56, %54 ], [ %23, %59 ], [ %62, %64 ], [ %77, %72 ]\n  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %9) #7\n  %80 = load i32*, i32** %5, align 8, !tbaa !3\n  %81 = load i32*, i32** %6, align 8, !tbaa !8\n  br label %88\n\n82:                                               ; preds = %46\n  %83 = landingpad { i8*, i32 }\n          cleanup\n  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %9) #7\n  %84 = icmp eq i32* %30, null\n  br i1 %84, label %87, label %85\n\n85:                                               ; preds = %82\n  %86 = bitcast i32* %30 to i8*\n  tail call void @_ZdlPv(i8* nonnull %86) #7\n  br label %87\n\n87:                                               ; preds = %82, %85\n  resume { i8*, i32 } %83\n\n88:                                               ; preds = %20, %36, %78\n  %89 = phi i32* [ %21, %20 ], [ %21, %36 ], [ %81, %78 ]\n  %90 = phi i32* [ %22, %20 ], [ %22, %36 ], [ %80, %78 ]\n  %91 = phi i32* [ %23, %20 ], [ %23, %36 ], [ %79, %78 ]\n  %92 = add nuw i64 %24, 1\n  %93 = ptrtoint i32* %90 to i64\n  %94 = ptrtoint i32* %89 to i64\n  %95 = sub i64 %93, %94\n  %96 = ashr exact i64 %95, 2\n  %97 = icmp ugt i64 %96, %92\n  br i1 %97, label %20, label %98, !llvm.loop !12\n\n98:                                               ; preds = %88, %2\n  ret void\n}\n\n; Function Attrs: argmemonly mustprogress nofree nounwind willreturn writeonly\ndeclare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1\n\n; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn\ndeclare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2\n\ndeclare dso_local i32 @__gxx_personality_v0(...)\n\n; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn\ndeclare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2\n\n; Function Attrs: nobuiltin nounwind\ndeclare dso_local void @_ZdlPv(i8*) local_unnamed_addr #3\n\n; Function Attrs: nobuiltin allocsize(0)\ndeclare dso_local nonnull i8* @_Znwm(i64) local_unnamed_addr #4\n\n; Function Attrs: argmemonly mustprogress nofree nounwind willreturn\ndeclare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #5\n\n; Function Attrs: argmemonly nofree nounwind willreturn\ndeclare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #6\n\nattributes #0 = { uwtable \"frame-pointer\"=\"none\" \"min-legal-vector-width\"=\"0\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #1 = { argmemonly mustprogress nofree nounwind willreturn writeonly }\nattributes #2 = { argmemonly mustprogress nofree nosync nounwind willreturn }\nattributes #3 = { nobuiltin nounwind \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #4 = { nobuiltin allocsize(0) \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #5 = { argmemonly mustprogress nofree nounwind willreturn }\nattributes #6 = { argmemonly nofree nounwind willreturn }\nattributes #7 = { nounwind }\nattributes #8 = { allocsize(0) }\n\n!llvm.module.flags = !{!0, !1}\n!llvm.ident = !{!2}\n\n!0 = !{i32 1, !\"wchar_size\", i32 4}\n!1 = !{i32 7, !\"uwtable\", i32 1}\n!2 = !{!\"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)\"}\n!3 = !{!4, !5, i64 8}\n!4 = !{!\"_ZTSNSt12_Vector_baseIiSaIiEE17_Vector_impl_dataE\", !5, i64 0, !5, i64 8, !5, i64 16}\n!5 = !{!\"any pointer\", !6, i64 0}\n!6 = !{!\"omnipotent char\", !7, i64 0}\n!7 = !{!\"Simple C++ TBAA\"}\n!8 = !{!4, !5, i64 0}\n!9 = !{!10, !10, i64 0}\n!10 = !{!\"int\", !6, i64 0}\n!11 = !{!4, !5, i64 16}\n!12 = distinct !{!12, !13}\n!13 = !{!\"llvm.loop.mustprogress\"}\n", "target": "This is the targeted source code:\n/*\nGiven a vector representing a branch of a tree that has non-negative integer nodes\nyour task is to pluck one of the nodes and return it.\nThe plucked node should be the node with the smallest even value.\nIf multiple nodes with the same smallest even value are found return the node that has smallest index.\n\nThe plucked node should be returned in a vector, { smalest_value, its index },\nIf there are no even values or the given vector is empty, return {}.\n\nExample 1:\n    Input: {4,2,3}\n    Output: {2, 1}\n    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\nExample 2:\n    Input: {1,2,3}\n    Output: {2, 1}\n    Explanation: 2 has the smallest even value, and 2 has the smallest index. \n\nExample 3:\n    Input: {}\n    Output: {}\n\nExample 4:\n    Input: {5, 0, 3, 0, 4, 2}\n    Output: {0, 1}\n    Explanation: 0 is the smallest value, but  there are two zeros,\n                 so we will choose the first zero, which has the smallest index.\n\nConstraints:\n    * 1 <= nodes.length <= 10000\n    * 0 <= node.value\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> pluck(vector<int> arr){\n\n    vector<int> out={};\n    for (int i=0;i<arr.size();i++)\n    if (arr[i]%2==0 and (out.size()==0 or arr[i]<out[0]))\n        out={arr[i],i};\n    return out;\n}\n"}
{"input": "Convert this to C++:\n; ModuleID = '../../Human_xBenchmarks_164/CPP_69/CPP_69.cpp'\nsource_filename = \"../../Human_xBenchmarks_164/CPP_69/CPP_69.cpp\"\ntarget datalayout = \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\ntarget triple = \"x86_64-unknown-linux-gnu\"\n\n%\"class.std::vector\" = type { %\"struct.std::_Vector_base\" }\n%\"struct.std::_Vector_base\" = type { %\"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl\" }\n%\"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl\" = type { %\"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl_data\" }\n%\"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl_data\" = type { i32*, i32*, i32* }\n%\"class.std::vector.0\" = type { %\"struct.std::_Vector_base.1\" }\n%\"struct.std::_Vector_base.1\" = type { %\"struct.std::_Vector_base<std::vector<int>, std::allocator<std::vector<int>>>::_Vector_impl\" }\n%\"struct.std::_Vector_base<std::vector<int>, std::allocator<std::vector<int>>>::_Vector_impl\" = type { %\"struct.std::_Vector_base<std::vector<int>, std::allocator<std::vector<int>>>::_Vector_impl_data\" }\n%\"struct.std::_Vector_base<std::vector<int>, std::allocator<std::vector<int>>>::_Vector_impl_data\" = type { %\"class.std::vector\"*, %\"class.std::vector\"*, %\"class.std::vector\"* }\n\n$_ZNSt6vectorIS_IiSaIiEESaIS1_EED2Ev = comdat any\n\n$_ZNSt6vectorIS_IiSaIiEESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_ = comdat any\n\n@.str = private unnamed_addr constant [26 x i8] c\"vector::_M_realloc_insert\\00\", align 1\n\n; Function Attrs: uwtable\ndefine dso_local i32 @_Z6searchSt6vectorIiSaIiEE(%\"class.std::vector\"* nocapture readonly %0) local_unnamed_addr #0 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {\n  %2 = alloca %\"class.std::vector.0\", align 8\n  %3 = alloca %\"class.std::vector\", align 8\n  %4 = bitcast %\"class.std::vector.0\"* %2 to i8*\n  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %4) #8\n  %5 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0, i64 0, i32 0, i32 0, i32 0, i32 1\n  %6 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0, i64 0, i32 0, i32 0, i32 0, i32 0\n  %7 = getelementptr inbounds %\"class.std::vector.0\", %\"class.std::vector.0\"* %2, i64 0, i32 0, i32 0, i32 0, i32 1\n  %8 = getelementptr inbounds %\"class.std::vector.0\", %\"class.std::vector.0\"* %2, i64 0, i32 0, i32 0, i32 0, i32 0\n  %9 = bitcast %\"class.std::vector\"* %3 to i8*\n  %10 = bitcast %\"class.std::vector\"* %3 to i8**\n  %11 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %3, i64 0, i32 0, i32 0, i32 0, i32 2\n  %12 = bitcast i32** %11 to i8**\n  %13 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %3, i64 0, i32 0, i32 0, i32 0, i32 1\n  %14 = bitcast i32** %13 to i8**\n  %15 = getelementptr inbounds %\"class.std::vector.0\", %\"class.std::vector.0\"* %2, i64 0, i32 0, i32 0, i32 0, i32 2\n  %16 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %3, i64 0, i32 0, i32 0, i32 0, i32 0\n  %17 = bitcast %\"class.std::vector.0\"* %2 to i8*\n  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(24) %17, i8 0, i64 24, i1 false)\n  %18 = load i32*, i32** %5, align 8, !tbaa !3\n  %19 = load i32*, i32** %6, align 8, !tbaa !8\n  %20 = icmp eq i32* %18, %19\n  br i1 %20, label %56, label %21\n\n21:                                               ; preds = %1, %140\n  %22 = phi i32* [ %131, %140 ], [ %19, %1 ]\n  %23 = phi %\"class.std::vector\"* [ %142, %140 ], [ null, %1 ]\n  %24 = phi %\"class.std::vector\"* [ %141, %140 ], [ null, %1 ]\n  %25 = phi i64 [ %133, %140 ], [ 0, %1 ]\n  %26 = phi i32 [ %132, %140 ], [ -1, %1 ]\n  %27 = ptrtoint %\"class.std::vector\"* %24 to i64\n  %28 = ptrtoint %\"class.std::vector\"* %23 to i64\n  %29 = sub i64 %27, %28\n  %30 = getelementptr inbounds i32, i32* %22, i64 %25\n  %31 = icmp eq i64 %29, 0\n  br i1 %31, label %83, label %32\n\n32:                                               ; preds = %21\n  %33 = sdiv exact i64 %29, 24\n  %34 = call i64 @llvm.umax.i64(i64 %33, i64 1)\n  br label %61\n\n35:                                               ; preds = %130\n  %36 = load %\"class.std::vector\"*, %\"class.std::vector\"** %8, align 8, !tbaa !9\n  %37 = load %\"class.std::vector\"*, %\"class.std::vector\"** %7, align 8, !tbaa !11\n  %38 = icmp eq %\"class.std::vector\"* %36, %37\n  br i1 %38, label %51, label %39\n\n39:                                               ; preds = %35, %46\n  %40 = phi %\"class.std::vector\"* [ %47, %46 ], [ %36, %35 ]\n  %41 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %40, i64 0, i32 0, i32 0, i32 0, i32 0\n  %42 = load i32*, i32** %41, align 8, !tbaa !8\n  %43 = icmp eq i32* %42, null\n  br i1 %43, label %46, label %44\n\n44:                                               ; preds = %39\n  %45 = bitcast i32* %42 to i8*\n  call void @_ZdlPv(i8* nonnull %45) #8\n  br label %46\n\n46:                                               ; preds = %44, %39\n  %47 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %40, i64 1\n  %48 = icmp eq %\"class.std::vector\"* %47, %37\n  br i1 %48, label %49, label %39, !llvm.loop !12\n\n49:                                               ; preds = %46\n  %50 = load %\"class.std::vector\"*, %\"class.std::vector\"** %8, align 8, !tbaa !9\n  br label %51\n\n51:                                               ; preds = %49, %35\n  %52 = phi %\"class.std::vector\"* [ %50, %49 ], [ %37, %35 ]\n  %53 = icmp eq %\"class.std::vector\"* %52, null\n  br i1 %53, label %56, label %54\n\n54:                                               ; preds = %51\n  %55 = bitcast %\"class.std::vector\"* %52 to i8*\n  call void @_ZdlPv(i8* nonnull %55) #8\n  br label %56\n\n56:                                               ; preds = %1, %51, %54\n  %57 = phi i32 [ %132, %51 ], [ %132, %54 ], [ -1, %1 ]\n  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %4) #8\n  ret i32 %57\n\n58:                                               ; preds = %78\n  %59 = and i8 %79, 1\n  %60 = icmp eq i8 %59, 0\n  br i1 %60, label %83, label %130\n\n61:                                               ; preds = %32, %78\n  %62 = phi i64 [ 0, %32 ], [ %81, %78 ]\n  %63 = phi i32 [ %26, %32 ], [ %80, %78 ]\n  %64 = phi i8 [ 0, %32 ], [ %79, %78 ]\n  %65 = load i32, i32* %30, align 4, !tbaa !14\n  %66 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %23, i64 %62, i32 0, i32 0, i32 0, i32 0\n  %67 = load i32*, i32** %66, align 8, !tbaa !8\n  %68 = load i32, i32* %67, align 4, !tbaa !14\n  %69 = icmp eq i32 %65, %68\n  br i1 %69, label %70, label %78\n\n70:                                               ; preds = %61\n  %71 = getelementptr inbounds i32, i32* %67, i64 1\n  %72 = load i32, i32* %71, align 4, !tbaa !14\n  %73 = add nsw i32 %72, 1\n  store i32 %73, i32* %71, align 4, !tbaa !14\n  %74 = icmp sge i32 %73, %65\n  %75 = icmp sgt i32 %65, %63\n  %76 = select i1 %74, i1 %75, i1 false\n  %77 = select i1 %76, i32 %65, i32 %63\n  br label %78\n\n78:                                               ; preds = %70, %61\n  %79 = phi i8 [ %64, %61 ], [ 1, %70 ]\n  %80 = phi i32 [ %63, %61 ], [ %77, %70 ]\n  %81 = add nuw nsw i64 %62, 1\n  %82 = icmp eq i64 %81, %34\n  br i1 %82, label %58, label %61, !llvm.loop !16\n\n83:                                               ; preds = %21, %58\n  %84 = phi i32 [ %80, %58 ], [ %26, %21 ]\n  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %9) #8\n  %85 = load i32, i32* %30, align 4, !tbaa !14\n  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(24) %9, i8 0, i64 24, i1 false) #8\n  %86 = invoke noalias nonnull i8* @_Znwm(i64 8) #9\n          to label %91 unwind label %87\n\n87:                                               ; preds = %83\n  %88 = landingpad { i8*, i32 }\n          cleanup\n  %89 = load i32*, i32** %16, align 8, !tbaa !8\n  %90 = icmp eq i32* %89, null\n  br i1 %90, label %128, label %124\n\n91:                                               ; preds = %83\n  %92 = bitcast i8* %86 to i32*\n  store i8* %86, i8** %10, align 8, !tbaa !8\n  %93 = getelementptr inbounds i8, i8* %86, i64 8\n  store i8* %93, i8** %12, align 8, !tbaa !17\n  store i32 %85, i32* %92, align 4\n  %94 = getelementptr inbounds i8, i8* %86, i64 4\n  %95 = bitcast i8* %94 to i32*\n  store i32 1, i32* %95, align 4\n  store i8* %93, i8** %14, align 8, !tbaa !3\n  %96 = load %\"class.std::vector\"*, %\"class.std::vector\"** %7, align 8, !tbaa !11\n  %97 = load %\"class.std::vector\"*, %\"class.std::vector\"** %15, align 8, !tbaa !18\n  %98 = icmp eq %\"class.std::vector\"* %96, %97\n  br i1 %98, label %106, label %99\n\n99:                                               ; preds = %91\n  %100 = bitcast %\"class.std::vector\"* %96 to i8**\n  store i8* %86, i8** %100, align 8, !tbaa !8\n  %101 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %96, i64 0, i32 0, i32 0, i32 0, i32 1\n  %102 = bitcast i32** %101 to i8**\n  store i8* %93, i8** %102, align 8, !tbaa !3\n  %103 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %96, i64 0, i32 0, i32 0, i32 0, i32 2\n  %104 = bitcast i32** %103 to i8**\n  store i8* %93, i8** %104, align 8, !tbaa !17\n  %105 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %96, i64 1\n  store %\"class.std::vector\"* %105, %\"class.std::vector\"** %7, align 8, !tbaa !11\n  br label %112\n\n106:                                              ; preds = %91\n  invoke void @_ZNSt6vectorIS_IiSaIiEESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_(%\"class.std::vector.0\"* nonnull align 8 dereferenceable(24) %2, %\"class.std::vector\"* %96, %\"class.std::vector\"* nonnull align 8 dereferenceable(24) %3)\n          to label %107 unwind label %120\n\n107:                                              ; preds = %106\n  %108 = load i32*, i32** %16, align 8, !tbaa !8\n  %109 = icmp eq i32* %108, null\n  br i1 %109, label %112, label %110\n\n110:                                              ; preds = %107\n  %111 = bitcast i32* %108 to i8*\n  call void @_ZdlPv(i8* nonnull %111) #8\n  br label %112\n\n112:                                              ; preds = %99, %107, %110\n  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %9) #8\n  %113 = icmp eq i32 %84, -1\n  %114 = load i32*, i32** %6, align 8, !tbaa !8\n  br i1 %113, label %115, label %130\n\n115:                                              ; preds = %112\n  %116 = getelementptr inbounds i32, i32* %114, i64 %25\n  %117 = load i32, i32* %116, align 4, !tbaa !14\n  %118 = icmp eq i32 %117, 1\n  %119 = select i1 %118, i32 1, i32 -1\n  br label %130\n\n120:                                              ; preds = %106\n  %121 = landingpad { i8*, i32 }\n          cleanup\n  %122 = load i32*, i32** %16, align 8, !tbaa !8\n  %123 = icmp eq i32* %122, null\n  br i1 %123, label %128, label %124\n\n124:                                              ; preds = %120, %87\n  %125 = phi i32* [ %89, %87 ], [ %122, %120 ]\n  %126 = phi { i8*, i32 } [ %88, %87 ], [ %121, %120 ]\n  %127 = bitcast i32* %125 to i8*\n  call void @_ZdlPv(i8* nonnull %127) #8\n  br label %128\n\n128:                                              ; preds = %124, %120, %87\n  %129 = phi { i8*, i32 } [ %88, %87 ], [ %121, %120 ], [ %126, %124 ]\n  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %9) #8\n  call void @_ZNSt6vectorIS_IiSaIiEESaIS1_EED2Ev(%\"class.std::vector.0\"* nonnull align 8 dereferenceable(24) %2) #8\n  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %4) #8\n  resume { i8*, i32 } %129\n\n130:                                              ; preds = %112, %115, %58\n  %131 = phi i32* [ %22, %58 ], [ %114, %115 ], [ %114, %112 ]\n  %132 = phi i32 [ %80, %58 ], [ %119, %115 ], [ %84, %112 ]\n  %133 = add nuw i64 %25, 1\n  %134 = load i32*, i32** %5, align 8, !tbaa !3\n  %135 = ptrtoint i32* %134 to i64\n  %136 = ptrtoint i32* %131 to i64\n  %137 = sub i64 %135, %136\n  %138 = ashr exact i64 %137, 2\n  %139 = icmp ugt i64 %138, %133\n  br i1 %139, label %140, label %35, !llvm.loop !19\n\n140:                                              ; preds = %130\n  %141 = load %\"class.std::vector\"*, %\"class.std::vector\"** %7, align 8, !tbaa !11\n  %142 = load %\"class.std::vector\"*, %\"class.std::vector\"** %8, align 8, !tbaa !9\n  br label %21\n}\n\n; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn\ndeclare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1\n\n; Function Attrs: argmemonly mustprogress nofree nounwind willreturn writeonly\ndeclare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2\n\n; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn\ndeclare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1\n\ndeclare dso_local i32 @__gxx_personality_v0(...)\n\n; Function Attrs: nounwind uwtable\ndefine linkonce_odr dso_local void @_ZNSt6vectorIS_IiSaIiEESaIS1_EED2Ev(%\"class.std::vector.0\"* nonnull align 8 dereferenceable(24) %0) unnamed_addr #3 comdat align 2 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {\n  %2 = getelementptr inbounds %\"class.std::vector.0\", %\"class.std::vector.0\"* %0, i64 0, i32 0, i32 0, i32 0, i32 0\n  %3 = load %\"class.std::vector\"*, %\"class.std::vector\"** %2, align 8, !tbaa !9\n  %4 = getelementptr inbounds %\"class.std::vector.0\", %\"class.std::vector.0\"* %0, i64 0, i32 0, i32 0, i32 0, i32 1\n  %5 = load %\"class.std::vector\"*, %\"class.std::vector\"** %4, align 8, !tbaa !11\n  %6 = icmp eq %\"class.std::vector\"* %3, %5\n  br i1 %6, label %19, label %7\n\n7:                                                ; preds = %1, %14\n  %8 = phi %\"class.std::vector\"* [ %15, %14 ], [ %3, %1 ]\n  %9 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %8, i64 0, i32 0, i32 0, i32 0, i32 0\n  %10 = load i32*, i32** %9, align 8, !tbaa !8\n  %11 = icmp eq i32* %10, null\n  br i1 %11, label %14, label %12\n\n12:                                               ; preds = %7\n  %13 = bitcast i32* %10 to i8*\n  tail call void @_ZdlPv(i8* nonnull %13) #8\n  br label %14\n\n14:                                               ; preds = %12, %7\n  %15 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %8, i64 1\n  %16 = icmp eq %\"class.std::vector\"* %15, %5\n  br i1 %16, label %17, label %7, !llvm.loop !12\n\n17:                                               ; preds = %14\n  %18 = load %\"class.std::vector\"*, %\"class.std::vector\"** %2, align 8, !tbaa !9\n  br label %19\n\n19:                                               ; preds = %17, %1\n  %20 = phi %\"class.std::vector\"* [ %18, %17 ], [ %3, %1 ]\n  %21 = icmp eq %\"class.std::vector\"* %20, null\n  br i1 %21, label %24, label %22\n\n22:                                               ; preds = %19\n  %23 = bitcast %\"class.std::vector\"* %20 to i8*\n  tail call void @_ZdlPv(i8* nonnull %23) #8\n  br label %24\n\n24:                                               ; preds = %19, %22\n  ret void\n}\n\n; Function Attrs: nobuiltin nounwind\ndeclare dso_local void @_ZdlPv(i8*) local_unnamed_addr #4\n\n; Function Attrs: uwtable\ndefine linkonce_odr dso_local void @_ZNSt6vectorIS_IiSaIiEESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_(%\"class.std::vector.0\"* nonnull align 8 dereferenceable(24) %0, %\"class.std::vector\"* %1, %\"class.std::vector\"* nonnull align 8 dereferenceable(24) %2) local_unnamed_addr #0 comdat align 2 personality i32 (...)* @__gxx_personality_v0 {\n  %4 = getelementptr inbounds %\"class.std::vector.0\", %\"class.std::vector.0\"* %0, i64 0, i32 0, i32 0, i32 0, i32 1\n  %5 = load %\"class.std::vector\"*, %\"class.std::vector\"** %4, align 8, !tbaa !11\n  %6 = getelementptr inbounds %\"class.std::vector.0\", %\"class.std::vector.0\"* %0, i64 0, i32 0, i32 0, i32 0, i32 0\n  %7 = load %\"class.std::vector\"*, %\"class.std::vector\"** %6, align 8, !tbaa !9\n  %8 = ptrtoint %\"class.std::vector\"* %5 to i64\n  %9 = ptrtoint %\"class.std::vector\"* %7 to i64\n  %10 = sub i64 %8, %9\n  %11 = sdiv exact i64 %10, 24\n  %12 = icmp eq i64 %10, 9223372036854775800\n  br i1 %12, label %13, label %14\n\n13:                                               ; preds = %3\n  tail call void @_ZSt20__throw_length_errorPKc(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str, i64 0, i64 0)) #10\n  unreachable\n\n14:                                               ; preds = %3\n  %15 = icmp eq i64 %10, 0\n  %16 = select i1 %15, i64 1, i64 %11\n  %17 = add nsw i64 %16, %11\n  %18 = icmp ult i64 %17, %11\n  %19 = icmp ugt i64 %17, 384307168202282325\n  %20 = or i1 %18, %19\n  %21 = select i1 %20, i64 384307168202282325, i64 %17\n  %22 = ptrtoint %\"class.std::vector\"* %1 to i64\n  %23 = sub i64 %22, %9\n  %24 = sdiv exact i64 %23, 24\n  %25 = mul nuw nsw i64 %21, 24\n  %26 = tail call noalias nonnull i8* @_Znwm(i64 %25) #9\n  %27 = bitcast i8* %26 to %\"class.std::vector\"*\n  %28 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %27, i64 %24, i32 0, i32 0, i32 0, i32 0\n  %29 = bitcast %\"class.std::vector\"* %2 to <2 x i32*>*\n  %30 = load <2 x i32*>, <2 x i32*>* %29, align 8, !tbaa !20\n  %31 = bitcast i32** %28 to <2 x i32*>*\n  store <2 x i32*> %30, <2 x i32*>* %31, align 8, !tbaa !20\n  %32 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %27, i64 %24, i32 0, i32 0, i32 0, i32 2\n  %33 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %2, i64 0, i32 0, i32 0, i32 0, i32 2\n  %34 = load i32*, i32** %33, align 8, !tbaa !17\n  store i32* %34, i32** %32, align 8, !tbaa !17\n  %35 = bitcast %\"class.std::vector\"* %2 to i8*\n  tail call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(24) %35, i8 0, i64 24, i1 false) #8\n  %36 = icmp eq %\"class.std::vector\"* %7, %1\n  br i1 %36, label %50, label %37\n\n37:                                               ; preds = %14, %37\n  %38 = phi %\"class.std::vector\"* [ %48, %37 ], [ %27, %14 ]\n  %39 = phi %\"class.std::vector\"* [ %47, %37 ], [ %7, %14 ]\n  %40 = bitcast %\"class.std::vector\"* %39 to <2 x i32*>*\n  %41 = load <2 x i32*>, <2 x i32*>* %40, align 8, !tbaa !20\n  %42 = bitcast %\"class.std::vector\"* %38 to <2 x i32*>*\n  store <2 x i32*> %41, <2 x i32*>* %42, align 8, !tbaa !20\n  %43 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %38, i64 0, i32 0, i32 0, i32 0, i32 2\n  %44 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %39, i64 0, i32 0, i32 0, i32 0, i32 2\n  %45 = load i32*, i32** %44, align 8, !tbaa !17\n  store i32* %45, i32** %43, align 8, !tbaa !17\n  %46 = bitcast %\"class.std::vector\"* %39 to i8*\n  tail call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(24) %46, i8 0, i64 24, i1 false) #8\n  %47 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %39, i64 1\n  %48 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %38, i64 1\n  %49 = icmp eq %\"class.std::vector\"* %47, %1\n  br i1 %49, label %50, label %37, !llvm.loop !21\n\n50:                                               ; preds = %37, %14\n  %51 = phi %\"class.std::vector\"* [ %27, %14 ], [ %48, %37 ]\n  %52 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %51, i64 1\n  %53 = icmp eq %\"class.std::vector\"* %5, %1\n  br i1 %53, label %67, label %54\n\n54:                                               ; preds = %50, %54\n  %55 = phi %\"class.std::vector\"* [ %65, %54 ], [ %52, %50 ]\n  %56 = phi %\"class.std::vector\"* [ %64, %54 ], [ %1, %50 ]\n  %57 = bitcast %\"class.std::vector\"* %56 to <2 x i32*>*\n  %58 = load <2 x i32*>, <2 x i32*>* %57, align 8, !tbaa !20\n  %59 = bitcast %\"class.std::vector\"* %55 to <2 x i32*>*\n  store <2 x i32*> %58, <2 x i32*>* %59, align 8, !tbaa !20\n  %60 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %55, i64 0, i32 0, i32 0, i32 0, i32 2\n  %61 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %56, i64 0, i32 0, i32 0, i32 0, i32 2\n  %62 = load i32*, i32** %61, align 8, !tbaa !17\n  store i32* %62, i32** %60, align 8, !tbaa !17\n  %63 = bitcast %\"class.std::vector\"* %56 to i8*\n  tail call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(24) %63, i8 0, i64 24, i1 false) #8\n  %64 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %56, i64 1\n  %65 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %55, i64 1\n  %66 = icmp eq %\"class.std::vector\"* %64, %5\n  br i1 %66, label %67, label %54, !llvm.loop !21\n\n67:                                               ; preds = %54, %50\n  %68 = phi %\"class.std::vector\"* [ %52, %50 ], [ %65, %54 ]\n  %69 = icmp eq %\"class.std::vector\"* %7, null\n  br i1 %69, label %72, label %70\n\n70:                                               ; preds = %67\n  %71 = bitcast %\"class.std::vector\"* %7 to i8*\n  tail call void @_ZdlPv(i8* nonnull %71) #8\n  br label %72\n\n72:                                               ; preds = %67, %70\n  %73 = getelementptr inbounds %\"class.std::vector.0\", %\"class.std::vector.0\"* %0, i64 0, i32 0, i32 0, i32 0, i32 2\n  %74 = bitcast %\"class.std::vector.0\"* %0 to i8**\n  store i8* %26, i8** %74, align 8, !tbaa !9\n  store %\"class.std::vector\"* %68, %\"class.std::vector\"** %4, align 8, !tbaa !11\n  %75 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %27, i64 %21\n  store %\"class.std::vector\"* %75, %\"class.std::vector\"** %73, align 8, !tbaa !18\n  ret void\n}\n\n; Function Attrs: noreturn\ndeclare dso_local void @_ZSt20__throw_length_errorPKc(i8*) local_unnamed_addr #5\n\n; Function Attrs: nobuiltin allocsize(0)\ndeclare dso_local nonnull i8* @_Znwm(i64) local_unnamed_addr #6\n\n; Function Attrs: nofree nosync nounwind readnone speculatable willreturn\ndeclare i64 @llvm.umax.i64(i64, i64) #7\n\nattributes #0 = { uwtable \"frame-pointer\"=\"none\" \"min-legal-vector-width\"=\"0\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #1 = { argmemonly mustprogress nofree nosync nounwind willreturn }\nattributes #2 = { argmemonly mustprogress nofree nounwind willreturn writeonly }\nattributes #3 = { nounwind uwtable \"frame-pointer\"=\"none\" \"min-legal-vector-width\"=\"0\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #4 = { nobuiltin nounwind \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #5 = { noreturn \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #6 = { nobuiltin allocsize(0) \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #7 = { nofree nosync nounwind readnone speculatable willreturn }\nattributes #8 = { nounwind }\nattributes #9 = { allocsize(0) }\nattributes #10 = { noreturn }\n\n!llvm.module.flags = !{!0, !1}\n!llvm.ident = !{!2}\n\n!0 = !{i32 1, !\"wchar_size\", i32 4}\n!1 = !{i32 7, !\"uwtable\", i32 1}\n!2 = !{!\"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)\"}\n!3 = !{!4, !5, i64 8}\n!4 = !{!\"_ZTSNSt12_Vector_baseIiSaIiEE17_Vector_impl_dataE\", !5, i64 0, !5, i64 8, !5, i64 16}\n!5 = !{!\"any pointer\", !6, i64 0}\n!6 = !{!\"omnipotent char\", !7, i64 0}\n!7 = !{!\"Simple C++ TBAA\"}\n!8 = !{!4, !5, i64 0}\n!9 = !{!10, !5, i64 0}\n!10 = !{!\"_ZTSNSt12_Vector_baseISt6vectorIiSaIiEESaIS2_EE17_Vector_impl_dataE\", !5, i64 0, !5, i64 8, !5, i64 16}\n!11 = !{!10, !5, i64 8}\n!12 = distinct !{!12, !13}\n!13 = !{!\"llvm.loop.mustprogress\"}\n!14 = !{!15, !15, i64 0}\n!15 = !{!\"int\", !6, i64 0}\n!16 = distinct !{!16, !13}\n!17 = !{!4, !5, i64 16}\n!18 = !{!10, !5, i64 16}\n!19 = distinct !{!19, !13}\n!20 = !{!5, !5, i64 0}\n!21 = distinct !{!21, !13}\n", "target": "This is the targeted source code:\n/*\nYou are given a non-empty vector of positive integers. Return the greatest integer that is greater than \nzero, and has a frequency greater than or equal to the value of the integer itself. \nThe frequency of an integer is the number of times it appears in the vector.\nIf no such a value exist, return -1.\nExamples:\n    search({4, 1, 2, 2, 3, 1}) == 2\n    search({1, 2, 2, 3, 3, 3, 4, 4, 4}) == 3\n    search({5, 5, 4, 4, 4}) == -1\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint search(vector<int> lst){\n\n    vector<vector<int>> freq={};\n    int max=-1;\n    for (int i=0;i<lst.size();i++)\n    {\n        bool has=false;\n        for (int j=0;j<freq.size();j++)\n            if (lst[i]==freq[j][0]) \n            {\n            freq[j][1]+=1;\n            has=true;\n            if (freq[j][1]>=freq[j][0] and freq[j][0]>max) max=freq[j][0];\n            }\n        if (not(has)) \n        {\n        freq.push_back({lst[i],1});\n        if (max==-1 and lst[i]==1) max=1;\n        }\n    }\n    return max;\n}\n"}
{"input": "Convert this to C++:\n; ModuleID = '../../Human_xBenchmarks_164/CPP_70/CPP_70.cpp'\nsource_filename = \"../../Human_xBenchmarks_164/CPP_70/CPP_70.cpp\"\ntarget datalayout = \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\ntarget triple = \"x86_64-unknown-linux-gnu\"\n\n%\"class.std::vector\" = type { %\"struct.std::_Vector_base\" }\n%\"struct.std::_Vector_base\" = type { %\"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl\" }\n%\"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl\" = type { %\"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl_data\" }\n%\"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl_data\" = type { i32*, i32*, i32* }\n%\"struct.__gnu_cxx::__ops::_Iter_less_iter\" = type { i8 }\n\n$_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEElNS0_5__ops15_Iter_less_iterEEvT_S9_T0_T1_ = comdat any\n\n$_ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_ = comdat any\n\n$_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEENS0_5__ops15_Iter_less_iterEEvT_S9_RT0_ = comdat any\n\n@.str = private unnamed_addr constant [26 x i8] c\"vector::_M_realloc_insert\\00\", align 1\n\n; Function Attrs: uwtable\ndefine dso_local void @_Z17strange_sort_listSt6vectorIiSaIiEE(%\"class.std::vector\"* noalias nocapture sret(%\"class.std::vector\") align 8 %0, %\"class.std::vector\"* nocapture readonly %1) local_unnamed_addr #0 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {\n  %3 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %1, i64 0, i32 0, i32 0, i32 0, i32 0\n  %4 = bitcast %\"class.std::vector\"* %0 to i8*\n  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(24) %4, i8 0, i64 24, i1 false)\n  %5 = load i32*, i32** %3, align 8, !tbaa !3\n  %6 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %1, i64 0, i32 0, i32 0, i32 0, i32 1\n  %7 = load i32*, i32** %6, align 8, !tbaa !3\n  %8 = icmp eq i32* %5, %7\n  br i1 %8, label %19, label %9\n\n9:                                                ; preds = %2\n  %10 = ptrtoint i32* %7 to i64\n  %11 = ptrtoint i32* %5 to i64\n  %12 = sub i64 %10, %11\n  %13 = ashr exact i64 %12, 2\n  %14 = tail call i64 @llvm.ctlz.i64(i64 %13, i1 true) #8, !range !7\n  %15 = shl nuw nsw i64 %14, 1\n  %16 = xor i64 %15, 126\n  call void @_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEElNS0_5__ops15_Iter_less_iterEEvT_S9_T0_T1_(i32* %5, i32* %7, i64 %16)\n  call void @_ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_(i32* %5, i32* %7)\n  %17 = load i32*, i32** %6, align 8, !tbaa !8\n  %18 = load i32*, i32** %3, align 8, !tbaa !10\n  br label %19\n\n19:                                               ; preds = %9, %2\n  %20 = phi i32* [ %18, %9 ], [ %5, %2 ]\n  %21 = phi i32* [ %17, %9 ], [ %5, %2 ]\n  %22 = ptrtoint i32* %21 to i64\n  %23 = ptrtoint i32* %20 to i64\n  %24 = sub i64 %22, %23\n  %25 = lshr exact i64 %24, 2\n  %26 = trunc i64 %25 to i32\n  %27 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0, i64 0, i32 0, i32 0, i32 0, i32 1\n  %28 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0, i64 0, i32 0, i32 0, i32 0, i32 2\n  %29 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0, i64 0, i32 0, i32 0, i32 0, i32 0\n  %30 = add i32 %26, -1\n  %31 = icmp sgt i32 %30, 0\n  br i1 %31, label %32, label %152\n\n32:                                               ; preds = %19\n  %33 = zext i32 %30 to i64\n  br label %34\n\n34:                                               ; preds = %140, %32\n  %35 = phi i32* [ null, %32 ], [ %133, %140 ]\n  %36 = phi i32* [ null, %32 ], [ %134, %140 ]\n  %37 = phi i32* [ null, %32 ], [ %135, %140 ]\n  %38 = phi i32* [ %20, %32 ], [ %142, %140 ]\n  %39 = phi i64 [ 0, %32 ], [ %136, %140 ]\n  %40 = phi i64 [ %33, %32 ], [ %141, %140 ]\n  %41 = phi i32 [ %30, %32 ], [ %137, %140 ]\n  %42 = getelementptr inbounds i32, i32* %38, i64 %39\n  %43 = icmp eq i32* %37, %35\n  br i1 %43, label %47, label %44\n\n44:                                               ; preds = %34\n  %45 = load i32, i32* %42, align 4, !tbaa !11\n  store i32 %45, i32* %37, align 4, !tbaa !11\n  %46 = getelementptr inbounds i32, i32* %37, i64 1\n  store i32* %46, i32** %27, align 8, !tbaa !8\n  br label %85\n\n47:                                               ; preds = %34\n  %48 = ptrtoint i32* %35 to i64\n  %49 = ptrtoint i32* %36 to i64\n  %50 = sub i64 %48, %49\n  %51 = ashr exact i64 %50, 2\n  %52 = icmp eq i64 %50, 9223372036854775804\n  br i1 %52, label %53, label %55\n\n53:                                               ; preds = %47\n  invoke void @_ZSt20__throw_length_errorPKc(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str, i64 0, i64 0)) #9\n          to label %54 unwind label %146\n\n54:                                               ; preds = %53\n  unreachable\n\n55:                                               ; preds = %47\n  %56 = icmp eq i64 %50, 0\n  %57 = select i1 %56, i64 1, i64 %51\n  %58 = add nsw i64 %57, %51\n  %59 = icmp ult i64 %58, %51\n  %60 = icmp ugt i64 %58, 2305843009213693951\n  %61 = or i1 %59, %60\n  %62 = select i1 %61, i64 2305843009213693951, i64 %58\n  %63 = icmp eq i64 %62, 0\n  br i1 %63, label %69, label %64\n\n64:                                               ; preds = %55\n  %65 = shl nuw nsw i64 %62, 2\n  %66 = invoke noalias nonnull i8* @_Znwm(i64 %65) #10\n          to label %67 unwind label %143\n\n67:                                               ; preds = %64\n  %68 = bitcast i8* %66 to i32*\n  br label %69\n\n69:                                               ; preds = %67, %55\n  %70 = phi i32* [ %68, %67 ], [ null, %55 ]\n  %71 = getelementptr inbounds i32, i32* %70, i64 %51\n  %72 = load i32, i32* %42, align 4, !tbaa !11\n  store i32 %72, i32* %71, align 4, !tbaa !11\n  %73 = icmp sgt i64 %50, 0\n  br i1 %73, label %74, label %77\n\n74:                                               ; preds = %69\n  %75 = bitcast i32* %70 to i8*\n  %76 = bitcast i32* %36 to i8*\n  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %75, i8* align 4 %76, i64 %50, i1 false) #8\n  br label %77\n\n77:                                               ; preds = %74, %69\n  %78 = getelementptr inbounds i32, i32* %71, i64 1\n  %79 = icmp eq i32* %36, null\n  br i1 %79, label %82, label %80\n\n80:                                               ; preds = %77\n  %81 = bitcast i32* %36 to i8*\n  tail call void @_ZdlPv(i8* nonnull %81) #8\n  br label %82\n\n82:                                               ; preds = %80, %77\n  store i32* %70, i32** %29, align 8, !tbaa !10\n  store i32* %78, i32** %27, align 8, !tbaa !8\n  %83 = getelementptr inbounds i32, i32* %70, i64 %62\n  store i32* %83, i32** %28, align 8, !tbaa !13\n  %84 = load i32*, i32** %3, align 8, !tbaa !10\n  br label %85\n\n85:                                               ; preds = %82, %44\n  %86 = phi i32* [ %83, %82 ], [ %35, %44 ]\n  %87 = phi i32* [ %78, %82 ], [ %46, %44 ]\n  %88 = phi i32* [ %84, %82 ], [ %38, %44 ]\n  %89 = phi i32* [ %70, %82 ], [ %36, %44 ]\n  %90 = getelementptr inbounds i32, i32* %88, i64 %40\n  %91 = icmp eq i32* %87, %86\n  br i1 %91, label %95, label %92\n\n92:                                               ; preds = %85\n  %93 = load i32, i32* %90, align 4, !tbaa !11\n  store i32 %93, i32* %87, align 4, !tbaa !11\n  %94 = getelementptr inbounds i32, i32* %87, i64 1\n  store i32* %94, i32** %27, align 8, !tbaa !8\n  br label %132\n\n95:                                               ; preds = %85\n  %96 = ptrtoint i32* %86 to i64\n  %97 = ptrtoint i32* %89 to i64\n  %98 = sub i64 %96, %97\n  %99 = ashr exact i64 %98, 2\n  %100 = icmp eq i64 %98, 9223372036854775804\n  br i1 %100, label %101, label %103\n\n101:                                              ; preds = %95\n  invoke void @_ZSt20__throw_length_errorPKc(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str, i64 0, i64 0)) #9\n          to label %102 unwind label %146\n\n102:                                              ; preds = %101\n  unreachable\n\n103:                                              ; preds = %95\n  %104 = icmp eq i64 %98, 0\n  %105 = select i1 %104, i64 1, i64 %99\n  %106 = add nsw i64 %105, %99\n  %107 = icmp ult i64 %106, %99\n  %108 = icmp ugt i64 %106, 2305843009213693951\n  %109 = or i1 %107, %108\n  %110 = select i1 %109, i64 2305843009213693951, i64 %106\n  %111 = icmp eq i64 %110, 0\n  br i1 %111, label %117, label %112\n\n112:                                              ; preds = %103\n  %113 = shl nuw nsw i64 %110, 2\n  %114 = invoke noalias nonnull i8* @_Znwm(i64 %113) #10\n          to label %115 unwind label %143\n\n115:                                              ; preds = %112\n  %116 = bitcast i8* %114 to i32*\n  br label %117\n\n117:                                              ; preds = %115, %103\n  %118 = phi i32* [ %116, %115 ], [ null, %103 ]\n  %119 = getelementptr inbounds i32, i32* %118, i64 %99\n  %120 = load i32, i32* %90, align 4, !tbaa !11\n  store i32 %120, i32* %119, align 4, !tbaa !11\n  %121 = icmp sgt i64 %98, 0\n  br i1 %121, label %122, label %125\n\n122:                                              ; preds = %117\n  %123 = bitcast i32* %118 to i8*\n  %124 = bitcast i32* %89 to i8*\n  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %123, i8* align 4 %124, i64 %98, i1 false) #8\n  br label %125\n\n125:                                              ; preds = %122, %117\n  %126 = getelementptr inbounds i32, i32* %119, i64 1\n  %127 = icmp eq i32* %89, null\n  br i1 %127, label %130, label %128\n\n128:                                              ; preds = %125\n  %129 = bitcast i32* %89 to i8*\n  tail call void @_ZdlPv(i8* nonnull %129) #8\n  br label %130\n\n130:                                              ; preds = %128, %125\n  store i32* %118, i32** %29, align 8, !tbaa !10\n  store i32* %126, i32** %27, align 8, !tbaa !8\n  %131 = getelementptr inbounds i32, i32* %118, i64 %110\n  store i32* %131, i32** %28, align 8, !tbaa !13\n  br label %132\n\n132:                                              ; preds = %130, %92\n  %133 = phi i32* [ %131, %130 ], [ %86, %92 ]\n  %134 = phi i32* [ %118, %130 ], [ %89, %92 ]\n  %135 = phi i32* [ %126, %130 ], [ %94, %92 ]\n  %136 = add nuw nsw i64 %39, 1\n  %137 = add i32 %41, -1\n  %138 = sext i32 %137 to i64\n  %139 = icmp slt i64 %136, %138\n  br i1 %139, label %140, label %149, !llvm.loop !14\n\n140:                                              ; preds = %132\n  %141 = add nsw i64 %40, -1\n  %142 = load i32*, i32** %3, align 8, !tbaa !10\n  br label %34\n\n143:                                              ; preds = %64, %112\n  %144 = phi i32* [ %36, %64 ], [ %89, %112 ]\n  %145 = landingpad { i8*, i32 }\n          cleanup\n  br label %205\n\n146:                                              ; preds = %53, %101, %173, %184\n  %147 = phi i32* [ %36, %53 ], [ %89, %101 ], [ %166, %173 ], [ %166, %184 ]\n  %148 = landingpad { i8*, i32 }\n          cleanup\n  br label %205\n\n149:                                              ; preds = %132\n  %150 = trunc i64 %136 to i32\n  %151 = icmp eq i32 %137, %150\n  br i1 %151, label %156, label %204\n\n152:                                              ; preds = %19\n  %153 = icmp eq i32 %30, 0\n  br i1 %153, label %154, label %204\n\n154:                                              ; preds = %152\n  %155 = load i32*, i32** %3, align 8, !tbaa !10\n  br label %164\n\n156:                                              ; preds = %149\n  %157 = and i64 %136, 4294967295\n  %158 = load i32*, i32** %3, align 8, !tbaa !10\n  %159 = getelementptr inbounds i32, i32* %158, i64 %157\n  %160 = icmp eq i32* %135, %133\n  br i1 %160, label %164, label %161\n\n161:                                              ; preds = %156\n  %162 = load i32, i32* %159, align 4, !tbaa !11\n  store i32 %162, i32* %135, align 4, !tbaa !11\n  %163 = getelementptr inbounds i32, i32* %135, i64 1\n  store i32* %163, i32** %27, align 8, !tbaa !8\n  br label %204\n\n164:                                              ; preds = %154, %156\n  %165 = phi i32* [ %155, %154 ], [ %159, %156 ]\n  %166 = phi i32* [ null, %154 ], [ %134, %156 ]\n  %167 = phi i32* [ null, %154 ], [ %133, %156 ]\n  %168 = ptrtoint i32* %167 to i64\n  %169 = ptrtoint i32* %166 to i64\n  %170 = sub i64 %168, %169\n  %171 = ashr exact i64 %170, 2\n  %172 = icmp eq i64 %170, 9223372036854775804\n  br i1 %172, label %173, label %175\n\n173:                                              ; preds = %164\n  invoke void @_ZSt20__throw_length_errorPKc(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str, i64 0, i64 0)) #9\n          to label %174 unwind label %146\n\n174:                                              ; preds = %173\n  unreachable\n\n175:                                              ; preds = %164\n  %176 = icmp eq i64 %170, 0\n  %177 = select i1 %176, i64 1, i64 %171\n  %178 = add nsw i64 %177, %171\n  %179 = icmp ult i64 %178, %171\n  %180 = icmp ugt i64 %178, 2305843009213693951\n  %181 = or i1 %179, %180\n  %182 = select i1 %181, i64 2305843009213693951, i64 %178\n  %183 = icmp eq i64 %182, 0\n  br i1 %183, label %189, label %184\n\n184:                                              ; preds = %175\n  %185 = shl nuw nsw i64 %182, 2\n  %186 = invoke noalias nonnull i8* @_Znwm(i64 %185) #10\n          to label %187 unwind label %146\n\n187:                                              ; preds = %184\n  %188 = bitcast i8* %186 to i32*\n  br label %189\n\n189:                                              ; preds = %187, %175\n  %190 = phi i32* [ %188, %187 ], [ null, %175 ]\n  %191 = getelementptr inbounds i32, i32* %190, i64 %171\n  %192 = load i32, i32* %165, align 4, !tbaa !11\n  store i32 %192, i32* %191, align 4, !tbaa !11\n  %193 = icmp sgt i64 %170, 0\n  br i1 %193, label %194, label %197\n\n194:                                              ; preds = %189\n  %195 = bitcast i32* %190 to i8*\n  %196 = bitcast i32* %166 to i8*\n  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %195, i8* align 4 %196, i64 %170, i1 false) #8\n  br label %197\n\n197:                                              ; preds = %194, %189\n  %198 = getelementptr inbounds i32, i32* %191, i64 1\n  %199 = icmp eq i32* %166, null\n  br i1 %199, label %202, label %200\n\n200:                                              ; preds = %197\n  %201 = bitcast i32* %166 to i8*\n  tail call void @_ZdlPv(i8* nonnull %201) #8\n  br label %202\n\n202:                                              ; preds = %200, %197\n  store i32* %190, i32** %29, align 8, !tbaa !10\n  store i32* %198, i32** %27, align 8, !tbaa !8\n  %203 = getelementptr inbounds i32, i32* %190, i64 %182\n  store i32* %203, i32** %28, align 8, !tbaa !13\n  br label %204\n\n204:                                              ; preds = %152, %202, %161, %149\n  ret void\n\n205:                                              ; preds = %143, %146\n  %206 = phi i32* [ %144, %143 ], [ %147, %146 ]\n  %207 = phi { i8*, i32 } [ %145, %143 ], [ %148, %146 ]\n  %208 = icmp eq i32* %206, null\n  br i1 %208, label %211, label %209\n\n209:                                              ; preds = %205\n  %210 = bitcast i32* %206 to i8*\n  tail call void @_ZdlPv(i8* nonnull %210) #8\n  br label %211\n\n211:                                              ; preds = %205, %209\n  resume { i8*, i32 } %207\n}\n\n; Function Attrs: argmemonly mustprogress nofree nounwind willreturn writeonly\ndeclare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1\n\ndeclare dso_local i32 @__gxx_personality_v0(...)\n\n; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn\ndeclare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2\n\n; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn\ndeclare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2\n\n; Function Attrs: nobuiltin nounwind\ndeclare dso_local void @_ZdlPv(i8*) local_unnamed_addr #3\n\n; Function Attrs: uwtable\ndefine linkonce_odr dso_local void @_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEElNS0_5__ops15_Iter_less_iterEEvT_S9_T0_T1_(i32* %0, i32* %1, i64 %2) local_unnamed_addr #0 comdat {\n  %4 = alloca %\"struct.__gnu_cxx::__ops::_Iter_less_iter\", align 1\n  %5 = ptrtoint i32* %0 to i64\n  %6 = getelementptr inbounds i32, i32* %0, i64 1\n  %7 = ptrtoint i32* %1 to i64\n  %8 = sub i64 %7, %5\n  %9 = icmp sgt i64 %8, 64\n  br i1 %9, label %10, label %123\n\n10:                                               ; preds = %3, %119\n  %11 = phi i64 [ %121, %119 ], [ %8, %3 ]\n  %12 = phi i64 [ %76, %119 ], [ %2, %3 ]\n  %13 = phi i32* [ %107, %119 ], [ %1, %3 ]\n  %14 = icmp eq i64 %12, 0\n  br i1 %14, label %15, label %74\n\n15:                                               ; preds = %10\n  %16 = getelementptr inbounds %\"struct.__gnu_cxx::__ops::_Iter_less_iter\", %\"struct.__gnu_cxx::__ops::_Iter_less_iter\"* %4, i64 0, i32 0\n  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %16)\n  call void @_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEENS0_5__ops15_Iter_less_iterEEvT_S9_RT0_(i32* %0, i32* %13, %\"struct.__gnu_cxx::__ops::_Iter_less_iter\"* nonnull align 1 dereferenceable(1) %4)\n  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %16)\n  br label %17\n\n17:                                               ; preds = %15, %70\n  %18 = phi i32* [ %19, %70 ], [ %13, %15 ]\n  %19 = getelementptr inbounds i32, i32* %18, i64 -1\n  %20 = load i32, i32* %19, align 4, !tbaa !11\n  %21 = load i32, i32* %0, align 4, !tbaa !11\n  store i32 %21, i32* %19, align 4, !tbaa !11\n  %22 = ptrtoint i32* %19 to i64\n  %23 = sub i64 %22, %5\n  %24 = ashr exact i64 %23, 2\n  %25 = add nsw i64 %24, -1\n  %26 = sdiv i64 %25, 2\n  %27 = icmp sgt i64 %23, 8\n  br i1 %27, label %28, label %43\n\n28:                                               ; preds = %17, %28\n  %29 = phi i64 [ %38, %28 ], [ 0, %17 ]\n  %30 = shl i64 %29, 1\n  %31 = add i64 %30, 2\n  %32 = getelementptr inbounds i32, i32* %0, i64 %31\n  %33 = or i64 %30, 1\n  %34 = getelementptr inbounds i32, i32* %0, i64 %33\n  %35 = load i32, i32* %32, align 4, !tbaa !11\n  %36 = load i32, i32* %34, align 4, !tbaa !11\n  %37 = icmp slt i32 %35, %36\n  %38 = select i1 %37, i64 %33, i64 %31\n  %39 = getelementptr inbounds i32, i32* %0, i64 %38\n  %40 = load i32, i32* %39, align 4, !tbaa !11\n  %41 = getelementptr inbounds i32, i32* %0, i64 %29\n  store i32 %40, i32* %41, align 4, !tbaa !11\n  %42 = icmp slt i64 %38, %26\n  br i1 %42, label %28, label %43, !llvm.loop !16\n\n43:                                               ; preds = %28, %17\n  %44 = phi i64 [ 0, %17 ], [ %38, %28 ]\n  %45 = and i64 %23, 4\n  %46 = icmp eq i64 %45, 0\n  br i1 %46, label %47, label %57\n\n47:                                               ; preds = %43\n  %48 = add nsw i64 %24, -2\n  %49 = sdiv i64 %48, 2\n  %50 = icmp eq i64 %44, %49\n  br i1 %50, label %51, label %57\n\n51:                                               ; preds = %47\n  %52 = shl i64 %44, 1\n  %53 = or i64 %52, 1\n  %54 = getelementptr inbounds i32, i32* %0, i64 %53\n  %55 = load i32, i32* %54, align 4, !tbaa !11\n  %56 = getelementptr inbounds i32, i32* %0, i64 %44\n  store i32 %55, i32* %56, align 4, !tbaa !11\n  br label %57\n\n57:                                               ; preds = %51, %47, %43\n  %58 = phi i64 [ %53, %51 ], [ %44, %47 ], [ %44, %43 ]\n  %59 = icmp sgt i64 %58, 0\n  br i1 %59, label %60, label %70\n\n60:                                               ; preds = %57, %67\n  %61 = phi i64 [ %63, %67 ], [ %58, %57 ]\n  %62 = add nsw i64 %61, -1\n  %63 = lshr i64 %62, 1\n  %64 = getelementptr inbounds i32, i32* %0, i64 %63\n  %65 = load i32, i32* %64, align 4, !tbaa !11\n  %66 = icmp slt i32 %65, %20\n  br i1 %66, label %67, label %70\n\n67:                                               ; preds = %60\n  %68 = getelementptr inbounds i32, i32* %0, i64 %61\n  store i32 %65, i32* %68, align 4, !tbaa !11\n  %69 = icmp ult i64 %62, 2\n  br i1 %69, label %70, label %60, !llvm.loop !17\n\n70:                                               ; preds = %67, %60, %57\n  %71 = phi i64 [ %58, %57 ], [ %61, %60 ], [ 0, %67 ]\n  %72 = getelementptr inbounds i32, i32* %0, i64 %71\n  store i32 %20, i32* %72, align 4, !tbaa !11\n  %73 = icmp sgt i64 %23, 4\n  br i1 %73, label %17, label %123, !llvm.loop !18\n\n74:                                               ; preds = %10\n  %75 = lshr i64 %11, 3\n  %76 = add nsw i64 %12, -1\n  %77 = getelementptr inbounds i32, i32* %0, i64 %75\n  %78 = getelementptr inbounds i32, i32* %13, i64 -1\n  %79 = load i32, i32* %6, align 4, !tbaa !11\n  %80 = load i32, i32* %77, align 4, !tbaa !11\n  %81 = icmp slt i32 %79, %80\n  %82 = load i32, i32* %78, align 4, !tbaa !11\n  br i1 %81, label %83, label %92\n\n83:                                               ; preds = %74\n  %84 = icmp slt i32 %80, %82\n  br i1 %84, label %85, label %87\n\n85:                                               ; preds = %83\n  %86 = load i32, i32* %0, align 4, !tbaa !11\n  store i32 %80, i32* %0, align 4, !tbaa !11\n  store i32 %86, i32* %77, align 4, !tbaa !11\n  br label %101\n\n87:                                               ; preds = %83\n  %88 = icmp slt i32 %79, %82\n  %89 = load i32, i32* %0, align 4, !tbaa !11\n  br i1 %88, label %90, label %91\n\n90:                                               ; preds = %87\n  store i32 %82, i32* %0, align 4, !tbaa !11\n  store i32 %89, i32* %78, align 4, !tbaa !11\n  br label %101\n\n91:                                               ; preds = %87\n  store i32 %79, i32* %0, align 4, !tbaa !11\n  store i32 %89, i32* %6, align 4, !tbaa !11\n  br label %101\n\n92:                                               ; preds = %74\n  %93 = icmp slt i32 %79, %82\n  br i1 %93, label %94, label %96\n\n94:                                               ; preds = %92\n  %95 = load i32, i32* %0, align 4, !tbaa !11\n  store i32 %79, i32* %0, align 4, !tbaa !11\n  store i32 %95, i32* %6, align 4, !tbaa !11\n  br label %101\n\n96:                                               ; preds = %92\n  %97 = icmp slt i32 %80, %82\n  %98 = load i32, i32* %0, align 4, !tbaa !11\n  br i1 %97, label %99, label %100\n\n99:                                               ; preds = %96\n  store i32 %82, i32* %0, align 4, !tbaa !11\n  store i32 %98, i32* %78, align 4, !tbaa !11\n  br label %101\n\n100:                                              ; preds = %96\n  store i32 %80, i32* %0, align 4, !tbaa !11\n  store i32 %98, i32* %77, align 4, !tbaa !11\n  br label %101\n\n101:                                              ; preds = %100, %99, %94, %91, %90, %85\n  br label %102\n\n102:                                              ; preds = %101, %118\n  %103 = phi i32* [ %110, %118 ], [ %6, %101 ]\n  %104 = phi i32* [ %113, %118 ], [ %13, %101 ]\n  %105 = load i32, i32* %0, align 4, !tbaa !11\n  br label %106\n\n106:                                              ; preds = %106, %102\n  %107 = phi i32* [ %103, %102 ], [ %110, %106 ]\n  %108 = load i32, i32* %107, align 4, !tbaa !11\n  %109 = icmp slt i32 %108, %105\n  %110 = getelementptr inbounds i32, i32* %107, i64 1\n  br i1 %109, label %106, label %111, !llvm.loop !19\n\n111:                                              ; preds = %106, %111\n  %112 = phi i32* [ %113, %111 ], [ %104, %106 ]\n  %113 = getelementptr inbounds i32, i32* %112, i64 -1\n  %114 = load i32, i32* %113, align 4, !tbaa !11\n  %115 = icmp slt i32 %105, %114\n  br i1 %115, label %111, label %116, !llvm.loop !20\n\n116:                                              ; preds = %111\n  %117 = icmp ult i32* %107, %113\n  br i1 %117, label %118, label %119\n\n118:                                              ; preds = %116\n  store i32 %114, i32* %107, align 4, !tbaa !11\n  store i32 %108, i32* %113, align 4, !tbaa !11\n  br label %102, !llvm.loop !21\n\n119:                                              ; preds = %116\n  tail call void @_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEElNS0_5__ops15_Iter_less_iterEEvT_S9_T0_T1_(i32* nonnull %107, i32* %13, i64 %76)\n  %120 = ptrtoint i32* %107 to i64\n  %121 = sub i64 %120, %5\n  %122 = icmp sgt i64 %121, 64\n  br i1 %122, label %10, label %123, !llvm.loop !22\n\n123:                                              ; preds = %119, %70, %3\n  ret void\n}\n\n; Function Attrs: uwtable\ndefine linkonce_odr dso_local void @_ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_(i32* %0, i32* %1) local_unnamed_addr #0 comdat {\n  %3 = ptrtoint i32* %1 to i64\n  %4 = ptrtoint i32* %0 to i64\n  %5 = sub i64 %3, %4\n  %6 = icmp sgt i64 %5, 64\n  br i1 %6, label %7, label %38\n\n7:                                                ; preds = %2\n  %8 = bitcast i32* %0 to i8*\n  %9 = getelementptr i32, i32* %0, i64 1\n  %10 = load i32, i32* %9, align 4, !tbaa !11\n  %11 = load i32, i32* %0, align 4, !tbaa !11\n  %12 = icmp slt i32 %10, %11\n  br i1 %12, label %13, label %15\n\n13:                                               ; preds = %7\n  %14 = load i32, i32* %0, align 4\n  store i32 %14, i32* %9, align 4\n  br label %15\n\n15:                                               ; preds = %7, %13\n  %16 = phi i32* [ %0, %13 ], [ %9, %7 ]\n  store i32 %10, i32* %16, align 4, !tbaa !11\n  %17 = getelementptr inbounds i32, i32* %0, i64 2\n  %18 = load i32, i32* %17, align 4, !tbaa !11\n  %19 = load i32, i32* %0, align 4, !tbaa !11\n  %20 = icmp slt i32 %18, %19\n  br i1 %20, label %84, label %74\n\n21:                                               ; preds = %322, %34\n  %22 = phi i32* [ %36, %34 ], [ %324, %322 ]\n  %23 = load i32, i32* %22, align 4, !tbaa !11\n  %24 = getelementptr inbounds i32, i32* %22, i64 -1\n  %25 = load i32, i32* %24, align 4, !tbaa !11\n  %26 = icmp slt i32 %23, %25\n  br i1 %26, label %27, label %34\n\n27:                                               ; preds = %21, %27\n  %28 = phi i32 [ %32, %27 ], [ %25, %21 ]\n  %29 = phi i32* [ %31, %27 ], [ %24, %21 ]\n  %30 = phi i32* [ %29, %27 ], [ %22, %21 ]\n  store i32 %28, i32* %30, align 4, !tbaa !11\n  %31 = getelementptr inbounds i32, i32* %29, i64 -1\n  %32 = load i32, i32* %31, align 4, !tbaa !11\n  %33 = icmp slt i32 %23, %32\n  br i1 %33, label %27, label %34, !llvm.loop !23\n\n34:                                               ; preds = %27, %21\n  %35 = phi i32* [ %22, %21 ], [ %29, %27 ]\n  store i32 %23, i32* %35, align 4, !tbaa !11\n  %36 = getelementptr inbounds i32, i32* %22, i64 1\n  %37 = icmp eq i32* %36, %1\n  br i1 %37, label %73, label %21, !llvm.loop !24\n\n38:                                               ; preds = %2\n  %39 = icmp eq i32* %0, %1\n  br i1 %39, label %73, label %40\n\n40:                                               ; preds = %38\n  %41 = bitcast i32* %0 to i8*\n  %42 = getelementptr inbounds i32, i32* %0, i64 1\n  %43 = icmp eq i32* %42, %1\n  br i1 %43, label %73, label %44\n\n44:                                               ; preds = %40, %69\n  %45 = phi i32* [ %71, %69 ], [ %42, %40 ]\n  %46 = phi i32* [ %45, %69 ], [ %0, %40 ]\n  %47 = load i32, i32* %45, align 4, !tbaa !11\n  %48 = load i32, i32* %0, align 4, !tbaa !11\n  %49 = icmp slt i32 %47, %48\n  br i1 %49, label %50, label %59\n\n50:                                               ; preds = %44\n  %51 = ptrtoint i32* %45 to i64\n  %52 = sub i64 %51, %4\n  %53 = icmp eq i64 %52, 0\n  br i1 %53, label %69, label %54\n\n54:                                               ; preds = %50\n  %55 = ashr exact i64 %52, 2\n  %56 = sub nsw i64 2, %55\n  %57 = getelementptr inbounds i32, i32* %46, i64 %56\n  %58 = bitcast i32* %57 to i8*\n  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* nonnull align 4 %58, i8* nonnull align 4 %41, i64 %52, i1 false) #8\n  br label %69\n\n59:                                               ; preds = %44\n  %60 = load i32, i32* %46, align 4, !tbaa !11\n  %61 = icmp slt i32 %47, %60\n  br i1 %61, label %62, label %69\n\n62:                                               ; preds = %59, %62\n  %63 = phi i32 [ %67, %62 ], [ %60, %59 ]\n  %64 = phi i32* [ %66, %62 ], [ %46, %59 ]\n  %65 = phi i32* [ %64, %62 ], [ %45, %59 ]\n  store i32 %63, i32* %65, align 4, !tbaa !11\n  %66 = getelementptr inbounds i32, i32* %64, i64 -1\n  %67 = load i32, i32* %66, align 4, !tbaa !11\n  %68 = icmp slt i32 %47, %67\n  br i1 %68, label %62, label %69, !llvm.loop !23\n\n69:                                               ; preds = %62, %59, %54, %50\n  %70 = phi i32* [ %0, %50 ], [ %0, %54 ], [ %45, %59 ], [ %64, %62 ]\n  store i32 %47, i32* %70, align 4, !tbaa !11\n  %71 = getelementptr inbounds i32, i32* %45, i64 1\n  %72 = icmp eq i32* %71, %1\n  br i1 %72, label %73, label %44, !llvm.loop !25\n\n73:                                               ; preds = %69, %34, %40, %38, %322\n  ret void\n\n74:                                               ; preds = %15\n  %75 = load i32, i32* %9, align 4, !tbaa !11\n  %76 = icmp slt i32 %18, %75\n  br i1 %76, label %77, label %88\n\n77:                                               ; preds = %74, %77\n  %78 = phi i32 [ %82, %77 ], [ %75, %74 ]\n  %79 = phi i32* [ %81, %77 ], [ %9, %74 ]\n  %80 = phi i32* [ %79, %77 ], [ %17, %74 ]\n  store i32 %78, i32* %80, align 4, !tbaa !11\n  %81 = getelementptr inbounds i32, i32* %79, i64 -1\n  %82 = load i32, i32* %81, align 4, !tbaa !11\n  %83 = icmp slt i32 %18, %82\n  br i1 %83, label %77, label %88, !llvm.loop !23\n\n84:                                               ; preds = %15\n  %85 = bitcast i32* %0 to i64*\n  %86 = bitcast i32* %9 to i64*\n  %87 = load i64, i64* %85, align 4\n  store i64 %87, i64* %86, align 4\n  br label %88\n\n88:                                               ; preds = %77, %84, %74\n  %89 = phi i32* [ %0, %84 ], [ %17, %74 ], [ %79, %77 ]\n  store i32 %18, i32* %89, align 4, !tbaa !11\n  %90 = getelementptr inbounds i32, i32* %0, i64 3\n  %91 = load i32, i32* %90, align 4, !tbaa !11\n  %92 = load i32, i32* %0, align 4, !tbaa !11\n  %93 = icmp slt i32 %91, %92\n  br i1 %93, label %104, label %94\n\n94:                                               ; preds = %88\n  %95 = load i32, i32* %17, align 4, !tbaa !11\n  %96 = icmp slt i32 %91, %95\n  br i1 %96, label %97, label %106\n\n97:                                               ; preds = %94, %97\n  %98 = phi i32 [ %102, %97 ], [ %95, %94 ]\n  %99 = phi i32* [ %101, %97 ], [ %17, %94 ]\n  %100 = phi i32* [ %99, %97 ], [ %90, %94 ]\n  store i32 %98, i32* %100, align 4, !tbaa !11\n  %101 = getelementptr inbounds i32, i32* %99, i64 -1\n  %102 = load i32, i32* %101, align 4, !tbaa !11\n  %103 = icmp slt i32 %91, %102\n  br i1 %103, label %97, label %106, !llvm.loop !23\n\n104:                                              ; preds = %88\n  %105 = bitcast i32* %9 to i8*\n  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* noundef nonnull align 4 dereferenceable(12) %105, i8* noundef nonnull align 4 dereferenceable(12) %8, i64 12, i1 false) #8\n  br label %106\n\n106:                                              ; preds = %97, %104, %94\n  %107 = phi i32* [ %0, %104 ], [ %90, %94 ], [ %99, %97 ]\n  store i32 %91, i32* %107, align 4, !tbaa !11\n  %108 = getelementptr inbounds i32, i32* %0, i64 4\n  %109 = load i32, i32* %108, align 4, !tbaa !11\n  %110 = load i32, i32* %0, align 4, !tbaa !11\n  %111 = icmp slt i32 %109, %110\n  br i1 %111, label %122, label %112\n\n112:                                              ; preds = %106\n  %113 = load i32, i32* %90, align 4, !tbaa !11\n  %114 = icmp slt i32 %109, %113\n  br i1 %114, label %115, label %124\n\n115:                                              ; preds = %112, %115\n  %116 = phi i32 [ %120, %115 ], [ %113, %112 ]\n  %117 = phi i32* [ %119, %115 ], [ %90, %112 ]\n  %118 = phi i32* [ %117, %115 ], [ %108, %112 ]\n  store i32 %116, i32* %118, align 4, !tbaa !11\n  %119 = getelementptr inbounds i32, i32* %117, i64 -1\n  %120 = load i32, i32* %119, align 4, !tbaa !11\n  %121 = icmp slt i32 %109, %120\n  br i1 %121, label %115, label %124, !llvm.loop !23\n\n122:                                              ; preds = %106\n  %123 = bitcast i32* %9 to i8*\n  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* noundef nonnull align 4 dereferenceable(16) %123, i8* noundef nonnull align 4 dereferenceable(16) %8, i64 16, i1 false) #8\n  br label %124\n\n124:                                              ; preds = %115, %122, %112\n  %125 = phi i32* [ %0, %122 ], [ %108, %112 ], [ %117, %115 ]\n  store i32 %109, i32* %125, align 4, !tbaa !11\n  %126 = getelementptr inbounds i32, i32* %0, i64 5\n  %127 = load i32, i32* %126, align 4, !tbaa !11\n  %128 = load i32, i32* %0, align 4, !tbaa !11\n  %129 = icmp slt i32 %127, %128\n  br i1 %129, label %140, label %130\n\n130:                                              ; preds = %124\n  %131 = load i32, i32* %108, align 4, !tbaa !11\n  %132 = icmp slt i32 %127, %131\n  br i1 %132, label %133, label %142\n\n133:                                              ; preds = %130, %133\n  %134 = phi i32 [ %138, %133 ], [ %131, %130 ]\n  %135 = phi i32* [ %137, %133 ], [ %108, %130 ]\n  %136 = phi i32* [ %135, %133 ], [ %126, %130 ]\n  store i32 %134, i32* %136, align 4, !tbaa !11\n  %137 = getelementptr inbounds i32, i32* %135, i64 -1\n  %138 = load i32, i32* %137, align 4, !tbaa !11\n  %139 = icmp slt i32 %127, %138\n  br i1 %139, label %133, label %142, !llvm.loop !23\n\n140:                                              ; preds = %124\n  %141 = bitcast i32* %9 to i8*\n  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* noundef nonnull align 4 dereferenceable(20) %141, i8* noundef nonnull align 4 dereferenceable(20) %8, i64 20, i1 false) #8\n  br label %142\n\n142:                                              ; preds = %133, %140, %130\n  %143 = phi i32* [ %0, %140 ], [ %126, %130 ], [ %135, %133 ]\n  store i32 %127, i32* %143, align 4, !tbaa !11\n  %144 = getelementptr inbounds i32, i32* %0, i64 6\n  %145 = load i32, i32* %144, align 4, !tbaa !11\n  %146 = load i32, i32* %0, align 4, !tbaa !11\n  %147 = icmp slt i32 %145, %146\n  br i1 %147, label %158, label %148\n\n148:                                              ; preds = %142\n  %149 = load i32, i32* %126, align 4, !tbaa !11\n  %150 = icmp slt i32 %145, %149\n  br i1 %150, label %151, label %160\n\n151:                                              ; preds = %148, %151\n  %152 = phi i32 [ %156, %151 ], [ %149, %148 ]\n  %153 = phi i32* [ %155, %151 ], [ %126, %148 ]\n  %154 = phi i32* [ %153, %151 ], [ %144, %148 ]\n  store i32 %152, i32* %154, align 4, !tbaa !11\n  %155 = getelementptr inbounds i32, i32* %153, i64 -1\n  %156 = load i32, i32* %155, align 4, !tbaa !11\n  %157 = icmp slt i32 %145, %156\n  br i1 %157, label %151, label %160, !llvm.loop !23\n\n158:                                              ; preds = %142\n  %159 = bitcast i32* %9 to i8*\n  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* noundef nonnull align 4 dereferenceable(24) %159, i8* noundef nonnull align 4 dereferenceable(24) %8, i64 24, i1 false) #8\n  br label %160\n\n160:                                              ; preds = %151, %158, %148\n  %161 = phi i32* [ %0, %158 ], [ %144, %148 ], [ %153, %151 ]\n  store i32 %145, i32* %161, align 4, !tbaa !11\n  %162 = getelementptr inbounds i32, i32* %0, i64 7\n  %163 = load i32, i32* %162, align 4, !tbaa !11\n  %164 = load i32, i32* %0, align 4, !tbaa !11\n  %165 = icmp slt i32 %163, %164\n  br i1 %165, label %176, label %166\n\n166:                                              ; preds = %160\n  %167 = load i32, i32* %144, align 4, !tbaa !11\n  %168 = icmp slt i32 %163, %167\n  br i1 %168, label %169, label %178\n\n169:                                              ; preds = %166, %169\n  %170 = phi i32 [ %174, %169 ], [ %167, %166 ]\n  %171 = phi i32* [ %173, %169 ], [ %144, %166 ]\n  %172 = phi i32* [ %171, %169 ], [ %162, %166 ]\n  store i32 %170, i32* %172, align 4, !tbaa !11\n  %173 = getelementptr inbounds i32, i32* %171, i64 -1\n  %174 = load i32, i32* %173, align 4, !tbaa !11\n  %175 = icmp slt i32 %163, %174\n  br i1 %175, label %169, label %178, !llvm.loop !23\n\n176:                                              ; preds = %160\n  %177 = bitcast i32* %9 to i8*\n  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* noundef nonnull align 4 dereferenceable(28) %177, i8* noundef nonnull align 4 dereferenceable(28) %8, i64 28, i1 false) #8\n  br label %178\n\n178:                                              ; preds = %169, %176, %166\n  %179 = phi i32* [ %0, %176 ], [ %162, %166 ], [ %171, %169 ]\n  store i32 %163, i32* %179, align 4, !tbaa !11\n  %180 = getelementptr inbounds i32, i32* %0, i64 8\n  %181 = load i32, i32* %180, align 4, !tbaa !11\n  %182 = load i32, i32* %0, align 4, !tbaa !11\n  %183 = icmp slt i32 %181, %182\n  br i1 %183, label %194, label %184\n\n184:                                              ; preds = %178\n  %185 = load i32, i32* %162, align 4, !tbaa !11\n  %186 = icmp slt i32 %181, %185\n  br i1 %186, label %187, label %196\n\n187:                                              ; preds = %184, %187\n  %188 = phi i32 [ %192, %187 ], [ %185, %184 ]\n  %189 = phi i32* [ %191, %187 ], [ %162, %184 ]\n  %190 = phi i32* [ %189, %187 ], [ %180, %184 ]\n  store i32 %188, i32* %190, align 4, !tbaa !11\n  %191 = getelementptr inbounds i32, i32* %189, i64 -1\n  %192 = load i32, i32* %191, align 4, !tbaa !11\n  %193 = icmp slt i32 %181, %192\n  br i1 %193, label %187, label %196, !llvm.loop !23\n\n194:                                              ; preds = %178\n  %195 = bitcast i32* %9 to i8*\n  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* noundef nonnull align 4 dereferenceable(32) %195, i8* noundef nonnull align 4 dereferenceable(32) %8, i64 32, i1 false) #8\n  br label %196\n\n196:                                              ; preds = %187, %194, %184\n  %197 = phi i32* [ %0, %194 ], [ %180, %184 ], [ %189, %187 ]\n  store i32 %181, i32* %197, align 4, !tbaa !11\n  %198 = getelementptr inbounds i32, i32* %0, i64 9\n  %199 = load i32, i32* %198, align 4, !tbaa !11\n  %200 = load i32, i32* %0, align 4, !tbaa !11\n  %201 = icmp slt i32 %199, %200\n  br i1 %201, label %212, label %202\n\n202:                                              ; preds = %196\n  %203 = load i32, i32* %180, align 4, !tbaa !11\n  %204 = icmp slt i32 %199, %203\n  br i1 %204, label %205, label %214\n\n205:                                              ; preds = %202, %205\n  %206 = phi i32 [ %210, %205 ], [ %203, %202 ]\n  %207 = phi i32* [ %209, %205 ], [ %180, %202 ]\n  %208 = phi i32* [ %207, %205 ], [ %198, %202 ]\n  store i32 %206, i32* %208, align 4, !tbaa !11\n  %209 = getelementptr inbounds i32, i32* %207, i64 -1\n  %210 = load i32, i32* %209, align 4, !tbaa !11\n  %211 = icmp slt i32 %199, %210\n  br i1 %211, label %205, label %214, !llvm.loop !23\n\n212:                                              ; preds = %196\n  %213 = bitcast i32* %9 to i8*\n  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* noundef nonnull align 4 dereferenceable(36) %213, i8* noundef nonnull align 4 dereferenceable(36) %8, i64 36, i1 false) #8\n  br label %214\n\n214:                                              ; preds = %205, %212, %202\n  %215 = phi i32* [ %0, %212 ], [ %198, %202 ], [ %207, %205 ]\n  store i32 %199, i32* %215, align 4, !tbaa !11\n  %216 = getelementptr inbounds i32, i32* %0, i64 10\n  %217 = load i32, i32* %216, align 4, !tbaa !11\n  %218 = load i32, i32* %0, align 4, !tbaa !11\n  %219 = icmp slt i32 %217, %218\n  br i1 %219, label %230, label %220\n\n220:                                              ; preds = %214\n  %221 = load i32, i32* %198, align 4, !tbaa !11\n  %222 = icmp slt i32 %217, %221\n  br i1 %222, label %223, label %232\n\n223:                                              ; preds = %220, %223\n  %224 = phi i32 [ %228, %223 ], [ %221, %220 ]\n  %225 = phi i32* [ %227, %223 ], [ %198, %220 ]\n  %226 = phi i32* [ %225, %223 ], [ %216, %220 ]\n  store i32 %224, i32* %226, align 4, !tbaa !11\n  %227 = getelementptr inbounds i32, i32* %225, i64 -1\n  %228 = load i32, i32* %227, align 4, !tbaa !11\n  %229 = icmp slt i32 %217, %228\n  br i1 %229, label %223, label %232, !llvm.loop !23\n\n230:                                              ; preds = %214\n  %231 = bitcast i32* %9 to i8*\n  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* noundef nonnull align 4 dereferenceable(40) %231, i8* noundef nonnull align 4 dereferenceable(40) %8, i64 40, i1 false) #8\n  br label %232\n\n232:                                              ; preds = %223, %230, %220\n  %233 = phi i32* [ %0, %230 ], [ %216, %220 ], [ %225, %223 ]\n  store i32 %217, i32* %233, align 4, !tbaa !11\n  %234 = getelementptr inbounds i32, i32* %0, i64 11\n  %235 = load i32, i32* %234, align 4, !tbaa !11\n  %236 = load i32, i32* %0, align 4, !tbaa !11\n  %237 = icmp slt i32 %235, %236\n  br i1 %237, label %248, label %238\n\n238:                                              ; preds = %232\n  %239 = load i32, i32* %216, align 4, !tbaa !11\n  %240 = icmp slt i32 %235, %239\n  br i1 %240, label %241, label %250\n\n241:                                              ; preds = %238, %241\n  %242 = phi i32 [ %246, %241 ], [ %239, %238 ]\n  %243 = phi i32* [ %245, %241 ], [ %216, %238 ]\n  %244 = phi i32* [ %243, %241 ], [ %234, %238 ]\n  store i32 %242, i32* %244, align 4, !tbaa !11\n  %245 = getelementptr inbounds i32, i32* %243, i64 -1\n  %246 = load i32, i32* %245, align 4, !tbaa !11\n  %247 = icmp slt i32 %235, %246\n  br i1 %247, label %241, label %250, !llvm.loop !23\n\n248:                                              ; preds = %232\n  %249 = bitcast i32* %9 to i8*\n  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* noundef nonnull align 4 dereferenceable(44) %249, i8* noundef nonnull align 4 dereferenceable(44) %8, i64 44, i1 false) #8\n  br label %250\n\n250:                                              ; preds = %241, %248, %238\n  %251 = phi i32* [ %0, %248 ], [ %234, %238 ], [ %243, %241 ]\n  store i32 %235, i32* %251, align 4, !tbaa !11\n  %252 = getelementptr inbounds i32, i32* %0, i64 12\n  %253 = load i32, i32* %252, align 4, !tbaa !11\n  %254 = load i32, i32* %0, align 4, !tbaa !11\n  %255 = icmp slt i32 %253, %254\n  br i1 %255, label %266, label %256\n\n256:                                              ; preds = %250\n  %257 = load i32, i32* %234, align 4, !tbaa !11\n  %258 = icmp slt i32 %253, %257\n  br i1 %258, label %259, label %268\n\n259:                                              ; preds = %256, %259\n  %260 = phi i32 [ %264, %259 ], [ %257, %256 ]\n  %261 = phi i32* [ %263, %259 ], [ %234, %256 ]\n  %262 = phi i32* [ %261, %259 ], [ %252, %256 ]\n  store i32 %260, i32* %262, align 4, !tbaa !11\n  %263 = getelementptr inbounds i32, i32* %261, i64 -1\n  %264 = load i32, i32* %263, align 4, !tbaa !11\n  %265 = icmp slt i32 %253, %264\n  br i1 %265, label %259, label %268, !llvm.loop !23\n\n266:                                              ; preds = %250\n  %267 = bitcast i32* %9 to i8*\n  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* noundef nonnull align 4 dereferenceable(48) %267, i8* noundef nonnull align 4 dereferenceable(48) %8, i64 48, i1 false) #8\n  br label %268\n\n268:                                              ; preds = %259, %266, %256\n  %269 = phi i32* [ %0, %266 ], [ %252, %256 ], [ %261, %259 ]\n  store i32 %253, i32* %269, align 4, !tbaa !11\n  %270 = getelementptr inbounds i32, i32* %0, i64 13\n  %271 = load i32, i32* %270, align 4, !tbaa !11\n  %272 = load i32, i32* %0, align 4, !tbaa !11\n  %273 = icmp slt i32 %271, %272\n  br i1 %273, label %284, label %274\n\n274:                                              ; preds = %268\n  %275 = load i32, i32* %252, align 4, !tbaa !11\n  %276 = icmp slt i32 %271, %275\n  br i1 %276, label %277, label %286\n\n277:                                              ; preds = %274, %277\n  %278 = phi i32 [ %282, %277 ], [ %275, %274 ]\n  %279 = phi i32* [ %281, %277 ], [ %252, %274 ]\n  %280 = phi i32* [ %279, %277 ], [ %270, %274 ]\n  store i32 %278, i32* %280, align 4, !tbaa !11\n  %281 = getelementptr inbounds i32, i32* %279, i64 -1\n  %282 = load i32, i32* %281, align 4, !tbaa !11\n  %283 = icmp slt i32 %271, %282\n  br i1 %283, label %277, label %286, !llvm.loop !23\n\n284:                                              ; preds = %268\n  %285 = bitcast i32* %9 to i8*\n  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* noundef nonnull align 4 dereferenceable(52) %285, i8* noundef nonnull align 4 dereferenceable(52) %8, i64 52, i1 false) #8\n  br label %286\n\n286:                                              ; preds = %277, %284, %274\n  %287 = phi i32* [ %0, %284 ], [ %270, %274 ], [ %279, %277 ]\n  store i32 %271, i32* %287, align 4, !tbaa !11\n  %288 = getelementptr inbounds i32, i32* %0, i64 14\n  %289 = load i32, i32* %288, align 4, !tbaa !11\n  %290 = load i32, i32* %0, align 4, !tbaa !11\n  %291 = icmp slt i32 %289, %290\n  br i1 %291, label %302, label %292\n\n292:                                              ; preds = %286\n  %293 = load i32, i32* %270, align 4, !tbaa !11\n  %294 = icmp slt i32 %289, %293\n  br i1 %294, label %295, label %304\n\n295:                                              ; preds = %292, %295\n  %296 = phi i32 [ %300, %295 ], [ %293, %292 ]\n  %297 = phi i32* [ %299, %295 ], [ %270, %292 ]\n  %298 = phi i32* [ %297, %295 ], [ %288, %292 ]\n  store i32 %296, i32* %298, align 4, !tbaa !11\n  %299 = getelementptr inbounds i32, i32* %297, i64 -1\n  %300 = load i32, i32* %299, align 4, !tbaa !11\n  %301 = icmp slt i32 %289, %300\n  br i1 %301, label %295, label %304, !llvm.loop !23\n\n302:                                              ; preds = %286\n  %303 = bitcast i32* %9 to i8*\n  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* noundef nonnull align 4 dereferenceable(56) %303, i8* noundef nonnull align 4 dereferenceable(56) %8, i64 56, i1 false) #8\n  br label %304\n\n304:                                              ; preds = %295, %302, %292\n  %305 = phi i32* [ %0, %302 ], [ %288, %292 ], [ %297, %295 ]\n  store i32 %289, i32* %305, align 4, !tbaa !11\n  %306 = getelementptr inbounds i32, i32* %0, i64 15\n  %307 = load i32, i32* %306, align 4, !tbaa !11\n  %308 = load i32, i32* %0, align 4, !tbaa !11\n  %309 = icmp slt i32 %307, %308\n  br i1 %309, label %320, label %310\n\n310:                                              ; preds = %304\n  %311 = load i32, i32* %288, align 4, !tbaa !11\n  %312 = icmp slt i32 %307, %311\n  br i1 %312, label %313, label %322\n\n313:                                              ; preds = %310, %313\n  %314 = phi i32 [ %318, %313 ], [ %311, %310 ]\n  %315 = phi i32* [ %317, %313 ], [ %288, %310 ]\n  %316 = phi i32* [ %315, %313 ], [ %306, %310 ]\n  store i32 %314, i32* %316, align 4, !tbaa !11\n  %317 = getelementptr inbounds i32, i32* %315, i64 -1\n  %318 = load i32, i32* %317, align 4, !tbaa !11\n  %319 = icmp slt i32 %307, %318\n  br i1 %319, label %313, label %322, !llvm.loop !23\n\n320:                                              ; preds = %304\n  %321 = bitcast i32* %9 to i8*\n  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* noundef nonnull align 4 dereferenceable(60) %321, i8* noundef nonnull align 4 dereferenceable(60) %8, i64 60, i1 false) #8\n  br label %322\n\n322:                                              ; preds = %313, %320, %310\n  %323 = phi i32* [ %0, %320 ], [ %306, %310 ], [ %315, %313 ]\n  store i32 %307, i32* %323, align 4, !tbaa !11\n  %324 = getelementptr inbounds i32, i32* %0, i64 16\n  %325 = icmp eq i32* %324, %1\n  br i1 %325, label %73, label %21\n}\n\n; Function Attrs: uwtable\ndefine linkonce_odr dso_local void @_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEENS0_5__ops15_Iter_less_iterEEvT_S9_RT0_(i32* %0, i32* %1, %\"struct.__gnu_cxx::__ops::_Iter_less_iter\"* nonnull align 1 dereferenceable(1) %2) local_unnamed_addr #0 comdat {\n  %4 = ptrtoint i32* %1 to i64\n  %5 = ptrtoint i32* %0 to i64\n  %6 = sub i64 %4, %5\n  %7 = ashr exact i64 %6, 2\n  %8 = icmp slt i64 %6, 8\n  br i1 %8, label %100, label %9\n\n9:                                                ; preds = %3\n  %10 = add nsw i64 %7, -2\n  %11 = lshr i64 %10, 1\n  %12 = add nsw i64 %7, -1\n  %13 = sdiv i64 %12, 2\n  %14 = and i64 %6, 4\n  %15 = icmp eq i64 %14, 0\n  br i1 %15, label %16, label %20\n\n16:                                               ; preds = %9\n  %17 = or i64 %10, 1\n  %18 = getelementptr inbounds i32, i32* %0, i64 %17\n  %19 = getelementptr inbounds i32, i32* %0, i64 %11\n  br label %57\n\n20:                                               ; preds = %9, %52\n  %21 = phi i64 [ %56, %52 ], [ %11, %9 ]\n  %22 = getelementptr inbounds i32, i32* %0, i64 %21\n  %23 = load i32, i32* %22, align 4, !tbaa !11\n  %24 = icmp sgt i64 %13, %21\n  br i1 %24, label %25, label %52\n\n25:                                               ; preds = %20, %25\n  %26 = phi i64 [ %35, %25 ], [ %21, %20 ]\n  %27 = shl i64 %26, 1\n  %28 = add i64 %27, 2\n  %29 = getelementptr inbounds i32, i32* %0, i64 %28\n  %30 = or i64 %27, 1\n  %31 = getelementptr inbounds i32, i32* %0, i64 %30\n  %32 = load i32, i32* %29, align 4, !tbaa !11\n  %33 = load i32, i32* %31, align 4, !tbaa !11\n  %34 = icmp slt i32 %32, %33\n  %35 = select i1 %34, i64 %30, i64 %28\n  %36 = getelementptr inbounds i32, i32* %0, i64 %35\n  %37 = load i32, i32* %36, align 4, !tbaa !11\n  %38 = getelementptr inbounds i32, i32* %0, i64 %26\n  store i32 %37, i32* %38, align 4, !tbaa !11\n  %39 = icmp slt i64 %35, %13\n  br i1 %39, label %25, label %40, !llvm.loop !16\n\n40:                                               ; preds = %25\n  %41 = icmp sgt i64 %35, %21\n  br i1 %41, label %42, label %52\n\n42:                                               ; preds = %40, %49\n  %43 = phi i64 [ %45, %49 ], [ %35, %40 ]\n  %44 = add nsw i64 %43, -1\n  %45 = sdiv i64 %44, 2\n  %46 = getelementptr inbounds i32, i32* %0, i64 %45\n  %47 = load i32, i32* %46, align 4, !tbaa !11\n  %48 = icmp slt i32 %47, %23\n  br i1 %48, label %49, label %52\n\n49:                                               ; preds = %42\n  %50 = getelementptr inbounds i32, i32* %0, i64 %43\n  store i32 %47, i32* %50, align 4, !tbaa !11\n  %51 = icmp sgt i64 %45, %21\n  br i1 %51, label %42, label %52, !llvm.loop !17\n\n52:                                               ; preds = %42, %49, %20, %40\n  %53 = phi i64 [ %35, %40 ], [ %21, %20 ], [ %45, %49 ], [ %43, %42 ]\n  %54 = getelementptr inbounds i32, i32* %0, i64 %53\n  store i32 %23, i32* %54, align 4, !tbaa !11\n  %55 = icmp eq i64 %21, 0\n  %56 = add nsw i64 %21, -1\n  br i1 %55, label %100, label %20, !llvm.loop !26\n\n57:                                               ; preds = %16, %95\n  %58 = phi i64 [ %99, %95 ], [ %11, %16 ]\n  %59 = getelementptr inbounds i32, i32* %0, i64 %58\n  %60 = load i32, i32* %59, align 4, !tbaa !11\n  %61 = icmp sgt i64 %13, %58\n  br i1 %61, label %62, label %77\n\n62:                                               ; preds = %57, %62\n  %63 = phi i64 [ %72, %62 ], [ %58, %57 ]\n  %64 = shl i64 %63, 1\n  %65 = add i64 %64, 2\n  %66 = getelementptr inbounds i32, i32* %0, i64 %65\n  %67 = or i64 %64, 1\n  %68 = getelementptr inbounds i32, i32* %0, i64 %67\n  %69 = load i32, i32* %66, align 4, !tbaa !11\n  %70 = load i32, i32* %68, align 4, !tbaa !11\n  %71 = icmp slt i32 %69, %70\n  %72 = select i1 %71, i64 %67, i64 %65\n  %73 = getelementptr inbounds i32, i32* %0, i64 %72\n  %74 = load i32, i32* %73, align 4, !tbaa !11\n  %75 = getelementptr inbounds i32, i32* %0, i64 %63\n  store i32 %74, i32* %75, align 4, !tbaa !11\n  %76 = icmp slt i64 %72, %13\n  br i1 %76, label %62, label %77, !llvm.loop !16\n\n77:                                               ; preds = %62, %57\n  %78 = phi i64 [ %58, %57 ], [ %72, %62 ]\n  %79 = icmp eq i64 %78, %11\n  br i1 %79, label %80, label %82\n\n80:                                               ; preds = %77\n  %81 = load i32, i32* %18, align 4, !tbaa !11\n  store i32 %81, i32* %19, align 4, !tbaa !11\n  br label %82\n\n82:                                               ; preds = %80, %77\n  %83 = phi i64 [ %17, %80 ], [ %78, %77 ]\n  %84 = icmp sgt i64 %83, %58\n  br i1 %84, label %85, label %95\n\n85:                                               ; preds = %82, %92\n  %86 = phi i64 [ %88, %92 ], [ %83, %82 ]\n  %87 = add nsw i64 %86, -1\n  %88 = sdiv i64 %87, 2\n  %89 = getelementptr inbounds i32, i32* %0, i64 %88\n  %90 = load i32, i32* %89, align 4, !tbaa !11\n  %91 = icmp slt i32 %90, %60\n  br i1 %91, label %92, label %95\n\n92:                                               ; preds = %85\n  %93 = getelementptr inbounds i32, i32* %0, i64 %86\n  store i32 %90, i32* %93, align 4, !tbaa !11\n  %94 = icmp sgt i64 %88, %58\n  br i1 %94, label %85, label %95, !llvm.loop !17\n\n95:                                               ; preds = %85, %92, %82\n  %96 = phi i64 [ %83, %82 ], [ %88, %92 ], [ %86, %85 ]\n  %97 = getelementptr inbounds i32, i32* %0, i64 %96\n  store i32 %60, i32* %97, align 4, !tbaa !11\n  %98 = icmp eq i64 %58, 0\n  %99 = add nsw i64 %58, -1\n  br i1 %98, label %100, label %57, !llvm.loop !26\n\n100:                                              ; preds = %52, %95, %3\n  ret void\n}\n\n; Function Attrs: mustprogress nofree nosync nounwind readnone speculatable willreturn\ndeclare i64 @llvm.ctlz.i64(i64, i1 immarg) #4\n\n; Function Attrs: argmemonly mustprogress nofree nounwind willreturn\ndeclare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #5\n\n; Function Attrs: noreturn\ndeclare dso_local void @_ZSt20__throw_length_errorPKc(i8*) local_unnamed_addr #6\n\n; Function Attrs: nobuiltin allocsize(0)\ndeclare dso_local nonnull i8* @_Znwm(i64) local_unnamed_addr #7\n\nattributes #0 = { uwtable \"frame-pointer\"=\"none\" \"min-legal-vector-width\"=\"0\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #1 = { argmemonly mustprogress nofree nounwind willreturn writeonly }\nattributes #2 = { argmemonly mustprogress nofree nosync nounwind willreturn }\nattributes #3 = { nobuiltin nounwind \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #4 = { mustprogress nofree nosync nounwind readnone speculatable willreturn }\nattributes #5 = { argmemonly mustprogress nofree nounwind willreturn }\nattributes #6 = { noreturn \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #7 = { nobuiltin allocsize(0) \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #8 = { nounwind }\nattributes #9 = { noreturn }\nattributes #10 = { allocsize(0) }\n\n!llvm.module.flags = !{!0, !1}\n!llvm.ident = !{!2}\n\n!0 = !{i32 1, !\"wchar_size\", i32 4}\n!1 = !{i32 7, !\"uwtable\", i32 1}\n!2 = !{!\"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)\"}\n!3 = !{!4, !4, i64 0}\n!4 = !{!\"any pointer\", !5, i64 0}\n!5 = !{!\"omnipotent char\", !6, i64 0}\n!6 = !{!\"Simple C++ TBAA\"}\n!7 = !{i64 0, i64 65}\n!8 = !{!9, !4, i64 8}\n!9 = !{!\"_ZTSNSt12_Vector_baseIiSaIiEE17_Vector_impl_dataE\", !4, i64 0, !4, i64 8, !4, i64 16}\n!10 = !{!9, !4, i64 0}\n!11 = !{!12, !12, i64 0}\n!12 = !{!\"int\", !5, i64 0}\n!13 = !{!9, !4, i64 16}\n!14 = distinct !{!14, !15}\n!15 = !{!\"llvm.loop.mustprogress\"}\n!16 = distinct !{!16, !15}\n!17 = distinct !{!17, !15}\n!18 = distinct !{!18, !15}\n!19 = distinct !{!19, !15}\n!20 = distinct !{!20, !15}\n!21 = distinct !{!21, !15}\n!22 = distinct !{!22, !15}\n!23 = distinct !{!23, !15}\n!24 = distinct !{!24, !15}\n!25 = distinct !{!25, !15}\n!26 = distinct !{!26, !15}\n", "target": "This is the targeted source code:\n/*\nGiven vector of integers, return vector in strange order.\nStrange sorting, is when you start with the minimum value,\nthen maximum of the remaining integers, then minimum and so on.\n\nExamples:\nstrange_sort_vector({1, 2, 3, 4}) == {1, 4, 2, 3}\nstrange_sort_vector({5, 5, 5, 5}) == {5, 5, 5, 5}\nstrange_sort_vector({}) == {}\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> strange_sort_list(vector<int> lst){\n\n    vector<int> out={};\n    sort(lst.begin(),lst.end());\n    int l=0,r=lst.size()-1;\n    while (l<r)\n    {\n        out.push_back(lst[l]);\n        l+=1;\n        out.push_back(lst[r]);\n        r-=1;\n    }\n    if (l==r) out.push_back(lst[l]);\n    return out;\n\n}\n"}
{"input": "Convert this to C++:\n; ModuleID = '../../Human_xBenchmarks_164/CPP_71/CPP_71.cpp'\nsource_filename = \"../../Human_xBenchmarks_164/CPP_71/CPP_71.cpp\"\ntarget datalayout = \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\ntarget triple = \"x86_64-unknown-linux-gnu\"\n\n; Function Attrs: mustprogress nofree nounwind uwtable willreturn\ndefine dso_local float @_Z13triangle_areafff(float %0, float %1, float %2) local_unnamed_addr #0 {\n  %4 = fadd float %0, %1\n  %5 = fcmp ugt float %4, %2\n  %6 = fadd float %0, %2\n  %7 = fcmp ugt float %6, %1\n  %8 = and i1 %5, %7\n  %9 = fadd float %1, %2\n  %10 = fcmp ugt float %9, %0\n  %11 = select i1 %8, i1 %10, i1 false\n  br i1 %11, label %12, label %24\n\n12:                                               ; preds = %3\n  %13 = fadd float %4, %2\n  %14 = fmul float %13, 5.000000e-01\n  %15 = fsub float %14, %0\n  %16 = fmul float %14, %15\n  %17 = fsub float %14, %1\n  %18 = fmul float %17, %16\n  %19 = fsub float %14, %2\n  %20 = fmul float %19, %18\n  %21 = fpext float %20 to double\n  %22 = tail call double @pow(double %21, double 5.000000e-01) #2\n  %23 = fptrunc double %22 to float\n  br label %24\n\n24:                                               ; preds = %3, %12\n  %25 = phi float [ %23, %12 ], [ -1.000000e+00, %3 ]\n  ret float %25\n}\n\n; Function Attrs: mustprogress nofree nounwind willreturn\ndeclare dso_local double @pow(double, double) local_unnamed_addr #1\n\nattributes #0 = { mustprogress nofree nounwind uwtable willreturn \"frame-pointer\"=\"none\" \"min-legal-vector-width\"=\"0\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #1 = { mustprogress nofree nounwind willreturn \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #2 = { nounwind }\n\n!llvm.module.flags = !{!0, !1}\n!llvm.ident = !{!2}\n\n!0 = !{i32 1, !\"wchar_size\", i32 4}\n!1 = !{i32 7, !\"uwtable\", i32 1}\n!2 = !{!\"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)\"}\n", "target": "This is the targeted source code:\n/*\nGiven the lengths of the three sides of a triangle. Return the area of\nthe triangle rounded to 2 decimal points if the three sides form a valid triangle. \nOtherwise return -1\nThree sides make a valid triangle when the sum of any two sides is greater \nthan the third side.\nExample:\ntriangle_area(3, 4, 5) == 6.00\ntriangle_area(1, 2, 10) == -1\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nfloat triangle_area(float a,float b,float c){\n\n    if (a+b<=c or a+c<=b or b+c<=a) return -1;\n    float h=(a+b+c)/2;\n    float area;\n    area=pow(h*(h-a)*(h-b)*(h-c),0.5);\n    return area;\n}\n"}
{"input": "Convert this to C++:\n; ModuleID = '../../Human_xBenchmarks_164/CPP_72/CPP_72.cpp'\nsource_filename = \"../../Human_xBenchmarks_164/CPP_72/CPP_72.cpp\"\ntarget datalayout = \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\ntarget triple = \"x86_64-unknown-linux-gnu\"\n\n%\"class.std::vector\" = type { %\"struct.std::_Vector_base\" }\n%\"struct.std::_Vector_base\" = type { %\"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl\" }\n%\"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl\" = type { %\"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl_data\" }\n%\"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl_data\" = type { i32*, i32*, i32* }\n\n; Function Attrs: mustprogress nofree norecurse nosync nounwind readonly uwtable willreturn\ndefine dso_local zeroext i1 @_Z11will_it_flySt6vectorIiSaIiEEi(%\"class.std::vector\"* nocapture readonly %0, i32 %1) local_unnamed_addr #0 {\n  %3 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0, i64 0, i32 0, i32 0, i32 0, i32 1\n  %4 = load i32*, i32** %3, align 8, !tbaa !3\n  %5 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0, i64 0, i32 0, i32 0, i32 0, i32 0\n  %6 = load i32*, i32** %5, align 8, !tbaa !8\n  %7 = ptrtoint i32* %4 to i64\n  %8 = ptrtoint i32* %6 to i64\n  %9 = sub i64 %7, %8\n  %10 = ashr exact i64 %9, 2\n  %11 = icmp eq i64 %9, 0\n  br i1 %11, label %28, label %12\n\n12:                                               ; preds = %2\n  %13 = call i64 @llvm.umax.i64(i64 %10, i64 1)\n  br label %14\n\n14:                                               ; preds = %12, %24\n  %15 = phi i64 [ 0, %12 ], [ %26, %24 ]\n  %16 = phi i32 [ 0, %12 ], [ %25, %24 ]\n  %17 = getelementptr inbounds i32, i32* %6, i64 %15\n  %18 = load i32, i32* %17, align 4, !tbaa !9\n  %19 = xor i64 %15, -1\n  %20 = add nsw i64 %10, %19\n  %21 = getelementptr inbounds i32, i32* %6, i64 %20\n  %22 = load i32, i32* %21, align 4, !tbaa !9\n  %23 = icmp eq i32 %18, %22\n  br i1 %23, label %24, label %31\n\n24:                                               ; preds = %14\n  %25 = add nsw i32 %18, %16\n  %26 = add nuw i64 %15, 1\n  %27 = icmp eq i64 %26, %13\n  br i1 %27, label %28, label %14, !llvm.loop !11\n\n28:                                               ; preds = %24, %2\n  %29 = phi i32 [ 0, %2 ], [ %25, %24 ]\n  %30 = icmp sle i32 %29, %1\n  br label %31\n\n31:                                               ; preds = %14, %28\n  %32 = phi i1 [ %30, %28 ], [ false, %14 ]\n  ret i1 %32\n}\n\n; Function Attrs: nofree nosync nounwind readnone speculatable willreturn\ndeclare i64 @llvm.umax.i64(i64, i64) #1\n\nattributes #0 = { mustprogress nofree norecurse nosync nounwind readonly uwtable willreturn \"frame-pointer\"=\"none\" \"min-legal-vector-width\"=\"0\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #1 = { nofree nosync nounwind readnone speculatable willreturn }\n\n!llvm.module.flags = !{!0, !1}\n!llvm.ident = !{!2}\n\n!0 = !{i32 1, !\"wchar_size\", i32 4}\n!1 = !{i32 7, !\"uwtable\", i32 1}\n!2 = !{!\"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)\"}\n!3 = !{!4, !5, i64 8}\n!4 = !{!\"_ZTSNSt12_Vector_baseIiSaIiEE17_Vector_impl_dataE\", !5, i64 0, !5, i64 8, !5, i64 16}\n!5 = !{!\"any pointer\", !6, i64 0}\n!6 = !{!\"omnipotent char\", !7, i64 0}\n!7 = !{!\"Simple C++ TBAA\"}\n!8 = !{!4, !5, i64 0}\n!9 = !{!10, !10, i64 0}\n!10 = !{!\"int\", !6, i64 0}\n!11 = distinct !{!11, !12}\n!12 = !{!\"llvm.loop.mustprogress\"}\n", "target": "This is the targeted source code:\n/*\nWrite a function that returns true if the object q will fly, and false otherwise.\nThe object q will fly if it's balanced (it is a palindromic vector) and the sum of its elements is less than or equal the maximum possible weight w.\n\nExample:\nwill_it_fly({1, 2}, 5) \u279e false \n// 1+2 is less than the maximum possible weight, but it's unbalanced.\n\nwill_it_fly({3, 2, 3}, 1) \u279e false\n// it's balanced, but 3+2+3 is more than the maximum possible weight.\n\nwill_it_fly({3, 2, 3}, 9) \u279e true\n// 3+2+3 is less than the maximum possible weight, and it's balanced.\n\nwill_it_fly({3}, 5) \u279e true\n// 3 is less than the maximum possible weight, and it's balanced.\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool will_it_fly(vector<int> q,int w){\n\n    int sum=0;\n    for (int i=0;i<q.size();i++)\n    {\n        if (q[i]!=q[q.size()-1-i]) return false;\n        sum+=q[i];\n    }\n    if (sum>w) return false;\n    return true;\n}\n"}
{"input": "Convert this to C++:\n; ModuleID = '../../Human_xBenchmarks_164/CPP_73/CPP_73.cpp'\nsource_filename = \"../../Human_xBenchmarks_164/CPP_73/CPP_73.cpp\"\ntarget datalayout = \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\ntarget triple = \"x86_64-unknown-linux-gnu\"\n\n%\"class.std::vector\" = type { %\"struct.std::_Vector_base\" }\n%\"struct.std::_Vector_base\" = type { %\"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl\" }\n%\"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl\" = type { %\"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl_data\" }\n%\"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl_data\" = type { i32*, i32*, i32* }\n\n; Function Attrs: mustprogress nofree norecurse nosync nounwind readonly uwtable willreturn\ndefine dso_local i32 @_Z15smallest_changeSt6vectorIiSaIiEE(%\"class.std::vector\"* nocapture readonly %0) local_unnamed_addr #0 {\n  %2 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0, i64 0, i32 0, i32 0, i32 0, i32 1\n  %3 = load i32*, i32** %2, align 8, !tbaa !3\n  %4 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0, i64 0, i32 0, i32 0, i32 0, i32 0\n  %5 = load i32*, i32** %4, align 8, !tbaa !8\n  %6 = ptrtoint i32* %3 to i64\n  %7 = ptrtoint i32* %5 to i64\n  %8 = sub i64 %6, %7\n  %9 = ashr exact i64 %8, 2\n  %10 = add nsw i64 %9, -1\n  %11 = icmp eq i64 %10, 0\n  br i1 %11, label %12, label %14\n\n12:                                               ; preds = %14, %1\n  %13 = phi i32 [ 0, %1 ], [ %24, %14 ]\n  ret i32 %13\n\n14:                                               ; preds = %1, %14\n  %15 = phi i64 [ %25, %14 ], [ 0, %1 ]\n  %16 = phi i64 [ %27, %14 ], [ %10, %1 ]\n  %17 = phi i32 [ %24, %14 ], [ 0, %1 ]\n  %18 = getelementptr inbounds i32, i32* %5, i64 %15\n  %19 = load i32, i32* %18, align 4, !tbaa !9\n  %20 = getelementptr inbounds i32, i32* %5, i64 %16\n  %21 = load i32, i32* %20, align 4, !tbaa !9\n  %22 = icmp ne i32 %19, %21\n  %23 = zext i1 %22 to i32\n  %24 = add nuw nsw i32 %17, %23\n  %25 = add nuw nsw i64 %15, 1\n  %26 = sub nuw i64 -2, %15\n  %27 = add nsw i64 %9, %26\n  %28 = icmp ugt i64 %27, %25\n  br i1 %28, label %14, label %12, !llvm.loop !11\n}\n\nattributes #0 = { mustprogress nofree norecurse nosync nounwind readonly uwtable willreturn \"frame-pointer\"=\"none\" \"min-legal-vector-width\"=\"0\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\n\n!llvm.module.flags = !{!0, !1}\n!llvm.ident = !{!2}\n\n!0 = !{i32 1, !\"wchar_size\", i32 4}\n!1 = !{i32 7, !\"uwtable\", i32 1}\n!2 = !{!\"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)\"}\n!3 = !{!4, !5, i64 8}\n!4 = !{!\"_ZTSNSt12_Vector_baseIiSaIiEE17_Vector_impl_dataE\", !5, i64 0, !5, i64 8, !5, i64 16}\n!5 = !{!\"any pointer\", !6, i64 0}\n!6 = !{!\"omnipotent char\", !7, i64 0}\n!7 = !{!\"Simple C++ TBAA\"}\n!8 = !{!4, !5, i64 0}\n!9 = !{!10, !10, i64 0}\n!10 = !{!\"int\", !6, i64 0}\n!11 = distinct !{!11, !12}\n!12 = !{!\"llvm.loop.mustprogress\"}\n", "target": "This is the targeted source code:\n/*\nGiven a vector arr of integers, find the minimum number of elements that\nneed to be changed to make the vector palindromic. A palindromic vector is a vector that\nis read the same backwards and forwards. In one change, you can change one element to any other element.\n\nFor example:\nsmallest_change({1,2,3,5,4,7,9,6}) == 4\nsmallest_change({1, 2, 3, 4, 3, 2, 2}) == 1\nsmallest_change({1, 2, 3, 2, 1}) == 0\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint smallest_change(vector<int> arr){\n\n    int out=0;\n    for (int i=0;i<arr.size()-1-i;i++)\n        if (arr[i]!=arr[arr.size()-1-i])\n            out+=1;\n    return out;\n}\n"}
{"input": "Convert this to C++:\n; ModuleID = '../../Human_xBenchmarks_164/CPP_74/CPP_74.cpp'\nsource_filename = \"../../Human_xBenchmarks_164/CPP_74/CPP_74.cpp\"\ntarget datalayout = \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\ntarget triple = \"x86_64-unknown-linux-gnu\"\n\n%\"class.std::vector\" = type { %\"struct.std::_Vector_base\" }\n%\"struct.std::_Vector_base\" = type { %\"struct.std::_Vector_base<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char>>>::_Vector_impl\" }\n%\"struct.std::_Vector_base<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char>>>::_Vector_impl\" = type { %\"struct.std::_Vector_base<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char>>>::_Vector_impl_data\" }\n%\"struct.std::_Vector_base<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char>>>::_Vector_impl_data\" = type { %\"class.std::__cxx11::basic_string\"*, %\"class.std::__cxx11::basic_string\"*, %\"class.std::__cxx11::basic_string\"* }\n%\"class.std::__cxx11::basic_string\" = type { %\"struct.std::__cxx11::basic_string<char>::_Alloc_hider\", i64, %union.anon }\n%\"struct.std::__cxx11::basic_string<char>::_Alloc_hider\" = type { i8* }\n%union.anon = type { i64, [8 x i8] }\n\n; Function Attrs: nofree nosync nounwind uwtable\ndefine dso_local void @_Z11total_matchSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EES7_(%\"class.std::vector\"* noalias nocapture sret(%\"class.std::vector\") align 8 %0, %\"class.std::vector\"* nocapture %1, %\"class.std::vector\"* nocapture %2) local_unnamed_addr #0 {\n  %4 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %1, i64 0, i32 0, i32 0, i32 0, i32 1\n  %5 = load %\"class.std::__cxx11::basic_string\"*, %\"class.std::__cxx11::basic_string\"** %4, align 8, !tbaa !3\n  %6 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %1, i64 0, i32 0, i32 0, i32 0, i32 0\n  %7 = load %\"class.std::__cxx11::basic_string\"*, %\"class.std::__cxx11::basic_string\"** %6, align 8, !tbaa !8\n  %8 = ptrtoint %\"class.std::__cxx11::basic_string\"* %5 to i64\n  %9 = ptrtoint %\"class.std::__cxx11::basic_string\"* %7 to i64\n  %10 = sub i64 %8, %9\n  %11 = icmp eq i64 %10, 0\n  br i1 %11, label %36, label %12\n\n12:                                               ; preds = %3\n  %13 = ashr exact i64 %10, 5\n  %14 = call i64 @llvm.umax.i64(i64 %13, i64 1)\n  %15 = add i64 %14, -1\n  %16 = and i64 %14, 3\n  %17 = icmp ult i64 %15, 3\n  br i1 %17, label %20, label %18\n\n18:                                               ; preds = %12\n  %19 = and i64 %14, -4\n  br label %54\n\n20:                                               ; preds = %54, %12\n  %21 = phi i32 [ undef, %12 ], [ %76, %54 ]\n  %22 = phi i64 [ 0, %12 ], [ %77, %54 ]\n  %23 = phi i32 [ 0, %12 ], [ %76, %54 ]\n  %24 = icmp eq i64 %16, 0\n  br i1 %24, label %36, label %25\n\n25:                                               ; preds = %20, %25\n  %26 = phi i64 [ %33, %25 ], [ %22, %20 ]\n  %27 = phi i32 [ %32, %25 ], [ %23, %20 ]\n  %28 = phi i64 [ %34, %25 ], [ %16, %20 ]\n  %29 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %7, i64 %26, i32 1\n  %30 = load i64, i64* %29, align 8, !tbaa !9\n  %31 = trunc i64 %30 to i32\n  %32 = add i32 %27, %31\n  %33 = add nuw nsw i64 %26, 1\n  %34 = add i64 %28, -1\n  %35 = icmp eq i64 %34, 0\n  br i1 %35, label %36, label %25, !llvm.loop !13\n\n36:                                               ; preds = %20, %25, %3\n  %37 = phi i32 [ 0, %3 ], [ %21, %20 ], [ %32, %25 ]\n  %38 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %2, i64 0, i32 0, i32 0, i32 0, i32 1\n  %39 = load %\"class.std::__cxx11::basic_string\"*, %\"class.std::__cxx11::basic_string\"** %38, align 8, !tbaa !3\n  %40 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %2, i64 0, i32 0, i32 0, i32 0, i32 0\n  %41 = load %\"class.std::__cxx11::basic_string\"*, %\"class.std::__cxx11::basic_string\"** %40, align 8, !tbaa !8\n  %42 = ptrtoint %\"class.std::__cxx11::basic_string\"* %39 to i64\n  %43 = ptrtoint %\"class.std::__cxx11::basic_string\"* %41 to i64\n  %44 = sub i64 %42, %43\n  %45 = icmp eq i64 %44, 0\n  br i1 %45, label %122, label %46\n\n46:                                               ; preds = %36\n  %47 = ashr exact i64 %44, 5\n  %48 = call i64 @llvm.umax.i64(i64 %47, i64 1)\n  %49 = add i64 %48, -1\n  %50 = and i64 %48, 3\n  %51 = icmp ult i64 %49, 3\n  br i1 %51, label %106, label %52\n\n52:                                               ; preds = %46\n  %53 = and i64 %48, -4\n  br label %80\n\n54:                                               ; preds = %54, %18\n  %55 = phi i64 [ 0, %18 ], [ %77, %54 ]\n  %56 = phi i32 [ 0, %18 ], [ %76, %54 ]\n  %57 = phi i64 [ %19, %18 ], [ %78, %54 ]\n  %58 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %7, i64 %55, i32 1\n  %59 = load i64, i64* %58, align 8, !tbaa !9\n  %60 = trunc i64 %59 to i32\n  %61 = add i32 %56, %60\n  %62 = or i64 %55, 1\n  %63 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %7, i64 %62, i32 1\n  %64 = load i64, i64* %63, align 8, !tbaa !9\n  %65 = trunc i64 %64 to i32\n  %66 = add i32 %61, %65\n  %67 = or i64 %55, 2\n  %68 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %7, i64 %67, i32 1\n  %69 = load i64, i64* %68, align 8, !tbaa !9\n  %70 = trunc i64 %69 to i32\n  %71 = add i32 %66, %70\n  %72 = or i64 %55, 3\n  %73 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %7, i64 %72, i32 1\n  %74 = load i64, i64* %73, align 8, !tbaa !9\n  %75 = trunc i64 %74 to i32\n  %76 = add i32 %71, %75\n  %77 = add nuw nsw i64 %55, 4\n  %78 = add i64 %57, -4\n  %79 = icmp eq i64 %78, 0\n  br i1 %79, label %20, label %54, !llvm.loop !15\n\n80:                                               ; preds = %80, %52\n  %81 = phi i64 [ 0, %52 ], [ %103, %80 ]\n  %82 = phi i32 [ 0, %52 ], [ %102, %80 ]\n  %83 = phi i64 [ %53, %52 ], [ %104, %80 ]\n  %84 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %41, i64 %81, i32 1\n  %85 = load i64, i64* %84, align 8, !tbaa !9\n  %86 = trunc i64 %85 to i32\n  %87 = add i32 %82, %86\n  %88 = or i64 %81, 1\n  %89 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %41, i64 %88, i32 1\n  %90 = load i64, i64* %89, align 8, !tbaa !9\n  %91 = trunc i64 %90 to i32\n  %92 = add i32 %87, %91\n  %93 = or i64 %81, 2\n  %94 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %41, i64 %93, i32 1\n  %95 = load i64, i64* %94, align 8, !tbaa !9\n  %96 = trunc i64 %95 to i32\n  %97 = add i32 %92, %96\n  %98 = or i64 %81, 3\n  %99 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %41, i64 %98, i32 1\n  %100 = load i64, i64* %99, align 8, !tbaa !9\n  %101 = trunc i64 %100 to i32\n  %102 = add i32 %97, %101\n  %103 = add nuw nsw i64 %81, 4\n  %104 = add i64 %83, -4\n  %105 = icmp eq i64 %104, 0\n  br i1 %105, label %106, label %80, !llvm.loop !17\n\n106:                                              ; preds = %80, %46\n  %107 = phi i32 [ undef, %46 ], [ %102, %80 ]\n  %108 = phi i64 [ 0, %46 ], [ %103, %80 ]\n  %109 = phi i32 [ 0, %46 ], [ %102, %80 ]\n  %110 = icmp eq i64 %50, 0\n  br i1 %110, label %122, label %111\n\n111:                                              ; preds = %106, %111\n  %112 = phi i64 [ %119, %111 ], [ %108, %106 ]\n  %113 = phi i32 [ %118, %111 ], [ %109, %106 ]\n  %114 = phi i64 [ %120, %111 ], [ %50, %106 ]\n  %115 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %41, i64 %112, i32 1\n  %116 = load i64, i64* %115, align 8, !tbaa !9\n  %117 = trunc i64 %116 to i32\n  %118 = add i32 %113, %117\n  %119 = add nuw nsw i64 %112, 1\n  %120 = add i64 %114, -1\n  %121 = icmp eq i64 %120, 0\n  br i1 %121, label %122, label %111, !llvm.loop !18\n\n122:                                              ; preds = %106, %111, %36\n  %123 = phi i32 [ 0, %36 ], [ %107, %106 ], [ %118, %111 ]\n  %124 = icmp sgt i32 %37, %123\n  %125 = select i1 %124, %\"class.std::vector\"* %2, %\"class.std::vector\"* %1\n  %126 = select i1 %124, %\"class.std::__cxx11::basic_string\"* %41, %\"class.std::__cxx11::basic_string\"* %7\n  %127 = select i1 %124, %\"class.std::__cxx11::basic_string\"* %39, %\"class.std::__cxx11::basic_string\"* %5\n  %128 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %125, i64 0, i32 0, i32 0, i32 0, i32 2\n  %129 = load %\"class.std::__cxx11::basic_string\"*, %\"class.std::__cxx11::basic_string\"** %128, align 8, !tbaa !19\n  %130 = bitcast %\"class.std::vector\"* %125 to i8*\n  tail call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(24) %130, i8 0, i64 24, i1 false) #3\n  %131 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0, i64 0, i32 0, i32 0, i32 0, i32 0\n  store %\"class.std::__cxx11::basic_string\"* %126, %\"class.std::__cxx11::basic_string\"** %131, align 8\n  %132 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0, i64 0, i32 0, i32 0, i32 0, i32 1\n  store %\"class.std::__cxx11::basic_string\"* %127, %\"class.std::__cxx11::basic_string\"** %132, align 8\n  %133 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0, i64 0, i32 0, i32 0, i32 0, i32 2\n  store %\"class.std::__cxx11::basic_string\"* %129, %\"class.std::__cxx11::basic_string\"** %133, align 8\n  ret void\n}\n\n; Function Attrs: argmemonly nofree nounwind willreturn writeonly\ndeclare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1\n\n; Function Attrs: nofree nosync nounwind readnone speculatable willreturn\ndeclare i64 @llvm.umax.i64(i64, i64) #2\n\nattributes #0 = { nofree nosync nounwind uwtable \"frame-pointer\"=\"none\" \"min-legal-vector-width\"=\"0\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #1 = { argmemonly nofree nounwind willreturn writeonly }\nattributes #2 = { nofree nosync nounwind readnone speculatable willreturn }\nattributes #3 = { nounwind }\n\n!llvm.module.flags = !{!0, !1}\n!llvm.ident = !{!2}\n\n!0 = !{i32 1, !\"wchar_size\", i32 4}\n!1 = !{i32 7, !\"uwtable\", i32 1}\n!2 = !{!\"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)\"}\n!3 = !{!4, !5, i64 8}\n!4 = !{!\"_ZTSNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_Vector_impl_dataE\", !5, i64 0, !5, i64 8, !5, i64 16}\n!5 = !{!\"any pointer\", !6, i64 0}\n!6 = !{!\"omnipotent char\", !7, i64 0}\n!7 = !{!\"Simple C++ TBAA\"}\n!8 = !{!4, !5, i64 0}\n!9 = !{!10, !12, i64 8}\n!10 = !{!\"_ZTSNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE\", !11, i64 0, !12, i64 8, !6, i64 16}\n!11 = !{!\"_ZTSNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderE\", !5, i64 0}\n!12 = !{!\"long\", !6, i64 0}\n!13 = distinct !{!13, !14}\n!14 = !{!\"llvm.loop.unroll.disable\"}\n!15 = distinct !{!15, !16}\n!16 = !{!\"llvm.loop.mustprogress\"}\n!17 = distinct !{!17, !16}\n!18 = distinct !{!18, !14}\n!19 = !{!4, !5, i64 16}\n", "target": "This is the targeted source code:\n/*\nWrite a function that accepts two vectors of strings and returns the vector that has \ntotal number of chars in the all strings of the vector less than the other vector.\n\nif the two vectors have the same number of chars, return the first vector.\n\nExamples\ntotal_match({}, {}) \u279e {}\ntotal_match({\"hi\", \"admin\"}, {\"hI\", \"Hi\"}) \u279e {\"hI\", \"Hi\"}\ntotal_match({\"hi\", \"admin\"}, {\"hi\", \"hi\", \"admin\", \"project\"}) \u279e {\"hi\", \"admin\"}\ntotal_match({\"hi\", \"admin\"}, {\"hI\", \"hi\", \"hi\"}) \u279e {\"hI\", \"hi\", \"hi\"}\ntotal_match({\"4\"}, {\"1\", \"2\", \"3\", \"4\", \"5\"}) \u279e {\"4\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> total_match(vector<string> lst1,vector<string> lst2){\n\n    int num1,num2,i;\n    num1=0;num2=0;\n    for (i=0;i<lst1.size();i++)\n        num1+=lst1[i].length();\n    for (i=0;i<lst2.size();i++)\n        num2+=lst2[i].length();\n    if (num1>num2) return lst2;\n    return lst1;\n}\n"}
{"input": "Convert this to C++:\n; ModuleID = '../../Human_xBenchmarks_164/CPP_75/CPP_75.cpp'\nsource_filename = \"../../Human_xBenchmarks_164/CPP_75/CPP_75.cpp\"\ntarget datalayout = \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\ntarget triple = \"x86_64-unknown-linux-gnu\"\n\n; Function Attrs: mustprogress nofree norecurse nosync nounwind readnone uwtable willreturn\ndefine dso_local zeroext i1 @_Z17is_multiply_primei(i32 %0) local_unnamed_addr #0 {\n  %2 = icmp slt i32 %0, 4\n  br i1 %2, label %11, label %3\n\n3:                                                ; preds = %1, %23\n  %4 = phi i32 [ %26, %23 ], [ 2, %1 ]\n  %5 = phi i32 [ %25, %23 ], [ 0, %1 ]\n  %6 = phi i32 [ %24, %23 ], [ %0, %1 ]\n  %7 = srem i32 %6, %4\n  %8 = icmp eq i32 %7, 0\n  %9 = icmp sgt i32 %6, %4\n  %10 = and i1 %9, %8\n  br i1 %10, label %14, label %23\n\n11:                                               ; preds = %23, %1\n  %12 = phi i32 [ 0, %1 ], [ %25, %23 ]\n  %13 = icmp eq i32 %12, 2\n  ret i1 %13\n\n14:                                               ; preds = %3, %14\n  %15 = phi i32 [ %18, %14 ], [ %5, %3 ]\n  %16 = phi i32 [ %17, %14 ], [ %6, %3 ]\n  %17 = sdiv i32 %16, %4\n  %18 = add nsw i32 %15, 1\n  %19 = srem i32 %17, %4\n  %20 = icmp eq i32 %19, 0\n  %21 = icmp sgt i32 %17, %4\n  %22 = and i1 %21, %20\n  br i1 %22, label %14, label %23, !llvm.loop !3\n\n23:                                               ; preds = %14, %3\n  %24 = phi i32 [ %6, %3 ], [ %17, %14 ]\n  %25 = phi i32 [ %5, %3 ], [ %18, %14 ]\n  %26 = add nuw nsw i32 %4, 1\n  %27 = mul nsw i32 %26, %26\n  %28 = icmp sgt i32 %27, %24\n  br i1 %28, label %11, label %3, !llvm.loop !5\n}\n\nattributes #0 = { mustprogress nofree norecurse nosync nounwind readnone uwtable willreturn \"frame-pointer\"=\"none\" \"min-legal-vector-width\"=\"0\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\n\n!llvm.module.flags = !{!0, !1}\n!llvm.ident = !{!2}\n\n!0 = !{i32 1, !\"wchar_size\", i32 4}\n!1 = !{i32 7, !\"uwtable\", i32 1}\n!2 = !{!\"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)\"}\n!3 = distinct !{!3, !4}\n!4 = !{!\"llvm.loop.mustprogress\"}\n!5 = distinct !{!5, !4}\n", "target": "This is the targeted source code:\n/*\nWrite a function that returns true if the given number is the multiplication of 3 prime numbers\nand false otherwise.\nKnowing that (a) is less then 100. \nExample:\nis_multiply_prime(30) == true\n30 = 2 * 3 * 5\n*/\n#include<stdio.h>\nusing namespace std;\nbool is_multiply_prime(int a){\n\n    int num=0;\n    for (int i=2;i*i<=a;i++)\n    while (a%i==0 and a>i)\n    {\n        a=a/i;\n        num+=1;\n    }\n    if (num==2) return true;\n    return false; \n}\n"}
{"input": "Convert this to C++:\n; ModuleID = '../../Human_xBenchmarks_164/CPP_76/CPP_76.cpp'\nsource_filename = \"../../Human_xBenchmarks_164/CPP_76/CPP_76.cpp\"\ntarget datalayout = \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\ntarget triple = \"x86_64-unknown-linux-gnu\"\n\n; Function Attrs: mustprogress nofree norecurse nosync nounwind readnone uwtable willreturn\ndefine dso_local zeroext i1 @_Z15is_simple_powerii(i32 %0, i32 %1) local_unnamed_addr #0 {\n  %3 = icmp sgt i32 %0, 0\n  %4 = icmp sgt i32 %0, 1\n  br i1 %4, label %5, label %16\n\n5:                                                ; preds = %2, %5\n  %6 = phi i32 [ %9, %5 ], [ 0, %2 ]\n  %7 = phi i32 [ %8, %5 ], [ 1, %2 ]\n  %8 = mul nsw i32 %7, %1\n  %9 = add nuw nsw i32 %6, 1\n  %10 = icmp sle i32 %8, %0\n  %11 = icmp ult i32 %6, 99\n  %12 = select i1 %10, i1 %11, i1 false\n  %13 = xor i1 %12, true\n  %14 = icmp eq i32 %8, %0\n  %15 = select i1 %13, i1 true, i1 %14\n  br i1 %15, label %16, label %5, !llvm.loop !3\n\n16:                                               ; preds = %5, %2\n  %17 = phi i1 [ %3, %2 ], [ %12, %5 ]\n  ret i1 %17\n}\n\nattributes #0 = { mustprogress nofree norecurse nosync nounwind readnone uwtable willreturn \"frame-pointer\"=\"none\" \"min-legal-vector-width\"=\"0\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\n\n!llvm.module.flags = !{!0, !1}\n!llvm.ident = !{!2}\n\n!0 = !{i32 1, !\"wchar_size\", i32 4}\n!1 = !{i32 7, !\"uwtable\", i32 1}\n!2 = !{!\"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)\"}\n!3 = distinct !{!3, !4}\n!4 = !{!\"llvm.loop.mustprogress\"}\n", "target": "This is the targeted source code:\n/*\nYour task is to write a function that returns true if a number x is a simple\npower of n and false in other cases.\nx is a simple power of n if n**int=x\nFor example:\nis_simple_power(1, 4) => true\nis_simple_power(2, 2) => true\nis_simple_power(8, 2) => true\nis_simple_power(3, 2) => false\nis_simple_power(3, 1) => false\nis_simple_power(5, 3) => false\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nbool is_simple_power(int x,int n){\n\n    int p=1,count=0;\n    while (p<=x and count<100)\n    {\n        if (p==x) return true;\n        p=p*n;count+=1;\n    }\n    return false;\n}\n"}
{"input": "Convert this to C++:\n; ModuleID = '../../Human_xBenchmarks_164/CPP_77/CPP_77.cpp'\nsource_filename = \"../../Human_xBenchmarks_164/CPP_77/CPP_77.cpp\"\ntarget datalayout = \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\ntarget triple = \"x86_64-unknown-linux-gnu\"\n\n; Function Attrs: mustprogress nofree nosync nounwind readnone uwtable willreturn\ndefine dso_local zeroext i1 @_Z7iscuberi(i32 %0) local_unnamed_addr #0 {\n  %2 = tail call i32 @llvm.abs.i32(i32 %0, i1 true)\n  br label %3\n\n3:                                                ; preds = %3, %1\n  %4 = phi i32 [ 0, %1 ], [ %8, %3 ]\n  %5 = mul nsw i32 %4, %4\n  %6 = mul nsw i32 %5, %4\n  %7 = icmp ult i32 %6, %2\n  %8 = add nuw nsw i32 %4, 1\n  br i1 %7, label %3, label %9, !llvm.loop !3\n\n9:                                                ; preds = %3\n  %10 = icmp ule i32 %6, %2\n  ret i1 %10\n}\n\n; Function Attrs: nofree nosync nounwind readnone speculatable willreturn\ndeclare i32 @llvm.abs.i32(i32, i1 immarg) #1\n\nattributes #0 = { mustprogress nofree nosync nounwind readnone uwtable willreturn \"frame-pointer\"=\"none\" \"min-legal-vector-width\"=\"0\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #1 = { nofree nosync nounwind readnone speculatable willreturn }\n\n!llvm.module.flags = !{!0, !1}\n!llvm.ident = !{!2}\n\n!0 = !{i32 1, !\"wchar_size\", i32 4}\n!1 = !{i32 7, !\"uwtable\", i32 1}\n!2 = !{!\"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)\"}\n!3 = distinct !{!3, !4}\n!4 = !{!\"llvm.loop.mustprogress\"}\n", "target": "This is the targeted source code:\n/*\nWrite a function that takes an integer a and returns true \nif this ingeger is a cube of some integer number.\nNote: you may assume the input is always valid.\nExamples:\niscube(1) ==> true\niscube(2) ==> false\niscube(-1) ==> true\niscube(64) ==> true\niscube(0) ==> true\niscube(180) ==> false\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nbool iscuber(int a){\n\n    for (int i=0;i*i*i<=abs(a);i++)\n        if (i*i*i==abs(a)) return true;\n    return false;\n}\n"}
{"input": "Convert this to C++:\n; ModuleID = '../../Human_xBenchmarks_164/CPP_78/CPP_78.cpp'\nsource_filename = \"../../Human_xBenchmarks_164/CPP_78/CPP_78.cpp\"\ntarget datalayout = \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\ntarget triple = \"x86_64-unknown-linux-gnu\"\n\n%\"class.std::__cxx11::basic_string\" = type { %\"struct.std::__cxx11::basic_string<char>::_Alloc_hider\", i64, %union.anon }\n%\"struct.std::__cxx11::basic_string<char>::_Alloc_hider\" = type { i8* }\n%union.anon = type { i64, [8 x i8] }\n\n@.str = private unnamed_addr constant [7 x i8] c\"2357BD\\00\", align 1\n\n; Function Attrs: uwtable\ndefine dso_local i32 @_Z7hex_keyNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE(%\"class.std::__cxx11::basic_string\"* nocapture readonly %0) local_unnamed_addr #0 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {\n  %2 = alloca %\"class.std::__cxx11::basic_string\", align 8\n  %3 = bitcast %\"class.std::__cxx11::basic_string\"* %2 to i8*\n  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %3) #3\n  %4 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %2, i64 0, i32 2\n  %5 = bitcast %\"class.std::__cxx11::basic_string\"* %2 to %union.anon**\n  store %union.anon* %4, %union.anon** %5, align 8, !tbaa !3\n  %6 = bitcast %union.anon* %4 to i8*\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(6) %6, i8* noundef nonnull align 1 dereferenceable(6) getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i64 0, i64 0), i64 6, i1 false) #3\n  %7 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %2, i64 0, i32 1\n  store i64 6, i64* %7, align 8, !tbaa !8\n  %8 = getelementptr inbounds i8, i8* %6, i64 6\n  store i8 0, i8* %8, align 2, !tbaa !11\n  %9 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 1\n  %10 = load i64, i64* %9, align 8, !tbaa !8\n  %11 = icmp eq i64 %10, 0\n  br i1 %11, label %50, label %12\n\n12:                                               ; preds = %1\n  %13 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 0, i32 0\n  %14 = load i8*, i8** %13, align 8, !tbaa !12\n  %15 = load i8, i8* %6, align 8, !tbaa !11\n  %16 = getelementptr inbounds i8, i8* %6, i64 1\n  %17 = load i8, i8* %16, align 1\n  %18 = getelementptr inbounds i8, i8* %6, i64 2\n  %19 = load i8, i8* %18, align 2\n  %20 = getelementptr inbounds i8, i8* %6, i64 3\n  %21 = load i8, i8* %20, align 1\n  %22 = getelementptr inbounds i8, i8* %6, i64 4\n  %23 = load i8, i8* %22, align 4\n  %24 = getelementptr inbounds i8, i8* %6, i64 5\n  %25 = load i8, i8* %24, align 1\n  br label %26\n\n26:                                               ; preds = %43, %12\n  %27 = phi i64 [ 0, %12 ], [ %48, %43 ]\n  %28 = phi i32 [ 0, %12 ], [ %47, %43 ]\n  %29 = getelementptr inbounds i8, i8* %14, i64 %27\n  %30 = load i8, i8* %29, align 1, !tbaa !11\n  %31 = icmp eq i8 %15, %30\n  br i1 %31, label %43, label %32\n\n32:                                               ; preds = %26\n  %33 = icmp eq i8 %17, %30\n  br i1 %33, label %43, label %34\n\n34:                                               ; preds = %32\n  %35 = icmp eq i8 %19, %30\n  br i1 %35, label %43, label %36\n\n36:                                               ; preds = %34\n  %37 = icmp eq i8 %21, %30\n  br i1 %37, label %43, label %38\n\n38:                                               ; preds = %36\n  %39 = icmp eq i8 %23, %30\n  br i1 %39, label %43, label %40\n\n40:                                               ; preds = %38\n  %41 = icmp eq i8 %25, %30\n  %42 = select i1 %41, i64 5, i64 6\n  br label %43\n\n43:                                               ; preds = %40, %32, %34, %36, %26, %38\n  %44 = phi i64 [ 4, %38 ], [ 0, %26 ], [ 3, %36 ], [ 2, %34 ], [ 1, %32 ], [ %42, %40 ]\n  %45 = icmp ne i64 %44, 6\n  %46 = zext i1 %45 to i32\n  %47 = add nuw nsw i32 %28, %46\n  %48 = add nuw nsw i64 %27, 1\n  %49 = icmp eq i64 %48, %10\n  br i1 %49, label %50, label %26, !llvm.loop !13\n\n50:                                               ; preds = %43, %1\n  %51 = phi i32 [ 0, %1 ], [ %47, %43 ]\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %3) #3\n  ret i32 %51\n}\n\n; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn\ndeclare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1\n\ndeclare dso_local i32 @__gxx_personality_v0(...)\n\n; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn\ndeclare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1\n\n; Function Attrs: argmemonly mustprogress nofree nounwind willreturn\ndeclare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #2\n\nattributes #0 = { uwtable \"frame-pointer\"=\"none\" \"min-legal-vector-width\"=\"0\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #1 = { argmemonly mustprogress nofree nosync nounwind willreturn }\nattributes #2 = { argmemonly mustprogress nofree nounwind willreturn }\nattributes #3 = { nounwind }\n\n!llvm.module.flags = !{!0, !1}\n!llvm.ident = !{!2}\n\n!0 = !{i32 1, !\"wchar_size\", i32 4}\n!1 = !{i32 7, !\"uwtable\", i32 1}\n!2 = !{!\"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)\"}\n!3 = !{!4, !5, i64 0}\n!4 = !{!\"_ZTSNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderE\", !5, i64 0}\n!5 = !{!\"any pointer\", !6, i64 0}\n!6 = !{!\"omnipotent char\", !7, i64 0}\n!7 = !{!\"Simple C++ TBAA\"}\n!8 = !{!9, !10, i64 8}\n!9 = !{!\"_ZTSNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE\", !4, i64 0, !10, i64 8, !6, i64 16}\n!10 = !{!\"long\", !6, i64 0}\n!11 = !{!6, !6, i64 0}\n!12 = !{!9, !5, i64 0}\n!13 = distinct !{!13, !14}\n!14 = !{!\"llvm.loop.mustprogress\"}\n", "target": "This is the targeted source code:\n/*\nYou have been tasked to write a function that receives \na hexadecimal number as a string and counts the number of hexadecimal \ndigits that are primes (prime number, or a prime, is a natural number \ngreater than 1 that is not a product of two smaller natural numbers).\nHexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\nPrime numbers are 2, 3, 5, 7, 11, 13, 17,...\nSo you have to determine a number of the following digits: 2, 3, 5, 7, \nB (=decimal 11), D (=decimal 13).\nNote: you may assume the input is always correct or empty string, \nand symbols A,B,C,D,E,F are always uppercase.\nExamples:\nFor num = \"AB\" the output should be 1.\nFor num = \"1077E\" the output should be 2.\nFor num = \"ABED1A33\" the output should be 4.\nFor num = \"123456789ABCDEF0\" the output should be 6.\nFor num = \"2020\" the output should be 2.\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nint hex_key(string num){\n\n    string key=\"2357BD\";\n    int out=0;\n    for (int i=0;i<num.length();i++)\n    if (find(key.begin(),key.end(),num[i])!=key.end()) out+=1;\n    return out;\n}\n"}
{"input": "Convert this to C++:\n; ModuleID = '../../Human_xBenchmarks_164/CPP_79/CPP_79.cpp'\nsource_filename = \"../../Human_xBenchmarks_164/CPP_79/CPP_79.cpp\"\ntarget datalayout = \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\ntarget triple = \"x86_64-unknown-linux-gnu\"\n\n%\"class.std::__cxx11::basic_string\" = type { %\"struct.std::__cxx11::basic_string<char>::_Alloc_hider\", i64, %union.anon }\n%\"struct.std::__cxx11::basic_string<char>::_Alloc_hider\" = type { i8* }\n%union.anon = type { i64, [8 x i8] }\n%struct.__va_list_tag = type { i32, i32, i8*, i8* }\n\n$_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_RKS8_ = comdat any\n\n$_ZN9__gnu_cxx12__to_xstringINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcEET_PFiPT0_mPKS8_P13__va_list_tagEmSB_z = comdat any\n\n@.str.1 = private unnamed_addr constant [6 x i8] c\"db0db\\00\", align 1\n@.str.2 = private unnamed_addr constant [3 x i8] c\"db\\00\", align 1\n@.str.3 = private unnamed_addr constant [3 x i8] c\"%d\\00\", align 1\n@.str.5 = private unnamed_addr constant [21 x i8] c\"basic_string::append\\00\", align 1\n\n; Function Attrs: uwtable\ndefine dso_local void @_Z17decimal_to_binaryB5cxx11i(%\"class.std::__cxx11::basic_string\"* noalias sret(%\"class.std::__cxx11::basic_string\") align 8 %0, i32 %1) local_unnamed_addr #0 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {\n  %3 = alloca %\"class.std::__cxx11::basic_string\", align 8\n  %4 = alloca %\"class.std::__cxx11::basic_string\", align 8\n  %5 = alloca %\"class.std::__cxx11::basic_string\", align 8\n  %6 = alloca %\"class.std::__cxx11::basic_string\", align 8\n  %7 = alloca %\"class.std::__cxx11::basic_string\", align 8\n  %8 = bitcast %\"class.std::__cxx11::basic_string\"* %3 to i8*\n  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %8) #10\n  %9 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %3, i64 0, i32 2\n  %10 = bitcast %\"class.std::__cxx11::basic_string\"* %3 to %union.anon**\n  store %union.anon* %9, %union.anon** %10, align 8, !tbaa !3\n  %11 = bitcast %union.anon* %9 to i8*\n  %12 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %3, i64 0, i32 0, i32 0\n  %13 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %3, i64 0, i32 1\n  store i64 0, i64* %13, align 8, !tbaa !8\n  store i8 0, i8* %11, align 8, !tbaa !11\n  %14 = icmp eq i32 %1, 0\n  br i1 %14, label %32, label %15\n\n15:                                               ; preds = %2\n  %16 = bitcast %\"class.std::__cxx11::basic_string\"* %4 to i8*\n  %17 = bitcast %\"class.std::__cxx11::basic_string\"* %5 to i8*\n  %18 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %4, i64 0, i32 2\n  %19 = bitcast %\"class.std::__cxx11::basic_string\"* %4 to %union.anon**\n  %20 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %4, i64 0, i32 0, i32 0\n  %21 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %4, i64 0, i32 2, i32 0\n  %22 = bitcast %union.anon* %18 to i8*\n  %23 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %4, i64 0, i32 1\n  %24 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %3, i64 0, i32 2, i32 0\n  %25 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %5, i64 0, i32 0, i32 0\n  %26 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %5, i64 0, i32 2\n  %27 = bitcast %union.anon* %26 to i8*\n  %28 = icmp sgt i32 %1, 0\n  br i1 %28, label %29, label %105\n\n29:                                               ; preds = %15\n  %30 = bitcast i64* %23 to <2 x i64>*\n  %31 = bitcast i64* %13 to <2 x i64>*\n  br label %38\n\n32:                                               ; preds = %2\n  %33 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 2\n  %34 = bitcast %\"class.std::__cxx11::basic_string\"* %0 to %union.anon**\n  store %union.anon* %33, %union.anon** %34, align 8, !tbaa !3\n  %35 = bitcast %union.anon* %33 to i8*\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(5) %35, i8* noundef nonnull align 1 dereferenceable(5) getelementptr inbounds ([6 x i8], [6 x i8]* @.str.1, i64 0, i64 0), i64 5, i1 false) #10\n  %36 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 1\n  store i64 5, i64* %36, align 8, !tbaa !8\n  %37 = getelementptr inbounds i8, i8* %35, i64 5\n  store i8 0, i8* %37, align 1, !tbaa !11\n  br label %205\n\n38:                                               ; preds = %29, %93\n  %39 = phi i32 [ %94, %93 ], [ %1, %29 ]\n  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %16) #10\n  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %17) #10\n  %40 = and i32 %39, 1\n  invoke void (%\"class.std::__cxx11::basic_string\"*, i32 (i8*, i64, i8*, %struct.__va_list_tag*)*, i64, i8*, ...) @_ZN9__gnu_cxx12__to_xstringINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcEET_PFiPT0_mPKS8_P13__va_list_tagEmSB_z(%\"class.std::__cxx11::basic_string\"* nonnull sret(%\"class.std::__cxx11::basic_string\") align 8 %5, i32 (i8*, i64, i8*, %struct.__va_list_tag*)* nonnull @vsnprintf, i64 16, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i64 0, i64 0), i32 %40)\n          to label %41 unwind label %96\n\n41:                                               ; preds = %38\n  call void @llvm.experimental.noalias.scope.decl(metadata !12)\n  %42 = load i8*, i8** %12, align 8, !tbaa !15, !noalias !12\n  %43 = load i64, i64* %13, align 8, !tbaa !8, !noalias !12\n  %44 = invoke nonnull align 8 dereferenceable(32) %\"class.std::__cxx11::basic_string\"* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %5, i8* %42, i64 %43)\n          to label %45 unwind label %98\n\n45:                                               ; preds = %41\n  store %union.anon* %18, %union.anon** %19, align 8, !tbaa !3, !alias.scope !12\n  %46 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %44, i64 0, i32 0, i32 0\n  %47 = load i8*, i8** %46, align 8, !tbaa !15\n  %48 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %44, i64 0, i32 2\n  %49 = bitcast %union.anon* %48 to i8*\n  %50 = icmp eq i8* %47, %49\n  br i1 %50, label %51, label %52\n\n51:                                               ; preds = %45\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(16) %22, i8* noundef nonnull align 8 dereferenceable(16) %47, i64 16, i1 false) #10\n  br label %55\n\n52:                                               ; preds = %45\n  store i8* %47, i8** %20, align 8, !tbaa !15, !alias.scope !12\n  %53 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %44, i64 0, i32 2, i32 0\n  %54 = load i64, i64* %53, align 8, !tbaa !11\n  store i64 %54, i64* %21, align 8, !tbaa !11, !alias.scope !12\n  br label %55\n\n55:                                               ; preds = %52, %51\n  %56 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %44, i64 0, i32 1\n  %57 = load i64, i64* %56, align 8, !tbaa !8\n  store i64 %57, i64* %23, align 8, !tbaa !8, !alias.scope !12\n  %58 = bitcast %\"class.std::__cxx11::basic_string\"* %44 to %union.anon**\n  store %union.anon* %48, %union.anon** %58, align 8, !tbaa !15\n  store i64 0, i64* %56, align 8, !tbaa !8\n  store i8 0, i8* %49, align 8, !tbaa !11\n  %59 = load i8*, i8** %20, align 8, !tbaa !15\n  %60 = icmp eq i8* %59, %22\n  br i1 %60, label %61, label %75\n\n61:                                               ; preds = %55\n  %62 = load i64, i64* %23, align 8, !tbaa !8\n  %63 = icmp eq i64 %62, 0\n  br i1 %63, label %70, label %64\n\n64:                                               ; preds = %61\n  %65 = load i8*, i8** %12, align 8, !tbaa !15\n  %66 = icmp eq i64 %62, 1\n  br i1 %66, label %67, label %69\n\n67:                                               ; preds = %64\n  %68 = load i8, i8* %22, align 8, !tbaa !11\n  store i8 %68, i8* %65, align 1, !tbaa !11\n  br label %70\n\n69:                                               ; preds = %64\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %65, i8* nonnull align 8 %22, i64 %62, i1 false) #10\n  br label %70\n\n70:                                               ; preds = %69, %67, %61\n  %71 = load i64, i64* %23, align 8, !tbaa !8\n  store i64 %71, i64* %13, align 8, !tbaa !8\n  %72 = load i8*, i8** %12, align 8, !tbaa !15\n  %73 = getelementptr inbounds i8, i8* %72, i64 %71\n  store i8 0, i8* %73, align 1, !tbaa !11\n  %74 = load i8*, i8** %20, align 8, !tbaa !15\n  br label %84\n\n75:                                               ; preds = %55\n  %76 = load i8*, i8** %12, align 8, !tbaa !15\n  %77 = icmp eq i8* %76, %11\n  %78 = load i64, i64* %24, align 8\n  store i8* %59, i8** %12, align 8, !tbaa !15\n  %79 = load <2 x i64>, <2 x i64>* %30, align 8, !tbaa !11\n  store <2 x i64> %79, <2 x i64>* %31, align 8, !tbaa !11\n  %80 = icmp eq i8* %76, null\n  %81 = or i1 %77, %80\n  br i1 %81, label %83, label %82\n\n82:                                               ; preds = %75\n  store i8* %76, i8** %20, align 8, !tbaa !15\n  store i64 %78, i64* %21, align 8, !tbaa !11\n  br label %84\n\n83:                                               ; preds = %75\n  store %union.anon* %18, %union.anon** %19, align 8, !tbaa !15\n  br label %84\n\n84:                                               ; preds = %70, %82, %83\n  %85 = phi i8* [ %74, %70 ], [ %76, %82 ], [ %22, %83 ]\n  store i64 0, i64* %23, align 8, !tbaa !8\n  store i8 0, i8* %85, align 1, !tbaa !11\n  %86 = load i8*, i8** %20, align 8, !tbaa !15\n  %87 = icmp eq i8* %86, %22\n  br i1 %87, label %89, label %88\n\n88:                                               ; preds = %84\n  call void @_ZdlPv(i8* %86) #10\n  br label %89\n\n89:                                               ; preds = %84, %88\n  %90 = load i8*, i8** %25, align 8, !tbaa !15\n  %91 = icmp eq i8* %90, %27\n  br i1 %91, label %93, label %92\n\n92:                                               ; preds = %89\n  call void @_ZdlPv(i8* %90) #10\n  br label %93\n\n93:                                               ; preds = %89, %92\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %17) #10\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %16) #10\n  %94 = lshr i32 %39, 1\n  %95 = icmp ult i32 %39, 2\n  br i1 %95, label %105, label %38, !llvm.loop !16\n\n96:                                               ; preds = %38\n  %97 = landingpad { i8*, i32 }\n          cleanup\n  br label %103\n\n98:                                               ; preds = %41\n  %99 = landingpad { i8*, i32 }\n          cleanup\n  %100 = load i8*, i8** %25, align 8, !tbaa !15\n  %101 = icmp eq i8* %100, %27\n  br i1 %101, label %103, label %102\n\n102:                                              ; preds = %98\n  call void @_ZdlPv(i8* %100) #10\n  br label %103\n\n103:                                              ; preds = %102, %98, %96\n  %104 = phi { i8*, i32 } [ %97, %96 ], [ %99, %98 ], [ %99, %102 ]\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %17) #10\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %16) #10\n  br label %206\n\n105:                                              ; preds = %93, %15\n  %106 = bitcast %\"class.std::__cxx11::basic_string\"* %6 to i8*\n  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %106) #10\n  %107 = bitcast %\"class.std::__cxx11::basic_string\"* %7 to i8*\n  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %107) #10\n  invoke void @_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_RKS8_(%\"class.std::__cxx11::basic_string\"* nonnull sret(%\"class.std::__cxx11::basic_string\") align 8 %7, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i64 0, i64 0), %\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %3)\n          to label %108 unwind label %193\n\n108:                                              ; preds = %105\n  call void @llvm.experimental.noalias.scope.decl(metadata !18)\n  %109 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %7, i64 0, i32 1\n  %110 = load i64, i64* %109, align 8, !tbaa !8, !noalias !18\n  %111 = and i64 %110, -2\n  %112 = icmp eq i64 %111, 4611686018427387902\n  br i1 %112, label %113, label %115\n\n113:                                              ; preds = %108\n  invoke void @_ZSt20__throw_length_errorPKc(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.5, i64 0, i64 0)) #11\n          to label %114 unwind label %195\n\n114:                                              ; preds = %113\n  unreachable\n\n115:                                              ; preds = %108\n  %116 = invoke nonnull align 8 dereferenceable(32) %\"class.std::__cxx11::basic_string\"* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %7, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i64 0, i64 0), i64 2)\n          to label %117 unwind label %195\n\n117:                                              ; preds = %115\n  %118 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %6, i64 0, i32 2\n  %119 = bitcast %\"class.std::__cxx11::basic_string\"* %6 to %union.anon**\n  store %union.anon* %118, %union.anon** %119, align 8, !tbaa !3, !alias.scope !18\n  %120 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %116, i64 0, i32 0, i32 0\n  %121 = load i8*, i8** %120, align 8, !tbaa !15\n  %122 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %116, i64 0, i32 2\n  %123 = bitcast %union.anon* %122 to i8*\n  %124 = icmp eq i8* %121, %123\n  br i1 %124, label %125, label %127\n\n125:                                              ; preds = %117\n  %126 = bitcast %union.anon* %118 to i8*\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(16) %126, i8* noundef nonnull align 8 dereferenceable(16) %121, i64 16, i1 false) #10\n  br label %132\n\n127:                                              ; preds = %117\n  %128 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %6, i64 0, i32 0, i32 0\n  store i8* %121, i8** %128, align 8, !tbaa !15, !alias.scope !18\n  %129 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %116, i64 0, i32 2, i32 0\n  %130 = load i64, i64* %129, align 8, !tbaa !11\n  %131 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %6, i64 0, i32 2, i32 0\n  store i64 %130, i64* %131, align 8, !tbaa !11, !alias.scope !18\n  br label %132\n\n132:                                              ; preds = %127, %125\n  %133 = bitcast %union.anon* %118 to i8*\n  %134 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %116, i64 0, i32 1\n  %135 = load i64, i64* %134, align 8, !tbaa !8\n  %136 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %6, i64 0, i32 1\n  store i64 %135, i64* %136, align 8, !tbaa !8, !alias.scope !18\n  %137 = bitcast %\"class.std::__cxx11::basic_string\"* %116 to %union.anon**\n  store %union.anon* %122, %union.anon** %137, align 8, !tbaa !15\n  store i64 0, i64* %134, align 8, !tbaa !8\n  store i8 0, i8* %123, align 8, !tbaa !11\n  %138 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %6, i64 0, i32 0, i32 0\n  %139 = load i8*, i8** %138, align 8, !tbaa !15\n  %140 = icmp eq i8* %139, %133\n  br i1 %140, label %141, label %155\n\n141:                                              ; preds = %132\n  %142 = load i64, i64* %136, align 8, !tbaa !8\n  %143 = icmp eq i64 %142, 0\n  br i1 %143, label %150, label %144\n\n144:                                              ; preds = %141\n  %145 = load i8*, i8** %12, align 8, !tbaa !15\n  %146 = icmp eq i64 %142, 1\n  br i1 %146, label %147, label %149\n\n147:                                              ; preds = %144\n  %148 = load i8, i8* %133, align 8, !tbaa !11\n  store i8 %148, i8* %145, align 1, !tbaa !11\n  br label %150\n\n149:                                              ; preds = %144\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %145, i8* nonnull align 8 %133, i64 %142, i1 false) #10\n  br label %150\n\n150:                                              ; preds = %149, %147, %141\n  %151 = load i64, i64* %136, align 8, !tbaa !8\n  store i64 %151, i64* %13, align 8, !tbaa !8\n  %152 = load i8*, i8** %12, align 8, !tbaa !15\n  %153 = getelementptr inbounds i8, i8* %152, i64 %151\n  store i8 0, i8* %153, align 1, !tbaa !11\n  %154 = load i8*, i8** %138, align 8, !tbaa !15\n  br label %167\n\n155:                                              ; preds = %132\n  %156 = load i8*, i8** %12, align 8, !tbaa !15\n  %157 = icmp eq i8* %156, %11\n  %158 = load i64, i64* %24, align 8\n  store i8* %139, i8** %12, align 8, !tbaa !15\n  %159 = bitcast i64* %136 to <2 x i64>*\n  %160 = load <2 x i64>, <2 x i64>* %159, align 8, !tbaa !11\n  %161 = bitcast i64* %13 to <2 x i64>*\n  store <2 x i64> %160, <2 x i64>* %161, align 8, !tbaa !11\n  %162 = icmp eq i8* %156, null\n  %163 = or i1 %157, %162\n  br i1 %163, label %166, label %164\n\n164:                                              ; preds = %155\n  store i8* %156, i8** %138, align 8, !tbaa !15\n  %165 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %6, i64 0, i32 2, i32 0\n  store i64 %158, i64* %165, align 8, !tbaa !11\n  br label %167\n\n166:                                              ; preds = %155\n  store %union.anon* %118, %union.anon** %119, align 8, !tbaa !15\n  br label %167\n\n167:                                              ; preds = %150, %164, %166\n  %168 = phi i8* [ %154, %150 ], [ %156, %164 ], [ %133, %166 ]\n  store i64 0, i64* %136, align 8, !tbaa !8\n  store i8 0, i8* %168, align 1, !tbaa !11\n  %169 = load i8*, i8** %138, align 8, !tbaa !15\n  %170 = icmp eq i8* %169, %133\n  br i1 %170, label %172, label %171\n\n171:                                              ; preds = %167\n  call void @_ZdlPv(i8* %169) #10\n  br label %172\n\n172:                                              ; preds = %167, %171\n  %173 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %7, i64 0, i32 0, i32 0\n  %174 = load i8*, i8** %173, align 8, !tbaa !15\n  %175 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %7, i64 0, i32 2\n  %176 = bitcast %union.anon* %175 to i8*\n  %177 = icmp eq i8* %174, %176\n  br i1 %177, label %179, label %178\n\n178:                                              ; preds = %172\n  call void @_ZdlPv(i8* %174) #10\n  br label %179\n\n179:                                              ; preds = %172, %178\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %107) #10\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %106) #10\n  %180 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 2\n  %181 = bitcast %\"class.std::__cxx11::basic_string\"* %0 to %union.anon**\n  store %union.anon* %180, %union.anon** %181, align 8, !tbaa !3\n  %182 = load i8*, i8** %12, align 8, !tbaa !15\n  %183 = icmp eq i8* %182, %11\n  br i1 %183, label %184, label %186\n\n184:                                              ; preds = %179\n  %185 = bitcast %union.anon* %180 to i8*\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(16) %185, i8* noundef nonnull align 8 dereferenceable(16) %11, i64 16, i1 false) #10\n  br label %190\n\n186:                                              ; preds = %179\n  %187 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 0, i32 0\n  store i8* %182, i8** %187, align 8, !tbaa !15\n  %188 = load i64, i64* %24, align 8, !tbaa !11\n  %189 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 2, i32 0\n  store i64 %188, i64* %189, align 8, !tbaa !11\n  br label %190\n\n190:                                              ; preds = %184, %186\n  %191 = load i64, i64* %13, align 8, !tbaa !8\n  %192 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 1\n  store i64 %191, i64* %192, align 8, !tbaa !8\n  br label %205\n\n193:                                              ; preds = %105\n  %194 = landingpad { i8*, i32 }\n          cleanup\n  br label %203\n\n195:                                              ; preds = %115, %113\n  %196 = landingpad { i8*, i32 }\n          cleanup\n  %197 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %7, i64 0, i32 0, i32 0\n  %198 = load i8*, i8** %197, align 8, !tbaa !15\n  %199 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %7, i64 0, i32 2\n  %200 = bitcast %union.anon* %199 to i8*\n  %201 = icmp eq i8* %198, %200\n  br i1 %201, label %203, label %202\n\n202:                                              ; preds = %195\n  call void @_ZdlPv(i8* %198) #10\n  br label %203\n\n203:                                              ; preds = %202, %195, %193\n  %204 = phi { i8*, i32 } [ %194, %193 ], [ %196, %195 ], [ %196, %202 ]\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %107) #10\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %106) #10\n  br label %206\n\n205:                                              ; preds = %32, %190\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %8) #10\n  ret void\n\n206:                                              ; preds = %203, %103\n  %207 = phi { i8*, i32 } [ %104, %103 ], [ %204, %203 ]\n  %208 = load i8*, i8** %12, align 8, !tbaa !15\n  %209 = icmp eq i8* %208, %11\n  br i1 %209, label %211, label %210\n\n210:                                              ; preds = %206\n  call void @_ZdlPv(i8* %208) #10\n  br label %211\n\n211:                                              ; preds = %210, %206\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %8) #10\n  resume { i8*, i32 } %207\n}\n\n; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn\ndeclare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1\n\ndeclare dso_local i32 @__gxx_personality_v0(...)\n\n; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn\ndeclare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1\n\n; Function Attrs: uwtable\ndefine linkonce_odr dso_local void @_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_RKS8_(%\"class.std::__cxx11::basic_string\"* noalias sret(%\"class.std::__cxx11::basic_string\") align 8 %0, i8* %1, %\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %2) local_unnamed_addr #0 comdat personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {\n  %4 = tail call i64 @strlen(i8* noundef nonnull dereferenceable(1) %1) #10\n  %5 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 2\n  %6 = bitcast %\"class.std::__cxx11::basic_string\"* %0 to %union.anon**\n  store %union.anon* %5, %union.anon** %6, align 8, !tbaa !3\n  %7 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 1\n  store i64 0, i64* %7, align 8, !tbaa !8\n  %8 = bitcast %union.anon* %5 to i8*\n  store i8 0, i8* %8, align 8, !tbaa !11\n  %9 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %2, i64 0, i32 1\n  %10 = load i64, i64* %9, align 8, !tbaa !8\n  %11 = add i64 %10, %4\n  invoke void @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEm(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %0, i64 %11)\n          to label %12 unwind label %25\n\n12:                                               ; preds = %3\n  %13 = load i64, i64* %7, align 8, !tbaa !8\n  %14 = sub i64 4611686018427387903, %13\n  %15 = icmp ult i64 %14, %4\n  br i1 %15, label %16, label %18\n\n16:                                               ; preds = %12\n  invoke void @_ZSt20__throw_length_errorPKc(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.5, i64 0, i64 0)) #11\n          to label %17 unwind label %25\n\n17:                                               ; preds = %16\n  unreachable\n\n18:                                               ; preds = %12\n  %19 = invoke nonnull align 8 dereferenceable(32) %\"class.std::__cxx11::basic_string\"* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %0, i8* %1, i64 %4)\n          to label %20 unwind label %25\n\n20:                                               ; preds = %18\n  %21 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %2, i64 0, i32 0, i32 0\n  %22 = load i8*, i8** %21, align 8, !tbaa !15\n  %23 = load i64, i64* %9, align 8, !tbaa !8\n  %24 = invoke nonnull align 8 dereferenceable(32) %\"class.std::__cxx11::basic_string\"* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %0, i8* %22, i64 %23)\n          to label %32 unwind label %25\n\n25:                                               ; preds = %20, %18, %16, %3\n  %26 = landingpad { i8*, i32 }\n          cleanup\n  %27 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 0, i32 0\n  %28 = load i8*, i8** %27, align 8, !tbaa !15\n  %29 = icmp eq i8* %28, %8\n  br i1 %29, label %31, label %30\n\n30:                                               ; preds = %25\n  tail call void @_ZdlPv(i8* %28) #10\n  br label %31\n\n31:                                               ; preds = %25, %30\n  resume { i8*, i32 } %26\n\n32:                                               ; preds = %20\n  ret void\n}\n\n; Function Attrs: uwtable\ndefine linkonce_odr dso_local void @_ZN9__gnu_cxx12__to_xstringINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcEET_PFiPT0_mPKS8_P13__va_list_tagEmSB_z(%\"class.std::__cxx11::basic_string\"* noalias sret(%\"class.std::__cxx11::basic_string\") align 8 %0, i32 (i8*, i64, i8*, %struct.__va_list_tag*)* %1, i64 %2, i8* %3, ...) local_unnamed_addr #0 comdat personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {\n  %5 = alloca i64, align 8\n  %6 = alloca [1 x %struct.__va_list_tag], align 16\n  %7 = alloca i8, i64 %2, align 16\n  %8 = bitcast [1 x %struct.__va_list_tag]* %6 to i8*\n  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %8) #10\n  %9 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %6, i64 0, i64 0\n  call void @llvm.va_start(i8* nonnull %8)\n  %10 = call i32 %1(i8* nonnull %7, i64 %2, i8* %3, %struct.__va_list_tag* nonnull %9)\n  call void @llvm.va_end(i8* nonnull %8)\n  %11 = sext i32 %10 to i64\n  %12 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 2\n  %13 = bitcast %\"class.std::__cxx11::basic_string\"* %0 to %union.anon**\n  store %union.anon* %12, %union.anon** %13, align 8, !tbaa !3\n  %14 = bitcast %union.anon* %12 to i8*\n  %15 = bitcast i64* %5 to i8*\n  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %15) #10\n  store i64 %11, i64* %5, align 8, !tbaa !21\n  %16 = icmp ugt i32 %10, 15\n  br i1 %16, label %17, label %22\n\n17:                                               ; preds = %4\n  %18 = call i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %0, i64* nonnull align 8 dereferenceable(8) %5, i64 0)\n  %19 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 0, i32 0\n  store i8* %18, i8** %19, align 8, !tbaa !15\n  %20 = load i64, i64* %5, align 8, !tbaa !21\n  %21 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 2, i32 0\n  store i64 %20, i64* %21, align 8, !tbaa !11\n  br label %22\n\n22:                                               ; preds = %17, %4\n  %23 = phi i8* [ %18, %17 ], [ %14, %4 ]\n  switch i64 %11, label %26 [\n    i64 1, label %24\n    i64 0, label %27\n  ]\n\n24:                                               ; preds = %22\n  %25 = load i8, i8* %7, align 16, !tbaa !11\n  store i8 %25, i8* %23, align 1, !tbaa !11\n  br label %27\n\n26:                                               ; preds = %22\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %23, i8* nonnull align 16 %7, i64 %11, i1 false) #10\n  br label %27\n\n27:                                               ; preds = %26, %24, %22\n  %28 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 0, i32 0\n  %29 = load i64, i64* %5, align 8, !tbaa !21\n  %30 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 1\n  store i64 %29, i64* %30, align 8, !tbaa !8\n  %31 = load i8*, i8** %28, align 8, !tbaa !15\n  %32 = getelementptr inbounds i8, i8* %31, i64 %29\n  store i8 0, i8* %32, align 1, !tbaa !11\n  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %15) #10\n  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %8) #10\n  ret void\n}\n\n; Function Attrs: nofree nounwind\ndeclare dso_local noundef i32 @vsnprintf(i8* nocapture noundef, i64 noundef, i8* nocapture noundef readonly, %struct.__va_list_tag* noundef) #2\n\n; Function Attrs: mustprogress nofree nosync nounwind willreturn\ndeclare void @llvm.va_start(i8*) #3\n\n; Function Attrs: mustprogress nofree nosync nounwind willreturn\ndeclare void @llvm.va_end(i8*) #3\n\ndeclare dso_local i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32), i64* nonnull align 8 dereferenceable(8), i64) local_unnamed_addr #4\n\n; Function Attrs: argmemonly mustprogress nofree nounwind willreturn\ndeclare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #5\n\n; Function Attrs: nobuiltin nounwind\ndeclare dso_local void @_ZdlPv(i8*) local_unnamed_addr #6\n\n; Function Attrs: argmemonly mustprogress nofree nounwind readonly willreturn\ndeclare dso_local i64 @strlen(i8* nocapture) local_unnamed_addr #7\n\ndeclare dso_local nonnull align 8 dereferenceable(32) %\"class.std::__cxx11::basic_string\"* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32), i8*, i64) local_unnamed_addr #4\n\ndeclare dso_local void @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEm(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32), i64) local_unnamed_addr #4\n\n; Function Attrs: noreturn\ndeclare dso_local void @_ZSt20__throw_length_errorPKc(i8*) local_unnamed_addr #8\n\n; Function Attrs: inaccessiblememonly nofree nosync nounwind willreturn\ndeclare void @llvm.experimental.noalias.scope.decl(metadata) #9\n\nattributes #0 = { uwtable \"frame-pointer\"=\"none\" \"min-legal-vector-width\"=\"0\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #1 = { argmemonly mustprogress nofree nosync nounwind willreturn }\nattributes #2 = { nofree nounwind \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #3 = { mustprogress nofree nosync nounwind willreturn }\nattributes #4 = { \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #5 = { argmemonly mustprogress nofree nounwind willreturn }\nattributes #6 = { nobuiltin nounwind \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #7 = { argmemonly mustprogress nofree nounwind readonly willreturn \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #8 = { noreturn \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #9 = { inaccessiblememonly nofree nosync nounwind willreturn }\nattributes #10 = { nounwind }\nattributes #11 = { noreturn }\n\n!llvm.module.flags = !{!0, !1}\n!llvm.ident = !{!2}\n\n!0 = !{i32 1, !\"wchar_size\", i32 4}\n!1 = !{i32 7, !\"uwtable\", i32 1}\n!2 = !{!\"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)\"}\n!3 = !{!4, !5, i64 0}\n!4 = !{!\"_ZTSNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderE\", !5, i64 0}\n!5 = !{!\"any pointer\", !6, i64 0}\n!6 = !{!\"omnipotent char\", !7, i64 0}\n!7 = !{!\"Simple C++ TBAA\"}\n!8 = !{!9, !10, i64 8}\n!9 = !{!\"_ZTSNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE\", !4, i64 0, !10, i64 8, !6, i64 16}\n!10 = !{!\"long\", !6, i64 0}\n!11 = !{!6, !6, i64 0}\n!12 = !{!13}\n!13 = distinct !{!13, !14, !\"_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_: argument 0\"}\n!14 = distinct !{!14, !\"_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_\"}\n!15 = !{!9, !5, i64 0}\n!16 = distinct !{!16, !17}\n!17 = !{!\"llvm.loop.mustprogress\"}\n!18 = !{!19}\n!19 = distinct !{!19, !20, !\"_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_: argument 0\"}\n!20 = distinct !{!20, !\"_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_\"}\n!21 = !{!10, !10, i64 0}\n", "target": "This is the targeted source code:\n/*\nYou will be given a number in decimal form and your task is to convert it to\nbinary format. The function should return a string, with each character representing a binary\nnumber. Each character in the string will be '0' or '1'.\n\nThere will be an extra couple of characters \"db\" at the beginning and at the end of the string.\nThe extra characters are there to help with the format.\n\nExamples:\ndecimal_to_binary(15)   // returns \"db1111db\"\ndecimal_to_binary(32)   // returns \"db100000db\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring decimal_to_binary(int decimal){\n\n    string out=\"\";\n    if (decimal==0) return \"db0db\";\n    while (decimal>0)\n    {\n        out=to_string(decimal%2)+out;\n        decimal=decimal/2;\n    }\n    out=\"db\"+out+\"db\";\n    return out;\n}\n"}
{"input": "Convert this to C++:\n; ModuleID = '../../Human_xBenchmarks_164/CPP_80/CPP_80.cpp'\nsource_filename = \"../../Human_xBenchmarks_164/CPP_80/CPP_80.cpp\"\ntarget datalayout = \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\ntarget triple = \"x86_64-unknown-linux-gnu\"\n\n%\"class.std::__cxx11::basic_string\" = type { %\"struct.std::__cxx11::basic_string<char>::_Alloc_hider\", i64, %union.anon }\n%\"struct.std::__cxx11::basic_string<char>::_Alloc_hider\" = type { i8* }\n%union.anon = type { i64, [8 x i8] }\n\n; Function Attrs: mustprogress nofree norecurse nosync nounwind readonly uwtable willreturn\ndefine dso_local zeroext i1 @_Z8is_happyNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE(%\"class.std::__cxx11::basic_string\"* nocapture readonly %0) local_unnamed_addr #0 {\n  %2 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 1\n  %3 = load i64, i64* %2, align 8, !tbaa !3\n  %4 = icmp ult i64 %3, 3\n  br i1 %4, label %32, label %5\n\n5:                                                ; preds = %1\n  %6 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 0, i32 0\n  %7 = load i8*, i8** %6, align 8, !tbaa !10\n  %8 = getelementptr inbounds i8, i8* %7, i64 1\n  %9 = load i8, i8* %8, align 1, !tbaa !11\n  %10 = getelementptr inbounds i8, i8* %7, i64 2\n  %11 = load i8, i8* %10, align 1, !tbaa !11\n  %12 = icmp eq i8 %11, %9\n  br i1 %12, label %29, label %20\n\n13:                                               ; preds = %20\n  %14 = icmp ugt i64 %3, %28\n  %15 = icmp eq i64 %28, %3\n  br i1 %15, label %29, label %16, !llvm.loop !12\n\n16:                                               ; preds = %13\n  %17 = getelementptr inbounds i8, i8* %7, i64 %28\n  %18 = load i8, i8* %17, align 1, !tbaa !11\n  %19 = icmp eq i8 %18, %21\n  br i1 %19, label %29, label %20, !llvm.loop !12\n\n20:                                               ; preds = %5, %16\n  %21 = phi i8 [ %18, %16 ], [ %11, %5 ]\n  %22 = phi i1 [ %14, %16 ], [ true, %5 ]\n  %23 = phi i64 [ %28, %16 ], [ 2, %5 ]\n  %24 = add nsw i64 %23, -2\n  %25 = getelementptr inbounds i8, i8* %7, i64 %24\n  %26 = load i8, i8* %25, align 1, !tbaa !11\n  %27 = icmp eq i8 %21, %26\n  %28 = add nuw i64 %23, 1\n  br i1 %27, label %29, label %13\n\n29:                                               ; preds = %16, %20, %13, %5\n  %30 = phi i1 [ true, %5 ], [ %14, %16 ], [ %22, %20 ], [ %14, %13 ]\n  %31 = xor i1 %30, true\n  br label %32\n\n32:                                               ; preds = %29, %1\n  %33 = phi i1 [ false, %1 ], [ %31, %29 ]\n  ret i1 %33\n}\n\nattributes #0 = { mustprogress nofree norecurse nosync nounwind readonly uwtable willreturn \"frame-pointer\"=\"none\" \"min-legal-vector-width\"=\"0\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\n\n!llvm.module.flags = !{!0, !1}\n!llvm.ident = !{!2}\n\n!0 = !{i32 1, !\"wchar_size\", i32 4}\n!1 = !{i32 7, !\"uwtable\", i32 1}\n!2 = !{!\"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)\"}\n!3 = !{!4, !9, i64 8}\n!4 = !{!\"_ZTSNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE\", !5, i64 0, !9, i64 8, !7, i64 16}\n!5 = !{!\"_ZTSNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderE\", !6, i64 0}\n!6 = !{!\"any pointer\", !7, i64 0}\n!7 = !{!\"omnipotent char\", !8, i64 0}\n!8 = !{!\"Simple C++ TBAA\"}\n!9 = !{!\"long\", !7, i64 0}\n!10 = !{!4, !6, i64 0}\n!11 = !{!7, !7, i64 0}\n!12 = distinct !{!12, !13}\n!13 = !{!\"llvm.loop.mustprogress\"}\n", "target": "This is the targeted source code:\n/*\nYou are given a string s.\nYour task is to check if the string is happy or not.\nA string is happy if its length is at least 3 and every 3 consecutive letters are distinct\nFor example:\nis_happy(\"a\") => false\nis_happy(\"aa\") => false\nis_happy(\"abcd\") => true\nis_happy(\"aabb\") => false\nis_happy(\"adb\") => true\nis_happy(\"xyy\") => false\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool is_happy(string s){\n\n    if (s.length()<3) return false;\n    for (int i=2;i<s.length();i++)\n    if (s[i]==s[i-1] or s[i]==s[i-2]) return false;\n    return true;\n}\n"}
{"input": "Convert this to C++:\n; ModuleID = '../../Human_xBenchmarks_164/CPP_81/CPP_81.cpp'\nsource_filename = \"../../Human_xBenchmarks_164/CPP_81/CPP_81.cpp\"\ntarget datalayout = \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\ntarget triple = \"x86_64-unknown-linux-gnu\"\n\n%\"class.std::vector\" = type { %\"struct.std::_Vector_base\" }\n%\"struct.std::_Vector_base\" = type { %\"struct.std::_Vector_base<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char>>>::_Vector_impl\" }\n%\"struct.std::_Vector_base<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char>>>::_Vector_impl\" = type { %\"struct.std::_Vector_base<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char>>>::_Vector_impl_data\" }\n%\"struct.std::_Vector_base<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char>>>::_Vector_impl_data\" = type { %\"class.std::__cxx11::basic_string\"*, %\"class.std::__cxx11::basic_string\"*, %\"class.std::__cxx11::basic_string\"* }\n%\"class.std::__cxx11::basic_string\" = type { %\"struct.std::__cxx11::basic_string<char>::_Alloc_hider\", i64, %union.anon }\n%\"struct.std::__cxx11::basic_string<char>::_Alloc_hider\" = type { i8* }\n%union.anon = type { i64, [8 x i8] }\n%\"class.std::vector.3\" = type { %\"struct.std::_Vector_base.4\" }\n%\"struct.std::_Vector_base.4\" = type { %\"struct.std::_Vector_base<float, std::allocator<float>>::_Vector_impl\" }\n%\"struct.std::_Vector_base<float, std::allocator<float>>::_Vector_impl\" = type { %\"struct.std::_Vector_base<float, std::allocator<float>>::_Vector_impl_data\" }\n%\"struct.std::_Vector_base<float, std::allocator<float>>::_Vector_impl_data\" = type { float*, float*, float* }\n\n$_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED2Ev = comdat any\n\n$_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_realloc_insertIJS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_ = comdat any\n\n@.str.13 = private unnamed_addr constant [26 x i8] c\"vector::_M_realloc_insert\\00\", align 1\n\n; Function Attrs: uwtable\ndefine dso_local void @_Z22numerical_letter_gradeB5cxx11St6vectorIfSaIfEE(%\"class.std::vector\"* noalias sret(%\"class.std::vector\") align 8 %0, %\"class.std::vector.3\"* readonly %1) local_unnamed_addr #0 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {\n  %3 = alloca %\"class.std::__cxx11::basic_string\", align 8\n  %4 = alloca %\"class.std::__cxx11::basic_string\", align 8\n  %5 = alloca %\"class.std::__cxx11::basic_string\", align 8\n  %6 = alloca %\"class.std::__cxx11::basic_string\", align 8\n  %7 = alloca %\"class.std::__cxx11::basic_string\", align 8\n  %8 = alloca %\"class.std::__cxx11::basic_string\", align 8\n  %9 = alloca %\"class.std::__cxx11::basic_string\", align 8\n  %10 = alloca %\"class.std::__cxx11::basic_string\", align 8\n  %11 = alloca %\"class.std::__cxx11::basic_string\", align 8\n  %12 = alloca %\"class.std::__cxx11::basic_string\", align 8\n  %13 = alloca %\"class.std::__cxx11::basic_string\", align 8\n  %14 = alloca %\"class.std::__cxx11::basic_string\", align 8\n  %15 = alloca %\"class.std::__cxx11::basic_string\", align 8\n  %16 = getelementptr inbounds %\"class.std::vector.3\", %\"class.std::vector.3\"* %1, i64 0, i32 0, i32 0, i32 0, i32 1\n  %17 = getelementptr inbounds %\"class.std::vector.3\", %\"class.std::vector.3\"* %1, i64 0, i32 0, i32 0, i32 0, i32 0\n  %18 = bitcast %\"class.std::__cxx11::basic_string\"* %3 to i8*\n  %19 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %3, i64 0, i32 2\n  %20 = bitcast %\"class.std::__cxx11::basic_string\"* %3 to %union.anon**\n  %21 = bitcast %union.anon* %19 to i8*\n  %22 = bitcast %union.anon* %19 to i16*\n  %23 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %3, i64 0, i32 0, i32 0\n  %24 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %3, i64 0, i32 1\n  %25 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0, i64 0, i32 0, i32 0, i32 0, i32 1\n  %26 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0, i64 0, i32 0, i32 0, i32 0, i32 2\n  %27 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %3, i64 0, i32 2, i32 0\n  %28 = bitcast %\"class.std::__cxx11::basic_string\"* %4 to i8*\n  %29 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %4, i64 0, i32 2\n  %30 = bitcast %\"class.std::__cxx11::basic_string\"* %4 to %union.anon**\n  %31 = bitcast %union.anon* %29 to i8*\n  %32 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %4, i64 0, i32 0, i32 0\n  %33 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %4, i64 0, i32 1\n  %34 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %4, i64 0, i32 2, i32 0\n  %35 = bitcast %\"class.std::__cxx11::basic_string\"* %5 to i8*\n  %36 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %5, i64 0, i32 2\n  %37 = bitcast %\"class.std::__cxx11::basic_string\"* %5 to %union.anon**\n  %38 = bitcast %union.anon* %36 to i8*\n  %39 = bitcast %union.anon* %36 to i16*\n  %40 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %5, i64 0, i32 0, i32 0\n  %41 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %5, i64 0, i32 1\n  %42 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %5, i64 0, i32 2, i32 0\n  %43 = bitcast %\"class.std::__cxx11::basic_string\"* %6 to i8*\n  %44 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %6, i64 0, i32 2\n  %45 = bitcast %\"class.std::__cxx11::basic_string\"* %6 to %union.anon**\n  %46 = bitcast %union.anon* %44 to i8*\n  %47 = bitcast %union.anon* %44 to i16*\n  %48 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %6, i64 0, i32 0, i32 0\n  %49 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %6, i64 0, i32 1\n  %50 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %6, i64 0, i32 2, i32 0\n  %51 = bitcast %\"class.std::__cxx11::basic_string\"* %7 to i8*\n  %52 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %7, i64 0, i32 2\n  %53 = bitcast %\"class.std::__cxx11::basic_string\"* %7 to %union.anon**\n  %54 = bitcast %union.anon* %52 to i8*\n  %55 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %7, i64 0, i32 0, i32 0\n  %56 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %7, i64 0, i32 1\n  %57 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %7, i64 0, i32 2, i32 0\n  %58 = bitcast %\"class.std::__cxx11::basic_string\"* %8 to i8*\n  %59 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %8, i64 0, i32 2\n  %60 = bitcast %\"class.std::__cxx11::basic_string\"* %8 to %union.anon**\n  %61 = bitcast %union.anon* %59 to i8*\n  %62 = bitcast %union.anon* %59 to i16*\n  %63 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %8, i64 0, i32 0, i32 0\n  %64 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %8, i64 0, i32 1\n  %65 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %8, i64 0, i32 2, i32 0\n  %66 = bitcast %\"class.std::__cxx11::basic_string\"* %9 to i8*\n  %67 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %9, i64 0, i32 2\n  %68 = bitcast %\"class.std::__cxx11::basic_string\"* %9 to %union.anon**\n  %69 = bitcast %union.anon* %67 to i8*\n  %70 = bitcast %union.anon* %67 to i16*\n  %71 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %9, i64 0, i32 0, i32 0\n  %72 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %9, i64 0, i32 1\n  %73 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %9, i64 0, i32 2, i32 0\n  %74 = bitcast %\"class.std::__cxx11::basic_string\"* %10 to i8*\n  %75 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %10, i64 0, i32 2\n  %76 = bitcast %\"class.std::__cxx11::basic_string\"* %10 to %union.anon**\n  %77 = bitcast %union.anon* %75 to i8*\n  %78 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %10, i64 0, i32 0, i32 0\n  %79 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %10, i64 0, i32 1\n  %80 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %10, i64 0, i32 2, i32 0\n  %81 = bitcast %\"class.std::__cxx11::basic_string\"* %11 to i8*\n  %82 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %11, i64 0, i32 2\n  %83 = bitcast %\"class.std::__cxx11::basic_string\"* %11 to %union.anon**\n  %84 = bitcast %union.anon* %82 to i8*\n  %85 = bitcast %union.anon* %82 to i16*\n  %86 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %11, i64 0, i32 0, i32 0\n  %87 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %11, i64 0, i32 1\n  %88 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %11, i64 0, i32 2, i32 0\n  %89 = bitcast %\"class.std::__cxx11::basic_string\"* %12 to i8*\n  %90 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %12, i64 0, i32 2\n  %91 = bitcast %\"class.std::__cxx11::basic_string\"* %12 to %union.anon**\n  %92 = bitcast %union.anon* %90 to i8*\n  %93 = bitcast %union.anon* %90 to i16*\n  %94 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %12, i64 0, i32 0, i32 0\n  %95 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %12, i64 0, i32 1\n  %96 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %12, i64 0, i32 2, i32 0\n  %97 = bitcast %\"class.std::__cxx11::basic_string\"* %13 to i8*\n  %98 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %13, i64 0, i32 2\n  %99 = bitcast %\"class.std::__cxx11::basic_string\"* %13 to %union.anon**\n  %100 = bitcast %union.anon* %98 to i8*\n  %101 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %13, i64 0, i32 0, i32 0\n  %102 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %13, i64 0, i32 1\n  %103 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %13, i64 0, i32 2, i32 0\n  %104 = bitcast %\"class.std::__cxx11::basic_string\"* %14 to i8*\n  %105 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %14, i64 0, i32 2\n  %106 = bitcast %\"class.std::__cxx11::basic_string\"* %14 to %union.anon**\n  %107 = bitcast %union.anon* %105 to i8*\n  %108 = bitcast %union.anon* %105 to i16*\n  %109 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %14, i64 0, i32 0, i32 0\n  %110 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %14, i64 0, i32 1\n  %111 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %14, i64 0, i32 2, i32 0\n  %112 = bitcast %\"class.std::__cxx11::basic_string\"* %15 to i8*\n  %113 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %15, i64 0, i32 2\n  %114 = bitcast %\"class.std::__cxx11::basic_string\"* %15 to %union.anon**\n  %115 = bitcast %union.anon* %113 to i8*\n  %116 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %15, i64 0, i32 0, i32 0\n  %117 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %15, i64 0, i32 1\n  %118 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %15, i64 0, i32 2, i32 0\n  %119 = bitcast %\"class.std::vector\"* %0 to i8*\n  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(24) %119, i8 0, i64 24, i1 false)\n  %120 = load float*, float** %16, align 8, !tbaa !3\n  %121 = load float*, float** %17, align 8, !tbaa !8\n  %122 = icmp eq float* %120, %121\n  br i1 %122, label %677, label %123\n\n123:                                              ; preds = %2\n  %124 = getelementptr inbounds i8, i8* %21, i64 2\n  %125 = getelementptr inbounds i8, i8* %31, i64 1\n  %126 = getelementptr inbounds i8, i8* %38, i64 2\n  %127 = getelementptr inbounds i8, i8* %46, i64 2\n  %128 = getelementptr inbounds i8, i8* %54, i64 1\n  %129 = getelementptr inbounds i8, i8* %61, i64 2\n  %130 = getelementptr inbounds i8, i8* %69, i64 2\n  %131 = getelementptr inbounds i8, i8* %77, i64 1\n  %132 = getelementptr inbounds i8, i8* %84, i64 2\n  %133 = getelementptr inbounds i8, i8* %92, i64 2\n  %134 = getelementptr inbounds i8, i8* %100, i64 1\n  %135 = getelementptr inbounds i8, i8* %107, i64 2\n  %136 = getelementptr inbounds i8, i8* %115, i64 1\n  br label %137\n\n137:                                              ; preds = %123, %666\n  %138 = phi float* [ %121, %123 ], [ %667, %666 ]\n  %139 = phi i64 [ 0, %123 ], [ %668, %666 ]\n  %140 = getelementptr inbounds float, float* %138, i64 %139\n  %141 = load float, float* %140, align 4, !tbaa !9\n  %142 = fpext float %141 to double\n  %143 = fcmp ult double %142, 3.999900e+00\n  br i1 %143, label %179, label %144\n\n144:                                              ; preds = %137\n  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %18) #8\n  store %union.anon* %19, %union.anon** %20, align 8, !tbaa !11\n  store i16 11073, i16* %22, align 8\n  store i64 2, i64* %24, align 8, !tbaa !13\n  store i8 0, i8* %124, align 2, !tbaa !16\n  %145 = load %\"class.std::__cxx11::basic_string\"*, %\"class.std::__cxx11::basic_string\"** %25, align 8, !tbaa !17\n  %146 = load %\"class.std::__cxx11::basic_string\"*, %\"class.std::__cxx11::basic_string\"** %26, align 8, !tbaa !19\n  %147 = icmp eq %\"class.std::__cxx11::basic_string\"* %145, %146\n  br i1 %147, label %163, label %148\n\n148:                                              ; preds = %144\n  %149 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %145, i64 0, i32 2\n  %150 = bitcast %\"class.std::__cxx11::basic_string\"* %145 to %union.anon**\n  store %union.anon* %149, %union.anon** %150, align 8, !tbaa !11\n  %151 = load i8*, i8** %23, align 8, !tbaa !20\n  %152 = icmp eq i8* %151, %21\n  br i1 %152, label %153, label %155\n\n153:                                              ; preds = %148\n  %154 = bitcast %union.anon* %149 to i8*\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(16) %154, i8* noundef nonnull align 8 dereferenceable(16) %21, i64 16, i1 false) #8\n  br label %159\n\n155:                                              ; preds = %148\n  %156 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %145, i64 0, i32 0, i32 0\n  store i8* %151, i8** %156, align 8, !tbaa !20\n  %157 = load i64, i64* %27, align 8, !tbaa !16\n  %158 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %145, i64 0, i32 2, i32 0\n  store i64 %157, i64* %158, align 8, !tbaa !16\n  br label %159\n\n159:                                              ; preds = %153, %155\n  %160 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %145, i64 0, i32 1\n  store i64 2, i64* %160, align 8, !tbaa !13\n  %161 = load %\"class.std::__cxx11::basic_string\"*, %\"class.std::__cxx11::basic_string\"** %25, align 8, !tbaa !17\n  %162 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %161, i64 1\n  store %\"class.std::__cxx11::basic_string\"* %162, %\"class.std::__cxx11::basic_string\"** %25, align 8, !tbaa !17\n  br label %168\n\n163:                                              ; preds = %144\n  invoke void @_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_realloc_insertIJS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_(%\"class.std::vector\"* nonnull align 8 dereferenceable(24) %0, %\"class.std::__cxx11::basic_string\"* %145, %\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %3)\n          to label %164 unwind label %173\n\n164:                                              ; preds = %163\n  %165 = load i8*, i8** %23, align 8, !tbaa !20\n  %166 = icmp eq i8* %165, %21\n  br i1 %166, label %168, label %167\n\n167:                                              ; preds = %164\n  call void @_ZdlPv(i8* %165) #8\n  br label %168\n\n168:                                              ; preds = %159, %164, %167\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %18) #8\n  %169 = load float*, float** %17, align 8, !tbaa !8\n  %170 = getelementptr inbounds float, float* %169, i64 %139\n  %171 = load float, float* %170, align 4, !tbaa !9\n  %172 = fpext float %171 to double\n  br label %179\n\n173:                                              ; preds = %163\n  %174 = landingpad { i8*, i32 }\n          cleanup\n  %175 = load i8*, i8** %23, align 8, !tbaa !20\n  %176 = icmp eq i8* %175, %21\n  br i1 %176, label %178, label %177\n\n177:                                              ; preds = %173\n  call void @_ZdlPv(i8* %175) #8\n  br label %178\n\n178:                                              ; preds = %177, %173\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %18) #8\n  br label %675\n\n179:                                              ; preds = %168, %137\n  %180 = phi double [ %172, %168 ], [ %142, %137 ]\n  %181 = phi float* [ %169, %168 ], [ %138, %137 ]\n  %182 = fcmp ogt double %180, 3.700100e+00\n  %183 = fcmp olt double %180, 3.999900e+00\n  %184 = and i1 %182, %183\n  br i1 %184, label %185, label %220\n\n185:                                              ; preds = %179\n  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %28) #8\n  store %union.anon* %29, %union.anon** %30, align 8, !tbaa !11\n  store i8 65, i8* %31, align 8, !tbaa !16\n  store i64 1, i64* %33, align 8, !tbaa !13\n  store i8 0, i8* %125, align 1, !tbaa !16\n  %186 = load %\"class.std::__cxx11::basic_string\"*, %\"class.std::__cxx11::basic_string\"** %25, align 8, !tbaa !17\n  %187 = load %\"class.std::__cxx11::basic_string\"*, %\"class.std::__cxx11::basic_string\"** %26, align 8, !tbaa !19\n  %188 = icmp eq %\"class.std::__cxx11::basic_string\"* %186, %187\n  br i1 %188, label %204, label %189\n\n189:                                              ; preds = %185\n  %190 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %186, i64 0, i32 2\n  %191 = bitcast %\"class.std::__cxx11::basic_string\"* %186 to %union.anon**\n  store %union.anon* %190, %union.anon** %191, align 8, !tbaa !11\n  %192 = load i8*, i8** %32, align 8, !tbaa !20\n  %193 = icmp eq i8* %192, %31\n  br i1 %193, label %194, label %196\n\n194:                                              ; preds = %189\n  %195 = bitcast %union.anon* %190 to i8*\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(16) %195, i8* noundef nonnull align 8 dereferenceable(16) %31, i64 16, i1 false) #8\n  br label %200\n\n196:                                              ; preds = %189\n  %197 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %186, i64 0, i32 0, i32 0\n  store i8* %192, i8** %197, align 8, !tbaa !20\n  %198 = load i64, i64* %34, align 8, !tbaa !16\n  %199 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %186, i64 0, i32 2, i32 0\n  store i64 %198, i64* %199, align 8, !tbaa !16\n  br label %200\n\n200:                                              ; preds = %194, %196\n  %201 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %186, i64 0, i32 1\n  store i64 1, i64* %201, align 8, !tbaa !13\n  %202 = load %\"class.std::__cxx11::basic_string\"*, %\"class.std::__cxx11::basic_string\"** %25, align 8, !tbaa !17\n  %203 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %202, i64 1\n  store %\"class.std::__cxx11::basic_string\"* %203, %\"class.std::__cxx11::basic_string\"** %25, align 8, !tbaa !17\n  br label %209\n\n204:                                              ; preds = %185\n  invoke void @_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_realloc_insertIJS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_(%\"class.std::vector\"* nonnull align 8 dereferenceable(24) %0, %\"class.std::__cxx11::basic_string\"* %186, %\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %4)\n          to label %205 unwind label %214\n\n205:                                              ; preds = %204\n  %206 = load i8*, i8** %32, align 8, !tbaa !20\n  %207 = icmp eq i8* %206, %31\n  br i1 %207, label %209, label %208\n\n208:                                              ; preds = %205\n  call void @_ZdlPv(i8* %206) #8\n  br label %209\n\n209:                                              ; preds = %200, %205, %208\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %28) #8\n  %210 = load float*, float** %17, align 8, !tbaa !8\n  %211 = getelementptr inbounds float, float* %210, i64 %139\n  %212 = load float, float* %211, align 4, !tbaa !9\n  %213 = fpext float %212 to double\n  br label %220\n\n214:                                              ; preds = %204\n  %215 = landingpad { i8*, i32 }\n          cleanup\n  %216 = load i8*, i8** %32, align 8, !tbaa !20\n  %217 = icmp eq i8* %216, %31\n  br i1 %217, label %219, label %218\n\n218:                                              ; preds = %214\n  call void @_ZdlPv(i8* %216) #8\n  br label %219\n\n219:                                              ; preds = %218, %214\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %28) #8\n  br label %675\n\n220:                                              ; preds = %209, %179\n  %221 = phi double [ %213, %209 ], [ %180, %179 ]\n  %222 = phi float* [ %210, %209 ], [ %181, %179 ]\n  %223 = fcmp ule double %221, 3.300100e+00\n  %224 = fcmp ugt double %221, 3.700100e+00\n  %225 = or i1 %223, %224\n  br i1 %225, label %261, label %226\n\n226:                                              ; preds = %220\n  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %35) #8\n  store %union.anon* %36, %union.anon** %37, align 8, !tbaa !11\n  store i16 11585, i16* %39, align 8\n  store i64 2, i64* %41, align 8, !tbaa !13\n  store i8 0, i8* %126, align 2, !tbaa !16\n  %227 = load %\"class.std::__cxx11::basic_string\"*, %\"class.std::__cxx11::basic_string\"** %25, align 8, !tbaa !17\n  %228 = load %\"class.std::__cxx11::basic_string\"*, %\"class.std::__cxx11::basic_string\"** %26, align 8, !tbaa !19\n  %229 = icmp eq %\"class.std::__cxx11::basic_string\"* %227, %228\n  br i1 %229, label %245, label %230\n\n230:                                              ; preds = %226\n  %231 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %227, i64 0, i32 2\n  %232 = bitcast %\"class.std::__cxx11::basic_string\"* %227 to %union.anon**\n  store %union.anon* %231, %union.anon** %232, align 8, !tbaa !11\n  %233 = load i8*, i8** %40, align 8, !tbaa !20\n  %234 = icmp eq i8* %233, %38\n  br i1 %234, label %235, label %237\n\n235:                                              ; preds = %230\n  %236 = bitcast %union.anon* %231 to i8*\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(16) %236, i8* noundef nonnull align 8 dereferenceable(16) %38, i64 16, i1 false) #8\n  br label %241\n\n237:                                              ; preds = %230\n  %238 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %227, i64 0, i32 0, i32 0\n  store i8* %233, i8** %238, align 8, !tbaa !20\n  %239 = load i64, i64* %42, align 8, !tbaa !16\n  %240 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %227, i64 0, i32 2, i32 0\n  store i64 %239, i64* %240, align 8, !tbaa !16\n  br label %241\n\n241:                                              ; preds = %235, %237\n  %242 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %227, i64 0, i32 1\n  store i64 2, i64* %242, align 8, !tbaa !13\n  %243 = load %\"class.std::__cxx11::basic_string\"*, %\"class.std::__cxx11::basic_string\"** %25, align 8, !tbaa !17\n  %244 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %243, i64 1\n  store %\"class.std::__cxx11::basic_string\"* %244, %\"class.std::__cxx11::basic_string\"** %25, align 8, !tbaa !17\n  br label %250\n\n245:                                              ; preds = %226\n  invoke void @_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_realloc_insertIJS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_(%\"class.std::vector\"* nonnull align 8 dereferenceable(24) %0, %\"class.std::__cxx11::basic_string\"* %227, %\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %5)\n          to label %246 unwind label %255\n\n246:                                              ; preds = %245\n  %247 = load i8*, i8** %40, align 8, !tbaa !20\n  %248 = icmp eq i8* %247, %38\n  br i1 %248, label %250, label %249\n\n249:                                              ; preds = %246\n  call void @_ZdlPv(i8* %247) #8\n  br label %250\n\n250:                                              ; preds = %241, %246, %249\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %35) #8\n  %251 = load float*, float** %17, align 8, !tbaa !8\n  %252 = getelementptr inbounds float, float* %251, i64 %139\n  %253 = load float, float* %252, align 4, !tbaa !9\n  %254 = fpext float %253 to double\n  br label %261\n\n255:                                              ; preds = %245\n  %256 = landingpad { i8*, i32 }\n          cleanup\n  %257 = load i8*, i8** %40, align 8, !tbaa !20\n  %258 = icmp eq i8* %257, %38\n  br i1 %258, label %260, label %259\n\n259:                                              ; preds = %255\n  call void @_ZdlPv(i8* %257) #8\n  br label %260\n\n260:                                              ; preds = %259, %255\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %35) #8\n  br label %675\n\n261:                                              ; preds = %250, %220\n  %262 = phi double [ %254, %250 ], [ %221, %220 ]\n  %263 = phi float* [ %251, %250 ], [ %222, %220 ]\n  %264 = fcmp ule double %262, 3.000100e+00\n  %265 = fcmp ugt double %262, 3.300100e+00\n  %266 = or i1 %264, %265\n  br i1 %266, label %302, label %267\n\n267:                                              ; preds = %261\n  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %43) #8\n  store %union.anon* %44, %union.anon** %45, align 8, !tbaa !11\n  store i16 11074, i16* %47, align 8\n  store i64 2, i64* %49, align 8, !tbaa !13\n  store i8 0, i8* %127, align 2, !tbaa !16\n  %268 = load %\"class.std::__cxx11::basic_string\"*, %\"class.std::__cxx11::basic_string\"** %25, align 8, !tbaa !17\n  %269 = load %\"class.std::__cxx11::basic_string\"*, %\"class.std::__cxx11::basic_string\"** %26, align 8, !tbaa !19\n  %270 = icmp eq %\"class.std::__cxx11::basic_string\"* %268, %269\n  br i1 %270, label %286, label %271\n\n271:                                              ; preds = %267\n  %272 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %268, i64 0, i32 2\n  %273 = bitcast %\"class.std::__cxx11::basic_string\"* %268 to %union.anon**\n  store %union.anon* %272, %union.anon** %273, align 8, !tbaa !11\n  %274 = load i8*, i8** %48, align 8, !tbaa !20\n  %275 = icmp eq i8* %274, %46\n  br i1 %275, label %276, label %278\n\n276:                                              ; preds = %271\n  %277 = bitcast %union.anon* %272 to i8*\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(16) %277, i8* noundef nonnull align 8 dereferenceable(16) %46, i64 16, i1 false) #8\n  br label %282\n\n278:                                              ; preds = %271\n  %279 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %268, i64 0, i32 0, i32 0\n  store i8* %274, i8** %279, align 8, !tbaa !20\n  %280 = load i64, i64* %50, align 8, !tbaa !16\n  %281 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %268, i64 0, i32 2, i32 0\n  store i64 %280, i64* %281, align 8, !tbaa !16\n  br label %282\n\n282:                                              ; preds = %276, %278\n  %283 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %268, i64 0, i32 1\n  store i64 2, i64* %283, align 8, !tbaa !13\n  %284 = load %\"class.std::__cxx11::basic_string\"*, %\"class.std::__cxx11::basic_string\"** %25, align 8, !tbaa !17\n  %285 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %284, i64 1\n  store %\"class.std::__cxx11::basic_string\"* %285, %\"class.std::__cxx11::basic_string\"** %25, align 8, !tbaa !17\n  br label %291\n\n286:                                              ; preds = %267\n  invoke void @_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_realloc_insertIJS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_(%\"class.std::vector\"* nonnull align 8 dereferenceable(24) %0, %\"class.std::__cxx11::basic_string\"* %268, %\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %6)\n          to label %287 unwind label %296\n\n287:                                              ; preds = %286\n  %288 = load i8*, i8** %48, align 8, !tbaa !20\n  %289 = icmp eq i8* %288, %46\n  br i1 %289, label %291, label %290\n\n290:                                              ; preds = %287\n  call void @_ZdlPv(i8* %288) #8\n  br label %291\n\n291:                                              ; preds = %282, %287, %290\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %43) #8\n  %292 = load float*, float** %17, align 8, !tbaa !8\n  %293 = getelementptr inbounds float, float* %292, i64 %139\n  %294 = load float, float* %293, align 4, !tbaa !9\n  %295 = fpext float %294 to double\n  br label %302\n\n296:                                              ; preds = %286\n  %297 = landingpad { i8*, i32 }\n          cleanup\n  %298 = load i8*, i8** %48, align 8, !tbaa !20\n  %299 = icmp eq i8* %298, %46\n  br i1 %299, label %301, label %300\n\n300:                                              ; preds = %296\n  call void @_ZdlPv(i8* %298) #8\n  br label %301\n\n301:                                              ; preds = %300, %296\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %43) #8\n  br label %675\n\n302:                                              ; preds = %291, %261\n  %303 = phi double [ %295, %291 ], [ %262, %261 ]\n  %304 = phi float* [ %292, %291 ], [ %263, %261 ]\n  %305 = fcmp ule double %303, 2.700100e+00\n  %306 = fcmp ugt double %303, 3.000100e+00\n  %307 = or i1 %305, %306\n  br i1 %307, label %343, label %308\n\n308:                                              ; preds = %302\n  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %51) #8\n  store %union.anon* %52, %union.anon** %53, align 8, !tbaa !11\n  store i8 66, i8* %54, align 8, !tbaa !16\n  store i64 1, i64* %56, align 8, !tbaa !13\n  store i8 0, i8* %128, align 1, !tbaa !16\n  %309 = load %\"class.std::__cxx11::basic_string\"*, %\"class.std::__cxx11::basic_string\"** %25, align 8, !tbaa !17\n  %310 = load %\"class.std::__cxx11::basic_string\"*, %\"class.std::__cxx11::basic_string\"** %26, align 8, !tbaa !19\n  %311 = icmp eq %\"class.std::__cxx11::basic_string\"* %309, %310\n  br i1 %311, label %327, label %312\n\n312:                                              ; preds = %308\n  %313 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %309, i64 0, i32 2\n  %314 = bitcast %\"class.std::__cxx11::basic_string\"* %309 to %union.anon**\n  store %union.anon* %313, %union.anon** %314, align 8, !tbaa !11\n  %315 = load i8*, i8** %55, align 8, !tbaa !20\n  %316 = icmp eq i8* %315, %54\n  br i1 %316, label %317, label %319\n\n317:                                              ; preds = %312\n  %318 = bitcast %union.anon* %313 to i8*\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(16) %318, i8* noundef nonnull align 8 dereferenceable(16) %54, i64 16, i1 false) #8\n  br label %323\n\n319:                                              ; preds = %312\n  %320 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %309, i64 0, i32 0, i32 0\n  store i8* %315, i8** %320, align 8, !tbaa !20\n  %321 = load i64, i64* %57, align 8, !tbaa !16\n  %322 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %309, i64 0, i32 2, i32 0\n  store i64 %321, i64* %322, align 8, !tbaa !16\n  br label %323\n\n323:                                              ; preds = %317, %319\n  %324 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %309, i64 0, i32 1\n  store i64 1, i64* %324, align 8, !tbaa !13\n  %325 = load %\"class.std::__cxx11::basic_string\"*, %\"class.std::__cxx11::basic_string\"** %25, align 8, !tbaa !17\n  %326 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %325, i64 1\n  store %\"class.std::__cxx11::basic_string\"* %326, %\"class.std::__cxx11::basic_string\"** %25, align 8, !tbaa !17\n  br label %332\n\n327:                                              ; preds = %308\n  invoke void @_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_realloc_insertIJS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_(%\"class.std::vector\"* nonnull align 8 dereferenceable(24) %0, %\"class.std::__cxx11::basic_string\"* %309, %\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %7)\n          to label %328 unwind label %337\n\n328:                                              ; preds = %327\n  %329 = load i8*, i8** %55, align 8, !tbaa !20\n  %330 = icmp eq i8* %329, %54\n  br i1 %330, label %332, label %331\n\n331:                                              ; preds = %328\n  call void @_ZdlPv(i8* %329) #8\n  br label %332\n\n332:                                              ; preds = %323, %328, %331\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %51) #8\n  %333 = load float*, float** %17, align 8, !tbaa !8\n  %334 = getelementptr inbounds float, float* %333, i64 %139\n  %335 = load float, float* %334, align 4, !tbaa !9\n  %336 = fpext float %335 to double\n  br label %343\n\n337:                                              ; preds = %327\n  %338 = landingpad { i8*, i32 }\n          cleanup\n  %339 = load i8*, i8** %55, align 8, !tbaa !20\n  %340 = icmp eq i8* %339, %54\n  br i1 %340, label %342, label %341\n\n341:                                              ; preds = %337\n  call void @_ZdlPv(i8* %339) #8\n  br label %342\n\n342:                                              ; preds = %341, %337\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %51) #8\n  br label %675\n\n343:                                              ; preds = %332, %302\n  %344 = phi double [ %336, %332 ], [ %303, %302 ]\n  %345 = phi float* [ %333, %332 ], [ %304, %302 ]\n  %346 = fcmp ule double %344, 2.300100e+00\n  %347 = fcmp ugt double %344, 2.700100e+00\n  %348 = or i1 %346, %347\n  br i1 %348, label %384, label %349\n\n349:                                              ; preds = %343\n  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %58) #8\n  store %union.anon* %59, %union.anon** %60, align 8, !tbaa !11\n  store i16 11586, i16* %62, align 8\n  store i64 2, i64* %64, align 8, !tbaa !13\n  store i8 0, i8* %129, align 2, !tbaa !16\n  %350 = load %\"class.std::__cxx11::basic_string\"*, %\"class.std::__cxx11::basic_string\"** %25, align 8, !tbaa !17\n  %351 = load %\"class.std::__cxx11::basic_string\"*, %\"class.std::__cxx11::basic_string\"** %26, align 8, !tbaa !19\n  %352 = icmp eq %\"class.std::__cxx11::basic_string\"* %350, %351\n  br i1 %352, label %368, label %353\n\n353:                                              ; preds = %349\n  %354 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %350, i64 0, i32 2\n  %355 = bitcast %\"class.std::__cxx11::basic_string\"* %350 to %union.anon**\n  store %union.anon* %354, %union.anon** %355, align 8, !tbaa !11\n  %356 = load i8*, i8** %63, align 8, !tbaa !20\n  %357 = icmp eq i8* %356, %61\n  br i1 %357, label %358, label %360\n\n358:                                              ; preds = %353\n  %359 = bitcast %union.anon* %354 to i8*\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(16) %359, i8* noundef nonnull align 8 dereferenceable(16) %61, i64 16, i1 false) #8\n  br label %364\n\n360:                                              ; preds = %353\n  %361 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %350, i64 0, i32 0, i32 0\n  store i8* %356, i8** %361, align 8, !tbaa !20\n  %362 = load i64, i64* %65, align 8, !tbaa !16\n  %363 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %350, i64 0, i32 2, i32 0\n  store i64 %362, i64* %363, align 8, !tbaa !16\n  br label %364\n\n364:                                              ; preds = %358, %360\n  %365 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %350, i64 0, i32 1\n  store i64 2, i64* %365, align 8, !tbaa !13\n  %366 = load %\"class.std::__cxx11::basic_string\"*, %\"class.std::__cxx11::basic_string\"** %25, align 8, !tbaa !17\n  %367 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %366, i64 1\n  store %\"class.std::__cxx11::basic_string\"* %367, %\"class.std::__cxx11::basic_string\"** %25, align 8, !tbaa !17\n  br label %373\n\n368:                                              ; preds = %349\n  invoke void @_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_realloc_insertIJS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_(%\"class.std::vector\"* nonnull align 8 dereferenceable(24) %0, %\"class.std::__cxx11::basic_string\"* %350, %\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %8)\n          to label %369 unwind label %378\n\n369:                                              ; preds = %368\n  %370 = load i8*, i8** %63, align 8, !tbaa !20\n  %371 = icmp eq i8* %370, %61\n  br i1 %371, label %373, label %372\n\n372:                                              ; preds = %369\n  call void @_ZdlPv(i8* %370) #8\n  br label %373\n\n373:                                              ; preds = %364, %369, %372\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %58) #8\n  %374 = load float*, float** %17, align 8, !tbaa !8\n  %375 = getelementptr inbounds float, float* %374, i64 %139\n  %376 = load float, float* %375, align 4, !tbaa !9\n  %377 = fpext float %376 to double\n  br label %384\n\n378:                                              ; preds = %368\n  %379 = landingpad { i8*, i32 }\n          cleanup\n  %380 = load i8*, i8** %63, align 8, !tbaa !20\n  %381 = icmp eq i8* %380, %61\n  br i1 %381, label %383, label %382\n\n382:                                              ; preds = %378\n  call void @_ZdlPv(i8* %380) #8\n  br label %383\n\n383:                                              ; preds = %382, %378\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %58) #8\n  br label %675\n\n384:                                              ; preds = %373, %343\n  %385 = phi double [ %377, %373 ], [ %344, %343 ]\n  %386 = phi float* [ %374, %373 ], [ %345, %343 ]\n  %387 = fcmp ule double %385, 2.000100e+00\n  %388 = fcmp ugt double %385, 2.300100e+00\n  %389 = or i1 %387, %388\n  br i1 %389, label %425, label %390\n\n390:                                              ; preds = %384\n  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %66) #8\n  store %union.anon* %67, %union.anon** %68, align 8, !tbaa !11\n  store i16 11075, i16* %70, align 8\n  store i64 2, i64* %72, align 8, !tbaa !13\n  store i8 0, i8* %130, align 2, !tbaa !16\n  %391 = load %\"class.std::__cxx11::basic_string\"*, %\"class.std::__cxx11::basic_string\"** %25, align 8, !tbaa !17\n  %392 = load %\"class.std::__cxx11::basic_string\"*, %\"class.std::__cxx11::basic_string\"** %26, align 8, !tbaa !19\n  %393 = icmp eq %\"class.std::__cxx11::basic_string\"* %391, %392\n  br i1 %393, label %409, label %394\n\n394:                                              ; preds = %390\n  %395 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %391, i64 0, i32 2\n  %396 = bitcast %\"class.std::__cxx11::basic_string\"* %391 to %union.anon**\n  store %union.anon* %395, %union.anon** %396, align 8, !tbaa !11\n  %397 = load i8*, i8** %71, align 8, !tbaa !20\n  %398 = icmp eq i8* %397, %69\n  br i1 %398, label %399, label %401\n\n399:                                              ; preds = %394\n  %400 = bitcast %union.anon* %395 to i8*\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(16) %400, i8* noundef nonnull align 8 dereferenceable(16) %69, i64 16, i1 false) #8\n  br label %405\n\n401:                                              ; preds = %394\n  %402 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %391, i64 0, i32 0, i32 0\n  store i8* %397, i8** %402, align 8, !tbaa !20\n  %403 = load i64, i64* %73, align 8, !tbaa !16\n  %404 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %391, i64 0, i32 2, i32 0\n  store i64 %403, i64* %404, align 8, !tbaa !16\n  br label %405\n\n405:                                              ; preds = %399, %401\n  %406 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %391, i64 0, i32 1\n  store i64 2, i64* %406, align 8, !tbaa !13\n  %407 = load %\"class.std::__cxx11::basic_string\"*, %\"class.std::__cxx11::basic_string\"** %25, align 8, !tbaa !17\n  %408 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %407, i64 1\n  store %\"class.std::__cxx11::basic_string\"* %408, %\"class.std::__cxx11::basic_string\"** %25, align 8, !tbaa !17\n  br label %414\n\n409:                                              ; preds = %390\n  invoke void @_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_realloc_insertIJS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_(%\"class.std::vector\"* nonnull align 8 dereferenceable(24) %0, %\"class.std::__cxx11::basic_string\"* %391, %\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %9)\n          to label %410 unwind label %419\n\n410:                                              ; preds = %409\n  %411 = load i8*, i8** %71, align 8, !tbaa !20\n  %412 = icmp eq i8* %411, %69\n  br i1 %412, label %414, label %413\n\n413:                                              ; preds = %410\n  call void @_ZdlPv(i8* %411) #8\n  br label %414\n\n414:                                              ; preds = %405, %410, %413\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %66) #8\n  %415 = load float*, float** %17, align 8, !tbaa !8\n  %416 = getelementptr inbounds float, float* %415, i64 %139\n  %417 = load float, float* %416, align 4, !tbaa !9\n  %418 = fpext float %417 to double\n  br label %425\n\n419:                                              ; preds = %409\n  %420 = landingpad { i8*, i32 }\n          cleanup\n  %421 = load i8*, i8** %71, align 8, !tbaa !20\n  %422 = icmp eq i8* %421, %69\n  br i1 %422, label %424, label %423\n\n423:                                              ; preds = %419\n  call void @_ZdlPv(i8* %421) #8\n  br label %424\n\n424:                                              ; preds = %423, %419\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %66) #8\n  br label %675\n\n425:                                              ; preds = %414, %384\n  %426 = phi double [ %418, %414 ], [ %385, %384 ]\n  %427 = phi float* [ %415, %414 ], [ %386, %384 ]\n  %428 = fcmp ule double %426, 1.700100e+00\n  %429 = fcmp ugt double %426, 2.000100e+00\n  %430 = or i1 %428, %429\n  br i1 %430, label %466, label %431\n\n431:                                              ; preds = %425\n  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %74) #8\n  store %union.anon* %75, %union.anon** %76, align 8, !tbaa !11\n  store i8 67, i8* %77, align 8, !tbaa !16\n  store i64 1, i64* %79, align 8, !tbaa !13\n  store i8 0, i8* %131, align 1, !tbaa !16\n  %432 = load %\"class.std::__cxx11::basic_string\"*, %\"class.std::__cxx11::basic_string\"** %25, align 8, !tbaa !17\n  %433 = load %\"class.std::__cxx11::basic_string\"*, %\"class.std::__cxx11::basic_string\"** %26, align 8, !tbaa !19\n  %434 = icmp eq %\"class.std::__cxx11::basic_string\"* %432, %433\n  br i1 %434, label %450, label %435\n\n435:                                              ; preds = %431\n  %436 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %432, i64 0, i32 2\n  %437 = bitcast %\"class.std::__cxx11::basic_string\"* %432 to %union.anon**\n  store %union.anon* %436, %union.anon** %437, align 8, !tbaa !11\n  %438 = load i8*, i8** %78, align 8, !tbaa !20\n  %439 = icmp eq i8* %438, %77\n  br i1 %439, label %440, label %442\n\n440:                                              ; preds = %435\n  %441 = bitcast %union.anon* %436 to i8*\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(16) %441, i8* noundef nonnull align 8 dereferenceable(16) %77, i64 16, i1 false) #8\n  br label %446\n\n442:                                              ; preds = %435\n  %443 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %432, i64 0, i32 0, i32 0\n  store i8* %438, i8** %443, align 8, !tbaa !20\n  %444 = load i64, i64* %80, align 8, !tbaa !16\n  %445 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %432, i64 0, i32 2, i32 0\n  store i64 %444, i64* %445, align 8, !tbaa !16\n  br label %446\n\n446:                                              ; preds = %440, %442\n  %447 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %432, i64 0, i32 1\n  store i64 1, i64* %447, align 8, !tbaa !13\n  %448 = load %\"class.std::__cxx11::basic_string\"*, %\"class.std::__cxx11::basic_string\"** %25, align 8, !tbaa !17\n  %449 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %448, i64 1\n  store %\"class.std::__cxx11::basic_string\"* %449, %\"class.std::__cxx11::basic_string\"** %25, align 8, !tbaa !17\n  br label %455\n\n450:                                              ; preds = %431\n  invoke void @_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_realloc_insertIJS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_(%\"class.std::vector\"* nonnull align 8 dereferenceable(24) %0, %\"class.std::__cxx11::basic_string\"* %432, %\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %10)\n          to label %451 unwind label %460\n\n451:                                              ; preds = %450\n  %452 = load i8*, i8** %78, align 8, !tbaa !20\n  %453 = icmp eq i8* %452, %77\n  br i1 %453, label %455, label %454\n\n454:                                              ; preds = %451\n  call void @_ZdlPv(i8* %452) #8\n  br label %455\n\n455:                                              ; preds = %446, %451, %454\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %74) #8\n  %456 = load float*, float** %17, align 8, !tbaa !8\n  %457 = getelementptr inbounds float, float* %456, i64 %139\n  %458 = load float, float* %457, align 4, !tbaa !9\n  %459 = fpext float %458 to double\n  br label %466\n\n460:                                              ; preds = %450\n  %461 = landingpad { i8*, i32 }\n          cleanup\n  %462 = load i8*, i8** %78, align 8, !tbaa !20\n  %463 = icmp eq i8* %462, %77\n  br i1 %463, label %465, label %464\n\n464:                                              ; preds = %460\n  call void @_ZdlPv(i8* %462) #8\n  br label %465\n\n465:                                              ; preds = %464, %460\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %74) #8\n  br label %675\n\n466:                                              ; preds = %455, %425\n  %467 = phi double [ %459, %455 ], [ %426, %425 ]\n  %468 = phi float* [ %456, %455 ], [ %427, %425 ]\n  %469 = fcmp ule double %467, 1.300100e+00\n  %470 = fcmp ugt double %467, 1.700100e+00\n  %471 = or i1 %469, %470\n  br i1 %471, label %507, label %472\n\n472:                                              ; preds = %466\n  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %81) #8\n  store %union.anon* %82, %union.anon** %83, align 8, !tbaa !11\n  store i16 11587, i16* %85, align 8\n  store i64 2, i64* %87, align 8, !tbaa !13\n  store i8 0, i8* %132, align 2, !tbaa !16\n  %473 = load %\"class.std::__cxx11::basic_string\"*, %\"class.std::__cxx11::basic_string\"** %25, align 8, !tbaa !17\n  %474 = load %\"class.std::__cxx11::basic_string\"*, %\"class.std::__cxx11::basic_string\"** %26, align 8, !tbaa !19\n  %475 = icmp eq %\"class.std::__cxx11::basic_string\"* %473, %474\n  br i1 %475, label %491, label %476\n\n476:                                              ; preds = %472\n  %477 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %473, i64 0, i32 2\n  %478 = bitcast %\"class.std::__cxx11::basic_string\"* %473 to %union.anon**\n  store %union.anon* %477, %union.anon** %478, align 8, !tbaa !11\n  %479 = load i8*, i8** %86, align 8, !tbaa !20\n  %480 = icmp eq i8* %479, %84\n  br i1 %480, label %481, label %483\n\n481:                                              ; preds = %476\n  %482 = bitcast %union.anon* %477 to i8*\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(16) %482, i8* noundef nonnull align 8 dereferenceable(16) %84, i64 16, i1 false) #8\n  br label %487\n\n483:                                              ; preds = %476\n  %484 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %473, i64 0, i32 0, i32 0\n  store i8* %479, i8** %484, align 8, !tbaa !20\n  %485 = load i64, i64* %88, align 8, !tbaa !16\n  %486 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %473, i64 0, i32 2, i32 0\n  store i64 %485, i64* %486, align 8, !tbaa !16\n  br label %487\n\n487:                                              ; preds = %481, %483\n  %488 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %473, i64 0, i32 1\n  store i64 2, i64* %488, align 8, !tbaa !13\n  %489 = load %\"class.std::__cxx11::basic_string\"*, %\"class.std::__cxx11::basic_string\"** %25, align 8, !tbaa !17\n  %490 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %489, i64 1\n  store %\"class.std::__cxx11::basic_string\"* %490, %\"class.std::__cxx11::basic_string\"** %25, align 8, !tbaa !17\n  br label %496\n\n491:                                              ; preds = %472\n  invoke void @_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_realloc_insertIJS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_(%\"class.std::vector\"* nonnull align 8 dereferenceable(24) %0, %\"class.std::__cxx11::basic_string\"* %473, %\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %11)\n          to label %492 unwind label %501\n\n492:                                              ; preds = %491\n  %493 = load i8*, i8** %86, align 8, !tbaa !20\n  %494 = icmp eq i8* %493, %84\n  br i1 %494, label %496, label %495\n\n495:                                              ; preds = %492\n  call void @_ZdlPv(i8* %493) #8\n  br label %496\n\n496:                                              ; preds = %487, %492, %495\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %81) #8\n  %497 = load float*, float** %17, align 8, !tbaa !8\n  %498 = getelementptr inbounds float, float* %497, i64 %139\n  %499 = load float, float* %498, align 4, !tbaa !9\n  %500 = fpext float %499 to double\n  br label %507\n\n501:                                              ; preds = %491\n  %502 = landingpad { i8*, i32 }\n          cleanup\n  %503 = load i8*, i8** %86, align 8, !tbaa !20\n  %504 = icmp eq i8* %503, %84\n  br i1 %504, label %506, label %505\n\n505:                                              ; preds = %501\n  call void @_ZdlPv(i8* %503) #8\n  br label %506\n\n506:                                              ; preds = %505, %501\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %81) #8\n  br label %675\n\n507:                                              ; preds = %496, %466\n  %508 = phi double [ %500, %496 ], [ %467, %466 ]\n  %509 = phi float* [ %497, %496 ], [ %468, %466 ]\n  %510 = fcmp ule double %508, 1.000100e+00\n  %511 = fcmp ugt double %508, 1.300100e+00\n  %512 = or i1 %510, %511\n  br i1 %512, label %548, label %513\n\n513:                                              ; preds = %507\n  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %89) #8\n  store %union.anon* %90, %union.anon** %91, align 8, !tbaa !11\n  store i16 11076, i16* %93, align 8\n  store i64 2, i64* %95, align 8, !tbaa !13\n  store i8 0, i8* %133, align 2, !tbaa !16\n  %514 = load %\"class.std::__cxx11::basic_string\"*, %\"class.std::__cxx11::basic_string\"** %25, align 8, !tbaa !17\n  %515 = load %\"class.std::__cxx11::basic_string\"*, %\"class.std::__cxx11::basic_string\"** %26, align 8, !tbaa !19\n  %516 = icmp eq %\"class.std::__cxx11::basic_string\"* %514, %515\n  br i1 %516, label %532, label %517\n\n517:                                              ; preds = %513\n  %518 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %514, i64 0, i32 2\n  %519 = bitcast %\"class.std::__cxx11::basic_string\"* %514 to %union.anon**\n  store %union.anon* %518, %union.anon** %519, align 8, !tbaa !11\n  %520 = load i8*, i8** %94, align 8, !tbaa !20\n  %521 = icmp eq i8* %520, %92\n  br i1 %521, label %522, label %524\n\n522:                                              ; preds = %517\n  %523 = bitcast %union.anon* %518 to i8*\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(16) %523, i8* noundef nonnull align 8 dereferenceable(16) %92, i64 16, i1 false) #8\n  br label %528\n\n524:                                              ; preds = %517\n  %525 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %514, i64 0, i32 0, i32 0\n  store i8* %520, i8** %525, align 8, !tbaa !20\n  %526 = load i64, i64* %96, align 8, !tbaa !16\n  %527 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %514, i64 0, i32 2, i32 0\n  store i64 %526, i64* %527, align 8, !tbaa !16\n  br label %528\n\n528:                                              ; preds = %522, %524\n  %529 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %514, i64 0, i32 1\n  store i64 2, i64* %529, align 8, !tbaa !13\n  %530 = load %\"class.std::__cxx11::basic_string\"*, %\"class.std::__cxx11::basic_string\"** %25, align 8, !tbaa !17\n  %531 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %530, i64 1\n  store %\"class.std::__cxx11::basic_string\"* %531, %\"class.std::__cxx11::basic_string\"** %25, align 8, !tbaa !17\n  br label %537\n\n532:                                              ; preds = %513\n  invoke void @_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_realloc_insertIJS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_(%\"class.std::vector\"* nonnull align 8 dereferenceable(24) %0, %\"class.std::__cxx11::basic_string\"* %514, %\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %12)\n          to label %533 unwind label %542\n\n533:                                              ; preds = %532\n  %534 = load i8*, i8** %94, align 8, !tbaa !20\n  %535 = icmp eq i8* %534, %92\n  br i1 %535, label %537, label %536\n\n536:                                              ; preds = %533\n  call void @_ZdlPv(i8* %534) #8\n  br label %537\n\n537:                                              ; preds = %528, %533, %536\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %89) #8\n  %538 = load float*, float** %17, align 8, !tbaa !8\n  %539 = getelementptr inbounds float, float* %538, i64 %139\n  %540 = load float, float* %539, align 4, !tbaa !9\n  %541 = fpext float %540 to double\n  br label %548\n\n542:                                              ; preds = %532\n  %543 = landingpad { i8*, i32 }\n          cleanup\n  %544 = load i8*, i8** %94, align 8, !tbaa !20\n  %545 = icmp eq i8* %544, %92\n  br i1 %545, label %547, label %546\n\n546:                                              ; preds = %542\n  call void @_ZdlPv(i8* %544) #8\n  br label %547\n\n547:                                              ; preds = %546, %542\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %89) #8\n  br label %675\n\n548:                                              ; preds = %537, %507\n  %549 = phi double [ %541, %537 ], [ %508, %507 ]\n  %550 = phi float* [ %538, %537 ], [ %509, %507 ]\n  %551 = fcmp ule double %549, 7.001000e-01\n  %552 = fcmp ugt double %549, 1.000100e+00\n  %553 = or i1 %551, %552\n  br i1 %553, label %589, label %554\n\n554:                                              ; preds = %548\n  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %97) #8\n  store %union.anon* %98, %union.anon** %99, align 8, !tbaa !11\n  store i8 68, i8* %100, align 8, !tbaa !16\n  store i64 1, i64* %102, align 8, !tbaa !13\n  store i8 0, i8* %134, align 1, !tbaa !16\n  %555 = load %\"class.std::__cxx11::basic_string\"*, %\"class.std::__cxx11::basic_string\"** %25, align 8, !tbaa !17\n  %556 = load %\"class.std::__cxx11::basic_string\"*, %\"class.std::__cxx11::basic_string\"** %26, align 8, !tbaa !19\n  %557 = icmp eq %\"class.std::__cxx11::basic_string\"* %555, %556\n  br i1 %557, label %573, label %558\n\n558:                                              ; preds = %554\n  %559 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %555, i64 0, i32 2\n  %560 = bitcast %\"class.std::__cxx11::basic_string\"* %555 to %union.anon**\n  store %union.anon* %559, %union.anon** %560, align 8, !tbaa !11\n  %561 = load i8*, i8** %101, align 8, !tbaa !20\n  %562 = icmp eq i8* %561, %100\n  br i1 %562, label %563, label %565\n\n563:                                              ; preds = %558\n  %564 = bitcast %union.anon* %559 to i8*\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(16) %564, i8* noundef nonnull align 8 dereferenceable(16) %100, i64 16, i1 false) #8\n  br label %569\n\n565:                                              ; preds = %558\n  %566 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %555, i64 0, i32 0, i32 0\n  store i8* %561, i8** %566, align 8, !tbaa !20\n  %567 = load i64, i64* %103, align 8, !tbaa !16\n  %568 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %555, i64 0, i32 2, i32 0\n  store i64 %567, i64* %568, align 8, !tbaa !16\n  br label %569\n\n569:                                              ; preds = %563, %565\n  %570 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %555, i64 0, i32 1\n  store i64 1, i64* %570, align 8, !tbaa !13\n  %571 = load %\"class.std::__cxx11::basic_string\"*, %\"class.std::__cxx11::basic_string\"** %25, align 8, !tbaa !17\n  %572 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %571, i64 1\n  store %\"class.std::__cxx11::basic_string\"* %572, %\"class.std::__cxx11::basic_string\"** %25, align 8, !tbaa !17\n  br label %578\n\n573:                                              ; preds = %554\n  invoke void @_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_realloc_insertIJS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_(%\"class.std::vector\"* nonnull align 8 dereferenceable(24) %0, %\"class.std::__cxx11::basic_string\"* %555, %\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %13)\n          to label %574 unwind label %583\n\n574:                                              ; preds = %573\n  %575 = load i8*, i8** %101, align 8, !tbaa !20\n  %576 = icmp eq i8* %575, %100\n  br i1 %576, label %578, label %577\n\n577:                                              ; preds = %574\n  call void @_ZdlPv(i8* %575) #8\n  br label %578\n\n578:                                              ; preds = %569, %574, %577\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %97) #8\n  %579 = load float*, float** %17, align 8, !tbaa !8\n  %580 = getelementptr inbounds float, float* %579, i64 %139\n  %581 = load float, float* %580, align 4, !tbaa !9\n  %582 = fpext float %581 to double\n  br label %589\n\n583:                                              ; preds = %573\n  %584 = landingpad { i8*, i32 }\n          cleanup\n  %585 = load i8*, i8** %101, align 8, !tbaa !20\n  %586 = icmp eq i8* %585, %100\n  br i1 %586, label %588, label %587\n\n587:                                              ; preds = %583\n  call void @_ZdlPv(i8* %585) #8\n  br label %588\n\n588:                                              ; preds = %587, %583\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %97) #8\n  br label %675\n\n589:                                              ; preds = %578, %548\n  %590 = phi double [ %582, %578 ], [ %549, %548 ]\n  %591 = phi float* [ %579, %578 ], [ %550, %548 ]\n  %592 = fcmp ule double %590, 1.000000e-04\n  %593 = fcmp ugt double %590, 7.001000e-01\n  %594 = or i1 %592, %593\n  br i1 %594, label %630, label %595\n\n595:                                              ; preds = %589\n  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %104) #8\n  store %union.anon* %105, %union.anon** %106, align 8, !tbaa !11\n  store i16 11588, i16* %108, align 8\n  store i64 2, i64* %110, align 8, !tbaa !13\n  store i8 0, i8* %135, align 2, !tbaa !16\n  %596 = load %\"class.std::__cxx11::basic_string\"*, %\"class.std::__cxx11::basic_string\"** %25, align 8, !tbaa !17\n  %597 = load %\"class.std::__cxx11::basic_string\"*, %\"class.std::__cxx11::basic_string\"** %26, align 8, !tbaa !19\n  %598 = icmp eq %\"class.std::__cxx11::basic_string\"* %596, %597\n  br i1 %598, label %614, label %599\n\n599:                                              ; preds = %595\n  %600 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %596, i64 0, i32 2\n  %601 = bitcast %\"class.std::__cxx11::basic_string\"* %596 to %union.anon**\n  store %union.anon* %600, %union.anon** %601, align 8, !tbaa !11\n  %602 = load i8*, i8** %109, align 8, !tbaa !20\n  %603 = icmp eq i8* %602, %107\n  br i1 %603, label %604, label %606\n\n604:                                              ; preds = %599\n  %605 = bitcast %union.anon* %600 to i8*\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(16) %605, i8* noundef nonnull align 8 dereferenceable(16) %107, i64 16, i1 false) #8\n  br label %610\n\n606:                                              ; preds = %599\n  %607 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %596, i64 0, i32 0, i32 0\n  store i8* %602, i8** %607, align 8, !tbaa !20\n  %608 = load i64, i64* %111, align 8, !tbaa !16\n  %609 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %596, i64 0, i32 2, i32 0\n  store i64 %608, i64* %609, align 8, !tbaa !16\n  br label %610\n\n610:                                              ; preds = %604, %606\n  %611 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %596, i64 0, i32 1\n  store i64 2, i64* %611, align 8, !tbaa !13\n  %612 = load %\"class.std::__cxx11::basic_string\"*, %\"class.std::__cxx11::basic_string\"** %25, align 8, !tbaa !17\n  %613 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %612, i64 1\n  store %\"class.std::__cxx11::basic_string\"* %613, %\"class.std::__cxx11::basic_string\"** %25, align 8, !tbaa !17\n  br label %619\n\n614:                                              ; preds = %595\n  invoke void @_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_realloc_insertIJS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_(%\"class.std::vector\"* nonnull align 8 dereferenceable(24) %0, %\"class.std::__cxx11::basic_string\"* %596, %\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %14)\n          to label %615 unwind label %624\n\n615:                                              ; preds = %614\n  %616 = load i8*, i8** %109, align 8, !tbaa !20\n  %617 = icmp eq i8* %616, %107\n  br i1 %617, label %619, label %618\n\n618:                                              ; preds = %615\n  call void @_ZdlPv(i8* %616) #8\n  br label %619\n\n619:                                              ; preds = %610, %615, %618\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %104) #8\n  %620 = load float*, float** %17, align 8, !tbaa !8\n  %621 = getelementptr inbounds float, float* %620, i64 %139\n  %622 = load float, float* %621, align 4, !tbaa !9\n  %623 = fpext float %622 to double\n  br label %630\n\n624:                                              ; preds = %614\n  %625 = landingpad { i8*, i32 }\n          cleanup\n  %626 = load i8*, i8** %109, align 8, !tbaa !20\n  %627 = icmp eq i8* %626, %107\n  br i1 %627, label %629, label %628\n\n628:                                              ; preds = %624\n  call void @_ZdlPv(i8* %626) #8\n  br label %629\n\n629:                                              ; preds = %628, %624\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %104) #8\n  br label %675\n\n630:                                              ; preds = %619, %589\n  %631 = phi double [ %623, %619 ], [ %590, %589 ]\n  %632 = phi float* [ %620, %619 ], [ %591, %589 ]\n  %633 = fcmp ugt double %631, 1.000000e-04\n  br i1 %633, label %666, label %634\n\n634:                                              ; preds = %630\n  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %112) #8\n  store %union.anon* %113, %union.anon** %114, align 8, !tbaa !11\n  store i8 69, i8* %115, align 8, !tbaa !16\n  store i64 1, i64* %117, align 8, !tbaa !13\n  store i8 0, i8* %136, align 1, !tbaa !16\n  %635 = load %\"class.std::__cxx11::basic_string\"*, %\"class.std::__cxx11::basic_string\"** %25, align 8, !tbaa !17\n  %636 = load %\"class.std::__cxx11::basic_string\"*, %\"class.std::__cxx11::basic_string\"** %26, align 8, !tbaa !19\n  %637 = icmp eq %\"class.std::__cxx11::basic_string\"* %635, %636\n  br i1 %637, label %653, label %638\n\n638:                                              ; preds = %634\n  %639 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %635, i64 0, i32 2\n  %640 = bitcast %\"class.std::__cxx11::basic_string\"* %635 to %union.anon**\n  store %union.anon* %639, %union.anon** %640, align 8, !tbaa !11\n  %641 = load i8*, i8** %116, align 8, !tbaa !20\n  %642 = icmp eq i8* %641, %115\n  br i1 %642, label %643, label %645\n\n643:                                              ; preds = %638\n  %644 = bitcast %union.anon* %639 to i8*\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(16) %644, i8* noundef nonnull align 8 dereferenceable(16) %115, i64 16, i1 false) #8\n  br label %649\n\n645:                                              ; preds = %638\n  %646 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %635, i64 0, i32 0, i32 0\n  store i8* %641, i8** %646, align 8, !tbaa !20\n  %647 = load i64, i64* %118, align 8, !tbaa !16\n  %648 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %635, i64 0, i32 2, i32 0\n  store i64 %647, i64* %648, align 8, !tbaa !16\n  br label %649\n\n649:                                              ; preds = %643, %645\n  %650 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %635, i64 0, i32 1\n  store i64 1, i64* %650, align 8, !tbaa !13\n  %651 = load %\"class.std::__cxx11::basic_string\"*, %\"class.std::__cxx11::basic_string\"** %25, align 8, !tbaa !17\n  %652 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %651, i64 1\n  store %\"class.std::__cxx11::basic_string\"* %652, %\"class.std::__cxx11::basic_string\"** %25, align 8, !tbaa !17\n  br label %658\n\n653:                                              ; preds = %634\n  invoke void @_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_realloc_insertIJS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_(%\"class.std::vector\"* nonnull align 8 dereferenceable(24) %0, %\"class.std::__cxx11::basic_string\"* %635, %\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %15)\n          to label %654 unwind label %660\n\n654:                                              ; preds = %653\n  %655 = load i8*, i8** %116, align 8, !tbaa !20\n  %656 = icmp eq i8* %655, %115\n  br i1 %656, label %658, label %657\n\n657:                                              ; preds = %654\n  call void @_ZdlPv(i8* %655) #8\n  br label %658\n\n658:                                              ; preds = %649, %654, %657\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %112) #8\n  %659 = load float*, float** %17, align 8, !tbaa !8\n  br label %666\n\n660:                                              ; preds = %653\n  %661 = landingpad { i8*, i32 }\n          cleanup\n  %662 = load i8*, i8** %116, align 8, !tbaa !20\n  %663 = icmp eq i8* %662, %115\n  br i1 %663, label %665, label %664\n\n664:                                              ; preds = %660\n  call void @_ZdlPv(i8* %662) #8\n  br label %665\n\n665:                                              ; preds = %664, %660\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %112) #8\n  br label %675\n\n666:                                              ; preds = %630, %658\n  %667 = phi float* [ %632, %630 ], [ %659, %658 ]\n  %668 = add nuw i64 %139, 1\n  %669 = load float*, float** %16, align 8, !tbaa !3\n  %670 = ptrtoint float* %669 to i64\n  %671 = ptrtoint float* %667 to i64\n  %672 = sub i64 %670, %671\n  %673 = ashr exact i64 %672, 2\n  %674 = icmp ugt i64 %673, %668\n  br i1 %674, label %137, label %677, !llvm.loop !21\n\n675:                                              ; preds = %665, %629, %588, %547, %506, %465, %424, %383, %342, %301, %260, %219, %178\n  %676 = phi { i8*, i32 } [ %661, %665 ], [ %625, %629 ], [ %584, %588 ], [ %543, %547 ], [ %502, %506 ], [ %461, %465 ], [ %420, %424 ], [ %379, %383 ], [ %338, %342 ], [ %297, %301 ], [ %256, %260 ], [ %215, %219 ], [ %174, %178 ]\n  call void @_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED2Ev(%\"class.std::vector\"* nonnull align 8 dereferenceable(24) %0) #8\n  resume { i8*, i32 } %676\n\n677:                                              ; preds = %666, %2\n  ret void\n}\n\n; Function Attrs: argmemonly mustprogress nofree nounwind willreturn writeonly\ndeclare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1\n\n; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn\ndeclare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2\n\ndeclare dso_local i32 @__gxx_personality_v0(...)\n\n; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn\ndeclare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2\n\n; Function Attrs: nounwind uwtable\ndefine linkonce_odr dso_local void @_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED2Ev(%\"class.std::vector\"* nonnull align 8 dereferenceable(24) %0) unnamed_addr #3 comdat align 2 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {\n  %2 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0, i64 0, i32 0, i32 0, i32 0, i32 0\n  %3 = load %\"class.std::__cxx11::basic_string\"*, %\"class.std::__cxx11::basic_string\"** %2, align 8, !tbaa !23\n  %4 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0, i64 0, i32 0, i32 0, i32 0, i32 1\n  %5 = load %\"class.std::__cxx11::basic_string\"*, %\"class.std::__cxx11::basic_string\"** %4, align 8, !tbaa !17\n  %6 = icmp eq %\"class.std::__cxx11::basic_string\"* %3, %5\n  br i1 %6, label %20, label %7\n\n7:                                                ; preds = %1, %15\n  %8 = phi %\"class.std::__cxx11::basic_string\"* [ %16, %15 ], [ %3, %1 ]\n  %9 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %8, i64 0, i32 0, i32 0\n  %10 = load i8*, i8** %9, align 8, !tbaa !20\n  %11 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %8, i64 0, i32 2\n  %12 = bitcast %union.anon* %11 to i8*\n  %13 = icmp eq i8* %10, %12\n  br i1 %13, label %15, label %14\n\n14:                                               ; preds = %7\n  tail call void @_ZdlPv(i8* %10) #8\n  br label %15\n\n15:                                               ; preds = %14, %7\n  %16 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %8, i64 1\n  %17 = icmp eq %\"class.std::__cxx11::basic_string\"* %16, %5\n  br i1 %17, label %18, label %7, !llvm.loop !24\n\n18:                                               ; preds = %15\n  %19 = load %\"class.std::__cxx11::basic_string\"*, %\"class.std::__cxx11::basic_string\"** %2, align 8, !tbaa !23\n  br label %20\n\n20:                                               ; preds = %18, %1\n  %21 = phi %\"class.std::__cxx11::basic_string\"* [ %19, %18 ], [ %3, %1 ]\n  %22 = icmp eq %\"class.std::__cxx11::basic_string\"* %21, null\n  br i1 %22, label %25, label %23\n\n23:                                               ; preds = %20\n  %24 = bitcast %\"class.std::__cxx11::basic_string\"* %21 to i8*\n  tail call void @_ZdlPv(i8* nonnull %24) #8\n  br label %25\n\n25:                                               ; preds = %20, %23\n  ret void\n}\n\n; Function Attrs: nobuiltin nounwind\ndeclare dso_local void @_ZdlPv(i8*) local_unnamed_addr #4\n\n; Function Attrs: uwtable\ndefine linkonce_odr dso_local void @_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_realloc_insertIJS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_(%\"class.std::vector\"* nonnull align 8 dereferenceable(24) %0, %\"class.std::__cxx11::basic_string\"* %1, %\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %2) local_unnamed_addr #0 comdat align 2 personality i32 (...)* @__gxx_personality_v0 {\n  %4 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0, i64 0, i32 0, i32 0, i32 0, i32 1\n  %5 = load %\"class.std::__cxx11::basic_string\"*, %\"class.std::__cxx11::basic_string\"** %4, align 8, !tbaa !17\n  %6 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0, i64 0, i32 0, i32 0, i32 0, i32 0\n  %7 = load %\"class.std::__cxx11::basic_string\"*, %\"class.std::__cxx11::basic_string\"** %6, align 8, !tbaa !23\n  %8 = ptrtoint %\"class.std::__cxx11::basic_string\"* %5 to i64\n  %9 = ptrtoint %\"class.std::__cxx11::basic_string\"* %7 to i64\n  %10 = sub i64 %8, %9\n  %11 = ashr exact i64 %10, 5\n  %12 = icmp eq i64 %10, 9223372036854775776\n  br i1 %12, label %13, label %14\n\n13:                                               ; preds = %3\n  tail call void @_ZSt20__throw_length_errorPKc(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.13, i64 0, i64 0)) #9\n  unreachable\n\n14:                                               ; preds = %3\n  %15 = icmp eq i64 %10, 0\n  %16 = select i1 %15, i64 1, i64 %11\n  %17 = add nsw i64 %16, %11\n  %18 = icmp ult i64 %17, %11\n  %19 = icmp ugt i64 %17, 288230376151711743\n  %20 = or i1 %18, %19\n  %21 = select i1 %20, i64 288230376151711743, i64 %17\n  %22 = ptrtoint %\"class.std::__cxx11::basic_string\"* %1 to i64\n  %23 = sub i64 %22, %9\n  %24 = ashr exact i64 %23, 5\n  %25 = icmp eq i64 %21, 0\n  br i1 %25, label %30, label %26\n\n26:                                               ; preds = %14\n  %27 = shl nuw nsw i64 %21, 5\n  %28 = tail call noalias nonnull i8* @_Znwm(i64 %27) #10\n  %29 = bitcast i8* %28 to %\"class.std::__cxx11::basic_string\"*\n  br label %30\n\n30:                                               ; preds = %14, %26\n  %31 = phi %\"class.std::__cxx11::basic_string\"* [ %29, %26 ], [ null, %14 ]\n  %32 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %31, i64 %24\n  %33 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %31, i64 %24, i32 2\n  %34 = bitcast %\"class.std::__cxx11::basic_string\"* %32 to %union.anon**\n  store %union.anon* %33, %union.anon** %34, align 8, !tbaa !11\n  %35 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %2, i64 0, i32 0, i32 0\n  %36 = load i8*, i8** %35, align 8, !tbaa !20\n  %37 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %2, i64 0, i32 2\n  %38 = bitcast %union.anon* %37 to i8*\n  %39 = icmp eq i8* %36, %38\n  br i1 %39, label %40, label %42\n\n40:                                               ; preds = %30\n  %41 = bitcast %union.anon* %33 to i8*\n  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(16) %41, i8* noundef nonnull align 8 dereferenceable(16) %36, i64 16, i1 false) #8\n  br label %47\n\n42:                                               ; preds = %30\n  %43 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %32, i64 0, i32 0, i32 0\n  store i8* %36, i8** %43, align 8, !tbaa !20\n  %44 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %2, i64 0, i32 2, i32 0\n  %45 = load i64, i64* %44, align 8, !tbaa !16\n  %46 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %31, i64 %24, i32 2, i32 0\n  store i64 %45, i64* %46, align 8, !tbaa !16\n  br label %47\n\n47:                                               ; preds = %40, %42\n  %48 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %2, i64 0, i32 1\n  %49 = load i64, i64* %48, align 8, !tbaa !13\n  %50 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %31, i64 %24, i32 1\n  store i64 %49, i64* %50, align 8, !tbaa !13\n  %51 = bitcast %\"class.std::__cxx11::basic_string\"* %2 to %union.anon**\n  store %union.anon* %37, %union.anon** %51, align 8, !tbaa !20\n  store i64 0, i64* %48, align 8, !tbaa !13\n  store i8 0, i8* %38, align 8, !tbaa !16\n  %52 = icmp eq %\"class.std::__cxx11::basic_string\"* %7, %1\n  br i1 %52, label %78, label %53\n\n53:                                               ; preds = %47, %70\n  %54 = phi %\"class.std::__cxx11::basic_string\"* [ %76, %70 ], [ %31, %47 ]\n  %55 = phi %\"class.std::__cxx11::basic_string\"* [ %75, %70 ], [ %7, %47 ]\n  %56 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %54, i64 0, i32 2\n  %57 = bitcast %\"class.std::__cxx11::basic_string\"* %54 to %union.anon**\n  store %union.anon* %56, %union.anon** %57, align 8, !tbaa !11\n  %58 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %55, i64 0, i32 0, i32 0\n  %59 = load i8*, i8** %58, align 8, !tbaa !20\n  %60 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %55, i64 0, i32 2\n  %61 = bitcast %union.anon* %60 to i8*\n  %62 = icmp eq i8* %59, %61\n  br i1 %62, label %63, label %65\n\n63:                                               ; preds = %53\n  %64 = bitcast %union.anon* %56 to i8*\n  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(16) %64, i8* noundef nonnull align 8 dereferenceable(16) %59, i64 16, i1 false) #8\n  br label %70\n\n65:                                               ; preds = %53\n  %66 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %54, i64 0, i32 0, i32 0\n  store i8* %59, i8** %66, align 8, !tbaa !20\n  %67 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %55, i64 0, i32 2, i32 0\n  %68 = load i64, i64* %67, align 8, !tbaa !16\n  %69 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %54, i64 0, i32 2, i32 0\n  store i64 %68, i64* %69, align 8, !tbaa !16\n  br label %70\n\n70:                                               ; preds = %65, %63\n  %71 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %55, i64 0, i32 1\n  %72 = load i64, i64* %71, align 8, !tbaa !13\n  %73 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %54, i64 0, i32 1\n  store i64 %72, i64* %73, align 8, !tbaa !13\n  %74 = bitcast %\"class.std::__cxx11::basic_string\"* %55 to %union.anon**\n  store %union.anon* %60, %union.anon** %74, align 8, !tbaa !20\n  store i64 0, i64* %71, align 8, !tbaa !13\n  store i8 0, i8* %61, align 8, !tbaa !16\n  %75 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %55, i64 1\n  %76 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %54, i64 1\n  %77 = icmp eq %\"class.std::__cxx11::basic_string\"* %75, %1\n  br i1 %77, label %78, label %53, !llvm.loop !25\n\n78:                                               ; preds = %70, %47\n  %79 = phi %\"class.std::__cxx11::basic_string\"* [ %31, %47 ], [ %76, %70 ]\n  %80 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %79, i64 1\n  %81 = icmp eq %\"class.std::__cxx11::basic_string\"* %5, %1\n  br i1 %81, label %107, label %82\n\n82:                                               ; preds = %78, %99\n  %83 = phi %\"class.std::__cxx11::basic_string\"* [ %105, %99 ], [ %80, %78 ]\n  %84 = phi %\"class.std::__cxx11::basic_string\"* [ %104, %99 ], [ %1, %78 ]\n  %85 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %83, i64 0, i32 2\n  %86 = bitcast %\"class.std::__cxx11::basic_string\"* %83 to %union.anon**\n  store %union.anon* %85, %union.anon** %86, align 8, !tbaa !11\n  %87 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %84, i64 0, i32 0, i32 0\n  %88 = load i8*, i8** %87, align 8, !tbaa !20\n  %89 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %84, i64 0, i32 2\n  %90 = bitcast %union.anon* %89 to i8*\n  %91 = icmp eq i8* %88, %90\n  br i1 %91, label %92, label %94\n\n92:                                               ; preds = %82\n  %93 = bitcast %union.anon* %85 to i8*\n  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(16) %93, i8* noundef nonnull align 8 dereferenceable(16) %88, i64 16, i1 false) #8\n  br label %99\n\n94:                                               ; preds = %82\n  %95 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %83, i64 0, i32 0, i32 0\n  store i8* %88, i8** %95, align 8, !tbaa !20\n  %96 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %84, i64 0, i32 2, i32 0\n  %97 = load i64, i64* %96, align 8, !tbaa !16\n  %98 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %83, i64 0, i32 2, i32 0\n  store i64 %97, i64* %98, align 8, !tbaa !16\n  br label %99\n\n99:                                               ; preds = %94, %92\n  %100 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %84, i64 0, i32 1\n  %101 = load i64, i64* %100, align 8, !tbaa !13\n  %102 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %83, i64 0, i32 1\n  store i64 %101, i64* %102, align 8, !tbaa !13\n  %103 = bitcast %\"class.std::__cxx11::basic_string\"* %84 to %union.anon**\n  store %union.anon* %89, %union.anon** %103, align 8, !tbaa !20\n  store i64 0, i64* %100, align 8, !tbaa !13\n  store i8 0, i8* %90, align 8, !tbaa !16\n  %104 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %84, i64 1\n  %105 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %83, i64 1\n  %106 = icmp eq %\"class.std::__cxx11::basic_string\"* %104, %5\n  br i1 %106, label %107, label %82, !llvm.loop !25\n\n107:                                              ; preds = %99, %78\n  %108 = phi %\"class.std::__cxx11::basic_string\"* [ %80, %78 ], [ %105, %99 ]\n  %109 = icmp eq %\"class.std::__cxx11::basic_string\"* %7, null\n  br i1 %109, label %112, label %110\n\n110:                                              ; preds = %107\n  %111 = bitcast %\"class.std::__cxx11::basic_string\"* %7 to i8*\n  tail call void @_ZdlPv(i8* nonnull %111) #8\n  br label %112\n\n112:                                              ; preds = %107, %110\n  %113 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0, i64 0, i32 0, i32 0, i32 0, i32 2\n  store %\"class.std::__cxx11::basic_string\"* %31, %\"class.std::__cxx11::basic_string\"** %6, align 8, !tbaa !23\n  store %\"class.std::__cxx11::basic_string\"* %108, %\"class.std::__cxx11::basic_string\"** %4, align 8, !tbaa !17\n  %114 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %31, i64 %21\n  store %\"class.std::__cxx11::basic_string\"* %114, %\"class.std::__cxx11::basic_string\"** %113, align 8, !tbaa !19\n  ret void\n}\n\n; Function Attrs: argmemonly mustprogress nofree nounwind willreturn\ndeclare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #5\n\n; Function Attrs: noreturn\ndeclare dso_local void @_ZSt20__throw_length_errorPKc(i8*) local_unnamed_addr #6\n\n; Function Attrs: nobuiltin allocsize(0)\ndeclare dso_local nonnull i8* @_Znwm(i64) local_unnamed_addr #7\n\nattributes #0 = { uwtable \"frame-pointer\"=\"none\" \"min-legal-vector-width\"=\"0\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #1 = { argmemonly mustprogress nofree nounwind willreturn writeonly }\nattributes #2 = { argmemonly mustprogress nofree nosync nounwind willreturn }\nattributes #3 = { nounwind uwtable \"frame-pointer\"=\"none\" \"min-legal-vector-width\"=\"0\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #4 = { nobuiltin nounwind \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #5 = { argmemonly mustprogress nofree nounwind willreturn }\nattributes #6 = { noreturn \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #7 = { nobuiltin allocsize(0) \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #8 = { nounwind }\nattributes #9 = { noreturn }\nattributes #10 = { allocsize(0) }\n\n!llvm.module.flags = !{!0, !1}\n!llvm.ident = !{!2}\n\n!0 = !{i32 1, !\"wchar_size\", i32 4}\n!1 = !{i32 7, !\"uwtable\", i32 1}\n!2 = !{!\"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)\"}\n!3 = !{!4, !5, i64 8}\n!4 = !{!\"_ZTSNSt12_Vector_baseIfSaIfEE17_Vector_impl_dataE\", !5, i64 0, !5, i64 8, !5, i64 16}\n!5 = !{!\"any pointer\", !6, i64 0}\n!6 = !{!\"omnipotent char\", !7, i64 0}\n!7 = !{!\"Simple C++ TBAA\"}\n!8 = !{!4, !5, i64 0}\n!9 = !{!10, !10, i64 0}\n!10 = !{!\"float\", !6, i64 0}\n!11 = !{!12, !5, i64 0}\n!12 = !{!\"_ZTSNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderE\", !5, i64 0}\n!13 = !{!14, !15, i64 8}\n!14 = !{!\"_ZTSNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE\", !12, i64 0, !15, i64 8, !6, i64 16}\n!15 = !{!\"long\", !6, i64 0}\n!16 = !{!6, !6, i64 0}\n!17 = !{!18, !5, i64 8}\n!18 = !{!\"_ZTSNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_Vector_impl_dataE\", !5, i64 0, !5, i64 8, !5, i64 16}\n!19 = !{!18, !5, i64 16}\n!20 = !{!14, !5, i64 0}\n!21 = distinct !{!21, !22}\n!22 = !{!\"llvm.loop.mustprogress\"}\n!23 = !{!18, !5, i64 0}\n!24 = distinct !{!24, !22}\n!25 = distinct !{!25, !22}\n", "target": "This is the targeted source code:\n/*\nIt is the last week of the semester and the teacher has to give the grades\nto students. The teacher has been making her own algorithm for grading.\nThe only problem is, she has lost the code she used for grading.\nShe has given you a vector of GPAs for some students and you have to write \na function that can output a vector of letter grades using the following table:\n         GPA       |    Letter grade\n          4.0                A+\n        > 3.7                A \n        > 3.3                A- \n        > 3.0                B+\n        > 2.7                B \n        > 2.3                B-\n        > 2.0                C+\n        > 1.7                C\n        > 1.3                C-\n        > 1.0                D+ \n        > 0.7                D \n        > 0.0                D-\n          0.0                E\n\n\nExample:\ngrade_equation({4.0, 3, 1.7, 2, 3.5}) ==> {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> numerical_letter_grade(vector<float> grades){\n\n    vector<string> out={};\n    for (int i=0;i<grades.size();i++)\n    {\n        if (grades[i]>=3.9999) out.push_back(\"A+\");\n        if (grades[i]>3.7001 and grades[i]<3.9999) out.push_back(\"A\");\n        if (grades[i]>3.3001 and grades[i]<=3.7001) out.push_back(\"A-\");\n        if (grades[i]>3.0001 and grades[i]<=3.3001) out.push_back(\"B+\");\n        if (grades[i]>2.7001 and grades[i]<=3.0001) out.push_back(\"B\");\n        if (grades[i]>2.3001 and grades[i]<=2.7001) out.push_back(\"B-\");\n        if (grades[i]>2.0001 and grades[i]<=2.3001) out.push_back(\"C+\");\n        if (grades[i]>1.7001 and grades[i]<=2.0001) out.push_back(\"C\");\n        if (grades[i]>1.3001 and grades[i]<=1.7001) out.push_back(\"C-\");\n        if (grades[i]>1.0001 and grades[i]<=1.3001) out.push_back(\"D+\");\n        if (grades[i]>0.7001 and grades[i]<=1.0001) out.push_back(\"D\");\n        if (grades[i]>0.0001 and grades[i]<=0.7001) out.push_back(\"D-\");\n        if (grades[i]<=0.0001) out.push_back(\"E\");\n    }\n    return out;\n}\n"}
{"input": "Convert this to C++:\n; ModuleID = '../../Human_xBenchmarks_164/CPP_82/CPP_82.cpp'\nsource_filename = \"../../Human_xBenchmarks_164/CPP_82/CPP_82.cpp\"\ntarget datalayout = \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\ntarget triple = \"x86_64-unknown-linux-gnu\"\n\n%\"class.std::__cxx11::basic_string\" = type { %\"struct.std::__cxx11::basic_string<char>::_Alloc_hider\", i64, %union.anon }\n%\"struct.std::__cxx11::basic_string<char>::_Alloc_hider\" = type { i8* }\n%union.anon = type { i64, [8 x i8] }\n\n; Function Attrs: mustprogress nofree norecurse nosync nounwind readonly uwtable willreturn\ndefine dso_local zeroext i1 @_Z12prime_lengthNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE(%\"class.std::__cxx11::basic_string\"* nocapture readonly %0) local_unnamed_addr #0 {\n  %2 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 1\n  %3 = load i64, i64* %2, align 8, !tbaa !3\n  %4 = trunc i64 %3 to i32\n  %5 = icmp slt i32 %4, 2\n  br i1 %5, label %18, label %6\n\n6:                                                ; preds = %1\n  %7 = icmp slt i32 %4, 4\n  br i1 %7, label %18, label %8\n\n8:                                                ; preds = %6, %8\n  %9 = phi i32 [ %12, %8 ], [ 2, %6 ]\n  %10 = srem i32 %4, %9\n  %11 = icmp eq i32 %10, 0\n  %12 = add nuw nsw i32 %9, 1\n  %13 = mul nsw i32 %12, %12\n  %14 = icmp sgt i32 %13, %4\n  %15 = select i1 %11, i1 true, i1 %14\n  br i1 %15, label %16, label %8, !llvm.loop !10\n\n16:                                               ; preds = %8\n  %17 = xor i1 %11, true\n  br label %18\n\n18:                                               ; preds = %16, %6, %1\n  %19 = phi i1 [ false, %1 ], [ true, %6 ], [ %17, %16 ]\n  ret i1 %19\n}\n\nattributes #0 = { mustprogress nofree norecurse nosync nounwind readonly uwtable willreturn \"frame-pointer\"=\"none\" \"min-legal-vector-width\"=\"0\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\n\n!llvm.module.flags = !{!0, !1}\n!llvm.ident = !{!2}\n\n!0 = !{i32 1, !\"wchar_size\", i32 4}\n!1 = !{i32 7, !\"uwtable\", i32 1}\n!2 = !{!\"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)\"}\n!3 = !{!4, !9, i64 8}\n!4 = !{!\"_ZTSNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE\", !5, i64 0, !9, i64 8, !7, i64 16}\n!5 = !{!\"_ZTSNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderE\", !6, i64 0}\n!6 = !{!\"any pointer\", !7, i64 0}\n!7 = !{!\"omnipotent char\", !8, i64 0}\n!8 = !{!\"Simple C++ TBAA\"}\n!9 = !{!\"long\", !7, i64 0}\n!10 = distinct !{!10, !11}\n!11 = !{!\"llvm.loop.mustprogress\"}\n", "target": "This is the targeted source code:\n/*\nWrite a function that takes a string and returns true if the string\nlength is a prime number or false otherwise\nExamples\nprime_length(\"Hello\") == true\nprime_length(\"abcdcba\") == true\nprime_length(\"kittens\") == true\nprime_length(\"orange\") == false\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool prime_length(string str){\n\n    int l,i;\n    l=str.length();\n    if (l<2) return false;\n    for (i=2;i*i<=l;i++)\n    if (l%i==0) return false;\n    return true;\n}\n"}
{"input": "Convert this to C++:\n; ModuleID = '../../Human_xBenchmarks_164/CPP_83/CPP_83.cpp'\nsource_filename = \"../../Human_xBenchmarks_164/CPP_83/CPP_83.cpp\"\ntarget datalayout = \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\ntarget triple = \"x86_64-unknown-linux-gnu\"\n\n; Function Attrs: mustprogress nofree norecurse nosync nounwind readnone uwtable willreturn\ndefine dso_local i32 @_Z15starts_one_endsi(i32 %0) local_unnamed_addr #0 {\n  %2 = icmp slt i32 %0, 1\n  br i1 %2, label %57, label %3\n\n3:                                                ; preds = %1\n  %4 = icmp eq i32 %0, 1\n  br i1 %4, label %57, label %5\n\n5:                                                ; preds = %3\n  %6 = icmp sgt i32 %0, 2\n  br i1 %6, label %7, label %57\n\n7:                                                ; preds = %5\n  %8 = add i32 %0, -2\n  %9 = icmp ult i32 %8, 8\n  br i1 %9, label %48, label %10\n\n10:                                               ; preds = %7\n  %11 = and i32 %8, -8\n  %12 = or i32 %11, 2\n  %13 = add i32 %11, -8\n  %14 = lshr exact i32 %13, 3\n  %15 = add nuw nsw i32 %14, 1\n  %16 = and i32 %15, 7\n  %17 = icmp ult i32 %13, 56\n  br i1 %17, label %28, label %18\n\n18:                                               ; preds = %10\n  %19 = and i32 %15, 1073741816\n  br label %20\n\n20:                                               ; preds = %20, %18\n  %21 = phi <4 x i32> [ <i32 18, i32 1, i32 1, i32 1>, %18 ], [ %24, %20 ]\n  %22 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %18 ], [ %25, %20 ]\n  %23 = phi i32 [ %19, %18 ], [ %26, %20 ]\n  %24 = mul <4 x i32> %21, <i32 100000000, i32 100000000, i32 100000000, i32 100000000>\n  %25 = mul <4 x i32> %22, <i32 100000000, i32 100000000, i32 100000000, i32 100000000>\n  %26 = add i32 %23, -8\n  %27 = icmp eq i32 %26, 0\n  br i1 %27, label %28, label %20, !llvm.loop !3\n\n28:                                               ; preds = %20, %10\n  %29 = phi <4 x i32> [ undef, %10 ], [ %24, %20 ]\n  %30 = phi <4 x i32> [ undef, %10 ], [ %25, %20 ]\n  %31 = phi <4 x i32> [ <i32 18, i32 1, i32 1, i32 1>, %10 ], [ %24, %20 ]\n  %32 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %10 ], [ %25, %20 ]\n  %33 = icmp eq i32 %16, 0\n  br i1 %33, label %42, label %34\n\n34:                                               ; preds = %28, %34\n  %35 = phi <4 x i32> [ %38, %34 ], [ %31, %28 ]\n  %36 = phi <4 x i32> [ %39, %34 ], [ %32, %28 ]\n  %37 = phi i32 [ %40, %34 ], [ %16, %28 ]\n  %38 = mul <4 x i32> %35, <i32 10, i32 10, i32 10, i32 10>\n  %39 = mul <4 x i32> %36, <i32 10, i32 10, i32 10, i32 10>\n  %40 = add i32 %37, -1\n  %41 = icmp eq i32 %40, 0\n  br i1 %41, label %42, label %34, !llvm.loop !6\n\n42:                                               ; preds = %34, %28\n  %43 = phi <4 x i32> [ %29, %28 ], [ %38, %34 ]\n  %44 = phi <4 x i32> [ %30, %28 ], [ %39, %34 ]\n  %45 = mul <4 x i32> %44, %43\n  %46 = call i32 @llvm.vector.reduce.mul.v4i32(<4 x i32> %45)\n  %47 = icmp eq i32 %8, %11\n  br i1 %47, label %57, label %48\n\n48:                                               ; preds = %7, %42\n  %49 = phi i32 [ 2, %7 ], [ %12, %42 ]\n  %50 = phi i32 [ 18, %7 ], [ %46, %42 ]\n  br label %51\n\n51:                                               ; preds = %48, %51\n  %52 = phi i32 [ %55, %51 ], [ %49, %48 ]\n  %53 = phi i32 [ %54, %51 ], [ %50, %48 ]\n  %54 = mul nsw i32 %53, 10\n  %55 = add nuw nsw i32 %52, 1\n  %56 = icmp eq i32 %55, %0\n  br i1 %56, label %57, label %51, !llvm.loop !8\n\n57:                                               ; preds = %51, %42, %5, %3, %1\n  %58 = phi i32 [ 0, %1 ], [ 1, %3 ], [ 18, %5 ], [ %46, %42 ], [ %54, %51 ]\n  ret i32 %58\n}\n\n; Function Attrs: nofree nosync nounwind readnone willreturn\ndeclare i32 @llvm.vector.reduce.mul.v4i32(<4 x i32>) #1\n\nattributes #0 = { mustprogress nofree norecurse nosync nounwind readnone uwtable willreturn \"frame-pointer\"=\"none\" \"min-legal-vector-width\"=\"0\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #1 = { nofree nosync nounwind readnone willreturn }\n\n!llvm.module.flags = !{!0, !1}\n!llvm.ident = !{!2}\n\n!0 = !{i32 1, !\"wchar_size\", i32 4}\n!1 = !{i32 7, !\"uwtable\", i32 1}\n!2 = !{!\"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)\"}\n!3 = distinct !{!3, !4, !5}\n!4 = !{!\"llvm.loop.mustprogress\"}\n!5 = !{!\"llvm.loop.isvectorized\", i32 1}\n!6 = distinct !{!6, !7}\n!7 = !{!\"llvm.loop.unroll.disable\"}\n!8 = distinct !{!8, !4, !9, !5}\n!9 = !{!\"llvm.loop.unroll.runtime.disable\"}\n", "target": "This is the targeted source code:\n/*\nGiven a positive integer n, return the count of the numbers of n-digit\npositive integers that start or end with 1.\n*/\n#include<stdio.h>\nusing namespace std;\nint starts_one_ends(int n){\n\n    if (n<1) return 0;\n    if (n==1) return 1;\n    int out=18;\n    for (int i=2;i<n;i++)\n        out=out*10;\n    return out;\n}\n"}
{"input": "Convert this to C++:\n; ModuleID = '../../Human_xBenchmarks_164/CPP_84/CPP_84.cpp'\nsource_filename = \"../../Human_xBenchmarks_164/CPP_84/CPP_84.cpp\"\ntarget datalayout = \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\ntarget triple = \"x86_64-unknown-linux-gnu\"\n\n%\"class.std::__cxx11::basic_string\" = type { %\"struct.std::__cxx11::basic_string<char>::_Alloc_hider\", i64, %union.anon }\n%\"struct.std::__cxx11::basic_string<char>::_Alloc_hider\" = type { i8* }\n%union.anon = type { i64, [8 x i8] }\n%struct.__va_list_tag = type { i32, i32, i8*, i8* }\n\n$_ZN9__gnu_cxx12__to_xstringINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcEET_PFiPT0_mPKS8_P13__va_list_tagEmSB_z = comdat any\n\n@.str.1 = private unnamed_addr constant [3 x i8] c\"%d\\00\", align 1\n\n; Function Attrs: uwtable\ndefine dso_local void @_Z5solveB5cxx11i(%\"class.std::__cxx11::basic_string\"* noalias sret(%\"class.std::__cxx11::basic_string\") align 8 %0, i32 %1) local_unnamed_addr #0 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {\n  %3 = alloca %\"class.std::__cxx11::basic_string\", align 8\n  %4 = alloca %\"class.std::__cxx11::basic_string\", align 8\n  %5 = alloca %\"class.std::__cxx11::basic_string\", align 8\n  %6 = alloca %\"class.std::__cxx11::basic_string\", align 8\n  %7 = bitcast %\"class.std::__cxx11::basic_string\"* %3 to i8*\n  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %7) #9\n  %8 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %3, i64 0, i32 2\n  %9 = bitcast %\"class.std::__cxx11::basic_string\"* %3 to %union.anon**\n  store %union.anon* %8, %union.anon** %9, align 8, !tbaa !3\n  %10 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %3, i64 0, i32 1\n  store i64 0, i64* %10, align 8, !tbaa !8\n  %11 = bitcast %union.anon* %8 to i8*\n  store i8 0, i8* %11, align 8, !tbaa !11\n  %12 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 2\n  %13 = bitcast %\"class.std::__cxx11::basic_string\"* %0 to %union.anon**\n  store %union.anon* %12, %union.anon** %13, align 8, !tbaa !3\n  %14 = bitcast %union.anon* %12 to i8*\n  %15 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 0, i32 0\n  %16 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 1\n  store i64 0, i64* %16, align 8, !tbaa !8\n  store i8 0, i8* %14, align 8, !tbaa !11\n  %17 = bitcast %\"class.std::__cxx11::basic_string\"* %4 to i8*\n  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %17) #9\n  invoke void (%\"class.std::__cxx11::basic_string\"*, i32 (i8*, i64, i8*, %struct.__va_list_tag*)*, i64, i8*, ...) @_ZN9__gnu_cxx12__to_xstringINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcEET_PFiPT0_mPKS8_P13__va_list_tagEmSB_z(%\"class.std::__cxx11::basic_string\"* nonnull sret(%\"class.std::__cxx11::basic_string\") align 8 %4, i32 (i8*, i64, i8*, %struct.__va_list_tag*)* nonnull @vsnprintf, i64 16, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32 %1)\n          to label %18 unwind label %157\n\n18:                                               ; preds = %2\n  %19 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %3, i64 0, i32 0, i32 0\n  %20 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %4, i64 0, i32 0, i32 0\n  %21 = load i8*, i8** %20, align 8, !tbaa !12\n  %22 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %4, i64 0, i32 2\n  %23 = bitcast %union.anon* %22 to i8*\n  %24 = icmp eq i8* %21, %23\n  br i1 %24, label %25, label %40\n\n25:                                               ; preds = %18\n  %26 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %4, i64 0, i32 1\n  %27 = load i64, i64* %26, align 8, !tbaa !8\n  %28 = icmp eq i64 %27, 0\n  br i1 %28, label %35, label %29\n\n29:                                               ; preds = %25\n  %30 = load i8*, i8** %19, align 8, !tbaa !12\n  %31 = icmp eq i64 %27, 1\n  br i1 %31, label %32, label %34\n\n32:                                               ; preds = %29\n  %33 = load i8, i8* %21, align 1, !tbaa !11\n  store i8 %33, i8* %30, align 1, !tbaa !11\n  br label %35\n\n34:                                               ; preds = %29\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %30, i8* align 1 %21, i64 %27, i1 false) #9\n  br label %35\n\n35:                                               ; preds = %34, %32, %25\n  %36 = load i64, i64* %26, align 8, !tbaa !8\n  store i64 %36, i64* %10, align 8, !tbaa !8\n  %37 = load i8*, i8** %19, align 8, !tbaa !12\n  %38 = getelementptr inbounds i8, i8* %37, i64 %36\n  store i8 0, i8* %38, align 1, !tbaa !11\n  %39 = load i8*, i8** %20, align 8, !tbaa !12\n  br label %55\n\n40:                                               ; preds = %18\n  %41 = load i8*, i8** %19, align 8, !tbaa !12\n  %42 = icmp eq i8* %41, %11\n  %43 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %3, i64 0, i32 2, i32 0\n  %44 = load i64, i64* %43, align 8\n  store i8* %21, i8** %19, align 8, !tbaa !12\n  %45 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %4, i64 0, i32 1\n  %46 = bitcast i64* %45 to <2 x i64>*\n  %47 = load <2 x i64>, <2 x i64>* %46, align 8, !tbaa !11\n  %48 = bitcast i64* %10 to <2 x i64>*\n  store <2 x i64> %47, <2 x i64>* %48, align 8, !tbaa !11\n  %49 = icmp eq i8* %41, null\n  %50 = or i1 %42, %49\n  br i1 %50, label %53, label %51\n\n51:                                               ; preds = %40\n  store i8* %41, i8** %20, align 8, !tbaa !12\n  %52 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %4, i64 0, i32 2, i32 0\n  store i64 %44, i64* %52, align 8, !tbaa !11\n  br label %55\n\n53:                                               ; preds = %40\n  %54 = bitcast %\"class.std::__cxx11::basic_string\"* %4 to %union.anon**\n  store %union.anon* %22, %union.anon** %54, align 8, !tbaa !12\n  br label %55\n\n55:                                               ; preds = %35, %51, %53\n  %56 = phi i8* [ %39, %35 ], [ %41, %51 ], [ %23, %53 ]\n  %57 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %4, i64 0, i32 1\n  store i64 0, i64* %57, align 8, !tbaa !8\n  store i8 0, i8* %56, align 1, !tbaa !11\n  %58 = load i8*, i8** %20, align 8, !tbaa !12\n  %59 = icmp eq i8* %58, %23\n  br i1 %59, label %61, label %60\n\n60:                                               ; preds = %55\n  call void @_ZdlPv(i8* %58) #9\n  br label %61\n\n61:                                               ; preds = %55, %60\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %17) #9\n  %62 = load i64, i64* %10, align 8, !tbaa !8\n  %63 = load i8*, i8** %19, align 8\n  %64 = icmp eq i64 %62, 0\n  br i1 %64, label %139, label %65\n\n65:                                               ; preds = %61\n  %66 = icmp ult i64 %62, 8\n  br i1 %66, label %136, label %67\n\n67:                                               ; preds = %65\n  %68 = and i64 %62, -8\n  %69 = add i64 %68, -8\n  %70 = lshr exact i64 %69, 3\n  %71 = add nuw nsw i64 %70, 1\n  %72 = and i64 %71, 1\n  %73 = icmp eq i64 %69, 0\n  br i1 %73, label %112, label %74\n\n74:                                               ; preds = %67\n  %75 = and i64 %71, 4611686018427387902\n  br label %76\n\n76:                                               ; preds = %76, %74\n  %77 = phi i64 [ 0, %74 ], [ %106, %76 ]\n  %78 = phi <4 x i32> [ zeroinitializer, %74 ], [ %104, %76 ]\n  %79 = phi <4 x i32> [ zeroinitializer, %74 ], [ %105, %76 ]\n  %80 = phi i64 [ %75, %74 ], [ %107, %76 ]\n  %81 = getelementptr inbounds i8, i8* %63, i64 %77\n  %82 = bitcast i8* %81 to <4 x i8>*\n  %83 = load <4 x i8>, <4 x i8>* %82, align 1, !tbaa !11\n  %84 = getelementptr inbounds i8, i8* %81, i64 4\n  %85 = bitcast i8* %84 to <4 x i8>*\n  %86 = load <4 x i8>, <4 x i8>* %85, align 1, !tbaa !11\n  %87 = sext <4 x i8> %83 to <4 x i32>\n  %88 = sext <4 x i8> %86 to <4 x i32>\n  %89 = add <4 x i32> %78, <i32 -48, i32 -48, i32 -48, i32 -48>\n  %90 = add <4 x i32> %79, <i32 -48, i32 -48, i32 -48, i32 -48>\n  %91 = add <4 x i32> %89, %87\n  %92 = add <4 x i32> %90, %88\n  %93 = or i64 %77, 8\n  %94 = getelementptr inbounds i8, i8* %63, i64 %93\n  %95 = bitcast i8* %94 to <4 x i8>*\n  %96 = load <4 x i8>, <4 x i8>* %95, align 1, !tbaa !11\n  %97 = getelementptr inbounds i8, i8* %94, i64 4\n  %98 = bitcast i8* %97 to <4 x i8>*\n  %99 = load <4 x i8>, <4 x i8>* %98, align 1, !tbaa !11\n  %100 = sext <4 x i8> %96 to <4 x i32>\n  %101 = sext <4 x i8> %99 to <4 x i32>\n  %102 = add <4 x i32> %91, <i32 -48, i32 -48, i32 -48, i32 -48>\n  %103 = add <4 x i32> %92, <i32 -48, i32 -48, i32 -48, i32 -48>\n  %104 = add <4 x i32> %102, %100\n  %105 = add <4 x i32> %103, %101\n  %106 = add nuw i64 %77, 16\n  %107 = add i64 %80, -2\n  %108 = icmp eq i64 %107, 0\n  br i1 %108, label %109, label %76, !llvm.loop !13\n\n109:                                              ; preds = %76\n  %110 = add <4 x i32> %104, <i32 -48, i32 -48, i32 -48, i32 -48>\n  %111 = add <4 x i32> %105, <i32 -48, i32 -48, i32 -48, i32 -48>\n  br label %112\n\n112:                                              ; preds = %109, %67\n  %113 = phi <4 x i32> [ undef, %67 ], [ %104, %109 ]\n  %114 = phi <4 x i32> [ undef, %67 ], [ %105, %109 ]\n  %115 = phi i64 [ 0, %67 ], [ %106, %109 ]\n  %116 = phi <4 x i32> [ <i32 -48, i32 -48, i32 -48, i32 -48>, %67 ], [ %110, %109 ]\n  %117 = phi <4 x i32> [ <i32 -48, i32 -48, i32 -48, i32 -48>, %67 ], [ %111, %109 ]\n  %118 = icmp eq i64 %72, 0\n  br i1 %118, label %130, label %119\n\n119:                                              ; preds = %112\n  %120 = getelementptr inbounds i8, i8* %63, i64 %115\n  %121 = getelementptr inbounds i8, i8* %120, i64 4\n  %122 = bitcast i8* %121 to <4 x i8>*\n  %123 = load <4 x i8>, <4 x i8>* %122, align 1, !tbaa !11\n  %124 = sext <4 x i8> %123 to <4 x i32>\n  %125 = add <4 x i32> %117, %124\n  %126 = bitcast i8* %120 to <4 x i8>*\n  %127 = load <4 x i8>, <4 x i8>* %126, align 1, !tbaa !11\n  %128 = sext <4 x i8> %127 to <4 x i32>\n  %129 = add <4 x i32> %116, %128\n  br label %130\n\n130:                                              ; preds = %112, %119\n  %131 = phi <4 x i32> [ %113, %112 ], [ %129, %119 ]\n  %132 = phi <4 x i32> [ %114, %112 ], [ %125, %119 ]\n  %133 = add <4 x i32> %132, %131\n  %134 = call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %133)\n  %135 = icmp eq i64 %62, %68\n  br i1 %135, label %139, label %136\n\n136:                                              ; preds = %65, %130\n  %137 = phi i64 [ 0, %65 ], [ %68, %130 ]\n  %138 = phi i32 [ 0, %65 ], [ %134, %130 ]\n  br label %159\n\n139:                                              ; preds = %159, %130, %61\n  %140 = phi i32 [ 0, %61 ], [ %134, %130 ], [ %166, %159 ]\n  %141 = bitcast %\"class.std::__cxx11::basic_string\"* %5 to i8*\n  %142 = bitcast %\"class.std::__cxx11::basic_string\"* %6 to i8*\n  %143 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %5, i64 0, i32 2\n  %144 = bitcast %\"class.std::__cxx11::basic_string\"* %5 to %union.anon**\n  %145 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %5, i64 0, i32 0, i32 0\n  %146 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %5, i64 0, i32 2, i32 0\n  %147 = bitcast %union.anon* %143 to i8*\n  %148 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %5, i64 0, i32 1\n  %149 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 2, i32 0\n  %150 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %6, i64 0, i32 0, i32 0\n  %151 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %6, i64 0, i32 2\n  %152 = bitcast %union.anon* %151 to i8*\n  %153 = icmp sgt i32 %140, 0\n  br i1 %153, label %154, label %238\n\n154:                                              ; preds = %139\n  %155 = bitcast i64* %148 to <2 x i64>*\n  %156 = bitcast i64* %16 to <2 x i64>*\n  br label %169\n\n157:                                              ; preds = %2\n  %158 = landingpad { i8*, i32 }\n          cleanup\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %17) #9\n  br label %243\n\n159:                                              ; preds = %136, %159\n  %160 = phi i64 [ %167, %159 ], [ %137, %136 ]\n  %161 = phi i32 [ %166, %159 ], [ %138, %136 ]\n  %162 = getelementptr inbounds i8, i8* %63, i64 %160\n  %163 = load i8, i8* %162, align 1, !tbaa !11\n  %164 = sext i8 %163 to i32\n  %165 = add i32 %161, -48\n  %166 = add i32 %165, %164\n  %167 = add nuw nsw i64 %160, 1\n  %168 = icmp eq i64 %167, %62\n  br i1 %168, label %139, label %159, !llvm.loop !16\n\n169:                                              ; preds = %154, %224\n  %170 = phi i32 [ %225, %224 ], [ %140, %154 ]\n  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %141) #9\n  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %142) #9\n  %171 = and i32 %170, 1\n  invoke void (%\"class.std::__cxx11::basic_string\"*, i32 (i8*, i64, i8*, %struct.__va_list_tag*)*, i64, i8*, ...) @_ZN9__gnu_cxx12__to_xstringINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcEET_PFiPT0_mPKS8_P13__va_list_tagEmSB_z(%\"class.std::__cxx11::basic_string\"* nonnull sret(%\"class.std::__cxx11::basic_string\") align 8 %6, i32 (i8*, i64, i8*, %struct.__va_list_tag*)* nonnull @vsnprintf, i64 16, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32 %171)\n          to label %172 unwind label %227\n\n172:                                              ; preds = %169\n  call void @llvm.experimental.noalias.scope.decl(metadata !18)\n  %173 = load i8*, i8** %15, align 8, !tbaa !12, !noalias !18\n  %174 = load i64, i64* %16, align 8, !tbaa !8, !noalias !18\n  %175 = invoke nonnull align 8 dereferenceable(32) %\"class.std::__cxx11::basic_string\"* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %6, i8* %173, i64 %174)\n          to label %176 unwind label %229\n\n176:                                              ; preds = %172\n  store %union.anon* %143, %union.anon** %144, align 8, !tbaa !3, !alias.scope !18\n  %177 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %175, i64 0, i32 0, i32 0\n  %178 = load i8*, i8** %177, align 8, !tbaa !12\n  %179 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %175, i64 0, i32 2\n  %180 = bitcast %union.anon* %179 to i8*\n  %181 = icmp eq i8* %178, %180\n  br i1 %181, label %182, label %183\n\n182:                                              ; preds = %176\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(16) %147, i8* noundef nonnull align 8 dereferenceable(16) %178, i64 16, i1 false) #9\n  br label %186\n\n183:                                              ; preds = %176\n  store i8* %178, i8** %145, align 8, !tbaa !12, !alias.scope !18\n  %184 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %175, i64 0, i32 2, i32 0\n  %185 = load i64, i64* %184, align 8, !tbaa !11\n  store i64 %185, i64* %146, align 8, !tbaa !11, !alias.scope !18\n  br label %186\n\n186:                                              ; preds = %183, %182\n  %187 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %175, i64 0, i32 1\n  %188 = load i64, i64* %187, align 8, !tbaa !8\n  store i64 %188, i64* %148, align 8, !tbaa !8, !alias.scope !18\n  %189 = bitcast %\"class.std::__cxx11::basic_string\"* %175 to %union.anon**\n  store %union.anon* %179, %union.anon** %189, align 8, !tbaa !12\n  store i64 0, i64* %187, align 8, !tbaa !8\n  store i8 0, i8* %180, align 8, !tbaa !11\n  %190 = load i8*, i8** %145, align 8, !tbaa !12\n  %191 = icmp eq i8* %190, %147\n  br i1 %191, label %192, label %206\n\n192:                                              ; preds = %186\n  %193 = load i64, i64* %148, align 8, !tbaa !8\n  %194 = icmp eq i64 %193, 0\n  br i1 %194, label %201, label %195\n\n195:                                              ; preds = %192\n  %196 = load i8*, i8** %15, align 8, !tbaa !12\n  %197 = icmp eq i64 %193, 1\n  br i1 %197, label %198, label %200\n\n198:                                              ; preds = %195\n  %199 = load i8, i8* %147, align 8, !tbaa !11\n  store i8 %199, i8* %196, align 1, !tbaa !11\n  br label %201\n\n200:                                              ; preds = %195\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %196, i8* nonnull align 8 %147, i64 %193, i1 false) #9\n  br label %201\n\n201:                                              ; preds = %200, %198, %192\n  %202 = load i64, i64* %148, align 8, !tbaa !8\n  store i64 %202, i64* %16, align 8, !tbaa !8\n  %203 = load i8*, i8** %15, align 8, !tbaa !12\n  %204 = getelementptr inbounds i8, i8* %203, i64 %202\n  store i8 0, i8* %204, align 1, !tbaa !11\n  %205 = load i8*, i8** %145, align 8, !tbaa !12\n  br label %215\n\n206:                                              ; preds = %186\n  %207 = load i8*, i8** %15, align 8, !tbaa !12\n  %208 = icmp eq i8* %207, %14\n  %209 = load i64, i64* %149, align 8\n  store i8* %190, i8** %15, align 8, !tbaa !12\n  %210 = load <2 x i64>, <2 x i64>* %155, align 8, !tbaa !11\n  store <2 x i64> %210, <2 x i64>* %156, align 8, !tbaa !11\n  %211 = icmp eq i8* %207, null\n  %212 = or i1 %208, %211\n  br i1 %212, label %214, label %213\n\n213:                                              ; preds = %206\n  store i8* %207, i8** %145, align 8, !tbaa !12\n  store i64 %209, i64* %146, align 8, !tbaa !11\n  br label %215\n\n214:                                              ; preds = %206\n  store %union.anon* %143, %union.anon** %144, align 8, !tbaa !12\n  br label %215\n\n215:                                              ; preds = %201, %213, %214\n  %216 = phi i8* [ %205, %201 ], [ %207, %213 ], [ %147, %214 ]\n  store i64 0, i64* %148, align 8, !tbaa !8\n  store i8 0, i8* %216, align 1, !tbaa !11\n  %217 = load i8*, i8** %145, align 8, !tbaa !12\n  %218 = icmp eq i8* %217, %147\n  br i1 %218, label %220, label %219\n\n219:                                              ; preds = %215\n  call void @_ZdlPv(i8* %217) #9\n  br label %220\n\n220:                                              ; preds = %215, %219\n  %221 = load i8*, i8** %150, align 8, !tbaa !12\n  %222 = icmp eq i8* %221, %152\n  br i1 %222, label %224, label %223\n\n223:                                              ; preds = %220\n  call void @_ZdlPv(i8* %221) #9\n  br label %224\n\n224:                                              ; preds = %220, %223\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %142) #9\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %141) #9\n  %225 = lshr i32 %170, 1\n  %226 = icmp ult i32 %170, 2\n  br i1 %226, label %236, label %169, !llvm.loop !21\n\n227:                                              ; preds = %169\n  %228 = landingpad { i8*, i32 }\n          cleanup\n  br label %234\n\n229:                                              ; preds = %172\n  %230 = landingpad { i8*, i32 }\n          cleanup\n  %231 = load i8*, i8** %150, align 8, !tbaa !12\n  %232 = icmp eq i8* %231, %152\n  br i1 %232, label %234, label %233\n\n233:                                              ; preds = %229\n  call void @_ZdlPv(i8* %231) #9\n  br label %234\n\n234:                                              ; preds = %233, %229, %227\n  %235 = phi { i8*, i32 } [ %228, %227 ], [ %230, %229 ], [ %230, %233 ]\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %142) #9\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %141) #9\n  br label %243\n\n236:                                              ; preds = %224\n  %237 = load i8*, i8** %19, align 8, !tbaa !12\n  br label %238\n\n238:                                              ; preds = %236, %139\n  %239 = phi i8* [ %237, %236 ], [ %63, %139 ]\n  %240 = icmp eq i8* %239, %11\n  br i1 %240, label %242, label %241\n\n241:                                              ; preds = %238\n  call void @_ZdlPv(i8* %239) #9\n  br label %242\n\n242:                                              ; preds = %238, %241\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %7) #9\n  ret void\n\n243:                                              ; preds = %234, %157\n  %244 = phi { i8*, i32 } [ %235, %234 ], [ %158, %157 ]\n  %245 = load i8*, i8** %15, align 8, !tbaa !12\n  %246 = icmp eq i8* %245, %14\n  br i1 %246, label %248, label %247\n\n247:                                              ; preds = %243\n  call void @_ZdlPv(i8* %245) #9\n  br label %248\n\n248:                                              ; preds = %247, %243\n  %249 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %3, i64 0, i32 0, i32 0\n  %250 = load i8*, i8** %249, align 8, !tbaa !12\n  %251 = icmp eq i8* %250, %11\n  br i1 %251, label %253, label %252\n\n252:                                              ; preds = %248\n  call void @_ZdlPv(i8* %250) #9\n  br label %253\n\n253:                                              ; preds = %248, %252\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %7) #9\n  resume { i8*, i32 } %244\n}\n\n; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn\ndeclare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1\n\ndeclare dso_local i32 @__gxx_personality_v0(...)\n\n; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn\ndeclare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1\n\n; Function Attrs: uwtable\ndefine linkonce_odr dso_local void @_ZN9__gnu_cxx12__to_xstringINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcEET_PFiPT0_mPKS8_P13__va_list_tagEmSB_z(%\"class.std::__cxx11::basic_string\"* noalias sret(%\"class.std::__cxx11::basic_string\") align 8 %0, i32 (i8*, i64, i8*, %struct.__va_list_tag*)* %1, i64 %2, i8* %3, ...) local_unnamed_addr #0 comdat personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {\n  %5 = alloca i64, align 8\n  %6 = alloca [1 x %struct.__va_list_tag], align 16\n  %7 = alloca i8, i64 %2, align 16\n  %8 = bitcast [1 x %struct.__va_list_tag]* %6 to i8*\n  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %8) #9\n  %9 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %6, i64 0, i64 0\n  call void @llvm.va_start(i8* nonnull %8)\n  %10 = call i32 %1(i8* nonnull %7, i64 %2, i8* %3, %struct.__va_list_tag* nonnull %9)\n  call void @llvm.va_end(i8* nonnull %8)\n  %11 = sext i32 %10 to i64\n  %12 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 2\n  %13 = bitcast %\"class.std::__cxx11::basic_string\"* %0 to %union.anon**\n  store %union.anon* %12, %union.anon** %13, align 8, !tbaa !3\n  %14 = bitcast %union.anon* %12 to i8*\n  %15 = bitcast i64* %5 to i8*\n  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %15) #9\n  store i64 %11, i64* %5, align 8, !tbaa !22\n  %16 = icmp ugt i32 %10, 15\n  br i1 %16, label %17, label %22\n\n17:                                               ; preds = %4\n  %18 = call i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %0, i64* nonnull align 8 dereferenceable(8) %5, i64 0)\n  %19 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 0, i32 0\n  store i8* %18, i8** %19, align 8, !tbaa !12\n  %20 = load i64, i64* %5, align 8, !tbaa !22\n  %21 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 2, i32 0\n  store i64 %20, i64* %21, align 8, !tbaa !11\n  br label %22\n\n22:                                               ; preds = %17, %4\n  %23 = phi i8* [ %18, %17 ], [ %14, %4 ]\n  switch i64 %11, label %26 [\n    i64 1, label %24\n    i64 0, label %27\n  ]\n\n24:                                               ; preds = %22\n  %25 = load i8, i8* %7, align 16, !tbaa !11\n  store i8 %25, i8* %23, align 1, !tbaa !11\n  br label %27\n\n26:                                               ; preds = %22\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %23, i8* nonnull align 16 %7, i64 %11, i1 false) #9\n  br label %27\n\n27:                                               ; preds = %26, %24, %22\n  %28 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 0, i32 0\n  %29 = load i64, i64* %5, align 8, !tbaa !22\n  %30 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 1\n  store i64 %29, i64* %30, align 8, !tbaa !8\n  %31 = load i8*, i8** %28, align 8, !tbaa !12\n  %32 = getelementptr inbounds i8, i8* %31, i64 %29\n  store i8 0, i8* %32, align 1, !tbaa !11\n  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %15) #9\n  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %8) #9\n  ret void\n}\n\n; Function Attrs: nofree nounwind\ndeclare dso_local noundef i32 @vsnprintf(i8* nocapture noundef, i64 noundef, i8* nocapture noundef readonly, %struct.__va_list_tag* noundef) #2\n\n; Function Attrs: mustprogress nofree nosync nounwind willreturn\ndeclare void @llvm.va_start(i8*) #3\n\n; Function Attrs: mustprogress nofree nosync nounwind willreturn\ndeclare void @llvm.va_end(i8*) #3\n\ndeclare dso_local i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32), i64* nonnull align 8 dereferenceable(8), i64) local_unnamed_addr #4\n\n; Function Attrs: argmemonly mustprogress nofree nounwind willreturn\ndeclare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #5\n\n; Function Attrs: nobuiltin nounwind\ndeclare dso_local void @_ZdlPv(i8*) local_unnamed_addr #6\n\ndeclare dso_local nonnull align 8 dereferenceable(32) %\"class.std::__cxx11::basic_string\"* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32), i8*, i64) local_unnamed_addr #4\n\n; Function Attrs: inaccessiblememonly nofree nosync nounwind willreturn\ndeclare void @llvm.experimental.noalias.scope.decl(metadata) #7\n\n; Function Attrs: nofree nosync nounwind readnone willreturn\ndeclare i32 @llvm.vector.reduce.add.v4i32(<4 x i32>) #8\n\nattributes #0 = { uwtable \"frame-pointer\"=\"none\" \"min-legal-vector-width\"=\"0\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #1 = { argmemonly mustprogress nofree nosync nounwind willreturn }\nattributes #2 = { nofree nounwind \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #3 = { mustprogress nofree nosync nounwind willreturn }\nattributes #4 = { \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #5 = { argmemonly mustprogress nofree nounwind willreturn }\nattributes #6 = { nobuiltin nounwind \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #7 = { inaccessiblememonly nofree nosync nounwind willreturn }\nattributes #8 = { nofree nosync nounwind readnone willreturn }\nattributes #9 = { nounwind }\n\n!llvm.module.flags = !{!0, !1}\n!llvm.ident = !{!2}\n\n!0 = !{i32 1, !\"wchar_size\", i32 4}\n!1 = !{i32 7, !\"uwtable\", i32 1}\n!2 = !{!\"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)\"}\n!3 = !{!4, !5, i64 0}\n!4 = !{!\"_ZTSNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderE\", !5, i64 0}\n!5 = !{!\"any pointer\", !6, i64 0}\n!6 = !{!\"omnipotent char\", !7, i64 0}\n!7 = !{!\"Simple C++ TBAA\"}\n!8 = !{!9, !10, i64 8}\n!9 = !{!\"_ZTSNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE\", !4, i64 0, !10, i64 8, !6, i64 16}\n!10 = !{!\"long\", !6, i64 0}\n!11 = !{!6, !6, i64 0}\n!12 = !{!9, !5, i64 0}\n!13 = distinct !{!13, !14, !15}\n!14 = !{!\"llvm.loop.mustprogress\"}\n!15 = !{!\"llvm.loop.isvectorized\", i32 1}\n!16 = distinct !{!16, !14, !17, !15}\n!17 = !{!\"llvm.loop.unroll.runtime.disable\"}\n!18 = !{!19}\n!19 = distinct !{!19, !20, !\"_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_: argument 0\"}\n!20 = distinct !{!20, !\"_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_\"}\n!21 = distinct !{!21, !14}\n!22 = !{!10, !10, i64 0}\n", "target": "This is the targeted source code:\n/*\nGiven a positive integer N, return the total sum of its digits in binary.\n\nExample\n    For N = 1000, the sum of digits will be 1 the output should be \"1\".\n    For N = 150, the sum of digits will be 6 the output should be \"110\".\n    For N = 147, the sum of digits will be 12 the output should be \"1100\".\n\nVariables:\n    @N integer\n         Constraints: 0 \u2264 N \u2264 10000.\nOutput:\n     a string of binary number\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring solve(int N){\n\n    string str,bi=\"\";\n    str=to_string(N);\n    int i,sum=0;\n    for (int i=0;i<str.length();i++)\n        sum+=str[i]-48;\n    while (sum>0)\n    {\n        bi=to_string(sum%2)+bi;\n        sum=sum/2;\n    }\n    return bi;\n}\n"}
{"input": "Convert this to C++:\n; ModuleID = '../../Human_xBenchmarks_164/CPP_85/CPP_85.cpp'\nsource_filename = \"../../Human_xBenchmarks_164/CPP_85/CPP_85.cpp\"\ntarget datalayout = \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\ntarget triple = \"x86_64-unknown-linux-gnu\"\n\n%\"class.std::vector\" = type { %\"struct.std::_Vector_base\" }\n%\"struct.std::_Vector_base\" = type { %\"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl\" }\n%\"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl\" = type { %\"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl_data\" }\n%\"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl_data\" = type { i32*, i32*, i32* }\n\n; Function Attrs: mustprogress nofree norecurse nosync nounwind readonly uwtable willreturn\ndefine dso_local i32 @_Z3addSt6vectorIiSaIiEE(%\"class.std::vector\"* nocapture readonly %0) local_unnamed_addr #0 {\n  %2 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0, i64 0, i32 0, i32 0, i32 0, i32 1\n  %3 = load i32*, i32** %2, align 8, !tbaa !3\n  %4 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0, i64 0, i32 0, i32 0, i32 0, i32 0\n  %5 = load i32*, i32** %4, align 8, !tbaa !8\n  %6 = ptrtoint i32* %3 to i64\n  %7 = ptrtoint i32* %5 to i64\n  %8 = sub i64 %6, %7\n  %9 = ashr exact i64 %8, 2\n  %10 = icmp ugt i64 %9, 1\n  br i1 %10, label %11, label %75\n\n11:                                               ; preds = %1\n  %12 = add nsw i64 %9, -2\n  %13 = lshr i64 %12, 1\n  %14 = add nuw i64 %13, 1\n  %15 = icmp ult i64 %12, 14\n  br i1 %15, label %71, label %16\n\n16:                                               ; preds = %11\n  %17 = and i64 %14, -8\n  %18 = shl i64 %17, 1\n  %19 = or i64 %18, 1\n  br label %20\n\n20:                                               ; preds = %20, %16\n  %21 = phi i64 [ 0, %16 ], [ %65, %20 ]\n  %22 = phi <4 x i32> [ zeroinitializer, %16 ], [ %63, %20 ]\n  %23 = phi <4 x i32> [ zeroinitializer, %16 ], [ %64, %20 ]\n  %24 = shl i64 %21, 1\n  %25 = or i64 %24, 1\n  %26 = or i64 %24, 3\n  %27 = or i64 %24, 5\n  %28 = or i64 %24, 7\n  %29 = or i64 %24, 9\n  %30 = or i64 %24, 11\n  %31 = or i64 %24, 13\n  %32 = or i64 %24, 15\n  %33 = getelementptr inbounds i32, i32* %5, i64 %25\n  %34 = getelementptr inbounds i32, i32* %5, i64 %26\n  %35 = getelementptr inbounds i32, i32* %5, i64 %27\n  %36 = getelementptr inbounds i32, i32* %5, i64 %28\n  %37 = getelementptr inbounds i32, i32* %5, i64 %29\n  %38 = getelementptr inbounds i32, i32* %5, i64 %30\n  %39 = getelementptr inbounds i32, i32* %5, i64 %31\n  %40 = getelementptr inbounds i32, i32* %5, i64 %32\n  %41 = load i32, i32* %33, align 4, !tbaa !9\n  %42 = load i32, i32* %34, align 4, !tbaa !9\n  %43 = load i32, i32* %35, align 4, !tbaa !9\n  %44 = load i32, i32* %36, align 4, !tbaa !9\n  %45 = insertelement <4 x i32> poison, i32 %41, i32 0\n  %46 = insertelement <4 x i32> %45, i32 %42, i32 1\n  %47 = insertelement <4 x i32> %46, i32 %43, i32 2\n  %48 = insertelement <4 x i32> %47, i32 %44, i32 3\n  %49 = load i32, i32* %37, align 4, !tbaa !9\n  %50 = load i32, i32* %38, align 4, !tbaa !9\n  %51 = load i32, i32* %39, align 4, !tbaa !9\n  %52 = load i32, i32* %40, align 4, !tbaa !9\n  %53 = insertelement <4 x i32> poison, i32 %49, i32 0\n  %54 = insertelement <4 x i32> %53, i32 %50, i32 1\n  %55 = insertelement <4 x i32> %54, i32 %51, i32 2\n  %56 = insertelement <4 x i32> %55, i32 %52, i32 3\n  %57 = and <4 x i32> %48, <i32 1, i32 1, i32 1, i32 1>\n  %58 = and <4 x i32> %56, <i32 1, i32 1, i32 1, i32 1>\n  %59 = icmp eq <4 x i32> %57, zeroinitializer\n  %60 = icmp eq <4 x i32> %58, zeroinitializer\n  %61 = select <4 x i1> %59, <4 x i32> %48, <4 x i32> zeroinitializer\n  %62 = select <4 x i1> %60, <4 x i32> %56, <4 x i32> zeroinitializer\n  %63 = add <4 x i32> %61, %22\n  %64 = add <4 x i32> %62, %23\n  %65 = add nuw i64 %21, 8\n  %66 = icmp eq i64 %65, %17\n  br i1 %66, label %67, label %20, !llvm.loop !11\n\n67:                                               ; preds = %20\n  %68 = add <4 x i32> %64, %63\n  %69 = call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %68)\n  %70 = icmp eq i64 %14, %17\n  br i1 %70, label %75, label %71\n\n71:                                               ; preds = %11, %67\n  %72 = phi i64 [ 0, %11 ], [ %17, %67 ]\n  %73 = phi i64 [ 1, %11 ], [ %19, %67 ]\n  %74 = phi i32 [ 0, %11 ], [ %69, %67 ]\n  br label %77\n\n75:                                               ; preds = %77, %67, %1\n  %76 = phi i32 [ 0, %1 ], [ %69, %67 ], [ %86, %77 ]\n  ret i32 %76\n\n77:                                               ; preds = %71, %77\n  %78 = phi i64 [ %87, %77 ], [ %72, %71 ]\n  %79 = phi i64 [ %89, %77 ], [ %73, %71 ]\n  %80 = phi i32 [ %86, %77 ], [ %74, %71 ]\n  %81 = getelementptr inbounds i32, i32* %5, i64 %79\n  %82 = load i32, i32* %81, align 4, !tbaa !9\n  %83 = and i32 %82, 1\n  %84 = icmp eq i32 %83, 0\n  %85 = select i1 %84, i32 %82, i32 0\n  %86 = add nsw i32 %85, %80\n  %87 = add nuw nsw i64 %78, 1\n  %88 = shl nuw nsw i64 %87, 1\n  %89 = or i64 %88, 1\n  %90 = icmp eq i64 %78, %13\n  br i1 %90, label %75, label %77, !llvm.loop !14\n}\n\n; Function Attrs: nofree nosync nounwind readnone willreturn\ndeclare i32 @llvm.vector.reduce.add.v4i32(<4 x i32>) #1\n\nattributes #0 = { mustprogress nofree norecurse nosync nounwind readonly uwtable willreturn \"frame-pointer\"=\"none\" \"min-legal-vector-width\"=\"0\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #1 = { nofree nosync nounwind readnone willreturn }\n\n!llvm.module.flags = !{!0, !1}\n!llvm.ident = !{!2}\n\n!0 = !{i32 1, !\"wchar_size\", i32 4}\n!1 = !{i32 7, !\"uwtable\", i32 1}\n!2 = !{!\"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)\"}\n!3 = !{!4, !5, i64 8}\n!4 = !{!\"_ZTSNSt12_Vector_baseIiSaIiEE17_Vector_impl_dataE\", !5, i64 0, !5, i64 8, !5, i64 16}\n!5 = !{!\"any pointer\", !6, i64 0}\n!6 = !{!\"omnipotent char\", !7, i64 0}\n!7 = !{!\"Simple C++ TBAA\"}\n!8 = !{!4, !5, i64 0}\n!9 = !{!10, !10, i64 0}\n!10 = !{!\"int\", !6, i64 0}\n!11 = distinct !{!11, !12, !13}\n!12 = !{!\"llvm.loop.mustprogress\"}\n!13 = !{!\"llvm.loop.isvectorized\", i32 1}\n!14 = distinct !{!14, !12, !15, !13}\n!15 = !{!\"llvm.loop.unroll.runtime.disable\"}\n", "target": "This is the targeted source code:\n/*\nGiven a non-empty vector of integers lst. add the even elements that are at odd indices..\n\n\nExamples:\n    add({4, 2, 6, 7}) ==> 2 \n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint add(vector<int> lst){\n\n    int sum=0;\n    for (int i=0;i*2+1<lst.size();i++)\n        if (lst[i*2+1]%2==0) sum+=lst[i*2+1];\n    return sum;\n}\n"}
{"input": "Convert this to C++:\n; ModuleID = '../../Human_xBenchmarks_164/CPP_86/CPP_86.cpp'\nsource_filename = \"../../Human_xBenchmarks_164/CPP_86/CPP_86.cpp\"\ntarget datalayout = \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\ntarget triple = \"x86_64-unknown-linux-gnu\"\n\n%\"class.std::__cxx11::basic_string\" = type { %\"struct.std::__cxx11::basic_string<char>::_Alloc_hider\", i64, %union.anon }\n%\"struct.std::__cxx11::basic_string<char>::_Alloc_hider\" = type { i8* }\n%union.anon = type { i64, [8 x i8] }\n%\"struct.__gnu_cxx::__ops::_Iter_less_iter\" = type { i8 }\n\n$_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEElNS0_5__ops15_Iter_less_iterEEvT_SC_T0_T1_ = comdat any\n\n$_ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS0_5__ops15_Iter_less_iterEEvT_SC_T0_ = comdat any\n\n$_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS0_5__ops15_Iter_less_iterEEvT_SC_RT0_ = comdat any\n\n@.str = private unnamed_addr constant [1 x i8] zeroinitializer, align 1\n\n; Function Attrs: uwtable\ndefine dso_local void @_Z12anti_shuffleNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE(%\"class.std::__cxx11::basic_string\"* noalias sret(%\"class.std::__cxx11::basic_string\") align 8 %0, %\"class.std::__cxx11::basic_string\"* %1) local_unnamed_addr #0 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {\n  %3 = alloca i64, align 8\n  %4 = alloca i64, align 8\n  %5 = alloca i64, align 8\n  %6 = alloca i64, align 8\n  %7 = alloca %\"class.std::__cxx11::basic_string\", align 8\n  %8 = alloca %\"class.std::__cxx11::basic_string\", align 8\n  %9 = alloca %\"class.std::__cxx11::basic_string\", align 8\n  %10 = alloca %\"class.std::__cxx11::basic_string\", align 8\n  %11 = alloca %\"class.std::__cxx11::basic_string\", align 8\n  %12 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 2\n  %13 = bitcast %\"class.std::__cxx11::basic_string\"* %0 to %union.anon**\n  store %union.anon* %12, %union.anon** %13, align 8, !tbaa !3\n  %14 = bitcast %union.anon* %12 to i8*\n  %15 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 0, i32 0\n  %16 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 1\n  store i64 0, i64* %16, align 8, !tbaa !8\n  store i8 0, i8* %14, align 8, !tbaa !11\n  %17 = bitcast %\"class.std::__cxx11::basic_string\"* %7 to i8*\n  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %17) #7\n  %18 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %7, i64 0, i32 2\n  %19 = bitcast %\"class.std::__cxx11::basic_string\"* %7 to %union.anon**\n  store %union.anon* %18, %union.anon** %19, align 8, !tbaa !3\n  %20 = bitcast %union.anon* %18 to i8*\n  %21 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %7, i64 0, i32 0, i32 0\n  %22 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %7, i64 0, i32 1\n  store i64 0, i64* %22, align 8, !tbaa !8\n  store i8 0, i8* %20, align 8, !tbaa !11\n  %23 = bitcast %\"class.std::__cxx11::basic_string\"* %8 to i8*\n  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %23) #7\n  call void @llvm.experimental.noalias.scope.decl(metadata !12)\n  %24 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %8, i64 0, i32 2\n  %25 = bitcast %\"class.std::__cxx11::basic_string\"* %8 to %union.anon**\n  store %union.anon* %24, %union.anon** %25, align 8, !tbaa !3, !alias.scope !12\n  %26 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %1, i64 0, i32 0, i32 0\n  %27 = load i8*, i8** %26, align 8, !tbaa !15, !noalias !12\n  %28 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %1, i64 0, i32 1\n  %29 = load i64, i64* %28, align 8, !tbaa !8, !noalias !12\n  %30 = bitcast i64* %6 to i8*\n  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %30) #7, !noalias !12\n  store i64 %29, i64* %6, align 8, !tbaa !16, !noalias !12\n  %31 = icmp ugt i64 %29, 15\n  br i1 %31, label %34, label %32\n\n32:                                               ; preds = %2\n  %33 = bitcast %union.anon* %24 to i8*\n  br label %40\n\n34:                                               ; preds = %2\n  %35 = invoke i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %8, i64* nonnull align 8 dereferenceable(8) %6, i64 0)\n          to label %36 unwind label %138\n\n36:                                               ; preds = %34\n  %37 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %8, i64 0, i32 0, i32 0\n  store i8* %35, i8** %37, align 8, !tbaa !15, !alias.scope !12\n  %38 = load i64, i64* %6, align 8, !tbaa !16, !noalias !12\n  %39 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %8, i64 0, i32 2, i32 0\n  store i64 %38, i64* %39, align 8, !tbaa !11, !alias.scope !12\n  br label %40\n\n40:                                               ; preds = %36, %32\n  %41 = phi i8* [ %33, %32 ], [ %35, %36 ]\n  switch i64 %29, label %44 [\n    i64 1, label %42\n    i64 0, label %45\n  ]\n\n42:                                               ; preds = %40\n  %43 = load i8, i8* %27, align 1, !tbaa !11\n  store i8 %43, i8* %41, align 1, !tbaa !11\n  br label %45\n\n44:                                               ; preds = %40\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %41, i8* align 1 %27, i64 %29, i1 false) #7\n  br label %45\n\n45:                                               ; preds = %44, %42, %40\n  %46 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %8, i64 0, i32 0, i32 0\n  %47 = load i64, i64* %6, align 8, !tbaa !16, !noalias !12\n  %48 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %8, i64 0, i32 1\n  store i64 %47, i64* %48, align 8, !tbaa !8, !alias.scope !12\n  %49 = load i8*, i8** %46, align 8, !tbaa !15, !alias.scope !12\n  %50 = getelementptr inbounds i8, i8* %49, i64 %47\n  store i8 0, i8* %50, align 1, !tbaa !11\n  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %30) #7, !noalias !12\n  %51 = load i64, i64* %48, align 8, !tbaa !8, !alias.scope !12\n  %52 = invoke nonnull align 8 dereferenceable(32) %\"class.std::__cxx11::basic_string\"* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEmmmc(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %8, i64 %51, i64 0, i64 1, i8 signext 32)\n          to label %59 unwind label %53\n\n53:                                               ; preds = %45\n  %54 = landingpad { i8*, i32 }\n          cleanup\n  %55 = load i8*, i8** %46, align 8, !tbaa !15, !alias.scope !12\n  %56 = bitcast %union.anon* %24 to i8*\n  %57 = icmp eq i8* %55, %56\n  br i1 %57, label %140, label %58\n\n58:                                               ; preds = %53\n  call void @_ZdlPv(i8* %55) #7\n  br label %140\n\n59:                                               ; preds = %45\n  %60 = load i8*, i8** %46, align 8, !tbaa !15\n  %61 = bitcast %union.anon* %24 to i8*\n  %62 = icmp eq i8* %60, %61\n  br i1 %62, label %63, label %77\n\n63:                                               ; preds = %59\n  %64 = load i64, i64* %48, align 8, !tbaa !8\n  %65 = icmp eq i64 %64, 0\n  br i1 %65, label %72, label %66\n\n66:                                               ; preds = %63\n  %67 = load i8*, i8** %26, align 8, !tbaa !15\n  %68 = icmp eq i64 %64, 1\n  br i1 %68, label %69, label %71\n\n69:                                               ; preds = %66\n  %70 = load i8, i8* %61, align 8, !tbaa !11\n  store i8 %70, i8* %67, align 1, !tbaa !11\n  br label %72\n\n71:                                               ; preds = %66\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %67, i8* nonnull align 8 %61, i64 %64, i1 false) #7\n  br label %72\n\n72:                                               ; preds = %71, %69, %63\n  %73 = load i64, i64* %48, align 8, !tbaa !8\n  store i64 %73, i64* %28, align 8, !tbaa !8\n  %74 = load i8*, i8** %26, align 8, !tbaa !15\n  %75 = getelementptr inbounds i8, i8* %74, i64 %73\n  store i8 0, i8* %75, align 1, !tbaa !11\n  %76 = load i8*, i8** %46, align 8, !tbaa !15\n  br label %92\n\n77:                                               ; preds = %59\n  %78 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %1, i64 0, i32 2\n  %79 = bitcast %union.anon* %78 to i8*\n  %80 = load i8*, i8** %26, align 8, !tbaa !15\n  %81 = icmp eq i8* %80, %79\n  %82 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %1, i64 0, i32 2, i32 0\n  %83 = load i64, i64* %82, align 8\n  store i8* %60, i8** %26, align 8, !tbaa !15\n  %84 = bitcast i64* %48 to <2 x i64>*\n  %85 = load <2 x i64>, <2 x i64>* %84, align 8, !tbaa !11\n  %86 = bitcast i64* %28 to <2 x i64>*\n  store <2 x i64> %85, <2 x i64>* %86, align 8, !tbaa !11\n  %87 = icmp eq i8* %80, null\n  %88 = or i1 %81, %87\n  br i1 %88, label %91, label %89\n\n89:                                               ; preds = %77\n  store i8* %80, i8** %46, align 8, !tbaa !15\n  %90 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %8, i64 0, i32 2, i32 0\n  store i64 %83, i64* %90, align 8, !tbaa !11\n  br label %92\n\n91:                                               ; preds = %77\n  store %union.anon* %24, %union.anon** %25, align 8, !tbaa !15\n  br label %92\n\n92:                                               ; preds = %72, %89, %91\n  %93 = phi i8* [ %76, %72 ], [ %80, %89 ], [ %61, %91 ]\n  store i64 0, i64* %48, align 8, !tbaa !8\n  store i8 0, i8* %93, align 1, !tbaa !11\n  %94 = load i8*, i8** %46, align 8, !tbaa !15\n  %95 = icmp eq i8* %94, %61\n  br i1 %95, label %97, label %96\n\n96:                                               ; preds = %92\n  call void @_ZdlPv(i8* %94) #7\n  br label %97\n\n97:                                               ; preds = %92, %96\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %23) #7\n  %98 = bitcast %\"class.std::__cxx11::basic_string\"* %11 to i8*\n  %99 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %11, i64 0, i32 2\n  %100 = bitcast %\"class.std::__cxx11::basic_string\"* %11 to %union.anon**\n  %101 = bitcast i64* %3 to i8*\n  %102 = bitcast %union.anon* %99 to i8*\n  %103 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %11, i64 0, i32 0, i32 0\n  %104 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %11, i64 0, i32 2, i32 0\n  %105 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %11, i64 0, i32 1\n  %106 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %7, i64 0, i32 2, i32 0\n  %107 = bitcast %\"class.std::__cxx11::basic_string\"* %9 to i8*\n  %108 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %9, i64 0, i32 2\n  %109 = bitcast %\"class.std::__cxx11::basic_string\"* %9 to %union.anon**\n  %110 = bitcast i64* %5 to i8*\n  %111 = bitcast %union.anon* %108 to i8*\n  %112 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %9, i64 0, i32 0, i32 0\n  %113 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %9, i64 0, i32 2, i32 0\n  %114 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %9, i64 0, i32 1\n  %115 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 2, i32 0\n  %116 = bitcast %\"class.std::__cxx11::basic_string\"* %10 to i8*\n  %117 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %10, i64 0, i32 2\n  %118 = bitcast %\"class.std::__cxx11::basic_string\"* %10 to %union.anon**\n  %119 = bitcast i64* %4 to i8*\n  %120 = bitcast %union.anon* %117 to i8*\n  %121 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %10, i64 0, i32 0, i32 0\n  %122 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %10, i64 0, i32 2, i32 0\n  %123 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %10, i64 0, i32 1\n  %124 = load i64, i64* %28, align 8, !tbaa !8\n  %125 = icmp eq i64 %124, 0\n  br i1 %125, label %133, label %126\n\n126:                                              ; preds = %97\n  %127 = bitcast i64* %105 to <2 x i64>*\n  %128 = bitcast i64* %22 to <2 x i64>*\n  %129 = bitcast i64* %114 to <2 x i64>*\n  %130 = bitcast i64* %16 to <2 x i64>*\n  %131 = bitcast i64* %123 to <2 x i64>*\n  %132 = bitcast i64* %16 to <2 x i64>*\n  br label %142\n\n133:                                              ; preds = %347, %97\n  %134 = load i8*, i8** %21, align 8, !tbaa !15\n  %135 = icmp eq i8* %134, %20\n  br i1 %135, label %137, label %136\n\n136:                                              ; preds = %133\n  call void @_ZdlPv(i8* %134) #7\n  br label %137\n\n137:                                              ; preds = %133, %136\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %17) #7\n  ret void\n\n138:                                              ; preds = %34\n  %139 = landingpad { i8*, i32 }\n          cleanup\n  br label %140\n\n140:                                              ; preds = %53, %58, %138\n  %141 = phi { i8*, i32 } [ %139, %138 ], [ %54, %58 ], [ %54, %53 ]\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %23) #7\n  br label %351\n\n142:                                              ; preds = %126, %347\n  %143 = phi i64 [ %348, %347 ], [ 0, %126 ]\n  %144 = load i8*, i8** %26, align 8, !tbaa !15\n  %145 = getelementptr inbounds i8, i8* %144, i64 %143\n  %146 = load i8, i8* %145, align 1, !tbaa !11\n  %147 = icmp eq i8 %146, 32\n  br i1 %147, label %148, label %287\n\n148:                                              ; preds = %142\n  %149 = load i8*, i8** %21, align 8, !tbaa !15\n  %150 = load i64, i64* %22, align 8, !tbaa !8\n  %151 = getelementptr inbounds i8, i8* %149, i64 %150\n  %152 = icmp eq i64 %150, 0\n  br i1 %152, label %158, label %153\n\n153:                                              ; preds = %148\n  %154 = call i64 @llvm.ctlz.i64(i64 %150, i1 true) #7, !range !17\n  %155 = shl nuw nsw i64 %154, 1\n  %156 = xor i64 %155, 126\n  invoke void @_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEElNS0_5__ops15_Iter_less_iterEEvT_SC_T0_T1_(i8* %149, i8* nonnull %151, i64 %156)\n          to label %157 unwind label %218\n\n157:                                              ; preds = %153\n  invoke void @_ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS0_5__ops15_Iter_less_iterEEvT_SC_T0_(i8* %149, i8* nonnull %151)\n          to label %158 unwind label %218\n\n158:                                              ; preds = %148, %157\n  %159 = load i64, i64* %16, align 8, !tbaa !8\n  %160 = icmp eq i64 %159, 0\n  br i1 %160, label %224, label %161\n\n161:                                              ; preds = %158\n  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %107) #7\n  call void @llvm.experimental.noalias.scope.decl(metadata !18)\n  store %union.anon* %108, %union.anon** %109, align 8, !tbaa !3, !alias.scope !18\n  %162 = load i8*, i8** %15, align 8, !tbaa !15, !noalias !18\n  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %110) #7, !noalias !18\n  store i64 %159, i64* %5, align 8, !tbaa !16, !noalias !18\n  %163 = icmp ugt i64 %159, 15\n  br i1 %163, label %164, label %168\n\n164:                                              ; preds = %161\n  %165 = invoke i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %9, i64* nonnull align 8 dereferenceable(8) %5, i64 0)\n          to label %166 unwind label %220\n\n166:                                              ; preds = %164\n  store i8* %165, i8** %112, align 8, !tbaa !15, !alias.scope !18\n  %167 = load i64, i64* %5, align 8, !tbaa !16, !noalias !18\n  store i64 %167, i64* %113, align 8, !tbaa !11, !alias.scope !18\n  br label %172\n\n168:                                              ; preds = %161\n  %169 = icmp eq i64 %159, 1\n  br i1 %169, label %170, label %172\n\n170:                                              ; preds = %168\n  %171 = load i8, i8* %162, align 1, !tbaa !11\n  store i8 %171, i8* %111, align 8, !tbaa !11\n  br label %174\n\n172:                                              ; preds = %166, %168\n  %173 = phi i8* [ %165, %166 ], [ %111, %168 ]\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %173, i8* align 1 %162, i64 %159, i1 false) #7\n  br label %174\n\n174:                                              ; preds = %172, %170\n  %175 = load i64, i64* %5, align 8, !tbaa !16, !noalias !18\n  store i64 %175, i64* %114, align 8, !tbaa !8, !alias.scope !18\n  %176 = load i8*, i8** %112, align 8, !tbaa !15, !alias.scope !18\n  %177 = getelementptr inbounds i8, i8* %176, i64 %175\n  store i8 0, i8* %177, align 1, !tbaa !11\n  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %110) #7, !noalias !18\n  %178 = load i64, i64* %114, align 8, !tbaa !8, !alias.scope !18\n  %179 = invoke nonnull align 8 dereferenceable(32) %\"class.std::__cxx11::basic_string\"* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEmmmc(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %9, i64 %178, i64 0, i64 1, i8 signext 32)\n          to label %185 unwind label %180\n\n180:                                              ; preds = %174\n  %181 = landingpad { i8*, i32 }\n          cleanup\n  %182 = load i8*, i8** %112, align 8, !tbaa !15, !alias.scope !18\n  %183 = icmp eq i8* %182, %111\n  br i1 %183, label %222, label %184\n\n184:                                              ; preds = %180\n  call void @_ZdlPv(i8* %182) #7\n  br label %222\n\n185:                                              ; preds = %174\n  %186 = load i8*, i8** %112, align 8, !tbaa !15\n  %187 = icmp eq i8* %186, %111\n  br i1 %187, label %188, label %202\n\n188:                                              ; preds = %185\n  %189 = load i64, i64* %114, align 8, !tbaa !8\n  %190 = icmp eq i64 %189, 0\n  br i1 %190, label %197, label %191\n\n191:                                              ; preds = %188\n  %192 = load i8*, i8** %15, align 8, !tbaa !15\n  %193 = icmp eq i64 %189, 1\n  br i1 %193, label %194, label %196\n\n194:                                              ; preds = %191\n  %195 = load i8, i8* %111, align 8, !tbaa !11\n  store i8 %195, i8* %192, align 1, !tbaa !11\n  br label %197\n\n196:                                              ; preds = %191\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %192, i8* nonnull align 8 %111, i64 %189, i1 false) #7\n  br label %197\n\n197:                                              ; preds = %196, %194, %188\n  %198 = load i64, i64* %114, align 8, !tbaa !8\n  store i64 %198, i64* %16, align 8, !tbaa !8\n  %199 = load i8*, i8** %15, align 8, !tbaa !15\n  %200 = getelementptr inbounds i8, i8* %199, i64 %198\n  store i8 0, i8* %200, align 1, !tbaa !11\n  %201 = load i8*, i8** %112, align 8, !tbaa !15\n  br label %211\n\n202:                                              ; preds = %185\n  %203 = load i8*, i8** %15, align 8, !tbaa !15\n  %204 = icmp eq i8* %203, %14\n  %205 = load i64, i64* %115, align 8\n  store i8* %186, i8** %15, align 8, !tbaa !15\n  %206 = load <2 x i64>, <2 x i64>* %129, align 8, !tbaa !11\n  store <2 x i64> %206, <2 x i64>* %130, align 8, !tbaa !11\n  %207 = icmp eq i8* %203, null\n  %208 = or i1 %204, %207\n  br i1 %208, label %210, label %209\n\n209:                                              ; preds = %202\n  store i8* %203, i8** %112, align 8, !tbaa !15\n  store i64 %205, i64* %113, align 8, !tbaa !11\n  br label %211\n\n210:                                              ; preds = %202\n  store %union.anon* %108, %union.anon** %109, align 8, !tbaa !15\n  br label %211\n\n211:                                              ; preds = %197, %209, %210\n  %212 = phi i8* [ %201, %197 ], [ %203, %209 ], [ %111, %210 ]\n  store i64 0, i64* %114, align 8, !tbaa !8\n  store i8 0, i8* %212, align 1, !tbaa !11\n  %213 = load i8*, i8** %112, align 8, !tbaa !15\n  %214 = icmp eq i8* %213, %111\n  br i1 %214, label %216, label %215\n\n215:                                              ; preds = %211\n  call void @_ZdlPv(i8* %213) #7\n  br label %216\n\n216:                                              ; preds = %211, %215\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %107) #7\n  %217 = load i64, i64* %16, align 8, !tbaa !8, !noalias !21\n  br label %224\n\n218:                                              ; preds = %280, %157, %153\n  %219 = landingpad { i8*, i32 }\n          cleanup\n  br label %351\n\n220:                                              ; preds = %164\n  %221 = landingpad { i8*, i32 }\n          cleanup\n  br label %222\n\n222:                                              ; preds = %180, %184, %220\n  %223 = phi { i8*, i32 } [ %221, %220 ], [ %181, %184 ], [ %181, %180 ]\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %107) #7\n  br label %351\n\n224:                                              ; preds = %216, %158\n  %225 = phi i64 [ %217, %216 ], [ 0, %158 ]\n  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %116) #7\n  call void @llvm.experimental.noalias.scope.decl(metadata !21)\n  store %union.anon* %117, %union.anon** %118, align 8, !tbaa !3, !alias.scope !21\n  %226 = load i8*, i8** %15, align 8, !tbaa !15, !noalias !21\n  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %119) #7, !noalias !21\n  store i64 %225, i64* %4, align 8, !tbaa !16, !noalias !21\n  %227 = icmp ugt i64 %225, 15\n  br i1 %227, label %228, label %232\n\n228:                                              ; preds = %224\n  %229 = invoke i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %10, i64* nonnull align 8 dereferenceable(8) %4, i64 0)\n          to label %230 unwind label %283\n\n230:                                              ; preds = %228\n  store i8* %229, i8** %121, align 8, !tbaa !15, !alias.scope !21\n  %231 = load i64, i64* %4, align 8, !tbaa !16, !noalias !21\n  store i64 %231, i64* %122, align 8, !tbaa !11, !alias.scope !21\n  br label %232\n\n232:                                              ; preds = %224, %230\n  %233 = phi i8* [ %229, %230 ], [ %120, %224 ]\n  switch i64 %225, label %236 [\n    i64 1, label %234\n    i64 0, label %237\n  ]\n\n234:                                              ; preds = %232\n  %235 = load i8, i8* %226, align 1, !tbaa !11\n  store i8 %235, i8* %233, align 1, !tbaa !11\n  br label %237\n\n236:                                              ; preds = %232\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %233, i8* align 1 %226, i64 %225, i1 false) #7\n  br label %237\n\n237:                                              ; preds = %236, %234, %232\n  %238 = load i64, i64* %4, align 8, !tbaa !16, !noalias !21\n  store i64 %238, i64* %123, align 8, !tbaa !8, !alias.scope !21\n  %239 = load i8*, i8** %121, align 8, !tbaa !15, !alias.scope !21\n  %240 = getelementptr inbounds i8, i8* %239, i64 %238\n  store i8 0, i8* %240, align 1, !tbaa !11\n  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %119) #7, !noalias !21\n  %241 = load i8*, i8** %21, align 8, !tbaa !15, !noalias !21\n  %242 = load i64, i64* %22, align 8, !tbaa !8, !noalias !21\n  %243 = invoke nonnull align 8 dereferenceable(32) %\"class.std::__cxx11::basic_string\"* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %10, i8* %241, i64 %242)\n          to label %249 unwind label %244\n\n244:                                              ; preds = %237\n  %245 = landingpad { i8*, i32 }\n          cleanup\n  %246 = load i8*, i8** %121, align 8, !tbaa !15, !alias.scope !21\n  %247 = icmp eq i8* %246, %120\n  br i1 %247, label %285, label %248\n\n248:                                              ; preds = %244\n  call void @_ZdlPv(i8* %246) #7\n  br label %285\n\n249:                                              ; preds = %237\n  %250 = load i8*, i8** %121, align 8, !tbaa !15\n  %251 = icmp eq i8* %250, %120\n  br i1 %251, label %252, label %266\n\n252:                                              ; preds = %249\n  %253 = load i64, i64* %123, align 8, !tbaa !8\n  %254 = icmp eq i64 %253, 0\n  br i1 %254, label %261, label %255\n\n255:                                              ; preds = %252\n  %256 = load i8*, i8** %15, align 8, !tbaa !15\n  %257 = icmp eq i64 %253, 1\n  br i1 %257, label %258, label %260\n\n258:                                              ; preds = %255\n  %259 = load i8, i8* %120, align 8, !tbaa !11\n  store i8 %259, i8* %256, align 1, !tbaa !11\n  br label %261\n\n260:                                              ; preds = %255\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %256, i8* nonnull align 8 %120, i64 %253, i1 false) #7\n  br label %261\n\n261:                                              ; preds = %260, %258, %252\n  %262 = load i64, i64* %123, align 8, !tbaa !8\n  store i64 %262, i64* %16, align 8, !tbaa !8\n  %263 = load i8*, i8** %15, align 8, !tbaa !15\n  %264 = getelementptr inbounds i8, i8* %263, i64 %262\n  store i8 0, i8* %264, align 1, !tbaa !11\n  %265 = load i8*, i8** %121, align 8, !tbaa !15\n  br label %275\n\n266:                                              ; preds = %249\n  %267 = load i8*, i8** %15, align 8, !tbaa !15\n  %268 = icmp eq i8* %267, %14\n  %269 = load i64, i64* %115, align 8\n  store i8* %250, i8** %15, align 8, !tbaa !15\n  %270 = load <2 x i64>, <2 x i64>* %131, align 8, !tbaa !11\n  store <2 x i64> %270, <2 x i64>* %132, align 8, !tbaa !11\n  %271 = icmp eq i8* %267, null\n  %272 = or i1 %268, %271\n  br i1 %272, label %274, label %273\n\n273:                                              ; preds = %266\n  store i8* %267, i8** %121, align 8, !tbaa !15\n  store i64 %269, i64* %122, align 8, !tbaa !11\n  br label %275\n\n274:                                              ; preds = %266\n  store %union.anon* %117, %union.anon** %118, align 8, !tbaa !15\n  br label %275\n\n275:                                              ; preds = %261, %273, %274\n  %276 = phi i8* [ %265, %261 ], [ %267, %273 ], [ %120, %274 ]\n  store i64 0, i64* %123, align 8, !tbaa !8\n  store i8 0, i8* %276, align 1, !tbaa !11\n  %277 = load i8*, i8** %121, align 8, !tbaa !15\n  %278 = icmp eq i8* %277, %120\n  br i1 %278, label %280, label %279\n\n279:                                              ; preds = %275\n  call void @_ZdlPv(i8* %277) #7\n  br label %280\n\n280:                                              ; preds = %275, %279\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %116) #7\n  %281 = load i64, i64* %22, align 8, !tbaa !8\n  %282 = invoke nonnull align 8 dereferenceable(32) %\"class.std::__cxx11::basic_string\"* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %7, i64 0, i64 %281, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str, i64 0, i64 0), i64 0)\n          to label %347 unwind label %218\n\n283:                                              ; preds = %228\n  %284 = landingpad { i8*, i32 }\n          cleanup\n  br label %285\n\n285:                                              ; preds = %244, %248, %283\n  %286 = phi { i8*, i32 } [ %284, %283 ], [ %245, %248 ], [ %245, %244 ]\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %116) #7\n  br label %351\n\n287:                                              ; preds = %142\n  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %98) #7\n  call void @llvm.experimental.noalias.scope.decl(metadata !24)\n  store %union.anon* %99, %union.anon** %100, align 8, !tbaa !3, !alias.scope !24\n  %288 = load i8*, i8** %21, align 8, !tbaa !15, !noalias !24\n  %289 = load i64, i64* %22, align 8, !tbaa !8, !noalias !24\n  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %101) #7, !noalias !24\n  store i64 %289, i64* %3, align 8, !tbaa !16, !noalias !24\n  %290 = icmp ugt i64 %289, 15\n  br i1 %290, label %291, label %295\n\n291:                                              ; preds = %287\n  %292 = invoke i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %11, i64* nonnull align 8 dereferenceable(8) %3, i64 0)\n          to label %293 unwind label %343\n\n293:                                              ; preds = %291\n  store i8* %292, i8** %103, align 8, !tbaa !15, !alias.scope !24\n  %294 = load i64, i64* %3, align 8, !tbaa !16, !noalias !24\n  store i64 %294, i64* %104, align 8, !tbaa !11, !alias.scope !24\n  br label %295\n\n295:                                              ; preds = %287, %293\n  %296 = phi i8* [ %292, %293 ], [ %102, %287 ]\n  switch i64 %289, label %299 [\n    i64 1, label %297\n    i64 0, label %300\n  ]\n\n297:                                              ; preds = %295\n  %298 = load i8, i8* %288, align 1, !tbaa !11\n  store i8 %298, i8* %296, align 1, !tbaa !11\n  br label %300\n\n299:                                              ; preds = %295\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %296, i8* align 1 %288, i64 %289, i1 false) #7\n  br label %300\n\n300:                                              ; preds = %299, %297, %295\n  %301 = load i64, i64* %3, align 8, !tbaa !16, !noalias !24\n  store i64 %301, i64* %105, align 8, !tbaa !8, !alias.scope !24\n  %302 = load i8*, i8** %103, align 8, !tbaa !15, !alias.scope !24\n  %303 = getelementptr inbounds i8, i8* %302, i64 %301\n  store i8 0, i8* %303, align 1, !tbaa !11\n  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %101) #7, !noalias !24\n  %304 = load i64, i64* %105, align 8, !tbaa !8, !alias.scope !24\n  %305 = invoke nonnull align 8 dereferenceable(32) %\"class.std::__cxx11::basic_string\"* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEmmmc(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %11, i64 %304, i64 0, i64 1, i8 signext %146)\n          to label %311 unwind label %306\n\n306:                                              ; preds = %300\n  %307 = landingpad { i8*, i32 }\n          cleanup\n  %308 = load i8*, i8** %103, align 8, !tbaa !15, !alias.scope !24\n  %309 = icmp eq i8* %308, %102\n  br i1 %309, label %345, label %310\n\n310:                                              ; preds = %306\n  call void @_ZdlPv(i8* %308) #7\n  br label %345\n\n311:                                              ; preds = %300\n  %312 = load i8*, i8** %103, align 8, !tbaa !15\n  %313 = icmp eq i8* %312, %102\n  br i1 %313, label %314, label %328\n\n314:                                              ; preds = %311\n  %315 = load i64, i64* %105, align 8, !tbaa !8\n  %316 = icmp eq i64 %315, 0\n  br i1 %316, label %323, label %317\n\n317:                                              ; preds = %314\n  %318 = load i8*, i8** %21, align 8, !tbaa !15\n  %319 = icmp eq i64 %315, 1\n  br i1 %319, label %320, label %322\n\n320:                                              ; preds = %317\n  %321 = load i8, i8* %102, align 8, !tbaa !11\n  store i8 %321, i8* %318, align 1, !tbaa !11\n  br label %323\n\n322:                                              ; preds = %317\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %318, i8* nonnull align 8 %102, i64 %315, i1 false) #7\n  br label %323\n\n323:                                              ; preds = %322, %320, %314\n  %324 = load i64, i64* %105, align 8, !tbaa !8\n  store i64 %324, i64* %22, align 8, !tbaa !8\n  %325 = load i8*, i8** %21, align 8, !tbaa !15\n  %326 = getelementptr inbounds i8, i8* %325, i64 %324\n  store i8 0, i8* %326, align 1, !tbaa !11\n  %327 = load i8*, i8** %103, align 8, !tbaa !15\n  br label %337\n\n328:                                              ; preds = %311\n  %329 = load i8*, i8** %21, align 8, !tbaa !15\n  %330 = icmp eq i8* %329, %20\n  %331 = load i64, i64* %106, align 8\n  store i8* %312, i8** %21, align 8, !tbaa !15\n  %332 = load <2 x i64>, <2 x i64>* %127, align 8, !tbaa !11\n  store <2 x i64> %332, <2 x i64>* %128, align 8, !tbaa !11\n  %333 = icmp eq i8* %329, null\n  %334 = or i1 %330, %333\n  br i1 %334, label %336, label %335\n\n335:                                              ; preds = %328\n  store i8* %329, i8** %103, align 8, !tbaa !15\n  store i64 %331, i64* %104, align 8, !tbaa !11\n  br label %337\n\n336:                                              ; preds = %328\n  store %union.anon* %99, %union.anon** %100, align 8, !tbaa !15\n  br label %337\n\n337:                                              ; preds = %323, %335, %336\n  %338 = phi i8* [ %327, %323 ], [ %329, %335 ], [ %102, %336 ]\n  store i64 0, i64* %105, align 8, !tbaa !8\n  store i8 0, i8* %338, align 1, !tbaa !11\n  %339 = load i8*, i8** %103, align 8, !tbaa !15\n  %340 = icmp eq i8* %339, %102\n  br i1 %340, label %342, label %341\n\n341:                                              ; preds = %337\n  call void @_ZdlPv(i8* %339) #7\n  br label %342\n\n342:                                              ; preds = %337, %341\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %98) #7\n  br label %347\n\n343:                                              ; preds = %291\n  %344 = landingpad { i8*, i32 }\n          cleanup\n  br label %345\n\n345:                                              ; preds = %306, %310, %343\n  %346 = phi { i8*, i32 } [ %344, %343 ], [ %307, %310 ], [ %307, %306 ]\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %98) #7\n  br label %351\n\n347:                                              ; preds = %280, %342\n  %348 = add nuw i64 %143, 1\n  %349 = load i64, i64* %28, align 8, !tbaa !8\n  %350 = icmp ugt i64 %349, %348\n  br i1 %350, label %142, label %133, !llvm.loop !27\n\n351:                                              ; preds = %218, %222, %285, %345, %140\n  %352 = phi { i8*, i32 } [ %141, %140 ], [ %219, %218 ], [ %286, %285 ], [ %223, %222 ], [ %346, %345 ]\n  %353 = load i8*, i8** %21, align 8, !tbaa !15\n  %354 = icmp eq i8* %353, %20\n  br i1 %354, label %356, label %355\n\n355:                                              ; preds = %351\n  call void @_ZdlPv(i8* %353) #7\n  br label %356\n\n356:                                              ; preds = %355, %351\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %17) #7\n  %357 = load i8*, i8** %15, align 8, !tbaa !15\n  %358 = icmp eq i8* %357, %14\n  br i1 %358, label %360, label %359\n\n359:                                              ; preds = %356\n  call void @_ZdlPv(i8* %357) #7\n  br label %360\n\n360:                                              ; preds = %359, %356\n  resume { i8*, i32 } %352\n}\n\n; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn\ndeclare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1\n\ndeclare dso_local i32 @__gxx_personality_v0(...)\n\n; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn\ndeclare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1\n\n; Function Attrs: nobuiltin nounwind\ndeclare dso_local void @_ZdlPv(i8*) local_unnamed_addr #2\n\ndeclare dso_local i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32), i64* nonnull align 8 dereferenceable(8), i64) local_unnamed_addr #3\n\n; Function Attrs: argmemonly mustprogress nofree nounwind willreturn\ndeclare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #4\n\ndeclare dso_local nonnull align 8 dereferenceable(32) %\"class.std::__cxx11::basic_string\"* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEmmmc(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32), i64, i64, i64, i8 signext) local_unnamed_addr #3\n\n; Function Attrs: uwtable\ndefine linkonce_odr dso_local void @_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEElNS0_5__ops15_Iter_less_iterEEvT_SC_T0_T1_(i8* %0, i8* %1, i64 %2) local_unnamed_addr #0 comdat {\n  %4 = alloca %\"struct.__gnu_cxx::__ops::_Iter_less_iter\", align 1\n  %5 = ptrtoint i8* %0 to i64\n  %6 = getelementptr inbounds i8, i8* %0, i64 1\n  %7 = ptrtoint i8* %1 to i64\n  %8 = sub i64 %7, %5\n  %9 = icmp sgt i64 %8, 16\n  br i1 %9, label %10, label %122\n\n10:                                               ; preds = %3, %118\n  %11 = phi i64 [ %120, %118 ], [ %8, %3 ]\n  %12 = phi i64 [ %74, %118 ], [ %2, %3 ]\n  %13 = phi i8* [ %106, %118 ], [ %1, %3 ]\n  %14 = icmp eq i64 %12, 0\n  br i1 %14, label %15, label %73\n\n15:                                               ; preds = %10\n  %16 = getelementptr inbounds %\"struct.__gnu_cxx::__ops::_Iter_less_iter\", %\"struct.__gnu_cxx::__ops::_Iter_less_iter\"* %4, i64 0, i32 0\n  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %16)\n  call void @_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS0_5__ops15_Iter_less_iterEEvT_SC_RT0_(i8* %0, i8* %13, %\"struct.__gnu_cxx::__ops::_Iter_less_iter\"* nonnull align 1 dereferenceable(1) %4)\n  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %16)\n  br label %17\n\n17:                                               ; preds = %15, %69\n  %18 = phi i8* [ %19, %69 ], [ %13, %15 ]\n  %19 = getelementptr inbounds i8, i8* %18, i64 -1\n  %20 = load i8, i8* %19, align 1, !tbaa !11\n  %21 = load i8, i8* %0, align 1, !tbaa !11\n  store i8 %21, i8* %19, align 1, !tbaa !11\n  %22 = ptrtoint i8* %19 to i64\n  %23 = sub i64 %22, %5\n  %24 = add nsw i64 %23, -1\n  %25 = sdiv i64 %24, 2\n  %26 = icmp sgt i64 %23, 2\n  br i1 %26, label %27, label %42\n\n27:                                               ; preds = %17, %27\n  %28 = phi i64 [ %37, %27 ], [ 0, %17 ]\n  %29 = shl i64 %28, 1\n  %30 = add i64 %29, 2\n  %31 = getelementptr inbounds i8, i8* %0, i64 %30\n  %32 = or i64 %29, 1\n  %33 = getelementptr inbounds i8, i8* %0, i64 %32\n  %34 = load i8, i8* %31, align 1, !tbaa !11\n  %35 = load i8, i8* %33, align 1, !tbaa !11\n  %36 = icmp slt i8 %34, %35\n  %37 = select i1 %36, i64 %32, i64 %30\n  %38 = getelementptr inbounds i8, i8* %0, i64 %37\n  %39 = load i8, i8* %38, align 1, !tbaa !11\n  %40 = getelementptr inbounds i8, i8* %0, i64 %28\n  store i8 %39, i8* %40, align 1, !tbaa !11\n  %41 = icmp slt i64 %37, %25\n  br i1 %41, label %27, label %42, !llvm.loop !29\n\n42:                                               ; preds = %27, %17\n  %43 = phi i64 [ 0, %17 ], [ %37, %27 ]\n  %44 = and i64 %23, 1\n  %45 = icmp eq i64 %44, 0\n  br i1 %45, label %46, label %56\n\n46:                                               ; preds = %42\n  %47 = add nsw i64 %23, -2\n  %48 = sdiv i64 %47, 2\n  %49 = icmp eq i64 %43, %48\n  br i1 %49, label %50, label %56\n\n50:                                               ; preds = %46\n  %51 = shl i64 %43, 1\n  %52 = or i64 %51, 1\n  %53 = getelementptr inbounds i8, i8* %0, i64 %52\n  %54 = load i8, i8* %53, align 1, !tbaa !11\n  %55 = getelementptr inbounds i8, i8* %0, i64 %43\n  store i8 %54, i8* %55, align 1, !tbaa !11\n  br label %56\n\n56:                                               ; preds = %50, %46, %42\n  %57 = phi i64 [ %52, %50 ], [ %43, %46 ], [ %43, %42 ]\n  %58 = icmp sgt i64 %57, 0\n  br i1 %58, label %59, label %69\n\n59:                                               ; preds = %56, %66\n  %60 = phi i64 [ %62, %66 ], [ %57, %56 ]\n  %61 = add nsw i64 %60, -1\n  %62 = lshr i64 %61, 1\n  %63 = getelementptr inbounds i8, i8* %0, i64 %62\n  %64 = load i8, i8* %63, align 1, !tbaa !11\n  %65 = icmp slt i8 %64, %20\n  br i1 %65, label %66, label %69\n\n66:                                               ; preds = %59\n  %67 = getelementptr inbounds i8, i8* %0, i64 %60\n  store i8 %64, i8* %67, align 1, !tbaa !11\n  %68 = icmp ult i64 %61, 2\n  br i1 %68, label %69, label %59, !llvm.loop !30\n\n69:                                               ; preds = %66, %59, %56\n  %70 = phi i64 [ %57, %56 ], [ %60, %59 ], [ 0, %66 ]\n  %71 = getelementptr inbounds i8, i8* %0, i64 %70\n  store i8 %20, i8* %71, align 1, !tbaa !11\n  %72 = icmp sgt i64 %23, 1\n  br i1 %72, label %17, label %122, !llvm.loop !31\n\n73:                                               ; preds = %10\n  %74 = add nsw i64 %12, -1\n  %75 = lshr i64 %11, 1\n  %76 = getelementptr inbounds i8, i8* %0, i64 %75\n  %77 = getelementptr inbounds i8, i8* %13, i64 -1\n  %78 = load i8, i8* %6, align 1, !tbaa !11\n  %79 = load i8, i8* %76, align 1, !tbaa !11\n  %80 = icmp slt i8 %78, %79\n  %81 = load i8, i8* %77, align 1, !tbaa !11\n  br i1 %80, label %82, label %91\n\n82:                                               ; preds = %73\n  %83 = icmp slt i8 %79, %81\n  br i1 %83, label %84, label %86\n\n84:                                               ; preds = %82\n  %85 = load i8, i8* %0, align 1, !tbaa !11\n  store i8 %79, i8* %0, align 1, !tbaa !11\n  store i8 %85, i8* %76, align 1, !tbaa !11\n  br label %100\n\n86:                                               ; preds = %82\n  %87 = icmp slt i8 %78, %81\n  %88 = load i8, i8* %0, align 1, !tbaa !11\n  br i1 %87, label %89, label %90\n\n89:                                               ; preds = %86\n  store i8 %81, i8* %0, align 1, !tbaa !11\n  store i8 %88, i8* %77, align 1, !tbaa !11\n  br label %100\n\n90:                                               ; preds = %86\n  store i8 %78, i8* %0, align 1, !tbaa !11\n  store i8 %88, i8* %6, align 1, !tbaa !11\n  br label %100\n\n91:                                               ; preds = %73\n  %92 = icmp slt i8 %78, %81\n  br i1 %92, label %93, label %95\n\n93:                                               ; preds = %91\n  %94 = load i8, i8* %0, align 1, !tbaa !11\n  store i8 %78, i8* %0, align 1, !tbaa !11\n  store i8 %94, i8* %6, align 1, !tbaa !11\n  br label %100\n\n95:                                               ; preds = %91\n  %96 = icmp slt i8 %79, %81\n  %97 = load i8, i8* %0, align 1, !tbaa !11\n  br i1 %96, label %98, label %99\n\n98:                                               ; preds = %95\n  store i8 %81, i8* %0, align 1, !tbaa !11\n  store i8 %97, i8* %77, align 1, !tbaa !11\n  br label %100\n\n99:                                               ; preds = %95\n  store i8 %79, i8* %0, align 1, !tbaa !11\n  store i8 %97, i8* %76, align 1, !tbaa !11\n  br label %100\n\n100:                                              ; preds = %99, %98, %93, %90, %89, %84\n  br label %101\n\n101:                                              ; preds = %100, %117\n  %102 = phi i8* [ %109, %117 ], [ %6, %100 ]\n  %103 = phi i8* [ %112, %117 ], [ %13, %100 ]\n  %104 = load i8, i8* %0, align 1, !tbaa !11\n  br label %105\n\n105:                                              ; preds = %105, %101\n  %106 = phi i8* [ %102, %101 ], [ %109, %105 ]\n  %107 = load i8, i8* %106, align 1, !tbaa !11\n  %108 = icmp slt i8 %107, %104\n  %109 = getelementptr inbounds i8, i8* %106, i64 1\n  br i1 %108, label %105, label %110, !llvm.loop !32\n\n110:                                              ; preds = %105, %110\n  %111 = phi i8* [ %112, %110 ], [ %103, %105 ]\n  %112 = getelementptr inbounds i8, i8* %111, i64 -1\n  %113 = load i8, i8* %112, align 1, !tbaa !11\n  %114 = icmp slt i8 %104, %113\n  br i1 %114, label %110, label %115, !llvm.loop !33\n\n115:                                              ; preds = %110\n  %116 = icmp ult i8* %106, %112\n  br i1 %116, label %117, label %118\n\n117:                                              ; preds = %115\n  store i8 %113, i8* %106, align 1, !tbaa !11\n  store i8 %107, i8* %112, align 1, !tbaa !11\n  br label %101, !llvm.loop !34\n\n118:                                              ; preds = %115\n  tail call void @_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEElNS0_5__ops15_Iter_less_iterEEvT_SC_T0_T1_(i8* nonnull %106, i8* %13, i64 %74)\n  %119 = ptrtoint i8* %106 to i64\n  %120 = sub i64 %119, %5\n  %121 = icmp sgt i64 %120, 16\n  br i1 %121, label %10, label %122, !llvm.loop !35\n\n122:                                              ; preds = %118, %69, %3\n  ret void\n}\n\n; Function Attrs: uwtable\ndefine linkonce_odr dso_local void @_ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS0_5__ops15_Iter_less_iterEEvT_SC_T0_(i8* %0, i8* %1) local_unnamed_addr #0 comdat {\n  %3 = ptrtoint i8* %1 to i64\n  %4 = ptrtoint i8* %0 to i64\n  %5 = sub i64 %3, %4\n  %6 = icmp sgt i64 %5, 16\n  br i1 %6, label %7, label %39\n\n7:                                                ; preds = %2\n  %8 = getelementptr inbounds i8, i8* %0, i64 1\n  %9 = load i8, i8* %8, align 1, !tbaa !11\n  %10 = load i8, i8* %0, align 1, !tbaa !11\n  %11 = icmp slt i8 %9, %10\n  br i1 %11, label %12, label %14\n\n12:                                               ; preds = %7\n  %13 = load i8, i8* %0, align 1\n  store i8 %13, i8* %8, align 1\n  br label %14\n\n14:                                               ; preds = %7, %12\n  %15 = phi i8* [ %0, %12 ], [ %8, %7 ]\n  store i8 %9, i8* %15, align 1, !tbaa !11\n  %16 = getelementptr inbounds i8, i8* %0, i64 2\n  %17 = load i8, i8* %16, align 1, !tbaa !11\n  %18 = load i8, i8* %0, align 1, !tbaa !11\n  %19 = icmp slt i8 %17, %18\n  br i1 %19, label %80, label %70\n\n20:                                               ; preds = %335, %345\n  %21 = phi i8* [ %347, %345 ], [ %336, %335 ]\n  %22 = load i8, i8* %21, align 1, !tbaa !11\n  %23 = getelementptr inbounds i8, i8* %21, i64 -1\n  %24 = load i8, i8* %23, align 1, !tbaa !11\n  %25 = icmp slt i8 %22, %24\n  br i1 %25, label %26, label %33\n\n26:                                               ; preds = %20, %26\n  %27 = phi i8 [ %31, %26 ], [ %24, %20 ]\n  %28 = phi i8* [ %30, %26 ], [ %23, %20 ]\n  %29 = phi i8* [ %28, %26 ], [ %21, %20 ]\n  store i8 %27, i8* %29, align 1, !tbaa !11\n  %30 = getelementptr inbounds i8, i8* %28, i64 -1\n  %31 = load i8, i8* %30, align 1, !tbaa !11\n  %32 = icmp slt i8 %22, %31\n  br i1 %32, label %26, label %33, !llvm.loop !36\n\n33:                                               ; preds = %26, %20\n  %34 = phi i8* [ %21, %20 ], [ %28, %26 ]\n  store i8 %22, i8* %34, align 1, !tbaa !11\n  %35 = getelementptr inbounds i8, i8* %21, i64 1\n  %36 = load i8, i8* %35, align 1, !tbaa !11\n  %37 = load i8, i8* %21, align 1, !tbaa !11\n  %38 = icmp slt i8 %36, %37\n  br i1 %38, label %338, label %345\n\n39:                                               ; preds = %2\n  %40 = icmp eq i8* %0, %1\n  br i1 %40, label %69, label %41\n\n41:                                               ; preds = %39\n  %42 = getelementptr inbounds i8, i8* %0, i64 1\n  %43 = icmp eq i8* %42, %1\n  br i1 %43, label %69, label %44\n\n44:                                               ; preds = %41, %65\n  %45 = phi i8* [ %67, %65 ], [ %42, %41 ]\n  %46 = phi i8* [ %45, %65 ], [ %0, %41 ]\n  %47 = load i8, i8* %45, align 1, !tbaa !11\n  %48 = load i8, i8* %0, align 1, !tbaa !11\n  %49 = icmp slt i8 %47, %48\n  br i1 %49, label %50, label %55\n\n50:                                               ; preds = %44\n  %51 = ptrtoint i8* %45 to i64\n  %52 = sub i64 %51, %4\n  %53 = icmp eq i64 %52, 0\n  br i1 %53, label %65, label %54\n\n54:                                               ; preds = %50\n  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* nonnull align 1 %42, i8* nonnull align 1 %0, i64 %52, i1 false) #7\n  br label %65\n\n55:                                               ; preds = %44\n  %56 = load i8, i8* %46, align 1, !tbaa !11\n  %57 = icmp slt i8 %47, %56\n  br i1 %57, label %58, label %65\n\n58:                                               ; preds = %55, %58\n  %59 = phi i8 [ %63, %58 ], [ %56, %55 ]\n  %60 = phi i8* [ %62, %58 ], [ %46, %55 ]\n  %61 = phi i8* [ %60, %58 ], [ %45, %55 ]\n  store i8 %59, i8* %61, align 1, !tbaa !11\n  %62 = getelementptr inbounds i8, i8* %60, i64 -1\n  %63 = load i8, i8* %62, align 1, !tbaa !11\n  %64 = icmp slt i8 %47, %63\n  br i1 %64, label %58, label %65, !llvm.loop !36\n\n65:                                               ; preds = %58, %55, %54, %50\n  %66 = phi i8* [ %0, %50 ], [ %0, %54 ], [ %45, %55 ], [ %60, %58 ]\n  store i8 %47, i8* %66, align 1, !tbaa !11\n  %67 = getelementptr inbounds i8, i8* %45, i64 1\n  %68 = icmp eq i8* %67, %1\n  br i1 %68, label %69, label %44, !llvm.loop !37\n\n69:                                               ; preds = %65, %335, %345, %41, %39, %311\n  ret void\n\n70:                                               ; preds = %14\n  %71 = load i8, i8* %8, align 1, !tbaa !11\n  %72 = icmp slt i8 %17, %71\n  br i1 %72, label %73, label %84\n\n73:                                               ; preds = %70, %73\n  %74 = phi i8 [ %78, %73 ], [ %71, %70 ]\n  %75 = phi i8* [ %77, %73 ], [ %8, %70 ]\n  %76 = phi i8* [ %75, %73 ], [ %16, %70 ]\n  store i8 %74, i8* %76, align 1, !tbaa !11\n  %77 = getelementptr inbounds i8, i8* %75, i64 -1\n  %78 = load i8, i8* %77, align 1, !tbaa !11\n  %79 = icmp slt i8 %17, %78\n  br i1 %79, label %73, label %84, !llvm.loop !36\n\n80:                                               ; preds = %14\n  %81 = bitcast i8* %0 to i16*\n  %82 = bitcast i8* %8 to i16*\n  %83 = load i16, i16* %81, align 1\n  store i16 %83, i16* %82, align 1\n  br label %84\n\n84:                                               ; preds = %73, %80, %70\n  %85 = phi i8* [ %0, %80 ], [ %16, %70 ], [ %75, %73 ]\n  store i8 %17, i8* %85, align 1, !tbaa !11\n  %86 = getelementptr inbounds i8, i8* %0, i64 3\n  %87 = load i8, i8* %86, align 1, !tbaa !11\n  %88 = load i8, i8* %0, align 1, !tbaa !11\n  %89 = icmp slt i8 %87, %88\n  br i1 %89, label %100, label %90\n\n90:                                               ; preds = %84\n  %91 = load i8, i8* %16, align 1, !tbaa !11\n  %92 = icmp slt i8 %87, %91\n  br i1 %92, label %93, label %101\n\n93:                                               ; preds = %90, %93\n  %94 = phi i8 [ %98, %93 ], [ %91, %90 ]\n  %95 = phi i8* [ %97, %93 ], [ %16, %90 ]\n  %96 = phi i8* [ %95, %93 ], [ %86, %90 ]\n  store i8 %94, i8* %96, align 1, !tbaa !11\n  %97 = getelementptr inbounds i8, i8* %95, i64 -1\n  %98 = load i8, i8* %97, align 1, !tbaa !11\n  %99 = icmp slt i8 %87, %98\n  br i1 %99, label %93, label %101, !llvm.loop !36\n\n100:                                              ; preds = %84\n  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* noundef nonnull align 1 dereferenceable(3) %8, i8* noundef nonnull align 1 dereferenceable(3) %0, i64 3, i1 false) #7\n  br label %101\n\n101:                                              ; preds = %93, %100, %90\n  %102 = phi i8* [ %0, %100 ], [ %86, %90 ], [ %95, %93 ]\n  store i8 %87, i8* %102, align 1, !tbaa !11\n  %103 = getelementptr inbounds i8, i8* %0, i64 4\n  %104 = load i8, i8* %103, align 1, !tbaa !11\n  %105 = load i8, i8* %0, align 1, !tbaa !11\n  %106 = icmp slt i8 %104, %105\n  br i1 %106, label %117, label %107\n\n107:                                              ; preds = %101\n  %108 = load i8, i8* %86, align 1, !tbaa !11\n  %109 = icmp slt i8 %104, %108\n  br i1 %109, label %110, label %121\n\n110:                                              ; preds = %107, %110\n  %111 = phi i8 [ %115, %110 ], [ %108, %107 ]\n  %112 = phi i8* [ %114, %110 ], [ %86, %107 ]\n  %113 = phi i8* [ %112, %110 ], [ %103, %107 ]\n  store i8 %111, i8* %113, align 1, !tbaa !11\n  %114 = getelementptr inbounds i8, i8* %112, i64 -1\n  %115 = load i8, i8* %114, align 1, !tbaa !11\n  %116 = icmp slt i8 %104, %115\n  br i1 %116, label %110, label %121, !llvm.loop !36\n\n117:                                              ; preds = %101\n  %118 = bitcast i8* %0 to i32*\n  %119 = bitcast i8* %8 to i32*\n  %120 = load i32, i32* %118, align 1\n  store i32 %120, i32* %119, align 1\n  br label %121\n\n121:                                              ; preds = %110, %117, %107\n  %122 = phi i8* [ %0, %117 ], [ %103, %107 ], [ %112, %110 ]\n  store i8 %104, i8* %122, align 1, !tbaa !11\n  %123 = getelementptr inbounds i8, i8* %0, i64 5\n  %124 = load i8, i8* %123, align 1, !tbaa !11\n  %125 = load i8, i8* %0, align 1, !tbaa !11\n  %126 = icmp slt i8 %124, %125\n  br i1 %126, label %137, label %127\n\n127:                                              ; preds = %121\n  %128 = load i8, i8* %103, align 1, !tbaa !11\n  %129 = icmp slt i8 %124, %128\n  br i1 %129, label %130, label %138\n\n130:                                              ; preds = %127, %130\n  %131 = phi i8 [ %135, %130 ], [ %128, %127 ]\n  %132 = phi i8* [ %134, %130 ], [ %103, %127 ]\n  %133 = phi i8* [ %132, %130 ], [ %123, %127 ]\n  store i8 %131, i8* %133, align 1, !tbaa !11\n  %134 = getelementptr inbounds i8, i8* %132, i64 -1\n  %135 = load i8, i8* %134, align 1, !tbaa !11\n  %136 = icmp slt i8 %124, %135\n  br i1 %136, label %130, label %138, !llvm.loop !36\n\n137:                                              ; preds = %121\n  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* noundef nonnull align 1 dereferenceable(5) %8, i8* noundef nonnull align 1 dereferenceable(5) %0, i64 5, i1 false) #7\n  br label %138\n\n138:                                              ; preds = %130, %137, %127\n  %139 = phi i8* [ %0, %137 ], [ %123, %127 ], [ %132, %130 ]\n  store i8 %124, i8* %139, align 1, !tbaa !11\n  %140 = getelementptr inbounds i8, i8* %0, i64 6\n  %141 = load i8, i8* %140, align 1, !tbaa !11\n  %142 = load i8, i8* %0, align 1, !tbaa !11\n  %143 = icmp slt i8 %141, %142\n  br i1 %143, label %154, label %144\n\n144:                                              ; preds = %138\n  %145 = load i8, i8* %123, align 1, !tbaa !11\n  %146 = icmp slt i8 %141, %145\n  br i1 %146, label %147, label %155\n\n147:                                              ; preds = %144, %147\n  %148 = phi i8 [ %152, %147 ], [ %145, %144 ]\n  %149 = phi i8* [ %151, %147 ], [ %123, %144 ]\n  %150 = phi i8* [ %149, %147 ], [ %140, %144 ]\n  store i8 %148, i8* %150, align 1, !tbaa !11\n  %151 = getelementptr inbounds i8, i8* %149, i64 -1\n  %152 = load i8, i8* %151, align 1, !tbaa !11\n  %153 = icmp slt i8 %141, %152\n  br i1 %153, label %147, label %155, !llvm.loop !36\n\n154:                                              ; preds = %138\n  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* noundef nonnull align 1 dereferenceable(6) %8, i8* noundef nonnull align 1 dereferenceable(6) %0, i64 6, i1 false) #7\n  br label %155\n\n155:                                              ; preds = %147, %154, %144\n  %156 = phi i8* [ %0, %154 ], [ %140, %144 ], [ %149, %147 ]\n  store i8 %141, i8* %156, align 1, !tbaa !11\n  %157 = getelementptr inbounds i8, i8* %0, i64 7\n  %158 = load i8, i8* %157, align 1, !tbaa !11\n  %159 = load i8, i8* %0, align 1, !tbaa !11\n  %160 = icmp slt i8 %158, %159\n  br i1 %160, label %171, label %161\n\n161:                                              ; preds = %155\n  %162 = load i8, i8* %140, align 1, !tbaa !11\n  %163 = icmp slt i8 %158, %162\n  br i1 %163, label %164, label %172\n\n164:                                              ; preds = %161, %164\n  %165 = phi i8 [ %169, %164 ], [ %162, %161 ]\n  %166 = phi i8* [ %168, %164 ], [ %140, %161 ]\n  %167 = phi i8* [ %166, %164 ], [ %157, %161 ]\n  store i8 %165, i8* %167, align 1, !tbaa !11\n  %168 = getelementptr inbounds i8, i8* %166, i64 -1\n  %169 = load i8, i8* %168, align 1, !tbaa !11\n  %170 = icmp slt i8 %158, %169\n  br i1 %170, label %164, label %172, !llvm.loop !36\n\n171:                                              ; preds = %155\n  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* noundef nonnull align 1 dereferenceable(7) %8, i8* noundef nonnull align 1 dereferenceable(7) %0, i64 7, i1 false) #7\n  br label %172\n\n172:                                              ; preds = %164, %171, %161\n  %173 = phi i8* [ %0, %171 ], [ %157, %161 ], [ %166, %164 ]\n  store i8 %158, i8* %173, align 1, !tbaa !11\n  %174 = getelementptr inbounds i8, i8* %0, i64 8\n  %175 = load i8, i8* %174, align 1, !tbaa !11\n  %176 = load i8, i8* %0, align 1, !tbaa !11\n  %177 = icmp slt i8 %175, %176\n  br i1 %177, label %188, label %178\n\n178:                                              ; preds = %172\n  %179 = load i8, i8* %157, align 1, !tbaa !11\n  %180 = icmp slt i8 %175, %179\n  br i1 %180, label %181, label %192\n\n181:                                              ; preds = %178, %181\n  %182 = phi i8 [ %186, %181 ], [ %179, %178 ]\n  %183 = phi i8* [ %185, %181 ], [ %157, %178 ]\n  %184 = phi i8* [ %183, %181 ], [ %174, %178 ]\n  store i8 %182, i8* %184, align 1, !tbaa !11\n  %185 = getelementptr inbounds i8, i8* %183, i64 -1\n  %186 = load i8, i8* %185, align 1, !tbaa !11\n  %187 = icmp slt i8 %175, %186\n  br i1 %187, label %181, label %192, !llvm.loop !36\n\n188:                                              ; preds = %172\n  %189 = bitcast i8* %0 to i64*\n  %190 = bitcast i8* %8 to i64*\n  %191 = load i64, i64* %189, align 1\n  store i64 %191, i64* %190, align 1\n  br label %192\n\n192:                                              ; preds = %181, %188, %178\n  %193 = phi i8* [ %0, %188 ], [ %174, %178 ], [ %183, %181 ]\n  store i8 %175, i8* %193, align 1, !tbaa !11\n  %194 = getelementptr inbounds i8, i8* %0, i64 9\n  %195 = load i8, i8* %194, align 1, !tbaa !11\n  %196 = load i8, i8* %0, align 1, !tbaa !11\n  %197 = icmp slt i8 %195, %196\n  br i1 %197, label %208, label %198\n\n198:                                              ; preds = %192\n  %199 = load i8, i8* %174, align 1, !tbaa !11\n  %200 = icmp slt i8 %195, %199\n  br i1 %200, label %201, label %209\n\n201:                                              ; preds = %198, %201\n  %202 = phi i8 [ %206, %201 ], [ %199, %198 ]\n  %203 = phi i8* [ %205, %201 ], [ %174, %198 ]\n  %204 = phi i8* [ %203, %201 ], [ %194, %198 ]\n  store i8 %202, i8* %204, align 1, !tbaa !11\n  %205 = getelementptr inbounds i8, i8* %203, i64 -1\n  %206 = load i8, i8* %205, align 1, !tbaa !11\n  %207 = icmp slt i8 %195, %206\n  br i1 %207, label %201, label %209, !llvm.loop !36\n\n208:                                              ; preds = %192\n  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* noundef nonnull align 1 dereferenceable(9) %8, i8* noundef nonnull align 1 dereferenceable(9) %0, i64 9, i1 false) #7\n  br label %209\n\n209:                                              ; preds = %201, %208, %198\n  %210 = phi i8* [ %0, %208 ], [ %194, %198 ], [ %203, %201 ]\n  store i8 %195, i8* %210, align 1, !tbaa !11\n  %211 = getelementptr inbounds i8, i8* %0, i64 10\n  %212 = load i8, i8* %211, align 1, !tbaa !11\n  %213 = load i8, i8* %0, align 1, !tbaa !11\n  %214 = icmp slt i8 %212, %213\n  br i1 %214, label %225, label %215\n\n215:                                              ; preds = %209\n  %216 = load i8, i8* %194, align 1, !tbaa !11\n  %217 = icmp slt i8 %212, %216\n  br i1 %217, label %218, label %226\n\n218:                                              ; preds = %215, %218\n  %219 = phi i8 [ %223, %218 ], [ %216, %215 ]\n  %220 = phi i8* [ %222, %218 ], [ %194, %215 ]\n  %221 = phi i8* [ %220, %218 ], [ %211, %215 ]\n  store i8 %219, i8* %221, align 1, !tbaa !11\n  %222 = getelementptr inbounds i8, i8* %220, i64 -1\n  %223 = load i8, i8* %222, align 1, !tbaa !11\n  %224 = icmp slt i8 %212, %223\n  br i1 %224, label %218, label %226, !llvm.loop !36\n\n225:                                              ; preds = %209\n  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* noundef nonnull align 1 dereferenceable(10) %8, i8* noundef nonnull align 1 dereferenceable(10) %0, i64 10, i1 false) #7\n  br label %226\n\n226:                                              ; preds = %218, %225, %215\n  %227 = phi i8* [ %0, %225 ], [ %211, %215 ], [ %220, %218 ]\n  store i8 %212, i8* %227, align 1, !tbaa !11\n  %228 = getelementptr inbounds i8, i8* %0, i64 11\n  %229 = load i8, i8* %228, align 1, !tbaa !11\n  %230 = load i8, i8* %0, align 1, !tbaa !11\n  %231 = icmp slt i8 %229, %230\n  br i1 %231, label %242, label %232\n\n232:                                              ; preds = %226\n  %233 = load i8, i8* %211, align 1, !tbaa !11\n  %234 = icmp slt i8 %229, %233\n  br i1 %234, label %235, label %243\n\n235:                                              ; preds = %232, %235\n  %236 = phi i8 [ %240, %235 ], [ %233, %232 ]\n  %237 = phi i8* [ %239, %235 ], [ %211, %232 ]\n  %238 = phi i8* [ %237, %235 ], [ %228, %232 ]\n  store i8 %236, i8* %238, align 1, !tbaa !11\n  %239 = getelementptr inbounds i8, i8* %237, i64 -1\n  %240 = load i8, i8* %239, align 1, !tbaa !11\n  %241 = icmp slt i8 %229, %240\n  br i1 %241, label %235, label %243, !llvm.loop !36\n\n242:                                              ; preds = %226\n  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* noundef nonnull align 1 dereferenceable(11) %8, i8* noundef nonnull align 1 dereferenceable(11) %0, i64 11, i1 false) #7\n  br label %243\n\n243:                                              ; preds = %235, %242, %232\n  %244 = phi i8* [ %0, %242 ], [ %228, %232 ], [ %237, %235 ]\n  store i8 %229, i8* %244, align 1, !tbaa !11\n  %245 = getelementptr inbounds i8, i8* %0, i64 12\n  %246 = load i8, i8* %245, align 1, !tbaa !11\n  %247 = load i8, i8* %0, align 1, !tbaa !11\n  %248 = icmp slt i8 %246, %247\n  br i1 %248, label %259, label %249\n\n249:                                              ; preds = %243\n  %250 = load i8, i8* %228, align 1, !tbaa !11\n  %251 = icmp slt i8 %246, %250\n  br i1 %251, label %252, label %260\n\n252:                                              ; preds = %249, %252\n  %253 = phi i8 [ %257, %252 ], [ %250, %249 ]\n  %254 = phi i8* [ %256, %252 ], [ %228, %249 ]\n  %255 = phi i8* [ %254, %252 ], [ %245, %249 ]\n  store i8 %253, i8* %255, align 1, !tbaa !11\n  %256 = getelementptr inbounds i8, i8* %254, i64 -1\n  %257 = load i8, i8* %256, align 1, !tbaa !11\n  %258 = icmp slt i8 %246, %257\n  br i1 %258, label %252, label %260, !llvm.loop !36\n\n259:                                              ; preds = %243\n  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* noundef nonnull align 1 dereferenceable(12) %8, i8* noundef nonnull align 1 dereferenceable(12) %0, i64 12, i1 false) #7\n  br label %260\n\n260:                                              ; preds = %252, %259, %249\n  %261 = phi i8* [ %0, %259 ], [ %245, %249 ], [ %254, %252 ]\n  store i8 %246, i8* %261, align 1, !tbaa !11\n  %262 = getelementptr inbounds i8, i8* %0, i64 13\n  %263 = load i8, i8* %262, align 1, !tbaa !11\n  %264 = load i8, i8* %0, align 1, !tbaa !11\n  %265 = icmp slt i8 %263, %264\n  br i1 %265, label %276, label %266\n\n266:                                              ; preds = %260\n  %267 = load i8, i8* %245, align 1, !tbaa !11\n  %268 = icmp slt i8 %263, %267\n  br i1 %268, label %269, label %277\n\n269:                                              ; preds = %266, %269\n  %270 = phi i8 [ %274, %269 ], [ %267, %266 ]\n  %271 = phi i8* [ %273, %269 ], [ %245, %266 ]\n  %272 = phi i8* [ %271, %269 ], [ %262, %266 ]\n  store i8 %270, i8* %272, align 1, !tbaa !11\n  %273 = getelementptr inbounds i8, i8* %271, i64 -1\n  %274 = load i8, i8* %273, align 1, !tbaa !11\n  %275 = icmp slt i8 %263, %274\n  br i1 %275, label %269, label %277, !llvm.loop !36\n\n276:                                              ; preds = %260\n  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* noundef nonnull align 1 dereferenceable(13) %8, i8* noundef nonnull align 1 dereferenceable(13) %0, i64 13, i1 false) #7\n  br label %277\n\n277:                                              ; preds = %269, %276, %266\n  %278 = phi i8* [ %0, %276 ], [ %262, %266 ], [ %271, %269 ]\n  store i8 %263, i8* %278, align 1, !tbaa !11\n  %279 = getelementptr inbounds i8, i8* %0, i64 14\n  %280 = load i8, i8* %279, align 1, !tbaa !11\n  %281 = load i8, i8* %0, align 1, !tbaa !11\n  %282 = icmp slt i8 %280, %281\n  br i1 %282, label %293, label %283\n\n283:                                              ; preds = %277\n  %284 = load i8, i8* %262, align 1, !tbaa !11\n  %285 = icmp slt i8 %280, %284\n  br i1 %285, label %286, label %294\n\n286:                                              ; preds = %283, %286\n  %287 = phi i8 [ %291, %286 ], [ %284, %283 ]\n  %288 = phi i8* [ %290, %286 ], [ %262, %283 ]\n  %289 = phi i8* [ %288, %286 ], [ %279, %283 ]\n  store i8 %287, i8* %289, align 1, !tbaa !11\n  %290 = getelementptr inbounds i8, i8* %288, i64 -1\n  %291 = load i8, i8* %290, align 1, !tbaa !11\n  %292 = icmp slt i8 %280, %291\n  br i1 %292, label %286, label %294, !llvm.loop !36\n\n293:                                              ; preds = %277\n  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* noundef nonnull align 1 dereferenceable(14) %8, i8* noundef nonnull align 1 dereferenceable(14) %0, i64 14, i1 false) #7\n  br label %294\n\n294:                                              ; preds = %286, %293, %283\n  %295 = phi i8* [ %0, %293 ], [ %279, %283 ], [ %288, %286 ]\n  store i8 %280, i8* %295, align 1, !tbaa !11\n  %296 = getelementptr inbounds i8, i8* %0, i64 15\n  %297 = load i8, i8* %296, align 1, !tbaa !11\n  %298 = load i8, i8* %0, align 1, !tbaa !11\n  %299 = icmp slt i8 %297, %298\n  br i1 %299, label %310, label %300\n\n300:                                              ; preds = %294\n  %301 = load i8, i8* %279, align 1, !tbaa !11\n  %302 = icmp slt i8 %297, %301\n  br i1 %302, label %303, label %311\n\n303:                                              ; preds = %300, %303\n  %304 = phi i8 [ %308, %303 ], [ %301, %300 ]\n  %305 = phi i8* [ %307, %303 ], [ %279, %300 ]\n  %306 = phi i8* [ %305, %303 ], [ %296, %300 ]\n  store i8 %304, i8* %306, align 1, !tbaa !11\n  %307 = getelementptr inbounds i8, i8* %305, i64 -1\n  %308 = load i8, i8* %307, align 1, !tbaa !11\n  %309 = icmp slt i8 %297, %308\n  br i1 %309, label %303, label %311, !llvm.loop !36\n\n310:                                              ; preds = %294\n  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* noundef nonnull align 1 dereferenceable(15) %8, i8* noundef nonnull align 1 dereferenceable(15) %0, i64 15, i1 false) #7\n  br label %311\n\n311:                                              ; preds = %303, %310, %300\n  %312 = phi i8* [ %0, %310 ], [ %296, %300 ], [ %305, %303 ]\n  store i8 %297, i8* %312, align 1, !tbaa !11\n  %313 = getelementptr inbounds i8, i8* %0, i64 16\n  %314 = icmp eq i8* %313, %1\n  br i1 %314, label %69, label %315\n\n315:                                              ; preds = %311\n  %316 = sub i64 %3, %4\n  %317 = add i64 %3, -17\n  %318 = and i64 %316, 1\n  %319 = icmp eq i64 %318, 0\n  br i1 %319, label %335, label %320\n\n320:                                              ; preds = %315\n  %321 = load i8, i8* %313, align 1, !tbaa !11\n  %322 = getelementptr inbounds i8, i8* %0, i64 15\n  %323 = load i8, i8* %322, align 1, !tbaa !11\n  %324 = icmp slt i8 %321, %323\n  br i1 %324, label %325, label %332\n\n325:                                              ; preds = %320, %325\n  %326 = phi i8 [ %330, %325 ], [ %323, %320 ]\n  %327 = phi i8* [ %329, %325 ], [ %322, %320 ]\n  %328 = phi i8* [ %327, %325 ], [ %313, %320 ]\n  store i8 %326, i8* %328, align 1, !tbaa !11\n  %329 = getelementptr inbounds i8, i8* %327, i64 -1\n  %330 = load i8, i8* %329, align 1, !tbaa !11\n  %331 = icmp slt i8 %321, %330\n  br i1 %331, label %325, label %332, !llvm.loop !36\n\n332:                                              ; preds = %325, %320\n  %333 = phi i8* [ %313, %320 ], [ %327, %325 ]\n  store i8 %321, i8* %333, align 1, !tbaa !11\n  %334 = getelementptr inbounds i8, i8* %0, i64 17\n  br label %335\n\n335:                                              ; preds = %332, %315\n  %336 = phi i8* [ %313, %315 ], [ %334, %332 ]\n  %337 = icmp eq i64 %317, %4\n  br i1 %337, label %69, label %20\n\n338:                                              ; preds = %33, %338\n  %339 = phi i8 [ %343, %338 ], [ %37, %33 ]\n  %340 = phi i8* [ %342, %338 ], [ %21, %33 ]\n  %341 = phi i8* [ %340, %338 ], [ %35, %33 ]\n  store i8 %339, i8* %341, align 1, !tbaa !11\n  %342 = getelementptr inbounds i8, i8* %340, i64 -1\n  %343 = load i8, i8* %342, align 1, !tbaa !11\n  %344 = icmp slt i8 %36, %343\n  br i1 %344, label %338, label %345, !llvm.loop !36\n\n345:                                              ; preds = %338, %33\n  %346 = phi i8* [ %35, %33 ], [ %340, %338 ]\n  store i8 %36, i8* %346, align 1, !tbaa !11\n  %347 = getelementptr inbounds i8, i8* %21, i64 2\n  %348 = icmp eq i8* %347, %1\n  br i1 %348, label %69, label %20, !llvm.loop !38\n}\n\n; Function Attrs: uwtable\ndefine linkonce_odr dso_local void @_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS0_5__ops15_Iter_less_iterEEvT_SC_RT0_(i8* %0, i8* %1, %\"struct.__gnu_cxx::__ops::_Iter_less_iter\"* nonnull align 1 dereferenceable(1) %2) local_unnamed_addr #0 comdat {\n  %4 = ptrtoint i8* %1 to i64\n  %5 = ptrtoint i8* %0 to i64\n  %6 = sub i64 %4, %5\n  %7 = icmp slt i64 %6, 2\n  br i1 %7, label %99, label %8\n\n8:                                                ; preds = %3\n  %9 = add nsw i64 %6, -2\n  %10 = lshr i64 %9, 1\n  %11 = add nsw i64 %6, -1\n  %12 = lshr i64 %11, 1\n  %13 = and i64 %6, 1\n  %14 = icmp eq i64 %13, 0\n  br i1 %14, label %15, label %19\n\n15:                                               ; preds = %8\n  %16 = or i64 %9, 1\n  %17 = getelementptr inbounds i8, i8* %0, i64 %16\n  %18 = getelementptr inbounds i8, i8* %0, i64 %10\n  br label %56\n\n19:                                               ; preds = %8, %51\n  %20 = phi i64 [ %55, %51 ], [ %10, %8 ]\n  %21 = getelementptr inbounds i8, i8* %0, i64 %20\n  %22 = load i8, i8* %21, align 1, !tbaa !11\n  %23 = icmp sgt i64 %12, %20\n  br i1 %23, label %24, label %51\n\n24:                                               ; preds = %19, %24\n  %25 = phi i64 [ %34, %24 ], [ %20, %19 ]\n  %26 = shl i64 %25, 1\n  %27 = add i64 %26, 2\n  %28 = getelementptr inbounds i8, i8* %0, i64 %27\n  %29 = or i64 %26, 1\n  %30 = getelementptr inbounds i8, i8* %0, i64 %29\n  %31 = load i8, i8* %28, align 1, !tbaa !11\n  %32 = load i8, i8* %30, align 1, !tbaa !11\n  %33 = icmp slt i8 %31, %32\n  %34 = select i1 %33, i64 %29, i64 %27\n  %35 = getelementptr inbounds i8, i8* %0, i64 %34\n  %36 = load i8, i8* %35, align 1, !tbaa !11\n  %37 = getelementptr inbounds i8, i8* %0, i64 %25\n  store i8 %36, i8* %37, align 1, !tbaa !11\n  %38 = icmp slt i64 %34, %12\n  br i1 %38, label %24, label %39, !llvm.loop !29\n\n39:                                               ; preds = %24\n  %40 = icmp sgt i64 %34, %20\n  br i1 %40, label %41, label %51\n\n41:                                               ; preds = %39, %48\n  %42 = phi i64 [ %44, %48 ], [ %34, %39 ]\n  %43 = add nsw i64 %42, -1\n  %44 = sdiv i64 %43, 2\n  %45 = getelementptr inbounds i8, i8* %0, i64 %44\n  %46 = load i8, i8* %45, align 1, !tbaa !11\n  %47 = icmp slt i8 %46, %22\n  br i1 %47, label %48, label %51\n\n48:                                               ; preds = %41\n  %49 = getelementptr inbounds i8, i8* %0, i64 %42\n  store i8 %46, i8* %49, align 1, !tbaa !11\n  %50 = icmp sgt i64 %44, %20\n  br i1 %50, label %41, label %51, !llvm.loop !30\n\n51:                                               ; preds = %41, %48, %19, %39\n  %52 = phi i64 [ %34, %39 ], [ %20, %19 ], [ %44, %48 ], [ %42, %41 ]\n  %53 = getelementptr inbounds i8, i8* %0, i64 %52\n  store i8 %22, i8* %53, align 1, !tbaa !11\n  %54 = icmp eq i64 %20, 0\n  %55 = add nsw i64 %20, -1\n  br i1 %54, label %99, label %19, !llvm.loop !39\n\n56:                                               ; preds = %15, %94\n  %57 = phi i64 [ %98, %94 ], [ %10, %15 ]\n  %58 = getelementptr inbounds i8, i8* %0, i64 %57\n  %59 = load i8, i8* %58, align 1, !tbaa !11\n  %60 = icmp sgt i64 %12, %57\n  br i1 %60, label %61, label %76\n\n61:                                               ; preds = %56, %61\n  %62 = phi i64 [ %71, %61 ], [ %57, %56 ]\n  %63 = shl i64 %62, 1\n  %64 = add i64 %63, 2\n  %65 = getelementptr inbounds i8, i8* %0, i64 %64\n  %66 = or i64 %63, 1\n  %67 = getelementptr inbounds i8, i8* %0, i64 %66\n  %68 = load i8, i8* %65, align 1, !tbaa !11\n  %69 = load i8, i8* %67, align 1, !tbaa !11\n  %70 = icmp slt i8 %68, %69\n  %71 = select i1 %70, i64 %66, i64 %64\n  %72 = getelementptr inbounds i8, i8* %0, i64 %71\n  %73 = load i8, i8* %72, align 1, !tbaa !11\n  %74 = getelementptr inbounds i8, i8* %0, i64 %62\n  store i8 %73, i8* %74, align 1, !tbaa !11\n  %75 = icmp slt i64 %71, %12\n  br i1 %75, label %61, label %76, !llvm.loop !29\n\n76:                                               ; preds = %61, %56\n  %77 = phi i64 [ %57, %56 ], [ %71, %61 ]\n  %78 = icmp eq i64 %77, %10\n  br i1 %78, label %79, label %81\n\n79:                                               ; preds = %76\n  %80 = load i8, i8* %17, align 1, !tbaa !11\n  store i8 %80, i8* %18, align 1, !tbaa !11\n  br label %81\n\n81:                                               ; preds = %79, %76\n  %82 = phi i64 [ %16, %79 ], [ %77, %76 ]\n  %83 = icmp sgt i64 %82, %57\n  br i1 %83, label %84, label %94\n\n84:                                               ; preds = %81, %91\n  %85 = phi i64 [ %87, %91 ], [ %82, %81 ]\n  %86 = add nsw i64 %85, -1\n  %87 = sdiv i64 %86, 2\n  %88 = getelementptr inbounds i8, i8* %0, i64 %87\n  %89 = load i8, i8* %88, align 1, !tbaa !11\n  %90 = icmp slt i8 %89, %59\n  br i1 %90, label %91, label %94\n\n91:                                               ; preds = %84\n  %92 = getelementptr inbounds i8, i8* %0, i64 %85\n  store i8 %89, i8* %92, align 1, !tbaa !11\n  %93 = icmp sgt i64 %87, %57\n  br i1 %93, label %84, label %94, !llvm.loop !30\n\n94:                                               ; preds = %84, %91, %81\n  %95 = phi i64 [ %82, %81 ], [ %87, %91 ], [ %85, %84 ]\n  %96 = getelementptr inbounds i8, i8* %0, i64 %95\n  store i8 %59, i8* %96, align 1, !tbaa !11\n  %97 = icmp eq i64 %57, 0\n  %98 = add nsw i64 %57, -1\n  br i1 %97, label %99, label %56, !llvm.loop !39\n\n99:                                               ; preds = %51, %94, %3\n  ret void\n}\n\n; Function Attrs: mustprogress nofree nosync nounwind readnone speculatable willreturn\ndeclare i64 @llvm.ctlz.i64(i64, i1 immarg) #5\n\n; Function Attrs: argmemonly mustprogress nofree nounwind willreturn\ndeclare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #4\n\ndeclare dso_local nonnull align 8 dereferenceable(32) %\"class.std::__cxx11::basic_string\"* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32), i8*, i64) local_unnamed_addr #3\n\ndeclare dso_local nonnull align 8 dereferenceable(32) %\"class.std::__cxx11::basic_string\"* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32), i64, i64, i8*, i64) local_unnamed_addr #3\n\n; Function Attrs: inaccessiblememonly nofree nosync nounwind willreturn\ndeclare void @llvm.experimental.noalias.scope.decl(metadata) #6\n\nattributes #0 = { uwtable \"frame-pointer\"=\"none\" \"min-legal-vector-width\"=\"0\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #1 = { argmemonly mustprogress nofree nosync nounwind willreturn }\nattributes #2 = { nobuiltin nounwind \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #3 = { \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #4 = { argmemonly mustprogress nofree nounwind willreturn }\nattributes #5 = { mustprogress nofree nosync nounwind readnone speculatable willreturn }\nattributes #6 = { inaccessiblememonly nofree nosync nounwind willreturn }\nattributes #7 = { nounwind }\n\n!llvm.module.flags = !{!0, !1}\n!llvm.ident = !{!2}\n\n!0 = !{i32 1, !\"wchar_size\", i32 4}\n!1 = !{i32 7, !\"uwtable\", i32 1}\n!2 = !{!\"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)\"}\n!3 = !{!4, !5, i64 0}\n!4 = !{!\"_ZTSNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderE\", !5, i64 0}\n!5 = !{!\"any pointer\", !6, i64 0}\n!6 = !{!\"omnipotent char\", !7, i64 0}\n!7 = !{!\"Simple C++ TBAA\"}\n!8 = !{!9, !10, i64 8}\n!9 = !{!\"_ZTSNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE\", !4, i64 0, !10, i64 8, !6, i64 16}\n!10 = !{!\"long\", !6, i64 0}\n!11 = !{!6, !6, i64 0}\n!12 = !{!13}\n!13 = distinct !{!13, !14, !\"_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_S5_: argument 0\"}\n!14 = distinct !{!14, !\"_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_S5_\"}\n!15 = !{!9, !5, i64 0}\n!16 = !{!10, !10, i64 0}\n!17 = !{i64 0, i64 65}\n!18 = !{!19}\n!19 = distinct !{!19, !20, !\"_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_S5_: argument 0\"}\n!20 = distinct !{!20, !\"_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_S5_\"}\n!21 = !{!22}\n!22 = distinct !{!22, !23, !\"_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_SA_: argument 0\"}\n!23 = distinct !{!23, !\"_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_SA_\"}\n!24 = !{!25}\n!25 = distinct !{!25, !26, !\"_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_S5_: argument 0\"}\n!26 = distinct !{!26, !\"_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_S5_\"}\n!27 = distinct !{!27, !28}\n!28 = !{!\"llvm.loop.mustprogress\"}\n!29 = distinct !{!29, !28}\n!30 = distinct !{!30, !28}\n!31 = distinct !{!31, !28}\n!32 = distinct !{!32, !28}\n!33 = distinct !{!33, !28}\n!34 = distinct !{!34, !28}\n!35 = distinct !{!35, !28}\n!36 = distinct !{!36, !28}\n!37 = distinct !{!37, !28}\n!38 = distinct !{!38, !28}\n!39 = distinct !{!39, !28}\n", "target": "This is the targeted source code:\n/*\nWrite a function that takes a string and returns an ordered version of it.\nOrdered version of string, is a string where all words (separated by space)\nare replaced by a new word where all the characters arranged in\nascending order based on ascii value.\nNote: You should keep the order of words and blank spaces in the sentence.\n\nFor example:\nanti_shuffle(\"Hi\") returns \"Hi\"\nanti_shuffle(\"hello\") returns \"ehllo\"\nanti_shuffle(\"Hello World!!!\") returns \"Hello !!!Wdlor\"\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nstring anti_shuffle(string s){\n\n    string out=\"\";\n    string current=\"\";\n    s=s+' ';\n    for (int i=0;i<s.length();i++)\n    if (s[i]==' ')\n    {\n        sort(current.begin(),current.end());\n        if (out.length()>0) out=out+' ';\n        out=out+current;\n        current=\"\";\n    }\n    else current=current+s[i];\n    return out;\n}\n"}
{"input": "Convert this to C++:\n; ModuleID = '../../Human_xBenchmarks_164/CPP_87/CPP_87.cpp'\nsource_filename = \"../../Human_xBenchmarks_164/CPP_87/CPP_87.cpp\"\ntarget datalayout = \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\ntarget triple = \"x86_64-unknown-linux-gnu\"\n\n%\"class.std::vector\" = type { %\"struct.std::_Vector_base\" }\n%\"struct.std::_Vector_base\" = type { %\"struct.std::_Vector_base<std::vector<int>, std::allocator<std::vector<int>>>::_Vector_impl\" }\n%\"struct.std::_Vector_base<std::vector<int>, std::allocator<std::vector<int>>>::_Vector_impl\" = type { %\"struct.std::_Vector_base<std::vector<int>, std::allocator<std::vector<int>>>::_Vector_impl_data\" }\n%\"struct.std::_Vector_base<std::vector<int>, std::allocator<std::vector<int>>>::_Vector_impl_data\" = type { %\"class.std::vector.0\"*, %\"class.std::vector.0\"*, %\"class.std::vector.0\"* }\n%\"class.std::vector.0\" = type { %\"struct.std::_Vector_base.1\" }\n%\"struct.std::_Vector_base.1\" = type { %\"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl\" }\n%\"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl\" = type { %\"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl_data\" }\n%\"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl_data\" = type { i32*, i32*, i32* }\n\n$_ZNSt6vectorIS_IiSaIiEESaIS1_EED2Ev = comdat any\n\n@.str = private unnamed_addr constant [26 x i8] c\"vector::_M_realloc_insert\\00\", align 1\n\n; Function Attrs: uwtable\ndefine dso_local void @_Z7get_rowSt6vectorIS_IiSaIiEESaIS1_EEi(%\"class.std::vector\"* noalias sret(%\"class.std::vector\") align 8 %0, %\"class.std::vector\"* nocapture readonly %1, i32 %2) local_unnamed_addr #0 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {\n  %4 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %1, i64 0, i32 0, i32 0, i32 0, i32 1\n  %5 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %1, i64 0, i32 0, i32 0, i32 0, i32 0\n  %6 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0, i64 0, i32 0, i32 0, i32 0, i32 1\n  %7 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0, i64 0, i32 0, i32 0, i32 0, i32 2\n  %8 = bitcast %\"class.std::vector\"* %0 to i8**\n  %9 = bitcast %\"class.std::vector\"* %0 to i8*\n  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(24) %9, i8 0, i64 24, i1 false)\n  %10 = load %\"class.std::vector.0\"*, %\"class.std::vector.0\"** %4, align 8, !tbaa !3\n  %11 = load %\"class.std::vector.0\"*, %\"class.std::vector.0\"** %5, align 8, !tbaa !8\n  %12 = icmp eq %\"class.std::vector.0\"* %10, %11\n  br i1 %12, label %141, label %13\n\n13:                                               ; preds = %3, %36\n  %14 = phi %\"class.std::vector.0\"* [ %37, %36 ], [ %11, %3 ]\n  %15 = phi %\"class.std::vector.0\"* [ %38, %36 ], [ %10, %3 ]\n  %16 = phi %\"class.std::vector.0\"* [ %39, %36 ], [ null, %3 ]\n  %17 = phi %\"class.std::vector.0\"* [ %40, %36 ], [ null, %3 ]\n  %18 = phi %\"class.std::vector.0\"* [ %41, %36 ], [ null, %3 ]\n  %19 = phi i64 [ %42, %36 ], [ 0, %3 ]\n  %20 = getelementptr inbounds %\"class.std::vector.0\", %\"class.std::vector.0\"* %14, i64 %19, i32 0, i32 0, i32 0, i32 1\n  %21 = load i32*, i32** %20, align 8, !tbaa !9\n  %22 = getelementptr inbounds %\"class.std::vector.0\", %\"class.std::vector.0\"* %14, i64 %19, i32 0, i32 0, i32 0, i32 0\n  %23 = load i32*, i32** %22, align 8, !tbaa !11\n  %24 = ptrtoint i32* %21 to i64\n  %25 = ptrtoint i32* %23 to i64\n  %26 = sub i64 %24, %25\n  %27 = lshr exact i64 %26, 2\n  %28 = trunc i64 %27 to i32\n  %29 = add i32 %28, -1\n  %30 = icmp sgt i32 %29, -1\n  br i1 %30, label %31, label %36\n\n31:                                               ; preds = %13\n  %32 = trunc i64 %19 to i32\n  br label %48\n\n33:                                               ; preds = %131\n  %34 = load %\"class.std::vector.0\"*, %\"class.std::vector.0\"** %4, align 8, !tbaa !3\n  %35 = load %\"class.std::vector.0\"*, %\"class.std::vector.0\"** %5, align 8, !tbaa !8\n  br label %36\n\n36:                                               ; preds = %33, %13\n  %37 = phi %\"class.std::vector.0\"* [ %14, %13 ], [ %35, %33 ]\n  %38 = phi %\"class.std::vector.0\"* [ %15, %13 ], [ %34, %33 ]\n  %39 = phi %\"class.std::vector.0\"* [ %16, %13 ], [ %132, %33 ]\n  %40 = phi %\"class.std::vector.0\"* [ %17, %13 ], [ %133, %33 ]\n  %41 = phi %\"class.std::vector.0\"* [ %18, %13 ], [ %134, %33 ]\n  %42 = add nuw i64 %19, 1\n  %43 = ptrtoint %\"class.std::vector.0\"* %38 to i64\n  %44 = ptrtoint %\"class.std::vector.0\"* %37 to i64\n  %45 = sub i64 %43, %44\n  %46 = sdiv exact i64 %45, 24\n  %47 = icmp ugt i64 %46, %42\n  br i1 %47, label %13, label %141, !llvm.loop !12\n\n48:                                               ; preds = %137, %31\n  %49 = phi %\"class.std::vector.0\"* [ %132, %137 ], [ %16, %31 ]\n  %50 = phi %\"class.std::vector.0\"* [ %133, %137 ], [ %17, %31 ]\n  %51 = phi %\"class.std::vector.0\"* [ %134, %137 ], [ %18, %31 ]\n  %52 = phi i32* [ %140, %137 ], [ %23, %31 ]\n  %53 = phi i32 [ %135, %137 ], [ %29, %31 ]\n  %54 = zext i32 %53 to i64\n  %55 = getelementptr inbounds i32, i32* %52, i64 %54\n  %56 = load i32, i32* %55, align 4, !tbaa !14\n  %57 = icmp eq i32 %56, %2\n  br i1 %57, label %58, label %131\n\n58:                                               ; preds = %48\n  %59 = invoke noalias nonnull i8* @_Znwm(i64 8) #6\n          to label %62 unwind label %60\n\n60:                                               ; preds = %58\n  %61 = landingpad { i8*, i32 }\n          cleanup\n  br label %129\n\n62:                                               ; preds = %58\n  %63 = bitcast i8* %59 to i32*\n  %64 = getelementptr inbounds i8, i8* %59, i64 8\n  store i32 %32, i32* %63, align 4\n  %65 = getelementptr inbounds i8, i8* %59, i64 4\n  %66 = bitcast i8* %65 to i32*\n  store i32 %53, i32* %66, align 4\n  %67 = icmp eq %\"class.std::vector.0\"* %51, %50\n  br i1 %67, label %75, label %68\n\n68:                                               ; preds = %62\n  %69 = bitcast %\"class.std::vector.0\"* %51 to i8**\n  store i8* %59, i8** %69, align 8, !tbaa !11\n  %70 = getelementptr inbounds %\"class.std::vector.0\", %\"class.std::vector.0\"* %51, i64 0, i32 0, i32 0, i32 0, i32 1\n  %71 = bitcast i32** %70 to i8**\n  store i8* %64, i8** %71, align 8, !tbaa !9\n  %72 = getelementptr inbounds %\"class.std::vector.0\", %\"class.std::vector.0\"* %51, i64 0, i32 0, i32 0, i32 0, i32 2\n  %73 = bitcast i32** %72 to i8**\n  store i8* %64, i8** %73, align 8, !tbaa !16\n  %74 = getelementptr inbounds %\"class.std::vector.0\", %\"class.std::vector.0\"* %51, i64 1\n  store %\"class.std::vector.0\"* %74, %\"class.std::vector.0\"** %6, align 8, !tbaa !3\n  br label %131\n\n75:                                               ; preds = %62\n  %76 = ptrtoint %\"class.std::vector.0\"* %50 to i64\n  %77 = ptrtoint %\"class.std::vector.0\"* %49 to i64\n  %78 = sub i64 %76, %77\n  %79 = sdiv exact i64 %78, 24\n  %80 = icmp eq i64 %78, 9223372036854775800\n  br i1 %80, label %81, label %83\n\n81:                                               ; preds = %75\n  invoke void @_ZSt20__throw_length_errorPKc(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str, i64 0, i64 0)) #7\n          to label %82 unwind label %125\n\n82:                                               ; preds = %81\n  unreachable\n\n83:                                               ; preds = %75\n  %84 = icmp eq i64 %78, 0\n  %85 = select i1 %84, i64 1, i64 %79\n  %86 = add nsw i64 %85, %79\n  %87 = icmp ult i64 %86, %79\n  %88 = icmp ugt i64 %86, 384307168202282325\n  %89 = or i1 %87, %88\n  %90 = select i1 %89, i64 384307168202282325, i64 %86\n  %91 = mul nuw nsw i64 %90, 24\n  %92 = invoke noalias nonnull i8* @_Znwm(i64 %91) #6\n          to label %93 unwind label %123\n\n93:                                               ; preds = %83\n  %94 = bitcast i8* %92 to %\"class.std::vector.0\"*\n  %95 = getelementptr inbounds %\"class.std::vector.0\", %\"class.std::vector.0\"* %94, i64 %79, i32 0, i32 0, i32 0, i32 0\n  %96 = bitcast i32** %95 to i8**\n  store i8* %59, i8** %96, align 8, !tbaa !11\n  %97 = getelementptr inbounds %\"class.std::vector.0\", %\"class.std::vector.0\"* %94, i64 %79, i32 0, i32 0, i32 0, i32 1\n  %98 = bitcast i32** %97 to i8**\n  store i8* %64, i8** %98, align 8, !tbaa !9\n  %99 = getelementptr inbounds %\"class.std::vector.0\", %\"class.std::vector.0\"* %94, i64 %79, i32 0, i32 0, i32 0, i32 2\n  %100 = bitcast i32** %99 to i8**\n  store i8* %64, i8** %100, align 8, !tbaa !16\n  %101 = icmp eq %\"class.std::vector.0\"* %49, %50\n  br i1 %101, label %115, label %102\n\n102:                                              ; preds = %93, %102\n  %103 = phi %\"class.std::vector.0\"* [ %113, %102 ], [ %94, %93 ]\n  %104 = phi %\"class.std::vector.0\"* [ %112, %102 ], [ %49, %93 ]\n  %105 = bitcast %\"class.std::vector.0\"* %104 to <2 x i32*>*\n  %106 = load <2 x i32*>, <2 x i32*>* %105, align 8, !tbaa !17\n  %107 = bitcast %\"class.std::vector.0\"* %103 to <2 x i32*>*\n  store <2 x i32*> %106, <2 x i32*>* %107, align 8, !tbaa !17\n  %108 = getelementptr inbounds %\"class.std::vector.0\", %\"class.std::vector.0\"* %103, i64 0, i32 0, i32 0, i32 0, i32 2\n  %109 = getelementptr inbounds %\"class.std::vector.0\", %\"class.std::vector.0\"* %104, i64 0, i32 0, i32 0, i32 0, i32 2\n  %110 = load i32*, i32** %109, align 8, !tbaa !16\n  store i32* %110, i32** %108, align 8, !tbaa !16\n  %111 = bitcast %\"class.std::vector.0\"* %104 to i8*\n  tail call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(24) %111, i8 0, i64 24, i1 false) #8\n  %112 = getelementptr inbounds %\"class.std::vector.0\", %\"class.std::vector.0\"* %104, i64 1\n  %113 = getelementptr inbounds %\"class.std::vector.0\", %\"class.std::vector.0\"* %103, i64 1\n  %114 = icmp eq %\"class.std::vector.0\"* %112, %50\n  br i1 %114, label %115, label %102, !llvm.loop !18\n\n115:                                              ; preds = %102, %93\n  %116 = phi %\"class.std::vector.0\"* [ %94, %93 ], [ %113, %102 ]\n  %117 = getelementptr inbounds %\"class.std::vector.0\", %\"class.std::vector.0\"* %116, i64 1\n  %118 = icmp eq %\"class.std::vector.0\"* %49, null\n  br i1 %118, label %121, label %119\n\n119:                                              ; preds = %115\n  %120 = bitcast %\"class.std::vector.0\"* %49 to i8*\n  tail call void @_ZdlPv(i8* nonnull %120) #8\n  br label %121\n\n121:                                              ; preds = %119, %115\n  store i8* %92, i8** %8, align 8, !tbaa !8\n  store %\"class.std::vector.0\"* %117, %\"class.std::vector.0\"** %6, align 8, !tbaa !3\n  %122 = getelementptr inbounds %\"class.std::vector.0\", %\"class.std::vector.0\"* %94, i64 %90\n  store %\"class.std::vector.0\"* %122, %\"class.std::vector.0\"** %7, align 8, !tbaa !19\n  br label %131\n\n123:                                              ; preds = %83\n  %124 = landingpad { i8*, i32 }\n          cleanup\n  br label %127\n\n125:                                              ; preds = %81\n  %126 = landingpad { i8*, i32 }\n          cleanup\n  br label %127\n\n127:                                              ; preds = %125, %123\n  %128 = phi { i8*, i32 } [ %124, %123 ], [ %126, %125 ]\n  tail call void @_ZdlPv(i8* nonnull %59) #8\n  br label %129\n\n129:                                              ; preds = %60, %127\n  %130 = phi { i8*, i32 } [ %128, %127 ], [ %61, %60 ]\n  tail call void @_ZNSt6vectorIS_IiSaIiEESaIS1_EED2Ev(%\"class.std::vector\"* nonnull align 8 dereferenceable(24) %0) #8\n  resume { i8*, i32 } %130\n\n131:                                              ; preds = %121, %68, %48\n  %132 = phi %\"class.std::vector.0\"* [ %49, %48 ], [ %49, %68 ], [ %94, %121 ]\n  %133 = phi %\"class.std::vector.0\"* [ %50, %48 ], [ %50, %68 ], [ %122, %121 ]\n  %134 = phi %\"class.std::vector.0\"* [ %51, %48 ], [ %74, %68 ], [ %117, %121 ]\n  %135 = add i32 %53, -1\n  %136 = icmp sgt i32 %135, -1\n  br i1 %136, label %137, label %33, !llvm.loop !20\n\n137:                                              ; preds = %131\n  %138 = load %\"class.std::vector.0\"*, %\"class.std::vector.0\"** %5, align 8, !tbaa !8\n  %139 = getelementptr inbounds %\"class.std::vector.0\", %\"class.std::vector.0\"* %138, i64 %19, i32 0, i32 0, i32 0, i32 0\n  %140 = load i32*, i32** %139, align 8, !tbaa !11\n  br label %48\n\n141:                                              ; preds = %36, %3\n  ret void\n}\n\n; Function Attrs: argmemonly mustprogress nofree nounwind willreturn writeonly\ndeclare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1\n\ndeclare dso_local i32 @__gxx_personality_v0(...)\n\n; Function Attrs: nounwind uwtable\ndefine linkonce_odr dso_local void @_ZNSt6vectorIS_IiSaIiEESaIS1_EED2Ev(%\"class.std::vector\"* nonnull align 8 dereferenceable(24) %0) unnamed_addr #2 comdat align 2 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {\n  %2 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0, i64 0, i32 0, i32 0, i32 0, i32 0\n  %3 = load %\"class.std::vector.0\"*, %\"class.std::vector.0\"** %2, align 8, !tbaa !8\n  %4 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0, i64 0, i32 0, i32 0, i32 0, i32 1\n  %5 = load %\"class.std::vector.0\"*, %\"class.std::vector.0\"** %4, align 8, !tbaa !3\n  %6 = icmp eq %\"class.std::vector.0\"* %3, %5\n  br i1 %6, label %19, label %7\n\n7:                                                ; preds = %1, %14\n  %8 = phi %\"class.std::vector.0\"* [ %15, %14 ], [ %3, %1 ]\n  %9 = getelementptr inbounds %\"class.std::vector.0\", %\"class.std::vector.0\"* %8, i64 0, i32 0, i32 0, i32 0, i32 0\n  %10 = load i32*, i32** %9, align 8, !tbaa !11\n  %11 = icmp eq i32* %10, null\n  br i1 %11, label %14, label %12\n\n12:                                               ; preds = %7\n  %13 = bitcast i32* %10 to i8*\n  tail call void @_ZdlPv(i8* nonnull %13) #8\n  br label %14\n\n14:                                               ; preds = %12, %7\n  %15 = getelementptr inbounds %\"class.std::vector.0\", %\"class.std::vector.0\"* %8, i64 1\n  %16 = icmp eq %\"class.std::vector.0\"* %15, %5\n  br i1 %16, label %17, label %7, !llvm.loop !21\n\n17:                                               ; preds = %14\n  %18 = load %\"class.std::vector.0\"*, %\"class.std::vector.0\"** %2, align 8, !tbaa !8\n  br label %19\n\n19:                                               ; preds = %17, %1\n  %20 = phi %\"class.std::vector.0\"* [ %18, %17 ], [ %3, %1 ]\n  %21 = icmp eq %\"class.std::vector.0\"* %20, null\n  br i1 %21, label %24, label %22\n\n22:                                               ; preds = %19\n  %23 = bitcast %\"class.std::vector.0\"* %20 to i8*\n  tail call void @_ZdlPv(i8* nonnull %23) #8\n  br label %24\n\n24:                                               ; preds = %19, %22\n  ret void\n}\n\n; Function Attrs: nobuiltin nounwind\ndeclare dso_local void @_ZdlPv(i8*) local_unnamed_addr #3\n\n; Function Attrs: noreturn\ndeclare dso_local void @_ZSt20__throw_length_errorPKc(i8*) local_unnamed_addr #4\n\n; Function Attrs: nobuiltin allocsize(0)\ndeclare dso_local nonnull i8* @_Znwm(i64) local_unnamed_addr #5\n\nattributes #0 = { uwtable \"frame-pointer\"=\"none\" \"min-legal-vector-width\"=\"0\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #1 = { argmemonly mustprogress nofree nounwind willreturn writeonly }\nattributes #2 = { nounwind uwtable \"frame-pointer\"=\"none\" \"min-legal-vector-width\"=\"0\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #3 = { nobuiltin nounwind \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #4 = { noreturn \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #5 = { nobuiltin allocsize(0) \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #6 = { allocsize(0) }\nattributes #7 = { noreturn }\nattributes #8 = { nounwind }\n\n!llvm.module.flags = !{!0, !1}\n!llvm.ident = !{!2}\n\n!0 = !{i32 1, !\"wchar_size\", i32 4}\n!1 = !{i32 7, !\"uwtable\", i32 1}\n!2 = !{!\"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)\"}\n!3 = !{!4, !5, i64 8}\n!4 = !{!\"_ZTSNSt12_Vector_baseISt6vectorIiSaIiEESaIS2_EE17_Vector_impl_dataE\", !5, i64 0, !5, i64 8, !5, i64 16}\n!5 = !{!\"any pointer\", !6, i64 0}\n!6 = !{!\"omnipotent char\", !7, i64 0}\n!7 = !{!\"Simple C++ TBAA\"}\n!8 = !{!4, !5, i64 0}\n!9 = !{!10, !5, i64 8}\n!10 = !{!\"_ZTSNSt12_Vector_baseIiSaIiEE17_Vector_impl_dataE\", !5, i64 0, !5, i64 8, !5, i64 16}\n!11 = !{!10, !5, i64 0}\n!12 = distinct !{!12, !13}\n!13 = !{!\"llvm.loop.mustprogress\"}\n!14 = !{!15, !15, i64 0}\n!15 = !{!\"int\", !6, i64 0}\n!16 = !{!10, !5, i64 16}\n!17 = !{!5, !5, i64 0}\n!18 = distinct !{!18, !13}\n!19 = !{!4, !5, i64 16}\n!20 = distinct !{!20, !13}\n!21 = distinct !{!21, !13}\n", "target": "This is the targeted source code:\n/*\nYou are given a 2 dimensional data, as a nested vectors,\nwhich is similar to matrix, however, unlike matrices,\neach row may contain a different number of columns.\nGiven lst, and integer x, find integers x in the vector,\nand return vector of vectors, {{x1, y1}, {x2, y2} ...} such that\neach vector is a coordinate - {row, columns}, starting with 0.\nSort coordinates initially by rows in ascending order.\nAlso, sort coordinates of the row by columns in descending order.\n\nExamples:\nget_row({\n  {1,2,3,4,5,6},\n  {1,2,3,4,1,6},\n  {1,2,3,4,5,1}\n}, 1) == {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}}\nget_row({}, 1) == {}\nget_row({{}, {1}, {1, 2, 3}}, 3) == {{2, 2}}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<vector<int>> get_row(vector<vector<int>> lst, int x){\n\n    vector<vector<int>> out={};\n    for (int i=0;i<lst.size();i++)\n    for (int j=lst[i].size()-1;j>=0;j-=1)\n    if (lst[i][j]==x) out.push_back({i,j});\n    return out;\n}\n"}
{"input": "Convert this to C++:\n; ModuleID = '../../Human_xBenchmarks_164/CPP_88/CPP_88.cpp'\nsource_filename = \"../../Human_xBenchmarks_164/CPP_88/CPP_88.cpp\"\ntarget datalayout = \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\ntarget triple = \"x86_64-unknown-linux-gnu\"\n\n%\"class.std::vector\" = type { %\"struct.std::_Vector_base\" }\n%\"struct.std::_Vector_base\" = type { %\"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl\" }\n%\"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl\" = type { %\"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl_data\" }\n%\"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl_data\" = type { i32*, i32*, i32* }\n%\"struct.__gnu_cxx::__ops::_Iter_less_iter\" = type { i8 }\n\n$_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEElNS0_5__ops15_Iter_less_iterEEvT_S9_T0_T1_ = comdat any\n\n$_ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_ = comdat any\n\n$_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEENS0_5__ops15_Iter_less_iterEEvT_S9_RT0_ = comdat any\n\n@.str = private unnamed_addr constant [26 x i8] c\"vector::_M_realloc_insert\\00\", align 1\n\n; Function Attrs: uwtable\ndefine dso_local void @_Z10sort_arraySt6vectorIiSaIiEE(%\"class.std::vector\"* noalias nocapture sret(%\"class.std::vector\") align 8 %0, %\"class.std::vector\"* nocapture %1) local_unnamed_addr #0 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {\n  %3 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %1, i64 0, i32 0, i32 0, i32 0, i32 1\n  %4 = load i32*, i32** %3, align 8, !tbaa !3\n  %5 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %1, i64 0, i32 0, i32 0, i32 0, i32 0\n  %6 = load i32*, i32** %5, align 8, !tbaa !8\n  %7 = ptrtoint i32* %4 to i64\n  %8 = ptrtoint i32* %6 to i64\n  %9 = sub i64 %7, %8\n  %10 = ashr exact i64 %9, 2\n  %11 = icmp eq i64 %9, 0\n  br i1 %11, label %12, label %14\n\n12:                                               ; preds = %2\n  %13 = bitcast %\"class.std::vector\"* %0 to i8*\n  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(24) %13, i8 0, i64 24, i1 false)\n  br label %128\n\n14:                                               ; preds = %2\n  %15 = load i32, i32* %6, align 4, !tbaa !9\n  %16 = add nsw i64 %10, -1\n  %17 = getelementptr inbounds i32, i32* %6, i64 %16\n  %18 = load i32, i32* %17, align 4, !tbaa !9\n  %19 = add nsw i32 %18, %15\n  %20 = srem i32 %19, 2\n  %21 = icmp eq i32 %20, 1\n  %22 = icmp eq i32* %6, %4\n  br i1 %21, label %23, label %39\n\n23:                                               ; preds = %14\n  %24 = insertelement <2 x i32*> poison, i32* %4, i32 0\n  %25 = shufflevector <2 x i32*> %24, <2 x i32*> poison, <2 x i32> zeroinitializer\n  br i1 %22, label %32, label %26\n\n26:                                               ; preds = %23\n  %27 = tail call i64 @llvm.ctlz.i64(i64 %10, i1 true) #8, !range !11\n  %28 = shl nuw nsw i64 %27, 1\n  %29 = xor i64 %28, 126\n  tail call void @_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEElNS0_5__ops15_Iter_less_iterEEvT_S9_T0_T1_(i32* nonnull %6, i32* %4, i64 %29)\n  tail call void @_ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_(i32* nonnull %6, i32* %4)\n  %30 = bitcast %\"class.std::vector\"* %1 to <2 x i32*>*\n  %31 = load <2 x i32*>, <2 x i32*>* %30, align 8, !tbaa !12\n  br label %32\n\n32:                                               ; preds = %23, %26\n  %33 = phi <2 x i32*> [ %25, %23 ], [ %31, %26 ]\n  %34 = bitcast %\"class.std::vector\"* %0 to <2 x i32*>*\n  store <2 x i32*> %33, <2 x i32*>* %34, align 8, !tbaa !12\n  %35 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0, i64 0, i32 0, i32 0, i32 0, i32 2\n  %36 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %1, i64 0, i32 0, i32 0, i32 0, i32 2\n  %37 = load i32*, i32** %36, align 8, !tbaa !13\n  store i32* %37, i32** %35, align 8, !tbaa !13\n  %38 = bitcast %\"class.std::vector\"* %1 to i8*\n  tail call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(24) %38, i8 0, i64 24, i1 false) #8\n  br label %128\n\n39:                                               ; preds = %14\n  br i1 %22, label %48, label %40\n\n40:                                               ; preds = %39\n  %41 = tail call i64 @llvm.ctlz.i64(i64 %10, i1 true) #8, !range !11\n  %42 = shl nuw nsw i64 %41, 1\n  %43 = xor i64 %42, 126\n  tail call void @_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEElNS0_5__ops15_Iter_less_iterEEvT_S9_T0_T1_(i32* nonnull %6, i32* %4, i64 %43)\n  tail call void @_ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_(i32* nonnull %6, i32* %4)\n  %44 = load i32*, i32** %3, align 8, !tbaa !3\n  %45 = load i32*, i32** %5, align 8, !tbaa !8\n  %46 = ptrtoint i32* %44 to i64\n  %47 = ptrtoint i32* %45 to i64\n  br label %48\n\n48:                                               ; preds = %39, %40\n  %49 = phi i64 [ %7, %39 ], [ %47, %40 ]\n  %50 = phi i64 [ %7, %39 ], [ %46, %40 ]\n  %51 = phi i32* [ %4, %39 ], [ %45, %40 ]\n  %52 = sub i64 %50, %49\n  %53 = lshr exact i64 %52, 2\n  %54 = trunc i64 %53 to i32\n  %55 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0, i64 0, i32 0, i32 0, i32 0, i32 1\n  %56 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0, i64 0, i32 0, i32 0, i32 0, i32 2\n  %57 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0, i64 0, i32 0, i32 0, i32 0, i32 0\n  %58 = add i32 %54, -1\n  %59 = icmp sgt i32 %58, -1\n  %60 = bitcast %\"class.std::vector\"* %0 to i8*\n  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(24) %60, i8 0, i64 24, i1 false)\n  br i1 %59, label %61, label %128\n\n61:                                               ; preds = %48, %116\n  %62 = phi i32* [ %111, %116 ], [ null, %48 ]\n  %63 = phi i32* [ %112, %116 ], [ null, %48 ]\n  %64 = phi i32* [ %113, %116 ], [ null, %48 ]\n  %65 = phi i32* [ %117, %116 ], [ %51, %48 ]\n  %66 = phi i32 [ %114, %116 ], [ %58, %48 ]\n  %67 = zext i32 %66 to i64\n  %68 = getelementptr inbounds i32, i32* %65, i64 %67\n  %69 = icmp eq i32* %64, %63\n  br i1 %69, label %73, label %70\n\n70:                                               ; preds = %61\n  %71 = load i32, i32* %68, align 4, !tbaa !9\n  store i32 %71, i32* %64, align 4, !tbaa !9\n  %72 = getelementptr inbounds i32, i32* %64, i64 1\n  store i32* %72, i32** %55, align 8, !tbaa !3\n  br label %110\n\n73:                                               ; preds = %61\n  %74 = ptrtoint i32* %63 to i64\n  %75 = ptrtoint i32* %62 to i64\n  %76 = sub i64 %74, %75\n  %77 = ashr exact i64 %76, 2\n  %78 = icmp eq i64 %76, 9223372036854775804\n  br i1 %78, label %79, label %81\n\n79:                                               ; preds = %73\n  invoke void @_ZSt20__throw_length_errorPKc(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str, i64 0, i64 0)) #9\n          to label %80 unwind label %120\n\n80:                                               ; preds = %79\n  unreachable\n\n81:                                               ; preds = %73\n  %82 = icmp eq i64 %76, 0\n  %83 = select i1 %82, i64 1, i64 %77\n  %84 = add nsw i64 %83, %77\n  %85 = icmp ult i64 %84, %77\n  %86 = icmp ugt i64 %84, 2305843009213693951\n  %87 = or i1 %85, %86\n  %88 = select i1 %87, i64 2305843009213693951, i64 %84\n  %89 = icmp eq i64 %88, 0\n  br i1 %89, label %95, label %90\n\n90:                                               ; preds = %81\n  %91 = shl nuw nsw i64 %88, 2\n  %92 = invoke noalias nonnull i8* @_Znwm(i64 %91) #10\n          to label %93 unwind label %118\n\n93:                                               ; preds = %90\n  %94 = bitcast i8* %92 to i32*\n  br label %95\n\n95:                                               ; preds = %93, %81\n  %96 = phi i32* [ %94, %93 ], [ null, %81 ]\n  %97 = getelementptr inbounds i32, i32* %96, i64 %77\n  %98 = load i32, i32* %68, align 4, !tbaa !9\n  store i32 %98, i32* %97, align 4, !tbaa !9\n  %99 = icmp sgt i64 %76, 0\n  br i1 %99, label %100, label %103\n\n100:                                              ; preds = %95\n  %101 = bitcast i32* %96 to i8*\n  %102 = bitcast i32* %62 to i8*\n  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %101, i8* align 4 %102, i64 %76, i1 false) #8\n  br label %103\n\n103:                                              ; preds = %95, %100\n  %104 = getelementptr inbounds i32, i32* %97, i64 1\n  %105 = icmp eq i32* %62, null\n  br i1 %105, label %108, label %106\n\n106:                                              ; preds = %103\n  %107 = bitcast i32* %62 to i8*\n  tail call void @_ZdlPv(i8* nonnull %107) #8\n  br label %108\n\n108:                                              ; preds = %106, %103\n  store i32* %96, i32** %57, align 8, !tbaa !8\n  store i32* %104, i32** %55, align 8, !tbaa !3\n  %109 = getelementptr inbounds i32, i32* %96, i64 %88\n  store i32* %109, i32** %56, align 8, !tbaa !13\n  br label %110\n\n110:                                              ; preds = %70, %108\n  %111 = phi i32* [ %62, %70 ], [ %96, %108 ]\n  %112 = phi i32* [ %63, %70 ], [ %109, %108 ]\n  %113 = phi i32* [ %72, %70 ], [ %104, %108 ]\n  %114 = add i32 %66, -1\n  %115 = icmp sgt i32 %114, -1\n  br i1 %115, label %116, label %128\n\n116:                                              ; preds = %110\n  %117 = load i32*, i32** %5, align 8, !tbaa !8\n  br label %61\n\n118:                                              ; preds = %90\n  %119 = landingpad { i8*, i32 }\n          cleanup\n  br label %122\n\n120:                                              ; preds = %79\n  %121 = landingpad { i8*, i32 }\n          cleanup\n  br label %122\n\n122:                                              ; preds = %120, %118\n  %123 = phi { i8*, i32 } [ %119, %118 ], [ %121, %120 ]\n  %124 = icmp eq i32* %62, null\n  br i1 %124, label %127, label %125\n\n125:                                              ; preds = %122\n  %126 = bitcast i32* %62 to i8*\n  tail call void @_ZdlPv(i8* nonnull %126) #8\n  br label %127\n\n127:                                              ; preds = %122, %125\n  resume { i8*, i32 } %123\n\n128:                                              ; preds = %110, %48, %32, %12\n  ret void\n}\n\n; Function Attrs: argmemonly mustprogress nofree nounwind willreturn writeonly\ndeclare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1\n\n; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn\ndeclare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2\n\ndeclare dso_local i32 @__gxx_personality_v0(...)\n\n; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn\ndeclare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2\n\n; Function Attrs: uwtable\ndefine linkonce_odr dso_local void @_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEElNS0_5__ops15_Iter_less_iterEEvT_S9_T0_T1_(i32* %0, i32* %1, i64 %2) local_unnamed_addr #0 comdat {\n  %4 = alloca %\"struct.__gnu_cxx::__ops::_Iter_less_iter\", align 1\n  %5 = ptrtoint i32* %0 to i64\n  %6 = getelementptr inbounds i32, i32* %0, i64 1\n  %7 = ptrtoint i32* %1 to i64\n  %8 = sub i64 %7, %5\n  %9 = icmp sgt i64 %8, 64\n  br i1 %9, label %10, label %123\n\n10:                                               ; preds = %3, %119\n  %11 = phi i64 [ %121, %119 ], [ %8, %3 ]\n  %12 = phi i64 [ %76, %119 ], [ %2, %3 ]\n  %13 = phi i32* [ %107, %119 ], [ %1, %3 ]\n  %14 = icmp eq i64 %12, 0\n  br i1 %14, label %15, label %74\n\n15:                                               ; preds = %10\n  %16 = getelementptr inbounds %\"struct.__gnu_cxx::__ops::_Iter_less_iter\", %\"struct.__gnu_cxx::__ops::_Iter_less_iter\"* %4, i64 0, i32 0\n  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %16)\n  call void @_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEENS0_5__ops15_Iter_less_iterEEvT_S9_RT0_(i32* %0, i32* %13, %\"struct.__gnu_cxx::__ops::_Iter_less_iter\"* nonnull align 1 dereferenceable(1) %4)\n  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %16)\n  br label %17\n\n17:                                               ; preds = %15, %70\n  %18 = phi i32* [ %19, %70 ], [ %13, %15 ]\n  %19 = getelementptr inbounds i32, i32* %18, i64 -1\n  %20 = load i32, i32* %19, align 4, !tbaa !9\n  %21 = load i32, i32* %0, align 4, !tbaa !9\n  store i32 %21, i32* %19, align 4, !tbaa !9\n  %22 = ptrtoint i32* %19 to i64\n  %23 = sub i64 %22, %5\n  %24 = ashr exact i64 %23, 2\n  %25 = add nsw i64 %24, -1\n  %26 = sdiv i64 %25, 2\n  %27 = icmp sgt i64 %23, 8\n  br i1 %27, label %28, label %43\n\n28:                                               ; preds = %17, %28\n  %29 = phi i64 [ %38, %28 ], [ 0, %17 ]\n  %30 = shl i64 %29, 1\n  %31 = add i64 %30, 2\n  %32 = getelementptr inbounds i32, i32* %0, i64 %31\n  %33 = or i64 %30, 1\n  %34 = getelementptr inbounds i32, i32* %0, i64 %33\n  %35 = load i32, i32* %32, align 4, !tbaa !9\n  %36 = load i32, i32* %34, align 4, !tbaa !9\n  %37 = icmp slt i32 %35, %36\n  %38 = select i1 %37, i64 %33, i64 %31\n  %39 = getelementptr inbounds i32, i32* %0, i64 %38\n  %40 = load i32, i32* %39, align 4, !tbaa !9\n  %41 = getelementptr inbounds i32, i32* %0, i64 %29\n  store i32 %40, i32* %41, align 4, !tbaa !9\n  %42 = icmp slt i64 %38, %26\n  br i1 %42, label %28, label %43, !llvm.loop !14\n\n43:                                               ; preds = %28, %17\n  %44 = phi i64 [ 0, %17 ], [ %38, %28 ]\n  %45 = and i64 %23, 4\n  %46 = icmp eq i64 %45, 0\n  br i1 %46, label %47, label %57\n\n47:                                               ; preds = %43\n  %48 = add nsw i64 %24, -2\n  %49 = sdiv i64 %48, 2\n  %50 = icmp eq i64 %44, %49\n  br i1 %50, label %51, label %57\n\n51:                                               ; preds = %47\n  %52 = shl i64 %44, 1\n  %53 = or i64 %52, 1\n  %54 = getelementptr inbounds i32, i32* %0, i64 %53\n  %55 = load i32, i32* %54, align 4, !tbaa !9\n  %56 = getelementptr inbounds i32, i32* %0, i64 %44\n  store i32 %55, i32* %56, align 4, !tbaa !9\n  br label %57\n\n57:                                               ; preds = %51, %47, %43\n  %58 = phi i64 [ %53, %51 ], [ %44, %47 ], [ %44, %43 ]\n  %59 = icmp sgt i64 %58, 0\n  br i1 %59, label %60, label %70\n\n60:                                               ; preds = %57, %67\n  %61 = phi i64 [ %63, %67 ], [ %58, %57 ]\n  %62 = add nsw i64 %61, -1\n  %63 = lshr i64 %62, 1\n  %64 = getelementptr inbounds i32, i32* %0, i64 %63\n  %65 = load i32, i32* %64, align 4, !tbaa !9\n  %66 = icmp slt i32 %65, %20\n  br i1 %66, label %67, label %70\n\n67:                                               ; preds = %60\n  %68 = getelementptr inbounds i32, i32* %0, i64 %61\n  store i32 %65, i32* %68, align 4, !tbaa !9\n  %69 = icmp ult i64 %62, 2\n  br i1 %69, label %70, label %60, !llvm.loop !16\n\n70:                                               ; preds = %67, %60, %57\n  %71 = phi i64 [ %58, %57 ], [ %61, %60 ], [ 0, %67 ]\n  %72 = getelementptr inbounds i32, i32* %0, i64 %71\n  store i32 %20, i32* %72, align 4, !tbaa !9\n  %73 = icmp sgt i64 %23, 4\n  br i1 %73, label %17, label %123, !llvm.loop !17\n\n74:                                               ; preds = %10\n  %75 = lshr i64 %11, 3\n  %76 = add nsw i64 %12, -1\n  %77 = getelementptr inbounds i32, i32* %0, i64 %75\n  %78 = getelementptr inbounds i32, i32* %13, i64 -1\n  %79 = load i32, i32* %6, align 4, !tbaa !9\n  %80 = load i32, i32* %77, align 4, !tbaa !9\n  %81 = icmp slt i32 %79, %80\n  %82 = load i32, i32* %78, align 4, !tbaa !9\n  br i1 %81, label %83, label %92\n\n83:                                               ; preds = %74\n  %84 = icmp slt i32 %80, %82\n  br i1 %84, label %85, label %87\n\n85:                                               ; preds = %83\n  %86 = load i32, i32* %0, align 4, !tbaa !9\n  store i32 %80, i32* %0, align 4, !tbaa !9\n  store i32 %86, i32* %77, align 4, !tbaa !9\n  br label %101\n\n87:                                               ; preds = %83\n  %88 = icmp slt i32 %79, %82\n  %89 = load i32, i32* %0, align 4, !tbaa !9\n  br i1 %88, label %90, label %91\n\n90:                                               ; preds = %87\n  store i32 %82, i32* %0, align 4, !tbaa !9\n  store i32 %89, i32* %78, align 4, !tbaa !9\n  br label %101\n\n91:                                               ; preds = %87\n  store i32 %79, i32* %0, align 4, !tbaa !9\n  store i32 %89, i32* %6, align 4, !tbaa !9\n  br label %101\n\n92:                                               ; preds = %74\n  %93 = icmp slt i32 %79, %82\n  br i1 %93, label %94, label %96\n\n94:                                               ; preds = %92\n  %95 = load i32, i32* %0, align 4, !tbaa !9\n  store i32 %79, i32* %0, align 4, !tbaa !9\n  store i32 %95, i32* %6, align 4, !tbaa !9\n  br label %101\n\n96:                                               ; preds = %92\n  %97 = icmp slt i32 %80, %82\n  %98 = load i32, i32* %0, align 4, !tbaa !9\n  br i1 %97, label %99, label %100\n\n99:                                               ; preds = %96\n  store i32 %82, i32* %0, align 4, !tbaa !9\n  store i32 %98, i32* %78, align 4, !tbaa !9\n  br label %101\n\n100:                                              ; preds = %96\n  store i32 %80, i32* %0, align 4, !tbaa !9\n  store i32 %98, i32* %77, align 4, !tbaa !9\n  br label %101\n\n101:                                              ; preds = %100, %99, %94, %91, %90, %85\n  br label %102\n\n102:                                              ; preds = %101, %118\n  %103 = phi i32* [ %110, %118 ], [ %6, %101 ]\n  %104 = phi i32* [ %113, %118 ], [ %13, %101 ]\n  %105 = load i32, i32* %0, align 4, !tbaa !9\n  br label %106\n\n106:                                              ; preds = %106, %102\n  %107 = phi i32* [ %103, %102 ], [ %110, %106 ]\n  %108 = load i32, i32* %107, align 4, !tbaa !9\n  %109 = icmp slt i32 %108, %105\n  %110 = getelementptr inbounds i32, i32* %107, i64 1\n  br i1 %109, label %106, label %111, !llvm.loop !18\n\n111:                                              ; preds = %106, %111\n  %112 = phi i32* [ %113, %111 ], [ %104, %106 ]\n  %113 = getelementptr inbounds i32, i32* %112, i64 -1\n  %114 = load i32, i32* %113, align 4, !tbaa !9\n  %115 = icmp slt i32 %105, %114\n  br i1 %115, label %111, label %116, !llvm.loop !19\n\n116:                                              ; preds = %111\n  %117 = icmp ult i32* %107, %113\n  br i1 %117, label %118, label %119\n\n118:                                              ; preds = %116\n  store i32 %114, i32* %107, align 4, !tbaa !9\n  store i32 %108, i32* %113, align 4, !tbaa !9\n  br label %102, !llvm.loop !20\n\n119:                                              ; preds = %116\n  tail call void @_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEElNS0_5__ops15_Iter_less_iterEEvT_S9_T0_T1_(i32* nonnull %107, i32* %13, i64 %76)\n  %120 = ptrtoint i32* %107 to i64\n  %121 = sub i64 %120, %5\n  %122 = icmp sgt i64 %121, 64\n  br i1 %122, label %10, label %123, !llvm.loop !21\n\n123:                                              ; preds = %119, %70, %3\n  ret void\n}\n\n; Function Attrs: uwtable\ndefine linkonce_odr dso_local void @_ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_(i32* %0, i32* %1) local_unnamed_addr #0 comdat {\n  %3 = ptrtoint i32* %1 to i64\n  %4 = ptrtoint i32* %0 to i64\n  %5 = sub i64 %3, %4\n  %6 = icmp sgt i64 %5, 64\n  br i1 %6, label %7, label %38\n\n7:                                                ; preds = %2\n  %8 = bitcast i32* %0 to i8*\n  %9 = getelementptr i32, i32* %0, i64 1\n  %10 = load i32, i32* %9, align 4, !tbaa !9\n  %11 = load i32, i32* %0, align 4, !tbaa !9\n  %12 = icmp slt i32 %10, %11\n  br i1 %12, label %13, label %15\n\n13:                                               ; preds = %7\n  %14 = load i32, i32* %0, align 4\n  store i32 %14, i32* %9, align 4\n  br label %15\n\n15:                                               ; preds = %7, %13\n  %16 = phi i32* [ %0, %13 ], [ %9, %7 ]\n  store i32 %10, i32* %16, align 4, !tbaa !9\n  %17 = getelementptr inbounds i32, i32* %0, i64 2\n  %18 = load i32, i32* %17, align 4, !tbaa !9\n  %19 = load i32, i32* %0, align 4, !tbaa !9\n  %20 = icmp slt i32 %18, %19\n  br i1 %20, label %84, label %74\n\n21:                                               ; preds = %322, %34\n  %22 = phi i32* [ %36, %34 ], [ %324, %322 ]\n  %23 = load i32, i32* %22, align 4, !tbaa !9\n  %24 = getelementptr inbounds i32, i32* %22, i64 -1\n  %25 = load i32, i32* %24, align 4, !tbaa !9\n  %26 = icmp slt i32 %23, %25\n  br i1 %26, label %27, label %34\n\n27:                                               ; preds = %21, %27\n  %28 = phi i32 [ %32, %27 ], [ %25, %21 ]\n  %29 = phi i32* [ %31, %27 ], [ %24, %21 ]\n  %30 = phi i32* [ %29, %27 ], [ %22, %21 ]\n  store i32 %28, i32* %30, align 4, !tbaa !9\n  %31 = getelementptr inbounds i32, i32* %29, i64 -1\n  %32 = load i32, i32* %31, align 4, !tbaa !9\n  %33 = icmp slt i32 %23, %32\n  br i1 %33, label %27, label %34, !llvm.loop !22\n\n34:                                               ; preds = %27, %21\n  %35 = phi i32* [ %22, %21 ], [ %29, %27 ]\n  store i32 %23, i32* %35, align 4, !tbaa !9\n  %36 = getelementptr inbounds i32, i32* %22, i64 1\n  %37 = icmp eq i32* %36, %1\n  br i1 %37, label %73, label %21, !llvm.loop !23\n\n38:                                               ; preds = %2\n  %39 = icmp eq i32* %0, %1\n  br i1 %39, label %73, label %40\n\n40:                                               ; preds = %38\n  %41 = bitcast i32* %0 to i8*\n  %42 = getelementptr inbounds i32, i32* %0, i64 1\n  %43 = icmp eq i32* %42, %1\n  br i1 %43, label %73, label %44\n\n44:                                               ; preds = %40, %69\n  %45 = phi i32* [ %71, %69 ], [ %42, %40 ]\n  %46 = phi i32* [ %45, %69 ], [ %0, %40 ]\n  %47 = load i32, i32* %45, align 4, !tbaa !9\n  %48 = load i32, i32* %0, align 4, !tbaa !9\n  %49 = icmp slt i32 %47, %48\n  br i1 %49, label %50, label %59\n\n50:                                               ; preds = %44\n  %51 = ptrtoint i32* %45 to i64\n  %52 = sub i64 %51, %4\n  %53 = icmp eq i64 %52, 0\n  br i1 %53, label %69, label %54\n\n54:                                               ; preds = %50\n  %55 = ashr exact i64 %52, 2\n  %56 = sub nsw i64 2, %55\n  %57 = getelementptr inbounds i32, i32* %46, i64 %56\n  %58 = bitcast i32* %57 to i8*\n  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* nonnull align 4 %58, i8* nonnull align 4 %41, i64 %52, i1 false) #8\n  br label %69\n\n59:                                               ; preds = %44\n  %60 = load i32, i32* %46, align 4, !tbaa !9\n  %61 = icmp slt i32 %47, %60\n  br i1 %61, label %62, label %69\n\n62:                                               ; preds = %59, %62\n  %63 = phi i32 [ %67, %62 ], [ %60, %59 ]\n  %64 = phi i32* [ %66, %62 ], [ %46, %59 ]\n  %65 = phi i32* [ %64, %62 ], [ %45, %59 ]\n  store i32 %63, i32* %65, align 4, !tbaa !9\n  %66 = getelementptr inbounds i32, i32* %64, i64 -1\n  %67 = load i32, i32* %66, align 4, !tbaa !9\n  %68 = icmp slt i32 %47, %67\n  br i1 %68, label %62, label %69, !llvm.loop !22\n\n69:                                               ; preds = %62, %59, %54, %50\n  %70 = phi i32* [ %0, %50 ], [ %0, %54 ], [ %45, %59 ], [ %64, %62 ]\n  store i32 %47, i32* %70, align 4, !tbaa !9\n  %71 = getelementptr inbounds i32, i32* %45, i64 1\n  %72 = icmp eq i32* %71, %1\n  br i1 %72, label %73, label %44, !llvm.loop !24\n\n73:                                               ; preds = %69, %34, %40, %38, %322\n  ret void\n\n74:                                               ; preds = %15\n  %75 = load i32, i32* %9, align 4, !tbaa !9\n  %76 = icmp slt i32 %18, %75\n  br i1 %76, label %77, label %88\n\n77:                                               ; preds = %74, %77\n  %78 = phi i32 [ %82, %77 ], [ %75, %74 ]\n  %79 = phi i32* [ %81, %77 ], [ %9, %74 ]\n  %80 = phi i32* [ %79, %77 ], [ %17, %74 ]\n  store i32 %78, i32* %80, align 4, !tbaa !9\n  %81 = getelementptr inbounds i32, i32* %79, i64 -1\n  %82 = load i32, i32* %81, align 4, !tbaa !9\n  %83 = icmp slt i32 %18, %82\n  br i1 %83, label %77, label %88, !llvm.loop !22\n\n84:                                               ; preds = %15\n  %85 = bitcast i32* %0 to i64*\n  %86 = bitcast i32* %9 to i64*\n  %87 = load i64, i64* %85, align 4\n  store i64 %87, i64* %86, align 4\n  br label %88\n\n88:                                               ; preds = %77, %84, %74\n  %89 = phi i32* [ %0, %84 ], [ %17, %74 ], [ %79, %77 ]\n  store i32 %18, i32* %89, align 4, !tbaa !9\n  %90 = getelementptr inbounds i32, i32* %0, i64 3\n  %91 = load i32, i32* %90, align 4, !tbaa !9\n  %92 = load i32, i32* %0, align 4, !tbaa !9\n  %93 = icmp slt i32 %91, %92\n  br i1 %93, label %104, label %94\n\n94:                                               ; preds = %88\n  %95 = load i32, i32* %17, align 4, !tbaa !9\n  %96 = icmp slt i32 %91, %95\n  br i1 %96, label %97, label %106\n\n97:                                               ; preds = %94, %97\n  %98 = phi i32 [ %102, %97 ], [ %95, %94 ]\n  %99 = phi i32* [ %101, %97 ], [ %17, %94 ]\n  %100 = phi i32* [ %99, %97 ], [ %90, %94 ]\n  store i32 %98, i32* %100, align 4, !tbaa !9\n  %101 = getelementptr inbounds i32, i32* %99, i64 -1\n  %102 = load i32, i32* %101, align 4, !tbaa !9\n  %103 = icmp slt i32 %91, %102\n  br i1 %103, label %97, label %106, !llvm.loop !22\n\n104:                                              ; preds = %88\n  %105 = bitcast i32* %9 to i8*\n  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* noundef nonnull align 4 dereferenceable(12) %105, i8* noundef nonnull align 4 dereferenceable(12) %8, i64 12, i1 false) #8\n  br label %106\n\n106:                                              ; preds = %97, %104, %94\n  %107 = phi i32* [ %0, %104 ], [ %90, %94 ], [ %99, %97 ]\n  store i32 %91, i32* %107, align 4, !tbaa !9\n  %108 = getelementptr inbounds i32, i32* %0, i64 4\n  %109 = load i32, i32* %108, align 4, !tbaa !9\n  %110 = load i32, i32* %0, align 4, !tbaa !9\n  %111 = icmp slt i32 %109, %110\n  br i1 %111, label %122, label %112\n\n112:                                              ; preds = %106\n  %113 = load i32, i32* %90, align 4, !tbaa !9\n  %114 = icmp slt i32 %109, %113\n  br i1 %114, label %115, label %124\n\n115:                                              ; preds = %112, %115\n  %116 = phi i32 [ %120, %115 ], [ %113, %112 ]\n  %117 = phi i32* [ %119, %115 ], [ %90, %112 ]\n  %118 = phi i32* [ %117, %115 ], [ %108, %112 ]\n  store i32 %116, i32* %118, align 4, !tbaa !9\n  %119 = getelementptr inbounds i32, i32* %117, i64 -1\n  %120 = load i32, i32* %119, align 4, !tbaa !9\n  %121 = icmp slt i32 %109, %120\n  br i1 %121, label %115, label %124, !llvm.loop !22\n\n122:                                              ; preds = %106\n  %123 = bitcast i32* %9 to i8*\n  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* noundef nonnull align 4 dereferenceable(16) %123, i8* noundef nonnull align 4 dereferenceable(16) %8, i64 16, i1 false) #8\n  br label %124\n\n124:                                              ; preds = %115, %122, %112\n  %125 = phi i32* [ %0, %122 ], [ %108, %112 ], [ %117, %115 ]\n  store i32 %109, i32* %125, align 4, !tbaa !9\n  %126 = getelementptr inbounds i32, i32* %0, i64 5\n  %127 = load i32, i32* %126, align 4, !tbaa !9\n  %128 = load i32, i32* %0, align 4, !tbaa !9\n  %129 = icmp slt i32 %127, %128\n  br i1 %129, label %140, label %130\n\n130:                                              ; preds = %124\n  %131 = load i32, i32* %108, align 4, !tbaa !9\n  %132 = icmp slt i32 %127, %131\n  br i1 %132, label %133, label %142\n\n133:                                              ; preds = %130, %133\n  %134 = phi i32 [ %138, %133 ], [ %131, %130 ]\n  %135 = phi i32* [ %137, %133 ], [ %108, %130 ]\n  %136 = phi i32* [ %135, %133 ], [ %126, %130 ]\n  store i32 %134, i32* %136, align 4, !tbaa !9\n  %137 = getelementptr inbounds i32, i32* %135, i64 -1\n  %138 = load i32, i32* %137, align 4, !tbaa !9\n  %139 = icmp slt i32 %127, %138\n  br i1 %139, label %133, label %142, !llvm.loop !22\n\n140:                                              ; preds = %124\n  %141 = bitcast i32* %9 to i8*\n  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* noundef nonnull align 4 dereferenceable(20) %141, i8* noundef nonnull align 4 dereferenceable(20) %8, i64 20, i1 false) #8\n  br label %142\n\n142:                                              ; preds = %133, %140, %130\n  %143 = phi i32* [ %0, %140 ], [ %126, %130 ], [ %135, %133 ]\n  store i32 %127, i32* %143, align 4, !tbaa !9\n  %144 = getelementptr inbounds i32, i32* %0, i64 6\n  %145 = load i32, i32* %144, align 4, !tbaa !9\n  %146 = load i32, i32* %0, align 4, !tbaa !9\n  %147 = icmp slt i32 %145, %146\n  br i1 %147, label %158, label %148\n\n148:                                              ; preds = %142\n  %149 = load i32, i32* %126, align 4, !tbaa !9\n  %150 = icmp slt i32 %145, %149\n  br i1 %150, label %151, label %160\n\n151:                                              ; preds = %148, %151\n  %152 = phi i32 [ %156, %151 ], [ %149, %148 ]\n  %153 = phi i32* [ %155, %151 ], [ %126, %148 ]\n  %154 = phi i32* [ %153, %151 ], [ %144, %148 ]\n  store i32 %152, i32* %154, align 4, !tbaa !9\n  %155 = getelementptr inbounds i32, i32* %153, i64 -1\n  %156 = load i32, i32* %155, align 4, !tbaa !9\n  %157 = icmp slt i32 %145, %156\n  br i1 %157, label %151, label %160, !llvm.loop !22\n\n158:                                              ; preds = %142\n  %159 = bitcast i32* %9 to i8*\n  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* noundef nonnull align 4 dereferenceable(24) %159, i8* noundef nonnull align 4 dereferenceable(24) %8, i64 24, i1 false) #8\n  br label %160\n\n160:                                              ; preds = %151, %158, %148\n  %161 = phi i32* [ %0, %158 ], [ %144, %148 ], [ %153, %151 ]\n  store i32 %145, i32* %161, align 4, !tbaa !9\n  %162 = getelementptr inbounds i32, i32* %0, i64 7\n  %163 = load i32, i32* %162, align 4, !tbaa !9\n  %164 = load i32, i32* %0, align 4, !tbaa !9\n  %165 = icmp slt i32 %163, %164\n  br i1 %165, label %176, label %166\n\n166:                                              ; preds = %160\n  %167 = load i32, i32* %144, align 4, !tbaa !9\n  %168 = icmp slt i32 %163, %167\n  br i1 %168, label %169, label %178\n\n169:                                              ; preds = %166, %169\n  %170 = phi i32 [ %174, %169 ], [ %167, %166 ]\n  %171 = phi i32* [ %173, %169 ], [ %144, %166 ]\n  %172 = phi i32* [ %171, %169 ], [ %162, %166 ]\n  store i32 %170, i32* %172, align 4, !tbaa !9\n  %173 = getelementptr inbounds i32, i32* %171, i64 -1\n  %174 = load i32, i32* %173, align 4, !tbaa !9\n  %175 = icmp slt i32 %163, %174\n  br i1 %175, label %169, label %178, !llvm.loop !22\n\n176:                                              ; preds = %160\n  %177 = bitcast i32* %9 to i8*\n  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* noundef nonnull align 4 dereferenceable(28) %177, i8* noundef nonnull align 4 dereferenceable(28) %8, i64 28, i1 false) #8\n  br label %178\n\n178:                                              ; preds = %169, %176, %166\n  %179 = phi i32* [ %0, %176 ], [ %162, %166 ], [ %171, %169 ]\n  store i32 %163, i32* %179, align 4, !tbaa !9\n  %180 = getelementptr inbounds i32, i32* %0, i64 8\n  %181 = load i32, i32* %180, align 4, !tbaa !9\n  %182 = load i32, i32* %0, align 4, !tbaa !9\n  %183 = icmp slt i32 %181, %182\n  br i1 %183, label %194, label %184\n\n184:                                              ; preds = %178\n  %185 = load i32, i32* %162, align 4, !tbaa !9\n  %186 = icmp slt i32 %181, %185\n  br i1 %186, label %187, label %196\n\n187:                                              ; preds = %184, %187\n  %188 = phi i32 [ %192, %187 ], [ %185, %184 ]\n  %189 = phi i32* [ %191, %187 ], [ %162, %184 ]\n  %190 = phi i32* [ %189, %187 ], [ %180, %184 ]\n  store i32 %188, i32* %190, align 4, !tbaa !9\n  %191 = getelementptr inbounds i32, i32* %189, i64 -1\n  %192 = load i32, i32* %191, align 4, !tbaa !9\n  %193 = icmp slt i32 %181, %192\n  br i1 %193, label %187, label %196, !llvm.loop !22\n\n194:                                              ; preds = %178\n  %195 = bitcast i32* %9 to i8*\n  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* noundef nonnull align 4 dereferenceable(32) %195, i8* noundef nonnull align 4 dereferenceable(32) %8, i64 32, i1 false) #8\n  br label %196\n\n196:                                              ; preds = %187, %194, %184\n  %197 = phi i32* [ %0, %194 ], [ %180, %184 ], [ %189, %187 ]\n  store i32 %181, i32* %197, align 4, !tbaa !9\n  %198 = getelementptr inbounds i32, i32* %0, i64 9\n  %199 = load i32, i32* %198, align 4, !tbaa !9\n  %200 = load i32, i32* %0, align 4, !tbaa !9\n  %201 = icmp slt i32 %199, %200\n  br i1 %201, label %212, label %202\n\n202:                                              ; preds = %196\n  %203 = load i32, i32* %180, align 4, !tbaa !9\n  %204 = icmp slt i32 %199, %203\n  br i1 %204, label %205, label %214\n\n205:                                              ; preds = %202, %205\n  %206 = phi i32 [ %210, %205 ], [ %203, %202 ]\n  %207 = phi i32* [ %209, %205 ], [ %180, %202 ]\n  %208 = phi i32* [ %207, %205 ], [ %198, %202 ]\n  store i32 %206, i32* %208, align 4, !tbaa !9\n  %209 = getelementptr inbounds i32, i32* %207, i64 -1\n  %210 = load i32, i32* %209, align 4, !tbaa !9\n  %211 = icmp slt i32 %199, %210\n  br i1 %211, label %205, label %214, !llvm.loop !22\n\n212:                                              ; preds = %196\n  %213 = bitcast i32* %9 to i8*\n  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* noundef nonnull align 4 dereferenceable(36) %213, i8* noundef nonnull align 4 dereferenceable(36) %8, i64 36, i1 false) #8\n  br label %214\n\n214:                                              ; preds = %205, %212, %202\n  %215 = phi i32* [ %0, %212 ], [ %198, %202 ], [ %207, %205 ]\n  store i32 %199, i32* %215, align 4, !tbaa !9\n  %216 = getelementptr inbounds i32, i32* %0, i64 10\n  %217 = load i32, i32* %216, align 4, !tbaa !9\n  %218 = load i32, i32* %0, align 4, !tbaa !9\n  %219 = icmp slt i32 %217, %218\n  br i1 %219, label %230, label %220\n\n220:                                              ; preds = %214\n  %221 = load i32, i32* %198, align 4, !tbaa !9\n  %222 = icmp slt i32 %217, %221\n  br i1 %222, label %223, label %232\n\n223:                                              ; preds = %220, %223\n  %224 = phi i32 [ %228, %223 ], [ %221, %220 ]\n  %225 = phi i32* [ %227, %223 ], [ %198, %220 ]\n  %226 = phi i32* [ %225, %223 ], [ %216, %220 ]\n  store i32 %224, i32* %226, align 4, !tbaa !9\n  %227 = getelementptr inbounds i32, i32* %225, i64 -1\n  %228 = load i32, i32* %227, align 4, !tbaa !9\n  %229 = icmp slt i32 %217, %228\n  br i1 %229, label %223, label %232, !llvm.loop !22\n\n230:                                              ; preds = %214\n  %231 = bitcast i32* %9 to i8*\n  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* noundef nonnull align 4 dereferenceable(40) %231, i8* noundef nonnull align 4 dereferenceable(40) %8, i64 40, i1 false) #8\n  br label %232\n\n232:                                              ; preds = %223, %230, %220\n  %233 = phi i32* [ %0, %230 ], [ %216, %220 ], [ %225, %223 ]\n  store i32 %217, i32* %233, align 4, !tbaa !9\n  %234 = getelementptr inbounds i32, i32* %0, i64 11\n  %235 = load i32, i32* %234, align 4, !tbaa !9\n  %236 = load i32, i32* %0, align 4, !tbaa !9\n  %237 = icmp slt i32 %235, %236\n  br i1 %237, label %248, label %238\n\n238:                                              ; preds = %232\n  %239 = load i32, i32* %216, align 4, !tbaa !9\n  %240 = icmp slt i32 %235, %239\n  br i1 %240, label %241, label %250\n\n241:                                              ; preds = %238, %241\n  %242 = phi i32 [ %246, %241 ], [ %239, %238 ]\n  %243 = phi i32* [ %245, %241 ], [ %216, %238 ]\n  %244 = phi i32* [ %243, %241 ], [ %234, %238 ]\n  store i32 %242, i32* %244, align 4, !tbaa !9\n  %245 = getelementptr inbounds i32, i32* %243, i64 -1\n  %246 = load i32, i32* %245, align 4, !tbaa !9\n  %247 = icmp slt i32 %235, %246\n  br i1 %247, label %241, label %250, !llvm.loop !22\n\n248:                                              ; preds = %232\n  %249 = bitcast i32* %9 to i8*\n  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* noundef nonnull align 4 dereferenceable(44) %249, i8* noundef nonnull align 4 dereferenceable(44) %8, i64 44, i1 false) #8\n  br label %250\n\n250:                                              ; preds = %241, %248, %238\n  %251 = phi i32* [ %0, %248 ], [ %234, %238 ], [ %243, %241 ]\n  store i32 %235, i32* %251, align 4, !tbaa !9\n  %252 = getelementptr inbounds i32, i32* %0, i64 12\n  %253 = load i32, i32* %252, align 4, !tbaa !9\n  %254 = load i32, i32* %0, align 4, !tbaa !9\n  %255 = icmp slt i32 %253, %254\n  br i1 %255, label %266, label %256\n\n256:                                              ; preds = %250\n  %257 = load i32, i32* %234, align 4, !tbaa !9\n  %258 = icmp slt i32 %253, %257\n  br i1 %258, label %259, label %268\n\n259:                                              ; preds = %256, %259\n  %260 = phi i32 [ %264, %259 ], [ %257, %256 ]\n  %261 = phi i32* [ %263, %259 ], [ %234, %256 ]\n  %262 = phi i32* [ %261, %259 ], [ %252, %256 ]\n  store i32 %260, i32* %262, align 4, !tbaa !9\n  %263 = getelementptr inbounds i32, i32* %261, i64 -1\n  %264 = load i32, i32* %263, align 4, !tbaa !9\n  %265 = icmp slt i32 %253, %264\n  br i1 %265, label %259, label %268, !llvm.loop !22\n\n266:                                              ; preds = %250\n  %267 = bitcast i32* %9 to i8*\n  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* noundef nonnull align 4 dereferenceable(48) %267, i8* noundef nonnull align 4 dereferenceable(48) %8, i64 48, i1 false) #8\n  br label %268\n\n268:                                              ; preds = %259, %266, %256\n  %269 = phi i32* [ %0, %266 ], [ %252, %256 ], [ %261, %259 ]\n  store i32 %253, i32* %269, align 4, !tbaa !9\n  %270 = getelementptr inbounds i32, i32* %0, i64 13\n  %271 = load i32, i32* %270, align 4, !tbaa !9\n  %272 = load i32, i32* %0, align 4, !tbaa !9\n  %273 = icmp slt i32 %271, %272\n  br i1 %273, label %284, label %274\n\n274:                                              ; preds = %268\n  %275 = load i32, i32* %252, align 4, !tbaa !9\n  %276 = icmp slt i32 %271, %275\n  br i1 %276, label %277, label %286\n\n277:                                              ; preds = %274, %277\n  %278 = phi i32 [ %282, %277 ], [ %275, %274 ]\n  %279 = phi i32* [ %281, %277 ], [ %252, %274 ]\n  %280 = phi i32* [ %279, %277 ], [ %270, %274 ]\n  store i32 %278, i32* %280, align 4, !tbaa !9\n  %281 = getelementptr inbounds i32, i32* %279, i64 -1\n  %282 = load i32, i32* %281, align 4, !tbaa !9\n  %283 = icmp slt i32 %271, %282\n  br i1 %283, label %277, label %286, !llvm.loop !22\n\n284:                                              ; preds = %268\n  %285 = bitcast i32* %9 to i8*\n  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* noundef nonnull align 4 dereferenceable(52) %285, i8* noundef nonnull align 4 dereferenceable(52) %8, i64 52, i1 false) #8\n  br label %286\n\n286:                                              ; preds = %277, %284, %274\n  %287 = phi i32* [ %0, %284 ], [ %270, %274 ], [ %279, %277 ]\n  store i32 %271, i32* %287, align 4, !tbaa !9\n  %288 = getelementptr inbounds i32, i32* %0, i64 14\n  %289 = load i32, i32* %288, align 4, !tbaa !9\n  %290 = load i32, i32* %0, align 4, !tbaa !9\n  %291 = icmp slt i32 %289, %290\n  br i1 %291, label %302, label %292\n\n292:                                              ; preds = %286\n  %293 = load i32, i32* %270, align 4, !tbaa !9\n  %294 = icmp slt i32 %289, %293\n  br i1 %294, label %295, label %304\n\n295:                                              ; preds = %292, %295\n  %296 = phi i32 [ %300, %295 ], [ %293, %292 ]\n  %297 = phi i32* [ %299, %295 ], [ %270, %292 ]\n  %298 = phi i32* [ %297, %295 ], [ %288, %292 ]\n  store i32 %296, i32* %298, align 4, !tbaa !9\n  %299 = getelementptr inbounds i32, i32* %297, i64 -1\n  %300 = load i32, i32* %299, align 4, !tbaa !9\n  %301 = icmp slt i32 %289, %300\n  br i1 %301, label %295, label %304, !llvm.loop !22\n\n302:                                              ; preds = %286\n  %303 = bitcast i32* %9 to i8*\n  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* noundef nonnull align 4 dereferenceable(56) %303, i8* noundef nonnull align 4 dereferenceable(56) %8, i64 56, i1 false) #8\n  br label %304\n\n304:                                              ; preds = %295, %302, %292\n  %305 = phi i32* [ %0, %302 ], [ %288, %292 ], [ %297, %295 ]\n  store i32 %289, i32* %305, align 4, !tbaa !9\n  %306 = getelementptr inbounds i32, i32* %0, i64 15\n  %307 = load i32, i32* %306, align 4, !tbaa !9\n  %308 = load i32, i32* %0, align 4, !tbaa !9\n  %309 = icmp slt i32 %307, %308\n  br i1 %309, label %320, label %310\n\n310:                                              ; preds = %304\n  %311 = load i32, i32* %288, align 4, !tbaa !9\n  %312 = icmp slt i32 %307, %311\n  br i1 %312, label %313, label %322\n\n313:                                              ; preds = %310, %313\n  %314 = phi i32 [ %318, %313 ], [ %311, %310 ]\n  %315 = phi i32* [ %317, %313 ], [ %288, %310 ]\n  %316 = phi i32* [ %315, %313 ], [ %306, %310 ]\n  store i32 %314, i32* %316, align 4, !tbaa !9\n  %317 = getelementptr inbounds i32, i32* %315, i64 -1\n  %318 = load i32, i32* %317, align 4, !tbaa !9\n  %319 = icmp slt i32 %307, %318\n  br i1 %319, label %313, label %322, !llvm.loop !22\n\n320:                                              ; preds = %304\n  %321 = bitcast i32* %9 to i8*\n  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* noundef nonnull align 4 dereferenceable(60) %321, i8* noundef nonnull align 4 dereferenceable(60) %8, i64 60, i1 false) #8\n  br label %322\n\n322:                                              ; preds = %313, %320, %310\n  %323 = phi i32* [ %0, %320 ], [ %306, %310 ], [ %315, %313 ]\n  store i32 %307, i32* %323, align 4, !tbaa !9\n  %324 = getelementptr inbounds i32, i32* %0, i64 16\n  %325 = icmp eq i32* %324, %1\n  br i1 %325, label %73, label %21\n}\n\n; Function Attrs: uwtable\ndefine linkonce_odr dso_local void @_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEENS0_5__ops15_Iter_less_iterEEvT_S9_RT0_(i32* %0, i32* %1, %\"struct.__gnu_cxx::__ops::_Iter_less_iter\"* nonnull align 1 dereferenceable(1) %2) local_unnamed_addr #0 comdat {\n  %4 = ptrtoint i32* %1 to i64\n  %5 = ptrtoint i32* %0 to i64\n  %6 = sub i64 %4, %5\n  %7 = ashr exact i64 %6, 2\n  %8 = icmp slt i64 %6, 8\n  br i1 %8, label %100, label %9\n\n9:                                                ; preds = %3\n  %10 = add nsw i64 %7, -2\n  %11 = lshr i64 %10, 1\n  %12 = add nsw i64 %7, -1\n  %13 = sdiv i64 %12, 2\n  %14 = and i64 %6, 4\n  %15 = icmp eq i64 %14, 0\n  br i1 %15, label %16, label %20\n\n16:                                               ; preds = %9\n  %17 = or i64 %10, 1\n  %18 = getelementptr inbounds i32, i32* %0, i64 %17\n  %19 = getelementptr inbounds i32, i32* %0, i64 %11\n  br label %57\n\n20:                                               ; preds = %9, %52\n  %21 = phi i64 [ %56, %52 ], [ %11, %9 ]\n  %22 = getelementptr inbounds i32, i32* %0, i64 %21\n  %23 = load i32, i32* %22, align 4, !tbaa !9\n  %24 = icmp sgt i64 %13, %21\n  br i1 %24, label %25, label %52\n\n25:                                               ; preds = %20, %25\n  %26 = phi i64 [ %35, %25 ], [ %21, %20 ]\n  %27 = shl i64 %26, 1\n  %28 = add i64 %27, 2\n  %29 = getelementptr inbounds i32, i32* %0, i64 %28\n  %30 = or i64 %27, 1\n  %31 = getelementptr inbounds i32, i32* %0, i64 %30\n  %32 = load i32, i32* %29, align 4, !tbaa !9\n  %33 = load i32, i32* %31, align 4, !tbaa !9\n  %34 = icmp slt i32 %32, %33\n  %35 = select i1 %34, i64 %30, i64 %28\n  %36 = getelementptr inbounds i32, i32* %0, i64 %35\n  %37 = load i32, i32* %36, align 4, !tbaa !9\n  %38 = getelementptr inbounds i32, i32* %0, i64 %26\n  store i32 %37, i32* %38, align 4, !tbaa !9\n  %39 = icmp slt i64 %35, %13\n  br i1 %39, label %25, label %40, !llvm.loop !14\n\n40:                                               ; preds = %25\n  %41 = icmp sgt i64 %35, %21\n  br i1 %41, label %42, label %52\n\n42:                                               ; preds = %40, %49\n  %43 = phi i64 [ %45, %49 ], [ %35, %40 ]\n  %44 = add nsw i64 %43, -1\n  %45 = sdiv i64 %44, 2\n  %46 = getelementptr inbounds i32, i32* %0, i64 %45\n  %47 = load i32, i32* %46, align 4, !tbaa !9\n  %48 = icmp slt i32 %47, %23\n  br i1 %48, label %49, label %52\n\n49:                                               ; preds = %42\n  %50 = getelementptr inbounds i32, i32* %0, i64 %43\n  store i32 %47, i32* %50, align 4, !tbaa !9\n  %51 = icmp sgt i64 %45, %21\n  br i1 %51, label %42, label %52, !llvm.loop !16\n\n52:                                               ; preds = %42, %49, %20, %40\n  %53 = phi i64 [ %35, %40 ], [ %21, %20 ], [ %45, %49 ], [ %43, %42 ]\n  %54 = getelementptr inbounds i32, i32* %0, i64 %53\n  store i32 %23, i32* %54, align 4, !tbaa !9\n  %55 = icmp eq i64 %21, 0\n  %56 = add nsw i64 %21, -1\n  br i1 %55, label %100, label %20, !llvm.loop !25\n\n57:                                               ; preds = %16, %95\n  %58 = phi i64 [ %99, %95 ], [ %11, %16 ]\n  %59 = getelementptr inbounds i32, i32* %0, i64 %58\n  %60 = load i32, i32* %59, align 4, !tbaa !9\n  %61 = icmp sgt i64 %13, %58\n  br i1 %61, label %62, label %77\n\n62:                                               ; preds = %57, %62\n  %63 = phi i64 [ %72, %62 ], [ %58, %57 ]\n  %64 = shl i64 %63, 1\n  %65 = add i64 %64, 2\n  %66 = getelementptr inbounds i32, i32* %0, i64 %65\n  %67 = or i64 %64, 1\n  %68 = getelementptr inbounds i32, i32* %0, i64 %67\n  %69 = load i32, i32* %66, align 4, !tbaa !9\n  %70 = load i32, i32* %68, align 4, !tbaa !9\n  %71 = icmp slt i32 %69, %70\n  %72 = select i1 %71, i64 %67, i64 %65\n  %73 = getelementptr inbounds i32, i32* %0, i64 %72\n  %74 = load i32, i32* %73, align 4, !tbaa !9\n  %75 = getelementptr inbounds i32, i32* %0, i64 %63\n  store i32 %74, i32* %75, align 4, !tbaa !9\n  %76 = icmp slt i64 %72, %13\n  br i1 %76, label %62, label %77, !llvm.loop !14\n\n77:                                               ; preds = %62, %57\n  %78 = phi i64 [ %58, %57 ], [ %72, %62 ]\n  %79 = icmp eq i64 %78, %11\n  br i1 %79, label %80, label %82\n\n80:                                               ; preds = %77\n  %81 = load i32, i32* %18, align 4, !tbaa !9\n  store i32 %81, i32* %19, align 4, !tbaa !9\n  br label %82\n\n82:                                               ; preds = %80, %77\n  %83 = phi i64 [ %17, %80 ], [ %78, %77 ]\n  %84 = icmp sgt i64 %83, %58\n  br i1 %84, label %85, label %95\n\n85:                                               ; preds = %82, %92\n  %86 = phi i64 [ %88, %92 ], [ %83, %82 ]\n  %87 = add nsw i64 %86, -1\n  %88 = sdiv i64 %87, 2\n  %89 = getelementptr inbounds i32, i32* %0, i64 %88\n  %90 = load i32, i32* %89, align 4, !tbaa !9\n  %91 = icmp slt i32 %90, %60\n  br i1 %91, label %92, label %95\n\n92:                                               ; preds = %85\n  %93 = getelementptr inbounds i32, i32* %0, i64 %86\n  store i32 %90, i32* %93, align 4, !tbaa !9\n  %94 = icmp sgt i64 %88, %58\n  br i1 %94, label %85, label %95, !llvm.loop !16\n\n95:                                               ; preds = %85, %92, %82\n  %96 = phi i64 [ %83, %82 ], [ %88, %92 ], [ %86, %85 ]\n  %97 = getelementptr inbounds i32, i32* %0, i64 %96\n  store i32 %60, i32* %97, align 4, !tbaa !9\n  %98 = icmp eq i64 %58, 0\n  %99 = add nsw i64 %58, -1\n  br i1 %98, label %100, label %57, !llvm.loop !25\n\n100:                                              ; preds = %52, %95, %3\n  ret void\n}\n\n; Function Attrs: mustprogress nofree nosync nounwind readnone speculatable willreturn\ndeclare i64 @llvm.ctlz.i64(i64, i1 immarg) #3\n\n; Function Attrs: argmemonly mustprogress nofree nounwind willreturn\ndeclare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #4\n\n; Function Attrs: nobuiltin nounwind\ndeclare dso_local void @_ZdlPv(i8*) local_unnamed_addr #5\n\n; Function Attrs: noreturn\ndeclare dso_local void @_ZSt20__throw_length_errorPKc(i8*) local_unnamed_addr #6\n\n; Function Attrs: nobuiltin allocsize(0)\ndeclare dso_local nonnull i8* @_Znwm(i64) local_unnamed_addr #7\n\nattributes #0 = { uwtable \"frame-pointer\"=\"none\" \"min-legal-vector-width\"=\"0\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #1 = { argmemonly mustprogress nofree nounwind willreturn writeonly }\nattributes #2 = { argmemonly mustprogress nofree nosync nounwind willreturn }\nattributes #3 = { mustprogress nofree nosync nounwind readnone speculatable willreturn }\nattributes #4 = { argmemonly mustprogress nofree nounwind willreturn }\nattributes #5 = { nobuiltin nounwind \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #6 = { noreturn \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #7 = { nobuiltin allocsize(0) \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #8 = { nounwind }\nattributes #9 = { noreturn }\nattributes #10 = { allocsize(0) }\n\n!llvm.module.flags = !{!0, !1}\n!llvm.ident = !{!2}\n\n!0 = !{i32 1, !\"wchar_size\", i32 4}\n!1 = !{i32 7, !\"uwtable\", i32 1}\n!2 = !{!\"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)\"}\n!3 = !{!4, !5, i64 8}\n!4 = !{!\"_ZTSNSt12_Vector_baseIiSaIiEE17_Vector_impl_dataE\", !5, i64 0, !5, i64 8, !5, i64 16}\n!5 = !{!\"any pointer\", !6, i64 0}\n!6 = !{!\"omnipotent char\", !7, i64 0}\n!7 = !{!\"Simple C++ TBAA\"}\n!8 = !{!4, !5, i64 0}\n!9 = !{!10, !10, i64 0}\n!10 = !{!\"int\", !6, i64 0}\n!11 = !{i64 0, i64 65}\n!12 = !{!5, !5, i64 0}\n!13 = !{!4, !5, i64 16}\n!14 = distinct !{!14, !15}\n!15 = !{!\"llvm.loop.mustprogress\"}\n!16 = distinct !{!16, !15}\n!17 = distinct !{!17, !15}\n!18 = distinct !{!18, !15}\n!19 = distinct !{!19, !15}\n!20 = distinct !{!20, !15}\n!21 = distinct !{!21, !15}\n!22 = distinct !{!22, !15}\n!23 = distinct !{!23, !15}\n!24 = distinct !{!24, !15}\n!25 = distinct !{!25, !15}\n", "target": "This is the targeted source code:\n/*\nGiven a vector of non-negative integers, return a copy of the given vector after sorting,\nyou will sort the given vector in ascending order if the sum( first index value, last index value) is odd,\nor sort it in descending order if the sum( first index value, last index value) is even.\n\nNote:\n* don't change the given vector.\n\nExamples:\n* sort_vector({}) => {}\n* sort_vector({5}) => {5}\n* sort_vector({2, 4, 3, 0, 1, 5}) => {0, 1, 2, 3, 4, 5}\n* sort_vector({2, 4, 3, 0, 1, 5, 6}) => {6, 5, 4, 3, 2, 1, 0}\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> sort_array(vector<int> array){\n\n    if (array.size()==0) return {};\n    if ((array[0]+array[array.size()-1]) %2==1)\n    {\n        sort(array.begin(),array.end());\n        return array;\n    }\n    else\n    {\n        sort(array.begin(),array.end());\n        vector<int> out={};\n        for (int i=array.size()-1;i>=0;i-=1)\n            out.push_back(array[i]);\n        return out;\n    }\n\n}\n"}
{"input": "Convert this to C++:\n; ModuleID = '../../Human_xBenchmarks_164/CPP_89/CPP_89.cpp'\nsource_filename = \"../../Human_xBenchmarks_164/CPP_89/CPP_89.cpp\"\ntarget datalayout = \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\ntarget triple = \"x86_64-unknown-linux-gnu\"\n\n%\"class.std::__cxx11::basic_string\" = type { %\"struct.std::__cxx11::basic_string<char>::_Alloc_hider\", i64, %union.anon }\n%\"struct.std::__cxx11::basic_string<char>::_Alloc_hider\" = type { i8* }\n%union.anon = type { i64, [8 x i8] }\n\n; Function Attrs: uwtable\ndefine dso_local void @_Z7encryptNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE(%\"class.std::__cxx11::basic_string\"* noalias sret(%\"class.std::__cxx11::basic_string\") align 8 %0, %\"class.std::__cxx11::basic_string\"* nocapture readonly %1) local_unnamed_addr #0 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {\n  %3 = alloca i64, align 8\n  %4 = alloca %\"class.std::__cxx11::basic_string\", align 8\n  %5 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 2\n  %6 = bitcast %\"class.std::__cxx11::basic_string\"* %0 to %union.anon**\n  store %union.anon* %5, %union.anon** %6, align 8, !tbaa !3\n  %7 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 1\n  store i64 0, i64* %7, align 8, !tbaa !8\n  %8 = bitcast %union.anon* %5 to i8*\n  store i8 0, i8* %8, align 8, !tbaa !11\n  %9 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %1, i64 0, i32 1\n  %10 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %1, i64 0, i32 0, i32 0\n  %11 = bitcast %\"class.std::__cxx11::basic_string\"* %4 to i8*\n  %12 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %4, i64 0, i32 2\n  %13 = bitcast %\"class.std::__cxx11::basic_string\"* %4 to %union.anon**\n  %14 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 0, i32 0\n  %15 = bitcast i64* %3 to i8*\n  %16 = bitcast %union.anon* %12 to i8*\n  %17 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %4, i64 0, i32 0, i32 0\n  %18 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %4, i64 0, i32 2, i32 0\n  %19 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %4, i64 0, i32 1\n  %20 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 2, i32 0\n  %21 = load i64, i64* %9, align 8, !tbaa !8\n  %22 = icmp eq i64 %21, 0\n  br i1 %22, label %105, label %23\n\n23:                                               ; preds = %2\n  %24 = bitcast i64* %19 to <2 x i64>*\n  %25 = bitcast i64* %7 to <2 x i64>*\n  br label %26\n\n26:                                               ; preds = %23, %94\n  %27 = phi i64 [ %96, %94 ], [ 0, %23 ]\n  %28 = phi i8* [ %95, %94 ], [ %8, %23 ]\n  %29 = phi i64 [ %91, %94 ], [ 0, %23 ]\n  %30 = load i8*, i8** %10, align 8, !tbaa !12\n  %31 = getelementptr inbounds i8, i8* %30, i64 %29\n  %32 = load i8, i8* %31, align 1, !tbaa !11\n  %33 = sext i8 %32 to i16\n  %34 = add nsw i16 %33, -93\n  %35 = srem i16 %34, 26\n  %36 = trunc i16 %35 to i8\n  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %11) #6\n  %37 = add nsw i8 %36, 97\n  call void @llvm.experimental.noalias.scope.decl(metadata !13)\n  store %union.anon* %12, %union.anon** %13, align 8, !tbaa !3, !alias.scope !13\n  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %15) #6, !noalias !13\n  store i64 %27, i64* %3, align 8, !tbaa !16, !noalias !13\n  %38 = icmp ugt i64 %27, 15\n  br i1 %38, label %39, label %43\n\n39:                                               ; preds = %26\n  %40 = invoke i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %4, i64* nonnull align 8 dereferenceable(8) %3, i64 0)\n          to label %41 unwind label %97\n\n41:                                               ; preds = %39\n  store i8* %40, i8** %17, align 8, !tbaa !12, !alias.scope !13\n  %42 = load i64, i64* %3, align 8, !tbaa !16, !noalias !13\n  store i64 %42, i64* %18, align 8, !tbaa !11, !alias.scope !13\n  br label %43\n\n43:                                               ; preds = %26, %41\n  %44 = phi i8* [ %40, %41 ], [ %16, %26 ]\n  switch i64 %27, label %47 [\n    i64 1, label %45\n    i64 0, label %48\n  ]\n\n45:                                               ; preds = %43\n  %46 = load i8, i8* %28, align 1, !tbaa !11\n  store i8 %46, i8* %44, align 1, !tbaa !11\n  br label %48\n\n47:                                               ; preds = %43\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %44, i8* align 1 %28, i64 %27, i1 false) #6\n  br label %48\n\n48:                                               ; preds = %47, %45, %43\n  %49 = load i64, i64* %3, align 8, !tbaa !16, !noalias !13\n  store i64 %49, i64* %19, align 8, !tbaa !8, !alias.scope !13\n  %50 = load i8*, i8** %17, align 8, !tbaa !12, !alias.scope !13\n  %51 = getelementptr inbounds i8, i8* %50, i64 %49\n  store i8 0, i8* %51, align 1, !tbaa !11\n  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %15) #6, !noalias !13\n  %52 = load i64, i64* %19, align 8, !tbaa !8, !alias.scope !13\n  %53 = invoke nonnull align 8 dereferenceable(32) %\"class.std::__cxx11::basic_string\"* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEmmmc(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %4, i64 %52, i64 0, i64 1, i8 signext %37)\n          to label %59 unwind label %54\n\n54:                                               ; preds = %48\n  %55 = landingpad { i8*, i32 }\n          cleanup\n  %56 = load i8*, i8** %17, align 8, !tbaa !12, !alias.scope !13\n  %57 = icmp eq i8* %56, %16\n  br i1 %57, label %99, label %58\n\n58:                                               ; preds = %54\n  call void @_ZdlPv(i8* %56) #6\n  br label %99\n\n59:                                               ; preds = %48\n  %60 = load i8*, i8** %17, align 8, !tbaa !12\n  %61 = icmp eq i8* %60, %16\n  br i1 %61, label %62, label %76\n\n62:                                               ; preds = %59\n  %63 = load i64, i64* %19, align 8, !tbaa !8\n  %64 = icmp eq i64 %63, 0\n  br i1 %64, label %71, label %65\n\n65:                                               ; preds = %62\n  %66 = load i8*, i8** %14, align 8, !tbaa !12\n  %67 = icmp eq i64 %63, 1\n  br i1 %67, label %68, label %70\n\n68:                                               ; preds = %65\n  %69 = load i8, i8* %16, align 8, !tbaa !11\n  store i8 %69, i8* %66, align 1, !tbaa !11\n  br label %71\n\n70:                                               ; preds = %65\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %66, i8* nonnull align 8 %16, i64 %63, i1 false) #6\n  br label %71\n\n71:                                               ; preds = %70, %68, %62\n  %72 = load i64, i64* %19, align 8, !tbaa !8\n  store i64 %72, i64* %7, align 8, !tbaa !8\n  %73 = load i8*, i8** %14, align 8, !tbaa !12\n  %74 = getelementptr inbounds i8, i8* %73, i64 %72\n  store i8 0, i8* %74, align 1, !tbaa !11\n  %75 = load i8*, i8** %17, align 8, !tbaa !12\n  br label %85\n\n76:                                               ; preds = %59\n  %77 = load i8*, i8** %14, align 8, !tbaa !12\n  %78 = icmp eq i8* %77, %8\n  %79 = load i64, i64* %20, align 8\n  store i8* %60, i8** %14, align 8, !tbaa !12\n  %80 = load <2 x i64>, <2 x i64>* %24, align 8, !tbaa !11\n  store <2 x i64> %80, <2 x i64>* %25, align 8, !tbaa !11\n  %81 = icmp eq i8* %77, null\n  %82 = or i1 %78, %81\n  br i1 %82, label %84, label %83\n\n83:                                               ; preds = %76\n  store i8* %77, i8** %17, align 8, !tbaa !12\n  store i64 %79, i64* %18, align 8, !tbaa !11\n  br label %85\n\n84:                                               ; preds = %76\n  store %union.anon* %12, %union.anon** %13, align 8, !tbaa !12\n  br label %85\n\n85:                                               ; preds = %71, %83, %84\n  %86 = phi i8* [ %75, %71 ], [ %77, %83 ], [ %16, %84 ]\n  store i64 0, i64* %19, align 8, !tbaa !8\n  store i8 0, i8* %86, align 1, !tbaa !11\n  %87 = load i8*, i8** %17, align 8, !tbaa !12\n  %88 = icmp eq i8* %87, %16\n  br i1 %88, label %90, label %89\n\n89:                                               ; preds = %85\n  call void @_ZdlPv(i8* %87) #6\n  br label %90\n\n90:                                               ; preds = %85, %89\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %11) #6\n  %91 = add nuw i64 %29, 1\n  %92 = load i64, i64* %9, align 8, !tbaa !8\n  %93 = icmp ugt i64 %92, %91\n  br i1 %93, label %94, label %105, !llvm.loop !17\n\n94:                                               ; preds = %90\n  %95 = load i8*, i8** %14, align 8, !tbaa !12, !noalias !13\n  %96 = load i64, i64* %7, align 8, !tbaa !8, !noalias !13\n  br label %26\n\n97:                                               ; preds = %39\n  %98 = landingpad { i8*, i32 }\n          cleanup\n  br label %99\n\n99:                                               ; preds = %54, %58, %97\n  %100 = phi { i8*, i32 } [ %98, %97 ], [ %55, %58 ], [ %55, %54 ]\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %11) #6\n  %101 = load i8*, i8** %14, align 8, !tbaa !12\n  %102 = icmp eq i8* %101, %8\n  br i1 %102, label %104, label %103\n\n103:                                              ; preds = %99\n  call void @_ZdlPv(i8* %101) #6\n  br label %104\n\n104:                                              ; preds = %99, %103\n  resume { i8*, i32 } %100\n\n105:                                              ; preds = %90, %2\n  ret void\n}\n\n; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn\ndeclare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1\n\ndeclare dso_local i32 @__gxx_personality_v0(...)\n\n; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn\ndeclare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1\n\n; Function Attrs: nobuiltin nounwind\ndeclare dso_local void @_ZdlPv(i8*) local_unnamed_addr #2\n\ndeclare dso_local i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32), i64* nonnull align 8 dereferenceable(8), i64) local_unnamed_addr #3\n\n; Function Attrs: argmemonly mustprogress nofree nounwind willreturn\ndeclare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #4\n\ndeclare dso_local nonnull align 8 dereferenceable(32) %\"class.std::__cxx11::basic_string\"* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEmmmc(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32), i64, i64, i64, i8 signext) local_unnamed_addr #3\n\n; Function Attrs: inaccessiblememonly nofree nosync nounwind willreturn\ndeclare void @llvm.experimental.noalias.scope.decl(metadata) #5\n\nattributes #0 = { uwtable \"frame-pointer\"=\"none\" \"min-legal-vector-width\"=\"0\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #1 = { argmemonly mustprogress nofree nosync nounwind willreturn }\nattributes #2 = { nobuiltin nounwind \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #3 = { \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #4 = { argmemonly mustprogress nofree nounwind willreturn }\nattributes #5 = { inaccessiblememonly nofree nosync nounwind willreturn }\nattributes #6 = { nounwind }\n\n!llvm.module.flags = !{!0, !1}\n!llvm.ident = !{!2}\n\n!0 = !{i32 1, !\"wchar_size\", i32 4}\n!1 = !{i32 7, !\"uwtable\", i32 1}\n!2 = !{!\"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)\"}\n!3 = !{!4, !5, i64 0}\n!4 = !{!\"_ZTSNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderE\", !5, i64 0}\n!5 = !{!\"any pointer\", !6, i64 0}\n!6 = !{!\"omnipotent char\", !7, i64 0}\n!7 = !{!\"Simple C++ TBAA\"}\n!8 = !{!9, !10, i64 8}\n!9 = !{!\"_ZTSNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE\", !4, i64 0, !10, i64 8, !6, i64 16}\n!10 = !{!\"long\", !6, i64 0}\n!11 = !{!6, !6, i64 0}\n!12 = !{!9, !5, i64 0}\n!13 = !{!14}\n!14 = distinct !{!14, !15, !\"_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_S5_: argument 0\"}\n!15 = distinct !{!15, !\"_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_S5_\"}\n!16 = !{!10, !10, i64 0}\n!17 = distinct !{!17, !18}\n!18 = !{!\"llvm.loop.mustprogress\"}\n", "target": "This is the targeted source code:\n/*\nCreate a function encrypt that takes a string as an argument and\nreturns a string encrypted with the alphabet being rotated. \nThe alphabet should be rotated in a manner such that the letters \nshift down by two multiplied to two places.\nFor example:\nencrypt(\"hi\") returns \"lm\"\nencrypt(\"asdfghjkl\") returns \"ewhjklnop\"\nencrypt(\"gf\") returns \"kj\"\nencrypt(\"et\") returns \"ix\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring encrypt(string s){\n\n    string out;\n    int i;\n    for (i=0;i<s.length();i++)\n    {\n        int w=((int)s[i]+4-(int)'a')%26+(int)'a';   \n        out=out+(char)w;\n    }\n    return out;\n}\n"}
{"input": "Convert this to C++:\n; ModuleID = '../../Human_xBenchmarks_164/CPP_90/CPP_90.cpp'\nsource_filename = \"../../Human_xBenchmarks_164/CPP_90/CPP_90.cpp\"\ntarget datalayout = \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\ntarget triple = \"x86_64-unknown-linux-gnu\"\n\n%\"class.std::vector\" = type { %\"struct.std::_Vector_base\" }\n%\"struct.std::_Vector_base\" = type { %\"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl\" }\n%\"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl\" = type { %\"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl_data\" }\n%\"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl_data\" = type { i32*, i32*, i32* }\n%\"struct.__gnu_cxx::__ops::_Iter_less_iter\" = type { i8 }\n\n$_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEElNS0_5__ops15_Iter_less_iterEEvT_S9_T0_T1_ = comdat any\n\n$_ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_ = comdat any\n\n$_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEENS0_5__ops15_Iter_less_iterEEvT_S9_RT0_ = comdat any\n\n; Function Attrs: uwtable\ndefine dso_local i32 @_Z13next_smallestSt6vectorIiSaIiEE(%\"class.std::vector\"* nocapture readonly %0) local_unnamed_addr #0 {\n  %2 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0, i64 0, i32 0, i32 0, i32 0, i32 0\n  %3 = load i32*, i32** %2, align 8, !tbaa !3\n  %4 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0, i64 0, i32 0, i32 0, i32 0, i32 1\n  %5 = load i32*, i32** %4, align 8, !tbaa !3\n  %6 = icmp eq i32* %3, %5\n  br i1 %6, label %17, label %7\n\n7:                                                ; preds = %1\n  %8 = ptrtoint i32* %5 to i64\n  %9 = ptrtoint i32* %3 to i64\n  %10 = sub i64 %8, %9\n  %11 = ashr exact i64 %10, 2\n  %12 = tail call i64 @llvm.ctlz.i64(i64 %11, i1 true) #4, !range !7\n  %13 = shl nuw nsw i64 %12, 1\n  %14 = xor i64 %13, 126\n  tail call void @_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEElNS0_5__ops15_Iter_less_iterEEvT_S9_T0_T1_(i32* %3, i32* %5, i64 %14)\n  tail call void @_ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_(i32* %3, i32* %5)\n  %15 = load i32*, i32** %4, align 8, !tbaa !8\n  %16 = load i32*, i32** %2, align 8, !tbaa !10\n  br label %17\n\n17:                                               ; preds = %1, %7\n  %18 = phi i32* [ %3, %1 ], [ %16, %7 ]\n  %19 = phi i32* [ %3, %1 ], [ %15, %7 ]\n  %20 = ptrtoint i32* %19 to i64\n  %21 = ptrtoint i32* %18 to i64\n  %22 = sub i64 %20, %21\n  %23 = ashr exact i64 %22, 2\n  %24 = icmp ugt i64 %23, 1\n  br i1 %24, label %25, label %35\n\n25:                                               ; preds = %17\n  %26 = load i32, i32* %18, align 4, !tbaa !11\n  br label %29\n\n27:                                               ; preds = %29\n  %28 = icmp eq i64 %34, %23\n  br i1 %28, label %35, label %29, !llvm.loop !13\n\n29:                                               ; preds = %25, %27\n  %30 = phi i64 [ 1, %25 ], [ %34, %27 ]\n  %31 = getelementptr inbounds i32, i32* %18, i64 %30\n  %32 = load i32, i32* %31, align 4, !tbaa !11\n  %33 = icmp eq i32 %32, %26\n  %34 = add nuw i64 %30, 1\n  br i1 %33, label %27, label %35\n\n35:                                               ; preds = %27, %29, %17\n  %36 = phi i32 [ -1, %17 ], [ %32, %29 ], [ -1, %27 ]\n  ret i32 %36\n}\n\n; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn\ndeclare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1\n\n; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn\ndeclare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1\n\n; Function Attrs: uwtable\ndefine linkonce_odr dso_local void @_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEElNS0_5__ops15_Iter_less_iterEEvT_S9_T0_T1_(i32* %0, i32* %1, i64 %2) local_unnamed_addr #0 comdat {\n  %4 = alloca %\"struct.__gnu_cxx::__ops::_Iter_less_iter\", align 1\n  %5 = ptrtoint i32* %0 to i64\n  %6 = getelementptr inbounds i32, i32* %0, i64 1\n  %7 = ptrtoint i32* %1 to i64\n  %8 = sub i64 %7, %5\n  %9 = icmp sgt i64 %8, 64\n  br i1 %9, label %10, label %123\n\n10:                                               ; preds = %3, %119\n  %11 = phi i64 [ %121, %119 ], [ %8, %3 ]\n  %12 = phi i64 [ %76, %119 ], [ %2, %3 ]\n  %13 = phi i32* [ %107, %119 ], [ %1, %3 ]\n  %14 = icmp eq i64 %12, 0\n  br i1 %14, label %15, label %74\n\n15:                                               ; preds = %10\n  %16 = getelementptr inbounds %\"struct.__gnu_cxx::__ops::_Iter_less_iter\", %\"struct.__gnu_cxx::__ops::_Iter_less_iter\"* %4, i64 0, i32 0\n  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %16)\n  call void @_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEENS0_5__ops15_Iter_less_iterEEvT_S9_RT0_(i32* %0, i32* %13, %\"struct.__gnu_cxx::__ops::_Iter_less_iter\"* nonnull align 1 dereferenceable(1) %4)\n  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %16)\n  br label %17\n\n17:                                               ; preds = %15, %70\n  %18 = phi i32* [ %19, %70 ], [ %13, %15 ]\n  %19 = getelementptr inbounds i32, i32* %18, i64 -1\n  %20 = load i32, i32* %19, align 4, !tbaa !11\n  %21 = load i32, i32* %0, align 4, !tbaa !11\n  store i32 %21, i32* %19, align 4, !tbaa !11\n  %22 = ptrtoint i32* %19 to i64\n  %23 = sub i64 %22, %5\n  %24 = ashr exact i64 %23, 2\n  %25 = add nsw i64 %24, -1\n  %26 = sdiv i64 %25, 2\n  %27 = icmp sgt i64 %23, 8\n  br i1 %27, label %28, label %43\n\n28:                                               ; preds = %17, %28\n  %29 = phi i64 [ %38, %28 ], [ 0, %17 ]\n  %30 = shl i64 %29, 1\n  %31 = add i64 %30, 2\n  %32 = getelementptr inbounds i32, i32* %0, i64 %31\n  %33 = or i64 %30, 1\n  %34 = getelementptr inbounds i32, i32* %0, i64 %33\n  %35 = load i32, i32* %32, align 4, !tbaa !11\n  %36 = load i32, i32* %34, align 4, !tbaa !11\n  %37 = icmp slt i32 %35, %36\n  %38 = select i1 %37, i64 %33, i64 %31\n  %39 = getelementptr inbounds i32, i32* %0, i64 %38\n  %40 = load i32, i32* %39, align 4, !tbaa !11\n  %41 = getelementptr inbounds i32, i32* %0, i64 %29\n  store i32 %40, i32* %41, align 4, !tbaa !11\n  %42 = icmp slt i64 %38, %26\n  br i1 %42, label %28, label %43, !llvm.loop !15\n\n43:                                               ; preds = %28, %17\n  %44 = phi i64 [ 0, %17 ], [ %38, %28 ]\n  %45 = and i64 %23, 4\n  %46 = icmp eq i64 %45, 0\n  br i1 %46, label %47, label %57\n\n47:                                               ; preds = %43\n  %48 = add nsw i64 %24, -2\n  %49 = sdiv i64 %48, 2\n  %50 = icmp eq i64 %44, %49\n  br i1 %50, label %51, label %57\n\n51:                                               ; preds = %47\n  %52 = shl i64 %44, 1\n  %53 = or i64 %52, 1\n  %54 = getelementptr inbounds i32, i32* %0, i64 %53\n  %55 = load i32, i32* %54, align 4, !tbaa !11\n  %56 = getelementptr inbounds i32, i32* %0, i64 %44\n  store i32 %55, i32* %56, align 4, !tbaa !11\n  br label %57\n\n57:                                               ; preds = %51, %47, %43\n  %58 = phi i64 [ %53, %51 ], [ %44, %47 ], [ %44, %43 ]\n  %59 = icmp sgt i64 %58, 0\n  br i1 %59, label %60, label %70\n\n60:                                               ; preds = %57, %67\n  %61 = phi i64 [ %63, %67 ], [ %58, %57 ]\n  %62 = add nsw i64 %61, -1\n  %63 = lshr i64 %62, 1\n  %64 = getelementptr inbounds i32, i32* %0, i64 %63\n  %65 = load i32, i32* %64, align 4, !tbaa !11\n  %66 = icmp slt i32 %65, %20\n  br i1 %66, label %67, label %70\n\n67:                                               ; preds = %60\n  %68 = getelementptr inbounds i32, i32* %0, i64 %61\n  store i32 %65, i32* %68, align 4, !tbaa !11\n  %69 = icmp ult i64 %62, 2\n  br i1 %69, label %70, label %60, !llvm.loop !16\n\n70:                                               ; preds = %67, %60, %57\n  %71 = phi i64 [ %58, %57 ], [ %61, %60 ], [ 0, %67 ]\n  %72 = getelementptr inbounds i32, i32* %0, i64 %71\n  store i32 %20, i32* %72, align 4, !tbaa !11\n  %73 = icmp sgt i64 %23, 4\n  br i1 %73, label %17, label %123, !llvm.loop !17\n\n74:                                               ; preds = %10\n  %75 = lshr i64 %11, 3\n  %76 = add nsw i64 %12, -1\n  %77 = getelementptr inbounds i32, i32* %0, i64 %75\n  %78 = getelementptr inbounds i32, i32* %13, i64 -1\n  %79 = load i32, i32* %6, align 4, !tbaa !11\n  %80 = load i32, i32* %77, align 4, !tbaa !11\n  %81 = icmp slt i32 %79, %80\n  %82 = load i32, i32* %78, align 4, !tbaa !11\n  br i1 %81, label %83, label %92\n\n83:                                               ; preds = %74\n  %84 = icmp slt i32 %80, %82\n  br i1 %84, label %85, label %87\n\n85:                                               ; preds = %83\n  %86 = load i32, i32* %0, align 4, !tbaa !11\n  store i32 %80, i32* %0, align 4, !tbaa !11\n  store i32 %86, i32* %77, align 4, !tbaa !11\n  br label %101\n\n87:                                               ; preds = %83\n  %88 = icmp slt i32 %79, %82\n  %89 = load i32, i32* %0, align 4, !tbaa !11\n  br i1 %88, label %90, label %91\n\n90:                                               ; preds = %87\n  store i32 %82, i32* %0, align 4, !tbaa !11\n  store i32 %89, i32* %78, align 4, !tbaa !11\n  br label %101\n\n91:                                               ; preds = %87\n  store i32 %79, i32* %0, align 4, !tbaa !11\n  store i32 %89, i32* %6, align 4, !tbaa !11\n  br label %101\n\n92:                                               ; preds = %74\n  %93 = icmp slt i32 %79, %82\n  br i1 %93, label %94, label %96\n\n94:                                               ; preds = %92\n  %95 = load i32, i32* %0, align 4, !tbaa !11\n  store i32 %79, i32* %0, align 4, !tbaa !11\n  store i32 %95, i32* %6, align 4, !tbaa !11\n  br label %101\n\n96:                                               ; preds = %92\n  %97 = icmp slt i32 %80, %82\n  %98 = load i32, i32* %0, align 4, !tbaa !11\n  br i1 %97, label %99, label %100\n\n99:                                               ; preds = %96\n  store i32 %82, i32* %0, align 4, !tbaa !11\n  store i32 %98, i32* %78, align 4, !tbaa !11\n  br label %101\n\n100:                                              ; preds = %96\n  store i32 %80, i32* %0, align 4, !tbaa !11\n  store i32 %98, i32* %77, align 4, !tbaa !11\n  br label %101\n\n101:                                              ; preds = %100, %99, %94, %91, %90, %85\n  br label %102\n\n102:                                              ; preds = %101, %118\n  %103 = phi i32* [ %110, %118 ], [ %6, %101 ]\n  %104 = phi i32* [ %113, %118 ], [ %13, %101 ]\n  %105 = load i32, i32* %0, align 4, !tbaa !11\n  br label %106\n\n106:                                              ; preds = %106, %102\n  %107 = phi i32* [ %103, %102 ], [ %110, %106 ]\n  %108 = load i32, i32* %107, align 4, !tbaa !11\n  %109 = icmp slt i32 %108, %105\n  %110 = getelementptr inbounds i32, i32* %107, i64 1\n  br i1 %109, label %106, label %111, !llvm.loop !18\n\n111:                                              ; preds = %106, %111\n  %112 = phi i32* [ %113, %111 ], [ %104, %106 ]\n  %113 = getelementptr inbounds i32, i32* %112, i64 -1\n  %114 = load i32, i32* %113, align 4, !tbaa !11\n  %115 = icmp slt i32 %105, %114\n  br i1 %115, label %111, label %116, !llvm.loop !19\n\n116:                                              ; preds = %111\n  %117 = icmp ult i32* %107, %113\n  br i1 %117, label %118, label %119\n\n118:                                              ; preds = %116\n  store i32 %114, i32* %107, align 4, !tbaa !11\n  store i32 %108, i32* %113, align 4, !tbaa !11\n  br label %102, !llvm.loop !20\n\n119:                                              ; preds = %116\n  tail call void @_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEElNS0_5__ops15_Iter_less_iterEEvT_S9_T0_T1_(i32* nonnull %107, i32* %13, i64 %76)\n  %120 = ptrtoint i32* %107 to i64\n  %121 = sub i64 %120, %5\n  %122 = icmp sgt i64 %121, 64\n  br i1 %122, label %10, label %123, !llvm.loop !21\n\n123:                                              ; preds = %119, %70, %3\n  ret void\n}\n\n; Function Attrs: uwtable\ndefine linkonce_odr dso_local void @_ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_(i32* %0, i32* %1) local_unnamed_addr #0 comdat {\n  %3 = ptrtoint i32* %1 to i64\n  %4 = ptrtoint i32* %0 to i64\n  %5 = sub i64 %3, %4\n  %6 = icmp sgt i64 %5, 64\n  br i1 %6, label %7, label %38\n\n7:                                                ; preds = %2\n  %8 = bitcast i32* %0 to i8*\n  %9 = getelementptr i32, i32* %0, i64 1\n  %10 = load i32, i32* %9, align 4, !tbaa !11\n  %11 = load i32, i32* %0, align 4, !tbaa !11\n  %12 = icmp slt i32 %10, %11\n  br i1 %12, label %13, label %15\n\n13:                                               ; preds = %7\n  %14 = load i32, i32* %0, align 4\n  store i32 %14, i32* %9, align 4\n  br label %15\n\n15:                                               ; preds = %7, %13\n  %16 = phi i32* [ %0, %13 ], [ %9, %7 ]\n  store i32 %10, i32* %16, align 4, !tbaa !11\n  %17 = getelementptr inbounds i32, i32* %0, i64 2\n  %18 = load i32, i32* %17, align 4, !tbaa !11\n  %19 = load i32, i32* %0, align 4, !tbaa !11\n  %20 = icmp slt i32 %18, %19\n  br i1 %20, label %84, label %74\n\n21:                                               ; preds = %322, %34\n  %22 = phi i32* [ %36, %34 ], [ %324, %322 ]\n  %23 = load i32, i32* %22, align 4, !tbaa !11\n  %24 = getelementptr inbounds i32, i32* %22, i64 -1\n  %25 = load i32, i32* %24, align 4, !tbaa !11\n  %26 = icmp slt i32 %23, %25\n  br i1 %26, label %27, label %34\n\n27:                                               ; preds = %21, %27\n  %28 = phi i32 [ %32, %27 ], [ %25, %21 ]\n  %29 = phi i32* [ %31, %27 ], [ %24, %21 ]\n  %30 = phi i32* [ %29, %27 ], [ %22, %21 ]\n  store i32 %28, i32* %30, align 4, !tbaa !11\n  %31 = getelementptr inbounds i32, i32* %29, i64 -1\n  %32 = load i32, i32* %31, align 4, !tbaa !11\n  %33 = icmp slt i32 %23, %32\n  br i1 %33, label %27, label %34, !llvm.loop !22\n\n34:                                               ; preds = %27, %21\n  %35 = phi i32* [ %22, %21 ], [ %29, %27 ]\n  store i32 %23, i32* %35, align 4, !tbaa !11\n  %36 = getelementptr inbounds i32, i32* %22, i64 1\n  %37 = icmp eq i32* %36, %1\n  br i1 %37, label %73, label %21, !llvm.loop !23\n\n38:                                               ; preds = %2\n  %39 = icmp eq i32* %0, %1\n  br i1 %39, label %73, label %40\n\n40:                                               ; preds = %38\n  %41 = bitcast i32* %0 to i8*\n  %42 = getelementptr inbounds i32, i32* %0, i64 1\n  %43 = icmp eq i32* %42, %1\n  br i1 %43, label %73, label %44\n\n44:                                               ; preds = %40, %69\n  %45 = phi i32* [ %71, %69 ], [ %42, %40 ]\n  %46 = phi i32* [ %45, %69 ], [ %0, %40 ]\n  %47 = load i32, i32* %45, align 4, !tbaa !11\n  %48 = load i32, i32* %0, align 4, !tbaa !11\n  %49 = icmp slt i32 %47, %48\n  br i1 %49, label %50, label %59\n\n50:                                               ; preds = %44\n  %51 = ptrtoint i32* %45 to i64\n  %52 = sub i64 %51, %4\n  %53 = icmp eq i64 %52, 0\n  br i1 %53, label %69, label %54\n\n54:                                               ; preds = %50\n  %55 = ashr exact i64 %52, 2\n  %56 = sub nsw i64 2, %55\n  %57 = getelementptr inbounds i32, i32* %46, i64 %56\n  %58 = bitcast i32* %57 to i8*\n  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* nonnull align 4 %58, i8* nonnull align 4 %41, i64 %52, i1 false) #4\n  br label %69\n\n59:                                               ; preds = %44\n  %60 = load i32, i32* %46, align 4, !tbaa !11\n  %61 = icmp slt i32 %47, %60\n  br i1 %61, label %62, label %69\n\n62:                                               ; preds = %59, %62\n  %63 = phi i32 [ %67, %62 ], [ %60, %59 ]\n  %64 = phi i32* [ %66, %62 ], [ %46, %59 ]\n  %65 = phi i32* [ %64, %62 ], [ %45, %59 ]\n  store i32 %63, i32* %65, align 4, !tbaa !11\n  %66 = getelementptr inbounds i32, i32* %64, i64 -1\n  %67 = load i32, i32* %66, align 4, !tbaa !11\n  %68 = icmp slt i32 %47, %67\n  br i1 %68, label %62, label %69, !llvm.loop !22\n\n69:                                               ; preds = %62, %59, %54, %50\n  %70 = phi i32* [ %0, %50 ], [ %0, %54 ], [ %45, %59 ], [ %64, %62 ]\n  store i32 %47, i32* %70, align 4, !tbaa !11\n  %71 = getelementptr inbounds i32, i32* %45, i64 1\n  %72 = icmp eq i32* %71, %1\n  br i1 %72, label %73, label %44, !llvm.loop !24\n\n73:                                               ; preds = %69, %34, %40, %38, %322\n  ret void\n\n74:                                               ; preds = %15\n  %75 = load i32, i32* %9, align 4, !tbaa !11\n  %76 = icmp slt i32 %18, %75\n  br i1 %76, label %77, label %88\n\n77:                                               ; preds = %74, %77\n  %78 = phi i32 [ %82, %77 ], [ %75, %74 ]\n  %79 = phi i32* [ %81, %77 ], [ %9, %74 ]\n  %80 = phi i32* [ %79, %77 ], [ %17, %74 ]\n  store i32 %78, i32* %80, align 4, !tbaa !11\n  %81 = getelementptr inbounds i32, i32* %79, i64 -1\n  %82 = load i32, i32* %81, align 4, !tbaa !11\n  %83 = icmp slt i32 %18, %82\n  br i1 %83, label %77, label %88, !llvm.loop !22\n\n84:                                               ; preds = %15\n  %85 = bitcast i32* %0 to i64*\n  %86 = bitcast i32* %9 to i64*\n  %87 = load i64, i64* %85, align 4\n  store i64 %87, i64* %86, align 4\n  br label %88\n\n88:                                               ; preds = %77, %84, %74\n  %89 = phi i32* [ %0, %84 ], [ %17, %74 ], [ %79, %77 ]\n  store i32 %18, i32* %89, align 4, !tbaa !11\n  %90 = getelementptr inbounds i32, i32* %0, i64 3\n  %91 = load i32, i32* %90, align 4, !tbaa !11\n  %92 = load i32, i32* %0, align 4, !tbaa !11\n  %93 = icmp slt i32 %91, %92\n  br i1 %93, label %104, label %94\n\n94:                                               ; preds = %88\n  %95 = load i32, i32* %17, align 4, !tbaa !11\n  %96 = icmp slt i32 %91, %95\n  br i1 %96, label %97, label %106\n\n97:                                               ; preds = %94, %97\n  %98 = phi i32 [ %102, %97 ], [ %95, %94 ]\n  %99 = phi i32* [ %101, %97 ], [ %17, %94 ]\n  %100 = phi i32* [ %99, %97 ], [ %90, %94 ]\n  store i32 %98, i32* %100, align 4, !tbaa !11\n  %101 = getelementptr inbounds i32, i32* %99, i64 -1\n  %102 = load i32, i32* %101, align 4, !tbaa !11\n  %103 = icmp slt i32 %91, %102\n  br i1 %103, label %97, label %106, !llvm.loop !22\n\n104:                                              ; preds = %88\n  %105 = bitcast i32* %9 to i8*\n  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* noundef nonnull align 4 dereferenceable(12) %105, i8* noundef nonnull align 4 dereferenceable(12) %8, i64 12, i1 false) #4\n  br label %106\n\n106:                                              ; preds = %97, %104, %94\n  %107 = phi i32* [ %0, %104 ], [ %90, %94 ], [ %99, %97 ]\n  store i32 %91, i32* %107, align 4, !tbaa !11\n  %108 = getelementptr inbounds i32, i32* %0, i64 4\n  %109 = load i32, i32* %108, align 4, !tbaa !11\n  %110 = load i32, i32* %0, align 4, !tbaa !11\n  %111 = icmp slt i32 %109, %110\n  br i1 %111, label %122, label %112\n\n112:                                              ; preds = %106\n  %113 = load i32, i32* %90, align 4, !tbaa !11\n  %114 = icmp slt i32 %109, %113\n  br i1 %114, label %115, label %124\n\n115:                                              ; preds = %112, %115\n  %116 = phi i32 [ %120, %115 ], [ %113, %112 ]\n  %117 = phi i32* [ %119, %115 ], [ %90, %112 ]\n  %118 = phi i32* [ %117, %115 ], [ %108, %112 ]\n  store i32 %116, i32* %118, align 4, !tbaa !11\n  %119 = getelementptr inbounds i32, i32* %117, i64 -1\n  %120 = load i32, i32* %119, align 4, !tbaa !11\n  %121 = icmp slt i32 %109, %120\n  br i1 %121, label %115, label %124, !llvm.loop !22\n\n122:                                              ; preds = %106\n  %123 = bitcast i32* %9 to i8*\n  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* noundef nonnull align 4 dereferenceable(16) %123, i8* noundef nonnull align 4 dereferenceable(16) %8, i64 16, i1 false) #4\n  br label %124\n\n124:                                              ; preds = %115, %122, %112\n  %125 = phi i32* [ %0, %122 ], [ %108, %112 ], [ %117, %115 ]\n  store i32 %109, i32* %125, align 4, !tbaa !11\n  %126 = getelementptr inbounds i32, i32* %0, i64 5\n  %127 = load i32, i32* %126, align 4, !tbaa !11\n  %128 = load i32, i32* %0, align 4, !tbaa !11\n  %129 = icmp slt i32 %127, %128\n  br i1 %129, label %140, label %130\n\n130:                                              ; preds = %124\n  %131 = load i32, i32* %108, align 4, !tbaa !11\n  %132 = icmp slt i32 %127, %131\n  br i1 %132, label %133, label %142\n\n133:                                              ; preds = %130, %133\n  %134 = phi i32 [ %138, %133 ], [ %131, %130 ]\n  %135 = phi i32* [ %137, %133 ], [ %108, %130 ]\n  %136 = phi i32* [ %135, %133 ], [ %126, %130 ]\n  store i32 %134, i32* %136, align 4, !tbaa !11\n  %137 = getelementptr inbounds i32, i32* %135, i64 -1\n  %138 = load i32, i32* %137, align 4, !tbaa !11\n  %139 = icmp slt i32 %127, %138\n  br i1 %139, label %133, label %142, !llvm.loop !22\n\n140:                                              ; preds = %124\n  %141 = bitcast i32* %9 to i8*\n  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* noundef nonnull align 4 dereferenceable(20) %141, i8* noundef nonnull align 4 dereferenceable(20) %8, i64 20, i1 false) #4\n  br label %142\n\n142:                                              ; preds = %133, %140, %130\n  %143 = phi i32* [ %0, %140 ], [ %126, %130 ], [ %135, %133 ]\n  store i32 %127, i32* %143, align 4, !tbaa !11\n  %144 = getelementptr inbounds i32, i32* %0, i64 6\n  %145 = load i32, i32* %144, align 4, !tbaa !11\n  %146 = load i32, i32* %0, align 4, !tbaa !11\n  %147 = icmp slt i32 %145, %146\n  br i1 %147, label %158, label %148\n\n148:                                              ; preds = %142\n  %149 = load i32, i32* %126, align 4, !tbaa !11\n  %150 = icmp slt i32 %145, %149\n  br i1 %150, label %151, label %160\n\n151:                                              ; preds = %148, %151\n  %152 = phi i32 [ %156, %151 ], [ %149, %148 ]\n  %153 = phi i32* [ %155, %151 ], [ %126, %148 ]\n  %154 = phi i32* [ %153, %151 ], [ %144, %148 ]\n  store i32 %152, i32* %154, align 4, !tbaa !11\n  %155 = getelementptr inbounds i32, i32* %153, i64 -1\n  %156 = load i32, i32* %155, align 4, !tbaa !11\n  %157 = icmp slt i32 %145, %156\n  br i1 %157, label %151, label %160, !llvm.loop !22\n\n158:                                              ; preds = %142\n  %159 = bitcast i32* %9 to i8*\n  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* noundef nonnull align 4 dereferenceable(24) %159, i8* noundef nonnull align 4 dereferenceable(24) %8, i64 24, i1 false) #4\n  br label %160\n\n160:                                              ; preds = %151, %158, %148\n  %161 = phi i32* [ %0, %158 ], [ %144, %148 ], [ %153, %151 ]\n  store i32 %145, i32* %161, align 4, !tbaa !11\n  %162 = getelementptr inbounds i32, i32* %0, i64 7\n  %163 = load i32, i32* %162, align 4, !tbaa !11\n  %164 = load i32, i32* %0, align 4, !tbaa !11\n  %165 = icmp slt i32 %163, %164\n  br i1 %165, label %176, label %166\n\n166:                                              ; preds = %160\n  %167 = load i32, i32* %144, align 4, !tbaa !11\n  %168 = icmp slt i32 %163, %167\n  br i1 %168, label %169, label %178\n\n169:                                              ; preds = %166, %169\n  %170 = phi i32 [ %174, %169 ], [ %167, %166 ]\n  %171 = phi i32* [ %173, %169 ], [ %144, %166 ]\n  %172 = phi i32* [ %171, %169 ], [ %162, %166 ]\n  store i32 %170, i32* %172, align 4, !tbaa !11\n  %173 = getelementptr inbounds i32, i32* %171, i64 -1\n  %174 = load i32, i32* %173, align 4, !tbaa !11\n  %175 = icmp slt i32 %163, %174\n  br i1 %175, label %169, label %178, !llvm.loop !22\n\n176:                                              ; preds = %160\n  %177 = bitcast i32* %9 to i8*\n  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* noundef nonnull align 4 dereferenceable(28) %177, i8* noundef nonnull align 4 dereferenceable(28) %8, i64 28, i1 false) #4\n  br label %178\n\n178:                                              ; preds = %169, %176, %166\n  %179 = phi i32* [ %0, %176 ], [ %162, %166 ], [ %171, %169 ]\n  store i32 %163, i32* %179, align 4, !tbaa !11\n  %180 = getelementptr inbounds i32, i32* %0, i64 8\n  %181 = load i32, i32* %180, align 4, !tbaa !11\n  %182 = load i32, i32* %0, align 4, !tbaa !11\n  %183 = icmp slt i32 %181, %182\n  br i1 %183, label %194, label %184\n\n184:                                              ; preds = %178\n  %185 = load i32, i32* %162, align 4, !tbaa !11\n  %186 = icmp slt i32 %181, %185\n  br i1 %186, label %187, label %196\n\n187:                                              ; preds = %184, %187\n  %188 = phi i32 [ %192, %187 ], [ %185, %184 ]\n  %189 = phi i32* [ %191, %187 ], [ %162, %184 ]\n  %190 = phi i32* [ %189, %187 ], [ %180, %184 ]\n  store i32 %188, i32* %190, align 4, !tbaa !11\n  %191 = getelementptr inbounds i32, i32* %189, i64 -1\n  %192 = load i32, i32* %191, align 4, !tbaa !11\n  %193 = icmp slt i32 %181, %192\n  br i1 %193, label %187, label %196, !llvm.loop !22\n\n194:                                              ; preds = %178\n  %195 = bitcast i32* %9 to i8*\n  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* noundef nonnull align 4 dereferenceable(32) %195, i8* noundef nonnull align 4 dereferenceable(32) %8, i64 32, i1 false) #4\n  br label %196\n\n196:                                              ; preds = %187, %194, %184\n  %197 = phi i32* [ %0, %194 ], [ %180, %184 ], [ %189, %187 ]\n  store i32 %181, i32* %197, align 4, !tbaa !11\n  %198 = getelementptr inbounds i32, i32* %0, i64 9\n  %199 = load i32, i32* %198, align 4, !tbaa !11\n  %200 = load i32, i32* %0, align 4, !tbaa !11\n  %201 = icmp slt i32 %199, %200\n  br i1 %201, label %212, label %202\n\n202:                                              ; preds = %196\n  %203 = load i32, i32* %180, align 4, !tbaa !11\n  %204 = icmp slt i32 %199, %203\n  br i1 %204, label %205, label %214\n\n205:                                              ; preds = %202, %205\n  %206 = phi i32 [ %210, %205 ], [ %203, %202 ]\n  %207 = phi i32* [ %209, %205 ], [ %180, %202 ]\n  %208 = phi i32* [ %207, %205 ], [ %198, %202 ]\n  store i32 %206, i32* %208, align 4, !tbaa !11\n  %209 = getelementptr inbounds i32, i32* %207, i64 -1\n  %210 = load i32, i32* %209, align 4, !tbaa !11\n  %211 = icmp slt i32 %199, %210\n  br i1 %211, label %205, label %214, !llvm.loop !22\n\n212:                                              ; preds = %196\n  %213 = bitcast i32* %9 to i8*\n  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* noundef nonnull align 4 dereferenceable(36) %213, i8* noundef nonnull align 4 dereferenceable(36) %8, i64 36, i1 false) #4\n  br label %214\n\n214:                                              ; preds = %205, %212, %202\n  %215 = phi i32* [ %0, %212 ], [ %198, %202 ], [ %207, %205 ]\n  store i32 %199, i32* %215, align 4, !tbaa !11\n  %216 = getelementptr inbounds i32, i32* %0, i64 10\n  %217 = load i32, i32* %216, align 4, !tbaa !11\n  %218 = load i32, i32* %0, align 4, !tbaa !11\n  %219 = icmp slt i32 %217, %218\n  br i1 %219, label %230, label %220\n\n220:                                              ; preds = %214\n  %221 = load i32, i32* %198, align 4, !tbaa !11\n  %222 = icmp slt i32 %217, %221\n  br i1 %222, label %223, label %232\n\n223:                                              ; preds = %220, %223\n  %224 = phi i32 [ %228, %223 ], [ %221, %220 ]\n  %225 = phi i32* [ %227, %223 ], [ %198, %220 ]\n  %226 = phi i32* [ %225, %223 ], [ %216, %220 ]\n  store i32 %224, i32* %226, align 4, !tbaa !11\n  %227 = getelementptr inbounds i32, i32* %225, i64 -1\n  %228 = load i32, i32* %227, align 4, !tbaa !11\n  %229 = icmp slt i32 %217, %228\n  br i1 %229, label %223, label %232, !llvm.loop !22\n\n230:                                              ; preds = %214\n  %231 = bitcast i32* %9 to i8*\n  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* noundef nonnull align 4 dereferenceable(40) %231, i8* noundef nonnull align 4 dereferenceable(40) %8, i64 40, i1 false) #4\n  br label %232\n\n232:                                              ; preds = %223, %230, %220\n  %233 = phi i32* [ %0, %230 ], [ %216, %220 ], [ %225, %223 ]\n  store i32 %217, i32* %233, align 4, !tbaa !11\n  %234 = getelementptr inbounds i32, i32* %0, i64 11\n  %235 = load i32, i32* %234, align 4, !tbaa !11\n  %236 = load i32, i32* %0, align 4, !tbaa !11\n  %237 = icmp slt i32 %235, %236\n  br i1 %237, label %248, label %238\n\n238:                                              ; preds = %232\n  %239 = load i32, i32* %216, align 4, !tbaa !11\n  %240 = icmp slt i32 %235, %239\n  br i1 %240, label %241, label %250\n\n241:                                              ; preds = %238, %241\n  %242 = phi i32 [ %246, %241 ], [ %239, %238 ]\n  %243 = phi i32* [ %245, %241 ], [ %216, %238 ]\n  %244 = phi i32* [ %243, %241 ], [ %234, %238 ]\n  store i32 %242, i32* %244, align 4, !tbaa !11\n  %245 = getelementptr inbounds i32, i32* %243, i64 -1\n  %246 = load i32, i32* %245, align 4, !tbaa !11\n  %247 = icmp slt i32 %235, %246\n  br i1 %247, label %241, label %250, !llvm.loop !22\n\n248:                                              ; preds = %232\n  %249 = bitcast i32* %9 to i8*\n  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* noundef nonnull align 4 dereferenceable(44) %249, i8* noundef nonnull align 4 dereferenceable(44) %8, i64 44, i1 false) #4\n  br label %250\n\n250:                                              ; preds = %241, %248, %238\n  %251 = phi i32* [ %0, %248 ], [ %234, %238 ], [ %243, %241 ]\n  store i32 %235, i32* %251, align 4, !tbaa !11\n  %252 = getelementptr inbounds i32, i32* %0, i64 12\n  %253 = load i32, i32* %252, align 4, !tbaa !11\n  %254 = load i32, i32* %0, align 4, !tbaa !11\n  %255 = icmp slt i32 %253, %254\n  br i1 %255, label %266, label %256\n\n256:                                              ; preds = %250\n  %257 = load i32, i32* %234, align 4, !tbaa !11\n  %258 = icmp slt i32 %253, %257\n  br i1 %258, label %259, label %268\n\n259:                                              ; preds = %256, %259\n  %260 = phi i32 [ %264, %259 ], [ %257, %256 ]\n  %261 = phi i32* [ %263, %259 ], [ %234, %256 ]\n  %262 = phi i32* [ %261, %259 ], [ %252, %256 ]\n  store i32 %260, i32* %262, align 4, !tbaa !11\n  %263 = getelementptr inbounds i32, i32* %261, i64 -1\n  %264 = load i32, i32* %263, align 4, !tbaa !11\n  %265 = icmp slt i32 %253, %264\n  br i1 %265, label %259, label %268, !llvm.loop !22\n\n266:                                              ; preds = %250\n  %267 = bitcast i32* %9 to i8*\n  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* noundef nonnull align 4 dereferenceable(48) %267, i8* noundef nonnull align 4 dereferenceable(48) %8, i64 48, i1 false) #4\n  br label %268\n\n268:                                              ; preds = %259, %266, %256\n  %269 = phi i32* [ %0, %266 ], [ %252, %256 ], [ %261, %259 ]\n  store i32 %253, i32* %269, align 4, !tbaa !11\n  %270 = getelementptr inbounds i32, i32* %0, i64 13\n  %271 = load i32, i32* %270, align 4, !tbaa !11\n  %272 = load i32, i32* %0, align 4, !tbaa !11\n  %273 = icmp slt i32 %271, %272\n  br i1 %273, label %284, label %274\n\n274:                                              ; preds = %268\n  %275 = load i32, i32* %252, align 4, !tbaa !11\n  %276 = icmp slt i32 %271, %275\n  br i1 %276, label %277, label %286\n\n277:                                              ; preds = %274, %277\n  %278 = phi i32 [ %282, %277 ], [ %275, %274 ]\n  %279 = phi i32* [ %281, %277 ], [ %252, %274 ]\n  %280 = phi i32* [ %279, %277 ], [ %270, %274 ]\n  store i32 %278, i32* %280, align 4, !tbaa !11\n  %281 = getelementptr inbounds i32, i32* %279, i64 -1\n  %282 = load i32, i32* %281, align 4, !tbaa !11\n  %283 = icmp slt i32 %271, %282\n  br i1 %283, label %277, label %286, !llvm.loop !22\n\n284:                                              ; preds = %268\n  %285 = bitcast i32* %9 to i8*\n  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* noundef nonnull align 4 dereferenceable(52) %285, i8* noundef nonnull align 4 dereferenceable(52) %8, i64 52, i1 false) #4\n  br label %286\n\n286:                                              ; preds = %277, %284, %274\n  %287 = phi i32* [ %0, %284 ], [ %270, %274 ], [ %279, %277 ]\n  store i32 %271, i32* %287, align 4, !tbaa !11\n  %288 = getelementptr inbounds i32, i32* %0, i64 14\n  %289 = load i32, i32* %288, align 4, !tbaa !11\n  %290 = load i32, i32* %0, align 4, !tbaa !11\n  %291 = icmp slt i32 %289, %290\n  br i1 %291, label %302, label %292\n\n292:                                              ; preds = %286\n  %293 = load i32, i32* %270, align 4, !tbaa !11\n  %294 = icmp slt i32 %289, %293\n  br i1 %294, label %295, label %304\n\n295:                                              ; preds = %292, %295\n  %296 = phi i32 [ %300, %295 ], [ %293, %292 ]\n  %297 = phi i32* [ %299, %295 ], [ %270, %292 ]\n  %298 = phi i32* [ %297, %295 ], [ %288, %292 ]\n  store i32 %296, i32* %298, align 4, !tbaa !11\n  %299 = getelementptr inbounds i32, i32* %297, i64 -1\n  %300 = load i32, i32* %299, align 4, !tbaa !11\n  %301 = icmp slt i32 %289, %300\n  br i1 %301, label %295, label %304, !llvm.loop !22\n\n302:                                              ; preds = %286\n  %303 = bitcast i32* %9 to i8*\n  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* noundef nonnull align 4 dereferenceable(56) %303, i8* noundef nonnull align 4 dereferenceable(56) %8, i64 56, i1 false) #4\n  br label %304\n\n304:                                              ; preds = %295, %302, %292\n  %305 = phi i32* [ %0, %302 ], [ %288, %292 ], [ %297, %295 ]\n  store i32 %289, i32* %305, align 4, !tbaa !11\n  %306 = getelementptr inbounds i32, i32* %0, i64 15\n  %307 = load i32, i32* %306, align 4, !tbaa !11\n  %308 = load i32, i32* %0, align 4, !tbaa !11\n  %309 = icmp slt i32 %307, %308\n  br i1 %309, label %320, label %310\n\n310:                                              ; preds = %304\n  %311 = load i32, i32* %288, align 4, !tbaa !11\n  %312 = icmp slt i32 %307, %311\n  br i1 %312, label %313, label %322\n\n313:                                              ; preds = %310, %313\n  %314 = phi i32 [ %318, %313 ], [ %311, %310 ]\n  %315 = phi i32* [ %317, %313 ], [ %288, %310 ]\n  %316 = phi i32* [ %315, %313 ], [ %306, %310 ]\n  store i32 %314, i32* %316, align 4, !tbaa !11\n  %317 = getelementptr inbounds i32, i32* %315, i64 -1\n  %318 = load i32, i32* %317, align 4, !tbaa !11\n  %319 = icmp slt i32 %307, %318\n  br i1 %319, label %313, label %322, !llvm.loop !22\n\n320:                                              ; preds = %304\n  %321 = bitcast i32* %9 to i8*\n  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* noundef nonnull align 4 dereferenceable(60) %321, i8* noundef nonnull align 4 dereferenceable(60) %8, i64 60, i1 false) #4\n  br label %322\n\n322:                                              ; preds = %313, %320, %310\n  %323 = phi i32* [ %0, %320 ], [ %306, %310 ], [ %315, %313 ]\n  store i32 %307, i32* %323, align 4, !tbaa !11\n  %324 = getelementptr inbounds i32, i32* %0, i64 16\n  %325 = icmp eq i32* %324, %1\n  br i1 %325, label %73, label %21\n}\n\n; Function Attrs: uwtable\ndefine linkonce_odr dso_local void @_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEENS0_5__ops15_Iter_less_iterEEvT_S9_RT0_(i32* %0, i32* %1, %\"struct.__gnu_cxx::__ops::_Iter_less_iter\"* nonnull align 1 dereferenceable(1) %2) local_unnamed_addr #0 comdat {\n  %4 = ptrtoint i32* %1 to i64\n  %5 = ptrtoint i32* %0 to i64\n  %6 = sub i64 %4, %5\n  %7 = ashr exact i64 %6, 2\n  %8 = icmp slt i64 %6, 8\n  br i1 %8, label %100, label %9\n\n9:                                                ; preds = %3\n  %10 = add nsw i64 %7, -2\n  %11 = lshr i64 %10, 1\n  %12 = add nsw i64 %7, -1\n  %13 = sdiv i64 %12, 2\n  %14 = and i64 %6, 4\n  %15 = icmp eq i64 %14, 0\n  br i1 %15, label %16, label %20\n\n16:                                               ; preds = %9\n  %17 = or i64 %10, 1\n  %18 = getelementptr inbounds i32, i32* %0, i64 %17\n  %19 = getelementptr inbounds i32, i32* %0, i64 %11\n  br label %57\n\n20:                                               ; preds = %9, %52\n  %21 = phi i64 [ %56, %52 ], [ %11, %9 ]\n  %22 = getelementptr inbounds i32, i32* %0, i64 %21\n  %23 = load i32, i32* %22, align 4, !tbaa !11\n  %24 = icmp sgt i64 %13, %21\n  br i1 %24, label %25, label %52\n\n25:                                               ; preds = %20, %25\n  %26 = phi i64 [ %35, %25 ], [ %21, %20 ]\n  %27 = shl i64 %26, 1\n  %28 = add i64 %27, 2\n  %29 = getelementptr inbounds i32, i32* %0, i64 %28\n  %30 = or i64 %27, 1\n  %31 = getelementptr inbounds i32, i32* %0, i64 %30\n  %32 = load i32, i32* %29, align 4, !tbaa !11\n  %33 = load i32, i32* %31, align 4, !tbaa !11\n  %34 = icmp slt i32 %32, %33\n  %35 = select i1 %34, i64 %30, i64 %28\n  %36 = getelementptr inbounds i32, i32* %0, i64 %35\n  %37 = load i32, i32* %36, align 4, !tbaa !11\n  %38 = getelementptr inbounds i32, i32* %0, i64 %26\n  store i32 %37, i32* %38, align 4, !tbaa !11\n  %39 = icmp slt i64 %35, %13\n  br i1 %39, label %25, label %40, !llvm.loop !15\n\n40:                                               ; preds = %25\n  %41 = icmp sgt i64 %35, %21\n  br i1 %41, label %42, label %52\n\n42:                                               ; preds = %40, %49\n  %43 = phi i64 [ %45, %49 ], [ %35, %40 ]\n  %44 = add nsw i64 %43, -1\n  %45 = sdiv i64 %44, 2\n  %46 = getelementptr inbounds i32, i32* %0, i64 %45\n  %47 = load i32, i32* %46, align 4, !tbaa !11\n  %48 = icmp slt i32 %47, %23\n  br i1 %48, label %49, label %52\n\n49:                                               ; preds = %42\n  %50 = getelementptr inbounds i32, i32* %0, i64 %43\n  store i32 %47, i32* %50, align 4, !tbaa !11\n  %51 = icmp sgt i64 %45, %21\n  br i1 %51, label %42, label %52, !llvm.loop !16\n\n52:                                               ; preds = %42, %49, %20, %40\n  %53 = phi i64 [ %35, %40 ], [ %21, %20 ], [ %45, %49 ], [ %43, %42 ]\n  %54 = getelementptr inbounds i32, i32* %0, i64 %53\n  store i32 %23, i32* %54, align 4, !tbaa !11\n  %55 = icmp eq i64 %21, 0\n  %56 = add nsw i64 %21, -1\n  br i1 %55, label %100, label %20, !llvm.loop !25\n\n57:                                               ; preds = %16, %95\n  %58 = phi i64 [ %99, %95 ], [ %11, %16 ]\n  %59 = getelementptr inbounds i32, i32* %0, i64 %58\n  %60 = load i32, i32* %59, align 4, !tbaa !11\n  %61 = icmp sgt i64 %13, %58\n  br i1 %61, label %62, label %77\n\n62:                                               ; preds = %57, %62\n  %63 = phi i64 [ %72, %62 ], [ %58, %57 ]\n  %64 = shl i64 %63, 1\n  %65 = add i64 %64, 2\n  %66 = getelementptr inbounds i32, i32* %0, i64 %65\n  %67 = or i64 %64, 1\n  %68 = getelementptr inbounds i32, i32* %0, i64 %67\n  %69 = load i32, i32* %66, align 4, !tbaa !11\n  %70 = load i32, i32* %68, align 4, !tbaa !11\n  %71 = icmp slt i32 %69, %70\n  %72 = select i1 %71, i64 %67, i64 %65\n  %73 = getelementptr inbounds i32, i32* %0, i64 %72\n  %74 = load i32, i32* %73, align 4, !tbaa !11\n  %75 = getelementptr inbounds i32, i32* %0, i64 %63\n  store i32 %74, i32* %75, align 4, !tbaa !11\n  %76 = icmp slt i64 %72, %13\n  br i1 %76, label %62, label %77, !llvm.loop !15\n\n77:                                               ; preds = %62, %57\n  %78 = phi i64 [ %58, %57 ], [ %72, %62 ]\n  %79 = icmp eq i64 %78, %11\n  br i1 %79, label %80, label %82\n\n80:                                               ; preds = %77\n  %81 = load i32, i32* %18, align 4, !tbaa !11\n  store i32 %81, i32* %19, align 4, !tbaa !11\n  br label %82\n\n82:                                               ; preds = %80, %77\n  %83 = phi i64 [ %17, %80 ], [ %78, %77 ]\n  %84 = icmp sgt i64 %83, %58\n  br i1 %84, label %85, label %95\n\n85:                                               ; preds = %82, %92\n  %86 = phi i64 [ %88, %92 ], [ %83, %82 ]\n  %87 = add nsw i64 %86, -1\n  %88 = sdiv i64 %87, 2\n  %89 = getelementptr inbounds i32, i32* %0, i64 %88\n  %90 = load i32, i32* %89, align 4, !tbaa !11\n  %91 = icmp slt i32 %90, %60\n  br i1 %91, label %92, label %95\n\n92:                                               ; preds = %85\n  %93 = getelementptr inbounds i32, i32* %0, i64 %86\n  store i32 %90, i32* %93, align 4, !tbaa !11\n  %94 = icmp sgt i64 %88, %58\n  br i1 %94, label %85, label %95, !llvm.loop !16\n\n95:                                               ; preds = %85, %92, %82\n  %96 = phi i64 [ %83, %82 ], [ %88, %92 ], [ %86, %85 ]\n  %97 = getelementptr inbounds i32, i32* %0, i64 %96\n  store i32 %60, i32* %97, align 4, !tbaa !11\n  %98 = icmp eq i64 %58, 0\n  %99 = add nsw i64 %58, -1\n  br i1 %98, label %100, label %57, !llvm.loop !25\n\n100:                                              ; preds = %52, %95, %3\n  ret void\n}\n\n; Function Attrs: mustprogress nofree nosync nounwind readnone speculatable willreturn\ndeclare i64 @llvm.ctlz.i64(i64, i1 immarg) #2\n\n; Function Attrs: argmemonly mustprogress nofree nounwind willreturn\ndeclare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #3\n\nattributes #0 = { uwtable \"frame-pointer\"=\"none\" \"min-legal-vector-width\"=\"0\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #1 = { argmemonly mustprogress nofree nosync nounwind willreturn }\nattributes #2 = { mustprogress nofree nosync nounwind readnone speculatable willreturn }\nattributes #3 = { argmemonly mustprogress nofree nounwind willreturn }\nattributes #4 = { nounwind }\n\n!llvm.module.flags = !{!0, !1}\n!llvm.ident = !{!2}\n\n!0 = !{i32 1, !\"wchar_size\", i32 4}\n!1 = !{i32 7, !\"uwtable\", i32 1}\n!2 = !{!\"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)\"}\n!3 = !{!4, !4, i64 0}\n!4 = !{!\"any pointer\", !5, i64 0}\n!5 = !{!\"omnipotent char\", !6, i64 0}\n!6 = !{!\"Simple C++ TBAA\"}\n!7 = !{i64 0, i64 65}\n!8 = !{!9, !4, i64 8}\n!9 = !{!\"_ZTSNSt12_Vector_baseIiSaIiEE17_Vector_impl_dataE\", !4, i64 0, !4, i64 8, !4, i64 16}\n!10 = !{!9, !4, i64 0}\n!11 = !{!12, !12, i64 0}\n!12 = !{!\"int\", !5, i64 0}\n!13 = distinct !{!13, !14}\n!14 = !{!\"llvm.loop.mustprogress\"}\n!15 = distinct !{!15, !14}\n!16 = distinct !{!16, !14}\n!17 = distinct !{!17, !14}\n!18 = distinct !{!18, !14}\n!19 = distinct !{!19, !14}\n!20 = distinct !{!20, !14}\n!21 = distinct !{!21, !14}\n!22 = distinct !{!22, !14}\n!23 = distinct !{!23, !14}\n!24 = distinct !{!24, !14}\n!25 = distinct !{!25, !14}\n", "target": "This is the targeted source code:\n/*\nYou are given a vector of integers.\nWrite a function next_smallest() that returns the 2nd smallest element of the vector.\nReturn None if there is no such element.\n\nnext_smallest({1, 2, 3, 4, 5}) == 2\nnext_smallest({5, 1, 4, 3, 2}) == 2\nnext_smallest({}) == None\nnext_smallest({1, 1}) == None\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nint next_smallest(vector<int> lst){\n\n    sort(lst.begin(),lst.end());\n    for (int i=1;i<lst.size();i++)\n        if (lst[i]!=lst[i-1]) return lst[i];\n    return -1;\n}\n"}
{"input": "Convert this to C++:\n; ModuleID = '../../Human_xBenchmarks_164/CPP_91/CPP_91.cpp'\nsource_filename = \"../../Human_xBenchmarks_164/CPP_91/CPP_91.cpp\"\ntarget datalayout = \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\ntarget triple = \"x86_64-unknown-linux-gnu\"\n\n%\"class.std::__cxx11::basic_string\" = type { %\"struct.std::__cxx11::basic_string<char>::_Alloc_hider\", i64, %union.anon }\n%\"struct.std::__cxx11::basic_string<char>::_Alloc_hider\" = type { i8* }\n%union.anon = type { i64, [8 x i8] }\n\n; Function Attrs: mustprogress nofree norecurse nosync nounwind readonly uwtable willreturn\ndefine dso_local i32 @_Z8is_boredNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE(%\"class.std::__cxx11::basic_string\"* nocapture readonly %0) local_unnamed_addr #0 {\n  %2 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 1\n  %3 = load i64, i64* %2, align 8, !tbaa !3\n  %4 = icmp eq i64 %3, 0\n  br i1 %4, label %24, label %5\n\n5:                                                ; preds = %1\n  %6 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 0, i32 0\n  %7 = load i8*, i8** %6, align 8, !tbaa !10\n  %8 = and i64 %3, 1\n  %9 = icmp eq i64 %3, 1\n  br i1 %9, label %12, label %10\n\n10:                                               ; preds = %5\n  %11 = and i64 %3, -2\n  br label %26\n\n12:                                               ; preds = %59, %5\n  %13 = phi i32 [ undef, %5 ], [ %51, %59 ]\n  %14 = phi i64 [ 0, %5 ], [ %61, %59 ]\n  %15 = phi i32 [ 0, %5 ], [ %51, %59 ]\n  %16 = phi i32 [ 0, %5 ], [ %56, %59 ]\n  %17 = icmp eq i64 %8, 0\n  br i1 %17, label %24, label %18\n\n18:                                               ; preds = %12\n  %19 = getelementptr inbounds i8, i8* %7, i64 %14\n  %20 = load i8, i8* %19, align 1, !tbaa !11\n  %21 = icmp eq i8 %20, 32\n  %22 = select i1 %21, i32 %16, i32 0\n  %23 = add nuw nsw i32 %22, %15\n  br label %24\n\n24:                                               ; preds = %18, %12, %1\n  %25 = phi i32 [ 0, %1 ], [ %13, %12 ], [ %23, %18 ]\n  ret i32 %25\n\n26:                                               ; preds = %59, %10\n  %27 = phi i64 [ 0, %10 ], [ %61, %59 ]\n  %28 = phi i32 [ 0, %10 ], [ %51, %59 ]\n  %29 = phi i32 [ 0, %10 ], [ %56, %59 ]\n  %30 = phi i8 [ 1, %10 ], [ %60, %59 ]\n  %31 = phi i64 [ %11, %10 ], [ %62, %59 ]\n  %32 = getelementptr inbounds i8, i8* %7, i64 %27\n  %33 = load i8, i8* %32, align 1, !tbaa !11\n  %34 = icmp eq i8 %33, 32\n  %35 = select i1 %34, i32 %29, i32 0\n  %36 = add nuw nsw i32 %35, %28\n  %37 = icmp eq i8 %33, 73\n  %38 = and i8 %30, 1\n  %39 = icmp ne i8 %38, 0\n  %40 = select i1 %34, i8 %30, i8 0\n  switch i8 %33, label %42 [\n    i8 46, label %41\n    i8 63, label %41\n    i8 33, label %41\n  ]\n\n41:                                               ; preds = %26, %26, %26\n  br label %42\n\n42:                                               ; preds = %26, %41\n  %43 = phi i8 [ 1, %41 ], [ %40, %26 ]\n  %44 = or i64 %27, 1\n  %45 = getelementptr inbounds i8, i8* %7, i64 %44\n  %46 = load i8, i8* %45, align 1, !tbaa !11\n  %47 = icmp eq i8 %46, 32\n  %48 = select i1 %47, i1 %37, i1 false\n  %49 = select i1 %48, i1 %39, i1 false\n  %50 = zext i1 %49 to i32\n  %51 = add nuw nsw i32 %36, %50\n  %52 = icmp eq i8 %46, 73\n  %53 = and i8 %43, 1\n  %54 = icmp ne i8 %53, 0\n  %55 = select i1 %52, i1 %54, i1 false\n  %56 = zext i1 %55 to i32\n  %57 = select i1 %47, i8 %43, i8 0\n  switch i8 %46, label %59 [\n    i8 46, label %58\n    i8 63, label %58\n    i8 33, label %58\n  ]\n\n58:                                               ; preds = %42, %42, %42\n  br label %59\n\n59:                                               ; preds = %58, %42\n  %60 = phi i8 [ 1, %58 ], [ %57, %42 ]\n  %61 = add nuw nsw i64 %27, 2\n  %62 = add i64 %31, -2\n  %63 = icmp eq i64 %62, 0\n  br i1 %63, label %12, label %26, !llvm.loop !12\n}\n\nattributes #0 = { mustprogress nofree norecurse nosync nounwind readonly uwtable willreturn \"frame-pointer\"=\"none\" \"min-legal-vector-width\"=\"0\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\n\n!llvm.module.flags = !{!0, !1}\n!llvm.ident = !{!2}\n\n!0 = !{i32 1, !\"wchar_size\", i32 4}\n!1 = !{i32 7, !\"uwtable\", i32 1}\n!2 = !{!\"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)\"}\n!3 = !{!4, !9, i64 8}\n!4 = !{!\"_ZTSNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE\", !5, i64 0, !9, i64 8, !7, i64 16}\n!5 = !{!\"_ZTSNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderE\", !6, i64 0}\n!6 = !{!\"any pointer\", !7, i64 0}\n!7 = !{!\"omnipotent char\", !8, i64 0}\n!8 = !{!\"Simple C++ TBAA\"}\n!9 = !{!\"long\", !7, i64 0}\n!10 = !{!4, !6, i64 0}\n!11 = !{!7, !7, i64 0}\n!12 = distinct !{!12, !13}\n!13 = !{!\"llvm.loop.mustprogress\"}\n", "target": "This is the targeted source code:\n/*\nYou'll be given a string of words, and your task is to count the number\nof boredoms. A boredom is a sentence that starts with the word \"I\".\nSentences are delimited by '.', '?' or '!'.\n\nFor example:\n>>> is_bored(\"Hello world\")\n0\n>>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n1\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nint is_bored(string S){\n\n    bool isstart=true;\n    bool isi=false;\n    int sum=0;\n    for (int i=0;i<S.length();i++)\n    {\n        if (S[i]==' ' and isi) {isi=false; sum+=1;}\n        if (S[i]=='I' and isstart) {isi=true;  }\n        else isi=false;   \n        if (S[i]!=' ') { isstart=false;}\n        if (S[i]=='.' or S[i]=='?' or S[i]=='!') isstart=true;\n    }\n    return CPP;\n}\n"}
{"input": "Convert this to C++:\n; ModuleID = '../../Human_xBenchmarks_164/CPP_92/CPP_92.cpp'\nsource_filename = \"../../Human_xBenchmarks_164/CPP_92/CPP_92.cpp\"\ntarget datalayout = \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\ntarget triple = \"x86_64-unknown-linux-gnu\"\n\n; Function Attrs: mustprogress nofree nosync nounwind readnone uwtable willreturn\ndefine dso_local zeroext i1 @_Z7any_intfff(float %0, float %1, float %2) local_unnamed_addr #0 {\n  %4 = tail call float @llvm.round.f32(float %0) #2\n  %5 = fcmp une float %4, %0\n  %6 = tail call float @llvm.round.f32(float %1) #2\n  %7 = fcmp une float %6, %1\n  %8 = select i1 %5, i1 true, i1 %7\n  %9 = tail call float @llvm.round.f32(float %2) #2\n  %10 = fcmp une float %9, %2\n  %11 = select i1 %8, i1 true, i1 %10\n  br i1 %11, label %21, label %12\n\n12:                                               ; preds = %3\n  %13 = fadd float %0, %1\n  %14 = fcmp oeq float %13, %2\n  %15 = fadd float %0, %2\n  %16 = fcmp oeq float %15, %1\n  %17 = or i1 %14, %16\n  %18 = fadd float %1, %2\n  %19 = fcmp oeq float %18, %0\n  %20 = select i1 %17, i1 true, i1 %19\n  br label %21\n\n21:                                               ; preds = %12, %3\n  %22 = phi i1 [ false, %3 ], [ %20, %12 ]\n  ret i1 %22\n}\n\n; Function Attrs: mustprogress nofree nosync nounwind readnone speculatable willreturn\ndeclare float @llvm.round.f32(float) #1\n\nattributes #0 = { mustprogress nofree nosync nounwind readnone uwtable willreturn \"frame-pointer\"=\"none\" \"min-legal-vector-width\"=\"0\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #1 = { mustprogress nofree nosync nounwind readnone speculatable willreturn }\nattributes #2 = { nounwind }\n\n!llvm.module.flags = !{!0, !1}\n!llvm.ident = !{!2}\n\n!0 = !{i32 1, !\"wchar_size\", i32 4}\n!1 = !{i32 7, !\"uwtable\", i32 1}\n!2 = !{!\"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)\"}\n", "target": "This is the targeted source code:\n/*\nCreate a function that takes 3 numbers.\nReturns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\nReturns false in any other cases.\n\nExamples\nany_int(5, 2, 7) \u279e true\n\nany_int(3, 2, 2) \u279e false\n\nany_int(3, -2, 1) \u279e true\n\nany_int(3.6, -2.2, 2) \u279e false\n\n\n\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nbool any_int(float a,float b,float c){\n\n    if (round(a)!=a) return false;\n    if (round(b)!=b) return false;\n    if (round(c)!=c) return false;\n    if (a+b==c or a+c==b or b+c==a) return true;\n    return false;\n}\n"}
{"input": "Convert this to C++:\n; ModuleID = '../../Human_xBenchmarks_164/CPP_93/CPP_93.cpp'\nsource_filename = \"../../Human_xBenchmarks_164/CPP_93/CPP_93.cpp\"\ntarget datalayout = \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\ntarget triple = \"x86_64-unknown-linux-gnu\"\n\n%\"class.std::__cxx11::basic_string\" = type { %\"struct.std::__cxx11::basic_string<char>::_Alloc_hider\", i64, %union.anon }\n%\"struct.std::__cxx11::basic_string<char>::_Alloc_hider\" = type { i8* }\n%union.anon = type { i64, [8 x i8] }\n\n@.str = private unnamed_addr constant [11 x i8] c\"aeiouAEIOU\\00\", align 1\n\n; Function Attrs: uwtable\ndefine dso_local void @_Z6encodeNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE(%\"class.std::__cxx11::basic_string\"* noalias sret(%\"class.std::__cxx11::basic_string\") align 8 %0, %\"class.std::__cxx11::basic_string\"* nocapture readonly %1) local_unnamed_addr #0 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {\n  %3 = alloca i64, align 8\n  %4 = alloca %\"class.std::__cxx11::basic_string\", align 8\n  %5 = alloca %\"class.std::__cxx11::basic_string\", align 8\n  %6 = bitcast %\"class.std::__cxx11::basic_string\"* %4 to i8*\n  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %6) #6\n  %7 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %4, i64 0, i32 2\n  %8 = bitcast %\"class.std::__cxx11::basic_string\"* %4 to %union.anon**\n  store %union.anon* %7, %union.anon** %8, align 8, !tbaa !3\n  %9 = bitcast %union.anon* %7 to i8*\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(10) %9, i8* noundef nonnull align 1 dereferenceable(10) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), i64 10, i1 false) #6\n  %10 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %4, i64 0, i32 0, i32 0\n  %11 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %4, i64 0, i32 1\n  store i64 10, i64* %11, align 8, !tbaa !8\n  %12 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %4, i64 0, i32 2, i32 1, i64 2\n  store i8 0, i8* %12, align 2, !tbaa !11\n  %13 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 2\n  %14 = bitcast %\"class.std::__cxx11::basic_string\"* %0 to %union.anon**\n  store %union.anon* %13, %union.anon** %14, align 8, !tbaa !3\n  %15 = bitcast %union.anon* %13 to i8*\n  %16 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 0, i32 0\n  %17 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 1\n  store i64 0, i64* %17, align 8, !tbaa !8\n  store i8 0, i8* %15, align 8, !tbaa !11\n  %18 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %1, i64 0, i32 1\n  %19 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %1, i64 0, i32 0, i32 0\n  %20 = bitcast %\"class.std::__cxx11::basic_string\"* %5 to i8*\n  %21 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %5, i64 0, i32 2\n  %22 = bitcast %\"class.std::__cxx11::basic_string\"* %5 to %union.anon**\n  %23 = bitcast i64* %3 to i8*\n  %24 = bitcast %union.anon* %21 to i8*\n  %25 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %5, i64 0, i32 0, i32 0\n  %26 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %5, i64 0, i32 2, i32 0\n  %27 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %5, i64 0, i32 1\n  %28 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 2, i32 0\n  %29 = load i64, i64* %18, align 8, !tbaa !8\n  %30 = icmp eq i64 %29, 0\n  br i1 %30, label %179, label %31\n\n31:                                               ; preds = %2\n  %32 = bitcast i64* %27 to <2 x i64>*\n  %33 = bitcast i64* %17 to <2 x i64>*\n  br label %34\n\n34:                                               ; preds = %31, %164\n  %35 = phi i64 [ %165, %164 ], [ 0, %31 ]\n  %36 = load i8*, i8** %19, align 8, !tbaa !12\n  %37 = getelementptr inbounds i8, i8* %36, i64 %35\n  %38 = load i8, i8* %37, align 1, !tbaa !11\n  %39 = add i8 %38, -97\n  %40 = icmp ult i8 %39, 26\n  br i1 %40, label %41, label %43\n\n41:                                               ; preds = %34\n  %42 = add nsw i8 %38, -32\n  br label %48\n\n43:                                               ; preds = %34\n  %44 = add i8 %38, -65\n  %45 = icmp ult i8 %44, 26\n  %46 = add nuw nsw i8 %38, 32\n  %47 = select i1 %45, i8 %46, i8 %38\n  br label %48\n\n48:                                               ; preds = %43, %41\n  %49 = phi i8 [ %42, %41 ], [ %47, %43 ]\n  %50 = load i8*, i8** %10, align 8, !tbaa !12\n  %51 = load i64, i64* %11, align 8, !tbaa !8\n  %52 = getelementptr inbounds i8, i8* %50, i64 %51\n  %53 = ptrtoint i8* %52 to i64\n  %54 = icmp sgt i64 %51, 3\n  br i1 %54, label %55, label %78\n\n55:                                               ; preds = %48\n  %56 = lshr i64 %51, 2\n  br label %57\n\n57:                                               ; preds = %74, %55\n  %58 = phi i64 [ %56, %55 ], [ %76, %74 ]\n  %59 = phi i8* [ %50, %55 ], [ %75, %74 ]\n  %60 = load i8, i8* %59, align 1, !tbaa !11\n  %61 = icmp eq i8 %60, %49\n  br i1 %61, label %103, label %62\n\n62:                                               ; preds = %57\n  %63 = getelementptr inbounds i8, i8* %59, i64 1\n  %64 = load i8, i8* %63, align 1, !tbaa !11\n  %65 = icmp eq i8 %64, %49\n  br i1 %65, label %101, label %66\n\n66:                                               ; preds = %62\n  %67 = getelementptr inbounds i8, i8* %59, i64 2\n  %68 = load i8, i8* %67, align 1, !tbaa !11\n  %69 = icmp eq i8 %68, %49\n  br i1 %69, label %99, label %70\n\n70:                                               ; preds = %66\n  %71 = getelementptr inbounds i8, i8* %59, i64 3\n  %72 = load i8, i8* %71, align 1, !tbaa !11\n  %73 = icmp eq i8 %72, %49\n  br i1 %73, label %97, label %74\n\n74:                                               ; preds = %70\n  %75 = getelementptr inbounds i8, i8* %59, i64 4\n  %76 = add nsw i64 %58, -1\n  %77 = icmp sgt i64 %58, 1\n  br i1 %77, label %57, label %78, !llvm.loop !13\n\n78:                                               ; preds = %74, %48\n  %79 = phi i8* [ %50, %48 ], [ %75, %74 ]\n  %80 = ptrtoint i8* %79 to i64\n  %81 = sub i64 %53, %80\n  switch i64 %81, label %108 [\n    i64 3, label %82\n    i64 2, label %87\n    i64 1, label %93\n  ]\n\n82:                                               ; preds = %78\n  %83 = load i8, i8* %79, align 1, !tbaa !11\n  %84 = icmp eq i8 %83, %49\n  br i1 %84, label %103, label %85\n\n85:                                               ; preds = %82\n  %86 = getelementptr inbounds i8, i8* %79, i64 1\n  br label %87\n\n87:                                               ; preds = %78, %85\n  %88 = phi i8* [ %86, %85 ], [ %79, %78 ]\n  %89 = load i8, i8* %88, align 1, !tbaa !11\n  %90 = icmp eq i8 %89, %49\n  br i1 %90, label %103, label %91\n\n91:                                               ; preds = %87\n  %92 = getelementptr inbounds i8, i8* %88, i64 1\n  br label %93\n\n93:                                               ; preds = %78, %91\n  %94 = phi i8* [ %92, %91 ], [ %79, %78 ]\n  %95 = load i8, i8* %94, align 1, !tbaa !11\n  %96 = icmp eq i8 %95, %49\n  br i1 %96, label %103, label %108\n\n97:                                               ; preds = %70\n  %98 = getelementptr inbounds i8, i8* %59, i64 3\n  br label %103\n\n99:                                               ; preds = %66\n  %100 = getelementptr inbounds i8, i8* %59, i64 2\n  br label %103\n\n101:                                              ; preds = %62\n  %102 = getelementptr inbounds i8, i8* %59, i64 1\n  br label %103\n\n103:                                              ; preds = %57, %97, %99, %101, %93, %87, %82\n  %104 = phi i8* [ %79, %82 ], [ %88, %87 ], [ %94, %93 ], [ %98, %97 ], [ %100, %99 ], [ %102, %101 ], [ %59, %57 ]\n  %105 = icmp eq i8* %104, %52\n  %106 = add i8 %49, 2\n  %107 = select i1 %105, i8 %49, i8 %106\n  br label %108\n\n108:                                              ; preds = %103, %93, %78\n  %109 = phi i8 [ %49, %78 ], [ %49, %93 ], [ %107, %103 ]\n  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %20) #6\n  call void @llvm.experimental.noalias.scope.decl(metadata !15)\n  store %union.anon* %21, %union.anon** %22, align 8, !tbaa !3, !alias.scope !15\n  %110 = load i8*, i8** %16, align 8, !tbaa !12, !noalias !15\n  %111 = load i64, i64* %17, align 8, !tbaa !8, !noalias !15\n  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %23) #6, !noalias !15\n  store i64 %111, i64* %3, align 8, !tbaa !18, !noalias !15\n  %112 = icmp ugt i64 %111, 15\n  br i1 %112, label %113, label %117\n\n113:                                              ; preds = %108\n  %114 = invoke i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %5, i64* nonnull align 8 dereferenceable(8) %3, i64 0)\n          to label %115 unwind label %168\n\n115:                                              ; preds = %113\n  store i8* %114, i8** %25, align 8, !tbaa !12, !alias.scope !15\n  %116 = load i64, i64* %3, align 8, !tbaa !18, !noalias !15\n  store i64 %116, i64* %26, align 8, !tbaa !11, !alias.scope !15\n  br label %117\n\n117:                                              ; preds = %108, %115\n  %118 = phi i8* [ %114, %115 ], [ %24, %108 ]\n  switch i64 %111, label %121 [\n    i64 1, label %119\n    i64 0, label %122\n  ]\n\n119:                                              ; preds = %117\n  %120 = load i8, i8* %110, align 1, !tbaa !11\n  store i8 %120, i8* %118, align 1, !tbaa !11\n  br label %122\n\n121:                                              ; preds = %117\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %118, i8* align 1 %110, i64 %111, i1 false) #6\n  br label %122\n\n122:                                              ; preds = %121, %119, %117\n  %123 = load i64, i64* %3, align 8, !tbaa !18, !noalias !15\n  store i64 %123, i64* %27, align 8, !tbaa !8, !alias.scope !15\n  %124 = load i8*, i8** %25, align 8, !tbaa !12, !alias.scope !15\n  %125 = getelementptr inbounds i8, i8* %124, i64 %123\n  store i8 0, i8* %125, align 1, !tbaa !11\n  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %23) #6, !noalias !15\n  %126 = load i64, i64* %27, align 8, !tbaa !8, !alias.scope !15\n  %127 = invoke nonnull align 8 dereferenceable(32) %\"class.std::__cxx11::basic_string\"* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEmmmc(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %5, i64 %126, i64 0, i64 1, i8 signext %109)\n          to label %133 unwind label %128\n\n128:                                              ; preds = %122\n  %129 = landingpad { i8*, i32 }\n          cleanup\n  %130 = load i8*, i8** %25, align 8, !tbaa !12, !alias.scope !15\n  %131 = icmp eq i8* %130, %24\n  br i1 %131, label %170, label %132\n\n132:                                              ; preds = %128\n  call void @_ZdlPv(i8* %130) #6\n  br label %170\n\n133:                                              ; preds = %122\n  %134 = load i8*, i8** %25, align 8, !tbaa !12\n  %135 = icmp eq i8* %134, %24\n  br i1 %135, label %136, label %150\n\n136:                                              ; preds = %133\n  %137 = load i64, i64* %27, align 8, !tbaa !8\n  %138 = icmp eq i64 %137, 0\n  br i1 %138, label %145, label %139\n\n139:                                              ; preds = %136\n  %140 = load i8*, i8** %16, align 8, !tbaa !12\n  %141 = icmp eq i64 %137, 1\n  br i1 %141, label %142, label %144\n\n142:                                              ; preds = %139\n  %143 = load i8, i8* %24, align 8, !tbaa !11\n  store i8 %143, i8* %140, align 1, !tbaa !11\n  br label %145\n\n144:                                              ; preds = %139\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %140, i8* nonnull align 8 %24, i64 %137, i1 false) #6\n  br label %145\n\n145:                                              ; preds = %144, %142, %136\n  %146 = load i64, i64* %27, align 8, !tbaa !8\n  store i64 %146, i64* %17, align 8, !tbaa !8\n  %147 = load i8*, i8** %16, align 8, !tbaa !12\n  %148 = getelementptr inbounds i8, i8* %147, i64 %146\n  store i8 0, i8* %148, align 1, !tbaa !11\n  %149 = load i8*, i8** %25, align 8, !tbaa !12\n  br label %159\n\n150:                                              ; preds = %133\n  %151 = load i8*, i8** %16, align 8, !tbaa !12\n  %152 = icmp eq i8* %151, %15\n  %153 = load i64, i64* %28, align 8\n  store i8* %134, i8** %16, align 8, !tbaa !12\n  %154 = load <2 x i64>, <2 x i64>* %32, align 8, !tbaa !11\n  store <2 x i64> %154, <2 x i64>* %33, align 8, !tbaa !11\n  %155 = icmp eq i8* %151, null\n  %156 = or i1 %152, %155\n  br i1 %156, label %158, label %157\n\n157:                                              ; preds = %150\n  store i8* %151, i8** %25, align 8, !tbaa !12\n  store i64 %153, i64* %26, align 8, !tbaa !11\n  br label %159\n\n158:                                              ; preds = %150\n  store %union.anon* %21, %union.anon** %22, align 8, !tbaa !12\n  br label %159\n\n159:                                              ; preds = %145, %157, %158\n  %160 = phi i8* [ %149, %145 ], [ %151, %157 ], [ %24, %158 ]\n  store i64 0, i64* %27, align 8, !tbaa !8\n  store i8 0, i8* %160, align 1, !tbaa !11\n  %161 = load i8*, i8** %25, align 8, !tbaa !12\n  %162 = icmp eq i8* %161, %24\n  br i1 %162, label %164, label %163\n\n163:                                              ; preds = %159\n  call void @_ZdlPv(i8* %161) #6\n  br label %164\n\n164:                                              ; preds = %159, %163\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %20) #6\n  %165 = add nuw i64 %35, 1\n  %166 = load i64, i64* %18, align 8, !tbaa !8\n  %167 = icmp ugt i64 %166, %165\n  br i1 %167, label %34, label %175, !llvm.loop !19\n\n168:                                              ; preds = %113\n  %169 = landingpad { i8*, i32 }\n          cleanup\n  br label %170\n\n170:                                              ; preds = %128, %132, %168\n  %171 = phi { i8*, i32 } [ %169, %168 ], [ %129, %132 ], [ %129, %128 ]\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %20) #6\n  %172 = load i8*, i8** %16, align 8, !tbaa !12\n  %173 = icmp eq i8* %172, %15\n  br i1 %173, label %180, label %174\n\n174:                                              ; preds = %170\n  call void @_ZdlPv(i8* %172) #6\n  br label %180\n\n175:                                              ; preds = %164\n  %176 = load i8*, i8** %10, align 8, !tbaa !12\n  %177 = icmp eq i8* %176, %9\n  br i1 %177, label %179, label %178\n\n178:                                              ; preds = %175\n  call void @_ZdlPv(i8* %176) #6\n  br label %179\n\n179:                                              ; preds = %2, %175, %178\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %6) #6\n  ret void\n\n180:                                              ; preds = %174, %170\n  %181 = load i8*, i8** %10, align 8, !tbaa !12\n  %182 = icmp eq i8* %181, %9\n  br i1 %182, label %184, label %183\n\n183:                                              ; preds = %180\n  call void @_ZdlPv(i8* %181) #6\n  br label %184\n\n184:                                              ; preds = %183, %180\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %6) #6\n  resume { i8*, i32 } %171\n}\n\n; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn\ndeclare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1\n\ndeclare dso_local i32 @__gxx_personality_v0(...)\n\n; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn\ndeclare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1\n\n; Function Attrs: nobuiltin nounwind\ndeclare dso_local void @_ZdlPv(i8*) local_unnamed_addr #2\n\ndeclare dso_local i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32), i64* nonnull align 8 dereferenceable(8), i64) local_unnamed_addr #3\n\n; Function Attrs: argmemonly mustprogress nofree nounwind willreturn\ndeclare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #4\n\ndeclare dso_local nonnull align 8 dereferenceable(32) %\"class.std::__cxx11::basic_string\"* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEmmmc(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32), i64, i64, i64, i8 signext) local_unnamed_addr #3\n\n; Function Attrs: inaccessiblememonly nofree nosync nounwind willreturn\ndeclare void @llvm.experimental.noalias.scope.decl(metadata) #5\n\nattributes #0 = { uwtable \"frame-pointer\"=\"none\" \"min-legal-vector-width\"=\"0\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #1 = { argmemonly mustprogress nofree nosync nounwind willreturn }\nattributes #2 = { nobuiltin nounwind \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #3 = { \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #4 = { argmemonly mustprogress nofree nounwind willreturn }\nattributes #5 = { inaccessiblememonly nofree nosync nounwind willreturn }\nattributes #6 = { nounwind }\n\n!llvm.module.flags = !{!0, !1}\n!llvm.ident = !{!2}\n\n!0 = !{i32 1, !\"wchar_size\", i32 4}\n!1 = !{i32 7, !\"uwtable\", i32 1}\n!2 = !{!\"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)\"}\n!3 = !{!4, !5, i64 0}\n!4 = !{!\"_ZTSNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderE\", !5, i64 0}\n!5 = !{!\"any pointer\", !6, i64 0}\n!6 = !{!\"omnipotent char\", !7, i64 0}\n!7 = !{!\"Simple C++ TBAA\"}\n!8 = !{!9, !10, i64 8}\n!9 = !{!\"_ZTSNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE\", !4, i64 0, !10, i64 8, !6, i64 16}\n!10 = !{!\"long\", !6, i64 0}\n!11 = !{!6, !6, i64 0}\n!12 = !{!9, !5, i64 0}\n!13 = distinct !{!13, !14}\n!14 = !{!\"llvm.loop.mustprogress\"}\n!15 = !{!16}\n!16 = distinct !{!16, !17, !\"_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_S5_: argument 0\"}\n!17 = distinct !{!17, !\"_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_S5_\"}\n!18 = !{!10, !10, i64 0}\n!19 = distinct !{!19, !14}\n", "target": "This is the targeted source code:\n/*\nWrite a function that takes a message, and encodes in such a \nway that it swaps case of all letters, replaces all vowels in \nthe message with the letter that appears 2 places ahead of that \nvowel in the english alphabet. \nAssume only letters. \n\nExamples:\n>>> encode('test\")\n\"TGST\"\n>>> encode(\"This is a message\")\n'tHKS KS C MGSSCGG\"\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nstring encode(string message){\n\n    string vowels=\"aeiouAEIOU\";\n    string out=\"\";\n    for (int i=0;i<message.length();i++)\n    {\n        char w=message[i];\n        if (w>=97 and w<=122){w=w-32;}\n        else if (w>=65 and w<=90) w=w+32;\n        if (find(vowels.begin(),vowels.end(),w)!=vowels.end()) w=w+2;\n        out=out+w;\n    }\n    return out;\n}\n"}
{"input": "Convert this to C++:\n; ModuleID = '../../Human_xBenchmarks_164/CPP_94/CPP_94.cpp'\nsource_filename = \"../../Human_xBenchmarks_164/CPP_94/CPP_94.cpp\"\ntarget datalayout = \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\ntarget triple = \"x86_64-unknown-linux-gnu\"\n\n%\"class.std::vector\" = type { %\"struct.std::_Vector_base\" }\n%\"struct.std::_Vector_base\" = type { %\"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl\" }\n%\"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl\" = type { %\"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl_data\" }\n%\"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl_data\" = type { i32*, i32*, i32* }\n%\"class.std::__cxx11::basic_string\" = type { %\"struct.std::__cxx11::basic_string<char>::_Alloc_hider\", i64, %union.anon }\n%\"struct.std::__cxx11::basic_string<char>::_Alloc_hider\" = type { i8* }\n%union.anon = type { i64, [8 x i8] }\n%struct.__va_list_tag = type { i32, i32, i8*, i8* }\n\n$_ZN9__gnu_cxx12__to_xstringINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcEET_PFiPT0_mPKS8_P13__va_list_tagEmSB_z = comdat any\n\n@.str = private unnamed_addr constant [3 x i8] c\"%d\\00\", align 1\n\n; Function Attrs: uwtable\ndefine dso_local i32 @_Z9skjkasdkdSt6vectorIiSaIiEE(%\"class.std::vector\"* nocapture readonly %0) local_unnamed_addr #0 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {\n  %2 = alloca %\"class.std::__cxx11::basic_string\", align 8\n  %3 = alloca %\"class.std::__cxx11::basic_string\", align 8\n  %4 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0, i64 0, i32 0, i32 0, i32 0, i32 1\n  %5 = load i32*, i32** %4, align 8, !tbaa !3\n  %6 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0, i64 0, i32 0, i32 0, i32 0, i32 0\n  %7 = load i32*, i32** %6, align 8, !tbaa !8\n  %8 = ptrtoint i32* %5 to i64\n  %9 = ptrtoint i32* %7 to i64\n  %10 = sub i64 %8, %9\n  %11 = icmp eq i64 %10, 0\n  br i1 %11, label %15, label %12\n\n12:                                               ; preds = %1\n  %13 = ashr exact i64 %10, 2\n  %14 = call i64 @llvm.umax.i64(i64 %13, i64 1)\n  br label %23\n\n15:                                               ; preds = %45, %1\n  %16 = phi i32 [ 0, %1 ], [ %46, %45 ]\n  %17 = bitcast %\"class.std::__cxx11::basic_string\"* %2 to i8*\n  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %17) #9\n  %18 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %2, i64 0, i32 2\n  %19 = bitcast %\"class.std::__cxx11::basic_string\"* %2 to %union.anon**\n  store %union.anon* %18, %union.anon** %19, align 8, !tbaa !9\n  %20 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %2, i64 0, i32 1\n  store i64 0, i64* %20, align 8, !tbaa !11\n  %21 = bitcast %union.anon* %18 to i8*\n  store i8 0, i8* %21, align 8, !tbaa !14\n  %22 = bitcast %\"class.std::__cxx11::basic_string\"* %3 to i8*\n  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %22) #9\n  invoke void (%\"class.std::__cxx11::basic_string\"*, i32 (i8*, i64, i8*, %struct.__va_list_tag*)*, i64, i8*, ...) @_ZN9__gnu_cxx12__to_xstringINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcEET_PFiPT0_mPKS8_P13__va_list_tagEmSB_z(%\"class.std::__cxx11::basic_string\"* nonnull sret(%\"class.std::__cxx11::basic_string\") align 8 %3, i32 (i8*, i64, i8*, %struct.__va_list_tag*)* nonnull @vsnprintf, i64 16, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %16)\n          to label %49 unwind label %175\n\n23:                                               ; preds = %12, %45\n  %24 = phi i64 [ 0, %12 ], [ %47, %45 ]\n  %25 = phi i32 [ 0, %12 ], [ %46, %45 ]\n  %26 = getelementptr inbounds i32, i32* %7, i64 %24\n  %27 = load i32, i32* %26, align 4, !tbaa !15\n  %28 = icmp sgt i32 %27, %25\n  br i1 %28, label %29, label %45\n\n29:                                               ; preds = %23\n  %30 = icmp slt i32 %27, 4\n  br i1 %30, label %31, label %36\n\n31:                                               ; preds = %36, %29\n  %32 = phi i8 [ 1, %29 ], [ %41, %36 ]\n  %33 = and i8 %32, 1\n  %34 = icmp eq i8 %33, 0\n  %35 = select i1 %34, i32 %25, i32 %27\n  br label %45\n\n36:                                               ; preds = %29, %36\n  %37 = phi i32 [ %42, %36 ], [ 2, %29 ]\n  %38 = phi i8 [ %41, %36 ], [ 1, %29 ]\n  %39 = srem i32 %27, %37\n  %40 = icmp eq i32 %39, 0\n  %41 = select i1 %40, i8 0, i8 %38\n  %42 = add nuw nsw i32 %37, 1\n  %43 = mul nsw i32 %42, %42\n  %44 = icmp sgt i32 %43, %27\n  br i1 %44, label %31, label %36, !llvm.loop !17\n\n45:                                               ; preds = %31, %23\n  %46 = phi i32 [ %25, %23 ], [ %35, %31 ]\n  %47 = add nuw nsw i64 %24, 1\n  %48 = icmp eq i64 %47, %14\n  br i1 %48, label %15, label %23, !llvm.loop !19\n\n49:                                               ; preds = %15\n  %50 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %2, i64 0, i32 0, i32 0\n  %51 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %3, i64 0, i32 0, i32 0\n  %52 = load i8*, i8** %51, align 8, !tbaa !20\n  %53 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %3, i64 0, i32 2\n  %54 = bitcast %union.anon* %53 to i8*\n  %55 = icmp eq i8* %52, %54\n  br i1 %55, label %56, label %71\n\n56:                                               ; preds = %49\n  %57 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %3, i64 0, i32 1\n  %58 = load i64, i64* %57, align 8, !tbaa !11\n  %59 = icmp eq i64 %58, 0\n  br i1 %59, label %66, label %60\n\n60:                                               ; preds = %56\n  %61 = load i8*, i8** %50, align 8, !tbaa !20\n  %62 = icmp eq i64 %58, 1\n  br i1 %62, label %63, label %65\n\n63:                                               ; preds = %60\n  %64 = load i8, i8* %52, align 1, !tbaa !14\n  store i8 %64, i8* %61, align 1, !tbaa !14\n  br label %66\n\n65:                                               ; preds = %60\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %61, i8* align 1 %52, i64 %58, i1 false) #9\n  br label %66\n\n66:                                               ; preds = %65, %63, %56\n  %67 = load i64, i64* %57, align 8, !tbaa !11\n  store i64 %67, i64* %20, align 8, !tbaa !11\n  %68 = load i8*, i8** %50, align 8, !tbaa !20\n  %69 = getelementptr inbounds i8, i8* %68, i64 %67\n  store i8 0, i8* %69, align 1, !tbaa !14\n  %70 = load i8*, i8** %51, align 8, !tbaa !20\n  br label %86\n\n71:                                               ; preds = %49\n  %72 = load i8*, i8** %50, align 8, !tbaa !20\n  %73 = icmp eq i8* %72, %21\n  %74 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %2, i64 0, i32 2, i32 0\n  %75 = load i64, i64* %74, align 8\n  store i8* %52, i8** %50, align 8, !tbaa !20\n  %76 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %3, i64 0, i32 1\n  %77 = bitcast i64* %76 to <2 x i64>*\n  %78 = load <2 x i64>, <2 x i64>* %77, align 8, !tbaa !14\n  %79 = bitcast i64* %20 to <2 x i64>*\n  store <2 x i64> %78, <2 x i64>* %79, align 8, !tbaa !14\n  %80 = icmp eq i8* %72, null\n  %81 = or i1 %73, %80\n  br i1 %81, label %84, label %82\n\n82:                                               ; preds = %71\n  store i8* %72, i8** %51, align 8, !tbaa !20\n  %83 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %3, i64 0, i32 2, i32 0\n  store i64 %75, i64* %83, align 8, !tbaa !14\n  br label %86\n\n84:                                               ; preds = %71\n  %85 = bitcast %\"class.std::__cxx11::basic_string\"* %3 to %union.anon**\n  store %union.anon* %53, %union.anon** %85, align 8, !tbaa !20\n  br label %86\n\n86:                                               ; preds = %66, %82, %84\n  %87 = phi i8* [ %70, %66 ], [ %72, %82 ], [ %54, %84 ]\n  %88 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %3, i64 0, i32 1\n  store i64 0, i64* %88, align 8, !tbaa !11\n  store i8 0, i8* %87, align 1, !tbaa !14\n  %89 = load i8*, i8** %51, align 8, !tbaa !20\n  %90 = icmp eq i8* %89, %54\n  br i1 %90, label %92, label %91\n\n91:                                               ; preds = %86\n  call void @_ZdlPv(i8* %89) #9\n  br label %92\n\n92:                                               ; preds = %86, %91\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %22) #9\n  %93 = load i64, i64* %20, align 8, !tbaa !11\n  %94 = load i8*, i8** %50, align 8\n  %95 = icmp eq i64 %93, 0\n  br i1 %95, label %170, label %96\n\n96:                                               ; preds = %92\n  %97 = icmp ult i64 %93, 8\n  br i1 %97, label %167, label %98\n\n98:                                               ; preds = %96\n  %99 = and i64 %93, -8\n  %100 = add i64 %99, -8\n  %101 = lshr exact i64 %100, 3\n  %102 = add nuw nsw i64 %101, 1\n  %103 = and i64 %102, 1\n  %104 = icmp eq i64 %100, 0\n  br i1 %104, label %143, label %105\n\n105:                                              ; preds = %98\n  %106 = and i64 %102, 4611686018427387902\n  br label %107\n\n107:                                              ; preds = %107, %105\n  %108 = phi i64 [ 0, %105 ], [ %137, %107 ]\n  %109 = phi <4 x i32> [ zeroinitializer, %105 ], [ %135, %107 ]\n  %110 = phi <4 x i32> [ zeroinitializer, %105 ], [ %136, %107 ]\n  %111 = phi i64 [ %106, %105 ], [ %138, %107 ]\n  %112 = getelementptr inbounds i8, i8* %94, i64 %108\n  %113 = bitcast i8* %112 to <4 x i8>*\n  %114 = load <4 x i8>, <4 x i8>* %113, align 1, !tbaa !14\n  %115 = getelementptr inbounds i8, i8* %112, i64 4\n  %116 = bitcast i8* %115 to <4 x i8>*\n  %117 = load <4 x i8>, <4 x i8>* %116, align 1, !tbaa !14\n  %118 = sext <4 x i8> %114 to <4 x i32>\n  %119 = sext <4 x i8> %117 to <4 x i32>\n  %120 = add <4 x i32> %109, <i32 -48, i32 -48, i32 -48, i32 -48>\n  %121 = add <4 x i32> %110, <i32 -48, i32 -48, i32 -48, i32 -48>\n  %122 = add <4 x i32> %120, %118\n  %123 = add <4 x i32> %121, %119\n  %124 = or i64 %108, 8\n  %125 = getelementptr inbounds i8, i8* %94, i64 %124\n  %126 = bitcast i8* %125 to <4 x i8>*\n  %127 = load <4 x i8>, <4 x i8>* %126, align 1, !tbaa !14\n  %128 = getelementptr inbounds i8, i8* %125, i64 4\n  %129 = bitcast i8* %128 to <4 x i8>*\n  %130 = load <4 x i8>, <4 x i8>* %129, align 1, !tbaa !14\n  %131 = sext <4 x i8> %127 to <4 x i32>\n  %132 = sext <4 x i8> %130 to <4 x i32>\n  %133 = add <4 x i32> %122, <i32 -48, i32 -48, i32 -48, i32 -48>\n  %134 = add <4 x i32> %123, <i32 -48, i32 -48, i32 -48, i32 -48>\n  %135 = add <4 x i32> %133, %131\n  %136 = add <4 x i32> %134, %132\n  %137 = add nuw i64 %108, 16\n  %138 = add i64 %111, -2\n  %139 = icmp eq i64 %138, 0\n  br i1 %139, label %140, label %107, !llvm.loop !21\n\n140:                                              ; preds = %107\n  %141 = add <4 x i32> %135, <i32 -48, i32 -48, i32 -48, i32 -48>\n  %142 = add <4 x i32> %136, <i32 -48, i32 -48, i32 -48, i32 -48>\n  br label %143\n\n143:                                              ; preds = %140, %98\n  %144 = phi <4 x i32> [ undef, %98 ], [ %135, %140 ]\n  %145 = phi <4 x i32> [ undef, %98 ], [ %136, %140 ]\n  %146 = phi i64 [ 0, %98 ], [ %137, %140 ]\n  %147 = phi <4 x i32> [ <i32 -48, i32 -48, i32 -48, i32 -48>, %98 ], [ %141, %140 ]\n  %148 = phi <4 x i32> [ <i32 -48, i32 -48, i32 -48, i32 -48>, %98 ], [ %142, %140 ]\n  %149 = icmp eq i64 %103, 0\n  br i1 %149, label %161, label %150\n\n150:                                              ; preds = %143\n  %151 = getelementptr inbounds i8, i8* %94, i64 %146\n  %152 = getelementptr inbounds i8, i8* %151, i64 4\n  %153 = bitcast i8* %152 to <4 x i8>*\n  %154 = load <4 x i8>, <4 x i8>* %153, align 1, !tbaa !14\n  %155 = sext <4 x i8> %154 to <4 x i32>\n  %156 = add <4 x i32> %148, %155\n  %157 = bitcast i8* %151 to <4 x i8>*\n  %158 = load <4 x i8>, <4 x i8>* %157, align 1, !tbaa !14\n  %159 = sext <4 x i8> %158 to <4 x i32>\n  %160 = add <4 x i32> %147, %159\n  br label %161\n\n161:                                              ; preds = %143, %150\n  %162 = phi <4 x i32> [ %144, %143 ], [ %160, %150 ]\n  %163 = phi <4 x i32> [ %145, %143 ], [ %156, %150 ]\n  %164 = add <4 x i32> %163, %162\n  %165 = call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %164)\n  %166 = icmp eq i64 %93, %99\n  br i1 %166, label %170, label %167\n\n167:                                              ; preds = %96, %161\n  %168 = phi i64 [ 0, %96 ], [ %99, %161 ]\n  %169 = phi i32 [ 0, %96 ], [ %165, %161 ]\n  br label %182\n\n170:                                              ; preds = %182, %161, %92\n  %171 = phi i32 [ 0, %92 ], [ %165, %161 ], [ %189, %182 ]\n  %172 = icmp eq i8* %94, %21\n  br i1 %172, label %174, label %173\n\n173:                                              ; preds = %170\n  call void @_ZdlPv(i8* %94) #9\n  br label %174\n\n174:                                              ; preds = %170, %173\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %17) #9\n  ret i32 %171\n\n175:                                              ; preds = %15\n  %176 = landingpad { i8*, i32 }\n          cleanup\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %22) #9\n  %177 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %2, i64 0, i32 0, i32 0\n  %178 = load i8*, i8** %177, align 8, !tbaa !20\n  %179 = icmp eq i8* %178, %21\n  br i1 %179, label %181, label %180\n\n180:                                              ; preds = %175\n  call void @_ZdlPv(i8* %178) #9\n  br label %181\n\n181:                                              ; preds = %175, %180\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %17) #9\n  resume { i8*, i32 } %176\n\n182:                                              ; preds = %167, %182\n  %183 = phi i64 [ %190, %182 ], [ %168, %167 ]\n  %184 = phi i32 [ %189, %182 ], [ %169, %167 ]\n  %185 = getelementptr inbounds i8, i8* %94, i64 %183\n  %186 = load i8, i8* %185, align 1, !tbaa !14\n  %187 = sext i8 %186 to i32\n  %188 = add i32 %184, -48\n  %189 = add i32 %188, %187\n  %190 = add nuw nsw i64 %183, 1\n  %191 = icmp eq i64 %190, %93\n  br i1 %191, label %170, label %182, !llvm.loop !23\n}\n\n; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn\ndeclare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1\n\n; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn\ndeclare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1\n\ndeclare dso_local i32 @__gxx_personality_v0(...)\n\n; Function Attrs: uwtable\ndefine linkonce_odr dso_local void @_ZN9__gnu_cxx12__to_xstringINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcEET_PFiPT0_mPKS8_P13__va_list_tagEmSB_z(%\"class.std::__cxx11::basic_string\"* noalias sret(%\"class.std::__cxx11::basic_string\") align 8 %0, i32 (i8*, i64, i8*, %struct.__va_list_tag*)* %1, i64 %2, i8* %3, ...) local_unnamed_addr #0 comdat personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {\n  %5 = alloca i64, align 8\n  %6 = alloca [1 x %struct.__va_list_tag], align 16\n  %7 = alloca i8, i64 %2, align 16\n  %8 = bitcast [1 x %struct.__va_list_tag]* %6 to i8*\n  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %8) #9\n  %9 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %6, i64 0, i64 0\n  call void @llvm.va_start(i8* nonnull %8)\n  %10 = call i32 %1(i8* nonnull %7, i64 %2, i8* %3, %struct.__va_list_tag* nonnull %9)\n  call void @llvm.va_end(i8* nonnull %8)\n  %11 = sext i32 %10 to i64\n  %12 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 2\n  %13 = bitcast %\"class.std::__cxx11::basic_string\"* %0 to %union.anon**\n  store %union.anon* %12, %union.anon** %13, align 8, !tbaa !9\n  %14 = bitcast %union.anon* %12 to i8*\n  %15 = bitcast i64* %5 to i8*\n  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %15) #9\n  store i64 %11, i64* %5, align 8, !tbaa !25\n  %16 = icmp ugt i32 %10, 15\n  br i1 %16, label %17, label %22\n\n17:                                               ; preds = %4\n  %18 = call i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %0, i64* nonnull align 8 dereferenceable(8) %5, i64 0)\n  %19 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 0, i32 0\n  store i8* %18, i8** %19, align 8, !tbaa !20\n  %20 = load i64, i64* %5, align 8, !tbaa !25\n  %21 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 2, i32 0\n  store i64 %20, i64* %21, align 8, !tbaa !14\n  br label %22\n\n22:                                               ; preds = %17, %4\n  %23 = phi i8* [ %18, %17 ], [ %14, %4 ]\n  switch i64 %11, label %26 [\n    i64 1, label %24\n    i64 0, label %27\n  ]\n\n24:                                               ; preds = %22\n  %25 = load i8, i8* %7, align 16, !tbaa !14\n  store i8 %25, i8* %23, align 1, !tbaa !14\n  br label %27\n\n26:                                               ; preds = %22\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %23, i8* nonnull align 16 %7, i64 %11, i1 false) #9\n  br label %27\n\n27:                                               ; preds = %26, %24, %22\n  %28 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 0, i32 0\n  %29 = load i64, i64* %5, align 8, !tbaa !25\n  %30 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 1\n  store i64 %29, i64* %30, align 8, !tbaa !11\n  %31 = load i8*, i8** %28, align 8, !tbaa !20\n  %32 = getelementptr inbounds i8, i8* %31, i64 %29\n  store i8 0, i8* %32, align 1, !tbaa !14\n  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %15) #9\n  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %8) #9\n  ret void\n}\n\n; Function Attrs: nofree nounwind\ndeclare dso_local noundef i32 @vsnprintf(i8* nocapture noundef, i64 noundef, i8* nocapture noundef readonly, %struct.__va_list_tag* noundef) #2\n\n; Function Attrs: mustprogress nofree nosync nounwind willreturn\ndeclare void @llvm.va_start(i8*) #3\n\n; Function Attrs: mustprogress nofree nosync nounwind willreturn\ndeclare void @llvm.va_end(i8*) #3\n\ndeclare dso_local i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32), i64* nonnull align 8 dereferenceable(8), i64) local_unnamed_addr #4\n\n; Function Attrs: argmemonly mustprogress nofree nounwind willreturn\ndeclare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #5\n\n; Function Attrs: nobuiltin nounwind\ndeclare dso_local void @_ZdlPv(i8*) local_unnamed_addr #6\n\n; Function Attrs: nofree nosync nounwind readnone speculatable willreturn\ndeclare i64 @llvm.umax.i64(i64, i64) #7\n\n; Function Attrs: nofree nosync nounwind readnone willreturn\ndeclare i32 @llvm.vector.reduce.add.v4i32(<4 x i32>) #8\n\nattributes #0 = { uwtable \"frame-pointer\"=\"none\" \"min-legal-vector-width\"=\"0\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #1 = { argmemonly mustprogress nofree nosync nounwind willreturn }\nattributes #2 = { nofree nounwind \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #3 = { mustprogress nofree nosync nounwind willreturn }\nattributes #4 = { \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #5 = { argmemonly mustprogress nofree nounwind willreturn }\nattributes #6 = { nobuiltin nounwind \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #7 = { nofree nosync nounwind readnone speculatable willreturn }\nattributes #8 = { nofree nosync nounwind readnone willreturn }\nattributes #9 = { nounwind }\n\n!llvm.module.flags = !{!0, !1}\n!llvm.ident = !{!2}\n\n!0 = !{i32 1, !\"wchar_size\", i32 4}\n!1 = !{i32 7, !\"uwtable\", i32 1}\n!2 = !{!\"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)\"}\n!3 = !{!4, !5, i64 8}\n!4 = !{!\"_ZTSNSt12_Vector_baseIiSaIiEE17_Vector_impl_dataE\", !5, i64 0, !5, i64 8, !5, i64 16}\n!5 = !{!\"any pointer\", !6, i64 0}\n!6 = !{!\"omnipotent char\", !7, i64 0}\n!7 = !{!\"Simple C++ TBAA\"}\n!8 = !{!4, !5, i64 0}\n!9 = !{!10, !5, i64 0}\n!10 = !{!\"_ZTSNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderE\", !5, i64 0}\n!11 = !{!12, !13, i64 8}\n!12 = !{!\"_ZTSNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE\", !10, i64 0, !13, i64 8, !6, i64 16}\n!13 = !{!\"long\", !6, i64 0}\n!14 = !{!6, !6, i64 0}\n!15 = !{!16, !16, i64 0}\n!16 = !{!\"int\", !6, i64 0}\n!17 = distinct !{!17, !18}\n!18 = !{!\"llvm.loop.mustprogress\"}\n!19 = distinct !{!19, !18}\n!20 = !{!12, !5, i64 0}\n!21 = distinct !{!21, !18, !22}\n!22 = !{!\"llvm.loop.isvectorized\", i32 1}\n!23 = distinct !{!23, !18, !24, !22}\n!24 = !{!\"llvm.loop.unroll.runtime.disable\"}\n!25 = !{!13, !13, i64 0}\n", "target": "This is the targeted source code:\n/*\nYou are given a vector of integers.\nYou need to find the largest prime value and return the sum of its digits.\n\nExamples:\nFor lst = {0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3} the output should be 10\nFor lst = {1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1} the output should be 25\nFor lst = {1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3} the output should be 13\nFor lst = {0,724,32,71,99,32,6,0,5,91,83,0,5,6} the output should be 11\nFor lst = {0,81,12,3,1,21} the output should be 3\nFor lst = {0,8,1,2,1,7} the output should be 7\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nint skjkasdkd(vector<int> lst){\n\n    int largest=0;\n    for (int i=0;i<lst.size();i++)\n        if (lst[i]>largest)\n        {\n            bool prime=true;\n            for (int j=2;j*j<=lst[i];j++)\n                if (lst[i]%j==0) prime=false;\n            if (prime) largest=lst[i];\n        }\n    int sum=0;\n    string s;\n    s=to_string(largest);\n    for (int i=0;i<s.length();i++)\n        sum+=s[i]-48;\n    return sum;\n}\n#undef NDEBUG\n#include<assert.h>\n"}
{"input": "Convert this to C++:\n; ModuleID = '../../Human_xBenchmarks_164/CPP_95/CPP_95.cpp'\nsource_filename = \"../../Human_xBenchmarks_164/CPP_95/CPP_95.cpp\"\ntarget datalayout = \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\ntarget triple = \"x86_64-unknown-linux-gnu\"\n\n%\"class.std::map\" = type { %\"class.std::_Rb_tree\" }\n%\"class.std::_Rb_tree\" = type { %\"struct.std::_Rb_tree<std::__cxx11::basic_string<char>, std::pair<const std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char>>, std::_Select1st<std::pair<const std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char>>>, std::less<std::__cxx11::basic_string<char>>>::_Rb_tree_impl\" }\n%\"struct.std::_Rb_tree<std::__cxx11::basic_string<char>, std::pair<const std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char>>, std::_Select1st<std::pair<const std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char>>>, std::less<std::__cxx11::basic_string<char>>>::_Rb_tree_impl\" = type { %\"struct.std::_Rb_tree_key_compare\", %\"struct.std::_Rb_tree_header\" }\n%\"struct.std::_Rb_tree_key_compare\" = type { %\"struct.std::less\" }\n%\"struct.std::less\" = type { i8 }\n%\"struct.std::_Rb_tree_header\" = type { %\"struct.std::_Rb_tree_node_base\", i64 }\n%\"struct.std::_Rb_tree_node_base\" = type { i32, %\"struct.std::_Rb_tree_node_base\"*, %\"struct.std::_Rb_tree_node_base\"*, %\"struct.std::_Rb_tree_node_base\"* }\n%\"class.std::__cxx11::basic_string\" = type { %\"struct.std::__cxx11::basic_string<char>::_Alloc_hider\", i64, %union.anon }\n%\"struct.std::__cxx11::basic_string<char>::_Alloc_hider\" = type { i8* }\n%union.anon = type { i64, [8 x i8] }\n\n; Function Attrs: uwtable\ndefine dso_local zeroext i1 @_Z15check_dict_caseSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_St4lessIS5_ESaISt4pairIKS5_S5_EEE(%\"class.std::map\"* %0) local_unnamed_addr #0 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {\n  %2 = alloca i64, align 8\n  %3 = alloca %\"class.std::__cxx11::basic_string\", align 8\n  %4 = getelementptr inbounds %\"class.std::map\", %\"class.std::map\"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0\n  %5 = getelementptr inbounds i8, i8* %4, i64 40\n  %6 = bitcast i8* %5 to i64*\n  %7 = load i64, i64* %6, align 8, !tbaa !3\n  %8 = icmp eq i64 %7, 0\n  br i1 %8, label %80, label %9\n\n9:                                                ; preds = %1\n  %10 = getelementptr inbounds i8, i8* %4, i64 24\n  %11 = bitcast i8* %10 to %\"struct.std::_Rb_tree_node_base\"**\n  %12 = load %\"struct.std::_Rb_tree_node_base\"*, %\"struct.std::_Rb_tree_node_base\"** %11, align 8, !tbaa !11\n  %13 = getelementptr inbounds i8, i8* %4, i64 8\n  %14 = bitcast i8* %13 to %\"struct.std::_Rb_tree_node_base\"*\n  %15 = bitcast %\"class.std::__cxx11::basic_string\"* %3 to i8*\n  %16 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %3, i64 0, i32 2\n  %17 = bitcast %\"class.std::__cxx11::basic_string\"* %3 to %union.anon**\n  %18 = bitcast i64* %2 to i8*\n  %19 = bitcast %union.anon* %16 to i8*\n  %20 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %3, i64 0, i32 0, i32 0\n  %21 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %3, i64 0, i32 2, i32 0\n  %22 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %3, i64 0, i32 1\n  %23 = icmp eq %\"struct.std::_Rb_tree_node_base\"* %12, %14\n  br i1 %23, label %80, label %24\n\n24:                                               ; preds = %9, %77\n  %25 = phi i32 [ %73, %77 ], [ 0, %9 ]\n  %26 = phi i32 [ %71, %77 ], [ 0, %9 ]\n  %27 = phi %\"struct.std::_Rb_tree_node_base\"* [ %78, %77 ], [ %12, %9 ]\n  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %15) #6\n  %28 = getelementptr inbounds %\"struct.std::_Rb_tree_node_base\", %\"struct.std::_Rb_tree_node_base\"* %27, i64 1\n  store %union.anon* %16, %union.anon** %17, align 8, !tbaa !12\n  %29 = bitcast %\"struct.std::_Rb_tree_node_base\"* %28 to i8**\n  %30 = load i8*, i8** %29, align 8, !tbaa !14\n  %31 = getelementptr inbounds %\"struct.std::_Rb_tree_node_base\", %\"struct.std::_Rb_tree_node_base\"* %27, i64 1, i32 1\n  %32 = bitcast %\"struct.std::_Rb_tree_node_base\"** %31 to i64*\n  %33 = load i64, i64* %32, align 8, !tbaa !16\n  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %18) #6\n  store i64 %33, i64* %2, align 8, !tbaa !17\n  %34 = icmp ugt i64 %33, 15\n  br i1 %34, label %35, label %38\n\n35:                                               ; preds = %24\n  %36 = call i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %3, i64* nonnull align 8 dereferenceable(8) %2, i64 0)\n  store i8* %36, i8** %20, align 8, !tbaa !14\n  %37 = load i64, i64* %2, align 8, !tbaa !17\n  store i64 %37, i64* %21, align 8, !tbaa !18\n  br label %38\n\n38:                                               ; preds = %24, %35\n  %39 = phi i8* [ %36, %35 ], [ %19, %24 ]\n  switch i64 %33, label %42 [\n    i64 1, label %40\n    i64 0, label %43\n  ]\n\n40:                                               ; preds = %38\n  %41 = load i8, i8* %30, align 1, !tbaa !18\n  store i8 %41, i8* %39, align 1, !tbaa !18\n  br label %43\n\n42:                                               ; preds = %38\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %39, i8* align 1 %30, i64 %33, i1 false) #6\n  br label %43\n\n43:                                               ; preds = %38, %40, %42\n  %44 = load i64, i64* %2, align 8, !tbaa !17\n  store i64 %44, i64* %22, align 8, !tbaa !16\n  %45 = load i8*, i8** %20, align 8, !tbaa !14\n  %46 = getelementptr inbounds i8, i8* %45, i64 %44\n  store i8 0, i8* %46, align 1, !tbaa !18\n  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %18) #6\n  %47 = load i64, i64* %22, align 8, !tbaa !16\n  %48 = load i8*, i8** %20, align 8\n  %49 = icmp eq i64 %47, 0\n  br i1 %49, label %70, label %52\n\n50:                                               ; preds = %64\n  %51 = icmp eq i64 %69, %47\n  br i1 %51, label %70, label %52, !llvm.loop !19\n\n52:                                               ; preds = %43, %50\n  %53 = phi i64 [ %69, %50 ], [ 0, %43 ]\n  %54 = phi i32 [ %66, %50 ], [ %25, %43 ]\n  %55 = phi i32 [ %65, %50 ], [ %26, %43 ]\n  %56 = getelementptr inbounds i8, i8* %48, i64 %53\n  %57 = load i8, i8* %56, align 1, !tbaa !18\n  %58 = icmp slt i8 %57, 65\n  br i1 %58, label %70, label %59\n\n59:                                               ; preds = %52\n  %60 = icmp sgt i8 %57, 90\n  br i1 %60, label %61, label %64\n\n61:                                               ; preds = %59\n  %62 = add nsw i8 %57, -97\n  %63 = icmp ugt i8 %62, 25\n  br i1 %63, label %70, label %64\n\n64:                                               ; preds = %61, %59\n  %65 = phi i32 [ 1, %59 ], [ %55, %61 ]\n  %66 = phi i32 [ %54, %59 ], [ 1, %61 ]\n  %67 = add nsw i32 %66, %65\n  %68 = icmp eq i32 %67, 2\n  %69 = add nuw i64 %53, 1\n  br i1 %68, label %70, label %50\n\n70:                                               ; preds = %50, %61, %52, %64, %43\n  %71 = phi i32 [ %26, %43 ], [ %65, %64 ], [ %55, %52 ], [ %55, %61 ], [ %65, %50 ]\n  %72 = phi i1 [ true, %43 ], [ false, %64 ], [ false, %52 ], [ false, %61 ], [ true, %50 ]\n  %73 = phi i32 [ %25, %43 ], [ %66, %64 ], [ %54, %52 ], [ %54, %61 ], [ %66, %50 ]\n  %74 = icmp eq i8* %48, %19\n  br i1 %74, label %76, label %75\n\n75:                                               ; preds = %70\n  call void @_ZdlPv(i8* %48) #6\n  br label %76\n\n76:                                               ; preds = %70, %75\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %15) #6\n  br i1 %72, label %77, label %80\n\n77:                                               ; preds = %76\n  %78 = call %\"struct.std::_Rb_tree_node_base\"* @_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base(%\"struct.std::_Rb_tree_node_base\"* %27) #7\n  %79 = icmp eq %\"struct.std::_Rb_tree_node_base\"* %78, %14\n  br i1 %79, label %80, label %24, !llvm.loop !21\n\n80:                                               ; preds = %76, %77, %9, %1\n  %81 = phi i1 [ false, %1 ], [ true, %9 ], [ %72, %77 ], [ %72, %76 ]\n  ret i1 %81\n}\n\n; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn\ndeclare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1\n\n; Function Attrs: argmemonly mustprogress nofree nounwind willreturn\ndeclare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #2\n\n; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn\ndeclare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1\n\ndeclare dso_local i32 @__gxx_personality_v0(...)\n\n; Function Attrs: nobuiltin nounwind\ndeclare dso_local void @_ZdlPv(i8*) local_unnamed_addr #3\n\n; Function Attrs: mustprogress nofree nounwind readonly willreturn\ndeclare dso_local %\"struct.std::_Rb_tree_node_base\"* @_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base(%\"struct.std::_Rb_tree_node_base\"*) local_unnamed_addr #4\n\ndeclare dso_local i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32), i64* nonnull align 8 dereferenceable(8), i64) local_unnamed_addr #5\n\nattributes #0 = { uwtable \"frame-pointer\"=\"none\" \"min-legal-vector-width\"=\"0\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #1 = { argmemonly mustprogress nofree nosync nounwind willreturn }\nattributes #2 = { argmemonly mustprogress nofree nounwind willreturn }\nattributes #3 = { nobuiltin nounwind \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #4 = { mustprogress nofree nounwind readonly willreturn \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #5 = { \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #6 = { nounwind }\nattributes #7 = { nounwind readonly willreturn }\n\n!llvm.module.flags = !{!0, !1}\n!llvm.ident = !{!2}\n\n!0 = !{i32 1, !\"wchar_size\", i32 4}\n!1 = !{i32 7, !\"uwtable\", i32 1}\n!2 = !{!\"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)\"}\n!3 = !{!4, !10, i64 32}\n!4 = !{!\"_ZTSSt15_Rb_tree_header\", !5, i64 0, !10, i64 32}\n!5 = !{!\"_ZTSSt18_Rb_tree_node_base\", !6, i64 0, !9, i64 8, !9, i64 16, !9, i64 24}\n!6 = !{!\"_ZTSSt14_Rb_tree_color\", !7, i64 0}\n!7 = !{!\"omnipotent char\", !8, i64 0}\n!8 = !{!\"Simple C++ TBAA\"}\n!9 = !{!\"any pointer\", !7, i64 0}\n!10 = !{!\"long\", !7, i64 0}\n!11 = !{!4, !9, i64 16}\n!12 = !{!13, !9, i64 0}\n!13 = !{!\"_ZTSNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderE\", !9, i64 0}\n!14 = !{!15, !9, i64 0}\n!15 = !{!\"_ZTSNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE\", !13, i64 0, !10, i64 8, !7, i64 16}\n!16 = !{!15, !10, i64 8}\n!17 = !{!10, !10, i64 0}\n!18 = !{!7, !7, i64 0}\n!19 = distinct !{!19, !20}\n!20 = !{!\"llvm.loop.mustprogress\"}\n!21 = distinct !{!21, !20}\n", "target": "This is the targeted source code:\n/*\nGiven a map, return true if all keys are strings in lower \ncase or all keys are strings in upper case, else return false.\nThe function should return false is the given map is empty.\nExamples:\ncheck_map_case({{\"a\",\"apple\"}, {\"b\",\"banana\"}}) should return true.\ncheck_map_case({{\"a\",\"apple\"}, {\"A\",\"banana\"}, {\"B\",\"banana\"}}) should return false.\ncheck_map_case({{\"a\",\"apple\"}, {\"8\",\"banana\"}, {\"a\",\"apple\"}}) should return false.\ncheck_map_case({{\"Name\",\"John\"}, {\"Age\",\"36\"}, {\"City\",\"Houston\"}}) should return false.\ncheck_map_case({{\"STATE\",\"NC\"}, {\"ZIP\",\"12345\"} }) should return true.\n*/\n#include<stdio.h>\n#include<string>\n#include<map>\nusing namespace std;\nbool check_dict_case(map<string,string> dict){\n\n    map<string,string>::iterator it;\n    int islower=0,isupper=0;\n    if (dict.size()==0) return false;\n    for (it=dict.begin();it!=dict.end();it++)\n    {\n        string key=it->first;\n    \n        for (int i=0;i<key.length();i++)\n        {\n            if (key[i]<65 or (key[i]>90 and key[i]<97) or key[i]>122) return false;\n            if (key[i]>=65 and key[i]<=90) isupper=1;\n            if (key[i]>=97 and key[i]<=122) islower=1;\n            if (isupper+islower==2) return false;\n        }\n\n    }\n    return true;\n}\n"}
{"input": "Convert this to C++:\n; ModuleID = '../../Human_xBenchmarks_164/CPP_96/CPP_96.cpp'\nsource_filename = \"../../Human_xBenchmarks_164/CPP_96/CPP_96.cpp\"\ntarget datalayout = \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\ntarget triple = \"x86_64-unknown-linux-gnu\"\n\n%\"class.std::vector\" = type { %\"struct.std::_Vector_base\" }\n%\"struct.std::_Vector_base\" = type { %\"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl\" }\n%\"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl\" = type { %\"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl_data\" }\n%\"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl_data\" = type { i32*, i32*, i32* }\n\n@.str = private unnamed_addr constant [26 x i8] c\"vector::_M_realloc_insert\\00\", align 1\n\n; Function Attrs: uwtable\ndefine dso_local void @_Z11count_up_toi(%\"class.std::vector\"* noalias nocapture sret(%\"class.std::vector\") align 8 %0, i32 %1) local_unnamed_addr #0 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {\n  %3 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0, i64 0, i32 0, i32 0, i32 0, i32 1\n  %4 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0, i64 0, i32 0, i32 0, i32 0, i32 2\n  %5 = icmp sgt i32 %1, 2\n  %6 = bitcast %\"class.std::vector\"* %0 to i8*\n  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(24) %6, i8 0, i64 24, i1 false)\n  br i1 %5, label %7, label %94\n\n7:                                                ; preds = %2\n  %8 = bitcast %\"class.std::vector\"* %0 to i8**\n  %9 = bitcast %\"class.std::vector\"* %0 to i8**\n  br label %10\n\n10:                                               ; preds = %7, %87\n  %11 = phi i32* [ %88, %87 ], [ null, %7 ]\n  %12 = phi i32* [ %89, %87 ], [ null, %7 ]\n  %13 = phi i32* [ %90, %87 ], [ null, %7 ]\n  %14 = phi i32* [ %91, %87 ], [ null, %7 ]\n  %15 = phi i32 [ %92, %87 ], [ 2, %7 ]\n  %16 = ptrtoint i32* %14 to i64\n  %17 = ptrtoint i32* %13 to i64\n  %18 = sub i64 %16, %17\n  %19 = ashr exact i64 %18, 2\n  %20 = icmp eq i64 %18, 0\n  br i1 %20, label %25, label %21\n\n21:                                               ; preds = %10\n  %22 = load i32, i32* %13, align 4, !tbaa !3\n  %23 = mul nsw i32 %22, %22\n  %24 = icmp ugt i32 %23, %15\n  br i1 %24, label %57, label %42\n\n25:                                               ; preds = %10\n  %26 = icmp eq i32* %14, %11\n  br i1 %26, label %29, label %27\n\n27:                                               ; preds = %25\n  store i32 %15, i32* %14, align 4, !tbaa !3\n  %28 = getelementptr inbounds i32, i32* %14, i64 1\n  store i32* %28, i32** %3, align 8, !tbaa !7\n  br label %87\n\n29:                                               ; preds = %25\n  %30 = add nuw nsw i64 %19, 1\n  %31 = shl nuw nsw i64 %30, 2\n  %32 = invoke noalias nonnull i8* @_Znwm(i64 %31) #6\n          to label %33 unwind label %95\n\n33:                                               ; preds = %29\n  %34 = bitcast i8* %32 to i32*\n  %35 = getelementptr inbounds i32, i32* %34, i64 %19\n  store i32 %15, i32* %35, align 4, !tbaa !3\n  %36 = getelementptr inbounds i32, i32* %35, i64 1\n  %37 = icmp eq i32* %13, null\n  br i1 %37, label %40, label %38\n\n38:                                               ; preds = %33\n  %39 = bitcast i32* %13 to i8*\n  tail call void @_ZdlPv(i8* nonnull %39) #7\n  br label %40\n\n40:                                               ; preds = %38, %33\n  store i8* %32, i8** %9, align 8, !tbaa !10\n  store i32* %36, i32** %3, align 8, !tbaa !7\n  %41 = getelementptr inbounds i32, i32* %34, i64 %30\n  store i32* %41, i32** %4, align 8, !tbaa !11\n  br label %87\n\n42:                                               ; preds = %21, %42\n  %43 = phi i64 [ %49, %42 ], [ 0, %21 ]\n  %44 = phi i32 [ %51, %42 ], [ %22, %21 ]\n  %45 = phi i8 [ %48, %42 ], [ 1, %21 ]\n  %46 = srem i32 %15, %44\n  %47 = icmp eq i32 %46, 0\n  %48 = select i1 %47, i8 0, i8 %45\n  %49 = add nuw nsw i64 %43, 1\n  %50 = getelementptr inbounds i32, i32* %13, i64 %49\n  %51 = load i32, i32* %50, align 4, !tbaa !3\n  %52 = mul nsw i32 %51, %51\n  %53 = icmp ugt i32 %52, %15\n  br i1 %53, label %54, label %42, !llvm.loop !12\n\n54:                                               ; preds = %42\n  %55 = and i8 %48, 1\n  %56 = icmp eq i8 %55, 0\n  br i1 %56, label %87, label %57\n\n57:                                               ; preds = %21, %54\n  %58 = icmp eq i32* %14, %12\n  br i1 %58, label %61, label %59\n\n59:                                               ; preds = %57\n  store i32 %15, i32* %14, align 4, !tbaa !3\n  %60 = getelementptr inbounds i32, i32* %14, i64 1\n  store i32* %60, i32** %3, align 8, !tbaa !7\n  br label %87\n\n61:                                               ; preds = %57\n  %62 = icmp eq i64 %18, 9223372036854775804\n  br i1 %62, label %63, label %65\n\n63:                                               ; preds = %61\n  invoke void @_ZSt20__throw_length_errorPKc(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str, i64 0, i64 0)) #8\n          to label %64 unwind label %85\n\n64:                                               ; preds = %63\n  unreachable\n\n65:                                               ; preds = %61\n  %66 = ashr exact i64 %18, 1\n  %67 = icmp ult i64 %66, %19\n  %68 = icmp ugt i64 %66, 2305843009213693951\n  %69 = or i1 %67, %68\n  %70 = select i1 %69, i64 2305843009213693951, i64 %66\n  %71 = shl nuw nsw i64 %70, 2\n  %72 = invoke noalias nonnull i8* @_Znwm(i64 %71) #6\n          to label %73 unwind label %83\n\n73:                                               ; preds = %65\n  %74 = bitcast i8* %72 to i32*\n  %75 = getelementptr inbounds i32, i32* %74, i64 %19\n  store i32 %15, i32* %75, align 4, !tbaa !3\n  %76 = icmp sgt i64 %18, 0\n  br i1 %76, label %77, label %79\n\n77:                                               ; preds = %73\n  %78 = bitcast i32* %13 to i8*\n  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* nonnull align 4 %72, i8* nonnull align 4 %78, i64 %18, i1 false) #7\n  br label %79\n\n79:                                               ; preds = %73, %77\n  %80 = bitcast i32* %13 to i8*\n  %81 = getelementptr inbounds i32, i32* %75, i64 1\n  tail call void @_ZdlPv(i8* nonnull %80) #7\n  store i8* %72, i8** %8, align 8, !tbaa !10\n  store i32* %81, i32** %3, align 8, !tbaa !7\n  %82 = getelementptr inbounds i32, i32* %74, i64 %70\n  store i32* %82, i32** %4, align 8, !tbaa !11\n  br label %87\n\n83:                                               ; preds = %65\n  %84 = landingpad { i8*, i32 }\n          cleanup\n  br label %98\n\n85:                                               ; preds = %63\n  %86 = landingpad { i8*, i32 }\n          cleanup\n  br label %98\n\n87:                                               ; preds = %79, %59, %40, %27, %54\n  %88 = phi i32* [ %82, %79 ], [ %11, %59 ], [ %41, %40 ], [ %11, %27 ], [ %11, %54 ]\n  %89 = phi i32* [ %82, %79 ], [ %12, %59 ], [ %41, %40 ], [ %11, %27 ], [ %12, %54 ]\n  %90 = phi i32* [ %74, %79 ], [ %13, %59 ], [ %34, %40 ], [ %13, %27 ], [ %13, %54 ]\n  %91 = phi i32* [ %81, %79 ], [ %60, %59 ], [ %36, %40 ], [ %28, %27 ], [ %14, %54 ]\n  %92 = add nuw nsw i32 %15, 1\n  %93 = icmp eq i32 %92, %1\n  br i1 %93, label %94, label %10, !llvm.loop !14\n\n94:                                               ; preds = %87, %2\n  ret void\n\n95:                                               ; preds = %29\n  %96 = landingpad { i8*, i32 }\n          cleanup\n  %97 = icmp eq i32* %13, null\n  br i1 %97, label %101, label %98\n\n98:                                               ; preds = %83, %85, %95\n  %99 = phi { i8*, i32 } [ %96, %95 ], [ %84, %83 ], [ %86, %85 ]\n  %100 = bitcast i32* %13 to i8*\n  tail call void @_ZdlPv(i8* nonnull %100) #7\n  br label %101\n\n101:                                              ; preds = %95, %98\n  %102 = phi { i8*, i32 } [ %96, %95 ], [ %99, %98 ]\n  resume { i8*, i32 } %102\n}\n\n; Function Attrs: argmemonly mustprogress nofree nounwind willreturn writeonly\ndeclare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1\n\ndeclare dso_local i32 @__gxx_personality_v0(...)\n\n; Function Attrs: nobuiltin nounwind\ndeclare dso_local void @_ZdlPv(i8*) local_unnamed_addr #2\n\n; Function Attrs: noreturn\ndeclare dso_local void @_ZSt20__throw_length_errorPKc(i8*) local_unnamed_addr #3\n\n; Function Attrs: nobuiltin allocsize(0)\ndeclare dso_local nonnull i8* @_Znwm(i64) local_unnamed_addr #4\n\n; Function Attrs: argmemonly mustprogress nofree nounwind willreturn\ndeclare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #5\n\nattributes #0 = { uwtable \"frame-pointer\"=\"none\" \"min-legal-vector-width\"=\"0\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #1 = { argmemonly mustprogress nofree nounwind willreturn writeonly }\nattributes #2 = { nobuiltin nounwind \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #3 = { noreturn \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #4 = { nobuiltin allocsize(0) \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #5 = { argmemonly mustprogress nofree nounwind willreturn }\nattributes #6 = { allocsize(0) }\nattributes #7 = { nounwind }\nattributes #8 = { noreturn }\n\n!llvm.module.flags = !{!0, !1}\n!llvm.ident = !{!2}\n\n!0 = !{i32 1, !\"wchar_size\", i32 4}\n!1 = !{i32 7, !\"uwtable\", i32 1}\n!2 = !{!\"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)\"}\n!3 = !{!4, !4, i64 0}\n!4 = !{!\"int\", !5, i64 0}\n!5 = !{!\"omnipotent char\", !6, i64 0}\n!6 = !{!\"Simple C++ TBAA\"}\n!7 = !{!8, !9, i64 8}\n!8 = !{!\"_ZTSNSt12_Vector_baseIiSaIiEE17_Vector_impl_dataE\", !9, i64 0, !9, i64 8, !9, i64 16}\n!9 = !{!\"any pointer\", !5, i64 0}\n!10 = !{!8, !9, i64 0}\n!11 = !{!8, !9, i64 16}\n!12 = distinct !{!12, !13}\n!13 = !{!\"llvm.loop.mustprogress\"}\n!14 = distinct !{!14, !13}\n", "target": "This is the targeted source code:\n/*\nImplement a function that takes an non-negative integer and returns a vector of the first n\nintegers that are prime numbers and less than n.\nfor example:\ncount_up_to(5) => {2,3}\ncount_up_to(11) => {2,3,5,7}\ncount_up_to(0) => {}\ncount_up_to(20) => {2,3,5,7,11,13,17,19}\ncount_up_to(1) => {}\ncount_up_to(18) => {2,3,5,7,11,13,17}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> count_up_to(int n){\n\n    vector<int> out={};\n    int i,j;\n    for (i=2;i<n;i++)\n        if (out.size()==0) {out.push_back(i);}\n        else\n        {\n            bool isp=true;\n            for (j=0;out[j]*out[j]<=i;j++)\n                if (i%out[j]==0) isp=false;\n            if (isp) out.push_back(i);\n        }\n    return out;\n}\n"}
{"input": "Convert this to C++:\n; ModuleID = '../../Human_xBenchmarks_164/CPP_97/CPP_97.cpp'\nsource_filename = \"../../Human_xBenchmarks_164/CPP_97/CPP_97.cpp\"\ntarget datalayout = \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\ntarget triple = \"x86_64-unknown-linux-gnu\"\n\n; Function Attrs: mustprogress nofree nosync nounwind readnone uwtable willreturn\ndefine dso_local i32 @_Z8multiplyii(i32 %0, i32 %1) local_unnamed_addr #0 {\n  %3 = tail call i32 @llvm.abs.i32(i32 %0, i1 true)\n  %4 = urem i32 %3, 10\n  %5 = tail call i32 @llvm.abs.i32(i32 %1, i1 true)\n  %6 = urem i32 %5, 10\n  %7 = mul nuw nsw i32 %6, %4\n  ret i32 %7\n}\n\n; Function Attrs: nofree nosync nounwind readnone speculatable willreturn\ndeclare i32 @llvm.abs.i32(i32, i1 immarg) #1\n\nattributes #0 = { mustprogress nofree nosync nounwind readnone uwtable willreturn \"frame-pointer\"=\"none\" \"min-legal-vector-width\"=\"0\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #1 = { nofree nosync nounwind readnone speculatable willreturn }\n\n!llvm.module.flags = !{!0, !1}\n!llvm.ident = !{!2}\n\n!0 = !{i32 1, !\"wchar_size\", i32 4}\n!1 = !{i32 7, !\"uwtable\", i32 1}\n!2 = !{!\"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)\"}\n", "target": "This is the targeted source code:\n/*\nComplete the function that takes two integers and returns \nthe product of their unit digits.\nAssume the input is always valid.\nExamples:\nmultiply(148, 412) should return 16.\nmultiply(19, 28) should return 72.\nmultiply(2020, 1851) should return 0.\nmultiply(14,-15) should return 20.\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nint multiply(int a,int b){\n\n    return (abs(a)%10)*(abs(b)%10);\n}\n"}
{"input": "Convert this to C++:\n; ModuleID = '../../Human_xBenchmarks_164/CPP_98/CPP_98.cpp'\nsource_filename = \"../../Human_xBenchmarks_164/CPP_98/CPP_98.cpp\"\ntarget datalayout = \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\ntarget triple = \"x86_64-unknown-linux-gnu\"\n\n%\"class.std::__cxx11::basic_string\" = type { %\"struct.std::__cxx11::basic_string<char>::_Alloc_hider\", i64, %union.anon }\n%\"struct.std::__cxx11::basic_string<char>::_Alloc_hider\" = type { i8* }\n%union.anon = type { i64, [8 x i8] }\n\n@.str = private unnamed_addr constant [6 x i8] c\"AEIOU\\00\", align 1\n\n; Function Attrs: uwtable\ndefine dso_local i32 @_Z11count_upperNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE(%\"class.std::__cxx11::basic_string\"* nocapture readonly %0) local_unnamed_addr #0 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {\n  %2 = alloca %\"class.std::__cxx11::basic_string\", align 8\n  %3 = bitcast %\"class.std::__cxx11::basic_string\"* %2 to i8*\n  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %3) #3\n  %4 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %2, i64 0, i32 2\n  %5 = bitcast %\"class.std::__cxx11::basic_string\"* %2 to %union.anon**\n  store %union.anon* %4, %union.anon** %5, align 8, !tbaa !3\n  %6 = bitcast %union.anon* %4 to i8*\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(5) %6, i8* noundef nonnull align 1 dereferenceable(5) getelementptr inbounds ([6 x i8], [6 x i8]* @.str, i64 0, i64 0), i64 5, i1 false) #3\n  %7 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %2, i64 0, i32 1\n  store i64 5, i64* %7, align 8, !tbaa !8\n  %8 = getelementptr inbounds i8, i8* %6, i64 5\n  store i8 0, i8* %8, align 1, !tbaa !11\n  %9 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 1\n  %10 = load i64, i64* %9, align 8, !tbaa !8\n  %11 = icmp eq i64 %10, 0\n  br i1 %11, label %50, label %12\n\n12:                                               ; preds = %1\n  %13 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 0, i32 0\n  %14 = load i8*, i8** %13, align 8, !tbaa !12\n  %15 = add i64 %10, -1\n  %16 = lshr i64 %15, 1\n  %17 = load i8, i8* %6, align 8, !tbaa !11\n  %18 = getelementptr inbounds i8, i8* %6, i64 1\n  %19 = load i8, i8* %18, align 1\n  %20 = getelementptr inbounds i8, i8* %6, i64 2\n  %21 = load i8, i8* %20, align 2\n  %22 = getelementptr inbounds i8, i8* %6, i64 3\n  %23 = load i8, i8* %22, align 1\n  %24 = getelementptr inbounds i8, i8* %6, i64 4\n  %25 = load i8, i8* %24, align 4\n  br label %26\n\n26:                                               ; preds = %42, %12\n  %27 = phi i64 [ 0, %12 ], [ %47, %42 ]\n  %28 = phi i64 [ 0, %12 ], [ %48, %42 ]\n  %29 = phi i32 [ 0, %12 ], [ %46, %42 ]\n  %30 = getelementptr inbounds i8, i8* %14, i64 %28\n  %31 = load i8, i8* %30, align 1, !tbaa !11\n  %32 = icmp eq i8 %17, %31\n  br i1 %32, label %42, label %33\n\n33:                                               ; preds = %26\n  %34 = icmp eq i8 %19, %31\n  br i1 %34, label %42, label %35\n\n35:                                               ; preds = %33\n  %36 = icmp eq i8 %21, %31\n  br i1 %36, label %42, label %37\n\n37:                                               ; preds = %35\n  %38 = icmp eq i8 %23, %31\n  br i1 %38, label %42, label %39\n\n39:                                               ; preds = %37\n  %40 = icmp eq i8 %25, %31\n  %41 = select i1 %40, i64 4, i64 5\n  br label %42\n\n42:                                               ; preds = %39, %33, %35, %37, %26\n  %43 = phi i64 [ 0, %26 ], [ 3, %37 ], [ 2, %35 ], [ 1, %33 ], [ %41, %39 ]\n  %44 = icmp ne i64 %43, 5\n  %45 = zext i1 %44 to i32\n  %46 = add nuw nsw i32 %29, %45\n  %47 = add nuw nsw i64 %27, 1\n  %48 = shl nuw nsw i64 %47, 1\n  %49 = icmp eq i64 %27, %16\n  br i1 %49, label %50, label %26, !llvm.loop !13\n\n50:                                               ; preds = %42, %1\n  %51 = phi i32 [ 0, %1 ], [ %46, %42 ]\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %3) #3\n  ret i32 %51\n}\n\n; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn\ndeclare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1\n\ndeclare dso_local i32 @__gxx_personality_v0(...)\n\n; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn\ndeclare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1\n\n; Function Attrs: argmemonly mustprogress nofree nounwind willreturn\ndeclare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #2\n\nattributes #0 = { uwtable \"frame-pointer\"=\"none\" \"min-legal-vector-width\"=\"0\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #1 = { argmemonly mustprogress nofree nosync nounwind willreturn }\nattributes #2 = { argmemonly mustprogress nofree nounwind willreturn }\nattributes #3 = { nounwind }\n\n!llvm.module.flags = !{!0, !1}\n!llvm.ident = !{!2}\n\n!0 = !{i32 1, !\"wchar_size\", i32 4}\n!1 = !{i32 7, !\"uwtable\", i32 1}\n!2 = !{!\"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)\"}\n!3 = !{!4, !5, i64 0}\n!4 = !{!\"_ZTSNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderE\", !5, i64 0}\n!5 = !{!\"any pointer\", !6, i64 0}\n!6 = !{!\"omnipotent char\", !7, i64 0}\n!7 = !{!\"Simple C++ TBAA\"}\n!8 = !{!9, !10, i64 8}\n!9 = !{!\"_ZTSNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE\", !4, i64 0, !10, i64 8, !6, i64 16}\n!10 = !{!\"long\", !6, i64 0}\n!11 = !{!6, !6, i64 0}\n!12 = !{!9, !5, i64 0}\n!13 = distinct !{!13, !14}\n!14 = !{!\"llvm.loop.mustprogress\"}\n", "target": "This is the targeted source code:\n/*\nGiven a string s, count the number of uppercase vowels in even indices.\n\nFor example:\ncount_upper(\"aBCdEf\") returns 1\ncount_upper(\"abcdefg\") returns 0\ncount_upper(\"dBBE\") returns 0\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nint count_upper(string s){\n\n    string uvowel=\"AEIOU\";\n    int count=0;\n    for (int i=0;i*2<s.length();i++)\n    if (find(uvowel.begin(),uvowel.end(),s[i*2])!=uvowel.end())\n        count+=1;\n    return count;\n}\n"}
{"input": "Convert this to C++:\n; ModuleID = '../../Human_xBenchmarks_164/CPP_99/CPP_99.cpp'\nsource_filename = \"../../Human_xBenchmarks_164/CPP_99/CPP_99.cpp\"\ntarget datalayout = \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\ntarget triple = \"x86_64-unknown-linux-gnu\"\n\n%\"class.std::__cxx11::basic_string\" = type { %\"struct.std::__cxx11::basic_string<char>::_Alloc_hider\", i64, %union.anon }\n%\"struct.std::__cxx11::basic_string<char>::_Alloc_hider\" = type { i8* }\n%union.anon = type { i64, [8 x i8] }\n\n; Function Attrs: mustprogress nofree nounwind uwtable willreturn\ndefine dso_local i32 @_Z15closest_integerNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE(%\"class.std::__cxx11::basic_string\"* nocapture readonly %0) local_unnamed_addr #0 personality i32 (...)* @__gxx_personality_v0 {\n  %2 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 0, i32 0\n  %3 = load i8*, i8** %2, align 8, !tbaa !3\n  %4 = tail call double @strtod(i8* nocapture nonnull %3, i8** null) #3\n  %5 = tail call double @llvm.round.f64(double %4)\n  %6 = fptosi double %5 to i32\n  ret i32 %6\n}\n\n; Function Attrs: mustprogress nofree nosync nounwind readnone speculatable willreturn\ndeclare double @llvm.round.f64(double) #1\n\n; Function Attrs: mustprogress nofree nounwind willreturn\ndeclare dso_local double @strtod(i8* readonly, i8** nocapture) local_unnamed_addr #2\n\ndeclare dso_local i32 @__gxx_personality_v0(...)\n\nattributes #0 = { mustprogress nofree nounwind uwtable willreturn \"frame-pointer\"=\"none\" \"min-legal-vector-width\"=\"0\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #1 = { mustprogress nofree nosync nounwind readnone speculatable willreturn }\nattributes #2 = { mustprogress nofree nounwind willreturn \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #3 = { nounwind }\n\n!llvm.module.flags = !{!0, !1}\n!llvm.ident = !{!2}\n\n!0 = !{i32 1, !\"wchar_size\", i32 4}\n!1 = !{i32 7, !\"uwtable\", i32 1}\n!2 = !{!\"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)\"}\n!3 = !{!4, !6, i64 0}\n!4 = !{!\"_ZTSNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE\", !5, i64 0, !9, i64 8, !7, i64 16}\n!5 = !{!\"_ZTSNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderE\", !6, i64 0}\n!6 = !{!\"any pointer\", !7, i64 0}\n!7 = !{!\"omnipotent char\", !8, i64 0}\n!8 = !{!\"Simple C++ TBAA\"}\n!9 = !{!\"long\", !7, i64 0}\n", "target": "This is the targeted source code:\n/*\nCreate a function that takes a value (string) representing a number\nand returns the closest integer to it. If the number is equidistant\nfrom two integers, round it away from zero.\n\nExamples\n>>> closest_integer(\"10\")\n10\n>>> closest_integer(\"15.3\")\n15\n\nNote:\nRounding away from zero means that if the given number is equidistant\nfrom two integers, the one you should return is the one that is the\nfarthest from zero. For example closest_integer(\"14.5\") should\nreturn 15 and closest_integer(\"-14.5\") should return -15.\n*/\n#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\nint closest_integer(string value){\n\n    double w;\n    w=atof(value.c_str());\n    return round(w);\n}\n"}
{"input": "Convert this to C++:\n; ModuleID = '../../Human_xBenchmarks_164/CPP_100/CPP_100.cpp'\nsource_filename = \"../../Human_xBenchmarks_164/CPP_100/CPP_100.cpp\"\ntarget datalayout = \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\ntarget triple = \"x86_64-unknown-linux-gnu\"\n\n%\"class.std::vector\" = type { %\"struct.std::_Vector_base\" }\n%\"struct.std::_Vector_base\" = type { %\"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl\" }\n%\"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl\" = type { %\"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl_data\" }\n%\"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl_data\" = type { i32*, i32*, i32* }\n\n@.str.1 = private unnamed_addr constant [26 x i8] c\"vector::_M_realloc_insert\\00\", align 1\n\n; Function Attrs: uwtable\ndefine dso_local void @_Z11make_a_pilei(%\"class.std::vector\"* noalias nocapture sret(%\"class.std::vector\") align 8 %0, i32 %1) local_unnamed_addr #0 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {\n  %3 = bitcast %\"class.std::vector\"* %0 to i8*\n  tail call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(24) %3, i8 0, i64 24, i1 false) #6\n  %4 = call noalias nonnull i8* @_Znwm(i64 4) #7\n  %5 = bitcast i8* %4 to i32*\n  %6 = bitcast %\"class.std::vector\"* %0 to i8**\n  store i8* %4, i8** %6, align 8, !tbaa !3\n  %7 = getelementptr inbounds i8, i8* %4, i64 4\n  %8 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0, i64 0, i32 0, i32 0, i32 0, i32 2\n  %9 = bitcast i32** %8 to i8**\n  store i8* %7, i8** %9, align 8, !tbaa !8\n  store i32 %1, i32* %5, align 4\n  %10 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0, i64 0, i32 0, i32 0, i32 0, i32 1\n  %11 = bitcast i32** %10 to i8**\n  store i8* %7, i8** %11, align 8, !tbaa !9\n  %12 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0, i64 0, i32 0, i32 0, i32 0, i32 0\n  %13 = icmp sgt i32 %1, 1\n  %14 = bitcast i8* %7 to i32*\n  br i1 %13, label %15, label %73\n\n15:                                               ; preds = %2, %60\n  %16 = phi i32* [ %61, %60 ], [ %14, %2 ]\n  %17 = phi i32* [ %62, %60 ], [ %5, %2 ]\n  %18 = phi i32* [ %63, %60 ], [ %14, %2 ]\n  %19 = phi i32 [ %64, %60 ], [ 1, %2 ]\n  %20 = ptrtoint i32* %18 to i64\n  %21 = ptrtoint i32* %17 to i64\n  %22 = sub i64 %20, %21\n  %23 = ashr exact i64 %22, 2\n  %24 = add nsw i64 %23, -1\n  %25 = getelementptr inbounds i32, i32* %17, i64 %24\n  %26 = load i32, i32* %25, align 4, !tbaa !10\n  %27 = add nsw i32 %26, 2\n  %28 = icmp eq i32* %18, %16\n  br i1 %28, label %31, label %29\n\n29:                                               ; preds = %15\n  store i32 %27, i32* %18, align 4, !tbaa !10\n  %30 = getelementptr inbounds i32, i32* %18, i64 1\n  store i32* %30, i32** %10, align 8, !tbaa !9\n  br label %60\n\n31:                                               ; preds = %15\n  %32 = icmp eq i64 %22, 9223372036854775804\n  br i1 %32, label %33, label %35\n\n33:                                               ; preds = %31\n  invoke void @_ZSt20__throw_length_errorPKc(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.1, i64 0, i64 0)) #8\n          to label %34 unwind label %68\n\n34:                                               ; preds = %33\n  unreachable\n\n35:                                               ; preds = %31\n  %36 = icmp eq i64 %22, 0\n  %37 = select i1 %36, i64 1, i64 %23\n  %38 = add nsw i64 %37, %23\n  %39 = icmp ult i64 %38, %23\n  %40 = icmp ugt i64 %38, 2305843009213693951\n  %41 = or i1 %39, %40\n  %42 = select i1 %41, i64 2305843009213693951, i64 %38\n  %43 = icmp eq i64 %42, 0\n  br i1 %43, label %49, label %44\n\n44:                                               ; preds = %35\n  %45 = shl nuw nsw i64 %42, 2\n  %46 = invoke noalias nonnull i8* @_Znwm(i64 %45) #7\n          to label %47 unwind label %66\n\n47:                                               ; preds = %44\n  %48 = bitcast i8* %46 to i32*\n  br label %49\n\n49:                                               ; preds = %47, %35\n  %50 = phi i32* [ %48, %47 ], [ null, %35 ]\n  %51 = getelementptr inbounds i32, i32* %50, i64 %23\n  store i32 %27, i32* %51, align 4, !tbaa !10\n  %52 = icmp sgt i64 %22, 0\n  br i1 %52, label %53, label %56\n\n53:                                               ; preds = %49\n  %54 = bitcast i32* %50 to i8*\n  %55 = bitcast i32* %17 to i8*\n  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %54, i8* align 4 %55, i64 %22, i1 false) #6\n  br label %56\n\n56:                                               ; preds = %49, %53\n  %57 = bitcast i32* %17 to i8*\n  %58 = getelementptr inbounds i32, i32* %51, i64 1\n  tail call void @_ZdlPv(i8* nonnull %57) #6\n  store i32* %50, i32** %12, align 8, !tbaa !3\n  store i32* %58, i32** %10, align 8, !tbaa !9\n  %59 = getelementptr inbounds i32, i32* %50, i64 %42\n  store i32* %59, i32** %8, align 8, !tbaa !8\n  br label %60\n\n60:                                               ; preds = %56, %29\n  %61 = phi i32* [ %59, %56 ], [ %16, %29 ]\n  %62 = phi i32* [ %50, %56 ], [ %17, %29 ]\n  %63 = phi i32* [ %58, %56 ], [ %30, %29 ]\n  %64 = add nuw nsw i32 %19, 1\n  %65 = icmp eq i32 %64, %1\n  br i1 %65, label %73, label %15, !llvm.loop !12\n\n66:                                               ; preds = %44\n  %67 = landingpad { i8*, i32 }\n          cleanup\n  br label %70\n\n68:                                               ; preds = %33\n  %69 = landingpad { i8*, i32 }\n          cleanup\n  br label %70\n\n70:                                               ; preds = %68, %66\n  %71 = phi { i8*, i32 } [ %67, %66 ], [ %69, %68 ]\n  %72 = bitcast i32* %17 to i8*\n  tail call void @_ZdlPv(i8* nonnull %72) #6\n  resume { i8*, i32 } %71\n\n73:                                               ; preds = %60, %2\n  ret void\n}\n\ndeclare dso_local i32 @__gxx_personality_v0(...)\n\n; Function Attrs: nobuiltin allocsize(0)\ndeclare dso_local nonnull i8* @_Znwm(i64) local_unnamed_addr #1\n\n; Function Attrs: noreturn\ndeclare dso_local void @_ZSt20__throw_length_errorPKc(i8*) local_unnamed_addr #2\n\n; Function Attrs: argmemonly mustprogress nofree nounwind willreturn\ndeclare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #3\n\n; Function Attrs: nobuiltin nounwind\ndeclare dso_local void @_ZdlPv(i8*) local_unnamed_addr #4\n\n; Function Attrs: argmemonly nofree nounwind willreturn writeonly\ndeclare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #5\n\nattributes #0 = { uwtable \"frame-pointer\"=\"none\" \"min-legal-vector-width\"=\"0\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #1 = { nobuiltin allocsize(0) \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #2 = { noreturn \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #3 = { argmemonly mustprogress nofree nounwind willreturn }\nattributes #4 = { nobuiltin nounwind \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #5 = { argmemonly nofree nounwind willreturn writeonly }\nattributes #6 = { nounwind }\nattributes #7 = { allocsize(0) }\nattributes #8 = { noreturn }\n\n!llvm.module.flags = !{!0, !1}\n!llvm.ident = !{!2}\n\n!0 = !{i32 1, !\"wchar_size\", i32 4}\n!1 = !{i32 7, !\"uwtable\", i32 1}\n!2 = !{!\"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)\"}\n!3 = !{!4, !5, i64 0}\n!4 = !{!\"_ZTSNSt12_Vector_baseIiSaIiEE17_Vector_impl_dataE\", !5, i64 0, !5, i64 8, !5, i64 16}\n!5 = !{!\"any pointer\", !6, i64 0}\n!6 = !{!\"omnipotent char\", !7, i64 0}\n!7 = !{!\"Simple C++ TBAA\"}\n!8 = !{!4, !5, i64 16}\n!9 = !{!4, !5, i64 8}\n!10 = !{!11, !11, i64 0}\n!11 = !{!\"int\", !6, i64 0}\n!12 = distinct !{!12, !13}\n!13 = !{!\"llvm.loop.mustprogress\"}\n", "target": "This is the targeted source code:\n/*\nGiven a positive integer n, you have to make a pile of n levels of stones.\nThe first level has n stones.\nThe number of stones in the next level is:\n    - the next odd number if n is odd.\n    - the next even number if n is even.\nReturn the number of stones in each level in a vector, where element at index\ni represents the number of stones in the level (i+1).\n\nExamples:\n>>> make_a_pile(3)\n{3, 5, 7}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> make_a_pile(int n){\n\n    vector<int> out={n};\n    for (int i=1;i<n;i++)\n        out.push_back(out[out.size()-1]+2);\n    return out;\n}\n"}
{"input": "Convert this to C++:\n; ModuleID = '../../Human_xBenchmarks_164/CPP_101/CPP_101.cpp'\nsource_filename = \"../../Human_xBenchmarks_164/CPP_101/CPP_101.cpp\"\ntarget datalayout = \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\ntarget triple = \"x86_64-unknown-linux-gnu\"\n\n%\"class.std::vector\" = type { %\"struct.std::_Vector_base\" }\n%\"struct.std::_Vector_base\" = type { %\"struct.std::_Vector_base<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char>>>::_Vector_impl\" }\n%\"struct.std::_Vector_base<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char>>>::_Vector_impl\" = type { %\"struct.std::_Vector_base<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char>>>::_Vector_impl_data\" }\n%\"struct.std::_Vector_base<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char>>>::_Vector_impl_data\" = type { %\"class.std::__cxx11::basic_string\"*, %\"class.std::__cxx11::basic_string\"*, %\"class.std::__cxx11::basic_string\"* }\n%\"class.std::__cxx11::basic_string\" = type { %\"struct.std::__cxx11::basic_string<char>::_Alloc_hider\", i64, %union.anon }\n%\"struct.std::__cxx11::basic_string<char>::_Alloc_hider\" = type { i8* }\n%union.anon = type { i64, [8 x i8] }\n\n$_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED2Ev = comdat any\n\n$__clang_call_terminate = comdat any\n\n$_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_realloc_insertIJRKS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_ = comdat any\n\n@.str = private unnamed_addr constant [1 x i8] zeroinitializer, align 1\n@.str.2 = private unnamed_addr constant [26 x i8] c\"vector::_M_realloc_insert\\00\", align 1\n\n; Function Attrs: uwtable\ndefine dso_local void @_Z12words_stringNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE(%\"class.std::vector\"* noalias sret(%\"class.std::vector\") align 8 %0, %\"class.std::__cxx11::basic_string\"* %1) local_unnamed_addr #0 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {\n  %3 = alloca i64, align 8\n  %4 = alloca i64, align 8\n  %5 = alloca i64, align 8\n  %6 = alloca %\"class.std::__cxx11::basic_string\", align 8\n  %7 = alloca %\"class.std::__cxx11::basic_string\", align 8\n  %8 = alloca %\"class.std::__cxx11::basic_string\", align 8\n  %9 = bitcast %\"class.std::__cxx11::basic_string\"* %6 to i8*\n  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %9) #11\n  %10 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %6, i64 0, i32 2\n  %11 = bitcast %\"class.std::__cxx11::basic_string\"* %6 to %union.anon**\n  store %union.anon* %10, %union.anon** %11, align 8, !tbaa !3\n  %12 = bitcast %union.anon* %10 to i8*\n  %13 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %6, i64 0, i32 0, i32 0\n  %14 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %6, i64 0, i32 1\n  store i64 0, i64* %14, align 8, !tbaa !8\n  store i8 0, i8* %12, align 8, !tbaa !11\n  %15 = bitcast %\"class.std::__cxx11::basic_string\"* %7 to i8*\n  %16 = bitcast %\"class.std::vector\"* %0 to i8*\n  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(24) %16, i8 0, i64 24, i1 false)\n  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %15) #11\n  call void @llvm.experimental.noalias.scope.decl(metadata !12)\n  %17 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %7, i64 0, i32 2\n  %18 = bitcast %\"class.std::__cxx11::basic_string\"* %7 to %union.anon**\n  store %union.anon* %17, %union.anon** %18, align 8, !tbaa !3, !alias.scope !12\n  %19 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %1, i64 0, i32 0, i32 0\n  %20 = load i8*, i8** %19, align 8, !tbaa !15, !noalias !12\n  %21 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %1, i64 0, i32 1\n  %22 = load i64, i64* %21, align 8, !tbaa !8, !noalias !12\n  %23 = bitcast i64* %5 to i8*\n  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %23) #11, !noalias !12\n  store i64 %22, i64* %5, align 8, !tbaa !16, !noalias !12\n  %24 = icmp ugt i64 %22, 15\n  br i1 %24, label %27, label %25\n\n25:                                               ; preds = %2\n  %26 = bitcast %union.anon* %17 to i8*\n  br label %33\n\n27:                                               ; preds = %2\n  %28 = invoke i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %7, i64* nonnull align 8 dereferenceable(8) %5, i64 0)\n          to label %29 unwind label %108\n\n29:                                               ; preds = %27\n  %30 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %7, i64 0, i32 0, i32 0\n  store i8* %28, i8** %30, align 8, !tbaa !15, !alias.scope !12\n  %31 = load i64, i64* %5, align 8, !tbaa !16, !noalias !12\n  %32 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %7, i64 0, i32 2, i32 0\n  store i64 %31, i64* %32, align 8, !tbaa !11, !alias.scope !12\n  br label %33\n\n33:                                               ; preds = %29, %25\n  %34 = phi i8* [ %26, %25 ], [ %28, %29 ]\n  switch i64 %22, label %37 [\n    i64 1, label %35\n    i64 0, label %38\n  ]\n\n35:                                               ; preds = %33\n  %36 = load i8, i8* %20, align 1, !tbaa !11\n  store i8 %36, i8* %34, align 1, !tbaa !11\n  br label %38\n\n37:                                               ; preds = %33\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %34, i8* align 1 %20, i64 %22, i1 false) #11\n  br label %38\n\n38:                                               ; preds = %37, %35, %33\n  %39 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %7, i64 0, i32 0, i32 0\n  %40 = load i64, i64* %5, align 8, !tbaa !16, !noalias !12\n  %41 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %7, i64 0, i32 1\n  store i64 %40, i64* %41, align 8, !tbaa !8, !alias.scope !12\n  %42 = load i8*, i8** %39, align 8, !tbaa !15, !alias.scope !12\n  %43 = getelementptr inbounds i8, i8* %42, i64 %40\n  store i8 0, i8* %43, align 1, !tbaa !11\n  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %23) #11, !noalias !12\n  %44 = load i64, i64* %41, align 8, !tbaa !8, !alias.scope !12\n  %45 = invoke nonnull align 8 dereferenceable(32) %\"class.std::__cxx11::basic_string\"* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEmmmc(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %7, i64 %44, i64 0, i64 1, i8 signext 32)\n          to label %52 unwind label %46\n\n46:                                               ; preds = %38\n  %47 = landingpad { i8*, i32 }\n          cleanup\n  %48 = load i8*, i8** %39, align 8, !tbaa !15, !alias.scope !12\n  %49 = bitcast %union.anon* %17 to i8*\n  %50 = icmp eq i8* %48, %49\n  br i1 %50, label %110, label %51\n\n51:                                               ; preds = %46\n  call void @_ZdlPv(i8* %48) #11\n  br label %110\n\n52:                                               ; preds = %38\n  %53 = load i8*, i8** %39, align 8, !tbaa !15\n  %54 = bitcast %union.anon* %17 to i8*\n  %55 = icmp eq i8* %53, %54\n  br i1 %55, label %56, label %70\n\n56:                                               ; preds = %52\n  %57 = load i64, i64* %41, align 8, !tbaa !8\n  %58 = icmp eq i64 %57, 0\n  br i1 %58, label %65, label %59\n\n59:                                               ; preds = %56\n  %60 = load i8*, i8** %19, align 8, !tbaa !15\n  %61 = icmp eq i64 %57, 1\n  br i1 %61, label %62, label %64\n\n62:                                               ; preds = %59\n  %63 = load i8, i8* %54, align 8, !tbaa !11\n  store i8 %63, i8* %60, align 1, !tbaa !11\n  br label %65\n\n64:                                               ; preds = %59\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %60, i8* nonnull align 8 %54, i64 %57, i1 false) #11\n  br label %65\n\n65:                                               ; preds = %64, %62, %56\n  %66 = load i64, i64* %41, align 8, !tbaa !8\n  store i64 %66, i64* %21, align 8, !tbaa !8\n  %67 = load i8*, i8** %19, align 8, !tbaa !15\n  %68 = getelementptr inbounds i8, i8* %67, i64 %66\n  store i8 0, i8* %68, align 1, !tbaa !11\n  %69 = load i8*, i8** %39, align 8, !tbaa !15\n  br label %85\n\n70:                                               ; preds = %52\n  %71 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %1, i64 0, i32 2\n  %72 = bitcast %union.anon* %71 to i8*\n  %73 = load i8*, i8** %19, align 8, !tbaa !15\n  %74 = icmp eq i8* %73, %72\n  %75 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %1, i64 0, i32 2, i32 0\n  %76 = load i64, i64* %75, align 8\n  store i8* %53, i8** %19, align 8, !tbaa !15\n  %77 = bitcast i64* %41 to <2 x i64>*\n  %78 = load <2 x i64>, <2 x i64>* %77, align 8, !tbaa !11\n  %79 = bitcast i64* %21 to <2 x i64>*\n  store <2 x i64> %78, <2 x i64>* %79, align 8, !tbaa !11\n  %80 = icmp eq i8* %73, null\n  %81 = or i1 %74, %80\n  br i1 %81, label %84, label %82\n\n82:                                               ; preds = %70\n  store i8* %73, i8** %39, align 8, !tbaa !15\n  %83 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %7, i64 0, i32 2, i32 0\n  store i64 %76, i64* %83, align 8, !tbaa !11\n  br label %85\n\n84:                                               ; preds = %70\n  store %union.anon* %17, %union.anon** %18, align 8, !tbaa !15\n  br label %85\n\n85:                                               ; preds = %65, %82, %84\n  %86 = phi i8* [ %69, %65 ], [ %73, %82 ], [ %54, %84 ]\n  store i64 0, i64* %41, align 8, !tbaa !8\n  store i8 0, i8* %86, align 1, !tbaa !11\n  %87 = load i8*, i8** %39, align 8, !tbaa !15\n  %88 = icmp eq i8* %87, %54\n  br i1 %88, label %90, label %89\n\n89:                                               ; preds = %85\n  call void @_ZdlPv(i8* %87) #11\n  br label %90\n\n90:                                               ; preds = %85, %89\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %15) #11\n  %91 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0, i64 0, i32 0, i32 0, i32 0, i32 1\n  %92 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0, i64 0, i32 0, i32 0, i32 0, i32 2\n  %93 = bitcast i64* %4 to i8*\n  %94 = bitcast %\"class.std::__cxx11::basic_string\"* %8 to i8*\n  %95 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %8, i64 0, i32 2\n  %96 = bitcast %\"class.std::__cxx11::basic_string\"* %8 to %union.anon**\n  %97 = bitcast i64* %3 to i8*\n  %98 = bitcast %union.anon* %95 to i8*\n  %99 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %8, i64 0, i32 0, i32 0\n  %100 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %8, i64 0, i32 2, i32 0\n  %101 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %8, i64 0, i32 1\n  %102 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %6, i64 0, i32 2, i32 0\n  %103 = load i64, i64* %21, align 8, !tbaa !8\n  %104 = icmp eq i64 %103, 0\n  br i1 %104, label %220, label %105\n\n105:                                              ; preds = %90\n  %106 = bitcast i64* %101 to <2 x i64>*\n  %107 = bitcast i64* %14 to <2 x i64>*\n  br label %112\n\n108:                                              ; preds = %27\n  %109 = landingpad { i8*, i32 }\n          cleanup\n  br label %110\n\n110:                                              ; preds = %46, %51, %108\n  %111 = phi { i8*, i32 } [ %109, %108 ], [ %47, %51 ], [ %47, %46 ]\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %15) #11\n  br label %225\n\n112:                                              ; preds = %105, %216\n  %113 = phi i64 [ %217, %216 ], [ 0, %105 ]\n  %114 = load i8*, i8** %19, align 8, !tbaa !15\n  %115 = getelementptr inbounds i8, i8* %114, i64 %113\n  %116 = load i8, i8* %115, align 1, !tbaa !11\n  switch i8 %116, label %156 [\n    i8 32, label %117\n    i8 44, label %117\n  ]\n\n117:                                              ; preds = %112, %112\n  %118 = load i64, i64* %14, align 8, !tbaa !8\n  %119 = icmp eq i64 %118, 0\n  br i1 %119, label %216, label %120\n\n120:                                              ; preds = %117\n  %121 = load %\"class.std::__cxx11::basic_string\"*, %\"class.std::__cxx11::basic_string\"** %91, align 8, !tbaa !17\n  %122 = load %\"class.std::__cxx11::basic_string\"*, %\"class.std::__cxx11::basic_string\"** %92, align 8, !tbaa !19\n  %123 = icmp eq %\"class.std::__cxx11::basic_string\"* %121, %122\n  br i1 %123, label %150, label %124\n\n124:                                              ; preds = %120\n  %125 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %121, i64 0, i32 2\n  %126 = bitcast %\"class.std::__cxx11::basic_string\"* %121 to %union.anon**\n  store %union.anon* %125, %union.anon** %126, align 8, !tbaa !3\n  %127 = load i8*, i8** %13, align 8, !tbaa !15\n  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %93) #11\n  store i64 %118, i64* %4, align 8, !tbaa !16\n  %128 = icmp ugt i64 %118, 15\n  br i1 %128, label %129, label %135\n\n129:                                              ; preds = %124\n  %130 = invoke i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %121, i64* nonnull align 8 dereferenceable(8) %4, i64 0)\n          to label %131 unwind label %154\n\n131:                                              ; preds = %129\n  %132 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %121, i64 0, i32 0, i32 0\n  store i8* %130, i8** %132, align 8, !tbaa !15\n  %133 = load i64, i64* %4, align 8, !tbaa !16\n  %134 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %121, i64 0, i32 2, i32 0\n  store i64 %133, i64* %134, align 8, !tbaa !11\n  br label %140\n\n135:                                              ; preds = %124\n  %136 = bitcast %union.anon* %125 to i8*\n  %137 = icmp eq i64 %118, 1\n  br i1 %137, label %138, label %140\n\n138:                                              ; preds = %135\n  %139 = load i8, i8* %127, align 1, !tbaa !11\n  store i8 %139, i8* %136, align 1, !tbaa !11\n  br label %142\n\n140:                                              ; preds = %131, %135\n  %141 = phi i8* [ %130, %131 ], [ %136, %135 ]\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %141, i8* align 1 %127, i64 %118, i1 false) #11\n  br label %142\n\n142:                                              ; preds = %140, %138\n  %143 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %121, i64 0, i32 0, i32 0\n  %144 = load i64, i64* %4, align 8, !tbaa !16\n  %145 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %121, i64 0, i32 1\n  store i64 %144, i64* %145, align 8, !tbaa !8\n  %146 = load i8*, i8** %143, align 8, !tbaa !15\n  %147 = getelementptr inbounds i8, i8* %146, i64 %144\n  store i8 0, i8* %147, align 1, !tbaa !11\n  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %93) #11\n  %148 = load %\"class.std::__cxx11::basic_string\"*, %\"class.std::__cxx11::basic_string\"** %91, align 8, !tbaa !17\n  %149 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %148, i64 1\n  store %\"class.std::__cxx11::basic_string\"* %149, %\"class.std::__cxx11::basic_string\"** %91, align 8, !tbaa !17\n  br label %151\n\n150:                                              ; preds = %120\n  invoke void @_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_realloc_insertIJRKS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_(%\"class.std::vector\"* nonnull align 8 dereferenceable(24) %0, %\"class.std::__cxx11::basic_string\"* %121, %\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %6)\n          to label %151 unwind label %154\n\n151:                                              ; preds = %142, %150\n  %152 = load i64, i64* %14, align 8, !tbaa !8\n  %153 = invoke nonnull align 8 dereferenceable(32) %\"class.std::__cxx11::basic_string\"* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %6, i64 0, i64 %152, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str, i64 0, i64 0), i64 0)\n          to label %216 unwind label %154\n\n154:                                              ; preds = %151, %150, %129\n  %155 = landingpad { i8*, i32 }\n          cleanup\n  br label %225\n\n156:                                              ; preds = %112\n  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %94) #11\n  call void @llvm.experimental.noalias.scope.decl(metadata !20)\n  store %union.anon* %95, %union.anon** %96, align 8, !tbaa !3, !alias.scope !20\n  %157 = load i8*, i8** %13, align 8, !tbaa !15, !noalias !20\n  %158 = load i64, i64* %14, align 8, !tbaa !8, !noalias !20\n  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %97) #11, !noalias !20\n  store i64 %158, i64* %3, align 8, !tbaa !16, !noalias !20\n  %159 = icmp ugt i64 %158, 15\n  br i1 %159, label %160, label %164\n\n160:                                              ; preds = %156\n  %161 = invoke i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %8, i64* nonnull align 8 dereferenceable(8) %3, i64 0)\n          to label %162 unwind label %212\n\n162:                                              ; preds = %160\n  store i8* %161, i8** %99, align 8, !tbaa !15, !alias.scope !20\n  %163 = load i64, i64* %3, align 8, !tbaa !16, !noalias !20\n  store i64 %163, i64* %100, align 8, !tbaa !11, !alias.scope !20\n  br label %164\n\n164:                                              ; preds = %156, %162\n  %165 = phi i8* [ %161, %162 ], [ %98, %156 ]\n  switch i64 %158, label %168 [\n    i64 1, label %166\n    i64 0, label %169\n  ]\n\n166:                                              ; preds = %164\n  %167 = load i8, i8* %157, align 1, !tbaa !11\n  store i8 %167, i8* %165, align 1, !tbaa !11\n  br label %169\n\n168:                                              ; preds = %164\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %165, i8* align 1 %157, i64 %158, i1 false) #11\n  br label %169\n\n169:                                              ; preds = %168, %166, %164\n  %170 = load i64, i64* %3, align 8, !tbaa !16, !noalias !20\n  store i64 %170, i64* %101, align 8, !tbaa !8, !alias.scope !20\n  %171 = load i8*, i8** %99, align 8, !tbaa !15, !alias.scope !20\n  %172 = getelementptr inbounds i8, i8* %171, i64 %170\n  store i8 0, i8* %172, align 1, !tbaa !11\n  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %97) #11, !noalias !20\n  %173 = load i64, i64* %101, align 8, !tbaa !8, !alias.scope !20\n  %174 = invoke nonnull align 8 dereferenceable(32) %\"class.std::__cxx11::basic_string\"* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEmmmc(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %8, i64 %173, i64 0, i64 1, i8 signext %116)\n          to label %180 unwind label %175\n\n175:                                              ; preds = %169\n  %176 = landingpad { i8*, i32 }\n          cleanup\n  %177 = load i8*, i8** %99, align 8, !tbaa !15, !alias.scope !20\n  %178 = icmp eq i8* %177, %98\n  br i1 %178, label %214, label %179\n\n179:                                              ; preds = %175\n  call void @_ZdlPv(i8* %177) #11\n  br label %214\n\n180:                                              ; preds = %169\n  %181 = load i8*, i8** %99, align 8, !tbaa !15\n  %182 = icmp eq i8* %181, %98\n  br i1 %182, label %183, label %197\n\n183:                                              ; preds = %180\n  %184 = load i64, i64* %101, align 8, !tbaa !8\n  %185 = icmp eq i64 %184, 0\n  br i1 %185, label %192, label %186\n\n186:                                              ; preds = %183\n  %187 = load i8*, i8** %13, align 8, !tbaa !15\n  %188 = icmp eq i64 %184, 1\n  br i1 %188, label %189, label %191\n\n189:                                              ; preds = %186\n  %190 = load i8, i8* %98, align 8, !tbaa !11\n  store i8 %190, i8* %187, align 1, !tbaa !11\n  br label %192\n\n191:                                              ; preds = %186\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %187, i8* nonnull align 8 %98, i64 %184, i1 false) #11\n  br label %192\n\n192:                                              ; preds = %191, %189, %183\n  %193 = load i64, i64* %101, align 8, !tbaa !8\n  store i64 %193, i64* %14, align 8, !tbaa !8\n  %194 = load i8*, i8** %13, align 8, !tbaa !15\n  %195 = getelementptr inbounds i8, i8* %194, i64 %193\n  store i8 0, i8* %195, align 1, !tbaa !11\n  %196 = load i8*, i8** %99, align 8, !tbaa !15\n  br label %206\n\n197:                                              ; preds = %180\n  %198 = load i8*, i8** %13, align 8, !tbaa !15\n  %199 = icmp eq i8* %198, %12\n  %200 = load i64, i64* %102, align 8\n  store i8* %181, i8** %13, align 8, !tbaa !15\n  %201 = load <2 x i64>, <2 x i64>* %106, align 8, !tbaa !11\n  store <2 x i64> %201, <2 x i64>* %107, align 8, !tbaa !11\n  %202 = icmp eq i8* %198, null\n  %203 = or i1 %199, %202\n  br i1 %203, label %205, label %204\n\n204:                                              ; preds = %197\n  store i8* %198, i8** %99, align 8, !tbaa !15\n  store i64 %200, i64* %100, align 8, !tbaa !11\n  br label %206\n\n205:                                              ; preds = %197\n  store %union.anon* %95, %union.anon** %96, align 8, !tbaa !15\n  br label %206\n\n206:                                              ; preds = %192, %204, %205\n  %207 = phi i8* [ %196, %192 ], [ %198, %204 ], [ %98, %205 ]\n  store i64 0, i64* %101, align 8, !tbaa !8\n  store i8 0, i8* %207, align 1, !tbaa !11\n  %208 = load i8*, i8** %99, align 8, !tbaa !15\n  %209 = icmp eq i8* %208, %98\n  br i1 %209, label %211, label %210\n\n210:                                              ; preds = %206\n  call void @_ZdlPv(i8* %208) #11\n  br label %211\n\n211:                                              ; preds = %206, %210\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %94) #11\n  br label %216\n\n212:                                              ; preds = %160\n  %213 = landingpad { i8*, i32 }\n          cleanup\n  br label %214\n\n214:                                              ; preds = %175, %179, %212\n  %215 = phi { i8*, i32 } [ %213, %212 ], [ %176, %179 ], [ %176, %175 ]\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %94) #11\n  br label %225\n\n216:                                              ; preds = %151, %211, %117\n  %217 = add nuw i64 %113, 1\n  %218 = load i64, i64* %21, align 8, !tbaa !8\n  %219 = icmp ugt i64 %218, %217\n  br i1 %219, label %112, label %220, !llvm.loop !23\n\n220:                                              ; preds = %216, %90\n  %221 = load i8*, i8** %13, align 8, !tbaa !15\n  %222 = icmp eq i8* %221, %12\n  br i1 %222, label %224, label %223\n\n223:                                              ; preds = %220\n  call void @_ZdlPv(i8* %221) #11\n  br label %224\n\n224:                                              ; preds = %220, %223\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %9) #11\n  ret void\n\n225:                                              ; preds = %154, %214, %110\n  %226 = phi { i8*, i32 } [ %111, %110 ], [ %155, %154 ], [ %215, %214 ]\n  call void @_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED2Ev(%\"class.std::vector\"* nonnull align 8 dereferenceable(24) %0) #11\n  %227 = load i8*, i8** %13, align 8, !tbaa !15\n  %228 = icmp eq i8* %227, %12\n  br i1 %228, label %230, label %229\n\n229:                                              ; preds = %225\n  call void @_ZdlPv(i8* %227) #11\n  br label %230\n\n230:                                              ; preds = %229, %225\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %9) #11\n  resume { i8*, i32 } %226\n}\n\n; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn\ndeclare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1\n\ndeclare dso_local i32 @__gxx_personality_v0(...)\n\n; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn\ndeclare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1\n\n; Function Attrs: argmemonly mustprogress nofree nounwind willreturn writeonly\ndeclare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2\n\n; Function Attrs: nounwind uwtable\ndefine linkonce_odr dso_local void @_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED2Ev(%\"class.std::vector\"* nonnull align 8 dereferenceable(24) %0) unnamed_addr #3 comdat align 2 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {\n  %2 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0, i64 0, i32 0, i32 0, i32 0, i32 0\n  %3 = load %\"class.std::__cxx11::basic_string\"*, %\"class.std::__cxx11::basic_string\"** %2, align 8, !tbaa !25\n  %4 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0, i64 0, i32 0, i32 0, i32 0, i32 1\n  %5 = load %\"class.std::__cxx11::basic_string\"*, %\"class.std::__cxx11::basic_string\"** %4, align 8, !tbaa !17\n  %6 = icmp eq %\"class.std::__cxx11::basic_string\"* %3, %5\n  br i1 %6, label %20, label %7\n\n7:                                                ; preds = %1, %15\n  %8 = phi %\"class.std::__cxx11::basic_string\"* [ %16, %15 ], [ %3, %1 ]\n  %9 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %8, i64 0, i32 0, i32 0\n  %10 = load i8*, i8** %9, align 8, !tbaa !15\n  %11 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %8, i64 0, i32 2\n  %12 = bitcast %union.anon* %11 to i8*\n  %13 = icmp eq i8* %10, %12\n  br i1 %13, label %15, label %14\n\n14:                                               ; preds = %7\n  tail call void @_ZdlPv(i8* %10) #11\n  br label %15\n\n15:                                               ; preds = %14, %7\n  %16 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %8, i64 1\n  %17 = icmp eq %\"class.std::__cxx11::basic_string\"* %16, %5\n  br i1 %17, label %18, label %7, !llvm.loop !26\n\n18:                                               ; preds = %15\n  %19 = load %\"class.std::__cxx11::basic_string\"*, %\"class.std::__cxx11::basic_string\"** %2, align 8, !tbaa !25\n  br label %20\n\n20:                                               ; preds = %18, %1\n  %21 = phi %\"class.std::__cxx11::basic_string\"* [ %19, %18 ], [ %3, %1 ]\n  %22 = icmp eq %\"class.std::__cxx11::basic_string\"* %21, null\n  br i1 %22, label %25, label %23\n\n23:                                               ; preds = %20\n  %24 = bitcast %\"class.std::__cxx11::basic_string\"* %21 to i8*\n  tail call void @_ZdlPv(i8* nonnull %24) #11\n  br label %25\n\n25:                                               ; preds = %20, %23\n  ret void\n}\n\n; Function Attrs: noinline noreturn nounwind\ndefine linkonce_odr hidden void @__clang_call_terminate(i8* %0) local_unnamed_addr #4 comdat {\n  %2 = tail call i8* @__cxa_begin_catch(i8* %0) #11\n  tail call void @_ZSt9terminatev() #12\n  unreachable\n}\n\ndeclare dso_local i8* @__cxa_begin_catch(i8*) local_unnamed_addr\n\ndeclare dso_local void @_ZSt9terminatev() local_unnamed_addr\n\n; Function Attrs: nobuiltin nounwind\ndeclare dso_local void @_ZdlPv(i8*) local_unnamed_addr #5\n\ndeclare dso_local i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32), i64* nonnull align 8 dereferenceable(8), i64) local_unnamed_addr #6\n\n; Function Attrs: argmemonly mustprogress nofree nounwind willreturn\ndeclare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #7\n\ndeclare dso_local nonnull align 8 dereferenceable(32) %\"class.std::__cxx11::basic_string\"* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEmmmc(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32), i64, i64, i64, i8 signext) local_unnamed_addr #6\n\n; Function Attrs: uwtable\ndefine linkonce_odr dso_local void @_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_realloc_insertIJRKS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_(%\"class.std::vector\"* nonnull align 8 dereferenceable(24) %0, %\"class.std::__cxx11::basic_string\"* %1, %\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %2) local_unnamed_addr #0 comdat align 2 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {\n  %4 = alloca i64, align 8\n  %5 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0, i64 0, i32 0, i32 0, i32 0, i32 1\n  %6 = load %\"class.std::__cxx11::basic_string\"*, %\"class.std::__cxx11::basic_string\"** %5, align 8, !tbaa !17\n  %7 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0, i64 0, i32 0, i32 0, i32 0, i32 0\n  %8 = load %\"class.std::__cxx11::basic_string\"*, %\"class.std::__cxx11::basic_string\"** %7, align 8, !tbaa !25\n  %9 = ptrtoint %\"class.std::__cxx11::basic_string\"* %6 to i64\n  %10 = ptrtoint %\"class.std::__cxx11::basic_string\"* %8 to i64\n  %11 = sub i64 %9, %10\n  %12 = ashr exact i64 %11, 5\n  %13 = icmp eq i64 %11, 9223372036854775776\n  br i1 %13, label %14, label %15\n\n14:                                               ; preds = %3\n  tail call void @_ZSt20__throw_length_errorPKc(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.2, i64 0, i64 0)) #13\n  unreachable\n\n15:                                               ; preds = %3\n  %16 = icmp eq i64 %11, 0\n  %17 = select i1 %16, i64 1, i64 %12\n  %18 = add nsw i64 %17, %12\n  %19 = icmp ult i64 %18, %12\n  %20 = icmp ugt i64 %18, 288230376151711743\n  %21 = or i1 %19, %20\n  %22 = select i1 %21, i64 288230376151711743, i64 %18\n  %23 = ptrtoint %\"class.std::__cxx11::basic_string\"* %1 to i64\n  %24 = sub i64 %23, %10\n  %25 = ashr exact i64 %24, 5\n  %26 = icmp eq i64 %22, 0\n  br i1 %26, label %31, label %27\n\n27:                                               ; preds = %15\n  %28 = shl nuw nsw i64 %22, 5\n  %29 = tail call noalias nonnull i8* @_Znwm(i64 %28) #14\n  %30 = bitcast i8* %29 to %\"class.std::__cxx11::basic_string\"*\n  br label %31\n\n31:                                               ; preds = %15, %27\n  %32 = phi %\"class.std::__cxx11::basic_string\"* [ %30, %27 ], [ null, %15 ]\n  %33 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %32, i64 %25\n  %34 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %32, i64 %25, i32 2\n  %35 = bitcast %\"class.std::__cxx11::basic_string\"* %33 to %union.anon**\n  store %union.anon* %34, %union.anon** %35, align 8, !tbaa !3\n  %36 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %2, i64 0, i32 0, i32 0\n  %37 = load i8*, i8** %36, align 8, !tbaa !15\n  %38 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %2, i64 0, i32 1\n  %39 = load i64, i64* %38, align 8, !tbaa !8\n  %40 = bitcast i64* %4 to i8*\n  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %40) #11\n  store i64 %39, i64* %4, align 8, !tbaa !16\n  %41 = icmp ugt i64 %39, 15\n  br i1 %41, label %44, label %42\n\n42:                                               ; preds = %31\n  %43 = bitcast %union.anon* %34 to i8*\n  br label %50\n\n44:                                               ; preds = %31\n  %45 = invoke i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %33, i64* nonnull align 8 dereferenceable(8) %4, i64 0)\n          to label %46 unwind label %126\n\n46:                                               ; preds = %44\n  %47 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %33, i64 0, i32 0, i32 0\n  store i8* %45, i8** %47, align 8, !tbaa !15\n  %48 = load i64, i64* %4, align 8, !tbaa !16\n  %49 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %32, i64 %25, i32 2, i32 0\n  store i64 %48, i64* %49, align 8, !tbaa !11\n  br label %50\n\n50:                                               ; preds = %46, %42\n  %51 = phi i8* [ %43, %42 ], [ %45, %46 ]\n  switch i64 %39, label %54 [\n    i64 1, label %52\n    i64 0, label %55\n  ]\n\n52:                                               ; preds = %50\n  %53 = load i8, i8* %37, align 1, !tbaa !11\n  store i8 %53, i8* %51, align 1, !tbaa !11\n  br label %55\n\n54:                                               ; preds = %50\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %51, i8* align 1 %37, i64 %39, i1 false) #11\n  br label %55\n\n55:                                               ; preds = %54, %52, %50\n  %56 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %33, i64 0, i32 0, i32 0\n  %57 = load i64, i64* %4, align 8, !tbaa !16\n  %58 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %32, i64 %25, i32 1\n  store i64 %57, i64* %58, align 8, !tbaa !8\n  %59 = load i8*, i8** %56, align 8, !tbaa !15\n  %60 = getelementptr inbounds i8, i8* %59, i64 %57\n  store i8 0, i8* %60, align 1, !tbaa !11\n  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %40) #11\n  %61 = icmp eq %\"class.std::__cxx11::basic_string\"* %8, %1\n  br i1 %61, label %87, label %62\n\n62:                                               ; preds = %55, %79\n  %63 = phi %\"class.std::__cxx11::basic_string\"* [ %85, %79 ], [ %32, %55 ]\n  %64 = phi %\"class.std::__cxx11::basic_string\"* [ %84, %79 ], [ %8, %55 ]\n  %65 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %63, i64 0, i32 2\n  %66 = bitcast %\"class.std::__cxx11::basic_string\"* %63 to %union.anon**\n  store %union.anon* %65, %union.anon** %66, align 8, !tbaa !3\n  %67 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %64, i64 0, i32 0, i32 0\n  %68 = load i8*, i8** %67, align 8, !tbaa !15\n  %69 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %64, i64 0, i32 2\n  %70 = bitcast %union.anon* %69 to i8*\n  %71 = icmp eq i8* %68, %70\n  br i1 %71, label %72, label %74\n\n72:                                               ; preds = %62\n  %73 = bitcast %union.anon* %65 to i8*\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(16) %73, i8* noundef nonnull align 8 dereferenceable(16) %68, i64 16, i1 false) #11\n  br label %79\n\n74:                                               ; preds = %62\n  %75 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %63, i64 0, i32 0, i32 0\n  store i8* %68, i8** %75, align 8, !tbaa !15\n  %76 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %64, i64 0, i32 2, i32 0\n  %77 = load i64, i64* %76, align 8, !tbaa !11\n  %78 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %63, i64 0, i32 2, i32 0\n  store i64 %77, i64* %78, align 8, !tbaa !11\n  br label %79\n\n79:                                               ; preds = %74, %72\n  %80 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %64, i64 0, i32 1\n  %81 = load i64, i64* %80, align 8, !tbaa !8\n  %82 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %63, i64 0, i32 1\n  store i64 %81, i64* %82, align 8, !tbaa !8\n  %83 = bitcast %\"class.std::__cxx11::basic_string\"* %64 to %union.anon**\n  store %union.anon* %69, %union.anon** %83, align 8, !tbaa !15\n  store i64 0, i64* %80, align 8, !tbaa !8\n  store i8 0, i8* %70, align 8, !tbaa !11\n  %84 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %64, i64 1\n  %85 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %63, i64 1\n  %86 = icmp eq %\"class.std::__cxx11::basic_string\"* %84, %1\n  br i1 %86, label %87, label %62, !llvm.loop !27\n\n87:                                               ; preds = %79, %55\n  %88 = phi %\"class.std::__cxx11::basic_string\"* [ %32, %55 ], [ %85, %79 ]\n  %89 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %88, i64 1\n  %90 = icmp eq %\"class.std::__cxx11::basic_string\"* %6, %1\n  br i1 %90, label %116, label %91\n\n91:                                               ; preds = %87, %108\n  %92 = phi %\"class.std::__cxx11::basic_string\"* [ %114, %108 ], [ %89, %87 ]\n  %93 = phi %\"class.std::__cxx11::basic_string\"* [ %113, %108 ], [ %1, %87 ]\n  %94 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %92, i64 0, i32 2\n  %95 = bitcast %\"class.std::__cxx11::basic_string\"* %92 to %union.anon**\n  store %union.anon* %94, %union.anon** %95, align 8, !tbaa !3\n  %96 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %93, i64 0, i32 0, i32 0\n  %97 = load i8*, i8** %96, align 8, !tbaa !15\n  %98 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %93, i64 0, i32 2\n  %99 = bitcast %union.anon* %98 to i8*\n  %100 = icmp eq i8* %97, %99\n  br i1 %100, label %101, label %103\n\n101:                                              ; preds = %91\n  %102 = bitcast %union.anon* %94 to i8*\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(16) %102, i8* noundef nonnull align 8 dereferenceable(16) %97, i64 16, i1 false) #11\n  br label %108\n\n103:                                              ; preds = %91\n  %104 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %92, i64 0, i32 0, i32 0\n  store i8* %97, i8** %104, align 8, !tbaa !15\n  %105 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %93, i64 0, i32 2, i32 0\n  %106 = load i64, i64* %105, align 8, !tbaa !11\n  %107 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %92, i64 0, i32 2, i32 0\n  store i64 %106, i64* %107, align 8, !tbaa !11\n  br label %108\n\n108:                                              ; preds = %103, %101\n  %109 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %93, i64 0, i32 1\n  %110 = load i64, i64* %109, align 8, !tbaa !8\n  %111 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %92, i64 0, i32 1\n  store i64 %110, i64* %111, align 8, !tbaa !8\n  %112 = bitcast %\"class.std::__cxx11::basic_string\"* %93 to %union.anon**\n  store %union.anon* %98, %union.anon** %112, align 8, !tbaa !15\n  store i64 0, i64* %109, align 8, !tbaa !8\n  store i8 0, i8* %99, align 8, !tbaa !11\n  %113 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %93, i64 1\n  %114 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %92, i64 1\n  %115 = icmp eq %\"class.std::__cxx11::basic_string\"* %113, %6\n  br i1 %115, label %116, label %91, !llvm.loop !27\n\n116:                                              ; preds = %108, %87\n  %117 = phi %\"class.std::__cxx11::basic_string\"* [ %89, %87 ], [ %114, %108 ]\n  %118 = icmp eq %\"class.std::__cxx11::basic_string\"* %8, null\n  br i1 %118, label %121, label %119\n\n119:                                              ; preds = %116\n  %120 = bitcast %\"class.std::__cxx11::basic_string\"* %8 to i8*\n  call void @_ZdlPv(i8* nonnull %120) #11\n  br label %121\n\n121:                                              ; preds = %116, %119\n  %122 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0, i64 0, i32 0, i32 0, i32 0, i32 2\n  store %\"class.std::__cxx11::basic_string\"* %32, %\"class.std::__cxx11::basic_string\"** %7, align 8, !tbaa !25\n  store %\"class.std::__cxx11::basic_string\"* %117, %\"class.std::__cxx11::basic_string\"** %5, align 8, !tbaa !17\n  %123 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %32, i64 %22\n  store %\"class.std::__cxx11::basic_string\"* %123, %\"class.std::__cxx11::basic_string\"** %122, align 8, !tbaa !19\n  ret void\n\n124:                                              ; preds = %126\n  %125 = landingpad { i8*, i32 }\n          cleanup\n  invoke void @__cxa_end_catch()\n          to label %131 unwind label %132\n\n126:                                              ; preds = %44\n  %127 = landingpad { i8*, i32 }\n          catch i8* null\n  %128 = extractvalue { i8*, i32 } %127, 0\n  %129 = call i8* @__cxa_begin_catch(i8* %128) #11\n  %130 = bitcast %\"class.std::__cxx11::basic_string\"* %32 to i8*\n  call void @_ZdlPv(i8* nonnull %130) #11\n  invoke void @__cxa_rethrow() #13\n          to label %135 unwind label %124\n\n131:                                              ; preds = %124\n  resume { i8*, i32 } %125\n\n132:                                              ; preds = %124\n  %133 = landingpad { i8*, i32 }\n          catch i8* null\n  %134 = extractvalue { i8*, i32 } %133, 0\n  call void @__clang_call_terminate(i8* %134) #12\n  unreachable\n\n135:                                              ; preds = %126\n  unreachable\n}\n\ndeclare dso_local void @__cxa_rethrow() local_unnamed_addr\n\ndeclare dso_local void @__cxa_end_catch() local_unnamed_addr\n\n; Function Attrs: noreturn\ndeclare dso_local void @_ZSt20__throw_length_errorPKc(i8*) local_unnamed_addr #8\n\n; Function Attrs: nobuiltin allocsize(0)\ndeclare dso_local nonnull i8* @_Znwm(i64) local_unnamed_addr #9\n\ndeclare dso_local nonnull align 8 dereferenceable(32) %\"class.std::__cxx11::basic_string\"* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32), i64, i64, i8*, i64) local_unnamed_addr #6\n\n; Function Attrs: inaccessiblememonly nofree nosync nounwind willreturn\ndeclare void @llvm.experimental.noalias.scope.decl(metadata) #10\n\nattributes #0 = { uwtable \"frame-pointer\"=\"none\" \"min-legal-vector-width\"=\"0\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #1 = { argmemonly mustprogress nofree nosync nounwind willreturn }\nattributes #2 = { argmemonly mustprogress nofree nounwind willreturn writeonly }\nattributes #3 = { nounwind uwtable \"frame-pointer\"=\"none\" \"min-legal-vector-width\"=\"0\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #4 = { noinline noreturn nounwind }\nattributes #5 = { nobuiltin nounwind \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #6 = { \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #7 = { argmemonly mustprogress nofree nounwind willreturn }\nattributes #8 = { noreturn \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #9 = { nobuiltin allocsize(0) \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #10 = { inaccessiblememonly nofree nosync nounwind willreturn }\nattributes #11 = { nounwind }\nattributes #12 = { noreturn nounwind }\nattributes #13 = { noreturn }\nattributes #14 = { allocsize(0) }\n\n!llvm.module.flags = !{!0, !1}\n!llvm.ident = !{!2}\n\n!0 = !{i32 1, !\"wchar_size\", i32 4}\n!1 = !{i32 7, !\"uwtable\", i32 1}\n!2 = !{!\"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)\"}\n!3 = !{!4, !5, i64 0}\n!4 = !{!\"_ZTSNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderE\", !5, i64 0}\n!5 = !{!\"any pointer\", !6, i64 0}\n!6 = !{!\"omnipotent char\", !7, i64 0}\n!7 = !{!\"Simple C++ TBAA\"}\n!8 = !{!9, !10, i64 8}\n!9 = !{!\"_ZTSNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE\", !4, i64 0, !10, i64 8, !6, i64 16}\n!10 = !{!\"long\", !6, i64 0}\n!11 = !{!6, !6, i64 0}\n!12 = !{!13}\n!13 = distinct !{!13, !14, !\"_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_S5_: argument 0\"}\n!14 = distinct !{!14, !\"_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_S5_\"}\n!15 = !{!9, !5, i64 0}\n!16 = !{!10, !10, i64 0}\n!17 = !{!18, !5, i64 8}\n!18 = !{!\"_ZTSNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_Vector_impl_dataE\", !5, i64 0, !5, i64 8, !5, i64 16}\n!19 = !{!18, !5, i64 16}\n!20 = !{!21}\n!21 = distinct !{!21, !22, !\"_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_S5_: argument 0\"}\n!22 = distinct !{!22, !\"_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_S5_\"}\n!23 = distinct !{!23, !24}\n!24 = !{!\"llvm.loop.mustprogress\"}\n!25 = !{!18, !5, i64 0}\n!26 = distinct !{!26, !24}\n!27 = distinct !{!27, !24}\n", "target": "This is the targeted source code:\n/*\nYou will be given a string of words separated by commas or spaces. Your task is\nto split the string into words and return a vector of the words.\n\nFor example:\nwords_string(\"Hi, my name is John\") == {\"Hi\", \"my\", \"name\", \"is\", \"John\"}\nwords_string(\"One, two, three, four, five, six\") == {\"One\", 'two\", 'three\", \"four\", \"five\", 'six\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> words_string(string s){\n\n    string current=\"\";\n    vector<string> out={};\n    s=s+' ';\n    for (int i=0;i<s.length();i++)\n     if (s[i]==' ' or s[i]==',')\n     {\n        if (current.length()>0)\n        {\n            out.push_back(current);\n            current=\"\";\n        }\n     }\n     else current=current+s[i];\n     return out;\n}\n"}
{"input": "Convert this to C++:\n; ModuleID = '../../Human_xBenchmarks_164/CPP_102/CPP_102.cpp'\nsource_filename = \"../../Human_xBenchmarks_164/CPP_102/CPP_102.cpp\"\ntarget datalayout = \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\ntarget triple = \"x86_64-unknown-linux-gnu\"\n\n; Function Attrs: mustprogress nofree norecurse nosync nounwind readnone uwtable willreturn\ndefine dso_local i32 @_Z10choose_numii(i32 %0, i32 %1) local_unnamed_addr #0 {\n  %3 = icmp slt i32 %1, %0\n  br i1 %3, label %12, label %4\n\n4:                                                ; preds = %2\n  %5 = icmp eq i32 %1, %0\n  %6 = srem i32 %1, 2\n  %7 = icmp eq i32 %6, 1\n  %8 = and i1 %5, %7\n  br i1 %8, label %12, label %9\n\n9:                                                ; preds = %4\n  %10 = sext i1 %7 to i32\n  %11 = add nsw i32 %10, %1\n  br label %12\n\n12:                                               ; preds = %9, %4, %2\n  %13 = phi i32 [ -1, %2 ], [ -1, %4 ], [ %11, %9 ]\n  ret i32 %13\n}\n\nattributes #0 = { mustprogress nofree norecurse nosync nounwind readnone uwtable willreturn \"frame-pointer\"=\"none\" \"min-legal-vector-width\"=\"0\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\n\n!llvm.module.flags = !{!0, !1}\n!llvm.ident = !{!2}\n\n!0 = !{i32 1, !\"wchar_size\", i32 4}\n!1 = !{i32 7, !\"uwtable\", i32 1}\n!2 = !{!\"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)\"}\n", "target": "This is the targeted source code:\n/*\nThis function takes two positive numbers x and y and returns the\nbiggest even integer number that is in the range [x, y] inclusive. If \nthere's no such number, then the function should return -1.\n\nFor example:\nchoose_num(12, 15) = 14\nchoose_num(13, 12) = -1\n*/\n#include<stdio.h>\nusing namespace std;\nint choose_num(int x,int y){\n\n    if (y<x) return -1;\n    if (y==x and y%2==1) return -1;\n    if (y%2==1) return y-1;\n    return y;\n}\n"}
{"input": "Convert this to C++:\n; ModuleID = '../../Human_xBenchmarks_164/CPP_103/CPP_103.cpp'\nsource_filename = \"../../Human_xBenchmarks_164/CPP_103/CPP_103.cpp\"\ntarget datalayout = \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\ntarget triple = \"x86_64-unknown-linux-gnu\"\n\n%\"class.std::__cxx11::basic_string\" = type { %\"struct.std::__cxx11::basic_string<char>::_Alloc_hider\", i64, %union.anon }\n%\"struct.std::__cxx11::basic_string<char>::_Alloc_hider\" = type { i8* }\n%union.anon = type { i64, [8 x i8] }\n%struct.__va_list_tag = type { i32, i32, i8*, i8* }\n\n$_ZN9__gnu_cxx12__to_xstringINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcEET_PFiPT0_mPKS8_P13__va_list_tagEmSB_z = comdat any\n\n@.str.2 = private unnamed_addr constant [3 x i8] c\"%d\\00\", align 1\n\n; Function Attrs: uwtable\ndefine dso_local void @_Z11rounded_avgB5cxx11ii(%\"class.std::__cxx11::basic_string\"* noalias sret(%\"class.std::__cxx11::basic_string\") align 8 %0, i32 %1, i32 %2) local_unnamed_addr #0 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {\n  %4 = alloca %\"class.std::__cxx11::basic_string\", align 8\n  %5 = alloca %\"class.std::__cxx11::basic_string\", align 8\n  %6 = alloca %\"class.std::__cxx11::basic_string\", align 8\n  %7 = icmp sgt i32 %1, %2\n  br i1 %7, label %8, label %15\n\n8:                                                ; preds = %3\n  %9 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 2\n  %10 = bitcast %\"class.std::__cxx11::basic_string\"* %0 to %union.anon**\n  store %union.anon* %9, %union.anon** %10, align 8, !tbaa !3\n  %11 = bitcast %union.anon* %9 to i16*\n  store i16 12589, i16* %11, align 8\n  %12 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 1\n  store i64 2, i64* %12, align 8, !tbaa !8\n  %13 = bitcast %union.anon* %9 to i8*\n  %14 = getelementptr inbounds i8, i8* %13, i64 2\n  store i8 0, i8* %14, align 2, !tbaa !11\n  br label %128\n\n15:                                               ; preds = %3\n  %16 = bitcast %\"class.std::__cxx11::basic_string\"* %4 to i8*\n  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %16) #8\n  %17 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %4, i64 0, i32 2\n  %18 = bitcast %\"class.std::__cxx11::basic_string\"* %4 to %union.anon**\n  store %union.anon* %17, %union.anon** %18, align 8, !tbaa !3\n  %19 = bitcast %union.anon* %17 to i8*\n  %20 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %4, i64 0, i32 0, i32 0\n  %21 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %4, i64 0, i32 1\n  store i64 0, i64* %21, align 8, !tbaa !8\n  store i8 0, i8* %19, align 8, !tbaa !11\n  %22 = add nsw i32 %2, %1\n  %23 = bitcast %\"class.std::__cxx11::basic_string\"* %5 to i8*\n  %24 = bitcast %\"class.std::__cxx11::basic_string\"* %6 to i8*\n  %25 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %5, i64 0, i32 2\n  %26 = bitcast %\"class.std::__cxx11::basic_string\"* %5 to %union.anon**\n  %27 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %5, i64 0, i32 0, i32 0\n  %28 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %5, i64 0, i32 2, i32 0\n  %29 = bitcast %union.anon* %25 to i8*\n  %30 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %5, i64 0, i32 1\n  %31 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %4, i64 0, i32 2, i32 0\n  %32 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %6, i64 0, i32 0, i32 0\n  %33 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %6, i64 0, i32 2\n  %34 = bitcast %union.anon* %33 to i8*\n  %35 = icmp sgt i32 %22, 1\n  br i1 %35, label %36, label %39\n\n36:                                               ; preds = %15\n  %37 = bitcast i64* %30 to <2 x i64>*\n  %38 = bitcast i64* %21 to <2 x i64>*\n  br label %42\n\n39:                                               ; preds = %15\n  %40 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 2\n  %41 = bitcast %\"class.std::__cxx11::basic_string\"* %0 to %union.anon**\n  store %union.anon* %40, %union.anon** %41, align 8, !tbaa !3\n  br label %117\n\n42:                                               ; preds = %36, %98\n  %43 = phi i32 [ %44, %98 ], [ %22, %36 ]\n  %44 = sdiv i32 %43, 2\n  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %23) #8\n  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %24) #8\n  %45 = srem i32 %44, 2\n  invoke void (%\"class.std::__cxx11::basic_string\"*, i32 (i8*, i64, i8*, %struct.__va_list_tag*)*, i64, i8*, ...) @_ZN9__gnu_cxx12__to_xstringINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcEET_PFiPT0_mPKS8_P13__va_list_tagEmSB_z(%\"class.std::__cxx11::basic_string\"* nonnull sret(%\"class.std::__cxx11::basic_string\") align 8 %6, i32 (i8*, i64, i8*, %struct.__va_list_tag*)* nonnull @vsnprintf, i64 16, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i64 0, i64 0), i32 %45)\n          to label %46 unwind label %100\n\n46:                                               ; preds = %42\n  call void @llvm.experimental.noalias.scope.decl(metadata !12)\n  %47 = load i8*, i8** %20, align 8, !tbaa !15, !noalias !12\n  %48 = load i64, i64* %21, align 8, !tbaa !8, !noalias !12\n  %49 = invoke nonnull align 8 dereferenceable(32) %\"class.std::__cxx11::basic_string\"* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %6, i8* %47, i64 %48)\n          to label %50 unwind label %102\n\n50:                                               ; preds = %46\n  store %union.anon* %25, %union.anon** %26, align 8, !tbaa !3, !alias.scope !12\n  %51 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %49, i64 0, i32 0, i32 0\n  %52 = load i8*, i8** %51, align 8, !tbaa !15\n  %53 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %49, i64 0, i32 2\n  %54 = bitcast %union.anon* %53 to i8*\n  %55 = icmp eq i8* %52, %54\n  br i1 %55, label %56, label %57\n\n56:                                               ; preds = %50\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(16) %29, i8* noundef nonnull align 8 dereferenceable(16) %52, i64 16, i1 false) #8\n  br label %60\n\n57:                                               ; preds = %50\n  store i8* %52, i8** %27, align 8, !tbaa !15, !alias.scope !12\n  %58 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %49, i64 0, i32 2, i32 0\n  %59 = load i64, i64* %58, align 8, !tbaa !11\n  store i64 %59, i64* %28, align 8, !tbaa !11, !alias.scope !12\n  br label %60\n\n60:                                               ; preds = %57, %56\n  %61 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %49, i64 0, i32 1\n  %62 = load i64, i64* %61, align 8, !tbaa !8\n  store i64 %62, i64* %30, align 8, !tbaa !8, !alias.scope !12\n  %63 = bitcast %\"class.std::__cxx11::basic_string\"* %49 to %union.anon**\n  store %union.anon* %53, %union.anon** %63, align 8, !tbaa !15\n  store i64 0, i64* %61, align 8, !tbaa !8\n  store i8 0, i8* %54, align 8, !tbaa !11\n  %64 = load i8*, i8** %27, align 8, !tbaa !15\n  %65 = icmp eq i8* %64, %29\n  br i1 %65, label %66, label %80\n\n66:                                               ; preds = %60\n  %67 = load i64, i64* %30, align 8, !tbaa !8\n  %68 = icmp eq i64 %67, 0\n  br i1 %68, label %75, label %69\n\n69:                                               ; preds = %66\n  %70 = load i8*, i8** %20, align 8, !tbaa !15\n  %71 = icmp eq i64 %67, 1\n  br i1 %71, label %72, label %74\n\n72:                                               ; preds = %69\n  %73 = load i8, i8* %29, align 8, !tbaa !11\n  store i8 %73, i8* %70, align 1, !tbaa !11\n  br label %75\n\n74:                                               ; preds = %69\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %70, i8* nonnull align 8 %29, i64 %67, i1 false) #8\n  br label %75\n\n75:                                               ; preds = %74, %72, %66\n  %76 = load i64, i64* %30, align 8, !tbaa !8\n  store i64 %76, i64* %21, align 8, !tbaa !8\n  %77 = load i8*, i8** %20, align 8, !tbaa !15\n  %78 = getelementptr inbounds i8, i8* %77, i64 %76\n  store i8 0, i8* %78, align 1, !tbaa !11\n  %79 = load i8*, i8** %27, align 8, !tbaa !15\n  br label %89\n\n80:                                               ; preds = %60\n  %81 = load i8*, i8** %20, align 8, !tbaa !15\n  %82 = icmp eq i8* %81, %19\n  %83 = load i64, i64* %31, align 8\n  store i8* %64, i8** %20, align 8, !tbaa !15\n  %84 = load <2 x i64>, <2 x i64>* %37, align 8, !tbaa !11\n  store <2 x i64> %84, <2 x i64>* %38, align 8, !tbaa !11\n  %85 = icmp eq i8* %81, null\n  %86 = or i1 %82, %85\n  br i1 %86, label %88, label %87\n\n87:                                               ; preds = %80\n  store i8* %81, i8** %27, align 8, !tbaa !15\n  store i64 %83, i64* %28, align 8, !tbaa !11\n  br label %89\n\n88:                                               ; preds = %80\n  store %union.anon* %25, %union.anon** %26, align 8, !tbaa !15\n  br label %89\n\n89:                                               ; preds = %75, %87, %88\n  %90 = phi i8* [ %79, %75 ], [ %81, %87 ], [ %29, %88 ]\n  store i64 0, i64* %30, align 8, !tbaa !8\n  store i8 0, i8* %90, align 1, !tbaa !11\n  %91 = load i8*, i8** %27, align 8, !tbaa !15\n  %92 = icmp eq i8* %91, %29\n  br i1 %92, label %94, label %93\n\n93:                                               ; preds = %89\n  call void @_ZdlPv(i8* %91) #8\n  br label %94\n\n94:                                               ; preds = %89, %93\n  %95 = load i8*, i8** %32, align 8, !tbaa !15\n  %96 = icmp eq i8* %95, %34\n  br i1 %96, label %98, label %97\n\n97:                                               ; preds = %94\n  call void @_ZdlPv(i8* %95) #8\n  br label %98\n\n98:                                               ; preds = %94, %97\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %24) #8\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %23) #8\n  %99 = icmp sgt i32 %43, 3\n  br i1 %99, label %42, label %112, !llvm.loop !16\n\n100:                                              ; preds = %42\n  %101 = landingpad { i8*, i32 }\n          cleanup\n  br label %107\n\n102:                                              ; preds = %46\n  %103 = landingpad { i8*, i32 }\n          cleanup\n  %104 = load i8*, i8** %32, align 8, !tbaa !15\n  %105 = icmp eq i8* %104, %34\n  br i1 %105, label %107, label %106\n\n106:                                              ; preds = %102\n  call void @_ZdlPv(i8* %104) #8\n  br label %107\n\n107:                                              ; preds = %106, %102, %100\n  %108 = phi { i8*, i32 } [ %101, %100 ], [ %103, %102 ], [ %103, %106 ]\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %24) #8\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %23) #8\n  %109 = load i8*, i8** %20, align 8, !tbaa !15\n  %110 = icmp eq i8* %109, %19\n  br i1 %110, label %127, label %111\n\n111:                                              ; preds = %107\n  call void @_ZdlPv(i8* %109) #8\n  br label %127\n\n112:                                              ; preds = %98\n  %113 = load i8*, i8** %20, align 8, !tbaa !15\n  %114 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 2\n  %115 = bitcast %\"class.std::__cxx11::basic_string\"* %0 to %union.anon**\n  store %union.anon* %114, %union.anon** %115, align 8, !tbaa !3\n  %116 = icmp eq i8* %113, %19\n  br i1 %116, label %117, label %120\n\n117:                                              ; preds = %39, %112\n  %118 = phi %union.anon* [ %40, %39 ], [ %114, %112 ]\n  %119 = bitcast %union.anon* %118 to i8*\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(16) %119, i8* noundef nonnull align 8 dereferenceable(16) %19, i64 16, i1 false) #8\n  br label %124\n\n120:                                              ; preds = %112\n  %121 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 0, i32 0\n  store i8* %113, i8** %121, align 8, !tbaa !15\n  %122 = load i64, i64* %31, align 8, !tbaa !11\n  %123 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 2, i32 0\n  store i64 %122, i64* %123, align 8, !tbaa !11\n  br label %124\n\n124:                                              ; preds = %117, %120\n  %125 = load i64, i64* %21, align 8, !tbaa !8\n  %126 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 1\n  store i64 %125, i64* %126, align 8, !tbaa !8\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %16) #8\n  br label %128\n\n127:                                              ; preds = %111, %107\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %16) #8\n  resume { i8*, i32 } %108\n\n128:                                              ; preds = %124, %8\n  ret void\n}\n\n; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn\ndeclare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1\n\ndeclare dso_local i32 @__gxx_personality_v0(...)\n\n; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn\ndeclare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1\n\n; Function Attrs: uwtable\ndefine linkonce_odr dso_local void @_ZN9__gnu_cxx12__to_xstringINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcEET_PFiPT0_mPKS8_P13__va_list_tagEmSB_z(%\"class.std::__cxx11::basic_string\"* noalias sret(%\"class.std::__cxx11::basic_string\") align 8 %0, i32 (i8*, i64, i8*, %struct.__va_list_tag*)* %1, i64 %2, i8* %3, ...) local_unnamed_addr #0 comdat personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {\n  %5 = alloca i64, align 8\n  %6 = alloca [1 x %struct.__va_list_tag], align 16\n  %7 = alloca i8, i64 %2, align 16\n  %8 = bitcast [1 x %struct.__va_list_tag]* %6 to i8*\n  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %8) #8\n  %9 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %6, i64 0, i64 0\n  call void @llvm.va_start(i8* nonnull %8)\n  %10 = call i32 %1(i8* nonnull %7, i64 %2, i8* %3, %struct.__va_list_tag* nonnull %9)\n  call void @llvm.va_end(i8* nonnull %8)\n  %11 = sext i32 %10 to i64\n  %12 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 2\n  %13 = bitcast %\"class.std::__cxx11::basic_string\"* %0 to %union.anon**\n  store %union.anon* %12, %union.anon** %13, align 8, !tbaa !3\n  %14 = bitcast %union.anon* %12 to i8*\n  %15 = bitcast i64* %5 to i8*\n  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %15) #8\n  store i64 %11, i64* %5, align 8, !tbaa !18\n  %16 = icmp ugt i32 %10, 15\n  br i1 %16, label %17, label %22\n\n17:                                               ; preds = %4\n  %18 = call i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %0, i64* nonnull align 8 dereferenceable(8) %5, i64 0)\n  %19 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 0, i32 0\n  store i8* %18, i8** %19, align 8, !tbaa !15\n  %20 = load i64, i64* %5, align 8, !tbaa !18\n  %21 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 2, i32 0\n  store i64 %20, i64* %21, align 8, !tbaa !11\n  br label %22\n\n22:                                               ; preds = %17, %4\n  %23 = phi i8* [ %18, %17 ], [ %14, %4 ]\n  switch i64 %11, label %26 [\n    i64 1, label %24\n    i64 0, label %27\n  ]\n\n24:                                               ; preds = %22\n  %25 = load i8, i8* %7, align 16, !tbaa !11\n  store i8 %25, i8* %23, align 1, !tbaa !11\n  br label %27\n\n26:                                               ; preds = %22\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %23, i8* nonnull align 16 %7, i64 %11, i1 false) #8\n  br label %27\n\n27:                                               ; preds = %26, %24, %22\n  %28 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 0, i32 0\n  %29 = load i64, i64* %5, align 8, !tbaa !18\n  %30 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 1\n  store i64 %29, i64* %30, align 8, !tbaa !8\n  %31 = load i8*, i8** %28, align 8, !tbaa !15\n  %32 = getelementptr inbounds i8, i8* %31, i64 %29\n  store i8 0, i8* %32, align 1, !tbaa !11\n  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %15) #8\n  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %8) #8\n  ret void\n}\n\n; Function Attrs: nofree nounwind\ndeclare dso_local noundef i32 @vsnprintf(i8* nocapture noundef, i64 noundef, i8* nocapture noundef readonly, %struct.__va_list_tag* noundef) #2\n\n; Function Attrs: mustprogress nofree nosync nounwind willreturn\ndeclare void @llvm.va_start(i8*) #3\n\n; Function Attrs: mustprogress nofree nosync nounwind willreturn\ndeclare void @llvm.va_end(i8*) #3\n\ndeclare dso_local i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32), i64* nonnull align 8 dereferenceable(8), i64) local_unnamed_addr #4\n\n; Function Attrs: argmemonly mustprogress nofree nounwind willreturn\ndeclare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #5\n\n; Function Attrs: nobuiltin nounwind\ndeclare dso_local void @_ZdlPv(i8*) local_unnamed_addr #6\n\ndeclare dso_local nonnull align 8 dereferenceable(32) %\"class.std::__cxx11::basic_string\"* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32), i8*, i64) local_unnamed_addr #4\n\n; Function Attrs: inaccessiblememonly nofree nosync nounwind willreturn\ndeclare void @llvm.experimental.noalias.scope.decl(metadata) #7\n\nattributes #0 = { uwtable \"frame-pointer\"=\"none\" \"min-legal-vector-width\"=\"0\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #1 = { argmemonly mustprogress nofree nosync nounwind willreturn }\nattributes #2 = { nofree nounwind \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #3 = { mustprogress nofree nosync nounwind willreturn }\nattributes #4 = { \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #5 = { argmemonly mustprogress nofree nounwind willreturn }\nattributes #6 = { nobuiltin nounwind \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #7 = { inaccessiblememonly nofree nosync nounwind willreturn }\nattributes #8 = { nounwind }\n\n!llvm.module.flags = !{!0, !1}\n!llvm.ident = !{!2}\n\n!0 = !{i32 1, !\"wchar_size\", i32 4}\n!1 = !{i32 7, !\"uwtable\", i32 1}\n!2 = !{!\"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)\"}\n!3 = !{!4, !5, i64 0}\n!4 = !{!\"_ZTSNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderE\", !5, i64 0}\n!5 = !{!\"any pointer\", !6, i64 0}\n!6 = !{!\"omnipotent char\", !7, i64 0}\n!7 = !{!\"Simple C++ TBAA\"}\n!8 = !{!9, !10, i64 8}\n!9 = !{!\"_ZTSNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE\", !4, i64 0, !10, i64 8, !6, i64 16}\n!10 = !{!\"long\", !6, i64 0}\n!11 = !{!6, !6, i64 0}\n!12 = !{!13}\n!13 = distinct !{!13, !14, !\"_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_: argument 0\"}\n!14 = distinct !{!14, !\"_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_\"}\n!15 = !{!9, !5, i64 0}\n!16 = distinct !{!16, !17}\n!17 = !{!\"llvm.loop.mustprogress\"}\n!18 = !{!10, !10, i64 0}\n", "target": "This is the targeted source code:\n/*\nYou are given two positive integers n and m, and your task is to compute the\naverage of the integers from n through m (including n and m). \nRound the answer to the nearest integer(smaller one) and convert that to binary.\nIf n is greater than m, return \"-1\".\nExample:\nrounded_avg(1, 5) => \"11\"\nrounded_avg(7, 5) => \"-1\"\nrounded_avg(10, 20) => \"1111\"\nrounded_avg(20, 33) => \"11010\"\n*/\n#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\nstring rounded_avg(int n,int m){\n\n    if (n>m) return \"-1\";\n    int num=(m+n)/2;\n    string out=\"\";\n    while (num>0)\n    {\n        out=to_string(num%2)+out;\n        num=num/2;\n    }\n    return out;\n}\n"}
{"input": "Convert this to C++:\n; ModuleID = '../../Human_xBenchmarks_164/CPP_104/CPP_104.cpp'\nsource_filename = \"../../Human_xBenchmarks_164/CPP_104/CPP_104.cpp\"\ntarget datalayout = \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\ntarget triple = \"x86_64-unknown-linux-gnu\"\n\n%\"class.std::vector\" = type { %\"struct.std::_Vector_base\" }\n%\"struct.std::_Vector_base\" = type { %\"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl\" }\n%\"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl\" = type { %\"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl_data\" }\n%\"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl_data\" = type { i32*, i32*, i32* }\n%\"struct.__gnu_cxx::__ops::_Iter_less_iter\" = type { i8 }\n\n$_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEElNS0_5__ops15_Iter_less_iterEEvT_S9_T0_T1_ = comdat any\n\n$_ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_ = comdat any\n\n$_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEENS0_5__ops15_Iter_less_iterEEvT_S9_RT0_ = comdat any\n\n@.str = private unnamed_addr constant [26 x i8] c\"vector::_M_realloc_insert\\00\", align 1\n\n; Function Attrs: uwtable\ndefine dso_local void @_Z13unique_digitsSt6vectorIiSaIiEE(%\"class.std::vector\"* noalias nocapture sret(%\"class.std::vector\") align 8 %0, %\"class.std::vector\"* nocapture readonly %1) local_unnamed_addr #0 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {\n  %3 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %1, i64 0, i32 0, i32 0, i32 0, i32 1\n  %4 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %1, i64 0, i32 0, i32 0, i32 0, i32 0\n  %5 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0, i64 0, i32 0, i32 0, i32 0, i32 1\n  %6 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0, i64 0, i32 0, i32 0, i32 0, i32 2\n  %7 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0, i64 0, i32 0, i32 0, i32 0, i32 0\n  %8 = bitcast %\"class.std::vector\"* %0 to i8*\n  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(24) %8, i8 0, i64 24, i1 false)\n  %9 = load i32*, i32** %3, align 8, !tbaa !3\n  %10 = load i32*, i32** %4, align 8, !tbaa !8\n  %11 = icmp eq i32* %9, %10\n  br i1 %11, label %111, label %23\n\n12:                                               ; preds = %97\n  %13 = icmp eq i32* %100, %102\n  br i1 %13, label %111, label %14\n\n14:                                               ; preds = %12\n  %15 = ptrtoint i32* %102 to i64\n  %16 = ptrtoint i32* %100 to i64\n  %17 = sub i64 %15, %16\n  %18 = ashr exact i64 %17, 2\n  %19 = tail call i64 @llvm.ctlz.i64(i64 %18, i1 true) #8, !range !9\n  %20 = shl nuw nsw i64 %19, 1\n  %21 = xor i64 %20, 126\n  invoke void @_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEElNS0_5__ops15_Iter_less_iterEEvT_S9_T0_T1_(i32* %100, i32* %102, i64 %21)\n          to label %22 unwind label %109\n\n22:                                               ; preds = %14\n  invoke void @_ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_(i32* %100, i32* %102)\n          to label %111 unwind label %109\n\n23:                                               ; preds = %2, %97\n  %24 = phi i32* [ %98, %97 ], [ %10, %2 ]\n  %25 = phi i32* [ %99, %97 ], [ %9, %2 ]\n  %26 = phi i32* [ %100, %97 ], [ null, %2 ]\n  %27 = phi i32* [ %101, %97 ], [ null, %2 ]\n  %28 = phi i32* [ %102, %97 ], [ null, %2 ]\n  %29 = phi i64 [ %103, %97 ], [ 0, %2 ]\n  %30 = getelementptr inbounds i32, i32* %24, i64 %29\n  %31 = load i32, i32* %30, align 4, !tbaa !10\n  %32 = icmp ne i32 %31, 0\n  %33 = icmp sgt i32 %31, 0\n  br i1 %33, label %34, label %47\n\n34:                                               ; preds = %23\n  %35 = zext i1 %32 to i8\n  br label %36\n\n36:                                               ; preds = %34, %36\n  %37 = phi i8 [ %41, %36 ], [ %35, %34 ]\n  %38 = phi i32 [ %42, %36 ], [ %31, %34 ]\n  %39 = and i32 %38, 1\n  %40 = icmp eq i32 %39, 0\n  %41 = select i1 %40, i8 0, i8 %37\n  %42 = udiv i32 %38, 10\n  %43 = icmp ugt i32 %38, 9\n  %44 = and i8 %41, 1\n  %45 = icmp ne i8 %44, 0\n  %46 = select i1 %43, i1 %45, i1 false\n  br i1 %46, label %36, label %47, !llvm.loop !12\n\n47:                                               ; preds = %36, %23\n  %48 = phi i1 [ %32, %23 ], [ %45, %36 ]\n  br i1 %48, label %49, label %97\n\n49:                                               ; preds = %47\n  %50 = icmp eq i32* %28, %27\n  br i1 %50, label %53, label %51\n\n51:                                               ; preds = %49\n  store i32 %31, i32* %28, align 4, !tbaa !10\n  %52 = getelementptr inbounds i32, i32* %28, i64 1\n  store i32* %52, i32** %5, align 8, !tbaa !3\n  br label %97\n\n53:                                               ; preds = %49\n  %54 = ptrtoint i32* %27 to i64\n  %55 = ptrtoint i32* %26 to i64\n  %56 = sub i64 %54, %55\n  %57 = ashr exact i64 %56, 2\n  %58 = icmp eq i64 %56, 9223372036854775804\n  br i1 %58, label %59, label %61\n\n59:                                               ; preds = %53\n  invoke void @_ZSt20__throw_length_errorPKc(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str, i64 0, i64 0)) #9\n          to label %60 unwind label %95\n\n60:                                               ; preds = %59\n  unreachable\n\n61:                                               ; preds = %53\n  %62 = icmp eq i64 %56, 0\n  %63 = select i1 %62, i64 1, i64 %57\n  %64 = add nsw i64 %63, %57\n  %65 = icmp ult i64 %64, %57\n  %66 = icmp ugt i64 %64, 2305843009213693951\n  %67 = or i1 %65, %66\n  %68 = select i1 %67, i64 2305843009213693951, i64 %64\n  %69 = icmp eq i64 %68, 0\n  br i1 %69, label %76, label %70\n\n70:                                               ; preds = %61\n  %71 = shl nuw nsw i64 %68, 2\n  %72 = invoke noalias nonnull i8* @_Znwm(i64 %71) #10\n          to label %73 unwind label %93\n\n73:                                               ; preds = %70\n  %74 = bitcast i8* %72 to i32*\n  %75 = load i32, i32* %30, align 4, !tbaa !10\n  br label %76\n\n76:                                               ; preds = %73, %61\n  %77 = phi i32 [ %75, %73 ], [ %31, %61 ]\n  %78 = phi i32* [ %74, %73 ], [ null, %61 ]\n  %79 = getelementptr inbounds i32, i32* %78, i64 %57\n  store i32 %77, i32* %79, align 4, !tbaa !10\n  %80 = icmp sgt i64 %56, 0\n  br i1 %80, label %81, label %84\n\n81:                                               ; preds = %76\n  %82 = bitcast i32* %78 to i8*\n  %83 = bitcast i32* %26 to i8*\n  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %82, i8* align 4 %83, i64 %56, i1 false) #8\n  br label %84\n\n84:                                               ; preds = %76, %81\n  %85 = getelementptr inbounds i32, i32* %79, i64 1\n  %86 = icmp eq i32* %26, null\n  br i1 %86, label %89, label %87\n\n87:                                               ; preds = %84\n  %88 = bitcast i32* %26 to i8*\n  tail call void @_ZdlPv(i8* nonnull %88) #8\n  br label %89\n\n89:                                               ; preds = %87, %84\n  store i32* %78, i32** %7, align 8, !tbaa !8\n  store i32* %85, i32** %5, align 8, !tbaa !3\n  %90 = getelementptr inbounds i32, i32* %78, i64 %68\n  store i32* %90, i32** %6, align 8, !tbaa !14\n  %91 = load i32*, i32** %3, align 8, !tbaa !3\n  %92 = load i32*, i32** %4, align 8, !tbaa !8\n  br label %97\n\n93:                                               ; preds = %70\n  %94 = landingpad { i8*, i32 }\n          cleanup\n  br label %112\n\n95:                                               ; preds = %59\n  %96 = landingpad { i8*, i32 }\n          cleanup\n  br label %112\n\n97:                                               ; preds = %89, %51, %47\n  %98 = phi i32* [ %92, %89 ], [ %24, %51 ], [ %24, %47 ]\n  %99 = phi i32* [ %91, %89 ], [ %25, %51 ], [ %25, %47 ]\n  %100 = phi i32* [ %78, %89 ], [ %26, %51 ], [ %26, %47 ]\n  %101 = phi i32* [ %90, %89 ], [ %27, %51 ], [ %27, %47 ]\n  %102 = phi i32* [ %85, %89 ], [ %52, %51 ], [ %28, %47 ]\n  %103 = add nuw i64 %29, 1\n  %104 = ptrtoint i32* %99 to i64\n  %105 = ptrtoint i32* %98 to i64\n  %106 = sub i64 %104, %105\n  %107 = ashr exact i64 %106, 2\n  %108 = icmp ugt i64 %107, %103\n  br i1 %108, label %23, label %12, !llvm.loop !15\n\n109:                                              ; preds = %22, %14\n  %110 = landingpad { i8*, i32 }\n          cleanup\n  br label %112\n\n111:                                              ; preds = %2, %12, %22\n  ret void\n\n112:                                              ; preds = %93, %95, %109\n  %113 = phi i32* [ %100, %109 ], [ %26, %93 ], [ %26, %95 ]\n  %114 = phi { i8*, i32 } [ %110, %109 ], [ %94, %93 ], [ %96, %95 ]\n  %115 = icmp eq i32* %113, null\n  br i1 %115, label %118, label %116\n\n116:                                              ; preds = %112\n  %117 = bitcast i32* %113 to i8*\n  tail call void @_ZdlPv(i8* nonnull %117) #8\n  br label %118\n\n118:                                              ; preds = %112, %116\n  resume { i8*, i32 } %114\n}\n\n; Function Attrs: argmemonly mustprogress nofree nounwind willreturn writeonly\ndeclare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1\n\n; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn\ndeclare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2\n\ndeclare dso_local i32 @__gxx_personality_v0(...)\n\n; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn\ndeclare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2\n\n; Function Attrs: nobuiltin nounwind\ndeclare dso_local void @_ZdlPv(i8*) local_unnamed_addr #3\n\n; Function Attrs: noreturn\ndeclare dso_local void @_ZSt20__throw_length_errorPKc(i8*) local_unnamed_addr #4\n\n; Function Attrs: nobuiltin allocsize(0)\ndeclare dso_local nonnull i8* @_Znwm(i64) local_unnamed_addr #5\n\n; Function Attrs: argmemonly mustprogress nofree nounwind willreturn\ndeclare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #6\n\n; Function Attrs: uwtable\ndefine linkonce_odr dso_local void @_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEElNS0_5__ops15_Iter_less_iterEEvT_S9_T0_T1_(i32* %0, i32* %1, i64 %2) local_unnamed_addr #0 comdat {\n  %4 = alloca %\"struct.__gnu_cxx::__ops::_Iter_less_iter\", align 1\n  %5 = ptrtoint i32* %0 to i64\n  %6 = getelementptr inbounds i32, i32* %0, i64 1\n  %7 = ptrtoint i32* %1 to i64\n  %8 = sub i64 %7, %5\n  %9 = icmp sgt i64 %8, 64\n  br i1 %9, label %10, label %123\n\n10:                                               ; preds = %3, %119\n  %11 = phi i64 [ %121, %119 ], [ %8, %3 ]\n  %12 = phi i64 [ %76, %119 ], [ %2, %3 ]\n  %13 = phi i32* [ %107, %119 ], [ %1, %3 ]\n  %14 = icmp eq i64 %12, 0\n  br i1 %14, label %15, label %74\n\n15:                                               ; preds = %10\n  %16 = getelementptr inbounds %\"struct.__gnu_cxx::__ops::_Iter_less_iter\", %\"struct.__gnu_cxx::__ops::_Iter_less_iter\"* %4, i64 0, i32 0\n  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %16)\n  call void @_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEENS0_5__ops15_Iter_less_iterEEvT_S9_RT0_(i32* %0, i32* %13, %\"struct.__gnu_cxx::__ops::_Iter_less_iter\"* nonnull align 1 dereferenceable(1) %4)\n  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %16)\n  br label %17\n\n17:                                               ; preds = %15, %70\n  %18 = phi i32* [ %19, %70 ], [ %13, %15 ]\n  %19 = getelementptr inbounds i32, i32* %18, i64 -1\n  %20 = load i32, i32* %19, align 4, !tbaa !10\n  %21 = load i32, i32* %0, align 4, !tbaa !10\n  store i32 %21, i32* %19, align 4, !tbaa !10\n  %22 = ptrtoint i32* %19 to i64\n  %23 = sub i64 %22, %5\n  %24 = ashr exact i64 %23, 2\n  %25 = add nsw i64 %24, -1\n  %26 = sdiv i64 %25, 2\n  %27 = icmp sgt i64 %23, 8\n  br i1 %27, label %28, label %43\n\n28:                                               ; preds = %17, %28\n  %29 = phi i64 [ %38, %28 ], [ 0, %17 ]\n  %30 = shl i64 %29, 1\n  %31 = add i64 %30, 2\n  %32 = getelementptr inbounds i32, i32* %0, i64 %31\n  %33 = or i64 %30, 1\n  %34 = getelementptr inbounds i32, i32* %0, i64 %33\n  %35 = load i32, i32* %32, align 4, !tbaa !10\n  %36 = load i32, i32* %34, align 4, !tbaa !10\n  %37 = icmp slt i32 %35, %36\n  %38 = select i1 %37, i64 %33, i64 %31\n  %39 = getelementptr inbounds i32, i32* %0, i64 %38\n  %40 = load i32, i32* %39, align 4, !tbaa !10\n  %41 = getelementptr inbounds i32, i32* %0, i64 %29\n  store i32 %40, i32* %41, align 4, !tbaa !10\n  %42 = icmp slt i64 %38, %26\n  br i1 %42, label %28, label %43, !llvm.loop !16\n\n43:                                               ; preds = %28, %17\n  %44 = phi i64 [ 0, %17 ], [ %38, %28 ]\n  %45 = and i64 %23, 4\n  %46 = icmp eq i64 %45, 0\n  br i1 %46, label %47, label %57\n\n47:                                               ; preds = %43\n  %48 = add nsw i64 %24, -2\n  %49 = sdiv i64 %48, 2\n  %50 = icmp eq i64 %44, %49\n  br i1 %50, label %51, label %57\n\n51:                                               ; preds = %47\n  %52 = shl i64 %44, 1\n  %53 = or i64 %52, 1\n  %54 = getelementptr inbounds i32, i32* %0, i64 %53\n  %55 = load i32, i32* %54, align 4, !tbaa !10\n  %56 = getelementptr inbounds i32, i32* %0, i64 %44\n  store i32 %55, i32* %56, align 4, !tbaa !10\n  br label %57\n\n57:                                               ; preds = %51, %47, %43\n  %58 = phi i64 [ %53, %51 ], [ %44, %47 ], [ %44, %43 ]\n  %59 = icmp sgt i64 %58, 0\n  br i1 %59, label %60, label %70\n\n60:                                               ; preds = %57, %67\n  %61 = phi i64 [ %63, %67 ], [ %58, %57 ]\n  %62 = add nsw i64 %61, -1\n  %63 = lshr i64 %62, 1\n  %64 = getelementptr inbounds i32, i32* %0, i64 %63\n  %65 = load i32, i32* %64, align 4, !tbaa !10\n  %66 = icmp slt i32 %65, %20\n  br i1 %66, label %67, label %70\n\n67:                                               ; preds = %60\n  %68 = getelementptr inbounds i32, i32* %0, i64 %61\n  store i32 %65, i32* %68, align 4, !tbaa !10\n  %69 = icmp ult i64 %62, 2\n  br i1 %69, label %70, label %60, !llvm.loop !17\n\n70:                                               ; preds = %67, %60, %57\n  %71 = phi i64 [ %58, %57 ], [ %61, %60 ], [ 0, %67 ]\n  %72 = getelementptr inbounds i32, i32* %0, i64 %71\n  store i32 %20, i32* %72, align 4, !tbaa !10\n  %73 = icmp sgt i64 %23, 4\n  br i1 %73, label %17, label %123, !llvm.loop !18\n\n74:                                               ; preds = %10\n  %75 = lshr i64 %11, 3\n  %76 = add nsw i64 %12, -1\n  %77 = getelementptr inbounds i32, i32* %0, i64 %75\n  %78 = getelementptr inbounds i32, i32* %13, i64 -1\n  %79 = load i32, i32* %6, align 4, !tbaa !10\n  %80 = load i32, i32* %77, align 4, !tbaa !10\n  %81 = icmp slt i32 %79, %80\n  %82 = load i32, i32* %78, align 4, !tbaa !10\n  br i1 %81, label %83, label %92\n\n83:                                               ; preds = %74\n  %84 = icmp slt i32 %80, %82\n  br i1 %84, label %85, label %87\n\n85:                                               ; preds = %83\n  %86 = load i32, i32* %0, align 4, !tbaa !10\n  store i32 %80, i32* %0, align 4, !tbaa !10\n  store i32 %86, i32* %77, align 4, !tbaa !10\n  br label %101\n\n87:                                               ; preds = %83\n  %88 = icmp slt i32 %79, %82\n  %89 = load i32, i32* %0, align 4, !tbaa !10\n  br i1 %88, label %90, label %91\n\n90:                                               ; preds = %87\n  store i32 %82, i32* %0, align 4, !tbaa !10\n  store i32 %89, i32* %78, align 4, !tbaa !10\n  br label %101\n\n91:                                               ; preds = %87\n  store i32 %79, i32* %0, align 4, !tbaa !10\n  store i32 %89, i32* %6, align 4, !tbaa !10\n  br label %101\n\n92:                                               ; preds = %74\n  %93 = icmp slt i32 %79, %82\n  br i1 %93, label %94, label %96\n\n94:                                               ; preds = %92\n  %95 = load i32, i32* %0, align 4, !tbaa !10\n  store i32 %79, i32* %0, align 4, !tbaa !10\n  store i32 %95, i32* %6, align 4, !tbaa !10\n  br label %101\n\n96:                                               ; preds = %92\n  %97 = icmp slt i32 %80, %82\n  %98 = load i32, i32* %0, align 4, !tbaa !10\n  br i1 %97, label %99, label %100\n\n99:                                               ; preds = %96\n  store i32 %82, i32* %0, align 4, !tbaa !10\n  store i32 %98, i32* %78, align 4, !tbaa !10\n  br label %101\n\n100:                                              ; preds = %96\n  store i32 %80, i32* %0, align 4, !tbaa !10\n  store i32 %98, i32* %77, align 4, !tbaa !10\n  br label %101\n\n101:                                              ; preds = %100, %99, %94, %91, %90, %85\n  br label %102\n\n102:                                              ; preds = %101, %118\n  %103 = phi i32* [ %110, %118 ], [ %6, %101 ]\n  %104 = phi i32* [ %113, %118 ], [ %13, %101 ]\n  %105 = load i32, i32* %0, align 4, !tbaa !10\n  br label %106\n\n106:                                              ; preds = %106, %102\n  %107 = phi i32* [ %103, %102 ], [ %110, %106 ]\n  %108 = load i32, i32* %107, align 4, !tbaa !10\n  %109 = icmp slt i32 %108, %105\n  %110 = getelementptr inbounds i32, i32* %107, i64 1\n  br i1 %109, label %106, label %111, !llvm.loop !19\n\n111:                                              ; preds = %106, %111\n  %112 = phi i32* [ %113, %111 ], [ %104, %106 ]\n  %113 = getelementptr inbounds i32, i32* %112, i64 -1\n  %114 = load i32, i32* %113, align 4, !tbaa !10\n  %115 = icmp slt i32 %105, %114\n  br i1 %115, label %111, label %116, !llvm.loop !20\n\n116:                                              ; preds = %111\n  %117 = icmp ult i32* %107, %113\n  br i1 %117, label %118, label %119\n\n118:                                              ; preds = %116\n  store i32 %114, i32* %107, align 4, !tbaa !10\n  store i32 %108, i32* %113, align 4, !tbaa !10\n  br label %102, !llvm.loop !21\n\n119:                                              ; preds = %116\n  tail call void @_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEElNS0_5__ops15_Iter_less_iterEEvT_S9_T0_T1_(i32* nonnull %107, i32* %13, i64 %76)\n  %120 = ptrtoint i32* %107 to i64\n  %121 = sub i64 %120, %5\n  %122 = icmp sgt i64 %121, 64\n  br i1 %122, label %10, label %123, !llvm.loop !22\n\n123:                                              ; preds = %119, %70, %3\n  ret void\n}\n\n; Function Attrs: uwtable\ndefine linkonce_odr dso_local void @_ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_(i32* %0, i32* %1) local_unnamed_addr #0 comdat {\n  %3 = ptrtoint i32* %1 to i64\n  %4 = ptrtoint i32* %0 to i64\n  %5 = sub i64 %3, %4\n  %6 = icmp sgt i64 %5, 64\n  br i1 %6, label %7, label %38\n\n7:                                                ; preds = %2\n  %8 = bitcast i32* %0 to i8*\n  %9 = getelementptr i32, i32* %0, i64 1\n  %10 = load i32, i32* %9, align 4, !tbaa !10\n  %11 = load i32, i32* %0, align 4, !tbaa !10\n  %12 = icmp slt i32 %10, %11\n  br i1 %12, label %13, label %15\n\n13:                                               ; preds = %7\n  %14 = load i32, i32* %0, align 4\n  store i32 %14, i32* %9, align 4\n  br label %15\n\n15:                                               ; preds = %7, %13\n  %16 = phi i32* [ %0, %13 ], [ %9, %7 ]\n  store i32 %10, i32* %16, align 4, !tbaa !10\n  %17 = getelementptr inbounds i32, i32* %0, i64 2\n  %18 = load i32, i32* %17, align 4, !tbaa !10\n  %19 = load i32, i32* %0, align 4, !tbaa !10\n  %20 = icmp slt i32 %18, %19\n  br i1 %20, label %84, label %74\n\n21:                                               ; preds = %322, %34\n  %22 = phi i32* [ %36, %34 ], [ %324, %322 ]\n  %23 = load i32, i32* %22, align 4, !tbaa !10\n  %24 = getelementptr inbounds i32, i32* %22, i64 -1\n  %25 = load i32, i32* %24, align 4, !tbaa !10\n  %26 = icmp slt i32 %23, %25\n  br i1 %26, label %27, label %34\n\n27:                                               ; preds = %21, %27\n  %28 = phi i32 [ %32, %27 ], [ %25, %21 ]\n  %29 = phi i32* [ %31, %27 ], [ %24, %21 ]\n  %30 = phi i32* [ %29, %27 ], [ %22, %21 ]\n  store i32 %28, i32* %30, align 4, !tbaa !10\n  %31 = getelementptr inbounds i32, i32* %29, i64 -1\n  %32 = load i32, i32* %31, align 4, !tbaa !10\n  %33 = icmp slt i32 %23, %32\n  br i1 %33, label %27, label %34, !llvm.loop !23\n\n34:                                               ; preds = %27, %21\n  %35 = phi i32* [ %22, %21 ], [ %29, %27 ]\n  store i32 %23, i32* %35, align 4, !tbaa !10\n  %36 = getelementptr inbounds i32, i32* %22, i64 1\n  %37 = icmp eq i32* %36, %1\n  br i1 %37, label %73, label %21, !llvm.loop !24\n\n38:                                               ; preds = %2\n  %39 = icmp eq i32* %0, %1\n  br i1 %39, label %73, label %40\n\n40:                                               ; preds = %38\n  %41 = bitcast i32* %0 to i8*\n  %42 = getelementptr inbounds i32, i32* %0, i64 1\n  %43 = icmp eq i32* %42, %1\n  br i1 %43, label %73, label %44\n\n44:                                               ; preds = %40, %69\n  %45 = phi i32* [ %71, %69 ], [ %42, %40 ]\n  %46 = phi i32* [ %45, %69 ], [ %0, %40 ]\n  %47 = load i32, i32* %45, align 4, !tbaa !10\n  %48 = load i32, i32* %0, align 4, !tbaa !10\n  %49 = icmp slt i32 %47, %48\n  br i1 %49, label %50, label %59\n\n50:                                               ; preds = %44\n  %51 = ptrtoint i32* %45 to i64\n  %52 = sub i64 %51, %4\n  %53 = icmp eq i64 %52, 0\n  br i1 %53, label %69, label %54\n\n54:                                               ; preds = %50\n  %55 = ashr exact i64 %52, 2\n  %56 = sub nsw i64 2, %55\n  %57 = getelementptr inbounds i32, i32* %46, i64 %56\n  %58 = bitcast i32* %57 to i8*\n  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* nonnull align 4 %58, i8* nonnull align 4 %41, i64 %52, i1 false) #8\n  br label %69\n\n59:                                               ; preds = %44\n  %60 = load i32, i32* %46, align 4, !tbaa !10\n  %61 = icmp slt i32 %47, %60\n  br i1 %61, label %62, label %69\n\n62:                                               ; preds = %59, %62\n  %63 = phi i32 [ %67, %62 ], [ %60, %59 ]\n  %64 = phi i32* [ %66, %62 ], [ %46, %59 ]\n  %65 = phi i32* [ %64, %62 ], [ %45, %59 ]\n  store i32 %63, i32* %65, align 4, !tbaa !10\n  %66 = getelementptr inbounds i32, i32* %64, i64 -1\n  %67 = load i32, i32* %66, align 4, !tbaa !10\n  %68 = icmp slt i32 %47, %67\n  br i1 %68, label %62, label %69, !llvm.loop !23\n\n69:                                               ; preds = %62, %59, %54, %50\n  %70 = phi i32* [ %0, %50 ], [ %0, %54 ], [ %45, %59 ], [ %64, %62 ]\n  store i32 %47, i32* %70, align 4, !tbaa !10\n  %71 = getelementptr inbounds i32, i32* %45, i64 1\n  %72 = icmp eq i32* %71, %1\n  br i1 %72, label %73, label %44, !llvm.loop !25\n\n73:                                               ; preds = %69, %34, %40, %38, %322\n  ret void\n\n74:                                               ; preds = %15\n  %75 = load i32, i32* %9, align 4, !tbaa !10\n  %76 = icmp slt i32 %18, %75\n  br i1 %76, label %77, label %88\n\n77:                                               ; preds = %74, %77\n  %78 = phi i32 [ %82, %77 ], [ %75, %74 ]\n  %79 = phi i32* [ %81, %77 ], [ %9, %74 ]\n  %80 = phi i32* [ %79, %77 ], [ %17, %74 ]\n  store i32 %78, i32* %80, align 4, !tbaa !10\n  %81 = getelementptr inbounds i32, i32* %79, i64 -1\n  %82 = load i32, i32* %81, align 4, !tbaa !10\n  %83 = icmp slt i32 %18, %82\n  br i1 %83, label %77, label %88, !llvm.loop !23\n\n84:                                               ; preds = %15\n  %85 = bitcast i32* %0 to i64*\n  %86 = bitcast i32* %9 to i64*\n  %87 = load i64, i64* %85, align 4\n  store i64 %87, i64* %86, align 4\n  br label %88\n\n88:                                               ; preds = %77, %84, %74\n  %89 = phi i32* [ %0, %84 ], [ %17, %74 ], [ %79, %77 ]\n  store i32 %18, i32* %89, align 4, !tbaa !10\n  %90 = getelementptr inbounds i32, i32* %0, i64 3\n  %91 = load i32, i32* %90, align 4, !tbaa !10\n  %92 = load i32, i32* %0, align 4, !tbaa !10\n  %93 = icmp slt i32 %91, %92\n  br i1 %93, label %104, label %94\n\n94:                                               ; preds = %88\n  %95 = load i32, i32* %17, align 4, !tbaa !10\n  %96 = icmp slt i32 %91, %95\n  br i1 %96, label %97, label %106\n\n97:                                               ; preds = %94, %97\n  %98 = phi i32 [ %102, %97 ], [ %95, %94 ]\n  %99 = phi i32* [ %101, %97 ], [ %17, %94 ]\n  %100 = phi i32* [ %99, %97 ], [ %90, %94 ]\n  store i32 %98, i32* %100, align 4, !tbaa !10\n  %101 = getelementptr inbounds i32, i32* %99, i64 -1\n  %102 = load i32, i32* %101, align 4, !tbaa !10\n  %103 = icmp slt i32 %91, %102\n  br i1 %103, label %97, label %106, !llvm.loop !23\n\n104:                                              ; preds = %88\n  %105 = bitcast i32* %9 to i8*\n  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* noundef nonnull align 4 dereferenceable(12) %105, i8* noundef nonnull align 4 dereferenceable(12) %8, i64 12, i1 false) #8\n  br label %106\n\n106:                                              ; preds = %97, %104, %94\n  %107 = phi i32* [ %0, %104 ], [ %90, %94 ], [ %99, %97 ]\n  store i32 %91, i32* %107, align 4, !tbaa !10\n  %108 = getelementptr inbounds i32, i32* %0, i64 4\n  %109 = load i32, i32* %108, align 4, !tbaa !10\n  %110 = load i32, i32* %0, align 4, !tbaa !10\n  %111 = icmp slt i32 %109, %110\n  br i1 %111, label %122, label %112\n\n112:                                              ; preds = %106\n  %113 = load i32, i32* %90, align 4, !tbaa !10\n  %114 = icmp slt i32 %109, %113\n  br i1 %114, label %115, label %124\n\n115:                                              ; preds = %112, %115\n  %116 = phi i32 [ %120, %115 ], [ %113, %112 ]\n  %117 = phi i32* [ %119, %115 ], [ %90, %112 ]\n  %118 = phi i32* [ %117, %115 ], [ %108, %112 ]\n  store i32 %116, i32* %118, align 4, !tbaa !10\n  %119 = getelementptr inbounds i32, i32* %117, i64 -1\n  %120 = load i32, i32* %119, align 4, !tbaa !10\n  %121 = icmp slt i32 %109, %120\n  br i1 %121, label %115, label %124, !llvm.loop !23\n\n122:                                              ; preds = %106\n  %123 = bitcast i32* %9 to i8*\n  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* noundef nonnull align 4 dereferenceable(16) %123, i8* noundef nonnull align 4 dereferenceable(16) %8, i64 16, i1 false) #8\n  br label %124\n\n124:                                              ; preds = %115, %122, %112\n  %125 = phi i32* [ %0, %122 ], [ %108, %112 ], [ %117, %115 ]\n  store i32 %109, i32* %125, align 4, !tbaa !10\n  %126 = getelementptr inbounds i32, i32* %0, i64 5\n  %127 = load i32, i32* %126, align 4, !tbaa !10\n  %128 = load i32, i32* %0, align 4, !tbaa !10\n  %129 = icmp slt i32 %127, %128\n  br i1 %129, label %140, label %130\n\n130:                                              ; preds = %124\n  %131 = load i32, i32* %108, align 4, !tbaa !10\n  %132 = icmp slt i32 %127, %131\n  br i1 %132, label %133, label %142\n\n133:                                              ; preds = %130, %133\n  %134 = phi i32 [ %138, %133 ], [ %131, %130 ]\n  %135 = phi i32* [ %137, %133 ], [ %108, %130 ]\n  %136 = phi i32* [ %135, %133 ], [ %126, %130 ]\n  store i32 %134, i32* %136, align 4, !tbaa !10\n  %137 = getelementptr inbounds i32, i32* %135, i64 -1\n  %138 = load i32, i32* %137, align 4, !tbaa !10\n  %139 = icmp slt i32 %127, %138\n  br i1 %139, label %133, label %142, !llvm.loop !23\n\n140:                                              ; preds = %124\n  %141 = bitcast i32* %9 to i8*\n  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* noundef nonnull align 4 dereferenceable(20) %141, i8* noundef nonnull align 4 dereferenceable(20) %8, i64 20, i1 false) #8\n  br label %142\n\n142:                                              ; preds = %133, %140, %130\n  %143 = phi i32* [ %0, %140 ], [ %126, %130 ], [ %135, %133 ]\n  store i32 %127, i32* %143, align 4, !tbaa !10\n  %144 = getelementptr inbounds i32, i32* %0, i64 6\n  %145 = load i32, i32* %144, align 4, !tbaa !10\n  %146 = load i32, i32* %0, align 4, !tbaa !10\n  %147 = icmp slt i32 %145, %146\n  br i1 %147, label %158, label %148\n\n148:                                              ; preds = %142\n  %149 = load i32, i32* %126, align 4, !tbaa !10\n  %150 = icmp slt i32 %145, %149\n  br i1 %150, label %151, label %160\n\n151:                                              ; preds = %148, %151\n  %152 = phi i32 [ %156, %151 ], [ %149, %148 ]\n  %153 = phi i32* [ %155, %151 ], [ %126, %148 ]\n  %154 = phi i32* [ %153, %151 ], [ %144, %148 ]\n  store i32 %152, i32* %154, align 4, !tbaa !10\n  %155 = getelementptr inbounds i32, i32* %153, i64 -1\n  %156 = load i32, i32* %155, align 4, !tbaa !10\n  %157 = icmp slt i32 %145, %156\n  br i1 %157, label %151, label %160, !llvm.loop !23\n\n158:                                              ; preds = %142\n  %159 = bitcast i32* %9 to i8*\n  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* noundef nonnull align 4 dereferenceable(24) %159, i8* noundef nonnull align 4 dereferenceable(24) %8, i64 24, i1 false) #8\n  br label %160\n\n160:                                              ; preds = %151, %158, %148\n  %161 = phi i32* [ %0, %158 ], [ %144, %148 ], [ %153, %151 ]\n  store i32 %145, i32* %161, align 4, !tbaa !10\n  %162 = getelementptr inbounds i32, i32* %0, i64 7\n  %163 = load i32, i32* %162, align 4, !tbaa !10\n  %164 = load i32, i32* %0, align 4, !tbaa !10\n  %165 = icmp slt i32 %163, %164\n  br i1 %165, label %176, label %166\n\n166:                                              ; preds = %160\n  %167 = load i32, i32* %144, align 4, !tbaa !10\n  %168 = icmp slt i32 %163, %167\n  br i1 %168, label %169, label %178\n\n169:                                              ; preds = %166, %169\n  %170 = phi i32 [ %174, %169 ], [ %167, %166 ]\n  %171 = phi i32* [ %173, %169 ], [ %144, %166 ]\n  %172 = phi i32* [ %171, %169 ], [ %162, %166 ]\n  store i32 %170, i32* %172, align 4, !tbaa !10\n  %173 = getelementptr inbounds i32, i32* %171, i64 -1\n  %174 = load i32, i32* %173, align 4, !tbaa !10\n  %175 = icmp slt i32 %163, %174\n  br i1 %175, label %169, label %178, !llvm.loop !23\n\n176:                                              ; preds = %160\n  %177 = bitcast i32* %9 to i8*\n  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* noundef nonnull align 4 dereferenceable(28) %177, i8* noundef nonnull align 4 dereferenceable(28) %8, i64 28, i1 false) #8\n  br label %178\n\n178:                                              ; preds = %169, %176, %166\n  %179 = phi i32* [ %0, %176 ], [ %162, %166 ], [ %171, %169 ]\n  store i32 %163, i32* %179, align 4, !tbaa !10\n  %180 = getelementptr inbounds i32, i32* %0, i64 8\n  %181 = load i32, i32* %180, align 4, !tbaa !10\n  %182 = load i32, i32* %0, align 4, !tbaa !10\n  %183 = icmp slt i32 %181, %182\n  br i1 %183, label %194, label %184\n\n184:                                              ; preds = %178\n  %185 = load i32, i32* %162, align 4, !tbaa !10\n  %186 = icmp slt i32 %181, %185\n  br i1 %186, label %187, label %196\n\n187:                                              ; preds = %184, %187\n  %188 = phi i32 [ %192, %187 ], [ %185, %184 ]\n  %189 = phi i32* [ %191, %187 ], [ %162, %184 ]\n  %190 = phi i32* [ %189, %187 ], [ %180, %184 ]\n  store i32 %188, i32* %190, align 4, !tbaa !10\n  %191 = getelementptr inbounds i32, i32* %189, i64 -1\n  %192 = load i32, i32* %191, align 4, !tbaa !10\n  %193 = icmp slt i32 %181, %192\n  br i1 %193, label %187, label %196, !llvm.loop !23\n\n194:                                              ; preds = %178\n  %195 = bitcast i32* %9 to i8*\n  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* noundef nonnull align 4 dereferenceable(32) %195, i8* noundef nonnull align 4 dereferenceable(32) %8, i64 32, i1 false) #8\n  br label %196\n\n196:                                              ; preds = %187, %194, %184\n  %197 = phi i32* [ %0, %194 ], [ %180, %184 ], [ %189, %187 ]\n  store i32 %181, i32* %197, align 4, !tbaa !10\n  %198 = getelementptr inbounds i32, i32* %0, i64 9\n  %199 = load i32, i32* %198, align 4, !tbaa !10\n  %200 = load i32, i32* %0, align 4, !tbaa !10\n  %201 = icmp slt i32 %199, %200\n  br i1 %201, label %212, label %202\n\n202:                                              ; preds = %196\n  %203 = load i32, i32* %180, align 4, !tbaa !10\n  %204 = icmp slt i32 %199, %203\n  br i1 %204, label %205, label %214\n\n205:                                              ; preds = %202, %205\n  %206 = phi i32 [ %210, %205 ], [ %203, %202 ]\n  %207 = phi i32* [ %209, %205 ], [ %180, %202 ]\n  %208 = phi i32* [ %207, %205 ], [ %198, %202 ]\n  store i32 %206, i32* %208, align 4, !tbaa !10\n  %209 = getelementptr inbounds i32, i32* %207, i64 -1\n  %210 = load i32, i32* %209, align 4, !tbaa !10\n  %211 = icmp slt i32 %199, %210\n  br i1 %211, label %205, label %214, !llvm.loop !23\n\n212:                                              ; preds = %196\n  %213 = bitcast i32* %9 to i8*\n  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* noundef nonnull align 4 dereferenceable(36) %213, i8* noundef nonnull align 4 dereferenceable(36) %8, i64 36, i1 false) #8\n  br label %214\n\n214:                                              ; preds = %205, %212, %202\n  %215 = phi i32* [ %0, %212 ], [ %198, %202 ], [ %207, %205 ]\n  store i32 %199, i32* %215, align 4, !tbaa !10\n  %216 = getelementptr inbounds i32, i32* %0, i64 10\n  %217 = load i32, i32* %216, align 4, !tbaa !10\n  %218 = load i32, i32* %0, align 4, !tbaa !10\n  %219 = icmp slt i32 %217, %218\n  br i1 %219, label %230, label %220\n\n220:                                              ; preds = %214\n  %221 = load i32, i32* %198, align 4, !tbaa !10\n  %222 = icmp slt i32 %217, %221\n  br i1 %222, label %223, label %232\n\n223:                                              ; preds = %220, %223\n  %224 = phi i32 [ %228, %223 ], [ %221, %220 ]\n  %225 = phi i32* [ %227, %223 ], [ %198, %220 ]\n  %226 = phi i32* [ %225, %223 ], [ %216, %220 ]\n  store i32 %224, i32* %226, align 4, !tbaa !10\n  %227 = getelementptr inbounds i32, i32* %225, i64 -1\n  %228 = load i32, i32* %227, align 4, !tbaa !10\n  %229 = icmp slt i32 %217, %228\n  br i1 %229, label %223, label %232, !llvm.loop !23\n\n230:                                              ; preds = %214\n  %231 = bitcast i32* %9 to i8*\n  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* noundef nonnull align 4 dereferenceable(40) %231, i8* noundef nonnull align 4 dereferenceable(40) %8, i64 40, i1 false) #8\n  br label %232\n\n232:                                              ; preds = %223, %230, %220\n  %233 = phi i32* [ %0, %230 ], [ %216, %220 ], [ %225, %223 ]\n  store i32 %217, i32* %233, align 4, !tbaa !10\n  %234 = getelementptr inbounds i32, i32* %0, i64 11\n  %235 = load i32, i32* %234, align 4, !tbaa !10\n  %236 = load i32, i32* %0, align 4, !tbaa !10\n  %237 = icmp slt i32 %235, %236\n  br i1 %237, label %248, label %238\n\n238:                                              ; preds = %232\n  %239 = load i32, i32* %216, align 4, !tbaa !10\n  %240 = icmp slt i32 %235, %239\n  br i1 %240, label %241, label %250\n\n241:                                              ; preds = %238, %241\n  %242 = phi i32 [ %246, %241 ], [ %239, %238 ]\n  %243 = phi i32* [ %245, %241 ], [ %216, %238 ]\n  %244 = phi i32* [ %243, %241 ], [ %234, %238 ]\n  store i32 %242, i32* %244, align 4, !tbaa !10\n  %245 = getelementptr inbounds i32, i32* %243, i64 -1\n  %246 = load i32, i32* %245, align 4, !tbaa !10\n  %247 = icmp slt i32 %235, %246\n  br i1 %247, label %241, label %250, !llvm.loop !23\n\n248:                                              ; preds = %232\n  %249 = bitcast i32* %9 to i8*\n  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* noundef nonnull align 4 dereferenceable(44) %249, i8* noundef nonnull align 4 dereferenceable(44) %8, i64 44, i1 false) #8\n  br label %250\n\n250:                                              ; preds = %241, %248, %238\n  %251 = phi i32* [ %0, %248 ], [ %234, %238 ], [ %243, %241 ]\n  store i32 %235, i32* %251, align 4, !tbaa !10\n  %252 = getelementptr inbounds i32, i32* %0, i64 12\n  %253 = load i32, i32* %252, align 4, !tbaa !10\n  %254 = load i32, i32* %0, align 4, !tbaa !10\n  %255 = icmp slt i32 %253, %254\n  br i1 %255, label %266, label %256\n\n256:                                              ; preds = %250\n  %257 = load i32, i32* %234, align 4, !tbaa !10\n  %258 = icmp slt i32 %253, %257\n  br i1 %258, label %259, label %268\n\n259:                                              ; preds = %256, %259\n  %260 = phi i32 [ %264, %259 ], [ %257, %256 ]\n  %261 = phi i32* [ %263, %259 ], [ %234, %256 ]\n  %262 = phi i32* [ %261, %259 ], [ %252, %256 ]\n  store i32 %260, i32* %262, align 4, !tbaa !10\n  %263 = getelementptr inbounds i32, i32* %261, i64 -1\n  %264 = load i32, i32* %263, align 4, !tbaa !10\n  %265 = icmp slt i32 %253, %264\n  br i1 %265, label %259, label %268, !llvm.loop !23\n\n266:                                              ; preds = %250\n  %267 = bitcast i32* %9 to i8*\n  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* noundef nonnull align 4 dereferenceable(48) %267, i8* noundef nonnull align 4 dereferenceable(48) %8, i64 48, i1 false) #8\n  br label %268\n\n268:                                              ; preds = %259, %266, %256\n  %269 = phi i32* [ %0, %266 ], [ %252, %256 ], [ %261, %259 ]\n  store i32 %253, i32* %269, align 4, !tbaa !10\n  %270 = getelementptr inbounds i32, i32* %0, i64 13\n  %271 = load i32, i32* %270, align 4, !tbaa !10\n  %272 = load i32, i32* %0, align 4, !tbaa !10\n  %273 = icmp slt i32 %271, %272\n  br i1 %273, label %284, label %274\n\n274:                                              ; preds = %268\n  %275 = load i32, i32* %252, align 4, !tbaa !10\n  %276 = icmp slt i32 %271, %275\n  br i1 %276, label %277, label %286\n\n277:                                              ; preds = %274, %277\n  %278 = phi i32 [ %282, %277 ], [ %275, %274 ]\n  %279 = phi i32* [ %281, %277 ], [ %252, %274 ]\n  %280 = phi i32* [ %279, %277 ], [ %270, %274 ]\n  store i32 %278, i32* %280, align 4, !tbaa !10\n  %281 = getelementptr inbounds i32, i32* %279, i64 -1\n  %282 = load i32, i32* %281, align 4, !tbaa !10\n  %283 = icmp slt i32 %271, %282\n  br i1 %283, label %277, label %286, !llvm.loop !23\n\n284:                                              ; preds = %268\n  %285 = bitcast i32* %9 to i8*\n  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* noundef nonnull align 4 dereferenceable(52) %285, i8* noundef nonnull align 4 dereferenceable(52) %8, i64 52, i1 false) #8\n  br label %286\n\n286:                                              ; preds = %277, %284, %274\n  %287 = phi i32* [ %0, %284 ], [ %270, %274 ], [ %279, %277 ]\n  store i32 %271, i32* %287, align 4, !tbaa !10\n  %288 = getelementptr inbounds i32, i32* %0, i64 14\n  %289 = load i32, i32* %288, align 4, !tbaa !10\n  %290 = load i32, i32* %0, align 4, !tbaa !10\n  %291 = icmp slt i32 %289, %290\n  br i1 %291, label %302, label %292\n\n292:                                              ; preds = %286\n  %293 = load i32, i32* %270, align 4, !tbaa !10\n  %294 = icmp slt i32 %289, %293\n  br i1 %294, label %295, label %304\n\n295:                                              ; preds = %292, %295\n  %296 = phi i32 [ %300, %295 ], [ %293, %292 ]\n  %297 = phi i32* [ %299, %295 ], [ %270, %292 ]\n  %298 = phi i32* [ %297, %295 ], [ %288, %292 ]\n  store i32 %296, i32* %298, align 4, !tbaa !10\n  %299 = getelementptr inbounds i32, i32* %297, i64 -1\n  %300 = load i32, i32* %299, align 4, !tbaa !10\n  %301 = icmp slt i32 %289, %300\n  br i1 %301, label %295, label %304, !llvm.loop !23\n\n302:                                              ; preds = %286\n  %303 = bitcast i32* %9 to i8*\n  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* noundef nonnull align 4 dereferenceable(56) %303, i8* noundef nonnull align 4 dereferenceable(56) %8, i64 56, i1 false) #8\n  br label %304\n\n304:                                              ; preds = %295, %302, %292\n  %305 = phi i32* [ %0, %302 ], [ %288, %292 ], [ %297, %295 ]\n  store i32 %289, i32* %305, align 4, !tbaa !10\n  %306 = getelementptr inbounds i32, i32* %0, i64 15\n  %307 = load i32, i32* %306, align 4, !tbaa !10\n  %308 = load i32, i32* %0, align 4, !tbaa !10\n  %309 = icmp slt i32 %307, %308\n  br i1 %309, label %320, label %310\n\n310:                                              ; preds = %304\n  %311 = load i32, i32* %288, align 4, !tbaa !10\n  %312 = icmp slt i32 %307, %311\n  br i1 %312, label %313, label %322\n\n313:                                              ; preds = %310, %313\n  %314 = phi i32 [ %318, %313 ], [ %311, %310 ]\n  %315 = phi i32* [ %317, %313 ], [ %288, %310 ]\n  %316 = phi i32* [ %315, %313 ], [ %306, %310 ]\n  store i32 %314, i32* %316, align 4, !tbaa !10\n  %317 = getelementptr inbounds i32, i32* %315, i64 -1\n  %318 = load i32, i32* %317, align 4, !tbaa !10\n  %319 = icmp slt i32 %307, %318\n  br i1 %319, label %313, label %322, !llvm.loop !23\n\n320:                                              ; preds = %304\n  %321 = bitcast i32* %9 to i8*\n  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* noundef nonnull align 4 dereferenceable(60) %321, i8* noundef nonnull align 4 dereferenceable(60) %8, i64 60, i1 false) #8\n  br label %322\n\n322:                                              ; preds = %313, %320, %310\n  %323 = phi i32* [ %0, %320 ], [ %306, %310 ], [ %315, %313 ]\n  store i32 %307, i32* %323, align 4, !tbaa !10\n  %324 = getelementptr inbounds i32, i32* %0, i64 16\n  %325 = icmp eq i32* %324, %1\n  br i1 %325, label %73, label %21\n}\n\n; Function Attrs: uwtable\ndefine linkonce_odr dso_local void @_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEENS0_5__ops15_Iter_less_iterEEvT_S9_RT0_(i32* %0, i32* %1, %\"struct.__gnu_cxx::__ops::_Iter_less_iter\"* nonnull align 1 dereferenceable(1) %2) local_unnamed_addr #0 comdat {\n  %4 = ptrtoint i32* %1 to i64\n  %5 = ptrtoint i32* %0 to i64\n  %6 = sub i64 %4, %5\n  %7 = ashr exact i64 %6, 2\n  %8 = icmp slt i64 %6, 8\n  br i1 %8, label %100, label %9\n\n9:                                                ; preds = %3\n  %10 = add nsw i64 %7, -2\n  %11 = lshr i64 %10, 1\n  %12 = add nsw i64 %7, -1\n  %13 = sdiv i64 %12, 2\n  %14 = and i64 %6, 4\n  %15 = icmp eq i64 %14, 0\n  br i1 %15, label %16, label %20\n\n16:                                               ; preds = %9\n  %17 = or i64 %10, 1\n  %18 = getelementptr inbounds i32, i32* %0, i64 %17\n  %19 = getelementptr inbounds i32, i32* %0, i64 %11\n  br label %57\n\n20:                                               ; preds = %9, %52\n  %21 = phi i64 [ %56, %52 ], [ %11, %9 ]\n  %22 = getelementptr inbounds i32, i32* %0, i64 %21\n  %23 = load i32, i32* %22, align 4, !tbaa !10\n  %24 = icmp sgt i64 %13, %21\n  br i1 %24, label %25, label %52\n\n25:                                               ; preds = %20, %25\n  %26 = phi i64 [ %35, %25 ], [ %21, %20 ]\n  %27 = shl i64 %26, 1\n  %28 = add i64 %27, 2\n  %29 = getelementptr inbounds i32, i32* %0, i64 %28\n  %30 = or i64 %27, 1\n  %31 = getelementptr inbounds i32, i32* %0, i64 %30\n  %32 = load i32, i32* %29, align 4, !tbaa !10\n  %33 = load i32, i32* %31, align 4, !tbaa !10\n  %34 = icmp slt i32 %32, %33\n  %35 = select i1 %34, i64 %30, i64 %28\n  %36 = getelementptr inbounds i32, i32* %0, i64 %35\n  %37 = load i32, i32* %36, align 4, !tbaa !10\n  %38 = getelementptr inbounds i32, i32* %0, i64 %26\n  store i32 %37, i32* %38, align 4, !tbaa !10\n  %39 = icmp slt i64 %35, %13\n  br i1 %39, label %25, label %40, !llvm.loop !16\n\n40:                                               ; preds = %25\n  %41 = icmp sgt i64 %35, %21\n  br i1 %41, label %42, label %52\n\n42:                                               ; preds = %40, %49\n  %43 = phi i64 [ %45, %49 ], [ %35, %40 ]\n  %44 = add nsw i64 %43, -1\n  %45 = sdiv i64 %44, 2\n  %46 = getelementptr inbounds i32, i32* %0, i64 %45\n  %47 = load i32, i32* %46, align 4, !tbaa !10\n  %48 = icmp slt i32 %47, %23\n  br i1 %48, label %49, label %52\n\n49:                                               ; preds = %42\n  %50 = getelementptr inbounds i32, i32* %0, i64 %43\n  store i32 %47, i32* %50, align 4, !tbaa !10\n  %51 = icmp sgt i64 %45, %21\n  br i1 %51, label %42, label %52, !llvm.loop !17\n\n52:                                               ; preds = %42, %49, %20, %40\n  %53 = phi i64 [ %35, %40 ], [ %21, %20 ], [ %45, %49 ], [ %43, %42 ]\n  %54 = getelementptr inbounds i32, i32* %0, i64 %53\n  store i32 %23, i32* %54, align 4, !tbaa !10\n  %55 = icmp eq i64 %21, 0\n  %56 = add nsw i64 %21, -1\n  br i1 %55, label %100, label %20, !llvm.loop !26\n\n57:                                               ; preds = %16, %95\n  %58 = phi i64 [ %99, %95 ], [ %11, %16 ]\n  %59 = getelementptr inbounds i32, i32* %0, i64 %58\n  %60 = load i32, i32* %59, align 4, !tbaa !10\n  %61 = icmp sgt i64 %13, %58\n  br i1 %61, label %62, label %77\n\n62:                                               ; preds = %57, %62\n  %63 = phi i64 [ %72, %62 ], [ %58, %57 ]\n  %64 = shl i64 %63, 1\n  %65 = add i64 %64, 2\n  %66 = getelementptr inbounds i32, i32* %0, i64 %65\n  %67 = or i64 %64, 1\n  %68 = getelementptr inbounds i32, i32* %0, i64 %67\n  %69 = load i32, i32* %66, align 4, !tbaa !10\n  %70 = load i32, i32* %68, align 4, !tbaa !10\n  %71 = icmp slt i32 %69, %70\n  %72 = select i1 %71, i64 %67, i64 %65\n  %73 = getelementptr inbounds i32, i32* %0, i64 %72\n  %74 = load i32, i32* %73, align 4, !tbaa !10\n  %75 = getelementptr inbounds i32, i32* %0, i64 %63\n  store i32 %74, i32* %75, align 4, !tbaa !10\n  %76 = icmp slt i64 %72, %13\n  br i1 %76, label %62, label %77, !llvm.loop !16\n\n77:                                               ; preds = %62, %57\n  %78 = phi i64 [ %58, %57 ], [ %72, %62 ]\n  %79 = icmp eq i64 %78, %11\n  br i1 %79, label %80, label %82\n\n80:                                               ; preds = %77\n  %81 = load i32, i32* %18, align 4, !tbaa !10\n  store i32 %81, i32* %19, align 4, !tbaa !10\n  br label %82\n\n82:                                               ; preds = %80, %77\n  %83 = phi i64 [ %17, %80 ], [ %78, %77 ]\n  %84 = icmp sgt i64 %83, %58\n  br i1 %84, label %85, label %95\n\n85:                                               ; preds = %82, %92\n  %86 = phi i64 [ %88, %92 ], [ %83, %82 ]\n  %87 = add nsw i64 %86, -1\n  %88 = sdiv i64 %87, 2\n  %89 = getelementptr inbounds i32, i32* %0, i64 %88\n  %90 = load i32, i32* %89, align 4, !tbaa !10\n  %91 = icmp slt i32 %90, %60\n  br i1 %91, label %92, label %95\n\n92:                                               ; preds = %85\n  %93 = getelementptr inbounds i32, i32* %0, i64 %86\n  store i32 %90, i32* %93, align 4, !tbaa !10\n  %94 = icmp sgt i64 %88, %58\n  br i1 %94, label %85, label %95, !llvm.loop !17\n\n95:                                               ; preds = %85, %92, %82\n  %96 = phi i64 [ %83, %82 ], [ %88, %92 ], [ %86, %85 ]\n  %97 = getelementptr inbounds i32, i32* %0, i64 %96\n  store i32 %60, i32* %97, align 4, !tbaa !10\n  %98 = icmp eq i64 %58, 0\n  %99 = add nsw i64 %58, -1\n  br i1 %98, label %100, label %57, !llvm.loop !26\n\n100:                                              ; preds = %52, %95, %3\n  ret void\n}\n\n; Function Attrs: mustprogress nofree nosync nounwind readnone speculatable willreturn\ndeclare i64 @llvm.ctlz.i64(i64, i1 immarg) #7\n\nattributes #0 = { uwtable \"frame-pointer\"=\"none\" \"min-legal-vector-width\"=\"0\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #1 = { argmemonly mustprogress nofree nounwind willreturn writeonly }\nattributes #2 = { argmemonly mustprogress nofree nosync nounwind willreturn }\nattributes #3 = { nobuiltin nounwind \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #4 = { noreturn \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #5 = { nobuiltin allocsize(0) \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #6 = { argmemonly mustprogress nofree nounwind willreturn }\nattributes #7 = { mustprogress nofree nosync nounwind readnone speculatable willreturn }\nattributes #8 = { nounwind }\nattributes #9 = { noreturn }\nattributes #10 = { allocsize(0) }\n\n!llvm.module.flags = !{!0, !1}\n!llvm.ident = !{!2}\n\n!0 = !{i32 1, !\"wchar_size\", i32 4}\n!1 = !{i32 7, !\"uwtable\", i32 1}\n!2 = !{!\"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)\"}\n!3 = !{!4, !5, i64 8}\n!4 = !{!\"_ZTSNSt12_Vector_baseIiSaIiEE17_Vector_impl_dataE\", !5, i64 0, !5, i64 8, !5, i64 16}\n!5 = !{!\"any pointer\", !6, i64 0}\n!6 = !{!\"omnipotent char\", !7, i64 0}\n!7 = !{!\"Simple C++ TBAA\"}\n!8 = !{!4, !5, i64 0}\n!9 = !{i64 0, i64 65}\n!10 = !{!11, !11, i64 0}\n!11 = !{!\"int\", !6, i64 0}\n!12 = distinct !{!12, !13}\n!13 = !{!\"llvm.loop.mustprogress\"}\n!14 = !{!4, !5, i64 16}\n!15 = distinct !{!15, !13}\n!16 = distinct !{!16, !13}\n!17 = distinct !{!17, !13}\n!18 = distinct !{!18, !13}\n!19 = distinct !{!19, !13}\n!20 = distinct !{!20, !13}\n!21 = distinct !{!21, !13}\n!22 = distinct !{!22, !13}\n!23 = distinct !{!23, !13}\n!24 = distinct !{!24, !13}\n!25 = distinct !{!25, !13}\n!26 = distinct !{!26, !13}\n", "target": "This is the targeted source code:\n/*\nGiven a vector of positive integers x. return a sorted vector of all \nelements that hasn't any even digit.\n\nNote: Returned vector should be sorted in increasing order.\n\nFor example:\n>>> unique_digits({15, 33, 1422, 1})\n{1, 15, 33}\n>>> unique_digits({152, 323, 1422, 10})\n{}\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> unique_digits(vector<int> x){\n\n    vector<int> out={};\n    for (int i=0;i<x.size();i++)\n        {\n            int num=x[i];\n            bool u=true;\n            if (num==0) u=false;\n            while (num>0 and u)\n            {\n                if (num%2==0) u=false;\n                num=num/10;\n            }\n            if (u) out.push_back(x[i]);\n        }\n    sort(out.begin(),out.end());\n    return out;\n}\n"}
{"input": "Convert this to C++:\n; ModuleID = '../../Human_xBenchmarks_164/CPP_105/CPP_105.cpp'\nsource_filename = \"../../Human_xBenchmarks_164/CPP_105/CPP_105.cpp\"\ntarget datalayout = \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\ntarget triple = \"x86_64-unknown-linux-gnu\"\n\n%\"struct.std::piecewise_construct_t\" = type { i8 }\n%\"class.std::vector\" = type { %\"struct.std::_Vector_base\" }\n%\"struct.std::_Vector_base\" = type { %\"struct.std::_Vector_base<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char>>>::_Vector_impl\" }\n%\"struct.std::_Vector_base<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char>>>::_Vector_impl\" = type { %\"struct.std::_Vector_base<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char>>>::_Vector_impl_data\" }\n%\"struct.std::_Vector_base<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char>>>::_Vector_impl_data\" = type { %\"class.std::__cxx11::basic_string\"*, %\"class.std::__cxx11::basic_string\"*, %\"class.std::__cxx11::basic_string\"* }\n%\"class.std::__cxx11::basic_string\" = type { %\"struct.std::__cxx11::basic_string<char>::_Alloc_hider\", i64, %union.anon }\n%\"struct.std::__cxx11::basic_string<char>::_Alloc_hider\" = type { i8* }\n%union.anon = type { i64, [8 x i8] }\n%\"class.std::vector.3\" = type { %\"struct.std::_Vector_base.4\" }\n%\"struct.std::_Vector_base.4\" = type { %\"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl\" }\n%\"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl\" = type { %\"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl_data\" }\n%\"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl_data\" = type { i32*, i32*, i32* }\n%\"class.std::tuple\" = type { %\"struct.std::_Tuple_impl\" }\n%\"struct.std::_Tuple_impl\" = type { %\"struct.std::_Head_base\" }\n%\"struct.std::_Head_base\" = type { i32* }\n%\"class.std::tuple.17\" = type { i8 }\n%\"class.std::map\" = type { %\"class.std::_Rb_tree\" }\n%\"class.std::_Rb_tree\" = type { %\"struct.std::_Rb_tree<int, std::pair<const int, std::__cxx11::basic_string<char>>, std::_Select1st<std::pair<const int, std::__cxx11::basic_string<char>>>, std::less<int>>::_Rb_tree_impl\" }\n%\"struct.std::_Rb_tree<int, std::pair<const int, std::__cxx11::basic_string<char>>, std::_Select1st<std::pair<const int, std::__cxx11::basic_string<char>>>, std::less<int>>::_Rb_tree_impl\" = type { %\"struct.std::_Rb_tree_key_compare\", %\"struct.std::_Rb_tree_header\" }\n%\"struct.std::_Rb_tree_key_compare\" = type { %\"struct.std::less\" }\n%\"struct.std::less\" = type { i8 }\n%\"struct.std::_Rb_tree_header\" = type { %\"struct.std::_Rb_tree_node_base\", i64 }\n%\"struct.std::_Rb_tree_node_base\" = type { i32, %\"struct.std::_Rb_tree_node_base\"*, %\"struct.std::_Rb_tree_node_base\"*, %\"struct.std::_Rb_tree_node_base\"* }\n%\"struct.std::pair\" = type { i32, %\"class.std::__cxx11::basic_string\" }\n%\"struct.std::_Rb_tree_node\" = type { %\"struct.std::_Rb_tree_node_base\", %\"struct.__gnu_cxx::__aligned_membuf\" }\n%\"struct.__gnu_cxx::__aligned_membuf\" = type { [40 x i8] }\n%\"struct.__gnu_cxx::__ops::_Iter_less_iter\" = type { i8 }\n\n$_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED2Ev = comdat any\n\n$__clang_call_terminate = comdat any\n\n$_ZNSt8_Rb_treeIiSt4pairIKiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIiESaIS8_EED2Ev = comdat any\n\n$_ZNSt8_Rb_treeIiSt4pairIKiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIiESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E = comdat any\n\n$_ZNSt8_Rb_treeIiSt4pairIKiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIiESaIS8_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS8_E = comdat any\n\n$_ZNSt8_Rb_treeIiSt4pairIKiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIiESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS1_ = comdat any\n\n$_ZNSt8_Rb_treeIiSt4pairIKiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIiESaIS8_EE17_M_construct_nodeIJRKS8_EEEvPSt13_Rb_tree_nodeIS8_EDpOT_ = comdat any\n\n$_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEElNS0_5__ops15_Iter_less_iterEEvT_S9_T0_T1_ = comdat any\n\n$_ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_ = comdat any\n\n$_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEENS0_5__ops15_Iter_less_iterEEvT_S9_RT0_ = comdat any\n\n$_ZNSt8_Rb_treeIiSt4pairIKiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIiESaIS8_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESJ_IJEEEEESt17_Rb_tree_iteratorIS8_ESt23_Rb_tree_const_iteratorIS8_EDpOT_ = comdat any\n\n$_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_realloc_insertIJRKS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_ = comdat any\n\n@.str.1 = private unnamed_addr constant [4 x i8] c\"One\\00\", align 1\n@.str.2 = private unnamed_addr constant [4 x i8] c\"Two\\00\", align 1\n@.str.3 = private unnamed_addr constant [6 x i8] c\"Three\\00\", align 1\n@.str.6 = private unnamed_addr constant [4 x i8] c\"Six\\00\", align 1\n@.str.7 = private unnamed_addr constant [6 x i8] c\"Seven\\00\", align 1\n@.str.8 = private unnamed_addr constant [6 x i8] c\"Eight\\00\", align 1\n@_ZStL19piecewise_construct = internal constant %\"struct.std::piecewise_construct_t\" undef, align 1\n@.str.11 = private unnamed_addr constant [26 x i8] c\"vector::_M_realloc_insert\\00\", align 1\n\n; Function Attrs: uwtable\ndefine dso_local void @_Z9by_lengthB5cxx11St6vectorIiSaIiEE(%\"class.std::vector\"* noalias sret(%\"class.std::vector\") align 8 %0, %\"class.std::vector.3\"* nocapture readonly %1) local_unnamed_addr #0 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {\n  %3 = alloca i64, align 8\n  %4 = alloca %\"class.std::tuple\", align 8\n  %5 = alloca %\"class.std::tuple.17\", align 1\n  %6 = alloca %\"class.std::map\", align 8\n  %7 = alloca [10 x %\"struct.std::pair\"], align 8\n  %8 = getelementptr inbounds %\"class.std::map\", %\"class.std::map\"* %6, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0\n  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %8) #13\n  %9 = bitcast [10 x %\"struct.std::pair\"]* %7 to i8*\n  call void @llvm.lifetime.start.p0i8(i64 400, i8* nonnull %9) #13\n  %10 = getelementptr inbounds [10 x %\"struct.std::pair\"], [10 x %\"struct.std::pair\"]* %7, i64 0, i64 0\n  %11 = getelementptr inbounds [10 x %\"struct.std::pair\"], [10 x %\"struct.std::pair\"]* %7, i64 0, i64 0, i32 0\n  store i32 0, i32* %11, align 8, !tbaa !3\n  %12 = getelementptr inbounds [10 x %\"struct.std::pair\"], [10 x %\"struct.std::pair\"]* %7, i64 0, i64 0, i32 1\n  %13 = getelementptr inbounds [10 x %\"struct.std::pair\"], [10 x %\"struct.std::pair\"]* %7, i64 0, i64 0, i32 1, i32 2\n  %14 = bitcast %\"class.std::__cxx11::basic_string\"* %12 to %union.anon**\n  store %union.anon* %13, %union.anon** %14, align 8, !tbaa !12\n  %15 = bitcast %union.anon* %13 to i32*\n  store i32 1869768026, i32* %15, align 8\n  %16 = getelementptr inbounds [10 x %\"struct.std::pair\"], [10 x %\"struct.std::pair\"]* %7, i64 0, i64 0, i32 1, i32 1\n  store i64 4, i64* %16, align 8, !tbaa !13\n  %17 = bitcast %union.anon* %13 to i8*\n  %18 = getelementptr inbounds i8, i8* %17, i64 4\n  store i8 0, i8* %18, align 4, !tbaa !14\n  %19 = getelementptr inbounds [10 x %\"struct.std::pair\"], [10 x %\"struct.std::pair\"]* %7, i64 0, i64 1, i32 0\n  store i32 1, i32* %19, align 8, !tbaa !3\n  %20 = getelementptr inbounds [10 x %\"struct.std::pair\"], [10 x %\"struct.std::pair\"]* %7, i64 0, i64 1, i32 1\n  %21 = getelementptr inbounds [10 x %\"struct.std::pair\"], [10 x %\"struct.std::pair\"]* %7, i64 0, i64 1, i32 1, i32 2\n  %22 = bitcast %\"class.std::__cxx11::basic_string\"* %20 to %union.anon**\n  store %union.anon* %21, %union.anon** %22, align 8, !tbaa !12\n  %23 = bitcast %union.anon* %21 to i8*\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(3) %23, i8* noundef nonnull align 1 dereferenceable(3) getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i64 0, i64 0), i64 3, i1 false) #13\n  %24 = getelementptr inbounds [10 x %\"struct.std::pair\"], [10 x %\"struct.std::pair\"]* %7, i64 0, i64 1, i32 1, i32 1\n  store i64 3, i64* %24, align 8, !tbaa !13\n  %25 = getelementptr inbounds i8, i8* %23, i64 3\n  store i8 0, i8* %25, align 1, !tbaa !14\n  %26 = getelementptr inbounds [10 x %\"struct.std::pair\"], [10 x %\"struct.std::pair\"]* %7, i64 0, i64 2, i32 0\n  store i32 2, i32* %26, align 8, !tbaa !3\n  %27 = getelementptr inbounds [10 x %\"struct.std::pair\"], [10 x %\"struct.std::pair\"]* %7, i64 0, i64 2, i32 1\n  %28 = getelementptr inbounds [10 x %\"struct.std::pair\"], [10 x %\"struct.std::pair\"]* %7, i64 0, i64 2, i32 1, i32 2\n  %29 = bitcast %\"class.std::__cxx11::basic_string\"* %27 to %union.anon**\n  store %union.anon* %28, %union.anon** %29, align 8, !tbaa !12\n  %30 = bitcast %union.anon* %28 to i8*\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(3) %30, i8* noundef nonnull align 1 dereferenceable(3) getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i64 0, i64 0), i64 3, i1 false) #13\n  %31 = getelementptr inbounds [10 x %\"struct.std::pair\"], [10 x %\"struct.std::pair\"]* %7, i64 0, i64 2, i32 1, i32 1\n  store i64 3, i64* %31, align 8, !tbaa !13\n  %32 = getelementptr inbounds i8, i8* %30, i64 3\n  store i8 0, i8* %32, align 1, !tbaa !14\n  %33 = getelementptr inbounds [10 x %\"struct.std::pair\"], [10 x %\"struct.std::pair\"]* %7, i64 0, i64 3, i32 0\n  store i32 3, i32* %33, align 8, !tbaa !3\n  %34 = getelementptr inbounds [10 x %\"struct.std::pair\"], [10 x %\"struct.std::pair\"]* %7, i64 0, i64 3, i32 1\n  %35 = getelementptr inbounds [10 x %\"struct.std::pair\"], [10 x %\"struct.std::pair\"]* %7, i64 0, i64 3, i32 1, i32 2\n  %36 = bitcast %\"class.std::__cxx11::basic_string\"* %34 to %union.anon**\n  store %union.anon* %35, %union.anon** %36, align 8, !tbaa !12\n  %37 = bitcast %union.anon* %35 to i8*\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(5) %37, i8* noundef nonnull align 1 dereferenceable(5) getelementptr inbounds ([6 x i8], [6 x i8]* @.str.3, i64 0, i64 0), i64 5, i1 false) #13\n  %38 = getelementptr inbounds [10 x %\"struct.std::pair\"], [10 x %\"struct.std::pair\"]* %7, i64 0, i64 3, i32 1, i32 1\n  store i64 5, i64* %38, align 8, !tbaa !13\n  %39 = getelementptr inbounds i8, i8* %37, i64 5\n  store i8 0, i8* %39, align 1, !tbaa !14\n  %40 = getelementptr inbounds [10 x %\"struct.std::pair\"], [10 x %\"struct.std::pair\"]* %7, i64 0, i64 4, i32 0\n  store i32 4, i32* %40, align 8, !tbaa !3\n  %41 = getelementptr inbounds [10 x %\"struct.std::pair\"], [10 x %\"struct.std::pair\"]* %7, i64 0, i64 4, i32 1\n  %42 = getelementptr inbounds [10 x %\"struct.std::pair\"], [10 x %\"struct.std::pair\"]* %7, i64 0, i64 4, i32 1, i32 2\n  %43 = bitcast %\"class.std::__cxx11::basic_string\"* %41 to %union.anon**\n  store %union.anon* %42, %union.anon** %43, align 8, !tbaa !12\n  %44 = bitcast %union.anon* %42 to i32*\n  store i32 1920298822, i32* %44, align 8\n  %45 = getelementptr inbounds [10 x %\"struct.std::pair\"], [10 x %\"struct.std::pair\"]* %7, i64 0, i64 4, i32 1, i32 1\n  store i64 4, i64* %45, align 8, !tbaa !13\n  %46 = bitcast %union.anon* %42 to i8*\n  %47 = getelementptr inbounds i8, i8* %46, i64 4\n  store i8 0, i8* %47, align 4, !tbaa !14\n  %48 = getelementptr inbounds [10 x %\"struct.std::pair\"], [10 x %\"struct.std::pair\"]* %7, i64 0, i64 5, i32 0\n  store i32 5, i32* %48, align 8, !tbaa !3\n  %49 = getelementptr inbounds [10 x %\"struct.std::pair\"], [10 x %\"struct.std::pair\"]* %7, i64 0, i64 5, i32 1\n  %50 = getelementptr inbounds [10 x %\"struct.std::pair\"], [10 x %\"struct.std::pair\"]* %7, i64 0, i64 5, i32 1, i32 2\n  %51 = bitcast %\"class.std::__cxx11::basic_string\"* %49 to %union.anon**\n  store %union.anon* %50, %union.anon** %51, align 8, !tbaa !12\n  %52 = bitcast %union.anon* %50 to i32*\n  store i32 1702259014, i32* %52, align 8\n  %53 = getelementptr inbounds [10 x %\"struct.std::pair\"], [10 x %\"struct.std::pair\"]* %7, i64 0, i64 5, i32 1, i32 1\n  store i64 4, i64* %53, align 8, !tbaa !13\n  %54 = bitcast %union.anon* %50 to i8*\n  %55 = getelementptr inbounds i8, i8* %54, i64 4\n  store i8 0, i8* %55, align 4, !tbaa !14\n  %56 = getelementptr inbounds [10 x %\"struct.std::pair\"], [10 x %\"struct.std::pair\"]* %7, i64 0, i64 6, i32 0\n  store i32 6, i32* %56, align 8, !tbaa !3\n  %57 = getelementptr inbounds [10 x %\"struct.std::pair\"], [10 x %\"struct.std::pair\"]* %7, i64 0, i64 6, i32 1\n  %58 = getelementptr inbounds [10 x %\"struct.std::pair\"], [10 x %\"struct.std::pair\"]* %7, i64 0, i64 6, i32 1, i32 2\n  %59 = bitcast %\"class.std::__cxx11::basic_string\"* %57 to %union.anon**\n  store %union.anon* %58, %union.anon** %59, align 8, !tbaa !12\n  %60 = bitcast %union.anon* %58 to i8*\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(3) %60, i8* noundef nonnull align 1 dereferenceable(3) getelementptr inbounds ([4 x i8], [4 x i8]* @.str.6, i64 0, i64 0), i64 3, i1 false) #13\n  %61 = getelementptr inbounds [10 x %\"struct.std::pair\"], [10 x %\"struct.std::pair\"]* %7, i64 0, i64 6, i32 1, i32 1\n  store i64 3, i64* %61, align 8, !tbaa !13\n  %62 = getelementptr inbounds i8, i8* %60, i64 3\n  store i8 0, i8* %62, align 1, !tbaa !14\n  %63 = getelementptr inbounds [10 x %\"struct.std::pair\"], [10 x %\"struct.std::pair\"]* %7, i64 0, i64 7, i32 0\n  store i32 7, i32* %63, align 8, !tbaa !3\n  %64 = getelementptr inbounds [10 x %\"struct.std::pair\"], [10 x %\"struct.std::pair\"]* %7, i64 0, i64 7, i32 1\n  %65 = getelementptr inbounds [10 x %\"struct.std::pair\"], [10 x %\"struct.std::pair\"]* %7, i64 0, i64 7, i32 1, i32 2\n  %66 = bitcast %\"class.std::__cxx11::basic_string\"* %64 to %union.anon**\n  store %union.anon* %65, %union.anon** %66, align 8, !tbaa !12\n  %67 = bitcast %union.anon* %65 to i8*\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(5) %67, i8* noundef nonnull align 1 dereferenceable(5) getelementptr inbounds ([6 x i8], [6 x i8]* @.str.7, i64 0, i64 0), i64 5, i1 false) #13\n  %68 = getelementptr inbounds [10 x %\"struct.std::pair\"], [10 x %\"struct.std::pair\"]* %7, i64 0, i64 7, i32 1, i32 1\n  store i64 5, i64* %68, align 8, !tbaa !13\n  %69 = getelementptr inbounds i8, i8* %67, i64 5\n  store i8 0, i8* %69, align 1, !tbaa !14\n  %70 = getelementptr inbounds [10 x %\"struct.std::pair\"], [10 x %\"struct.std::pair\"]* %7, i64 0, i64 8, i32 0\n  store i32 8, i32* %70, align 8, !tbaa !3\n  %71 = getelementptr inbounds [10 x %\"struct.std::pair\"], [10 x %\"struct.std::pair\"]* %7, i64 0, i64 8, i32 1\n  %72 = getelementptr inbounds [10 x %\"struct.std::pair\"], [10 x %\"struct.std::pair\"]* %7, i64 0, i64 8, i32 1, i32 2\n  %73 = bitcast %\"class.std::__cxx11::basic_string\"* %71 to %union.anon**\n  store %union.anon* %72, %union.anon** %73, align 8, !tbaa !12\n  %74 = bitcast %union.anon* %72 to i8*\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(5) %74, i8* noundef nonnull align 1 dereferenceable(5) getelementptr inbounds ([6 x i8], [6 x i8]* @.str.8, i64 0, i64 0), i64 5, i1 false) #13\n  %75 = getelementptr inbounds [10 x %\"struct.std::pair\"], [10 x %\"struct.std::pair\"]* %7, i64 0, i64 8, i32 1, i32 1\n  store i64 5, i64* %75, align 8, !tbaa !13\n  %76 = getelementptr inbounds i8, i8* %74, i64 5\n  store i8 0, i8* %76, align 1, !tbaa !14\n  %77 = getelementptr inbounds [10 x %\"struct.std::pair\"], [10 x %\"struct.std::pair\"]* %7, i64 0, i64 9, i32 0\n  store i32 9, i32* %77, align 8, !tbaa !3\n  %78 = getelementptr inbounds [10 x %\"struct.std::pair\"], [10 x %\"struct.std::pair\"]* %7, i64 0, i64 9, i32 1\n  %79 = getelementptr inbounds [10 x %\"struct.std::pair\"], [10 x %\"struct.std::pair\"]* %7, i64 0, i64 9, i32 1, i32 2\n  %80 = bitcast %\"class.std::__cxx11::basic_string\"* %78 to %union.anon**\n  store %union.anon* %79, %union.anon** %80, align 8, !tbaa !12\n  %81 = bitcast %union.anon* %79 to i32*\n  store i32 1701734734, i32* %81, align 8\n  %82 = getelementptr inbounds [10 x %\"struct.std::pair\"], [10 x %\"struct.std::pair\"]* %7, i64 0, i64 9, i32 1, i32 1\n  store i64 4, i64* %82, align 8, !tbaa !13\n  %83 = bitcast %union.anon* %79 to i8*\n  %84 = getelementptr inbounds i8, i8* %83, i64 4\n  store i8 0, i8* %84, align 4, !tbaa !14\n  %85 = getelementptr inbounds %\"class.std::map\", %\"class.std::map\"* %6, i64 0, i32 0\n  %86 = getelementptr inbounds i8, i8* %8, i64 8\n  %87 = bitcast i8* %86 to i32*\n  store i32 0, i32* %87, align 8, !tbaa !15\n  %88 = getelementptr inbounds i8, i8* %8, i64 16\n  %89 = bitcast i8* %88 to %\"struct.std::_Rb_tree_node_base\"**\n  store %\"struct.std::_Rb_tree_node_base\"* null, %\"struct.std::_Rb_tree_node_base\"** %89, align 8, !tbaa !19\n  %90 = getelementptr inbounds i8, i8* %8, i64 24\n  %91 = bitcast i8* %90 to i8**\n  store i8* %86, i8** %91, align 8, !tbaa !20\n  %92 = getelementptr inbounds i8, i8* %8, i64 32\n  %93 = bitcast i8* %92 to i8**\n  store i8* %86, i8** %93, align 8, !tbaa !21\n  %94 = getelementptr inbounds i8, i8* %8, i64 40\n  %95 = bitcast i8* %94 to i64*\n  store i64 0, i64* %95, align 8, !tbaa !22\n  %96 = getelementptr inbounds [10 x %\"struct.std::pair\"], [10 x %\"struct.std::pair\"]* %7, i64 0, i64 10\n  %97 = bitcast i8* %86 to %\"struct.std::_Rb_tree_node_base\"*\n  %98 = bitcast i8* %92 to %\"struct.std::_Rb_tree_node_base\"**\n  %99 = bitcast i8* %88 to %\"struct.std::_Rb_tree_node\"**\n  %100 = bitcast i8* %90 to %\"struct.std::_Rb_tree_node_base\"**\n  br label %101\n\n101:                                              ; preds = %164, %2\n  %102 = phi i64 [ %165, %164 ], [ 0, %2 ]\n  %103 = phi %\"struct.std::pair\"* [ %166, %164 ], [ %10, %2 ]\n  %104 = getelementptr inbounds %\"struct.std::pair\", %\"struct.std::pair\"* %103, i64 0, i32 0\n  %105 = icmp eq i64 %102, 0\n  br i1 %105, label %106, label %108\n\n106:                                              ; preds = %101\n  %107 = load i32, i32* %104, align 4\n  br label %114\n\n108:                                              ; preds = %101\n  %109 = load %\"struct.std::_Rb_tree_node_base\"*, %\"struct.std::_Rb_tree_node_base\"** %98, align 8, !tbaa !23\n  %110 = getelementptr inbounds %\"struct.std::_Rb_tree_node_base\", %\"struct.std::_Rb_tree_node_base\"* %109, i64 1, i32 0\n  %111 = load i32, i32* %110, align 4, !tbaa !24\n  %112 = load i32, i32* %104, align 4, !tbaa !24\n  %113 = icmp slt i32 %111, %112\n  br i1 %113, label %147, label %114\n\n114:                                              ; preds = %108, %106\n  %115 = phi i32 [ %107, %106 ], [ %112, %108 ]\n  %116 = load %\"struct.std::_Rb_tree_node\"*, %\"struct.std::_Rb_tree_node\"** %99, align 8, !tbaa !23\n  %117 = icmp eq %\"struct.std::_Rb_tree_node\"* %116, null\n  br i1 %117, label %132, label %118\n\n118:                                              ; preds = %114, %118\n  %119 = phi %\"struct.std::_Rb_tree_node\"* [ %128, %118 ], [ %116, %114 ]\n  %120 = getelementptr inbounds %\"struct.std::_Rb_tree_node\", %\"struct.std::_Rb_tree_node\"* %119, i64 0, i32 1\n  %121 = bitcast %\"struct.__gnu_cxx::__aligned_membuf\"* %120 to i32*\n  %122 = load i32, i32* %121, align 4, !tbaa !24\n  %123 = icmp slt i32 %115, %122\n  %124 = getelementptr inbounds %\"struct.std::_Rb_tree_node\", %\"struct.std::_Rb_tree_node\"* %119, i64 0, i32 0, i32 2\n  %125 = getelementptr inbounds %\"struct.std::_Rb_tree_node\", %\"struct.std::_Rb_tree_node\"* %119, i64 0, i32 0, i32 3\n  %126 = select i1 %123, %\"struct.std::_Rb_tree_node_base\"** %124, %\"struct.std::_Rb_tree_node_base\"** %125\n  %127 = bitcast %\"struct.std::_Rb_tree_node_base\"** %126 to %\"struct.std::_Rb_tree_node\"**\n  %128 = load %\"struct.std::_Rb_tree_node\"*, %\"struct.std::_Rb_tree_node\"** %127, align 8, !tbaa !23\n  %129 = icmp eq %\"struct.std::_Rb_tree_node\"* %128, null\n  br i1 %129, label %130, label %118, !llvm.loop !25\n\n130:                                              ; preds = %118\n  %131 = getelementptr %\"struct.std::_Rb_tree_node\", %\"struct.std::_Rb_tree_node\"* %119, i64 0, i32 0\n  br i1 %123, label %132, label %138\n\n132:                                              ; preds = %130, %114\n  %133 = phi %\"struct.std::_Rb_tree_node_base\"* [ %131, %130 ], [ %97, %114 ]\n  %134 = load %\"struct.std::_Rb_tree_node_base\"*, %\"struct.std::_Rb_tree_node_base\"** %100, align 8, !tbaa !20\n  %135 = icmp eq %\"struct.std::_Rb_tree_node_base\"* %133, %134\n  br i1 %135, label %144, label %136\n\n136:                                              ; preds = %132\n  %137 = call %\"struct.std::_Rb_tree_node_base\"* @_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base(%\"struct.std::_Rb_tree_node_base\"* %133) #14\n  br label %138\n\n138:                                              ; preds = %136, %130\n  %139 = phi %\"struct.std::_Rb_tree_node_base\"* [ %133, %136 ], [ %131, %130 ]\n  %140 = phi %\"struct.std::_Rb_tree_node_base\"* [ %137, %136 ], [ %131, %130 ]\n  %141 = getelementptr inbounds %\"struct.std::_Rb_tree_node_base\", %\"struct.std::_Rb_tree_node_base\"* %140, i64 1, i32 0\n  %142 = load i32, i32* %141, align 4, !tbaa !24\n  %143 = icmp slt i32 %142, %115\n  br i1 %143, label %144, label %164\n\n144:                                              ; preds = %138, %132\n  %145 = phi %\"struct.std::_Rb_tree_node_base\"* [ %133, %132 ], [ %139, %138 ]\n  %146 = icmp eq %\"struct.std::_Rb_tree_node_base\"* %145, null\n  br i1 %146, label %164, label %147\n\n147:                                              ; preds = %108, %144\n  %148 = phi i32 [ %115, %144 ], [ %112, %108 ]\n  %149 = phi %\"struct.std::_Rb_tree_node_base\"* [ %145, %144 ], [ %109, %108 ]\n  %150 = icmp eq %\"struct.std::_Rb_tree_node_base\"* %149, %97\n  br i1 %150, label %155, label %151\n\n151:                                              ; preds = %147\n  %152 = getelementptr inbounds %\"struct.std::_Rb_tree_node_base\", %\"struct.std::_Rb_tree_node_base\"* %149, i64 1, i32 0\n  %153 = load i32, i32* %152, align 4, !tbaa !24\n  %154 = icmp slt i32 %148, %153\n  br label %155\n\n155:                                              ; preds = %151, %147\n  %156 = phi i1 [ %154, %151 ], [ true, %147 ]\n  %157 = invoke noalias nonnull i8* @_Znwm(i64 72) #15\n          to label %158 unwind label %168\n\n158:                                              ; preds = %155\n  %159 = bitcast i8* %157 to %\"struct.std::_Rb_tree_node\"*\n  invoke void @_ZNSt8_Rb_treeIiSt4pairIKiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIiESaIS8_EE17_M_construct_nodeIJRKS8_EEEvPSt13_Rb_tree_nodeIS8_EDpOT_(%\"class.std::_Rb_tree\"* nonnull align 8 dereferenceable(48) %85, %\"struct.std::_Rb_tree_node\"* nonnull %159, %\"struct.std::pair\"* nonnull align 8 dereferenceable(40) %103)\n          to label %160 unwind label %168\n\n160:                                              ; preds = %158\n  %161 = bitcast i8* %157 to %\"struct.std::_Rb_tree_node_base\"*\n  call void @_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_(i1 zeroext %156, %\"struct.std::_Rb_tree_node_base\"* nonnull %161, %\"struct.std::_Rb_tree_node_base\"* nonnull %149, %\"struct.std::_Rb_tree_node_base\"* nonnull align 8 dereferenceable(32) %97) #13\n  %162 = load i64, i64* %95, align 8, !tbaa !22\n  %163 = add i64 %162, 1\n  store i64 %163, i64* %95, align 8, !tbaa !22\n  br label %164\n\n164:                                              ; preds = %138, %160, %144\n  %165 = phi i64 [ %102, %138 ], [ %163, %160 ], [ %102, %144 ]\n  %166 = getelementptr inbounds %\"struct.std::pair\", %\"struct.std::pair\"* %103, i64 1\n  %167 = icmp eq %\"struct.std::pair\"* %166, %96\n  br i1 %167, label %175, label %101, !llvm.loop !27\n\n168:                                              ; preds = %158, %155\n  %169 = landingpad { i8*, i32 }\n          cleanup\n  call void @_ZNSt8_Rb_treeIiSt4pairIKiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIiESaIS8_EED2Ev(%\"class.std::_Rb_tree\"* nonnull align 8 dereferenceable(48) %85) #13\n  %170 = getelementptr inbounds [10 x %\"struct.std::pair\"], [10 x %\"struct.std::pair\"]* %7, i64 0, i64 9, i32 1, i32 0, i32 0\n  %171 = load i8*, i8** %170, align 8, !tbaa !28\n  %172 = getelementptr inbounds [10 x %\"struct.std::pair\"], [10 x %\"struct.std::pair\"]* %7, i64 0, i64 9, i32 1, i32 2\n  %173 = bitcast %union.anon* %172 to i8*\n  %174 = icmp eq i8* %171, %173\n  br i1 %174, label %218, label %217\n\n175:                                              ; preds = %164\n  %176 = getelementptr inbounds [10 x %\"struct.std::pair\"], [10 x %\"struct.std::pair\"]* %7, i64 0, i64 9, i32 1, i32 0, i32 0\n  %177 = load i8*, i8** %176, align 8, !tbaa !28\n  %178 = getelementptr inbounds [10 x %\"struct.std::pair\"], [10 x %\"struct.std::pair\"]* %7, i64 0, i64 9, i32 1, i32 2\n  %179 = bitcast %union.anon* %178 to i8*\n  %180 = icmp eq i8* %177, %179\n  br i1 %180, label %182, label %181\n\n181:                                              ; preds = %175\n  call void @_ZdlPv(i8* %177) #13\n  br label %182\n\n182:                                              ; preds = %175, %181\n  %183 = getelementptr inbounds [10 x %\"struct.std::pair\"], [10 x %\"struct.std::pair\"]* %7, i64 0, i64 8, i32 1, i32 0, i32 0\n  %184 = load i8*, i8** %183, align 8, !tbaa !28\n  %185 = getelementptr inbounds [10 x %\"struct.std::pair\"], [10 x %\"struct.std::pair\"]* %7, i64 0, i64 8, i32 1, i32 2\n  %186 = bitcast %union.anon* %185 to i8*\n  %187 = icmp eq i8* %184, %186\n  br i1 %187, label %378, label %377\n\n188:                                              ; preds = %434\n  %189 = ptrtoint i32* %438 to i64\n  %190 = ptrtoint i32* %436 to i64\n  %191 = sub i64 %189, %190\n  %192 = ashr exact i64 %191, 2\n  %193 = call i64 @llvm.ctlz.i64(i64 %192, i1 true) #13, !range !29\n  %194 = shl nuw nsw i64 %193, 1\n  %195 = xor i64 %194, 126\n  invoke void @_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEElNS0_5__ops15_Iter_less_iterEEvT_S9_T0_T1_(i32* %436, i32* %438, i64 %195)\n          to label %196 unwind label %224\n\n196:                                              ; preds = %188\n  invoke void @_ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_(i32* %436, i32* %438)\n          to label %197 unwind label %224\n\n197:                                              ; preds = %196\n  %198 = load i32*, i32** %437, align 8, !tbaa !30\n  %199 = load i32*, i32** %435, align 8, !tbaa !32\n  br label %200\n\n200:                                              ; preds = %197, %434\n  %201 = phi i32* [ %199, %197 ], [ %436, %434 ]\n  %202 = phi i32* [ %198, %197 ], [ %436, %434 ]\n  %203 = ptrtoint i32* %202 to i64\n  %204 = ptrtoint i32* %201 to i64\n  %205 = sub i64 %203, %204\n  %206 = lshr exact i64 %205, 2\n  %207 = trunc i64 %206 to i32\n  %208 = bitcast %\"class.std::tuple\"* %4 to i8*\n  %209 = getelementptr inbounds %\"class.std::tuple\", %\"class.std::tuple\"* %4, i64 0, i32 0, i32 0, i32 0\n  %210 = getelementptr inbounds %\"class.std::tuple.17\", %\"class.std::tuple.17\"* %5, i64 0, i32 0\n  %211 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0, i64 0, i32 0, i32 0, i32 0, i32 1\n  %212 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0, i64 0, i32 0, i32 0, i32 0, i32 2\n  %213 = bitcast i64* %3 to i8*\n  %214 = add i32 %207, -1\n  %215 = icmp sgt i32 %214, -1\n  %216 = bitcast %\"class.std::vector\"* %0 to i8*\n  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(24) %216, i8 0, i64 24, i1 false)\n  br i1 %215, label %226, label %309\n\n217:                                              ; preds = %168\n  call void @_ZdlPv(i8* %171) #13\n  br label %218\n\n218:                                              ; preds = %168, %217\n  %219 = getelementptr inbounds [10 x %\"struct.std::pair\"], [10 x %\"struct.std::pair\"]* %7, i64 0, i64 8, i32 1, i32 0, i32 0\n  %220 = load i8*, i8** %219, align 8, !tbaa !28\n  %221 = getelementptr inbounds [10 x %\"struct.std::pair\"], [10 x %\"struct.std::pair\"]* %7, i64 0, i64 8, i32 1, i32 2\n  %222 = bitcast %union.anon* %221 to i8*\n  %223 = icmp eq i8* %220, %222\n  br i1 %223, label %320, label %319\n\n224:                                              ; preds = %196, %188\n  %225 = landingpad { i8*, i32 }\n          cleanup\n  br label %315\n\n226:                                              ; preds = %200, %307\n  %227 = phi i32* [ %308, %307 ], [ %201, %200 ]\n  %228 = phi i32 [ %305, %307 ], [ %214, %200 ]\n  %229 = zext i32 %228 to i64\n  %230 = getelementptr inbounds i32, i32* %227, i64 %229\n  %231 = load i32, i32* %230, align 4, !tbaa !24\n  %232 = add i32 %231, -1\n  %233 = icmp ult i32 %232, 9\n  br i1 %233, label %234, label %304\n\n234:                                              ; preds = %226\n  %235 = load %\"struct.std::_Rb_tree_node\"*, %\"struct.std::_Rb_tree_node\"** %99, align 8, !tbaa !19\n  %236 = icmp eq %\"struct.std::_Rb_tree_node\"* %235, null\n  br i1 %236, label %260, label %237\n\n237:                                              ; preds = %234, %237\n  %238 = phi %\"struct.std::_Rb_tree_node\"* [ %250, %237 ], [ %235, %234 ]\n  %239 = phi %\"struct.std::_Rb_tree_node_base\"* [ %247, %237 ], [ %97, %234 ]\n  %240 = getelementptr inbounds %\"struct.std::_Rb_tree_node\", %\"struct.std::_Rb_tree_node\"* %238, i64 0, i32 1\n  %241 = bitcast %\"struct.__gnu_cxx::__aligned_membuf\"* %240 to i32*\n  %242 = load i32, i32* %241, align 4, !tbaa !24\n  %243 = icmp slt i32 %242, %231\n  %244 = getelementptr inbounds %\"struct.std::_Rb_tree_node\", %\"struct.std::_Rb_tree_node\"* %238, i64 0, i32 0, i32 3\n  %245 = getelementptr %\"struct.std::_Rb_tree_node\", %\"struct.std::_Rb_tree_node\"* %238, i64 0, i32 0\n  %246 = getelementptr inbounds %\"struct.std::_Rb_tree_node\", %\"struct.std::_Rb_tree_node\"* %238, i64 0, i32 0, i32 2\n  %247 = select i1 %243, %\"struct.std::_Rb_tree_node_base\"* %239, %\"struct.std::_Rb_tree_node_base\"* %245\n  %248 = select i1 %243, %\"struct.std::_Rb_tree_node_base\"** %244, %\"struct.std::_Rb_tree_node_base\"** %246\n  %249 = bitcast %\"struct.std::_Rb_tree_node_base\"** %248 to %\"struct.std::_Rb_tree_node\"**\n  %250 = load %\"struct.std::_Rb_tree_node\"*, %\"struct.std::_Rb_tree_node\"** %249, align 8, !tbaa !23\n  %251 = icmp eq %\"struct.std::_Rb_tree_node\"* %250, null\n  br i1 %251, label %252, label %237, !llvm.loop !33\n\n252:                                              ; preds = %237\n  %253 = icmp eq %\"struct.std::_Rb_tree_node_base\"* %247, %97\n  br i1 %253, label %260, label %254\n\n254:                                              ; preds = %252\n  %255 = getelementptr inbounds %\"struct.std::_Rb_tree_node_base\", %\"struct.std::_Rb_tree_node_base\"* %239, i64 1, i32 0\n  %256 = getelementptr inbounds %\"struct.std::_Rb_tree_node_base\", %\"struct.std::_Rb_tree_node_base\"* %245, i64 1, i32 0\n  %257 = select i1 %243, i32* %255, i32* %256\n  %258 = load i32, i32* %257, align 4, !tbaa !24\n  %259 = icmp slt i32 %231, %258\n  br i1 %259, label %260, label %264\n\n260:                                              ; preds = %254, %252, %234\n  %261 = phi %\"struct.std::_Rb_tree_node_base\"* [ %247, %254 ], [ %97, %252 ], [ %97, %234 ]\n  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %208) #13\n  store i32* %230, i32** %209, align 8, !tbaa !23\n  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %210) #13\n  %262 = invoke %\"struct.std::_Rb_tree_node_base\"* @_ZNSt8_Rb_treeIiSt4pairIKiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIiESaIS8_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESJ_IJEEEEESt17_Rb_tree_iteratorIS8_ESt23_Rb_tree_const_iteratorIS8_EDpOT_(%\"class.std::_Rb_tree\"* nonnull align 8 dereferenceable(48) %85, %\"struct.std::_Rb_tree_node_base\"* %261, %\"struct.std::piecewise_construct_t\"* nonnull align 1 dereferenceable(1) @_ZStL19piecewise_construct, %\"class.std::tuple\"* nonnull align 8 dereferenceable(8) %4, %\"class.std::tuple.17\"* nonnull align 1 dereferenceable(1) %5)\n          to label %263 unwind label %302\n\n263:                                              ; preds = %260\n  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %210) #13\n  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %208) #13\n  br label %264\n\n264:                                              ; preds = %263, %254\n  %265 = phi %\"struct.std::_Rb_tree_node_base\"* [ %262, %263 ], [ %247, %254 ]\n  %266 = getelementptr inbounds %\"struct.std::_Rb_tree_node_base\", %\"struct.std::_Rb_tree_node_base\"* %265, i64 1, i32 1\n  %267 = load %\"class.std::__cxx11::basic_string\"*, %\"class.std::__cxx11::basic_string\"** %211, align 8, !tbaa !34\n  %268 = load %\"class.std::__cxx11::basic_string\"*, %\"class.std::__cxx11::basic_string\"** %212, align 8, !tbaa !36\n  %269 = icmp eq %\"class.std::__cxx11::basic_string\"* %267, %268\n  br i1 %269, label %300, label %270\n\n270:                                              ; preds = %264\n  %271 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %267, i64 0, i32 2\n  %272 = bitcast %\"class.std::__cxx11::basic_string\"* %267 to %union.anon**\n  store %union.anon* %271, %union.anon** %272, align 8, !tbaa !12\n  %273 = bitcast %\"struct.std::_Rb_tree_node_base\"** %266 to i8**\n  %274 = load i8*, i8** %273, align 8, !tbaa !28\n  %275 = getelementptr inbounds %\"struct.std::_Rb_tree_node_base\"*, %\"struct.std::_Rb_tree_node_base\"** %266, i64 1\n  %276 = bitcast %\"struct.std::_Rb_tree_node_base\"** %275 to i64*\n  %277 = load i64, i64* %276, align 8, !tbaa !13\n  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %213) #13\n  store i64 %277, i64* %3, align 8, !tbaa !37\n  %278 = icmp ugt i64 %277, 15\n  br i1 %278, label %281, label %279\n\n279:                                              ; preds = %270\n  %280 = bitcast %union.anon* %271 to i8*\n  br label %287\n\n281:                                              ; preds = %270\n  %282 = invoke i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %267, i64* nonnull align 8 dereferenceable(8) %3, i64 0)\n          to label %283 unwind label %302\n\n283:                                              ; preds = %281\n  %284 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %267, i64 0, i32 0, i32 0\n  store i8* %282, i8** %284, align 8, !tbaa !28\n  %285 = load i64, i64* %3, align 8, !tbaa !37\n  %286 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %267, i64 0, i32 2, i32 0\n  store i64 %285, i64* %286, align 8, !tbaa !14\n  br label %287\n\n287:                                              ; preds = %283, %279\n  %288 = phi i8* [ %280, %279 ], [ %282, %283 ]\n  switch i64 %277, label %291 [\n    i64 1, label %289\n    i64 0, label %292\n  ]\n\n289:                                              ; preds = %287\n  %290 = load i8, i8* %274, align 1, !tbaa !14\n  store i8 %290, i8* %288, align 1, !tbaa !14\n  br label %292\n\n291:                                              ; preds = %287\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %288, i8* align 1 %274, i64 %277, i1 false) #13\n  br label %292\n\n292:                                              ; preds = %291, %289, %287\n  %293 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %267, i64 0, i32 0, i32 0\n  %294 = load i64, i64* %3, align 8, !tbaa !37\n  %295 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %267, i64 0, i32 1\n  store i64 %294, i64* %295, align 8, !tbaa !13\n  %296 = load i8*, i8** %293, align 8, !tbaa !28\n  %297 = getelementptr inbounds i8, i8* %296, i64 %294\n  store i8 0, i8* %297, align 1, !tbaa !14\n  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %213) #13\n  %298 = load %\"class.std::__cxx11::basic_string\"*, %\"class.std::__cxx11::basic_string\"** %211, align 8, !tbaa !34\n  %299 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %298, i64 1\n  store %\"class.std::__cxx11::basic_string\"* %299, %\"class.std::__cxx11::basic_string\"** %211, align 8, !tbaa !34\n  br label %304\n\n300:                                              ; preds = %264\n  %301 = bitcast %\"struct.std::_Rb_tree_node_base\"** %266 to %\"class.std::__cxx11::basic_string\"*\n  invoke void @_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_realloc_insertIJRKS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_(%\"class.std::vector\"* nonnull align 8 dereferenceable(24) %0, %\"class.std::__cxx11::basic_string\"* %267, %\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %301)\n          to label %304 unwind label %302\n\n302:                                              ; preds = %300, %281, %260\n  %303 = landingpad { i8*, i32 }\n          cleanup\n  call void @_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED2Ev(%\"class.std::vector\"* nonnull align 8 dereferenceable(24) %0) #13\n  br label %315\n\n304:                                              ; preds = %292, %300, %226\n  %305 = add i32 %228, -1\n  %306 = icmp sgt i32 %305, -1\n  br i1 %306, label %307, label %309, !llvm.loop !38\n\n307:                                              ; preds = %304\n  %308 = load i32*, i32** %435, align 8, !tbaa !32\n  br label %226\n\n309:                                              ; preds = %304, %200\n  %310 = load %\"struct.std::_Rb_tree_node\"*, %\"struct.std::_Rb_tree_node\"** %99, align 8, !tbaa !19\n  invoke void @_ZNSt8_Rb_treeIiSt4pairIKiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIiESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E(%\"class.std::_Rb_tree\"* nonnull align 8 dereferenceable(48) %85, %\"struct.std::_Rb_tree_node\"* %310)\n          to label %314 unwind label %311\n\n311:                                              ; preds = %309\n  %312 = landingpad { i8*, i32 }\n          catch i8* null\n  %313 = extractvalue { i8*, i32 } %312, 0\n  call void @__clang_call_terminate(i8* %313) #16\n  unreachable\n\n314:                                              ; preds = %309\n  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %8) #13\n  ret void\n\n315:                                              ; preds = %302, %224\n  %316 = phi { i8*, i32 } [ %303, %302 ], [ %225, %224 ]\n  call void @_ZNSt8_Rb_treeIiSt4pairIKiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIiESaIS8_EED2Ev(%\"class.std::_Rb_tree\"* nonnull align 8 dereferenceable(48) %85) #13\n  br label %317\n\n317:                                              ; preds = %315, %376\n  %318 = phi { i8*, i32 } [ %316, %315 ], [ %169, %376 ]\n  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %8) #13\n  resume { i8*, i32 } %318\n\n319:                                              ; preds = %218\n  call void @_ZdlPv(i8* %220) #13\n  br label %320\n\n320:                                              ; preds = %319, %218\n  %321 = getelementptr inbounds [10 x %\"struct.std::pair\"], [10 x %\"struct.std::pair\"]* %7, i64 0, i64 7, i32 1, i32 0, i32 0\n  %322 = load i8*, i8** %321, align 8, !tbaa !28\n  %323 = getelementptr inbounds [10 x %\"struct.std::pair\"], [10 x %\"struct.std::pair\"]* %7, i64 0, i64 7, i32 1, i32 2\n  %324 = bitcast %union.anon* %323 to i8*\n  %325 = icmp eq i8* %322, %324\n  br i1 %325, label %327, label %326\n\n326:                                              ; preds = %320\n  call void @_ZdlPv(i8* %322) #13\n  br label %327\n\n327:                                              ; preds = %326, %320\n  %328 = getelementptr inbounds [10 x %\"struct.std::pair\"], [10 x %\"struct.std::pair\"]* %7, i64 0, i64 6, i32 1, i32 0, i32 0\n  %329 = load i8*, i8** %328, align 8, !tbaa !28\n  %330 = getelementptr inbounds [10 x %\"struct.std::pair\"], [10 x %\"struct.std::pair\"]* %7, i64 0, i64 6, i32 1, i32 2\n  %331 = bitcast %union.anon* %330 to i8*\n  %332 = icmp eq i8* %329, %331\n  br i1 %332, label %334, label %333\n\n333:                                              ; preds = %327\n  call void @_ZdlPv(i8* %329) #13\n  br label %334\n\n334:                                              ; preds = %333, %327\n  %335 = getelementptr inbounds [10 x %\"struct.std::pair\"], [10 x %\"struct.std::pair\"]* %7, i64 0, i64 5, i32 1, i32 0, i32 0\n  %336 = load i8*, i8** %335, align 8, !tbaa !28\n  %337 = getelementptr inbounds [10 x %\"struct.std::pair\"], [10 x %\"struct.std::pair\"]* %7, i64 0, i64 5, i32 1, i32 2\n  %338 = bitcast %union.anon* %337 to i8*\n  %339 = icmp eq i8* %336, %338\n  br i1 %339, label %341, label %340\n\n340:                                              ; preds = %334\n  call void @_ZdlPv(i8* %336) #13\n  br label %341\n\n341:                                              ; preds = %340, %334\n  %342 = getelementptr inbounds [10 x %\"struct.std::pair\"], [10 x %\"struct.std::pair\"]* %7, i64 0, i64 4, i32 1, i32 0, i32 0\n  %343 = load i8*, i8** %342, align 8, !tbaa !28\n  %344 = getelementptr inbounds [10 x %\"struct.std::pair\"], [10 x %\"struct.std::pair\"]* %7, i64 0, i64 4, i32 1, i32 2\n  %345 = bitcast %union.anon* %344 to i8*\n  %346 = icmp eq i8* %343, %345\n  br i1 %346, label %348, label %347\n\n347:                                              ; preds = %341\n  call void @_ZdlPv(i8* %343) #13\n  br label %348\n\n348:                                              ; preds = %347, %341\n  %349 = getelementptr inbounds [10 x %\"struct.std::pair\"], [10 x %\"struct.std::pair\"]* %7, i64 0, i64 3, i32 1, i32 0, i32 0\n  %350 = load i8*, i8** %349, align 8, !tbaa !28\n  %351 = getelementptr inbounds [10 x %\"struct.std::pair\"], [10 x %\"struct.std::pair\"]* %7, i64 0, i64 3, i32 1, i32 2\n  %352 = bitcast %union.anon* %351 to i8*\n  %353 = icmp eq i8* %350, %352\n  br i1 %353, label %355, label %354\n\n354:                                              ; preds = %348\n  call void @_ZdlPv(i8* %350) #13\n  br label %355\n\n355:                                              ; preds = %354, %348\n  %356 = getelementptr inbounds [10 x %\"struct.std::pair\"], [10 x %\"struct.std::pair\"]* %7, i64 0, i64 2, i32 1, i32 0, i32 0\n  %357 = load i8*, i8** %356, align 8, !tbaa !28\n  %358 = getelementptr inbounds [10 x %\"struct.std::pair\"], [10 x %\"struct.std::pair\"]* %7, i64 0, i64 2, i32 1, i32 2\n  %359 = bitcast %union.anon* %358 to i8*\n  %360 = icmp eq i8* %357, %359\n  br i1 %360, label %362, label %361\n\n361:                                              ; preds = %355\n  call void @_ZdlPv(i8* %357) #13\n  br label %362\n\n362:                                              ; preds = %361, %355\n  %363 = getelementptr inbounds [10 x %\"struct.std::pair\"], [10 x %\"struct.std::pair\"]* %7, i64 0, i64 1, i32 1, i32 0, i32 0\n  %364 = load i8*, i8** %363, align 8, !tbaa !28\n  %365 = getelementptr inbounds [10 x %\"struct.std::pair\"], [10 x %\"struct.std::pair\"]* %7, i64 0, i64 1, i32 1, i32 2\n  %366 = bitcast %union.anon* %365 to i8*\n  %367 = icmp eq i8* %364, %366\n  br i1 %367, label %369, label %368\n\n368:                                              ; preds = %362\n  call void @_ZdlPv(i8* %364) #13\n  br label %369\n\n369:                                              ; preds = %368, %362\n  %370 = getelementptr inbounds [10 x %\"struct.std::pair\"], [10 x %\"struct.std::pair\"]* %7, i64 0, i64 0, i32 1, i32 0, i32 0\n  %371 = load i8*, i8** %370, align 8, !tbaa !28\n  %372 = getelementptr inbounds [10 x %\"struct.std::pair\"], [10 x %\"struct.std::pair\"]* %7, i64 0, i64 0, i32 1, i32 2\n  %373 = bitcast %union.anon* %372 to i8*\n  %374 = icmp eq i8* %371, %373\n  br i1 %374, label %376, label %375\n\n375:                                              ; preds = %369\n  call void @_ZdlPv(i8* %371) #13\n  br label %376\n\n376:                                              ; preds = %375, %369\n  call void @llvm.lifetime.end.p0i8(i64 400, i8* nonnull %9) #13\n  br label %317\n\n377:                                              ; preds = %182\n  call void @_ZdlPv(i8* %184) #13\n  br label %378\n\n378:                                              ; preds = %377, %182\n  %379 = getelementptr inbounds [10 x %\"struct.std::pair\"], [10 x %\"struct.std::pair\"]* %7, i64 0, i64 7, i32 1, i32 0, i32 0\n  %380 = load i8*, i8** %379, align 8, !tbaa !28\n  %381 = getelementptr inbounds [10 x %\"struct.std::pair\"], [10 x %\"struct.std::pair\"]* %7, i64 0, i64 7, i32 1, i32 2\n  %382 = bitcast %union.anon* %381 to i8*\n  %383 = icmp eq i8* %380, %382\n  br i1 %383, label %385, label %384\n\n384:                                              ; preds = %378\n  call void @_ZdlPv(i8* %380) #13\n  br label %385\n\n385:                                              ; preds = %384, %378\n  %386 = getelementptr inbounds [10 x %\"struct.std::pair\"], [10 x %\"struct.std::pair\"]* %7, i64 0, i64 6, i32 1, i32 0, i32 0\n  %387 = load i8*, i8** %386, align 8, !tbaa !28\n  %388 = getelementptr inbounds [10 x %\"struct.std::pair\"], [10 x %\"struct.std::pair\"]* %7, i64 0, i64 6, i32 1, i32 2\n  %389 = bitcast %union.anon* %388 to i8*\n  %390 = icmp eq i8* %387, %389\n  br i1 %390, label %392, label %391\n\n391:                                              ; preds = %385\n  call void @_ZdlPv(i8* %387) #13\n  br label %392\n\n392:                                              ; preds = %391, %385\n  %393 = getelementptr inbounds [10 x %\"struct.std::pair\"], [10 x %\"struct.std::pair\"]* %7, i64 0, i64 5, i32 1, i32 0, i32 0\n  %394 = load i8*, i8** %393, align 8, !tbaa !28\n  %395 = getelementptr inbounds [10 x %\"struct.std::pair\"], [10 x %\"struct.std::pair\"]* %7, i64 0, i64 5, i32 1, i32 2\n  %396 = bitcast %union.anon* %395 to i8*\n  %397 = icmp eq i8* %394, %396\n  br i1 %397, label %399, label %398\n\n398:                                              ; preds = %392\n  call void @_ZdlPv(i8* %394) #13\n  br label %399\n\n399:                                              ; preds = %398, %392\n  %400 = getelementptr inbounds [10 x %\"struct.std::pair\"], [10 x %\"struct.std::pair\"]* %7, i64 0, i64 4, i32 1, i32 0, i32 0\n  %401 = load i8*, i8** %400, align 8, !tbaa !28\n  %402 = getelementptr inbounds [10 x %\"struct.std::pair\"], [10 x %\"struct.std::pair\"]* %7, i64 0, i64 4, i32 1, i32 2\n  %403 = bitcast %union.anon* %402 to i8*\n  %404 = icmp eq i8* %401, %403\n  br i1 %404, label %406, label %405\n\n405:                                              ; preds = %399\n  call void @_ZdlPv(i8* %401) #13\n  br label %406\n\n406:                                              ; preds = %405, %399\n  %407 = getelementptr inbounds [10 x %\"struct.std::pair\"], [10 x %\"struct.std::pair\"]* %7, i64 0, i64 3, i32 1, i32 0, i32 0\n  %408 = load i8*, i8** %407, align 8, !tbaa !28\n  %409 = getelementptr inbounds [10 x %\"struct.std::pair\"], [10 x %\"struct.std::pair\"]* %7, i64 0, i64 3, i32 1, i32 2\n  %410 = bitcast %union.anon* %409 to i8*\n  %411 = icmp eq i8* %408, %410\n  br i1 %411, label %413, label %412\n\n412:                                              ; preds = %406\n  call void @_ZdlPv(i8* %408) #13\n  br label %413\n\n413:                                              ; preds = %412, %406\n  %414 = getelementptr inbounds [10 x %\"struct.std::pair\"], [10 x %\"struct.std::pair\"]* %7, i64 0, i64 2, i32 1, i32 0, i32 0\n  %415 = load i8*, i8** %414, align 8, !tbaa !28\n  %416 = getelementptr inbounds [10 x %\"struct.std::pair\"], [10 x %\"struct.std::pair\"]* %7, i64 0, i64 2, i32 1, i32 2\n  %417 = bitcast %union.anon* %416 to i8*\n  %418 = icmp eq i8* %415, %417\n  br i1 %418, label %420, label %419\n\n419:                                              ; preds = %413\n  call void @_ZdlPv(i8* %415) #13\n  br label %420\n\n420:                                              ; preds = %419, %413\n  %421 = getelementptr inbounds [10 x %\"struct.std::pair\"], [10 x %\"struct.std::pair\"]* %7, i64 0, i64 1, i32 1, i32 0, i32 0\n  %422 = load i8*, i8** %421, align 8, !tbaa !28\n  %423 = getelementptr inbounds [10 x %\"struct.std::pair\"], [10 x %\"struct.std::pair\"]* %7, i64 0, i64 1, i32 1, i32 2\n  %424 = bitcast %union.anon* %423 to i8*\n  %425 = icmp eq i8* %422, %424\n  br i1 %425, label %427, label %426\n\n426:                                              ; preds = %420\n  call void @_ZdlPv(i8* %422) #13\n  br label %427\n\n427:                                              ; preds = %426, %420\n  %428 = getelementptr inbounds [10 x %\"struct.std::pair\"], [10 x %\"struct.std::pair\"]* %7, i64 0, i64 0, i32 1, i32 0, i32 0\n  %429 = load i8*, i8** %428, align 8, !tbaa !28\n  %430 = getelementptr inbounds [10 x %\"struct.std::pair\"], [10 x %\"struct.std::pair\"]* %7, i64 0, i64 0, i32 1, i32 2\n  %431 = bitcast %union.anon* %430 to i8*\n  %432 = icmp eq i8* %429, %431\n  br i1 %432, label %434, label %433\n\n433:                                              ; preds = %427\n  call void @_ZdlPv(i8* %429) #13\n  br label %434\n\n434:                                              ; preds = %433, %427\n  call void @llvm.lifetime.end.p0i8(i64 400, i8* nonnull %9) #13\n  %435 = getelementptr inbounds %\"class.std::vector.3\", %\"class.std::vector.3\"* %1, i64 0, i32 0, i32 0, i32 0, i32 0\n  %436 = load i32*, i32** %435, align 8, !tbaa !23\n  %437 = getelementptr inbounds %\"class.std::vector.3\", %\"class.std::vector.3\"* %1, i64 0, i32 0, i32 0, i32 0, i32 1\n  %438 = load i32*, i32** %437, align 8, !tbaa !23\n  %439 = icmp eq i32* %436, %438\n  br i1 %439, label %200, label %188\n}\n\n; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn\ndeclare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1\n\ndeclare dso_local i32 @__gxx_personality_v0(...)\n\n; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn\ndeclare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1\n\n; Function Attrs: argmemonly mustprogress nofree nounwind willreturn writeonly\ndeclare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2\n\n; Function Attrs: nounwind uwtable\ndefine linkonce_odr dso_local void @_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED2Ev(%\"class.std::vector\"* nonnull align 8 dereferenceable(24) %0) unnamed_addr #3 comdat align 2 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {\n  %2 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0, i64 0, i32 0, i32 0, i32 0, i32 0\n  %3 = load %\"class.std::__cxx11::basic_string\"*, %\"class.std::__cxx11::basic_string\"** %2, align 8, !tbaa !39\n  %4 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0, i64 0, i32 0, i32 0, i32 0, i32 1\n  %5 = load %\"class.std::__cxx11::basic_string\"*, %\"class.std::__cxx11::basic_string\"** %4, align 8, !tbaa !34\n  %6 = icmp eq %\"class.std::__cxx11::basic_string\"* %3, %5\n  br i1 %6, label %20, label %7\n\n7:                                                ; preds = %1, %15\n  %8 = phi %\"class.std::__cxx11::basic_string\"* [ %16, %15 ], [ %3, %1 ]\n  %9 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %8, i64 0, i32 0, i32 0\n  %10 = load i8*, i8** %9, align 8, !tbaa !28\n  %11 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %8, i64 0, i32 2\n  %12 = bitcast %union.anon* %11 to i8*\n  %13 = icmp eq i8* %10, %12\n  br i1 %13, label %15, label %14\n\n14:                                               ; preds = %7\n  tail call void @_ZdlPv(i8* %10) #13\n  br label %15\n\n15:                                               ; preds = %14, %7\n  %16 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %8, i64 1\n  %17 = icmp eq %\"class.std::__cxx11::basic_string\"* %16, %5\n  br i1 %17, label %18, label %7, !llvm.loop !40\n\n18:                                               ; preds = %15\n  %19 = load %\"class.std::__cxx11::basic_string\"*, %\"class.std::__cxx11::basic_string\"** %2, align 8, !tbaa !39\n  br label %20\n\n20:                                               ; preds = %18, %1\n  %21 = phi %\"class.std::__cxx11::basic_string\"* [ %19, %18 ], [ %3, %1 ]\n  %22 = icmp eq %\"class.std::__cxx11::basic_string\"* %21, null\n  br i1 %22, label %25, label %23\n\n23:                                               ; preds = %20\n  %24 = bitcast %\"class.std::__cxx11::basic_string\"* %21 to i8*\n  tail call void @_ZdlPv(i8* nonnull %24) #13\n  br label %25\n\n25:                                               ; preds = %20, %23\n  ret void\n}\n\ndeclare dso_local i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32), i64* nonnull align 8 dereferenceable(8), i64) local_unnamed_addr #4\n\ndeclare dso_local i8* @__cxa_begin_catch(i8*) local_unnamed_addr\n\ndeclare dso_local void @__cxa_rethrow() local_unnamed_addr\n\ndeclare dso_local void @__cxa_end_catch() local_unnamed_addr\n\n; Function Attrs: noinline noreturn nounwind\ndefine linkonce_odr hidden void @__clang_call_terminate(i8* %0) local_unnamed_addr #5 comdat {\n  %2 = tail call i8* @__cxa_begin_catch(i8* %0) #13\n  tail call void @_ZSt9terminatev() #16\n  unreachable\n}\n\ndeclare dso_local void @_ZSt9terminatev() local_unnamed_addr\n\n; Function Attrs: argmemonly mustprogress nofree nounwind willreturn\ndeclare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #6\n\n; Function Attrs: nobuiltin nounwind\ndeclare dso_local void @_ZdlPv(i8*) local_unnamed_addr #7\n\n; Function Attrs: nounwind uwtable\ndefine linkonce_odr dso_local void @_ZNSt8_Rb_treeIiSt4pairIKiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIiESaIS8_EED2Ev(%\"class.std::_Rb_tree\"* nonnull align 8 dereferenceable(48) %0) unnamed_addr #3 comdat align 2 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {\n  %2 = getelementptr inbounds %\"class.std::_Rb_tree\", %\"class.std::_Rb_tree\"* %0, i64 0, i32 0, i32 0, i32 0, i32 0\n  %3 = getelementptr inbounds i8, i8* %2, i64 16\n  %4 = bitcast i8* %3 to %\"struct.std::_Rb_tree_node\"**\n  %5 = load %\"struct.std::_Rb_tree_node\"*, %\"struct.std::_Rb_tree_node\"** %4, align 8, !tbaa !19\n  invoke void @_ZNSt8_Rb_treeIiSt4pairIKiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIiESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E(%\"class.std::_Rb_tree\"* nonnull align 8 dereferenceable(48) %0, %\"struct.std::_Rb_tree_node\"* %5)\n          to label %6 unwind label %7\n\n6:                                                ; preds = %1\n  ret void\n\n7:                                                ; preds = %1\n  %8 = landingpad { i8*, i32 }\n          catch i8* null\n  %9 = extractvalue { i8*, i32 } %8, 0\n  tail call void @__clang_call_terminate(i8* %9) #16\n  unreachable\n}\n\n; Function Attrs: uwtable\ndefine linkonce_odr dso_local void @_ZNSt8_Rb_treeIiSt4pairIKiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIiESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E(%\"class.std::_Rb_tree\"* nonnull align 8 dereferenceable(48) %0, %\"struct.std::_Rb_tree_node\"* %1) local_unnamed_addr #0 comdat align 2 personality i32 (...)* @__gxx_personality_v0 {\n  %3 = icmp eq %\"struct.std::_Rb_tree_node\"* %1, null\n  br i1 %3, label %21, label %4\n\n4:                                                ; preds = %2, %18\n  %5 = phi %\"struct.std::_Rb_tree_node\"* [ %11, %18 ], [ %1, %2 ]\n  %6 = getelementptr inbounds %\"struct.std::_Rb_tree_node\", %\"struct.std::_Rb_tree_node\"* %5, i64 0, i32 0, i32 3\n  %7 = bitcast %\"struct.std::_Rb_tree_node_base\"** %6 to %\"struct.std::_Rb_tree_node\"**\n  %8 = load %\"struct.std::_Rb_tree_node\"*, %\"struct.std::_Rb_tree_node\"** %7, align 8, !tbaa !41\n  tail call void @_ZNSt8_Rb_treeIiSt4pairIKiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIiESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E(%\"class.std::_Rb_tree\"* nonnull align 8 dereferenceable(48) %0, %\"struct.std::_Rb_tree_node\"* %8)\n  %9 = getelementptr inbounds %\"struct.std::_Rb_tree_node\", %\"struct.std::_Rb_tree_node\"* %5, i64 0, i32 0, i32 2\n  %10 = bitcast %\"struct.std::_Rb_tree_node_base\"** %9 to %\"struct.std::_Rb_tree_node\"**\n  %11 = load %\"struct.std::_Rb_tree_node\"*, %\"struct.std::_Rb_tree_node\"** %10, align 8, !tbaa !42\n  %12 = getelementptr inbounds %\"struct.std::_Rb_tree_node\", %\"struct.std::_Rb_tree_node\"* %5, i64 0, i32 1, i32 0, i64 8\n  %13 = bitcast i8* %12 to i8**\n  %14 = load i8*, i8** %13, align 8, !tbaa !28\n  %15 = getelementptr inbounds %\"struct.std::_Rb_tree_node\", %\"struct.std::_Rb_tree_node\"* %5, i64 0, i32 1, i32 0, i64 24\n  %16 = icmp eq i8* %14, %15\n  br i1 %16, label %18, label %17\n\n17:                                               ; preds = %4\n  tail call void @_ZdlPv(i8* %14) #13\n  br label %18\n\n18:                                               ; preds = %4, %17\n  %19 = bitcast %\"struct.std::_Rb_tree_node\"* %5 to i8*\n  tail call void @_ZdlPv(i8* nonnull %19) #13\n  %20 = icmp eq %\"struct.std::_Rb_tree_node\"* %11, null\n  br i1 %20, label %21, label %4, !llvm.loop !43\n\n21:                                               ; preds = %18, %2\n  ret void\n}\n\n; Function Attrs: nounwind uwtable\ndefine linkonce_odr dso_local void @_ZNSt8_Rb_treeIiSt4pairIKiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIiESaIS8_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS8_E(%\"class.std::_Rb_tree\"* nonnull align 8 dereferenceable(48) %0, %\"struct.std::_Rb_tree_node\"* %1) local_unnamed_addr #3 comdat align 2 personality i32 (...)* @__gxx_personality_v0 {\n  %3 = getelementptr inbounds %\"struct.std::_Rb_tree_node\", %\"struct.std::_Rb_tree_node\"* %1, i64 0, i32 1, i32 0, i64 8\n  %4 = bitcast i8* %3 to i8**\n  %5 = load i8*, i8** %4, align 8, !tbaa !28\n  %6 = getelementptr inbounds %\"struct.std::_Rb_tree_node\", %\"struct.std::_Rb_tree_node\"* %1, i64 0, i32 1, i32 0, i64 24\n  %7 = icmp eq i8* %5, %6\n  br i1 %7, label %9, label %8\n\n8:                                                ; preds = %2\n  tail call void @_ZdlPv(i8* %5) #13\n  br label %9\n\n9:                                                ; preds = %2, %8\n  %10 = bitcast %\"struct.std::_Rb_tree_node\"* %1 to i8*\n  tail call void @_ZdlPv(i8* %10) #13\n  ret void\n}\n\n; Function Attrs: uwtable\ndefine linkonce_odr dso_local { %\"struct.std::_Rb_tree_node_base\"*, %\"struct.std::_Rb_tree_node_base\"* } @_ZNSt8_Rb_treeIiSt4pairIKiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIiESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS1_(%\"class.std::_Rb_tree\"* nonnull align 8 dereferenceable(48) %0, %\"struct.std::_Rb_tree_node_base\"* %1, i32* nonnull align 4 dereferenceable(4) %2) local_unnamed_addr #0 comdat align 2 {\n  %4 = getelementptr inbounds %\"class.std::_Rb_tree\", %\"class.std::_Rb_tree\"* %0, i64 0, i32 0, i32 0, i32 0, i32 0\n  %5 = getelementptr inbounds i8, i8* %4, i64 8\n  %6 = bitcast i8* %5 to %\"struct.std::_Rb_tree_node_base\"*\n  %7 = icmp eq %\"struct.std::_Rb_tree_node_base\"* %6, %1\n  br i1 %7, label %8, label %59\n\n8:                                                ; preds = %3\n  %9 = getelementptr inbounds i8, i8* %4, i64 40\n  %10 = bitcast i8* %9 to i64*\n  %11 = load i64, i64* %10, align 8, !tbaa !22\n  %12 = icmp eq i64 %11, 0\n  br i1 %12, label %13, label %15\n\n13:                                               ; preds = %8\n  %14 = load i32, i32* %2, align 4\n  br label %23\n\n15:                                               ; preds = %8\n  %16 = getelementptr inbounds i8, i8* %4, i64 32\n  %17 = bitcast i8* %16 to %\"struct.std::_Rb_tree_node_base\"**\n  %18 = load %\"struct.std::_Rb_tree_node_base\"*, %\"struct.std::_Rb_tree_node_base\"** %17, align 8, !tbaa !23\n  %19 = getelementptr inbounds %\"struct.std::_Rb_tree_node_base\", %\"struct.std::_Rb_tree_node_base\"* %18, i64 1, i32 0\n  %20 = load i32, i32* %19, align 4, !tbaa !24\n  %21 = load i32, i32* %2, align 4, !tbaa !24\n  %22 = icmp slt i32 %20, %21\n  br i1 %22, label %167, label %23\n\n23:                                               ; preds = %13, %15\n  %24 = phi i32 [ %14, %13 ], [ %21, %15 ]\n  %25 = getelementptr inbounds i8, i8* %4, i64 16\n  %26 = bitcast i8* %25 to %\"struct.std::_Rb_tree_node\"**\n  %27 = load %\"struct.std::_Rb_tree_node\"*, %\"struct.std::_Rb_tree_node\"** %26, align 8, !tbaa !23\n  %28 = icmp eq %\"struct.std::_Rb_tree_node\"* %27, null\n  br i1 %28, label %43, label %29\n\n29:                                               ; preds = %23, %29\n  %30 = phi %\"struct.std::_Rb_tree_node\"* [ %39, %29 ], [ %27, %23 ]\n  %31 = getelementptr inbounds %\"struct.std::_Rb_tree_node\", %\"struct.std::_Rb_tree_node\"* %30, i64 0, i32 1\n  %32 = bitcast %\"struct.__gnu_cxx::__aligned_membuf\"* %31 to i32*\n  %33 = load i32, i32* %32, align 4, !tbaa !24\n  %34 = icmp slt i32 %24, %33\n  %35 = getelementptr inbounds %\"struct.std::_Rb_tree_node\", %\"struct.std::_Rb_tree_node\"* %30, i64 0, i32 0, i32 2\n  %36 = getelementptr inbounds %\"struct.std::_Rb_tree_node\", %\"struct.std::_Rb_tree_node\"* %30, i64 0, i32 0, i32 3\n  %37 = select i1 %34, %\"struct.std::_Rb_tree_node_base\"** %35, %\"struct.std::_Rb_tree_node_base\"** %36\n  %38 = bitcast %\"struct.std::_Rb_tree_node_base\"** %37 to %\"struct.std::_Rb_tree_node\"**\n  %39 = load %\"struct.std::_Rb_tree_node\"*, %\"struct.std::_Rb_tree_node\"** %38, align 8, !tbaa !23\n  %40 = icmp eq %\"struct.std::_Rb_tree_node\"* %39, null\n  br i1 %40, label %41, label %29, !llvm.loop !25\n\n41:                                               ; preds = %29\n  %42 = getelementptr %\"struct.std::_Rb_tree_node\", %\"struct.std::_Rb_tree_node\"* %30, i64 0, i32 0\n  br i1 %34, label %43, label %51\n\n43:                                               ; preds = %41, %23\n  %44 = phi %\"struct.std::_Rb_tree_node_base\"* [ %42, %41 ], [ %1, %23 ]\n  %45 = getelementptr inbounds i8, i8* %4, i64 24\n  %46 = bitcast i8* %45 to %\"struct.std::_Rb_tree_node_base\"**\n  %47 = load %\"struct.std::_Rb_tree_node_base\"*, %\"struct.std::_Rb_tree_node_base\"** %46, align 8, !tbaa !20\n  %48 = icmp eq %\"struct.std::_Rb_tree_node_base\"* %44, %47\n  br i1 %48, label %167, label %49\n\n49:                                               ; preds = %43\n  %50 = tail call %\"struct.std::_Rb_tree_node_base\"* @_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base(%\"struct.std::_Rb_tree_node_base\"* %44) #14\n  br label %51\n\n51:                                               ; preds = %49, %41\n  %52 = phi %\"struct.std::_Rb_tree_node_base\"* [ %44, %49 ], [ %42, %41 ]\n  %53 = phi %\"struct.std::_Rb_tree_node_base\"* [ %50, %49 ], [ %42, %41 ]\n  %54 = getelementptr inbounds %\"struct.std::_Rb_tree_node_base\", %\"struct.std::_Rb_tree_node_base\"* %53, i64 1, i32 0\n  %55 = load i32, i32* %54, align 4, !tbaa !24\n  %56 = icmp slt i32 %55, %24\n  %57 = select i1 %56, %\"struct.std::_Rb_tree_node_base\"* null, %\"struct.std::_Rb_tree_node_base\"* %53\n  %58 = select i1 %56, %\"struct.std::_Rb_tree_node_base\"* %52, %\"struct.std::_Rb_tree_node_base\"* null\n  br label %167\n\n59:                                               ; preds = %3\n  %60 = getelementptr inbounds %\"struct.std::_Rb_tree_node_base\", %\"struct.std::_Rb_tree_node_base\"* %1, i64 1, i32 0\n  %61 = load i32, i32* %2, align 4, !tbaa !24\n  %62 = load i32, i32* %60, align 4, !tbaa !24\n  %63 = icmp slt i32 %61, %62\n  br i1 %63, label %64, label %113\n\n64:                                               ; preds = %59\n  %65 = getelementptr inbounds i8, i8* %4, i64 24\n  %66 = bitcast i8* %65 to %\"struct.std::_Rb_tree_node_base\"**\n  %67 = load %\"struct.std::_Rb_tree_node_base\"*, %\"struct.std::_Rb_tree_node_base\"** %66, align 8, !tbaa !23\n  %68 = icmp eq %\"struct.std::_Rb_tree_node_base\"* %67, %1\n  br i1 %68, label %167, label %69\n\n69:                                               ; preds = %64\n  %70 = tail call %\"struct.std::_Rb_tree_node_base\"* @_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base(%\"struct.std::_Rb_tree_node_base\"* nonnull %1) #14\n  %71 = getelementptr inbounds %\"struct.std::_Rb_tree_node_base\", %\"struct.std::_Rb_tree_node_base\"* %70, i64 1, i32 0\n  %72 = load i32, i32* %71, align 4, !tbaa !24\n  %73 = icmp slt i32 %72, %61\n  br i1 %73, label %74, label %81\n\n74:                                               ; preds = %69\n  %75 = getelementptr inbounds %\"struct.std::_Rb_tree_node_base\", %\"struct.std::_Rb_tree_node_base\"* %70, i64 0, i32 3\n  %76 = bitcast %\"struct.std::_Rb_tree_node_base\"** %75 to %\"struct.std::_Rb_tree_node\"**\n  %77 = load %\"struct.std::_Rb_tree_node\"*, %\"struct.std::_Rb_tree_node\"** %76, align 8, !tbaa !41\n  %78 = icmp eq %\"struct.std::_Rb_tree_node\"* %77, null\n  %79 = select i1 %78, %\"struct.std::_Rb_tree_node_base\"* null, %\"struct.std::_Rb_tree_node_base\"* %1\n  %80 = select i1 %78, %\"struct.std::_Rb_tree_node_base\"* %70, %\"struct.std::_Rb_tree_node_base\"* %1\n  br label %167\n\n81:                                               ; preds = %69\n  %82 = getelementptr inbounds i8, i8* %4, i64 16\n  %83 = bitcast i8* %82 to %\"struct.std::_Rb_tree_node\"**\n  %84 = load %\"struct.std::_Rb_tree_node\"*, %\"struct.std::_Rb_tree_node\"** %83, align 8, !tbaa !23\n  %85 = icmp eq %\"struct.std::_Rb_tree_node\"* %84, null\n  br i1 %85, label %100, label %86\n\n86:                                               ; preds = %81, %86\n  %87 = phi %\"struct.std::_Rb_tree_node\"* [ %96, %86 ], [ %84, %81 ]\n  %88 = getelementptr inbounds %\"struct.std::_Rb_tree_node\", %\"struct.std::_Rb_tree_node\"* %87, i64 0, i32 1\n  %89 = bitcast %\"struct.__gnu_cxx::__aligned_membuf\"* %88 to i32*\n  %90 = load i32, i32* %89, align 4, !tbaa !24\n  %91 = icmp slt i32 %61, %90\n  %92 = getelementptr inbounds %\"struct.std::_Rb_tree_node\", %\"struct.std::_Rb_tree_node\"* %87, i64 0, i32 0, i32 2\n  %93 = getelementptr inbounds %\"struct.std::_Rb_tree_node\", %\"struct.std::_Rb_tree_node\"* %87, i64 0, i32 0, i32 3\n  %94 = select i1 %91, %\"struct.std::_Rb_tree_node_base\"** %92, %\"struct.std::_Rb_tree_node_base\"** %93\n  %95 = bitcast %\"struct.std::_Rb_tree_node_base\"** %94 to %\"struct.std::_Rb_tree_node\"**\n  %96 = load %\"struct.std::_Rb_tree_node\"*, %\"struct.std::_Rb_tree_node\"** %95, align 8, !tbaa !23\n  %97 = icmp eq %\"struct.std::_Rb_tree_node\"* %96, null\n  br i1 %97, label %98, label %86, !llvm.loop !25\n\n98:                                               ; preds = %86\n  %99 = getelementptr %\"struct.std::_Rb_tree_node\", %\"struct.std::_Rb_tree_node\"* %87, i64 0, i32 0\n  br i1 %91, label %100, label %105\n\n100:                                              ; preds = %98, %81\n  %101 = phi %\"struct.std::_Rb_tree_node_base\"* [ %99, %98 ], [ %6, %81 ]\n  %102 = icmp eq %\"struct.std::_Rb_tree_node_base\"* %101, %67\n  br i1 %102, label %167, label %103\n\n103:                                              ; preds = %100\n  %104 = tail call %\"struct.std::_Rb_tree_node_base\"* @_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base(%\"struct.std::_Rb_tree_node_base\"* %101) #14\n  br label %105\n\n105:                                              ; preds = %103, %98\n  %106 = phi %\"struct.std::_Rb_tree_node_base\"* [ %101, %103 ], [ %99, %98 ]\n  %107 = phi %\"struct.std::_Rb_tree_node_base\"* [ %104, %103 ], [ %99, %98 ]\n  %108 = getelementptr inbounds %\"struct.std::_Rb_tree_node_base\", %\"struct.std::_Rb_tree_node_base\"* %107, i64 1, i32 0\n  %109 = load i32, i32* %108, align 4, !tbaa !24\n  %110 = icmp slt i32 %109, %61\n  %111 = select i1 %110, %\"struct.std::_Rb_tree_node_base\"* null, %\"struct.std::_Rb_tree_node_base\"* %107\n  %112 = select i1 %110, %\"struct.std::_Rb_tree_node_base\"* %106, %\"struct.std::_Rb_tree_node_base\"* null\n  br label %167\n\n113:                                              ; preds = %59\n  %114 = icmp slt i32 %62, %61\n  br i1 %114, label %115, label %167\n\n115:                                              ; preds = %113\n  %116 = getelementptr inbounds i8, i8* %4, i64 32\n  %117 = bitcast i8* %116 to %\"struct.std::_Rb_tree_node_base\"**\n  %118 = load %\"struct.std::_Rb_tree_node_base\"*, %\"struct.std::_Rb_tree_node_base\"** %117, align 8, !tbaa !23\n  %119 = icmp eq %\"struct.std::_Rb_tree_node_base\"* %118, %1\n  br i1 %119, label %167, label %120\n\n120:                                              ; preds = %115\n  %121 = tail call %\"struct.std::_Rb_tree_node_base\"* @_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base(%\"struct.std::_Rb_tree_node_base\"* nonnull %1) #14\n  %122 = getelementptr inbounds %\"struct.std::_Rb_tree_node_base\", %\"struct.std::_Rb_tree_node_base\"* %121, i64 1, i32 0\n  %123 = load i32, i32* %122, align 4, !tbaa !24\n  %124 = icmp slt i32 %61, %123\n  br i1 %124, label %125, label %132\n\n125:                                              ; preds = %120\n  %126 = getelementptr inbounds %\"struct.std::_Rb_tree_node_base\", %\"struct.std::_Rb_tree_node_base\"* %1, i64 0, i32 3\n  %127 = bitcast %\"struct.std::_Rb_tree_node_base\"** %126 to %\"struct.std::_Rb_tree_node\"**\n  %128 = load %\"struct.std::_Rb_tree_node\"*, %\"struct.std::_Rb_tree_node\"** %127, align 8, !tbaa !41\n  %129 = icmp eq %\"struct.std::_Rb_tree_node\"* %128, null\n  %130 = select i1 %129, %\"struct.std::_Rb_tree_node_base\"* null, %\"struct.std::_Rb_tree_node_base\"* %121\n  %131 = select i1 %129, %\"struct.std::_Rb_tree_node_base\"* %1, %\"struct.std::_Rb_tree_node_base\"* %121\n  br label %167\n\n132:                                              ; preds = %120\n  %133 = getelementptr inbounds i8, i8* %4, i64 16\n  %134 = bitcast i8* %133 to %\"struct.std::_Rb_tree_node\"**\n  %135 = load %\"struct.std::_Rb_tree_node\"*, %\"struct.std::_Rb_tree_node\"** %134, align 8, !tbaa !23\n  %136 = icmp eq %\"struct.std::_Rb_tree_node\"* %135, null\n  br i1 %136, label %151, label %137\n\n137:                                              ; preds = %132, %137\n  %138 = phi %\"struct.std::_Rb_tree_node\"* [ %147, %137 ], [ %135, %132 ]\n  %139 = getelementptr inbounds %\"struct.std::_Rb_tree_node\", %\"struct.std::_Rb_tree_node\"* %138, i64 0, i32 1\n  %140 = bitcast %\"struct.__gnu_cxx::__aligned_membuf\"* %139 to i32*\n  %141 = load i32, i32* %140, align 4, !tbaa !24\n  %142 = icmp slt i32 %61, %141\n  %143 = getelementptr inbounds %\"struct.std::_Rb_tree_node\", %\"struct.std::_Rb_tree_node\"* %138, i64 0, i32 0, i32 2\n  %144 = getelementptr inbounds %\"struct.std::_Rb_tree_node\", %\"struct.std::_Rb_tree_node\"* %138, i64 0, i32 0, i32 3\n  %145 = select i1 %142, %\"struct.std::_Rb_tree_node_base\"** %143, %\"struct.std::_Rb_tree_node_base\"** %144\n  %146 = bitcast %\"struct.std::_Rb_tree_node_base\"** %145 to %\"struct.std::_Rb_tree_node\"**\n  %147 = load %\"struct.std::_Rb_tree_node\"*, %\"struct.std::_Rb_tree_node\"** %146, align 8, !tbaa !23\n  %148 = icmp eq %\"struct.std::_Rb_tree_node\"* %147, null\n  br i1 %148, label %149, label %137, !llvm.loop !25\n\n149:                                              ; preds = %137\n  %150 = getelementptr %\"struct.std::_Rb_tree_node\", %\"struct.std::_Rb_tree_node\"* %138, i64 0, i32 0\n  br i1 %142, label %151, label %159\n\n151:                                              ; preds = %149, %132\n  %152 = phi %\"struct.std::_Rb_tree_node_base\"* [ %150, %149 ], [ %6, %132 ]\n  %153 = getelementptr inbounds i8, i8* %4, i64 24\n  %154 = bitcast i8* %153 to %\"struct.std::_Rb_tree_node_base\"**\n  %155 = load %\"struct.std::_Rb_tree_node_base\"*, %\"struct.std::_Rb_tree_node_base\"** %154, align 8, !tbaa !20\n  %156 = icmp eq %\"struct.std::_Rb_tree_node_base\"* %152, %155\n  br i1 %156, label %167, label %157\n\n157:                                              ; preds = %151\n  %158 = tail call %\"struct.std::_Rb_tree_node_base\"* @_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base(%\"struct.std::_Rb_tree_node_base\"* %152) #14\n  br label %159\n\n159:                                              ; preds = %157, %149\n  %160 = phi %\"struct.std::_Rb_tree_node_base\"* [ %152, %157 ], [ %150, %149 ]\n  %161 = phi %\"struct.std::_Rb_tree_node_base\"* [ %158, %157 ], [ %150, %149 ]\n  %162 = getelementptr inbounds %\"struct.std::_Rb_tree_node_base\", %\"struct.std::_Rb_tree_node_base\"* %161, i64 1, i32 0\n  %163 = load i32, i32* %162, align 4, !tbaa !24\n  %164 = icmp slt i32 %163, %61\n  %165 = select i1 %164, %\"struct.std::_Rb_tree_node_base\"* null, %\"struct.std::_Rb_tree_node_base\"* %161\n  %166 = select i1 %164, %\"struct.std::_Rb_tree_node_base\"* %160, %\"struct.std::_Rb_tree_node_base\"* null\n  br label %167\n\n167:                                              ; preds = %159, %151, %105, %100, %51, %43, %125, %74, %113, %115, %64, %15\n  %168 = phi %\"struct.std::_Rb_tree_node_base\"* [ null, %15 ], [ %1, %64 ], [ null, %115 ], [ %1, %113 ], [ %79, %74 ], [ %130, %125 ], [ %57, %51 ], [ null, %43 ], [ %111, %105 ], [ null, %100 ], [ %165, %159 ], [ null, %151 ]\n  %169 = phi %\"struct.std::_Rb_tree_node_base\"* [ %18, %15 ], [ %1, %64 ], [ %1, %115 ], [ null, %113 ], [ %80, %74 ], [ %131, %125 ], [ %58, %51 ], [ %44, %43 ], [ %112, %105 ], [ %67, %100 ], [ %166, %159 ], [ %152, %151 ]\n  %170 = insertvalue { %\"struct.std::_Rb_tree_node_base\"*, %\"struct.std::_Rb_tree_node_base\"* } undef, %\"struct.std::_Rb_tree_node_base\"* %168, 0\n  %171 = insertvalue { %\"struct.std::_Rb_tree_node_base\"*, %\"struct.std::_Rb_tree_node_base\"* } %170, %\"struct.std::_Rb_tree_node_base\"* %169, 1\n  ret { %\"struct.std::_Rb_tree_node_base\"*, %\"struct.std::_Rb_tree_node_base\"* } %171\n}\n\n; Function Attrs: mustprogress nofree nounwind readonly willreturn\ndeclare dso_local %\"struct.std::_Rb_tree_node_base\"* @_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base(%\"struct.std::_Rb_tree_node_base\"*) local_unnamed_addr #8\n\n; Function Attrs: mustprogress nofree nounwind readonly willreturn\ndeclare dso_local %\"struct.std::_Rb_tree_node_base\"* @_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base(%\"struct.std::_Rb_tree_node_base\"*) local_unnamed_addr #8\n\n; Function Attrs: nounwind\ndeclare dso_local void @_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_(i1 zeroext, %\"struct.std::_Rb_tree_node_base\"*, %\"struct.std::_Rb_tree_node_base\"*, %\"struct.std::_Rb_tree_node_base\"* nonnull align 8 dereferenceable(32)) local_unnamed_addr #9\n\n; Function Attrs: uwtable\ndefine linkonce_odr dso_local void @_ZNSt8_Rb_treeIiSt4pairIKiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIiESaIS8_EE17_M_construct_nodeIJRKS8_EEEvPSt13_Rb_tree_nodeIS8_EDpOT_(%\"class.std::_Rb_tree\"* nonnull align 8 dereferenceable(48) %0, %\"struct.std::_Rb_tree_node\"* %1, %\"struct.std::pair\"* nonnull align 8 dereferenceable(40) %2) local_unnamed_addr #0 comdat align 2 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {\n  %4 = alloca i64, align 8\n  %5 = getelementptr inbounds %\"struct.std::_Rb_tree_node\", %\"struct.std::_Rb_tree_node\"* %1, i64 0, i32 1\n  %6 = bitcast %\"struct.__gnu_cxx::__aligned_membuf\"* %5 to i32*\n  %7 = getelementptr inbounds %\"struct.std::pair\", %\"struct.std::pair\"* %2, i64 0, i32 0\n  %8 = load i32, i32* %7, align 8, !tbaa !3\n  store i32 %8, i32* %6, align 8, !tbaa !3\n  %9 = getelementptr inbounds %\"struct.std::_Rb_tree_node\", %\"struct.std::_Rb_tree_node\"* %1, i64 0, i32 1, i32 0, i64 8\n  %10 = getelementptr inbounds %\"struct.std::_Rb_tree_node\", %\"struct.std::_Rb_tree_node\"* %1, i64 0, i32 1, i32 0, i64 24\n  %11 = bitcast i8* %9 to i8**\n  store i8* %10, i8** %11, align 8, !tbaa !12\n  %12 = getelementptr inbounds %\"struct.std::pair\", %\"struct.std::pair\"* %2, i64 0, i32 1, i32 0, i32 0\n  %13 = load i8*, i8** %12, align 8, !tbaa !28\n  %14 = getelementptr inbounds %\"struct.std::pair\", %\"struct.std::pair\"* %2, i64 0, i32 1, i32 1\n  %15 = load i64, i64* %14, align 8, !tbaa !13\n  %16 = bitcast i64* %4 to i8*\n  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %16) #13\n  store i64 %15, i64* %4, align 8, !tbaa !37\n  %17 = icmp ugt i64 %15, 15\n  br i1 %17, label %18, label %24\n\n18:                                               ; preds = %3\n  %19 = bitcast i8* %9 to %\"class.std::__cxx11::basic_string\"*\n  %20 = invoke i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %19, i64* nonnull align 8 dereferenceable(8) %4, i64 0)\n          to label %21 unwind label %29\n\n21:                                               ; preds = %18\n  store i8* %20, i8** %11, align 8, !tbaa !28\n  %22 = load i64, i64* %4, align 8, !tbaa !37\n  %23 = bitcast i8* %10 to i64*\n  store i64 %22, i64* %23, align 8, !tbaa !14\n  br label %24\n\n24:                                               ; preds = %3, %21\n  %25 = phi i8* [ %20, %21 ], [ %10, %3 ]\n  switch i64 %15, label %28 [\n    i64 1, label %26\n    i64 0, label %36\n  ]\n\n26:                                               ; preds = %24\n  %27 = load i8, i8* %13, align 1, !tbaa !14\n  store i8 %27, i8* %25, align 1, !tbaa !14\n  br label %36\n\n28:                                               ; preds = %24\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %25, i8* align 1 %13, i64 %15, i1 false) #13\n  br label %36\n\n29:                                               ; preds = %18\n  %30 = landingpad { i8*, i32 }\n          catch i8* null\n  %31 = extractvalue { i8*, i32 } %30, 0\n  %32 = call i8* @__cxa_begin_catch(i8* %31) #13\n  %33 = bitcast %\"struct.std::_Rb_tree_node\"* %1 to i8*\n  call void @_ZdlPv(i8* %33) #13\n  invoke void @__cxa_rethrow() #17\n          to label %46 unwind label %34\n\n34:                                               ; preds = %29\n  %35 = landingpad { i8*, i32 }\n          cleanup\n  invoke void @__cxa_end_catch()\n          to label %42 unwind label %43\n\n36:                                               ; preds = %28, %26, %24\n  %37 = load i64, i64* %4, align 8, !tbaa !37\n  %38 = getelementptr inbounds %\"struct.std::_Rb_tree_node\", %\"struct.std::_Rb_tree_node\"* %1, i64 0, i32 1, i32 0, i64 16\n  %39 = bitcast i8* %38 to i64*\n  store i64 %37, i64* %39, align 8, !tbaa !13\n  %40 = load i8*, i8** %11, align 8, !tbaa !28\n  %41 = getelementptr inbounds i8, i8* %40, i64 %37\n  store i8 0, i8* %41, align 1, !tbaa !14\n  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %16) #13\n  ret void\n\n42:                                               ; preds = %34\n  resume { i8*, i32 } %35\n\n43:                                               ; preds = %34\n  %44 = landingpad { i8*, i32 }\n          catch i8* null\n  %45 = extractvalue { i8*, i32 } %44, 0\n  call void @__clang_call_terminate(i8* %45) #16\n  unreachable\n\n46:                                               ; preds = %29\n  unreachable\n}\n\n; Function Attrs: nobuiltin allocsize(0)\ndeclare dso_local nonnull i8* @_Znwm(i64) local_unnamed_addr #10\n\n; Function Attrs: uwtable\ndefine linkonce_odr dso_local void @_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEElNS0_5__ops15_Iter_less_iterEEvT_S9_T0_T1_(i32* %0, i32* %1, i64 %2) local_unnamed_addr #0 comdat {\n  %4 = alloca %\"struct.__gnu_cxx::__ops::_Iter_less_iter\", align 1\n  %5 = ptrtoint i32* %0 to i64\n  %6 = getelementptr inbounds i32, i32* %0, i64 1\n  %7 = ptrtoint i32* %1 to i64\n  %8 = sub i64 %7, %5\n  %9 = icmp sgt i64 %8, 64\n  br i1 %9, label %10, label %123\n\n10:                                               ; preds = %3, %119\n  %11 = phi i64 [ %121, %119 ], [ %8, %3 ]\n  %12 = phi i64 [ %76, %119 ], [ %2, %3 ]\n  %13 = phi i32* [ %107, %119 ], [ %1, %3 ]\n  %14 = icmp eq i64 %12, 0\n  br i1 %14, label %15, label %74\n\n15:                                               ; preds = %10\n  %16 = getelementptr inbounds %\"struct.__gnu_cxx::__ops::_Iter_less_iter\", %\"struct.__gnu_cxx::__ops::_Iter_less_iter\"* %4, i64 0, i32 0\n  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %16)\n  call void @_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEENS0_5__ops15_Iter_less_iterEEvT_S9_RT0_(i32* %0, i32* %13, %\"struct.__gnu_cxx::__ops::_Iter_less_iter\"* nonnull align 1 dereferenceable(1) %4)\n  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %16)\n  br label %17\n\n17:                                               ; preds = %15, %70\n  %18 = phi i32* [ %19, %70 ], [ %13, %15 ]\n  %19 = getelementptr inbounds i32, i32* %18, i64 -1\n  %20 = load i32, i32* %19, align 4, !tbaa !24\n  %21 = load i32, i32* %0, align 4, !tbaa !24\n  store i32 %21, i32* %19, align 4, !tbaa !24\n  %22 = ptrtoint i32* %19 to i64\n  %23 = sub i64 %22, %5\n  %24 = ashr exact i64 %23, 2\n  %25 = add nsw i64 %24, -1\n  %26 = sdiv i64 %25, 2\n  %27 = icmp sgt i64 %23, 8\n  br i1 %27, label %28, label %43\n\n28:                                               ; preds = %17, %28\n  %29 = phi i64 [ %38, %28 ], [ 0, %17 ]\n  %30 = shl i64 %29, 1\n  %31 = add i64 %30, 2\n  %32 = getelementptr inbounds i32, i32* %0, i64 %31\n  %33 = or i64 %30, 1\n  %34 = getelementptr inbounds i32, i32* %0, i64 %33\n  %35 = load i32, i32* %32, align 4, !tbaa !24\n  %36 = load i32, i32* %34, align 4, !tbaa !24\n  %37 = icmp slt i32 %35, %36\n  %38 = select i1 %37, i64 %33, i64 %31\n  %39 = getelementptr inbounds i32, i32* %0, i64 %38\n  %40 = load i32, i32* %39, align 4, !tbaa !24\n  %41 = getelementptr inbounds i32, i32* %0, i64 %29\n  store i32 %40, i32* %41, align 4, !tbaa !24\n  %42 = icmp slt i64 %38, %26\n  br i1 %42, label %28, label %43, !llvm.loop !44\n\n43:                                               ; preds = %28, %17\n  %44 = phi i64 [ 0, %17 ], [ %38, %28 ]\n  %45 = and i64 %23, 4\n  %46 = icmp eq i64 %45, 0\n  br i1 %46, label %47, label %57\n\n47:                                               ; preds = %43\n  %48 = add nsw i64 %24, -2\n  %49 = sdiv i64 %48, 2\n  %50 = icmp eq i64 %44, %49\n  br i1 %50, label %51, label %57\n\n51:                                               ; preds = %47\n  %52 = shl i64 %44, 1\n  %53 = or i64 %52, 1\n  %54 = getelementptr inbounds i32, i32* %0, i64 %53\n  %55 = load i32, i32* %54, align 4, !tbaa !24\n  %56 = getelementptr inbounds i32, i32* %0, i64 %44\n  store i32 %55, i32* %56, align 4, !tbaa !24\n  br label %57\n\n57:                                               ; preds = %51, %47, %43\n  %58 = phi i64 [ %53, %51 ], [ %44, %47 ], [ %44, %43 ]\n  %59 = icmp sgt i64 %58, 0\n  br i1 %59, label %60, label %70\n\n60:                                               ; preds = %57, %67\n  %61 = phi i64 [ %63, %67 ], [ %58, %57 ]\n  %62 = add nsw i64 %61, -1\n  %63 = lshr i64 %62, 1\n  %64 = getelementptr inbounds i32, i32* %0, i64 %63\n  %65 = load i32, i32* %64, align 4, !tbaa !24\n  %66 = icmp slt i32 %65, %20\n  br i1 %66, label %67, label %70\n\n67:                                               ; preds = %60\n  %68 = getelementptr inbounds i32, i32* %0, i64 %61\n  store i32 %65, i32* %68, align 4, !tbaa !24\n  %69 = icmp ult i64 %62, 2\n  br i1 %69, label %70, label %60, !llvm.loop !45\n\n70:                                               ; preds = %67, %60, %57\n  %71 = phi i64 [ %58, %57 ], [ %61, %60 ], [ 0, %67 ]\n  %72 = getelementptr inbounds i32, i32* %0, i64 %71\n  store i32 %20, i32* %72, align 4, !tbaa !24\n  %73 = icmp sgt i64 %23, 4\n  br i1 %73, label %17, label %123, !llvm.loop !46\n\n74:                                               ; preds = %10\n  %75 = lshr i64 %11, 3\n  %76 = add nsw i64 %12, -1\n  %77 = getelementptr inbounds i32, i32* %0, i64 %75\n  %78 = getelementptr inbounds i32, i32* %13, i64 -1\n  %79 = load i32, i32* %6, align 4, !tbaa !24\n  %80 = load i32, i32* %77, align 4, !tbaa !24\n  %81 = icmp slt i32 %79, %80\n  %82 = load i32, i32* %78, align 4, !tbaa !24\n  br i1 %81, label %83, label %92\n\n83:                                               ; preds = %74\n  %84 = icmp slt i32 %80, %82\n  br i1 %84, label %85, label %87\n\n85:                                               ; preds = %83\n  %86 = load i32, i32* %0, align 4, !tbaa !24\n  store i32 %80, i32* %0, align 4, !tbaa !24\n  store i32 %86, i32* %77, align 4, !tbaa !24\n  br label %101\n\n87:                                               ; preds = %83\n  %88 = icmp slt i32 %79, %82\n  %89 = load i32, i32* %0, align 4, !tbaa !24\n  br i1 %88, label %90, label %91\n\n90:                                               ; preds = %87\n  store i32 %82, i32* %0, align 4, !tbaa !24\n  store i32 %89, i32* %78, align 4, !tbaa !24\n  br label %101\n\n91:                                               ; preds = %87\n  store i32 %79, i32* %0, align 4, !tbaa !24\n  store i32 %89, i32* %6, align 4, !tbaa !24\n  br label %101\n\n92:                                               ; preds = %74\n  %93 = icmp slt i32 %79, %82\n  br i1 %93, label %94, label %96\n\n94:                                               ; preds = %92\n  %95 = load i32, i32* %0, align 4, !tbaa !24\n  store i32 %79, i32* %0, align 4, !tbaa !24\n  store i32 %95, i32* %6, align 4, !tbaa !24\n  br label %101\n\n96:                                               ; preds = %92\n  %97 = icmp slt i32 %80, %82\n  %98 = load i32, i32* %0, align 4, !tbaa !24\n  br i1 %97, label %99, label %100\n\n99:                                               ; preds = %96\n  store i32 %82, i32* %0, align 4, !tbaa !24\n  store i32 %98, i32* %78, align 4, !tbaa !24\n  br label %101\n\n100:                                              ; preds = %96\n  store i32 %80, i32* %0, align 4, !tbaa !24\n  store i32 %98, i32* %77, align 4, !tbaa !24\n  br label %101\n\n101:                                              ; preds = %100, %99, %94, %91, %90, %85\n  br label %102\n\n102:                                              ; preds = %101, %118\n  %103 = phi i32* [ %110, %118 ], [ %6, %101 ]\n  %104 = phi i32* [ %113, %118 ], [ %13, %101 ]\n  %105 = load i32, i32* %0, align 4, !tbaa !24\n  br label %106\n\n106:                                              ; preds = %106, %102\n  %107 = phi i32* [ %103, %102 ], [ %110, %106 ]\n  %108 = load i32, i32* %107, align 4, !tbaa !24\n  %109 = icmp slt i32 %108, %105\n  %110 = getelementptr inbounds i32, i32* %107, i64 1\n  br i1 %109, label %106, label %111, !llvm.loop !47\n\n111:                                              ; preds = %106, %111\n  %112 = phi i32* [ %113, %111 ], [ %104, %106 ]\n  %113 = getelementptr inbounds i32, i32* %112, i64 -1\n  %114 = load i32, i32* %113, align 4, !tbaa !24\n  %115 = icmp slt i32 %105, %114\n  br i1 %115, label %111, label %116, !llvm.loop !48\n\n116:                                              ; preds = %111\n  %117 = icmp ult i32* %107, %113\n  br i1 %117, label %118, label %119\n\n118:                                              ; preds = %116\n  store i32 %114, i32* %107, align 4, !tbaa !24\n  store i32 %108, i32* %113, align 4, !tbaa !24\n  br label %102, !llvm.loop !49\n\n119:                                              ; preds = %116\n  tail call void @_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEElNS0_5__ops15_Iter_less_iterEEvT_S9_T0_T1_(i32* nonnull %107, i32* %13, i64 %76)\n  %120 = ptrtoint i32* %107 to i64\n  %121 = sub i64 %120, %5\n  %122 = icmp sgt i64 %121, 64\n  br i1 %122, label %10, label %123, !llvm.loop !50\n\n123:                                              ; preds = %119, %70, %3\n  ret void\n}\n\n; Function Attrs: uwtable\ndefine linkonce_odr dso_local void @_ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_(i32* %0, i32* %1) local_unnamed_addr #0 comdat {\n  %3 = ptrtoint i32* %1 to i64\n  %4 = ptrtoint i32* %0 to i64\n  %5 = sub i64 %3, %4\n  %6 = icmp sgt i64 %5, 64\n  br i1 %6, label %7, label %38\n\n7:                                                ; preds = %2\n  %8 = bitcast i32* %0 to i8*\n  %9 = getelementptr i32, i32* %0, i64 1\n  %10 = load i32, i32* %9, align 4, !tbaa !24\n  %11 = load i32, i32* %0, align 4, !tbaa !24\n  %12 = icmp slt i32 %10, %11\n  br i1 %12, label %13, label %15\n\n13:                                               ; preds = %7\n  %14 = load i32, i32* %0, align 4\n  store i32 %14, i32* %9, align 4\n  br label %15\n\n15:                                               ; preds = %7, %13\n  %16 = phi i32* [ %0, %13 ], [ %9, %7 ]\n  store i32 %10, i32* %16, align 4, !tbaa !24\n  %17 = getelementptr inbounds i32, i32* %0, i64 2\n  %18 = load i32, i32* %17, align 4, !tbaa !24\n  %19 = load i32, i32* %0, align 4, !tbaa !24\n  %20 = icmp slt i32 %18, %19\n  br i1 %20, label %84, label %74\n\n21:                                               ; preds = %322, %34\n  %22 = phi i32* [ %36, %34 ], [ %324, %322 ]\n  %23 = load i32, i32* %22, align 4, !tbaa !24\n  %24 = getelementptr inbounds i32, i32* %22, i64 -1\n  %25 = load i32, i32* %24, align 4, !tbaa !24\n  %26 = icmp slt i32 %23, %25\n  br i1 %26, label %27, label %34\n\n27:                                               ; preds = %21, %27\n  %28 = phi i32 [ %32, %27 ], [ %25, %21 ]\n  %29 = phi i32* [ %31, %27 ], [ %24, %21 ]\n  %30 = phi i32* [ %29, %27 ], [ %22, %21 ]\n  store i32 %28, i32* %30, align 4, !tbaa !24\n  %31 = getelementptr inbounds i32, i32* %29, i64 -1\n  %32 = load i32, i32* %31, align 4, !tbaa !24\n  %33 = icmp slt i32 %23, %32\n  br i1 %33, label %27, label %34, !llvm.loop !51\n\n34:                                               ; preds = %27, %21\n  %35 = phi i32* [ %22, %21 ], [ %29, %27 ]\n  store i32 %23, i32* %35, align 4, !tbaa !24\n  %36 = getelementptr inbounds i32, i32* %22, i64 1\n  %37 = icmp eq i32* %36, %1\n  br i1 %37, label %73, label %21, !llvm.loop !52\n\n38:                                               ; preds = %2\n  %39 = icmp eq i32* %0, %1\n  br i1 %39, label %73, label %40\n\n40:                                               ; preds = %38\n  %41 = bitcast i32* %0 to i8*\n  %42 = getelementptr inbounds i32, i32* %0, i64 1\n  %43 = icmp eq i32* %42, %1\n  br i1 %43, label %73, label %44\n\n44:                                               ; preds = %40, %69\n  %45 = phi i32* [ %71, %69 ], [ %42, %40 ]\n  %46 = phi i32* [ %45, %69 ], [ %0, %40 ]\n  %47 = load i32, i32* %45, align 4, !tbaa !24\n  %48 = load i32, i32* %0, align 4, !tbaa !24\n  %49 = icmp slt i32 %47, %48\n  br i1 %49, label %50, label %59\n\n50:                                               ; preds = %44\n  %51 = ptrtoint i32* %45 to i64\n  %52 = sub i64 %51, %4\n  %53 = icmp eq i64 %52, 0\n  br i1 %53, label %69, label %54\n\n54:                                               ; preds = %50\n  %55 = ashr exact i64 %52, 2\n  %56 = sub nsw i64 2, %55\n  %57 = getelementptr inbounds i32, i32* %46, i64 %56\n  %58 = bitcast i32* %57 to i8*\n  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* nonnull align 4 %58, i8* nonnull align 4 %41, i64 %52, i1 false) #13\n  br label %69\n\n59:                                               ; preds = %44\n  %60 = load i32, i32* %46, align 4, !tbaa !24\n  %61 = icmp slt i32 %47, %60\n  br i1 %61, label %62, label %69\n\n62:                                               ; preds = %59, %62\n  %63 = phi i32 [ %67, %62 ], [ %60, %59 ]\n  %64 = phi i32* [ %66, %62 ], [ %46, %59 ]\n  %65 = phi i32* [ %64, %62 ], [ %45, %59 ]\n  store i32 %63, i32* %65, align 4, !tbaa !24\n  %66 = getelementptr inbounds i32, i32* %64, i64 -1\n  %67 = load i32, i32* %66, align 4, !tbaa !24\n  %68 = icmp slt i32 %47, %67\n  br i1 %68, label %62, label %69, !llvm.loop !51\n\n69:                                               ; preds = %62, %59, %54, %50\n  %70 = phi i32* [ %0, %50 ], [ %0, %54 ], [ %45, %59 ], [ %64, %62 ]\n  store i32 %47, i32* %70, align 4, !tbaa !24\n  %71 = getelementptr inbounds i32, i32* %45, i64 1\n  %72 = icmp eq i32* %71, %1\n  br i1 %72, label %73, label %44, !llvm.loop !53\n\n73:                                               ; preds = %69, %34, %40, %38, %322\n  ret void\n\n74:                                               ; preds = %15\n  %75 = load i32, i32* %9, align 4, !tbaa !24\n  %76 = icmp slt i32 %18, %75\n  br i1 %76, label %77, label %88\n\n77:                                               ; preds = %74, %77\n  %78 = phi i32 [ %82, %77 ], [ %75, %74 ]\n  %79 = phi i32* [ %81, %77 ], [ %9, %74 ]\n  %80 = phi i32* [ %79, %77 ], [ %17, %74 ]\n  store i32 %78, i32* %80, align 4, !tbaa !24\n  %81 = getelementptr inbounds i32, i32* %79, i64 -1\n  %82 = load i32, i32* %81, align 4, !tbaa !24\n  %83 = icmp slt i32 %18, %82\n  br i1 %83, label %77, label %88, !llvm.loop !51\n\n84:                                               ; preds = %15\n  %85 = bitcast i32* %0 to i64*\n  %86 = bitcast i32* %9 to i64*\n  %87 = load i64, i64* %85, align 4\n  store i64 %87, i64* %86, align 4\n  br label %88\n\n88:                                               ; preds = %77, %84, %74\n  %89 = phi i32* [ %0, %84 ], [ %17, %74 ], [ %79, %77 ]\n  store i32 %18, i32* %89, align 4, !tbaa !24\n  %90 = getelementptr inbounds i32, i32* %0, i64 3\n  %91 = load i32, i32* %90, align 4, !tbaa !24\n  %92 = load i32, i32* %0, align 4, !tbaa !24\n  %93 = icmp slt i32 %91, %92\n  br i1 %93, label %104, label %94\n\n94:                                               ; preds = %88\n  %95 = load i32, i32* %17, align 4, !tbaa !24\n  %96 = icmp slt i32 %91, %95\n  br i1 %96, label %97, label %106\n\n97:                                               ; preds = %94, %97\n  %98 = phi i32 [ %102, %97 ], [ %95, %94 ]\n  %99 = phi i32* [ %101, %97 ], [ %17, %94 ]\n  %100 = phi i32* [ %99, %97 ], [ %90, %94 ]\n  store i32 %98, i32* %100, align 4, !tbaa !24\n  %101 = getelementptr inbounds i32, i32* %99, i64 -1\n  %102 = load i32, i32* %101, align 4, !tbaa !24\n  %103 = icmp slt i32 %91, %102\n  br i1 %103, label %97, label %106, !llvm.loop !51\n\n104:                                              ; preds = %88\n  %105 = bitcast i32* %9 to i8*\n  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* noundef nonnull align 4 dereferenceable(12) %105, i8* noundef nonnull align 4 dereferenceable(12) %8, i64 12, i1 false) #13\n  br label %106\n\n106:                                              ; preds = %97, %104, %94\n  %107 = phi i32* [ %0, %104 ], [ %90, %94 ], [ %99, %97 ]\n  store i32 %91, i32* %107, align 4, !tbaa !24\n  %108 = getelementptr inbounds i32, i32* %0, i64 4\n  %109 = load i32, i32* %108, align 4, !tbaa !24\n  %110 = load i32, i32* %0, align 4, !tbaa !24\n  %111 = icmp slt i32 %109, %110\n  br i1 %111, label %122, label %112\n\n112:                                              ; preds = %106\n  %113 = load i32, i32* %90, align 4, !tbaa !24\n  %114 = icmp slt i32 %109, %113\n  br i1 %114, label %115, label %124\n\n115:                                              ; preds = %112, %115\n  %116 = phi i32 [ %120, %115 ], [ %113, %112 ]\n  %117 = phi i32* [ %119, %115 ], [ %90, %112 ]\n  %118 = phi i32* [ %117, %115 ], [ %108, %112 ]\n  store i32 %116, i32* %118, align 4, !tbaa !24\n  %119 = getelementptr inbounds i32, i32* %117, i64 -1\n  %120 = load i32, i32* %119, align 4, !tbaa !24\n  %121 = icmp slt i32 %109, %120\n  br i1 %121, label %115, label %124, !llvm.loop !51\n\n122:                                              ; preds = %106\n  %123 = bitcast i32* %9 to i8*\n  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* noundef nonnull align 4 dereferenceable(16) %123, i8* noundef nonnull align 4 dereferenceable(16) %8, i64 16, i1 false) #13\n  br label %124\n\n124:                                              ; preds = %115, %122, %112\n  %125 = phi i32* [ %0, %122 ], [ %108, %112 ], [ %117, %115 ]\n  store i32 %109, i32* %125, align 4, !tbaa !24\n  %126 = getelementptr inbounds i32, i32* %0, i64 5\n  %127 = load i32, i32* %126, align 4, !tbaa !24\n  %128 = load i32, i32* %0, align 4, !tbaa !24\n  %129 = icmp slt i32 %127, %128\n  br i1 %129, label %140, label %130\n\n130:                                              ; preds = %124\n  %131 = load i32, i32* %108, align 4, !tbaa !24\n  %132 = icmp slt i32 %127, %131\n  br i1 %132, label %133, label %142\n\n133:                                              ; preds = %130, %133\n  %134 = phi i32 [ %138, %133 ], [ %131, %130 ]\n  %135 = phi i32* [ %137, %133 ], [ %108, %130 ]\n  %136 = phi i32* [ %135, %133 ], [ %126, %130 ]\n  store i32 %134, i32* %136, align 4, !tbaa !24\n  %137 = getelementptr inbounds i32, i32* %135, i64 -1\n  %138 = load i32, i32* %137, align 4, !tbaa !24\n  %139 = icmp slt i32 %127, %138\n  br i1 %139, label %133, label %142, !llvm.loop !51\n\n140:                                              ; preds = %124\n  %141 = bitcast i32* %9 to i8*\n  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* noundef nonnull align 4 dereferenceable(20) %141, i8* noundef nonnull align 4 dereferenceable(20) %8, i64 20, i1 false) #13\n  br label %142\n\n142:                                              ; preds = %133, %140, %130\n  %143 = phi i32* [ %0, %140 ], [ %126, %130 ], [ %135, %133 ]\n  store i32 %127, i32* %143, align 4, !tbaa !24\n  %144 = getelementptr inbounds i32, i32* %0, i64 6\n  %145 = load i32, i32* %144, align 4, !tbaa !24\n  %146 = load i32, i32* %0, align 4, !tbaa !24\n  %147 = icmp slt i32 %145, %146\n  br i1 %147, label %158, label %148\n\n148:                                              ; preds = %142\n  %149 = load i32, i32* %126, align 4, !tbaa !24\n  %150 = icmp slt i32 %145, %149\n  br i1 %150, label %151, label %160\n\n151:                                              ; preds = %148, %151\n  %152 = phi i32 [ %156, %151 ], [ %149, %148 ]\n  %153 = phi i32* [ %155, %151 ], [ %126, %148 ]\n  %154 = phi i32* [ %153, %151 ], [ %144, %148 ]\n  store i32 %152, i32* %154, align 4, !tbaa !24\n  %155 = getelementptr inbounds i32, i32* %153, i64 -1\n  %156 = load i32, i32* %155, align 4, !tbaa !24\n  %157 = icmp slt i32 %145, %156\n  br i1 %157, label %151, label %160, !llvm.loop !51\n\n158:                                              ; preds = %142\n  %159 = bitcast i32* %9 to i8*\n  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* noundef nonnull align 4 dereferenceable(24) %159, i8* noundef nonnull align 4 dereferenceable(24) %8, i64 24, i1 false) #13\n  br label %160\n\n160:                                              ; preds = %151, %158, %148\n  %161 = phi i32* [ %0, %158 ], [ %144, %148 ], [ %153, %151 ]\n  store i32 %145, i32* %161, align 4, !tbaa !24\n  %162 = getelementptr inbounds i32, i32* %0, i64 7\n  %163 = load i32, i32* %162, align 4, !tbaa !24\n  %164 = load i32, i32* %0, align 4, !tbaa !24\n  %165 = icmp slt i32 %163, %164\n  br i1 %165, label %176, label %166\n\n166:                                              ; preds = %160\n  %167 = load i32, i32* %144, align 4, !tbaa !24\n  %168 = icmp slt i32 %163, %167\n  br i1 %168, label %169, label %178\n\n169:                                              ; preds = %166, %169\n  %170 = phi i32 [ %174, %169 ], [ %167, %166 ]\n  %171 = phi i32* [ %173, %169 ], [ %144, %166 ]\n  %172 = phi i32* [ %171, %169 ], [ %162, %166 ]\n  store i32 %170, i32* %172, align 4, !tbaa !24\n  %173 = getelementptr inbounds i32, i32* %171, i64 -1\n  %174 = load i32, i32* %173, align 4, !tbaa !24\n  %175 = icmp slt i32 %163, %174\n  br i1 %175, label %169, label %178, !llvm.loop !51\n\n176:                                              ; preds = %160\n  %177 = bitcast i32* %9 to i8*\n  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* noundef nonnull align 4 dereferenceable(28) %177, i8* noundef nonnull align 4 dereferenceable(28) %8, i64 28, i1 false) #13\n  br label %178\n\n178:                                              ; preds = %169, %176, %166\n  %179 = phi i32* [ %0, %176 ], [ %162, %166 ], [ %171, %169 ]\n  store i32 %163, i32* %179, align 4, !tbaa !24\n  %180 = getelementptr inbounds i32, i32* %0, i64 8\n  %181 = load i32, i32* %180, align 4, !tbaa !24\n  %182 = load i32, i32* %0, align 4, !tbaa !24\n  %183 = icmp slt i32 %181, %182\n  br i1 %183, label %194, label %184\n\n184:                                              ; preds = %178\n  %185 = load i32, i32* %162, align 4, !tbaa !24\n  %186 = icmp slt i32 %181, %185\n  br i1 %186, label %187, label %196\n\n187:                                              ; preds = %184, %187\n  %188 = phi i32 [ %192, %187 ], [ %185, %184 ]\n  %189 = phi i32* [ %191, %187 ], [ %162, %184 ]\n  %190 = phi i32* [ %189, %187 ], [ %180, %184 ]\n  store i32 %188, i32* %190, align 4, !tbaa !24\n  %191 = getelementptr inbounds i32, i32* %189, i64 -1\n  %192 = load i32, i32* %191, align 4, !tbaa !24\n  %193 = icmp slt i32 %181, %192\n  br i1 %193, label %187, label %196, !llvm.loop !51\n\n194:                                              ; preds = %178\n  %195 = bitcast i32* %9 to i8*\n  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* noundef nonnull align 4 dereferenceable(32) %195, i8* noundef nonnull align 4 dereferenceable(32) %8, i64 32, i1 false) #13\n  br label %196\n\n196:                                              ; preds = %187, %194, %184\n  %197 = phi i32* [ %0, %194 ], [ %180, %184 ], [ %189, %187 ]\n  store i32 %181, i32* %197, align 4, !tbaa !24\n  %198 = getelementptr inbounds i32, i32* %0, i64 9\n  %199 = load i32, i32* %198, align 4, !tbaa !24\n  %200 = load i32, i32* %0, align 4, !tbaa !24\n  %201 = icmp slt i32 %199, %200\n  br i1 %201, label %212, label %202\n\n202:                                              ; preds = %196\n  %203 = load i32, i32* %180, align 4, !tbaa !24\n  %204 = icmp slt i32 %199, %203\n  br i1 %204, label %205, label %214\n\n205:                                              ; preds = %202, %205\n  %206 = phi i32 [ %210, %205 ], [ %203, %202 ]\n  %207 = phi i32* [ %209, %205 ], [ %180, %202 ]\n  %208 = phi i32* [ %207, %205 ], [ %198, %202 ]\n  store i32 %206, i32* %208, align 4, !tbaa !24\n  %209 = getelementptr inbounds i32, i32* %207, i64 -1\n  %210 = load i32, i32* %209, align 4, !tbaa !24\n  %211 = icmp slt i32 %199, %210\n  br i1 %211, label %205, label %214, !llvm.loop !51\n\n212:                                              ; preds = %196\n  %213 = bitcast i32* %9 to i8*\n  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* noundef nonnull align 4 dereferenceable(36) %213, i8* noundef nonnull align 4 dereferenceable(36) %8, i64 36, i1 false) #13\n  br label %214\n\n214:                                              ; preds = %205, %212, %202\n  %215 = phi i32* [ %0, %212 ], [ %198, %202 ], [ %207, %205 ]\n  store i32 %199, i32* %215, align 4, !tbaa !24\n  %216 = getelementptr inbounds i32, i32* %0, i64 10\n  %217 = load i32, i32* %216, align 4, !tbaa !24\n  %218 = load i32, i32* %0, align 4, !tbaa !24\n  %219 = icmp slt i32 %217, %218\n  br i1 %219, label %230, label %220\n\n220:                                              ; preds = %214\n  %221 = load i32, i32* %198, align 4, !tbaa !24\n  %222 = icmp slt i32 %217, %221\n  br i1 %222, label %223, label %232\n\n223:                                              ; preds = %220, %223\n  %224 = phi i32 [ %228, %223 ], [ %221, %220 ]\n  %225 = phi i32* [ %227, %223 ], [ %198, %220 ]\n  %226 = phi i32* [ %225, %223 ], [ %216, %220 ]\n  store i32 %224, i32* %226, align 4, !tbaa !24\n  %227 = getelementptr inbounds i32, i32* %225, i64 -1\n  %228 = load i32, i32* %227, align 4, !tbaa !24\n  %229 = icmp slt i32 %217, %228\n  br i1 %229, label %223, label %232, !llvm.loop !51\n\n230:                                              ; preds = %214\n  %231 = bitcast i32* %9 to i8*\n  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* noundef nonnull align 4 dereferenceable(40) %231, i8* noundef nonnull align 4 dereferenceable(40) %8, i64 40, i1 false) #13\n  br label %232\n\n232:                                              ; preds = %223, %230, %220\n  %233 = phi i32* [ %0, %230 ], [ %216, %220 ], [ %225, %223 ]\n  store i32 %217, i32* %233, align 4, !tbaa !24\n  %234 = getelementptr inbounds i32, i32* %0, i64 11\n  %235 = load i32, i32* %234, align 4, !tbaa !24\n  %236 = load i32, i32* %0, align 4, !tbaa !24\n  %237 = icmp slt i32 %235, %236\n  br i1 %237, label %248, label %238\n\n238:                                              ; preds = %232\n  %239 = load i32, i32* %216, align 4, !tbaa !24\n  %240 = icmp slt i32 %235, %239\n  br i1 %240, label %241, label %250\n\n241:                                              ; preds = %238, %241\n  %242 = phi i32 [ %246, %241 ], [ %239, %238 ]\n  %243 = phi i32* [ %245, %241 ], [ %216, %238 ]\n  %244 = phi i32* [ %243, %241 ], [ %234, %238 ]\n  store i32 %242, i32* %244, align 4, !tbaa !24\n  %245 = getelementptr inbounds i32, i32* %243, i64 -1\n  %246 = load i32, i32* %245, align 4, !tbaa !24\n  %247 = icmp slt i32 %235, %246\n  br i1 %247, label %241, label %250, !llvm.loop !51\n\n248:                                              ; preds = %232\n  %249 = bitcast i32* %9 to i8*\n  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* noundef nonnull align 4 dereferenceable(44) %249, i8* noundef nonnull align 4 dereferenceable(44) %8, i64 44, i1 false) #13\n  br label %250\n\n250:                                              ; preds = %241, %248, %238\n  %251 = phi i32* [ %0, %248 ], [ %234, %238 ], [ %243, %241 ]\n  store i32 %235, i32* %251, align 4, !tbaa !24\n  %252 = getelementptr inbounds i32, i32* %0, i64 12\n  %253 = load i32, i32* %252, align 4, !tbaa !24\n  %254 = load i32, i32* %0, align 4, !tbaa !24\n  %255 = icmp slt i32 %253, %254\n  br i1 %255, label %266, label %256\n\n256:                                              ; preds = %250\n  %257 = load i32, i32* %234, align 4, !tbaa !24\n  %258 = icmp slt i32 %253, %257\n  br i1 %258, label %259, label %268\n\n259:                                              ; preds = %256, %259\n  %260 = phi i32 [ %264, %259 ], [ %257, %256 ]\n  %261 = phi i32* [ %263, %259 ], [ %234, %256 ]\n  %262 = phi i32* [ %261, %259 ], [ %252, %256 ]\n  store i32 %260, i32* %262, align 4, !tbaa !24\n  %263 = getelementptr inbounds i32, i32* %261, i64 -1\n  %264 = load i32, i32* %263, align 4, !tbaa !24\n  %265 = icmp slt i32 %253, %264\n  br i1 %265, label %259, label %268, !llvm.loop !51\n\n266:                                              ; preds = %250\n  %267 = bitcast i32* %9 to i8*\n  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* noundef nonnull align 4 dereferenceable(48) %267, i8* noundef nonnull align 4 dereferenceable(48) %8, i64 48, i1 false) #13\n  br label %268\n\n268:                                              ; preds = %259, %266, %256\n  %269 = phi i32* [ %0, %266 ], [ %252, %256 ], [ %261, %259 ]\n  store i32 %253, i32* %269, align 4, !tbaa !24\n  %270 = getelementptr inbounds i32, i32* %0, i64 13\n  %271 = load i32, i32* %270, align 4, !tbaa !24\n  %272 = load i32, i32* %0, align 4, !tbaa !24\n  %273 = icmp slt i32 %271, %272\n  br i1 %273, label %284, label %274\n\n274:                                              ; preds = %268\n  %275 = load i32, i32* %252, align 4, !tbaa !24\n  %276 = icmp slt i32 %271, %275\n  br i1 %276, label %277, label %286\n\n277:                                              ; preds = %274, %277\n  %278 = phi i32 [ %282, %277 ], [ %275, %274 ]\n  %279 = phi i32* [ %281, %277 ], [ %252, %274 ]\n  %280 = phi i32* [ %279, %277 ], [ %270, %274 ]\n  store i32 %278, i32* %280, align 4, !tbaa !24\n  %281 = getelementptr inbounds i32, i32* %279, i64 -1\n  %282 = load i32, i32* %281, align 4, !tbaa !24\n  %283 = icmp slt i32 %271, %282\n  br i1 %283, label %277, label %286, !llvm.loop !51\n\n284:                                              ; preds = %268\n  %285 = bitcast i32* %9 to i8*\n  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* noundef nonnull align 4 dereferenceable(52) %285, i8* noundef nonnull align 4 dereferenceable(52) %8, i64 52, i1 false) #13\n  br label %286\n\n286:                                              ; preds = %277, %284, %274\n  %287 = phi i32* [ %0, %284 ], [ %270, %274 ], [ %279, %277 ]\n  store i32 %271, i32* %287, align 4, !tbaa !24\n  %288 = getelementptr inbounds i32, i32* %0, i64 14\n  %289 = load i32, i32* %288, align 4, !tbaa !24\n  %290 = load i32, i32* %0, align 4, !tbaa !24\n  %291 = icmp slt i32 %289, %290\n  br i1 %291, label %302, label %292\n\n292:                                              ; preds = %286\n  %293 = load i32, i32* %270, align 4, !tbaa !24\n  %294 = icmp slt i32 %289, %293\n  br i1 %294, label %295, label %304\n\n295:                                              ; preds = %292, %295\n  %296 = phi i32 [ %300, %295 ], [ %293, %292 ]\n  %297 = phi i32* [ %299, %295 ], [ %270, %292 ]\n  %298 = phi i32* [ %297, %295 ], [ %288, %292 ]\n  store i32 %296, i32* %298, align 4, !tbaa !24\n  %299 = getelementptr inbounds i32, i32* %297, i64 -1\n  %300 = load i32, i32* %299, align 4, !tbaa !24\n  %301 = icmp slt i32 %289, %300\n  br i1 %301, label %295, label %304, !llvm.loop !51\n\n302:                                              ; preds = %286\n  %303 = bitcast i32* %9 to i8*\n  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* noundef nonnull align 4 dereferenceable(56) %303, i8* noundef nonnull align 4 dereferenceable(56) %8, i64 56, i1 false) #13\n  br label %304\n\n304:                                              ; preds = %295, %302, %292\n  %305 = phi i32* [ %0, %302 ], [ %288, %292 ], [ %297, %295 ]\n  store i32 %289, i32* %305, align 4, !tbaa !24\n  %306 = getelementptr inbounds i32, i32* %0, i64 15\n  %307 = load i32, i32* %306, align 4, !tbaa !24\n  %308 = load i32, i32* %0, align 4, !tbaa !24\n  %309 = icmp slt i32 %307, %308\n  br i1 %309, label %320, label %310\n\n310:                                              ; preds = %304\n  %311 = load i32, i32* %288, align 4, !tbaa !24\n  %312 = icmp slt i32 %307, %311\n  br i1 %312, label %313, label %322\n\n313:                                              ; preds = %310, %313\n  %314 = phi i32 [ %318, %313 ], [ %311, %310 ]\n  %315 = phi i32* [ %317, %313 ], [ %288, %310 ]\n  %316 = phi i32* [ %315, %313 ], [ %306, %310 ]\n  store i32 %314, i32* %316, align 4, !tbaa !24\n  %317 = getelementptr inbounds i32, i32* %315, i64 -1\n  %318 = load i32, i32* %317, align 4, !tbaa !24\n  %319 = icmp slt i32 %307, %318\n  br i1 %319, label %313, label %322, !llvm.loop !51\n\n320:                                              ; preds = %304\n  %321 = bitcast i32* %9 to i8*\n  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* noundef nonnull align 4 dereferenceable(60) %321, i8* noundef nonnull align 4 dereferenceable(60) %8, i64 60, i1 false) #13\n  br label %322\n\n322:                                              ; preds = %313, %320, %310\n  %323 = phi i32* [ %0, %320 ], [ %306, %310 ], [ %315, %313 ]\n  store i32 %307, i32* %323, align 4, !tbaa !24\n  %324 = getelementptr inbounds i32, i32* %0, i64 16\n  %325 = icmp eq i32* %324, %1\n  br i1 %325, label %73, label %21\n}\n\n; Function Attrs: uwtable\ndefine linkonce_odr dso_local void @_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEENS0_5__ops15_Iter_less_iterEEvT_S9_RT0_(i32* %0, i32* %1, %\"struct.__gnu_cxx::__ops::_Iter_less_iter\"* nonnull align 1 dereferenceable(1) %2) local_unnamed_addr #0 comdat {\n  %4 = ptrtoint i32* %1 to i64\n  %5 = ptrtoint i32* %0 to i64\n  %6 = sub i64 %4, %5\n  %7 = ashr exact i64 %6, 2\n  %8 = icmp slt i64 %6, 8\n  br i1 %8, label %100, label %9\n\n9:                                                ; preds = %3\n  %10 = add nsw i64 %7, -2\n  %11 = lshr i64 %10, 1\n  %12 = add nsw i64 %7, -1\n  %13 = sdiv i64 %12, 2\n  %14 = and i64 %6, 4\n  %15 = icmp eq i64 %14, 0\n  br i1 %15, label %16, label %20\n\n16:                                               ; preds = %9\n  %17 = or i64 %10, 1\n  %18 = getelementptr inbounds i32, i32* %0, i64 %17\n  %19 = getelementptr inbounds i32, i32* %0, i64 %11\n  br label %57\n\n20:                                               ; preds = %9, %52\n  %21 = phi i64 [ %56, %52 ], [ %11, %9 ]\n  %22 = getelementptr inbounds i32, i32* %0, i64 %21\n  %23 = load i32, i32* %22, align 4, !tbaa !24\n  %24 = icmp sgt i64 %13, %21\n  br i1 %24, label %25, label %52\n\n25:                                               ; preds = %20, %25\n  %26 = phi i64 [ %35, %25 ], [ %21, %20 ]\n  %27 = shl i64 %26, 1\n  %28 = add i64 %27, 2\n  %29 = getelementptr inbounds i32, i32* %0, i64 %28\n  %30 = or i64 %27, 1\n  %31 = getelementptr inbounds i32, i32* %0, i64 %30\n  %32 = load i32, i32* %29, align 4, !tbaa !24\n  %33 = load i32, i32* %31, align 4, !tbaa !24\n  %34 = icmp slt i32 %32, %33\n  %35 = select i1 %34, i64 %30, i64 %28\n  %36 = getelementptr inbounds i32, i32* %0, i64 %35\n  %37 = load i32, i32* %36, align 4, !tbaa !24\n  %38 = getelementptr inbounds i32, i32* %0, i64 %26\n  store i32 %37, i32* %38, align 4, !tbaa !24\n  %39 = icmp slt i64 %35, %13\n  br i1 %39, label %25, label %40, !llvm.loop !44\n\n40:                                               ; preds = %25\n  %41 = icmp sgt i64 %35, %21\n  br i1 %41, label %42, label %52\n\n42:                                               ; preds = %40, %49\n  %43 = phi i64 [ %45, %49 ], [ %35, %40 ]\n  %44 = add nsw i64 %43, -1\n  %45 = sdiv i64 %44, 2\n  %46 = getelementptr inbounds i32, i32* %0, i64 %45\n  %47 = load i32, i32* %46, align 4, !tbaa !24\n  %48 = icmp slt i32 %47, %23\n  br i1 %48, label %49, label %52\n\n49:                                               ; preds = %42\n  %50 = getelementptr inbounds i32, i32* %0, i64 %43\n  store i32 %47, i32* %50, align 4, !tbaa !24\n  %51 = icmp sgt i64 %45, %21\n  br i1 %51, label %42, label %52, !llvm.loop !45\n\n52:                                               ; preds = %42, %49, %20, %40\n  %53 = phi i64 [ %35, %40 ], [ %21, %20 ], [ %45, %49 ], [ %43, %42 ]\n  %54 = getelementptr inbounds i32, i32* %0, i64 %53\n  store i32 %23, i32* %54, align 4, !tbaa !24\n  %55 = icmp eq i64 %21, 0\n  %56 = add nsw i64 %21, -1\n  br i1 %55, label %100, label %20, !llvm.loop !54\n\n57:                                               ; preds = %16, %95\n  %58 = phi i64 [ %99, %95 ], [ %11, %16 ]\n  %59 = getelementptr inbounds i32, i32* %0, i64 %58\n  %60 = load i32, i32* %59, align 4, !tbaa !24\n  %61 = icmp sgt i64 %13, %58\n  br i1 %61, label %62, label %77\n\n62:                                               ; preds = %57, %62\n  %63 = phi i64 [ %72, %62 ], [ %58, %57 ]\n  %64 = shl i64 %63, 1\n  %65 = add i64 %64, 2\n  %66 = getelementptr inbounds i32, i32* %0, i64 %65\n  %67 = or i64 %64, 1\n  %68 = getelementptr inbounds i32, i32* %0, i64 %67\n  %69 = load i32, i32* %66, align 4, !tbaa !24\n  %70 = load i32, i32* %68, align 4, !tbaa !24\n  %71 = icmp slt i32 %69, %70\n  %72 = select i1 %71, i64 %67, i64 %65\n  %73 = getelementptr inbounds i32, i32* %0, i64 %72\n  %74 = load i32, i32* %73, align 4, !tbaa !24\n  %75 = getelementptr inbounds i32, i32* %0, i64 %63\n  store i32 %74, i32* %75, align 4, !tbaa !24\n  %76 = icmp slt i64 %72, %13\n  br i1 %76, label %62, label %77, !llvm.loop !44\n\n77:                                               ; preds = %62, %57\n  %78 = phi i64 [ %58, %57 ], [ %72, %62 ]\n  %79 = icmp eq i64 %78, %11\n  br i1 %79, label %80, label %82\n\n80:                                               ; preds = %77\n  %81 = load i32, i32* %18, align 4, !tbaa !24\n  store i32 %81, i32* %19, align 4, !tbaa !24\n  br label %82\n\n82:                                               ; preds = %80, %77\n  %83 = phi i64 [ %17, %80 ], [ %78, %77 ]\n  %84 = icmp sgt i64 %83, %58\n  br i1 %84, label %85, label %95\n\n85:                                               ; preds = %82, %92\n  %86 = phi i64 [ %88, %92 ], [ %83, %82 ]\n  %87 = add nsw i64 %86, -1\n  %88 = sdiv i64 %87, 2\n  %89 = getelementptr inbounds i32, i32* %0, i64 %88\n  %90 = load i32, i32* %89, align 4, !tbaa !24\n  %91 = icmp slt i32 %90, %60\n  br i1 %91, label %92, label %95\n\n92:                                               ; preds = %85\n  %93 = getelementptr inbounds i32, i32* %0, i64 %86\n  store i32 %90, i32* %93, align 4, !tbaa !24\n  %94 = icmp sgt i64 %88, %58\n  br i1 %94, label %85, label %95, !llvm.loop !45\n\n95:                                               ; preds = %85, %92, %82\n  %96 = phi i64 [ %83, %82 ], [ %88, %92 ], [ %86, %85 ]\n  %97 = getelementptr inbounds i32, i32* %0, i64 %96\n  store i32 %60, i32* %97, align 4, !tbaa !24\n  %98 = icmp eq i64 %58, 0\n  %99 = add nsw i64 %58, -1\n  br i1 %98, label %100, label %57, !llvm.loop !54\n\n100:                                              ; preds = %52, %95, %3\n  ret void\n}\n\n; Function Attrs: mustprogress nofree nosync nounwind readnone speculatable willreturn\ndeclare i64 @llvm.ctlz.i64(i64, i1 immarg) #11\n\n; Function Attrs: argmemonly mustprogress nofree nounwind willreturn\ndeclare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #6\n\n; Function Attrs: uwtable\ndefine linkonce_odr dso_local %\"struct.std::_Rb_tree_node_base\"* @_ZNSt8_Rb_treeIiSt4pairIKiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIiESaIS8_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESJ_IJEEEEESt17_Rb_tree_iteratorIS8_ESt23_Rb_tree_const_iteratorIS8_EDpOT_(%\"class.std::_Rb_tree\"* nonnull align 8 dereferenceable(48) %0, %\"struct.std::_Rb_tree_node_base\"* %1, %\"struct.std::piecewise_construct_t\"* nonnull align 1 dereferenceable(1) %2, %\"class.std::tuple\"* nonnull align 8 dereferenceable(8) %3, %\"class.std::tuple.17\"* nonnull align 1 dereferenceable(1) %4) local_unnamed_addr #0 comdat align 2 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {\n  %6 = tail call noalias nonnull i8* @_Znwm(i64 72) #15\n  %7 = getelementptr inbounds i8, i8* %6, i64 32\n  %8 = getelementptr inbounds %\"class.std::tuple\", %\"class.std::tuple\"* %3, i64 0, i32 0, i32 0, i32 0\n  %9 = load i32*, i32** %8, align 8, !tbaa !55\n  %10 = bitcast i8* %7 to i32*\n  %11 = load i32, i32* %9, align 4, !tbaa !24\n  store i32 %11, i32* %10, align 8, !tbaa !3\n  %12 = getelementptr inbounds i8, i8* %6, i64 40\n  %13 = getelementptr inbounds i8, i8* %6, i64 56\n  %14 = bitcast i8* %12 to i8**\n  store i8* %13, i8** %14, align 8, !tbaa !12\n  %15 = getelementptr inbounds i8, i8* %6, i64 48\n  %16 = bitcast i8* %15 to i64*\n  store i64 0, i64* %16, align 8, !tbaa !13\n  store i8 0, i8* %13, align 8, !tbaa !14\n  %17 = invoke { %\"struct.std::_Rb_tree_node_base\"*, %\"struct.std::_Rb_tree_node_base\"* } @_ZNSt8_Rb_treeIiSt4pairIKiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIiESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS1_(%\"class.std::_Rb_tree\"* nonnull align 8 dereferenceable(48) %0, %\"struct.std::_Rb_tree_node_base\"* %1, i32* nonnull align 4 dereferenceable(4) %10)\n          to label %18 unwind label %44\n\n18:                                               ; preds = %5\n  %19 = extractvalue { %\"struct.std::_Rb_tree_node_base\"*, %\"struct.std::_Rb_tree_node_base\"* } %17, 0\n  %20 = extractvalue { %\"struct.std::_Rb_tree_node_base\"*, %\"struct.std::_Rb_tree_node_base\"* } %17, 1\n  %21 = icmp eq %\"struct.std::_Rb_tree_node_base\"* %20, null\n  br i1 %21, label %49, label %22\n\n22:                                               ; preds = %18\n  %23 = icmp eq %\"struct.std::_Rb_tree_node_base\"* %19, null\n  br i1 %23, label %24, label %34\n\n24:                                               ; preds = %22\n  %25 = getelementptr inbounds %\"class.std::_Rb_tree\", %\"class.std::_Rb_tree\"* %0, i64 0, i32 0, i32 0, i32 0, i32 0\n  %26 = getelementptr inbounds i8, i8* %25, i64 8\n  %27 = bitcast i8* %26 to %\"struct.std::_Rb_tree_node_base\"*\n  %28 = icmp eq %\"struct.std::_Rb_tree_node_base\"* %20, %27\n  br i1 %28, label %34, label %29\n\n29:                                               ; preds = %24\n  %30 = getelementptr inbounds %\"struct.std::_Rb_tree_node_base\", %\"struct.std::_Rb_tree_node_base\"* %20, i64 1, i32 0\n  %31 = load i32, i32* %10, align 4, !tbaa !24\n  %32 = load i32, i32* %30, align 4, !tbaa !24\n  %33 = icmp slt i32 %31, %32\n  br label %34\n\n34:                                               ; preds = %22, %29, %24\n  %35 = phi i1 [ true, %24 ], [ %33, %29 ], [ true, %22 ]\n  %36 = bitcast i8* %6 to %\"struct.std::_Rb_tree_node_base\"*\n  %37 = getelementptr inbounds %\"class.std::_Rb_tree\", %\"class.std::_Rb_tree\"* %0, i64 0, i32 0, i32 0, i32 0, i32 0\n  %38 = getelementptr inbounds i8, i8* %37, i64 8\n  %39 = bitcast i8* %38 to %\"struct.std::_Rb_tree_node_base\"*\n  tail call void @_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_(i1 zeroext %35, %\"struct.std::_Rb_tree_node_base\"* nonnull %36, %\"struct.std::_Rb_tree_node_base\"* nonnull %20, %\"struct.std::_Rb_tree_node_base\"* nonnull align 8 dereferenceable(32) %39) #13\n  %40 = getelementptr inbounds i8, i8* %37, i64 40\n  %41 = bitcast i8* %40 to i64*\n  %42 = load i64, i64* %41, align 8, !tbaa !22\n  %43 = add i64 %42, 1\n  store i64 %43, i64* %41, align 8, !tbaa !22\n  br label %54\n\n44:                                               ; preds = %5\n  %45 = landingpad { i8*, i32 }\n          catch i8* null\n  %46 = bitcast i8* %6 to %\"struct.std::_Rb_tree_node\"*\n  %47 = extractvalue { i8*, i32 } %45, 0\n  %48 = tail call i8* @__cxa_begin_catch(i8* %47) #13\n  tail call void @_ZNSt8_Rb_treeIiSt4pairIKiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIiESaIS8_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS8_E(%\"class.std::_Rb_tree\"* nonnull align 8 dereferenceable(48) %0, %\"struct.std::_Rb_tree_node\"* nonnull %46) #13\n  invoke void @__cxa_rethrow() #17\n          to label %62 unwind label %56\n\n49:                                               ; preds = %18\n  %50 = load i8*, i8** %14, align 8, !tbaa !28\n  %51 = icmp eq i8* %50, %13\n  br i1 %51, label %53, label %52\n\n52:                                               ; preds = %49\n  tail call void @_ZdlPv(i8* %50) #13\n  br label %53\n\n53:                                               ; preds = %49, %52\n  tail call void @_ZdlPv(i8* nonnull %6) #13\n  br label %54\n\n54:                                               ; preds = %53, %34\n  %55 = phi %\"struct.std::_Rb_tree_node_base\"* [ %19, %53 ], [ %36, %34 ]\n  ret %\"struct.std::_Rb_tree_node_base\"* %55\n\n56:                                               ; preds = %44\n  %57 = landingpad { i8*, i32 }\n          cleanup\n  invoke void @__cxa_end_catch()\n          to label %58 unwind label %59\n\n58:                                               ; preds = %56\n  resume { i8*, i32 } %57\n\n59:                                               ; preds = %56\n  %60 = landingpad { i8*, i32 }\n          catch i8* null\n  %61 = extractvalue { i8*, i32 } %60, 0\n  tail call void @__clang_call_terminate(i8* %61) #16\n  unreachable\n\n62:                                               ; preds = %44\n  unreachable\n}\n\n; Function Attrs: uwtable\ndefine linkonce_odr dso_local void @_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_realloc_insertIJRKS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_(%\"class.std::vector\"* nonnull align 8 dereferenceable(24) %0, %\"class.std::__cxx11::basic_string\"* %1, %\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %2) local_unnamed_addr #0 comdat align 2 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {\n  %4 = alloca i64, align 8\n  %5 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0, i64 0, i32 0, i32 0, i32 0, i32 1\n  %6 = load %\"class.std::__cxx11::basic_string\"*, %\"class.std::__cxx11::basic_string\"** %5, align 8, !tbaa !34\n  %7 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0, i64 0, i32 0, i32 0, i32 0, i32 0\n  %8 = load %\"class.std::__cxx11::basic_string\"*, %\"class.std::__cxx11::basic_string\"** %7, align 8, !tbaa !39\n  %9 = ptrtoint %\"class.std::__cxx11::basic_string\"* %6 to i64\n  %10 = ptrtoint %\"class.std::__cxx11::basic_string\"* %8 to i64\n  %11 = sub i64 %9, %10\n  %12 = ashr exact i64 %11, 5\n  %13 = icmp eq i64 %11, 9223372036854775776\n  br i1 %13, label %14, label %15\n\n14:                                               ; preds = %3\n  tail call void @_ZSt20__throw_length_errorPKc(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.11, i64 0, i64 0)) #17\n  unreachable\n\n15:                                               ; preds = %3\n  %16 = icmp eq i64 %11, 0\n  %17 = select i1 %16, i64 1, i64 %12\n  %18 = add nsw i64 %17, %12\n  %19 = icmp ult i64 %18, %12\n  %20 = icmp ugt i64 %18, 288230376151711743\n  %21 = or i1 %19, %20\n  %22 = select i1 %21, i64 288230376151711743, i64 %18\n  %23 = ptrtoint %\"class.std::__cxx11::basic_string\"* %1 to i64\n  %24 = sub i64 %23, %10\n  %25 = ashr exact i64 %24, 5\n  %26 = icmp eq i64 %22, 0\n  br i1 %26, label %31, label %27\n\n27:                                               ; preds = %15\n  %28 = shl nuw nsw i64 %22, 5\n  %29 = tail call noalias nonnull i8* @_Znwm(i64 %28) #15\n  %30 = bitcast i8* %29 to %\"class.std::__cxx11::basic_string\"*\n  br label %31\n\n31:                                               ; preds = %15, %27\n  %32 = phi %\"class.std::__cxx11::basic_string\"* [ %30, %27 ], [ null, %15 ]\n  %33 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %32, i64 %25\n  %34 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %32, i64 %25, i32 2\n  %35 = bitcast %\"class.std::__cxx11::basic_string\"* %33 to %union.anon**\n  store %union.anon* %34, %union.anon** %35, align 8, !tbaa !12\n  %36 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %2, i64 0, i32 0, i32 0\n  %37 = load i8*, i8** %36, align 8, !tbaa !28\n  %38 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %2, i64 0, i32 1\n  %39 = load i64, i64* %38, align 8, !tbaa !13\n  %40 = bitcast i64* %4 to i8*\n  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %40) #13\n  store i64 %39, i64* %4, align 8, !tbaa !37\n  %41 = icmp ugt i64 %39, 15\n  br i1 %41, label %44, label %42\n\n42:                                               ; preds = %31\n  %43 = bitcast %union.anon* %34 to i8*\n  br label %50\n\n44:                                               ; preds = %31\n  %45 = invoke i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %33, i64* nonnull align 8 dereferenceable(8) %4, i64 0)\n          to label %46 unwind label %126\n\n46:                                               ; preds = %44\n  %47 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %33, i64 0, i32 0, i32 0\n  store i8* %45, i8** %47, align 8, !tbaa !28\n  %48 = load i64, i64* %4, align 8, !tbaa !37\n  %49 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %32, i64 %25, i32 2, i32 0\n  store i64 %48, i64* %49, align 8, !tbaa !14\n  br label %50\n\n50:                                               ; preds = %46, %42\n  %51 = phi i8* [ %43, %42 ], [ %45, %46 ]\n  switch i64 %39, label %54 [\n    i64 1, label %52\n    i64 0, label %55\n  ]\n\n52:                                               ; preds = %50\n  %53 = load i8, i8* %37, align 1, !tbaa !14\n  store i8 %53, i8* %51, align 1, !tbaa !14\n  br label %55\n\n54:                                               ; preds = %50\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %51, i8* align 1 %37, i64 %39, i1 false) #13\n  br label %55\n\n55:                                               ; preds = %54, %52, %50\n  %56 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %33, i64 0, i32 0, i32 0\n  %57 = load i64, i64* %4, align 8, !tbaa !37\n  %58 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %32, i64 %25, i32 1\n  store i64 %57, i64* %58, align 8, !tbaa !13\n  %59 = load i8*, i8** %56, align 8, !tbaa !28\n  %60 = getelementptr inbounds i8, i8* %59, i64 %57\n  store i8 0, i8* %60, align 1, !tbaa !14\n  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %40) #13\n  %61 = icmp eq %\"class.std::__cxx11::basic_string\"* %8, %1\n  br i1 %61, label %87, label %62\n\n62:                                               ; preds = %55, %79\n  %63 = phi %\"class.std::__cxx11::basic_string\"* [ %85, %79 ], [ %32, %55 ]\n  %64 = phi %\"class.std::__cxx11::basic_string\"* [ %84, %79 ], [ %8, %55 ]\n  %65 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %63, i64 0, i32 2\n  %66 = bitcast %\"class.std::__cxx11::basic_string\"* %63 to %union.anon**\n  store %union.anon* %65, %union.anon** %66, align 8, !tbaa !12\n  %67 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %64, i64 0, i32 0, i32 0\n  %68 = load i8*, i8** %67, align 8, !tbaa !28\n  %69 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %64, i64 0, i32 2\n  %70 = bitcast %union.anon* %69 to i8*\n  %71 = icmp eq i8* %68, %70\n  br i1 %71, label %72, label %74\n\n72:                                               ; preds = %62\n  %73 = bitcast %union.anon* %65 to i8*\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(16) %73, i8* noundef nonnull align 8 dereferenceable(16) %68, i64 16, i1 false) #13\n  br label %79\n\n74:                                               ; preds = %62\n  %75 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %63, i64 0, i32 0, i32 0\n  store i8* %68, i8** %75, align 8, !tbaa !28\n  %76 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %64, i64 0, i32 2, i32 0\n  %77 = load i64, i64* %76, align 8, !tbaa !14\n  %78 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %63, i64 0, i32 2, i32 0\n  store i64 %77, i64* %78, align 8, !tbaa !14\n  br label %79\n\n79:                                               ; preds = %74, %72\n  %80 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %64, i64 0, i32 1\n  %81 = load i64, i64* %80, align 8, !tbaa !13\n  %82 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %63, i64 0, i32 1\n  store i64 %81, i64* %82, align 8, !tbaa !13\n  %83 = bitcast %\"class.std::__cxx11::basic_string\"* %64 to %union.anon**\n  store %union.anon* %69, %union.anon** %83, align 8, !tbaa !28\n  store i64 0, i64* %80, align 8, !tbaa !13\n  store i8 0, i8* %70, align 8, !tbaa !14\n  %84 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %64, i64 1\n  %85 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %63, i64 1\n  %86 = icmp eq %\"class.std::__cxx11::basic_string\"* %84, %1\n  br i1 %86, label %87, label %62, !llvm.loop !57\n\n87:                                               ; preds = %79, %55\n  %88 = phi %\"class.std::__cxx11::basic_string\"* [ %32, %55 ], [ %85, %79 ]\n  %89 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %88, i64 1\n  %90 = icmp eq %\"class.std::__cxx11::basic_string\"* %6, %1\n  br i1 %90, label %116, label %91\n\n91:                                               ; preds = %87, %108\n  %92 = phi %\"class.std::__cxx11::basic_string\"* [ %114, %108 ], [ %89, %87 ]\n  %93 = phi %\"class.std::__cxx11::basic_string\"* [ %113, %108 ], [ %1, %87 ]\n  %94 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %92, i64 0, i32 2\n  %95 = bitcast %\"class.std::__cxx11::basic_string\"* %92 to %union.anon**\n  store %union.anon* %94, %union.anon** %95, align 8, !tbaa !12\n  %96 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %93, i64 0, i32 0, i32 0\n  %97 = load i8*, i8** %96, align 8, !tbaa !28\n  %98 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %93, i64 0, i32 2\n  %99 = bitcast %union.anon* %98 to i8*\n  %100 = icmp eq i8* %97, %99\n  br i1 %100, label %101, label %103\n\n101:                                              ; preds = %91\n  %102 = bitcast %union.anon* %94 to i8*\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(16) %102, i8* noundef nonnull align 8 dereferenceable(16) %97, i64 16, i1 false) #13\n  br label %108\n\n103:                                              ; preds = %91\n  %104 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %92, i64 0, i32 0, i32 0\n  store i8* %97, i8** %104, align 8, !tbaa !28\n  %105 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %93, i64 0, i32 2, i32 0\n  %106 = load i64, i64* %105, align 8, !tbaa !14\n  %107 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %92, i64 0, i32 2, i32 0\n  store i64 %106, i64* %107, align 8, !tbaa !14\n  br label %108\n\n108:                                              ; preds = %103, %101\n  %109 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %93, i64 0, i32 1\n  %110 = load i64, i64* %109, align 8, !tbaa !13\n  %111 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %92, i64 0, i32 1\n  store i64 %110, i64* %111, align 8, !tbaa !13\n  %112 = bitcast %\"class.std::__cxx11::basic_string\"* %93 to %union.anon**\n  store %union.anon* %98, %union.anon** %112, align 8, !tbaa !28\n  store i64 0, i64* %109, align 8, !tbaa !13\n  store i8 0, i8* %99, align 8, !tbaa !14\n  %113 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %93, i64 1\n  %114 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %92, i64 1\n  %115 = icmp eq %\"class.std::__cxx11::basic_string\"* %113, %6\n  br i1 %115, label %116, label %91, !llvm.loop !57\n\n116:                                              ; preds = %108, %87\n  %117 = phi %\"class.std::__cxx11::basic_string\"* [ %89, %87 ], [ %114, %108 ]\n  %118 = icmp eq %\"class.std::__cxx11::basic_string\"* %8, null\n  br i1 %118, label %121, label %119\n\n119:                                              ; preds = %116\n  %120 = bitcast %\"class.std::__cxx11::basic_string\"* %8 to i8*\n  call void @_ZdlPv(i8* nonnull %120) #13\n  br label %121\n\n121:                                              ; preds = %116, %119\n  %122 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0, i64 0, i32 0, i32 0, i32 0, i32 2\n  store %\"class.std::__cxx11::basic_string\"* %32, %\"class.std::__cxx11::basic_string\"** %7, align 8, !tbaa !39\n  store %\"class.std::__cxx11::basic_string\"* %117, %\"class.std::__cxx11::basic_string\"** %5, align 8, !tbaa !34\n  %123 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %32, i64 %22\n  store %\"class.std::__cxx11::basic_string\"* %123, %\"class.std::__cxx11::basic_string\"** %122, align 8, !tbaa !36\n  ret void\n\n124:                                              ; preds = %126\n  %125 = landingpad { i8*, i32 }\n          cleanup\n  invoke void @__cxa_end_catch()\n          to label %131 unwind label %132\n\n126:                                              ; preds = %44\n  %127 = landingpad { i8*, i32 }\n          catch i8* null\n  %128 = extractvalue { i8*, i32 } %127, 0\n  %129 = call i8* @__cxa_begin_catch(i8* %128) #13\n  %130 = bitcast %\"class.std::__cxx11::basic_string\"* %32 to i8*\n  call void @_ZdlPv(i8* nonnull %130) #13\n  invoke void @__cxa_rethrow() #17\n          to label %135 unwind label %124\n\n131:                                              ; preds = %124\n  resume { i8*, i32 } %125\n\n132:                                              ; preds = %124\n  %133 = landingpad { i8*, i32 }\n          catch i8* null\n  %134 = extractvalue { i8*, i32 } %133, 0\n  call void @__clang_call_terminate(i8* %134) #16\n  unreachable\n\n135:                                              ; preds = %126\n  unreachable\n}\n\n; Function Attrs: noreturn\ndeclare dso_local void @_ZSt20__throw_length_errorPKc(i8*) local_unnamed_addr #12\n\nattributes #0 = { uwtable \"frame-pointer\"=\"none\" \"min-legal-vector-width\"=\"0\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #1 = { argmemonly mustprogress nofree nosync nounwind willreturn }\nattributes #2 = { argmemonly mustprogress nofree nounwind willreturn writeonly }\nattributes #3 = { nounwind uwtable \"frame-pointer\"=\"none\" \"min-legal-vector-width\"=\"0\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #4 = { \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #5 = { noinline noreturn nounwind }\nattributes #6 = { argmemonly mustprogress nofree nounwind willreturn }\nattributes #7 = { nobuiltin nounwind \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #8 = { mustprogress nofree nounwind readonly willreturn \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #9 = { nounwind \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #10 = { nobuiltin allocsize(0) \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #11 = { mustprogress nofree nosync nounwind readnone speculatable willreturn }\nattributes #12 = { noreturn \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #13 = { nounwind }\nattributes #14 = { nounwind readonly willreturn }\nattributes #15 = { allocsize(0) }\nattributes #16 = { noreturn nounwind }\nattributes #17 = { noreturn }\n\n!llvm.module.flags = !{!0, !1}\n!llvm.ident = !{!2}\n\n!0 = !{i32 1, !\"wchar_size\", i32 4}\n!1 = !{i32 7, !\"uwtable\", i32 1}\n!2 = !{!\"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)\"}\n!3 = !{!4, !5, i64 0}\n!4 = !{!\"_ZTSSt4pairIKiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE\", !5, i64 0, !8, i64 8}\n!5 = !{!\"int\", !6, i64 0}\n!6 = !{!\"omnipotent char\", !7, i64 0}\n!7 = !{!\"Simple C++ TBAA\"}\n!8 = !{!\"_ZTSNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE\", !9, i64 0, !11, i64 8, !6, i64 16}\n!9 = !{!\"_ZTSNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderE\", !10, i64 0}\n!10 = !{!\"any pointer\", !6, i64 0}\n!11 = !{!\"long\", !6, i64 0}\n!12 = !{!9, !10, i64 0}\n!13 = !{!8, !11, i64 8}\n!14 = !{!6, !6, i64 0}\n!15 = !{!16, !18, i64 0}\n!16 = !{!\"_ZTSSt15_Rb_tree_header\", !17, i64 0, !11, i64 32}\n!17 = !{!\"_ZTSSt18_Rb_tree_node_base\", !18, i64 0, !10, i64 8, !10, i64 16, !10, i64 24}\n!18 = !{!\"_ZTSSt14_Rb_tree_color\", !6, i64 0}\n!19 = !{!16, !10, i64 8}\n!20 = !{!16, !10, i64 16}\n!21 = !{!16, !10, i64 24}\n!22 = !{!16, !11, i64 32}\n!23 = !{!10, !10, i64 0}\n!24 = !{!5, !5, i64 0}\n!25 = distinct !{!25, !26}\n!26 = !{!\"llvm.loop.mustprogress\"}\n!27 = distinct !{!27, !26}\n!28 = !{!8, !10, i64 0}\n!29 = !{i64 0, i64 65}\n!30 = !{!31, !10, i64 8}\n!31 = !{!\"_ZTSNSt12_Vector_baseIiSaIiEE17_Vector_impl_dataE\", !10, i64 0, !10, i64 8, !10, i64 16}\n!32 = !{!31, !10, i64 0}\n!33 = distinct !{!33, !26}\n!34 = !{!35, !10, i64 8}\n!35 = !{!\"_ZTSNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_Vector_impl_dataE\", !10, i64 0, !10, i64 8, !10, i64 16}\n!36 = !{!35, !10, i64 16}\n!37 = !{!11, !11, i64 0}\n!38 = distinct !{!38, !26}\n!39 = !{!35, !10, i64 0}\n!40 = distinct !{!40, !26}\n!41 = !{!17, !10, i64 24}\n!42 = !{!17, !10, i64 16}\n!43 = distinct !{!43, !26}\n!44 = distinct !{!44, !26}\n!45 = distinct !{!45, !26}\n!46 = distinct !{!46, !26}\n!47 = distinct !{!47, !26}\n!48 = distinct !{!48, !26}\n!49 = distinct !{!49, !26}\n!50 = distinct !{!50, !26}\n!51 = distinct !{!51, !26}\n!52 = distinct !{!52, !26}\n!53 = distinct !{!53, !26}\n!54 = distinct !{!54, !26}\n!55 = !{!56, !10, i64 0}\n!56 = !{!\"_ZTSSt10_Head_baseILm0ERKiLb0EE\", !10, i64 0}\n!57 = distinct !{!57, !26}\n", "target": "This is the targeted source code:\n/*\nGiven a vector of integers, sort the integers that are between 1 and 9 inclusive,\nreverse the resulting vector, and then replace each digit by its corresponding name from\n\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\nFor example:\n  arr = {2, 1, 1, 4, 5, 8, 2, 3}   \n        -> sort arr -> {1, 1, 2, 2, 3, 4, 5, 8} \n        -> reverse arr -> {8, 5, 4, 3, 2, 2, 1, 1}\n  return {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}\n\n  If the vector is empty, return an empty vector:\n  arr = {}\n  return {}\n\n  If the vector has any strange number ignore it:\n  arr = {1, -1 , 55} \n        -> sort arr -> {-1, 1, 55}\n        -> reverse arr -> {55, 1, -1}\n  return = {\"One\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<map>\n#include<algorithm>\nusing namespace std;\nvector<string> by_length(vector<int> arr){\n\n    map<int,string> numto={{0,\"Zero\"},{1,\"One\"},{2,\"Two\"},{3,\"Three\"},{4,\"Four\"},{5,\"Five\"},{6,\"Six\"},{7,\"Seven\"},{8,\"Eight\"},{9,\"Nine\"}};\n    sort(arr.begin(),arr.end());\n    vector<string> out={};\n    for (int i=arr.size()-1;i>=0;i-=1)\n        if (arr[i]>=1 and arr[i]<=9)\n        out.push_back(numto[arr[i]]);\n    return out;\n}\n"}
{"input": "Convert this to C++:\n; ModuleID = '../../Human_xBenchmarks_164/CPP_106/CPP_106.cpp'\nsource_filename = \"../../Human_xBenchmarks_164/CPP_106/CPP_106.cpp\"\ntarget datalayout = \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\ntarget triple = \"x86_64-unknown-linux-gnu\"\n\n%\"class.std::vector\" = type { %\"struct.std::_Vector_base\" }\n%\"struct.std::_Vector_base\" = type { %\"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl\" }\n%\"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl\" = type { %\"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl_data\" }\n%\"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl_data\" = type { i32*, i32*, i32* }\n\n@.str = private unnamed_addr constant [26 x i8] c\"vector::_M_realloc_insert\\00\", align 1\n\n; Function Attrs: uwtable\ndefine dso_local void @_Z1fi(%\"class.std::vector\"* noalias nocapture sret(%\"class.std::vector\") align 8 %0, i32 %1) local_unnamed_addr #0 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {\n  %3 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0, i64 0, i32 0, i32 0, i32 0, i32 1\n  %4 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0, i64 0, i32 0, i32 0, i32 0, i32 2\n  %5 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0, i64 0, i32 0, i32 0, i32 0, i32 0\n  %6 = icmp slt i32 %1, 1\n  %7 = bitcast %\"class.std::vector\"* %0 to i8*\n  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(24) %7, i8 0, i64 24, i1 false)\n  br i1 %6, label %117, label %8\n\n8:                                                ; preds = %2, %110\n  %9 = phi i32* [ %111, %110 ], [ null, %2 ]\n  %10 = phi i32* [ %112, %110 ], [ null, %2 ]\n  %11 = phi i32* [ %113, %110 ], [ null, %2 ]\n  %12 = phi i32* [ %114, %110 ], [ null, %2 ]\n  %13 = phi i32 [ %115, %110 ], [ 1, %2 ]\n  %14 = phi i32 [ %17, %110 ], [ 1, %2 ]\n  %15 = phi i32 [ %16, %110 ], [ 0, %2 ]\n  %16 = add nuw nsw i32 %13, %15\n  %17 = mul nsw i32 %13, %14\n  %18 = and i32 %13, 1\n  %19 = icmp eq i32 %18, 0\n  br i1 %19, label %20, label %70\n\n20:                                               ; preds = %8\n  %21 = icmp eq i32* %12, %9\n  br i1 %21, label %24, label %22\n\n22:                                               ; preds = %20\n  store i32 %17, i32* %12, align 4, !tbaa !3\n  %23 = getelementptr inbounds i32, i32* %12, i64 1\n  store i32* %23, i32** %3, align 8, !tbaa !7\n  br label %110\n\n24:                                               ; preds = %20\n  %25 = ptrtoint i32* %9 to i64\n  %26 = ptrtoint i32* %10 to i64\n  %27 = sub i64 %25, %26\n  %28 = ashr exact i64 %27, 2\n  %29 = icmp eq i64 %27, 9223372036854775804\n  br i1 %29, label %30, label %32\n\n30:                                               ; preds = %24\n  invoke void @_ZSt20__throw_length_errorPKc(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str, i64 0, i64 0)) #6\n          to label %31 unwind label %62\n\n31:                                               ; preds = %30\n  unreachable\n\n32:                                               ; preds = %24\n  %33 = icmp eq i64 %27, 0\n  %34 = select i1 %33, i64 1, i64 %28\n  %35 = add nsw i64 %34, %28\n  %36 = icmp ult i64 %35, %28\n  %37 = icmp ugt i64 %35, 2305843009213693951\n  %38 = or i1 %36, %37\n  %39 = select i1 %38, i64 2305843009213693951, i64 %35\n  %40 = icmp eq i64 %39, 0\n  br i1 %40, label %46, label %41\n\n41:                                               ; preds = %32\n  %42 = shl nuw nsw i64 %39, 2\n  %43 = invoke noalias nonnull i8* @_Znwm(i64 %42) #7\n          to label %44 unwind label %60\n\n44:                                               ; preds = %41\n  %45 = bitcast i8* %43 to i32*\n  br label %46\n\n46:                                               ; preds = %44, %32\n  %47 = phi i32* [ %45, %44 ], [ null, %32 ]\n  %48 = getelementptr inbounds i32, i32* %47, i64 %28\n  store i32 %17, i32* %48, align 4, !tbaa !3\n  %49 = icmp sgt i64 %27, 0\n  br i1 %49, label %50, label %53\n\n50:                                               ; preds = %46\n  %51 = bitcast i32* %47 to i8*\n  %52 = bitcast i32* %10 to i8*\n  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %51, i8* align 4 %52, i64 %27, i1 false) #8\n  br label %53\n\n53:                                               ; preds = %50, %46\n  %54 = getelementptr inbounds i32, i32* %48, i64 1\n  %55 = icmp eq i32* %10, null\n  br i1 %55, label %58, label %56\n\n56:                                               ; preds = %53\n  %57 = bitcast i32* %10 to i8*\n  tail call void @_ZdlPv(i8* nonnull %57) #8\n  br label %58\n\n58:                                               ; preds = %56, %53\n  store i32* %47, i32** %5, align 8, !tbaa !10\n  store i32* %54, i32** %3, align 8, !tbaa !7\n  %59 = getelementptr inbounds i32, i32* %47, i64 %39\n  store i32* %59, i32** %4, align 8, !tbaa !11\n  br label %110\n\n60:                                               ; preds = %41, %91\n  %61 = landingpad { i8*, i32 }\n          cleanup\n  br label %64\n\n62:                                               ; preds = %30, %80\n  %63 = landingpad { i8*, i32 }\n          cleanup\n  br label %64\n\n64:                                               ; preds = %62, %60\n  %65 = phi { i8*, i32 } [ %61, %60 ], [ %63, %62 ]\n  %66 = icmp eq i32* %10, null\n  br i1 %66, label %69, label %67\n\n67:                                               ; preds = %64\n  %68 = bitcast i32* %10 to i8*\n  tail call void @_ZdlPv(i8* nonnull %68) #8\n  br label %69\n\n69:                                               ; preds = %64, %67\n  resume { i8*, i32 } %65\n\n70:                                               ; preds = %8\n  %71 = icmp eq i32* %12, %11\n  br i1 %71, label %74, label %72\n\n72:                                               ; preds = %70\n  store i32 %16, i32* %12, align 4, !tbaa !3\n  %73 = getelementptr inbounds i32, i32* %12, i64 1\n  store i32* %73, i32** %3, align 8, !tbaa !7\n  br label %110\n\n74:                                               ; preds = %70\n  %75 = ptrtoint i32* %11 to i64\n  %76 = ptrtoint i32* %10 to i64\n  %77 = sub i64 %75, %76\n  %78 = ashr exact i64 %77, 2\n  %79 = icmp eq i64 %77, 9223372036854775804\n  br i1 %79, label %80, label %82\n\n80:                                               ; preds = %74\n  invoke void @_ZSt20__throw_length_errorPKc(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str, i64 0, i64 0)) #6\n          to label %81 unwind label %62\n\n81:                                               ; preds = %80\n  unreachable\n\n82:                                               ; preds = %74\n  %83 = icmp eq i64 %77, 0\n  %84 = select i1 %83, i64 1, i64 %78\n  %85 = add nsw i64 %84, %78\n  %86 = icmp ult i64 %85, %78\n  %87 = icmp ugt i64 %85, 2305843009213693951\n  %88 = or i1 %86, %87\n  %89 = select i1 %88, i64 2305843009213693951, i64 %85\n  %90 = icmp eq i64 %89, 0\n  br i1 %90, label %96, label %91\n\n91:                                               ; preds = %82\n  %92 = shl nuw nsw i64 %89, 2\n  %93 = invoke noalias nonnull i8* @_Znwm(i64 %92) #7\n          to label %94 unwind label %60\n\n94:                                               ; preds = %91\n  %95 = bitcast i8* %93 to i32*\n  br label %96\n\n96:                                               ; preds = %94, %82\n  %97 = phi i32* [ %95, %94 ], [ null, %82 ]\n  %98 = getelementptr inbounds i32, i32* %97, i64 %78\n  store i32 %16, i32* %98, align 4, !tbaa !3\n  %99 = icmp sgt i64 %77, 0\n  br i1 %99, label %100, label %103\n\n100:                                              ; preds = %96\n  %101 = bitcast i32* %97 to i8*\n  %102 = bitcast i32* %10 to i8*\n  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %101, i8* align 4 %102, i64 %77, i1 false) #8\n  br label %103\n\n103:                                              ; preds = %100, %96\n  %104 = getelementptr inbounds i32, i32* %98, i64 1\n  %105 = icmp eq i32* %10, null\n  br i1 %105, label %108, label %106\n\n106:                                              ; preds = %103\n  %107 = bitcast i32* %10 to i8*\n  tail call void @_ZdlPv(i8* nonnull %107) #8\n  br label %108\n\n108:                                              ; preds = %106, %103\n  store i32* %97, i32** %5, align 8, !tbaa !10\n  store i32* %104, i32** %3, align 8, !tbaa !7\n  %109 = getelementptr inbounds i32, i32* %97, i64 %89\n  store i32* %109, i32** %4, align 8, !tbaa !11\n  br label %110\n\n110:                                              ; preds = %108, %72, %58, %22\n  %111 = phi i32* [ %109, %108 ], [ %9, %72 ], [ %59, %58 ], [ %9, %22 ]\n  %112 = phi i32* [ %97, %108 ], [ %10, %72 ], [ %47, %58 ], [ %10, %22 ]\n  %113 = phi i32* [ %109, %108 ], [ %11, %72 ], [ %59, %58 ], [ %9, %22 ]\n  %114 = phi i32* [ %104, %108 ], [ %73, %72 ], [ %54, %58 ], [ %23, %22 ]\n  %115 = add nuw i32 %13, 1\n  %116 = icmp eq i32 %13, %1\n  br i1 %116, label %117, label %8, !llvm.loop !12\n\n117:                                              ; preds = %110, %2\n  ret void\n}\n\n; Function Attrs: argmemonly mustprogress nofree nounwind willreturn writeonly\ndeclare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1\n\ndeclare dso_local i32 @__gxx_personality_v0(...)\n\n; Function Attrs: nobuiltin nounwind\ndeclare dso_local void @_ZdlPv(i8*) local_unnamed_addr #2\n\n; Function Attrs: noreturn\ndeclare dso_local void @_ZSt20__throw_length_errorPKc(i8*) local_unnamed_addr #3\n\n; Function Attrs: nobuiltin allocsize(0)\ndeclare dso_local nonnull i8* @_Znwm(i64) local_unnamed_addr #4\n\n; Function Attrs: argmemonly mustprogress nofree nounwind willreturn\ndeclare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #5\n\nattributes #0 = { uwtable \"frame-pointer\"=\"none\" \"min-legal-vector-width\"=\"0\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #1 = { argmemonly mustprogress nofree nounwind willreturn writeonly }\nattributes #2 = { nobuiltin nounwind \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #3 = { noreturn \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #4 = { nobuiltin allocsize(0) \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #5 = { argmemonly mustprogress nofree nounwind willreturn }\nattributes #6 = { noreturn }\nattributes #7 = { allocsize(0) }\nattributes #8 = { nounwind }\n\n!llvm.module.flags = !{!0, !1}\n!llvm.ident = !{!2}\n\n!0 = !{i32 1, !\"wchar_size\", i32 4}\n!1 = !{i32 7, !\"uwtable\", i32 1}\n!2 = !{!\"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)\"}\n!3 = !{!4, !4, i64 0}\n!4 = !{!\"int\", !5, i64 0}\n!5 = !{!\"omnipotent char\", !6, i64 0}\n!6 = !{!\"Simple C++ TBAA\"}\n!7 = !{!8, !9, i64 8}\n!8 = !{!\"_ZTSNSt12_Vector_baseIiSaIiEE17_Vector_impl_dataE\", !9, i64 0, !9, i64 8, !9, i64 16}\n!9 = !{!\"any pointer\", !5, i64 0}\n!10 = !{!8, !9, i64 0}\n!11 = !{!8, !9, i64 16}\n!12 = distinct !{!12, !13}\n!13 = !{!\"llvm.loop.mustprogress\"}\n", "target": "This is the targeted source code:\n/*\nImplement the function f that takes n as a parameter,\nand returns a vector of size n, such that the value of the element at index i is the factorial of i if i is even\nor the sum of numbers from 1 to i otherwise.\ni starts from 1.\nthe factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\nExample:\nf(5) == {1, 2, 6, 24, 15}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> f(int n){\n\n    int sum=0,prod=1;\n    vector<int> out={};\n    for (int i=1;i<=n;i++)\n    {\n        sum+=i;\n        prod*=i;\n        if (i%2==0) out.push_back(prod);\n        else out.push_back(sum);\n    } \n    return out;\n}\n"}
{"input": "Convert this to C++:\n; ModuleID = '../../Human_xBenchmarks_164/CPP_107/CPP_107.cpp'\nsource_filename = \"../../Human_xBenchmarks_164/CPP_107/CPP_107.cpp\"\ntarget datalayout = \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\ntarget triple = \"x86_64-unknown-linux-gnu\"\n\n%\"class.std::vector\" = type { %\"struct.std::_Vector_base\" }\n%\"struct.std::_Vector_base\" = type { %\"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl\" }\n%\"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl\" = type { %\"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl_data\" }\n%\"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl_data\" = type { i32*, i32*, i32* }\n%\"class.std::__cxx11::basic_string\" = type { %\"struct.std::__cxx11::basic_string<char>::_Alloc_hider\", i64, %union.anon }\n%\"struct.std::__cxx11::basic_string<char>::_Alloc_hider\" = type { i8* }\n%union.anon = type { i64, [8 x i8] }\n%struct.__va_list_tag = type { i32, i32, i8*, i8* }\n\n$_ZN9__gnu_cxx12__to_xstringINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcEET_PFiPT0_mPKS8_P13__va_list_tagEmSB_z = comdat any\n\n@.str = private unnamed_addr constant [3 x i8] c\"%d\\00\", align 1\n\n; Function Attrs: uwtable\ndefine dso_local void @_Z19even_odd_palindromei(%\"class.std::vector\"* noalias nocapture sret(%\"class.std::vector\") align 8 %0, i32 %1) local_unnamed_addr #0 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {\n  %3 = alloca i64, align 8\n  %4 = alloca %\"class.std::__cxx11::basic_string\", align 8\n  %5 = alloca %\"class.std::__cxx11::basic_string\", align 8\n  %6 = bitcast %\"class.std::__cxx11::basic_string\"* %4 to i8*\n  %7 = bitcast %\"class.std::__cxx11::basic_string\"* %5 to i8*\n  %8 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %4, i64 0, i32 0, i32 0\n  %9 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %4, i64 0, i32 1\n  %10 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %5, i64 0, i32 2\n  %11 = bitcast %\"class.std::__cxx11::basic_string\"* %5 to %union.anon**\n  %12 = bitcast i64* %3 to i8*\n  %13 = bitcast %union.anon* %10 to i8*\n  %14 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %5, i64 0, i32 0, i32 0\n  %15 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %5, i64 0, i32 2, i32 0\n  %16 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %5, i64 0, i32 1\n  %17 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %4, i64 0, i32 2\n  %18 = bitcast %union.anon* %17 to i8*\n  %19 = icmp slt i32 %1, 1\n  br i1 %19, label %20, label %34\n\n20:                                               ; preds = %204, %2\n  %21 = phi i32 [ 0, %2 ], [ %196, %204 ]\n  %22 = phi i32 [ 0, %2 ], [ %191, %204 ]\n  %23 = bitcast %\"class.std::vector\"* %0 to i8*\n  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(24) %23, i8 0, i64 24, i1 false) #10\n  %24 = call noalias nonnull i8* @_Znwm(i64 8) #11\n  %25 = bitcast i8* %24 to i32*\n  %26 = bitcast %\"class.std::vector\"* %0 to i8**\n  store i8* %24, i8** %26, align 8, !tbaa !3\n  %27 = getelementptr inbounds i8, i8* %24, i64 8\n  %28 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0, i64 0, i32 0, i32 0, i32 0, i32 2\n  %29 = bitcast i32** %28 to i8**\n  store i8* %27, i8** %29, align 8, !tbaa !8\n  store i32 %21, i32* %25, align 4\n  %30 = getelementptr inbounds i8, i8* %24, i64 4\n  %31 = bitcast i8* %30 to i32*\n  store i32 %22, i32* %31, align 4\n  %32 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0, i64 0, i32 0, i32 0, i32 0, i32 1\n  %33 = bitcast i32** %32 to i8**\n  store i8* %27, i8** %33, align 8, !tbaa !9\n  ret void\n\n34:                                               ; preds = %2, %204\n  %35 = phi i32 [ %191, %204 ], [ 0, %2 ]\n  %36 = phi i32 [ %196, %204 ], [ 0, %2 ]\n  %37 = phi i32 [ %205, %204 ], [ 1, %2 ]\n  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %6) #10\n  call void (%\"class.std::__cxx11::basic_string\"*, i32 (i8*, i64, i8*, %struct.__va_list_tag*)*, i64, i8*, ...) @_ZN9__gnu_cxx12__to_xstringINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcEET_PFiPT0_mPKS8_P13__va_list_tagEmSB_z(%\"class.std::__cxx11::basic_string\"* nonnull sret(%\"class.std::__cxx11::basic_string\") align 8 %4, i32 (i8*, i64, i8*, %struct.__va_list_tag*)* nonnull @vsnprintf, i64 16, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %37)\n  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %7) #10\n  %38 = load i8*, i8** %8, align 8, !tbaa !10, !noalias !14\n  %39 = ptrtoint i8* %38 to i64\n  %40 = load i64, i64* %9, align 8, !tbaa !17, !noalias !14\n  %41 = getelementptr inbounds i8, i8* %38, i64 %40\n  store %union.anon* %10, %union.anon** %11, align 8, !tbaa !18\n  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %12) #10\n  store i64 %40, i64* %3, align 8, !tbaa !19\n  %42 = icmp ugt i64 %40, 15\n  br i1 %42, label %43, label %47\n\n43:                                               ; preds = %34\n  %44 = invoke i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %5, i64* nonnull align 8 dereferenceable(8) %3, i64 0)\n          to label %45 unwind label %207\n\n45:                                               ; preds = %43\n  store i8* %44, i8** %14, align 8, !tbaa !10\n  %46 = load i64, i64* %3, align 8, !tbaa !19\n  store i64 %46, i64* %15, align 8, !tbaa !20\n  br label %49\n\n47:                                               ; preds = %34\n  %48 = icmp eq i64 %40, 0\n  br i1 %48, label %159, label %49\n\n49:                                               ; preds = %45, %47\n  %50 = phi i8* [ %44, %45 ], [ %13, %47 ]\n  %51 = icmp ult i64 %40, 4\n  br i1 %51, label %106, label %52\n\n52:                                               ; preds = %49\n  %53 = getelementptr i8, i8* %50, i64 %40\n  %54 = icmp ult i8* %50, %41\n  %55 = icmp ult i8* %38, %53\n  %56 = and i1 %54, %55\n  br i1 %56, label %106, label %57\n\n57:                                               ; preds = %52\n  %58 = icmp ult i64 %40, 32\n  br i1 %58, label %87, label %59\n\n59:                                               ; preds = %57\n  %60 = and i64 %40, -32\n  br label %61\n\n61:                                               ; preds = %61, %59\n  %62 = phi i64 [ 0, %59 ], [ %77, %61 ]\n  %63 = getelementptr i8, i8* %50, i64 %62\n  %64 = xor i64 %62, -1\n  %65 = getelementptr i8, i8* %41, i64 %64\n  %66 = getelementptr inbounds i8, i8* %65, i64 -15\n  %67 = bitcast i8* %66 to <16 x i8>*\n  %68 = load <16 x i8>, <16 x i8>* %67, align 1, !tbaa !20, !alias.scope !21\n  %69 = shufflevector <16 x i8> %68, <16 x i8> poison, <16 x i32> <i32 15, i32 14, i32 13, i32 12, i32 11, i32 10, i32 9, i32 8, i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0>\n  %70 = getelementptr inbounds i8, i8* %65, i64 -31\n  %71 = bitcast i8* %70 to <16 x i8>*\n  %72 = load <16 x i8>, <16 x i8>* %71, align 1, !tbaa !20, !alias.scope !21\n  %73 = shufflevector <16 x i8> %72, <16 x i8> poison, <16 x i32> <i32 15, i32 14, i32 13, i32 12, i32 11, i32 10, i32 9, i32 8, i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0>\n  %74 = bitcast i8* %63 to <16 x i8>*\n  store <16 x i8> %69, <16 x i8>* %74, align 1, !tbaa !20, !alias.scope !24, !noalias !21\n  %75 = getelementptr i8, i8* %63, i64 16\n  %76 = bitcast i8* %75 to <16 x i8>*\n  store <16 x i8> %73, <16 x i8>* %76, align 1, !tbaa !20, !alias.scope !24, !noalias !21\n  %77 = add nuw i64 %62, 32\n  %78 = icmp eq i64 %77, %60\n  br i1 %78, label %79, label %61, !llvm.loop !26\n\n79:                                               ; preds = %61\n  %80 = icmp eq i64 %40, %60\n  br i1 %80, label %156, label %81\n\n81:                                               ; preds = %79\n  %82 = getelementptr i8, i8* %50, i64 %60\n  %83 = sub i64 0, %60\n  %84 = getelementptr i8, i8* %41, i64 %83\n  %85 = and i64 %40, 28\n  %86 = icmp eq i64 %85, 0\n  br i1 %86, label %106, label %87\n\n87:                                               ; preds = %57, %81\n  %88 = phi i64 [ %60, %81 ], [ 0, %57 ]\n  %89 = and i64 %40, -4\n  %90 = sub i64 0, %89\n  %91 = getelementptr i8, i8* %41, i64 %90\n  %92 = getelementptr i8, i8* %50, i64 %89\n  br label %93\n\n93:                                               ; preds = %93, %87\n  %94 = phi i64 [ %88, %87 ], [ %102, %93 ]\n  %95 = getelementptr i8, i8* %50, i64 %94\n  %96 = sub nuw nsw i64 -4, %94\n  %97 = getelementptr i8, i8* %41, i64 %96\n  %98 = bitcast i8* %97 to <4 x i8>*\n  %99 = load <4 x i8>, <4 x i8>* %98, align 1, !tbaa !20\n  %100 = shufflevector <4 x i8> %99, <4 x i8> poison, <4 x i32> <i32 3, i32 2, i32 1, i32 0>\n  %101 = bitcast i8* %95 to <4 x i8>*\n  store <4 x i8> %100, <4 x i8>* %101, align 1, !tbaa !20\n  %102 = add nuw i64 %94, 4\n  %103 = icmp eq i64 %102, %89\n  br i1 %103, label %104, label %93, !llvm.loop !29\n\n104:                                              ; preds = %93\n  %105 = icmp eq i64 %40, %89\n  br i1 %105, label %156, label %106\n\n106:                                              ; preds = %52, %49, %81, %104\n  %107 = phi i8* [ %41, %49 ], [ %41, %52 ], [ %84, %81 ], [ %91, %104 ]\n  %108 = phi i8* [ %50, %49 ], [ %50, %52 ], [ %82, %81 ], [ %92, %104 ]\n  %109 = ptrtoint i8* %107 to i64\n  %110 = sub i64 %109, %39\n  %111 = xor i64 %39, -1\n  %112 = add i64 %111, %109\n  %113 = and i64 %110, 7\n  %114 = icmp eq i64 %113, 0\n  br i1 %114, label %124, label %115\n\n115:                                              ; preds = %106, %115\n  %116 = phi i8* [ %119, %115 ], [ %107, %106 ]\n  %117 = phi i8* [ %121, %115 ], [ %108, %106 ]\n  %118 = phi i64 [ %122, %115 ], [ %113, %106 ]\n  %119 = getelementptr inbounds i8, i8* %116, i64 -1\n  %120 = load i8, i8* %119, align 1, !tbaa !20\n  store i8 %120, i8* %117, align 1, !tbaa !20\n  %121 = getelementptr inbounds i8, i8* %117, i64 1\n  %122 = add i64 %118, -1\n  %123 = icmp eq i64 %122, 0\n  br i1 %123, label %124, label %115, !llvm.loop !30\n\n124:                                              ; preds = %115, %106\n  %125 = phi i8* [ %107, %106 ], [ %119, %115 ]\n  %126 = phi i8* [ %108, %106 ], [ %121, %115 ]\n  %127 = icmp ult i64 %112, 7\n  br i1 %127, label %156, label %128\n\n128:                                              ; preds = %124, %128\n  %129 = phi i8* [ %152, %128 ], [ %125, %124 ]\n  %130 = phi i8* [ %154, %128 ], [ %126, %124 ]\n  %131 = getelementptr inbounds i8, i8* %129, i64 -1\n  %132 = load i8, i8* %131, align 1, !tbaa !20\n  store i8 %132, i8* %130, align 1, !tbaa !20\n  %133 = getelementptr inbounds i8, i8* %130, i64 1\n  %134 = getelementptr inbounds i8, i8* %129, i64 -2\n  %135 = load i8, i8* %134, align 1, !tbaa !20\n  store i8 %135, i8* %133, align 1, !tbaa !20\n  %136 = getelementptr inbounds i8, i8* %130, i64 2\n  %137 = getelementptr inbounds i8, i8* %129, i64 -3\n  %138 = load i8, i8* %137, align 1, !tbaa !20\n  store i8 %138, i8* %136, align 1, !tbaa !20\n  %139 = getelementptr inbounds i8, i8* %130, i64 3\n  %140 = getelementptr inbounds i8, i8* %129, i64 -4\n  %141 = load i8, i8* %140, align 1, !tbaa !20\n  store i8 %141, i8* %139, align 1, !tbaa !20\n  %142 = getelementptr inbounds i8, i8* %130, i64 4\n  %143 = getelementptr inbounds i8, i8* %129, i64 -5\n  %144 = load i8, i8* %143, align 1, !tbaa !20\n  store i8 %144, i8* %142, align 1, !tbaa !20\n  %145 = getelementptr inbounds i8, i8* %130, i64 5\n  %146 = getelementptr inbounds i8, i8* %129, i64 -6\n  %147 = load i8, i8* %146, align 1, !tbaa !20\n  store i8 %147, i8* %145, align 1, !tbaa !20\n  %148 = getelementptr inbounds i8, i8* %130, i64 6\n  %149 = getelementptr inbounds i8, i8* %129, i64 -7\n  %150 = load i8, i8* %149, align 1, !tbaa !20\n  store i8 %150, i8* %148, align 1, !tbaa !20\n  %151 = getelementptr inbounds i8, i8* %130, i64 7\n  %152 = getelementptr inbounds i8, i8* %129, i64 -8\n  %153 = load i8, i8* %152, align 1, !tbaa !20\n  store i8 %153, i8* %151, align 1, !tbaa !20\n  %154 = getelementptr inbounds i8, i8* %130, i64 8\n  %155 = icmp eq i8* %152, %38\n  br i1 %155, label %156, label %128, !llvm.loop !32\n\n156:                                              ; preds = %124, %128, %104, %79\n  %157 = load i64, i64* %3, align 8, !tbaa !19\n  %158 = load i8*, i8** %14, align 8, !tbaa !10\n  br label %159\n\n159:                                              ; preds = %156, %47\n  %160 = phi i8* [ %158, %156 ], [ %13, %47 ]\n  %161 = phi i64 [ %157, %156 ], [ %40, %47 ]\n  store i64 %161, i64* %16, align 8, !tbaa !17\n  %162 = getelementptr inbounds i8, i8* %160, i64 %161\n  store i8 0, i8* %162, align 1, !tbaa !20\n  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %12) #10\n  %163 = load i64, i64* %9, align 8, !tbaa !17\n  %164 = load i64, i64* %16, align 8, !tbaa !17\n  %165 = icmp eq i64 %163, %164\n  br i1 %165, label %166, label %173\n\n166:                                              ; preds = %159\n  %167 = icmp eq i64 %163, 0\n  br i1 %167, label %176, label %168\n\n168:                                              ; preds = %166\n  %169 = load i8*, i8** %14, align 8, !tbaa !10\n  %170 = load i8*, i8** %8, align 8, !tbaa !10\n  %171 = call i32 @bcmp(i8* %170, i8* %169, i64 %163) #10\n  %172 = icmp eq i32 %171, 0\n  br label %176\n\n173:                                              ; preds = %159\n  %174 = and i32 %37, 1\n  %175 = icmp eq i32 %174, 0\n  br label %190\n\n176:                                              ; preds = %166, %168\n  %177 = phi i1 [ true, %166 ], [ %172, %168 ]\n  %178 = xor i1 %177, true\n  %179 = and i32 %37, 1\n  %180 = icmp eq i32 %179, 0\n  %181 = select i1 %178, i1 true, i1 %180\n  %182 = xor i1 %181, true\n  %183 = zext i1 %182 to i32\n  %184 = add nsw i32 %35, %183\n  br i1 %167, label %190, label %185\n\n185:                                              ; preds = %176\n  %186 = load i8*, i8** %14, align 8, !tbaa !10\n  %187 = load i8*, i8** %8, align 8, !tbaa !10\n  %188 = call i32 @bcmp(i8* %187, i8* %186, i64 %163) #10\n  %189 = icmp eq i32 %188, 0\n  br label %190\n\n190:                                              ; preds = %173, %176, %185\n  %191 = phi i32 [ %35, %173 ], [ %184, %185 ], [ %184, %176 ]\n  %192 = phi i1 [ %175, %173 ], [ %180, %185 ], [ %180, %176 ]\n  %193 = phi i1 [ false, %173 ], [ %189, %185 ], [ true, %176 ]\n  %194 = select i1 %193, i1 %192, i1 false\n  %195 = zext i1 %194 to i32\n  %196 = add nuw nsw i32 %36, %195\n  %197 = load i8*, i8** %14, align 8, !tbaa !10\n  %198 = icmp eq i8* %197, %13\n  br i1 %198, label %200, label %199\n\n199:                                              ; preds = %190\n  call void @_ZdlPv(i8* %197) #10\n  br label %200\n\n200:                                              ; preds = %190, %199\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %7) #10\n  %201 = load i8*, i8** %8, align 8, !tbaa !10\n  %202 = icmp eq i8* %201, %18\n  br i1 %202, label %204, label %203\n\n203:                                              ; preds = %200\n  call void @_ZdlPv(i8* %201) #10\n  br label %204\n\n204:                                              ; preds = %200, %203\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %6) #10\n  %205 = add nuw i32 %37, 1\n  %206 = icmp eq i32 %37, %1\n  br i1 %206, label %20, label %34, !llvm.loop !33\n\n207:                                              ; preds = %43\n  %208 = landingpad { i8*, i32 }\n          cleanup\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %7) #10\n  %209 = load i8*, i8** %8, align 8, !tbaa !10\n  %210 = icmp eq i8* %209, %18\n  br i1 %210, label %212, label %211\n\n211:                                              ; preds = %207\n  call void @_ZdlPv(i8* %209) #10\n  br label %212\n\n212:                                              ; preds = %207, %211\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %6) #10\n  resume { i8*, i32 } %208\n}\n\n; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn\ndeclare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1\n\ndeclare dso_local i32 @__gxx_personality_v0(...)\n\n; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn\ndeclare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1\n\n; Function Attrs: uwtable\ndefine linkonce_odr dso_local void @_ZN9__gnu_cxx12__to_xstringINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcEET_PFiPT0_mPKS8_P13__va_list_tagEmSB_z(%\"class.std::__cxx11::basic_string\"* noalias sret(%\"class.std::__cxx11::basic_string\") align 8 %0, i32 (i8*, i64, i8*, %struct.__va_list_tag*)* %1, i64 %2, i8* %3, ...) local_unnamed_addr #0 comdat personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {\n  %5 = alloca i64, align 8\n  %6 = alloca [1 x %struct.__va_list_tag], align 16\n  %7 = alloca i8, i64 %2, align 16\n  %8 = bitcast [1 x %struct.__va_list_tag]* %6 to i8*\n  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %8) #10\n  %9 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %6, i64 0, i64 0\n  call void @llvm.va_start(i8* nonnull %8)\n  %10 = call i32 %1(i8* nonnull %7, i64 %2, i8* %3, %struct.__va_list_tag* nonnull %9)\n  call void @llvm.va_end(i8* nonnull %8)\n  %11 = sext i32 %10 to i64\n  %12 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 2\n  %13 = bitcast %\"class.std::__cxx11::basic_string\"* %0 to %union.anon**\n  store %union.anon* %12, %union.anon** %13, align 8, !tbaa !18\n  %14 = bitcast %union.anon* %12 to i8*\n  %15 = bitcast i64* %5 to i8*\n  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %15) #10\n  store i64 %11, i64* %5, align 8, !tbaa !19\n  %16 = icmp ugt i32 %10, 15\n  br i1 %16, label %17, label %22\n\n17:                                               ; preds = %4\n  %18 = call i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %0, i64* nonnull align 8 dereferenceable(8) %5, i64 0)\n  %19 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 0, i32 0\n  store i8* %18, i8** %19, align 8, !tbaa !10\n  %20 = load i64, i64* %5, align 8, !tbaa !19\n  %21 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 2, i32 0\n  store i64 %20, i64* %21, align 8, !tbaa !20\n  br label %22\n\n22:                                               ; preds = %17, %4\n  %23 = phi i8* [ %18, %17 ], [ %14, %4 ]\n  switch i64 %11, label %26 [\n    i64 1, label %24\n    i64 0, label %27\n  ]\n\n24:                                               ; preds = %22\n  %25 = load i8, i8* %7, align 16, !tbaa !20\n  store i8 %25, i8* %23, align 1, !tbaa !20\n  br label %27\n\n26:                                               ; preds = %22\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %23, i8* nonnull align 16 %7, i64 %11, i1 false) #10\n  br label %27\n\n27:                                               ; preds = %26, %24, %22\n  %28 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 0, i32 0\n  %29 = load i64, i64* %5, align 8, !tbaa !19\n  %30 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 1\n  store i64 %29, i64* %30, align 8, !tbaa !17\n  %31 = load i8*, i8** %28, align 8, !tbaa !10\n  %32 = getelementptr inbounds i8, i8* %31, i64 %29\n  store i8 0, i8* %32, align 1, !tbaa !20\n  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %15) #10\n  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %8) #10\n  ret void\n}\n\n; Function Attrs: nofree nounwind\ndeclare dso_local noundef i32 @vsnprintf(i8* nocapture noundef, i64 noundef, i8* nocapture noundef readonly, %struct.__va_list_tag* noundef) #2\n\n; Function Attrs: mustprogress nofree nosync nounwind willreturn\ndeclare void @llvm.va_start(i8*) #3\n\n; Function Attrs: mustprogress nofree nosync nounwind willreturn\ndeclare void @llvm.va_end(i8*) #3\n\ndeclare dso_local i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32), i64* nonnull align 8 dereferenceable(8), i64) local_unnamed_addr #4\n\n; Function Attrs: argmemonly mustprogress nofree nounwind willreturn\ndeclare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #5\n\n; Function Attrs: nobuiltin nounwind\ndeclare dso_local void @_ZdlPv(i8*) local_unnamed_addr #6\n\n; Function Attrs: nobuiltin allocsize(0)\ndeclare dso_local nonnull i8* @_Znwm(i64) local_unnamed_addr #7\n\n; Function Attrs: argmemonly nofree nounwind willreturn writeonly\ndeclare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #8\n\n; Function Attrs: argmemonly nofree nounwind readonly willreturn\ndeclare i32 @bcmp(i8* nocapture, i8* nocapture, i64) local_unnamed_addr #9\n\nattributes #0 = { uwtable \"frame-pointer\"=\"none\" \"min-legal-vector-width\"=\"0\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #1 = { argmemonly mustprogress nofree nosync nounwind willreturn }\nattributes #2 = { nofree nounwind \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #3 = { mustprogress nofree nosync nounwind willreturn }\nattributes #4 = { \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #5 = { argmemonly mustprogress nofree nounwind willreturn }\nattributes #6 = { nobuiltin nounwind \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #7 = { nobuiltin allocsize(0) \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #8 = { argmemonly nofree nounwind willreturn writeonly }\nattributes #9 = { argmemonly nofree nounwind readonly willreturn }\nattributes #10 = { nounwind }\nattributes #11 = { allocsize(0) }\n\n!llvm.module.flags = !{!0, !1}\n!llvm.ident = !{!2}\n\n!0 = !{i32 1, !\"wchar_size\", i32 4}\n!1 = !{i32 7, !\"uwtable\", i32 1}\n!2 = !{!\"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)\"}\n!3 = !{!4, !5, i64 0}\n!4 = !{!\"_ZTSNSt12_Vector_baseIiSaIiEE17_Vector_impl_dataE\", !5, i64 0, !5, i64 8, !5, i64 16}\n!5 = !{!\"any pointer\", !6, i64 0}\n!6 = !{!\"omnipotent char\", !7, i64 0}\n!7 = !{!\"Simple C++ TBAA\"}\n!8 = !{!4, !5, i64 16}\n!9 = !{!4, !5, i64 8}\n!10 = !{!11, !5, i64 0}\n!11 = !{!\"_ZTSNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE\", !12, i64 0, !13, i64 8, !6, i64 16}\n!12 = !{!\"_ZTSNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderE\", !5, i64 0}\n!13 = !{!\"long\", !6, i64 0}\n!14 = !{!15}\n!15 = distinct !{!15, !16, !\"_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6rbeginEv: argument 0\"}\n!16 = distinct !{!16, !\"_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6rbeginEv\"}\n!17 = !{!11, !13, i64 8}\n!18 = !{!12, !5, i64 0}\n!19 = !{!13, !13, i64 0}\n!20 = !{!6, !6, i64 0}\n!21 = !{!22}\n!22 = distinct !{!22, !23}\n!23 = distinct !{!23, !\"LVerDomain\"}\n!24 = !{!25}\n!25 = distinct !{!25, !23}\n!26 = distinct !{!26, !27, !28}\n!27 = !{!\"llvm.loop.mustprogress\"}\n!28 = !{!\"llvm.loop.isvectorized\", i32 1}\n!29 = distinct !{!29, !27, !28}\n!30 = distinct !{!30, !31}\n!31 = !{!\"llvm.loop.unroll.disable\"}\n!32 = distinct !{!32, !27, !28}\n!33 = distinct !{!33, !27}\n", "target": "This is the targeted source code:\n/*\nGiven a positive integer n, return a vector that has the number of even and odd\ninteger palindromes that fall within the range(1, n), inclusive.\n\nExample 1:\n\n    Input: 3\n    Output: (1, 2)\n    Explanation:\n    Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\nExample 2:\n\n    Input: 12\n    Output: (4, 6)\n    Explanation:\n    Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\nNote:\n    1. 1 <= n <= 10^3\n    2. returned vector has the number of even and odd integer palindromes respectively.\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<int> even_odd_palindrome(int n){\n\n    int num1=0,num2=0;\n    for (int i=1;i<=n;i++)\n    {\n        string w=to_string(i);\n        string p(w.rbegin(),w.rend());\n        if (w==p and i%2==1) num1+=1;\n        if (w==p and i%2==0) num2+=1;\n            \n    }\n    return {num2,num1};\n}\n"}
{"input": "Convert this to C++:\n; ModuleID = '../../Human_xBenchmarks_164/CPP_108/CPP_108.cpp'\nsource_filename = \"../../Human_xBenchmarks_164/CPP_108/CPP_108.cpp\"\ntarget datalayout = \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\ntarget triple = \"x86_64-unknown-linux-gnu\"\n\n%\"class.std::vector\" = type { %\"struct.std::_Vector_base\" }\n%\"struct.std::_Vector_base\" = type { %\"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl\" }\n%\"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl\" = type { %\"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl_data\" }\n%\"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl_data\" = type { i32*, i32*, i32* }\n\n; Function Attrs: mustprogress nofree nosync nounwind readonly uwtable willreturn\ndefine dso_local i32 @_Z10count_numsSt6vectorIiSaIiEE(%\"class.std::vector\"* nocapture readonly %0) local_unnamed_addr #0 {\n  %2 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0, i64 0, i32 0, i32 0, i32 0, i32 1\n  %3 = load i32*, i32** %2, align 8, !tbaa !3\n  %4 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0, i64 0, i32 0, i32 0, i32 0, i32 0\n  %5 = load i32*, i32** %4, align 8, !tbaa !8\n  %6 = ptrtoint i32* %3 to i64\n  %7 = ptrtoint i32* %5 to i64\n  %8 = sub i64 %6, %7\n  %9 = icmp eq i64 %8, 0\n  br i1 %9, label %13, label %10\n\n10:                                               ; preds = %1\n  %11 = ashr exact i64 %8, 2\n  %12 = call i64 @llvm.umax.i64(i64 %11, i64 1)\n  br label %15\n\n13:                                               ; preds = %36, %1\n  %14 = phi i32 [ 0, %1 ], [ %38, %36 ]\n  ret i32 %14\n\n15:                                               ; preds = %10, %36\n  %16 = phi i64 [ 0, %10 ], [ %39, %36 ]\n  %17 = phi i32 [ 0, %10 ], [ %38, %36 ]\n  %18 = getelementptr inbounds i32, i32* %5, i64 %16\n  %19 = load i32, i32* %18, align 4, !tbaa !9\n  %20 = icmp sgt i32 %19, 0\n  br i1 %20, label %36, label %21\n\n21:                                               ; preds = %15\n  %22 = sub nsw i32 0, %19\n  %23 = icmp slt i32 %19, -9\n  br i1 %23, label %24, label %31\n\n24:                                               ; preds = %21, %24\n  %25 = phi i32 [ %29, %24 ], [ %22, %21 ]\n  %26 = phi i32 [ %28, %24 ], [ 0, %21 ]\n  %27 = urem i32 %25, 10\n  %28 = add nuw nsw i32 %27, %26\n  %29 = udiv i32 %25, 10\n  %30 = icmp ugt i32 %25, 99\n  br i1 %30, label %24, label %31, !llvm.loop !11\n\n31:                                               ; preds = %24, %21\n  %32 = phi i32 [ 0, %21 ], [ %28, %24 ]\n  %33 = phi i32 [ %22, %21 ], [ %29, %24 ]\n  %34 = icmp sgt i32 %32, %33\n  %35 = zext i1 %34 to i32\n  br label %36\n\n36:                                               ; preds = %15, %31\n  %37 = phi i32 [ %35, %31 ], [ 1, %15 ]\n  %38 = add nuw nsw i32 %17, %37\n  %39 = add nuw nsw i64 %16, 1\n  %40 = icmp eq i64 %39, %12\n  br i1 %40, label %13, label %15, !llvm.loop !13\n}\n\n; Function Attrs: nofree nosync nounwind readnone speculatable willreturn\ndeclare i64 @llvm.umax.i64(i64, i64) #1\n\nattributes #0 = { mustprogress nofree nosync nounwind readonly uwtable willreturn \"frame-pointer\"=\"none\" \"min-legal-vector-width\"=\"0\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #1 = { nofree nosync nounwind readnone speculatable willreturn }\n\n!llvm.module.flags = !{!0, !1}\n!llvm.ident = !{!2}\n\n!0 = !{i32 1, !\"wchar_size\", i32 4}\n!1 = !{i32 7, !\"uwtable\", i32 1}\n!2 = !{!\"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)\"}\n!3 = !{!4, !5, i64 8}\n!4 = !{!\"_ZTSNSt12_Vector_baseIiSaIiEE17_Vector_impl_dataE\", !5, i64 0, !5, i64 8, !5, i64 16}\n!5 = !{!\"any pointer\", !6, i64 0}\n!6 = !{!\"omnipotent char\", !7, i64 0}\n!7 = !{!\"Simple C++ TBAA\"}\n!8 = !{!4, !5, i64 0}\n!9 = !{!10, !10, i64 0}\n!10 = !{!\"int\", !6, i64 0}\n!11 = distinct !{!11, !12}\n!12 = !{!\"llvm.loop.mustprogress\"}\n!13 = distinct !{!13, !12}\n", "target": "This is the targeted source code:\n/*\nWrite a function count_nums which takes a vector of integers and returns\nthe number of elements which has a sum of digits > 0.\nIf a number is negative, then its first signed digit will be negative:\ne.g. -123 has signed digits -1, 2, and 3.\n>>> count_nums({}) == 0\n>>> count_nums({-1, 11, -11}) == 1\n>>> count_nums({1, 1, 2}) == 3\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nint count_nums(vector<int> n){\n\n    int num=0;\n    for (int i=0;i<n.size();i++)\n        if (n[i]>0) num+=1;\n        else\n        {\n            int sum=0;\n            int w;\n            w=abs(n[i]);\n            while (w>=10)\n            {\n                sum+=w%10;\n                w=w/10;\n            }\n            sum-=w;\n            if (sum>0) num+=1;\n        }\n    return num;\n}\n"}
{"input": "Convert this to C++:\n; ModuleID = '../../Human_xBenchmarks_164/CPP_109/CPP_109.cpp'\nsource_filename = \"../../Human_xBenchmarks_164/CPP_109/CPP_109.cpp\"\ntarget datalayout = \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\ntarget triple = \"x86_64-unknown-linux-gnu\"\n\n%\"class.std::vector\" = type { %\"struct.std::_Vector_base\" }\n%\"struct.std::_Vector_base\" = type { %\"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl\" }\n%\"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl\" = type { %\"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl_data\" }\n%\"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl_data\" = type { i32*, i32*, i32* }\n\n; Function Attrs: mustprogress nofree norecurse nosync nounwind readonly uwtable willreturn\ndefine dso_local zeroext i1 @_Z13move_one_ballSt6vectorIiSaIiEE(%\"class.std::vector\"* nocapture readonly %0) local_unnamed_addr #0 {\n  %2 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0, i64 0, i32 0, i32 0, i32 0, i32 1\n  %3 = load i32*, i32** %2, align 8, !tbaa !3\n  %4 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0, i64 0, i32 0, i32 0, i32 0, i32 0\n  %5 = load i32*, i32** %4, align 8, !tbaa !8\n  %6 = ptrtoint i32* %3 to i64\n  %7 = ptrtoint i32* %5 to i64\n  %8 = sub i64 %6, %7\n  %9 = ashr exact i64 %8, 2\n  %10 = icmp eq i64 %8, 0\n  br i1 %10, label %72, label %11\n\n11:                                               ; preds = %1\n  %12 = icmp ugt i64 %9, 1\n  %13 = load i32, i32* %5, align 4, !tbaa !9\n  br i1 %12, label %14, label %52\n\n14:                                               ; preds = %11\n  %15 = add nsw i64 %9, -1\n  %16 = icmp ult i64 %15, 8\n  br i1 %16, label %48, label %17\n\n17:                                               ; preds = %14\n  %18 = and i64 %15, -8\n  %19 = or i64 %18, 1\n  %20 = insertelement <4 x i32> poison, i32 %13, i32 3\n  br label %21\n\n21:                                               ; preds = %21, %17\n  %22 = phi i64 [ 0, %17 ], [ %41, %21 ]\n  %23 = phi <4 x i32> [ %20, %17 ], [ %32, %21 ]\n  %24 = phi <4 x i32> [ zeroinitializer, %17 ], [ %39, %21 ]\n  %25 = phi <4 x i32> [ zeroinitializer, %17 ], [ %40, %21 ]\n  %26 = or i64 %22, 1\n  %27 = getelementptr inbounds i32, i32* %5, i64 %26\n  %28 = bitcast i32* %27 to <4 x i32>*\n  %29 = load <4 x i32>, <4 x i32>* %28, align 4, !tbaa !9\n  %30 = getelementptr inbounds i32, i32* %27, i64 4\n  %31 = bitcast i32* %30 to <4 x i32>*\n  %32 = load <4 x i32>, <4 x i32>* %31, align 4, !tbaa !9\n  %33 = shufflevector <4 x i32> %23, <4 x i32> %29, <4 x i32> <i32 3, i32 4, i32 5, i32 6>\n  %34 = shufflevector <4 x i32> %29, <4 x i32> %32, <4 x i32> <i32 3, i32 4, i32 5, i32 6>\n  %35 = icmp slt <4 x i32> %29, %33\n  %36 = icmp slt <4 x i32> %32, %34\n  %37 = zext <4 x i1> %35 to <4 x i32>\n  %38 = zext <4 x i1> %36 to <4 x i32>\n  %39 = add <4 x i32> %24, %37\n  %40 = add <4 x i32> %25, %38\n  %41 = add nuw i64 %22, 8\n  %42 = icmp eq i64 %41, %18\n  br i1 %42, label %43, label %21, !llvm.loop !11\n\n43:                                               ; preds = %21\n  %44 = add <4 x i32> %40, %39\n  %45 = call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %44)\n  %46 = icmp eq i64 %15, %18\n  %47 = extractelement <4 x i32> %32, i32 3\n  br i1 %46, label %52, label %48\n\n48:                                               ; preds = %14, %43\n  %49 = phi i32 [ %47, %43 ], [ %13, %14 ]\n  %50 = phi i64 [ %19, %43 ], [ 1, %14 ]\n  %51 = phi i32 [ %45, %43 ], [ 0, %14 ]\n  br label %61\n\n52:                                               ; preds = %61, %43, %11\n  %53 = phi i32 [ 0, %11 ], [ %45, %43 ], [ %69, %61 ]\n  %54 = add nsw i64 %9, -1\n  %55 = getelementptr inbounds i32, i32* %5, i64 %54\n  %56 = load i32, i32* %55, align 4, !tbaa !9\n  %57 = icmp sgt i32 %56, %13\n  %58 = zext i1 %57 to i32\n  %59 = add nuw nsw i32 %53, %58\n  %60 = icmp ult i32 %59, 2\n  br label %72\n\n61:                                               ; preds = %48, %61\n  %62 = phi i32 [ %66, %61 ], [ %49, %48 ]\n  %63 = phi i64 [ %70, %61 ], [ %50, %48 ]\n  %64 = phi i32 [ %69, %61 ], [ %51, %48 ]\n  %65 = getelementptr inbounds i32, i32* %5, i64 %63\n  %66 = load i32, i32* %65, align 4, !tbaa !9\n  %67 = icmp slt i32 %66, %62\n  %68 = zext i1 %67 to i32\n  %69 = add nuw nsw i32 %64, %68\n  %70 = add nuw nsw i64 %63, 1\n  %71 = icmp eq i64 %70, %9\n  br i1 %71, label %52, label %61, !llvm.loop !14\n\n72:                                               ; preds = %52, %1\n  %73 = phi i1 [ true, %1 ], [ %60, %52 ]\n  ret i1 %73\n}\n\n; Function Attrs: nofree nosync nounwind readnone willreturn\ndeclare i32 @llvm.vector.reduce.add.v4i32(<4 x i32>) #1\n\nattributes #0 = { mustprogress nofree norecurse nosync nounwind readonly uwtable willreturn \"frame-pointer\"=\"none\" \"min-legal-vector-width\"=\"0\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #1 = { nofree nosync nounwind readnone willreturn }\n\n!llvm.module.flags = !{!0, !1}\n!llvm.ident = !{!2}\n\n!0 = !{i32 1, !\"wchar_size\", i32 4}\n!1 = !{i32 7, !\"uwtable\", i32 1}\n!2 = !{!\"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)\"}\n!3 = !{!4, !5, i64 8}\n!4 = !{!\"_ZTSNSt12_Vector_baseIiSaIiEE17_Vector_impl_dataE\", !5, i64 0, !5, i64 8, !5, i64 16}\n!5 = !{!\"any pointer\", !6, i64 0}\n!6 = !{!\"omnipotent char\", !7, i64 0}\n!7 = !{!\"Simple C++ TBAA\"}\n!8 = !{!4, !5, i64 0}\n!9 = !{!10, !10, i64 0}\n!10 = !{!\"int\", !6, i64 0}\n!11 = distinct !{!11, !12, !13}\n!12 = !{!\"llvm.loop.mustprogress\"}\n!13 = !{!\"llvm.loop.isvectorized\", i32 1}\n!14 = distinct !{!14, !12, !15, !13}\n!15 = !{!\"llvm.loop.unroll.runtime.disable\"}\n", "target": "This is the targeted source code:\n/*\nWe have a vector \"arr\" of N integers arr[1], arr[2], ..., arr[N].The\nnumbers in the vector will be randomly ordered. Your task is to determine if\nit is possible to get a vector sorted in non-decreasing order by performing \nthe following operation on the given vector:\n    You are allowed to perform right shift operation any number of times.\n\nOne right shift operation means shifting all elements of the vector by one\nposition in the right direction. The last element of the vector will be moved to\nthe starting position in the vector i.e. 0th index. \n\nIf it is possible to obtain the sorted vector by performing the above operation\nthen return true else return false.\nIf the given vector is empty then return true.\n\nNote: The given vector is guaranteed to have unique elements.\n\nFor Example:\n\nmove_one_ball({3, 4, 5, 1, 2})==>true\nExplanation: By performing 2 right shift operations, non-decreasing order can\n             be achieved for the given vector.\nmove_one_ball({3, 5, 4, 1, 2})==>false\nExplanation:It is not possible to get non-decreasing order for the given\n            vector by performing any number of right shift operations.\n            \n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool move_one_ball(vector<int> arr){\n\n    int num=0;\n    if (arr.size()==0) return true;\n    for (int i=1;i<arr.size();i++)\n        if (arr[i]<arr[i-1]) num+=1;\n    if (arr[arr.size()-1]>arr[0]) num+=1;\n    if (num<2) return true;\n    return false;\n}\n"}
{"input": "Convert this to C++:\n; ModuleID = '../../Human_xBenchmarks_164/CPP_110/CPP_110.cpp'\nsource_filename = \"../../Human_xBenchmarks_164/CPP_110/CPP_110.cpp\"\ntarget datalayout = \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\ntarget triple = \"x86_64-unknown-linux-gnu\"\n\n%\"class.std::__cxx11::basic_string\" = type { %\"struct.std::__cxx11::basic_string<char>::_Alloc_hider\", i64, %union.anon }\n%\"struct.std::__cxx11::basic_string<char>::_Alloc_hider\" = type { i8* }\n%union.anon = type { i64, [8 x i8] }\n%\"class.std::vector\" = type { %\"struct.std::_Vector_base\" }\n%\"struct.std::_Vector_base\" = type { %\"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl\" }\n%\"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl\" = type { %\"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl_data\" }\n%\"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl_data\" = type { i32*, i32*, i32* }\n\n@.str = private unnamed_addr constant [4 x i8] c\"YES\\00\", align 1\n\n; Function Attrs: uwtable\ndefine dso_local void @_Z8exchangeB5cxx11St6vectorIiSaIiEES1_(%\"class.std::__cxx11::basic_string\"* noalias sret(%\"class.std::__cxx11::basic_string\") align 8 %0, %\"class.std::vector\"* nocapture readonly %1, %\"class.std::vector\"* nocapture readonly %2) local_unnamed_addr #0 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {\n  %4 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %1, i64 0, i32 0, i32 0, i32 0, i32 1\n  %5 = load i32*, i32** %4, align 8, !tbaa !3\n  %6 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %1, i64 0, i32 0, i32 0, i32 0, i32 0\n  %7 = load i32*, i32** %6, align 8, !tbaa !8\n  %8 = ptrtoint i32* %5 to i64\n  %9 = ptrtoint i32* %7 to i64\n  %10 = sub i64 %8, %9\n  %11 = ashr exact i64 %10, 2\n  %12 = icmp eq i64 %10, 0\n  br i1 %12, label %87, label %13\n\n13:                                               ; preds = %3\n  %14 = call i64 @llvm.umax.i64(i64 %11, i64 1)\n  %15 = icmp ult i64 %14, 8\n  br i1 %15, label %84, label %16\n\n16:                                               ; preds = %13\n  %17 = and i64 %14, -8\n  %18 = add i64 %17, -8\n  %19 = lshr exact i64 %18, 3\n  %20 = add nuw nsw i64 %19, 1\n  %21 = and i64 %20, 1\n  %22 = icmp eq i64 %18, 0\n  br i1 %22, label %58, label %23\n\n23:                                               ; preds = %16\n  %24 = and i64 %20, 4611686018427387902\n  br label %25\n\n25:                                               ; preds = %25, %23\n  %26 = phi i64 [ 0, %23 ], [ %55, %25 ]\n  %27 = phi <4 x i32> [ zeroinitializer, %23 ], [ %53, %25 ]\n  %28 = phi <4 x i32> [ zeroinitializer, %23 ], [ %54, %25 ]\n  %29 = phi i64 [ %24, %23 ], [ %56, %25 ]\n  %30 = getelementptr inbounds i32, i32* %7, i64 %26\n  %31 = bitcast i32* %30 to <4 x i32>*\n  %32 = load <4 x i32>, <4 x i32>* %31, align 4, !tbaa !9\n  %33 = getelementptr inbounds i32, i32* %30, i64 4\n  %34 = bitcast i32* %33 to <4 x i32>*\n  %35 = load <4 x i32>, <4 x i32>* %34, align 4, !tbaa !9\n  %36 = and <4 x i32> %32, <i32 1, i32 1, i32 1, i32 1>\n  %37 = and <4 x i32> %35, <i32 1, i32 1, i32 1, i32 1>\n  %38 = xor <4 x i32> %36, <i32 1, i32 1, i32 1, i32 1>\n  %39 = xor <4 x i32> %37, <i32 1, i32 1, i32 1, i32 1>\n  %40 = add <4 x i32> %38, %27\n  %41 = add <4 x i32> %39, %28\n  %42 = or i64 %26, 8\n  %43 = getelementptr inbounds i32, i32* %7, i64 %42\n  %44 = bitcast i32* %43 to <4 x i32>*\n  %45 = load <4 x i32>, <4 x i32>* %44, align 4, !tbaa !9\n  %46 = getelementptr inbounds i32, i32* %43, i64 4\n  %47 = bitcast i32* %46 to <4 x i32>*\n  %48 = load <4 x i32>, <4 x i32>* %47, align 4, !tbaa !9\n  %49 = and <4 x i32> %45, <i32 1, i32 1, i32 1, i32 1>\n  %50 = and <4 x i32> %48, <i32 1, i32 1, i32 1, i32 1>\n  %51 = xor <4 x i32> %49, <i32 1, i32 1, i32 1, i32 1>\n  %52 = xor <4 x i32> %50, <i32 1, i32 1, i32 1, i32 1>\n  %53 = add <4 x i32> %51, %40\n  %54 = add <4 x i32> %52, %41\n  %55 = add nuw i64 %26, 16\n  %56 = add i64 %29, -2\n  %57 = icmp eq i64 %56, 0\n  br i1 %57, label %58, label %25, !llvm.loop !11\n\n58:                                               ; preds = %25, %16\n  %59 = phi <4 x i32> [ undef, %16 ], [ %53, %25 ]\n  %60 = phi <4 x i32> [ undef, %16 ], [ %54, %25 ]\n  %61 = phi i64 [ 0, %16 ], [ %55, %25 ]\n  %62 = phi <4 x i32> [ zeroinitializer, %16 ], [ %53, %25 ]\n  %63 = phi <4 x i32> [ zeroinitializer, %16 ], [ %54, %25 ]\n  %64 = icmp eq i64 %21, 0\n  br i1 %64, label %78, label %65\n\n65:                                               ; preds = %58\n  %66 = getelementptr inbounds i32, i32* %7, i64 %61\n  %67 = getelementptr inbounds i32, i32* %66, i64 4\n  %68 = bitcast i32* %67 to <4 x i32>*\n  %69 = load <4 x i32>, <4 x i32>* %68, align 4, !tbaa !9\n  %70 = and <4 x i32> %69, <i32 1, i32 1, i32 1, i32 1>\n  %71 = xor <4 x i32> %70, <i32 1, i32 1, i32 1, i32 1>\n  %72 = add <4 x i32> %71, %63\n  %73 = bitcast i32* %66 to <4 x i32>*\n  %74 = load <4 x i32>, <4 x i32>* %73, align 4, !tbaa !9\n  %75 = and <4 x i32> %74, <i32 1, i32 1, i32 1, i32 1>\n  %76 = xor <4 x i32> %75, <i32 1, i32 1, i32 1, i32 1>\n  %77 = add <4 x i32> %76, %62\n  br label %78\n\n78:                                               ; preds = %58, %65\n  %79 = phi <4 x i32> [ %59, %58 ], [ %77, %65 ]\n  %80 = phi <4 x i32> [ %60, %58 ], [ %72, %65 ]\n  %81 = add <4 x i32> %80, %79\n  %82 = call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %81)\n  %83 = icmp eq i64 %14, %17\n  br i1 %83, label %87, label %84\n\n84:                                               ; preds = %13, %78\n  %85 = phi i64 [ 0, %13 ], [ %17, %78 ]\n  %86 = phi i32 [ 0, %13 ], [ %82, %78 ]\n  br label %173\n\n87:                                               ; preds = %173, %78, %3\n  %88 = phi i32 [ 0, %3 ], [ %82, %78 ], [ %180, %173 ]\n  %89 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %2, i64 0, i32 0, i32 0, i32 0, i32 1\n  %90 = load i32*, i32** %89, align 8, !tbaa !3\n  %91 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %2, i64 0, i32 0, i32 0, i32 0, i32 0\n  %92 = load i32*, i32** %91, align 8, !tbaa !8\n  %93 = ptrtoint i32* %90 to i64\n  %94 = ptrtoint i32* %92 to i64\n  %95 = sub i64 %93, %94\n  %96 = icmp eq i64 %95, 0\n  br i1 %96, label %183, label %97\n\n97:                                               ; preds = %87\n  %98 = ashr exact i64 %95, 2\n  %99 = call i64 @llvm.umax.i64(i64 %98, i64 1)\n  %100 = icmp ult i64 %99, 8\n  br i1 %100, label %170, label %101\n\n101:                                              ; preds = %97\n  %102 = and i64 %99, -8\n  %103 = insertelement <4 x i32> <i32 poison, i32 0, i32 0, i32 0>, i32 %88, i32 0\n  %104 = add i64 %102, -8\n  %105 = lshr exact i64 %104, 3\n  %106 = add nuw nsw i64 %105, 1\n  %107 = and i64 %106, 1\n  %108 = icmp eq i64 %104, 0\n  br i1 %108, label %144, label %109\n\n109:                                              ; preds = %101\n  %110 = and i64 %106, 4611686018427387902\n  br label %111\n\n111:                                              ; preds = %111, %109\n  %112 = phi i64 [ 0, %109 ], [ %141, %111 ]\n  %113 = phi <4 x i32> [ %103, %109 ], [ %139, %111 ]\n  %114 = phi <4 x i32> [ zeroinitializer, %109 ], [ %140, %111 ]\n  %115 = phi i64 [ %110, %109 ], [ %142, %111 ]\n  %116 = getelementptr inbounds i32, i32* %92, i64 %112\n  %117 = bitcast i32* %116 to <4 x i32>*\n  %118 = load <4 x i32>, <4 x i32>* %117, align 4, !tbaa !9\n  %119 = getelementptr inbounds i32, i32* %116, i64 4\n  %120 = bitcast i32* %119 to <4 x i32>*\n  %121 = load <4 x i32>, <4 x i32>* %120, align 4, !tbaa !9\n  %122 = and <4 x i32> %118, <i32 1, i32 1, i32 1, i32 1>\n  %123 = and <4 x i32> %121, <i32 1, i32 1, i32 1, i32 1>\n  %124 = xor <4 x i32> %122, <i32 1, i32 1, i32 1, i32 1>\n  %125 = xor <4 x i32> %123, <i32 1, i32 1, i32 1, i32 1>\n  %126 = add <4 x i32> %124, %113\n  %127 = add <4 x i32> %125, %114\n  %128 = or i64 %112, 8\n  %129 = getelementptr inbounds i32, i32* %92, i64 %128\n  %130 = bitcast i32* %129 to <4 x i32>*\n  %131 = load <4 x i32>, <4 x i32>* %130, align 4, !tbaa !9\n  %132 = getelementptr inbounds i32, i32* %129, i64 4\n  %133 = bitcast i32* %132 to <4 x i32>*\n  %134 = load <4 x i32>, <4 x i32>* %133, align 4, !tbaa !9\n  %135 = and <4 x i32> %131, <i32 1, i32 1, i32 1, i32 1>\n  %136 = and <4 x i32> %134, <i32 1, i32 1, i32 1, i32 1>\n  %137 = xor <4 x i32> %135, <i32 1, i32 1, i32 1, i32 1>\n  %138 = xor <4 x i32> %136, <i32 1, i32 1, i32 1, i32 1>\n  %139 = add <4 x i32> %137, %126\n  %140 = add <4 x i32> %138, %127\n  %141 = add nuw i64 %112, 16\n  %142 = add i64 %115, -2\n  %143 = icmp eq i64 %142, 0\n  br i1 %143, label %144, label %111, !llvm.loop !14\n\n144:                                              ; preds = %111, %101\n  %145 = phi <4 x i32> [ undef, %101 ], [ %139, %111 ]\n  %146 = phi <4 x i32> [ undef, %101 ], [ %140, %111 ]\n  %147 = phi i64 [ 0, %101 ], [ %141, %111 ]\n  %148 = phi <4 x i32> [ %103, %101 ], [ %139, %111 ]\n  %149 = phi <4 x i32> [ zeroinitializer, %101 ], [ %140, %111 ]\n  %150 = icmp eq i64 %107, 0\n  br i1 %150, label %164, label %151\n\n151:                                              ; preds = %144\n  %152 = getelementptr inbounds i32, i32* %92, i64 %147\n  %153 = getelementptr inbounds i32, i32* %152, i64 4\n  %154 = bitcast i32* %153 to <4 x i32>*\n  %155 = load <4 x i32>, <4 x i32>* %154, align 4, !tbaa !9\n  %156 = and <4 x i32> %155, <i32 1, i32 1, i32 1, i32 1>\n  %157 = xor <4 x i32> %156, <i32 1, i32 1, i32 1, i32 1>\n  %158 = add <4 x i32> %157, %149\n  %159 = bitcast i32* %152 to <4 x i32>*\n  %160 = load <4 x i32>, <4 x i32>* %159, align 4, !tbaa !9\n  %161 = and <4 x i32> %160, <i32 1, i32 1, i32 1, i32 1>\n  %162 = xor <4 x i32> %161, <i32 1, i32 1, i32 1, i32 1>\n  %163 = add <4 x i32> %162, %148\n  br label %164\n\n164:                                              ; preds = %144, %151\n  %165 = phi <4 x i32> [ %145, %144 ], [ %163, %151 ]\n  %166 = phi <4 x i32> [ %146, %144 ], [ %158, %151 ]\n  %167 = add <4 x i32> %166, %165\n  %168 = call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %167)\n  %169 = icmp eq i64 %99, %102\n  br i1 %169, label %183, label %170\n\n170:                                              ; preds = %97, %164\n  %171 = phi i64 [ 0, %97 ], [ %102, %164 ]\n  %172 = phi i32 [ %88, %97 ], [ %168, %164 ]\n  br label %189\n\n173:                                              ; preds = %84, %173\n  %174 = phi i64 [ %181, %173 ], [ %85, %84 ]\n  %175 = phi i32 [ %180, %173 ], [ %86, %84 ]\n  %176 = getelementptr inbounds i32, i32* %7, i64 %174\n  %177 = load i32, i32* %176, align 4, !tbaa !9\n  %178 = and i32 %177, 1\n  %179 = xor i32 %178, 1\n  %180 = add nuw nsw i32 %179, %175\n  %181 = add nuw nsw i64 %174, 1\n  %182 = icmp eq i64 %181, %14\n  br i1 %182, label %87, label %173, !llvm.loop !15\n\n183:                                              ; preds = %189, %164, %87\n  %184 = phi i32 [ %88, %87 ], [ %168, %164 ], [ %196, %189 ]\n  %185 = zext i32 %184 to i64\n  %186 = icmp ugt i64 %11, %185\n  %187 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 2\n  %188 = bitcast %\"class.std::__cxx11::basic_string\"* %0 to %union.anon**\n  store %union.anon* %187, %union.anon** %188, align 8, !tbaa !17\n  br i1 %186, label %202, label %199\n\n189:                                              ; preds = %170, %189\n  %190 = phi i64 [ %197, %189 ], [ %171, %170 ]\n  %191 = phi i32 [ %196, %189 ], [ %172, %170 ]\n  %192 = getelementptr inbounds i32, i32* %92, i64 %190\n  %193 = load i32, i32* %192, align 4, !tbaa !9\n  %194 = and i32 %193, 1\n  %195 = xor i32 %194, 1\n  %196 = add nuw nsw i32 %195, %191\n  %197 = add nuw nsw i64 %190, 1\n  %198 = icmp eq i64 %197, %99\n  br i1 %198, label %183, label %189, !llvm.loop !19\n\n199:                                              ; preds = %183\n  %200 = bitcast %union.anon* %187 to i8*\n  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(3) %200, i8* noundef nonnull align 1 dereferenceable(3) getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i64 3, i1 false) #4\n  %201 = getelementptr inbounds i8, i8* %200, i64 3\n  store i8 0, i8* %201, align 1, !tbaa !20\n  br label %206\n\n202:                                              ; preds = %183\n  %203 = bitcast %union.anon* %187 to i16*\n  store i16 20302, i16* %203, align 8\n  %204 = bitcast %union.anon* %187 to i8*\n  %205 = getelementptr inbounds i8, i8* %204, i64 2\n  store i8 0, i8* %205, align 2, !tbaa !20\n  br label %206\n\n206:                                              ; preds = %202, %199\n  %207 = phi i64 [ 2, %202 ], [ 3, %199 ]\n  %208 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 1\n  store i64 %207, i64* %208, align 8\n  ret void\n}\n\ndeclare dso_local i32 @__gxx_personality_v0(...)\n\n; Function Attrs: argmemonly mustprogress nofree nounwind willreturn\ndeclare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #1\n\n; Function Attrs: nofree nosync nounwind readnone speculatable willreturn\ndeclare i64 @llvm.umax.i64(i64, i64) #2\n\n; Function Attrs: nofree nosync nounwind readnone willreturn\ndeclare i32 @llvm.vector.reduce.add.v4i32(<4 x i32>) #3\n\nattributes #0 = { uwtable \"frame-pointer\"=\"none\" \"min-legal-vector-width\"=\"0\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #1 = { argmemonly mustprogress nofree nounwind willreturn }\nattributes #2 = { nofree nosync nounwind readnone speculatable willreturn }\nattributes #3 = { nofree nosync nounwind readnone willreturn }\nattributes #4 = { nounwind }\n\n!llvm.module.flags = !{!0, !1}\n!llvm.ident = !{!2}\n\n!0 = !{i32 1, !\"wchar_size\", i32 4}\n!1 = !{i32 7, !\"uwtable\", i32 1}\n!2 = !{!\"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)\"}\n!3 = !{!4, !5, i64 8}\n!4 = !{!\"_ZTSNSt12_Vector_baseIiSaIiEE17_Vector_impl_dataE\", !5, i64 0, !5, i64 8, !5, i64 16}\n!5 = !{!\"any pointer\", !6, i64 0}\n!6 = !{!\"omnipotent char\", !7, i64 0}\n!7 = !{!\"Simple C++ TBAA\"}\n!8 = !{!4, !5, i64 0}\n!9 = !{!10, !10, i64 0}\n!10 = !{!\"int\", !6, i64 0}\n!11 = distinct !{!11, !12, !13}\n!12 = !{!\"llvm.loop.mustprogress\"}\n!13 = !{!\"llvm.loop.isvectorized\", i32 1}\n!14 = distinct !{!14, !12, !13}\n!15 = distinct !{!15, !12, !16, !13}\n!16 = !{!\"llvm.loop.unroll.runtime.disable\"}\n!17 = !{!18, !5, i64 0}\n!18 = !{!\"_ZTSNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderE\", !5, i64 0}\n!19 = distinct !{!19, !12, !16, !13}\n!20 = !{!6, !6, i64 0}\n", "target": "This is the targeted source code:\n/*\nIn this problem, you will implement a function that takes two vectors of numbers,\nand determines whether it is possible to perform an exchange of elements\nbetween them to make lst1 a vector of only even numbers.\nThere is no limit on the number of exchanged elements between lst1 and lst2.\nIf it is possible to exchange elements between the lst1 and lst2 to make\nall the elements of lst1 to be even, return \"YES\".\nOtherwise, return \"NO\".\nFor example:\nexchange({1, 2, 3, 4}, {1, 2, 3, 4}) => \"YES\"\nexchange({1, 2, 3, 4}, {1, 5, 3, 4}) => \"NO\"\nIt is assumed that the input vectors will be non-empty.\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring exchange(vector<int> lst1,vector<int> lst2){\n\n    int num=0;\n    for (int i=0;i<lst1.size();i++)\n    if (lst1[i]%2==0) num+=1;\n    for (int i=0;i<lst2.size();i++)\n    if (lst2[i]%2==0) num+=1;\n    if (num>=lst1.size()) return \"YES\";\n    return \"NO\";\n}\n"}
{"input": "Convert this to C++:\n; ModuleID = '../../Human_xBenchmarks_164/CPP_111/CPP_111.cpp'\nsource_filename = \"../../Human_xBenchmarks_164/CPP_111/CPP_111.cpp\"\ntarget datalayout = \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\ntarget triple = \"x86_64-unknown-linux-gnu\"\n\n%\"struct.std::piecewise_construct_t\" = type { i8 }\n%\"class.std::map\" = type { %\"class.std::_Rb_tree\" }\n%\"class.std::_Rb_tree\" = type { %\"struct.std::_Rb_tree<char, std::pair<const char, int>, std::_Select1st<std::pair<const char, int>>, std::less<char>>::_Rb_tree_impl\" }\n%\"struct.std::_Rb_tree<char, std::pair<const char, int>, std::_Select1st<std::pair<const char, int>>, std::less<char>>::_Rb_tree_impl\" = type { %\"struct.std::_Rb_tree_key_compare\", %\"struct.std::_Rb_tree_header\" }\n%\"struct.std::_Rb_tree_key_compare\" = type { %\"struct.std::less\" }\n%\"struct.std::less\" = type { i8 }\n%\"struct.std::_Rb_tree_header\" = type { %\"struct.std::_Rb_tree_node_base\", i64 }\n%\"struct.std::_Rb_tree_node_base\" = type { i32, %\"struct.std::_Rb_tree_node_base\"*, %\"struct.std::_Rb_tree_node_base\"*, %\"struct.std::_Rb_tree_node_base\"* }\n%\"class.std::__cxx11::basic_string\" = type { %\"struct.std::__cxx11::basic_string<char>::_Alloc_hider\", i64, %union.anon }\n%\"struct.std::__cxx11::basic_string<char>::_Alloc_hider\" = type { i8* }\n%union.anon = type { i64, [8 x i8] }\n%\"class.std::tuple\" = type { %\"struct.std::_Tuple_impl\" }\n%\"struct.std::_Tuple_impl\" = type { %\"struct.std::_Head_base\" }\n%\"struct.std::_Head_base\" = type { i8* }\n%\"class.std::tuple.3\" = type { i8 }\n%\"struct.std::_Rb_tree_node\" = type { %\"struct.std::_Rb_tree_node_base\", %\"struct.__gnu_cxx::__aligned_membuf\" }\n%\"struct.__gnu_cxx::__aligned_membuf\" = type { [8 x i8] }\n%\"struct.std::pair\" = type { i8, i32 }\n\n$_ZNSt3mapIciSt4lessIcESaISt4pairIKciEEED2Ev = comdat any\n\n$__clang_call_terminate = comdat any\n\n$_ZNSt8_Rb_treeIcSt4pairIKciESt10_Select1stIS2_ESt4lessIcESaIS2_EE8_M_eraseEPSt13_Rb_tree_nodeIS2_E = comdat any\n\n$_ZNSt8_Rb_treeIcSt4pairIKciESt10_Select1stIS2_ESt4lessIcESaIS2_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESD_IJEEEEESt17_Rb_tree_iteratorIS2_ESt23_Rb_tree_const_iteratorIS2_EDpOT_ = comdat any\n\n$_ZNSt8_Rb_treeIcSt4pairIKciESt10_Select1stIS2_ESt4lessIcESaIS2_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS2_ERS1_ = comdat any\n\n@_ZStL19piecewise_construct = internal constant %\"struct.std::piecewise_construct_t\" undef, align 1\n\n; Function Attrs: uwtable\ndefine dso_local void @_Z9histogramNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE(%\"class.std::map\"* noalias sret(%\"class.std::map\") align 8 %0, %\"class.std::__cxx11::basic_string\"* nocapture readonly %1) local_unnamed_addr #0 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {\n  %3 = alloca %\"class.std::tuple\", align 8\n  %4 = alloca %\"class.std::tuple.3\", align 1\n  %5 = alloca %\"class.std::tuple\", align 8\n  %6 = alloca %\"class.std::tuple.3\", align 1\n  %7 = alloca %\"class.std::tuple\", align 8\n  %8 = alloca %\"class.std::tuple.3\", align 1\n  %9 = alloca %\"class.std::tuple\", align 8\n  %10 = alloca %\"class.std::tuple.3\", align 1\n  %11 = alloca %\"class.std::map\", align 8\n  %12 = alloca i8, align 1\n  %13 = getelementptr inbounds %\"class.std::map\", %\"class.std::map\"* %11, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0\n  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %13) #10\n  %14 = getelementptr inbounds i8, i8* %13, i64 8\n  %15 = getelementptr inbounds i8, i8* %13, i64 16\n  %16 = getelementptr inbounds i8, i8* %13, i64 24\n  %17 = bitcast i8* %16 to i8**\n  %18 = getelementptr inbounds %\"class.std::map\", %\"class.std::map\"* %11, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0\n  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(24) %18, i8 0, i64 24, i1 false)\n  store i8* %14, i8** %17, align 8, !tbaa !3\n  %19 = getelementptr inbounds i8, i8* %13, i64 32\n  %20 = bitcast i8* %19 to i8**\n  store i8* %14, i8** %20, align 8, !tbaa !11\n  %21 = getelementptr inbounds i8, i8* %13, i64 40\n  %22 = bitcast i8* %21 to i64*\n  store i64 0, i64* %22, align 8, !tbaa !12\n  %23 = getelementptr inbounds %\"class.std::map\", %\"class.std::map\"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0\n  %24 = getelementptr inbounds i8, i8* %23, i64 8\n  %25 = getelementptr inbounds i8, i8* %23, i64 16\n  %26 = getelementptr inbounds i8, i8* %23, i64 24\n  %27 = bitcast i8* %26 to i8**\n  %28 = getelementptr inbounds %\"class.std::map\", %\"class.std::map\"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0\n  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(24) %28, i8 0, i64 24, i1 false)\n  store i8* %24, i8** %27, align 8, !tbaa !3\n  %29 = getelementptr inbounds i8, i8* %23, i64 32\n  %30 = bitcast i8* %29 to i8**\n  store i8* %24, i8** %30, align 8, !tbaa !11\n  %31 = getelementptr inbounds i8, i8* %23, i64 40\n  %32 = bitcast i8* %31 to i64*\n  store i64 0, i64* %32, align 8, !tbaa !12\n  %33 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %1, i64 0, i32 1\n  %34 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %1, i64 0, i32 0, i32 0\n  %35 = bitcast i8* %15 to %\"struct.std::_Rb_tree_node\"**\n  %36 = bitcast i8* %14 to %\"struct.std::_Rb_tree_node_base\"*\n  %37 = getelementptr inbounds %\"class.std::map\", %\"class.std::map\"* %11, i64 0, i32 0\n  %38 = bitcast %\"class.std::tuple\"* %9 to i8*\n  %39 = getelementptr inbounds %\"class.std::tuple\", %\"class.std::tuple\"* %9, i64 0, i32 0, i32 0, i32 0\n  %40 = getelementptr inbounds %\"class.std::tuple.3\", %\"class.std::tuple.3\"* %10, i64 0, i32 0\n  %41 = bitcast %\"class.std::tuple\"* %7 to i8*\n  %42 = getelementptr inbounds %\"class.std::tuple\", %\"class.std::tuple\"* %7, i64 0, i32 0, i32 0, i32 0\n  %43 = getelementptr inbounds %\"class.std::tuple.3\", %\"class.std::tuple.3\"* %8, i64 0, i32 0\n  %44 = bitcast %\"class.std::tuple\"* %5 to i8*\n  %45 = getelementptr inbounds %\"class.std::tuple\", %\"class.std::tuple\"* %5, i64 0, i32 0, i32 0, i32 0\n  %46 = getelementptr inbounds %\"class.std::tuple.3\", %\"class.std::tuple.3\"* %6, i64 0, i32 0\n  %47 = load i64, i64* %33, align 8, !tbaa !13\n  %48 = icmp eq i64 %47, 0\n  br i1 %48, label %234, label %59\n\n49:                                               ; preds = %182\n  %50 = bitcast i8* %16 to %\"struct.std::_Rb_tree_node_base\"**\n  %51 = load %\"struct.std::_Rb_tree_node_base\"*, %\"struct.std::_Rb_tree_node_base\"** %50, align 8, !tbaa !3\n  %52 = bitcast i8* %25 to %\"struct.std::_Rb_tree_node\"**\n  %53 = bitcast i8* %24 to %\"struct.std::_Rb_tree_node_base\"*\n  %54 = getelementptr inbounds %\"class.std::map\", %\"class.std::map\"* %0, i64 0, i32 0\n  %55 = bitcast %\"class.std::tuple\"* %3 to i8*\n  %56 = getelementptr inbounds %\"class.std::tuple\", %\"class.std::tuple\"* %3, i64 0, i32 0, i32 0, i32 0\n  %57 = getelementptr inbounds %\"class.std::tuple.3\", %\"class.std::tuple.3\"* %4, i64 0, i32 0\n  %58 = icmp eq %\"struct.std::_Rb_tree_node_base\"* %51, %36\n  br i1 %58, label %234, label %187\n\n59:                                               ; preds = %2, %182\n  %60 = phi i64 [ %184, %182 ], [ 0, %2 ]\n  %61 = phi i32 [ %183, %182 ], [ 0, %2 ]\n  %62 = load i8*, i8** %34, align 8, !tbaa !16\n  %63 = getelementptr inbounds i8, i8* %62, i64 %60\n  %64 = load i8, i8* %63, align 1, !tbaa !17\n  %65 = icmp eq i8 %64, 32\n  br i1 %65, label %182, label %66\n\n66:                                               ; preds = %59\n  %67 = load %\"struct.std::_Rb_tree_node\"*, %\"struct.std::_Rb_tree_node\"** %35, align 8, !tbaa !18\n  %68 = icmp eq %\"struct.std::_Rb_tree_node\"* %67, null\n  br i1 %68, label %91, label %69\n\n69:                                               ; preds = %66, %69\n  %70 = phi %\"struct.std::_Rb_tree_node\"* [ %81, %69 ], [ %67, %66 ]\n  %71 = phi %\"struct.std::_Rb_tree_node_base\"* [ %78, %69 ], [ %36, %66 ]\n  %72 = getelementptr inbounds %\"struct.std::_Rb_tree_node\", %\"struct.std::_Rb_tree_node\"* %70, i64 0, i32 1, i32 0, i64 0\n  %73 = load i8, i8* %72, align 1, !tbaa !17\n  %74 = icmp slt i8 %73, %64\n  %75 = getelementptr inbounds %\"struct.std::_Rb_tree_node\", %\"struct.std::_Rb_tree_node\"* %70, i64 0, i32 0, i32 3\n  %76 = getelementptr %\"struct.std::_Rb_tree_node\", %\"struct.std::_Rb_tree_node\"* %70, i64 0, i32 0\n  %77 = getelementptr inbounds %\"struct.std::_Rb_tree_node\", %\"struct.std::_Rb_tree_node\"* %70, i64 0, i32 0, i32 2\n  %78 = select i1 %74, %\"struct.std::_Rb_tree_node_base\"* %71, %\"struct.std::_Rb_tree_node_base\"* %76\n  %79 = select i1 %74, %\"struct.std::_Rb_tree_node_base\"** %75, %\"struct.std::_Rb_tree_node_base\"** %77\n  %80 = bitcast %\"struct.std::_Rb_tree_node_base\"** %79 to %\"struct.std::_Rb_tree_node\"**\n  %81 = load %\"struct.std::_Rb_tree_node\"*, %\"struct.std::_Rb_tree_node\"** %80, align 8, !tbaa !19\n  %82 = icmp eq %\"struct.std::_Rb_tree_node\"* %81, null\n  br i1 %82, label %83, label %69, !llvm.loop !20\n\n83:                                               ; preds = %69\n  %84 = icmp eq %\"struct.std::_Rb_tree_node_base\"* %78, %36\n  br i1 %84, label %91, label %85\n\n85:                                               ; preds = %83\n  %86 = select i1 %74, %\"struct.std::_Rb_tree_node_base\"* %71, %\"struct.std::_Rb_tree_node_base\"* %76\n  %87 = getelementptr inbounds %\"struct.std::_Rb_tree_node_base\", %\"struct.std::_Rb_tree_node_base\"* %86, i64 1\n  %88 = bitcast %\"struct.std::_Rb_tree_node_base\"* %87 to i8*\n  %89 = load i8, i8* %88, align 1, !tbaa !17\n  %90 = icmp slt i8 %64, %89\n  br i1 %90, label %91, label %97\n\n91:                                               ; preds = %85, %83, %66\n  %92 = phi %\"struct.std::_Rb_tree_node_base\"* [ %78, %85 ], [ %36, %83 ], [ %36, %66 ]\n  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %38) #10\n  store i8* %63, i8** %39, align 8, !tbaa !19\n  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %40) #10\n  %93 = invoke %\"struct.std::_Rb_tree_node_base\"* @_ZNSt8_Rb_treeIcSt4pairIKciESt10_Select1stIS2_ESt4lessIcESaIS2_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESD_IJEEEEESt17_Rb_tree_iteratorIS2_ESt23_Rb_tree_const_iteratorIS2_EDpOT_(%\"class.std::_Rb_tree\"* nonnull align 8 dereferenceable(48) %37, %\"struct.std::_Rb_tree_node_base\"* %92, %\"struct.std::piecewise_construct_t\"* nonnull align 1 dereferenceable(1) @_ZStL19piecewise_construct, %\"class.std::tuple\"* nonnull align 8 dereferenceable(8) %9, %\"class.std::tuple.3\"* nonnull align 1 dereferenceable(1) %10)\n          to label %94 unwind label %180\n\n94:                                               ; preds = %91\n  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %40) #10\n  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %38) #10\n  %95 = load i8*, i8** %34, align 8, !tbaa !16\n  %96 = load %\"struct.std::_Rb_tree_node\"*, %\"struct.std::_Rb_tree_node\"** %35, align 8, !tbaa !18\n  br label %97\n\n97:                                               ; preds = %85, %94\n  %98 = phi %\"struct.std::_Rb_tree_node\"* [ %96, %94 ], [ %67, %85 ]\n  %99 = phi i8* [ %95, %94 ], [ %62, %85 ]\n  %100 = phi %\"struct.std::_Rb_tree_node_base\"* [ %93, %94 ], [ %78, %85 ]\n  %101 = getelementptr inbounds %\"struct.std::_Rb_tree_node_base\", %\"struct.std::_Rb_tree_node_base\"* %100, i64 1\n  %102 = bitcast %\"struct.std::_Rb_tree_node_base\"* %101 to %\"struct.std::pair\"*\n  %103 = getelementptr inbounds %\"struct.std::pair\", %\"struct.std::pair\"* %102, i64 0, i32 1\n  %104 = load i32, i32* %103, align 4, !tbaa !22\n  %105 = add nsw i32 %104, 1\n  store i32 %105, i32* %103, align 4, !tbaa !22\n  %106 = getelementptr inbounds i8, i8* %99, i64 %60\n  %107 = load i8, i8* %106, align 1\n  %108 = icmp eq %\"struct.std::_Rb_tree_node\"* %98, null\n  br i1 %108, label %131, label %109\n\n109:                                              ; preds = %97, %109\n  %110 = phi %\"struct.std::_Rb_tree_node\"* [ %121, %109 ], [ %98, %97 ]\n  %111 = phi %\"struct.std::_Rb_tree_node_base\"* [ %118, %109 ], [ %36, %97 ]\n  %112 = getelementptr inbounds %\"struct.std::_Rb_tree_node\", %\"struct.std::_Rb_tree_node\"* %110, i64 0, i32 1, i32 0, i64 0\n  %113 = load i8, i8* %112, align 1, !tbaa !17\n  %114 = icmp slt i8 %113, %107\n  %115 = getelementptr inbounds %\"struct.std::_Rb_tree_node\", %\"struct.std::_Rb_tree_node\"* %110, i64 0, i32 0, i32 3\n  %116 = getelementptr %\"struct.std::_Rb_tree_node\", %\"struct.std::_Rb_tree_node\"* %110, i64 0, i32 0\n  %117 = getelementptr inbounds %\"struct.std::_Rb_tree_node\", %\"struct.std::_Rb_tree_node\"* %110, i64 0, i32 0, i32 2\n  %118 = select i1 %114, %\"struct.std::_Rb_tree_node_base\"* %111, %\"struct.std::_Rb_tree_node_base\"* %116\n  %119 = select i1 %114, %\"struct.std::_Rb_tree_node_base\"** %115, %\"struct.std::_Rb_tree_node_base\"** %117\n  %120 = bitcast %\"struct.std::_Rb_tree_node_base\"** %119 to %\"struct.std::_Rb_tree_node\"**\n  %121 = load %\"struct.std::_Rb_tree_node\"*, %\"struct.std::_Rb_tree_node\"** %120, align 8, !tbaa !19\n  %122 = icmp eq %\"struct.std::_Rb_tree_node\"* %121, null\n  br i1 %122, label %123, label %109, !llvm.loop !20\n\n123:                                              ; preds = %109\n  %124 = icmp eq %\"struct.std::_Rb_tree_node_base\"* %118, %36\n  br i1 %124, label %131, label %125\n\n125:                                              ; preds = %123\n  %126 = select i1 %114, %\"struct.std::_Rb_tree_node_base\"* %111, %\"struct.std::_Rb_tree_node_base\"* %116\n  %127 = getelementptr inbounds %\"struct.std::_Rb_tree_node_base\", %\"struct.std::_Rb_tree_node_base\"* %126, i64 1\n  %128 = bitcast %\"struct.std::_Rb_tree_node_base\"* %127 to i8*\n  %129 = load i8, i8* %128, align 1, !tbaa !17\n  %130 = icmp slt i8 %107, %129\n  br i1 %130, label %131, label %135\n\n131:                                              ; preds = %125, %123, %97\n  %132 = phi %\"struct.std::_Rb_tree_node_base\"* [ %118, %125 ], [ %36, %123 ], [ %36, %97 ]\n  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %41) #10\n  store i8* %106, i8** %42, align 8, !tbaa !19\n  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %43) #10\n  %133 = invoke %\"struct.std::_Rb_tree_node_base\"* @_ZNSt8_Rb_treeIcSt4pairIKciESt10_Select1stIS2_ESt4lessIcESaIS2_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESD_IJEEEEESt17_Rb_tree_iteratorIS2_ESt23_Rb_tree_const_iteratorIS2_EDpOT_(%\"class.std::_Rb_tree\"* nonnull align 8 dereferenceable(48) %37, %\"struct.std::_Rb_tree_node_base\"* %132, %\"struct.std::piecewise_construct_t\"* nonnull align 1 dereferenceable(1) @_ZStL19piecewise_construct, %\"class.std::tuple\"* nonnull align 8 dereferenceable(8) %7, %\"class.std::tuple.3\"* nonnull align 1 dereferenceable(1) %8)\n          to label %134 unwind label %180\n\n134:                                              ; preds = %131\n  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %43) #10\n  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %41) #10\n  br label %135\n\n135:                                              ; preds = %134, %125\n  %136 = phi %\"struct.std::_Rb_tree_node_base\"* [ %133, %134 ], [ %118, %125 ]\n  %137 = getelementptr inbounds %\"struct.std::_Rb_tree_node_base\", %\"struct.std::_Rb_tree_node_base\"* %136, i64 1\n  %138 = bitcast %\"struct.std::_Rb_tree_node_base\"* %137 to %\"struct.std::pair\"*\n  %139 = getelementptr inbounds %\"struct.std::pair\", %\"struct.std::pair\"* %138, i64 0, i32 1\n  %140 = load i32, i32* %139, align 4, !tbaa !22\n  %141 = icmp sgt i32 %140, %61\n  br i1 %141, label %142, label %182\n\n142:                                              ; preds = %135\n  %143 = load i8*, i8** %34, align 8, !tbaa !16\n  %144 = getelementptr inbounds i8, i8* %143, i64 %60\n  %145 = load %\"struct.std::_Rb_tree_node\"*, %\"struct.std::_Rb_tree_node\"** %35, align 8, !tbaa !18\n  %146 = load i8, i8* %144, align 1\n  %147 = icmp eq %\"struct.std::_Rb_tree_node\"* %145, null\n  br i1 %147, label %170, label %148\n\n148:                                              ; preds = %142, %148\n  %149 = phi %\"struct.std::_Rb_tree_node\"* [ %160, %148 ], [ %145, %142 ]\n  %150 = phi %\"struct.std::_Rb_tree_node_base\"* [ %157, %148 ], [ %36, %142 ]\n  %151 = getelementptr inbounds %\"struct.std::_Rb_tree_node\", %\"struct.std::_Rb_tree_node\"* %149, i64 0, i32 1, i32 0, i64 0\n  %152 = load i8, i8* %151, align 1, !tbaa !17\n  %153 = icmp slt i8 %152, %146\n  %154 = getelementptr inbounds %\"struct.std::_Rb_tree_node\", %\"struct.std::_Rb_tree_node\"* %149, i64 0, i32 0, i32 3\n  %155 = getelementptr %\"struct.std::_Rb_tree_node\", %\"struct.std::_Rb_tree_node\"* %149, i64 0, i32 0\n  %156 = getelementptr inbounds %\"struct.std::_Rb_tree_node\", %\"struct.std::_Rb_tree_node\"* %149, i64 0, i32 0, i32 2\n  %157 = select i1 %153, %\"struct.std::_Rb_tree_node_base\"* %150, %\"struct.std::_Rb_tree_node_base\"* %155\n  %158 = select i1 %153, %\"struct.std::_Rb_tree_node_base\"** %154, %\"struct.std::_Rb_tree_node_base\"** %156\n  %159 = bitcast %\"struct.std::_Rb_tree_node_base\"** %158 to %\"struct.std::_Rb_tree_node\"**\n  %160 = load %\"struct.std::_Rb_tree_node\"*, %\"struct.std::_Rb_tree_node\"** %159, align 8, !tbaa !19\n  %161 = icmp eq %\"struct.std::_Rb_tree_node\"* %160, null\n  br i1 %161, label %162, label %148, !llvm.loop !20\n\n162:                                              ; preds = %148\n  %163 = icmp eq %\"struct.std::_Rb_tree_node_base\"* %157, %36\n  br i1 %163, label %170, label %164\n\n164:                                              ; preds = %162\n  %165 = select i1 %153, %\"struct.std::_Rb_tree_node_base\"* %150, %\"struct.std::_Rb_tree_node_base\"* %155\n  %166 = getelementptr inbounds %\"struct.std::_Rb_tree_node_base\", %\"struct.std::_Rb_tree_node_base\"* %165, i64 1\n  %167 = bitcast %\"struct.std::_Rb_tree_node_base\"* %166 to i8*\n  %168 = load i8, i8* %167, align 1, !tbaa !17\n  %169 = icmp slt i8 %146, %168\n  br i1 %169, label %170, label %174\n\n170:                                              ; preds = %164, %162, %142\n  %171 = phi %\"struct.std::_Rb_tree_node_base\"* [ %157, %164 ], [ %36, %162 ], [ %36, %142 ]\n  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %44) #10\n  store i8* %144, i8** %45, align 8, !tbaa !19\n  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %46) #10\n  %172 = invoke %\"struct.std::_Rb_tree_node_base\"* @_ZNSt8_Rb_treeIcSt4pairIKciESt10_Select1stIS2_ESt4lessIcESaIS2_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESD_IJEEEEESt17_Rb_tree_iteratorIS2_ESt23_Rb_tree_const_iteratorIS2_EDpOT_(%\"class.std::_Rb_tree\"* nonnull align 8 dereferenceable(48) %37, %\"struct.std::_Rb_tree_node_base\"* %171, %\"struct.std::piecewise_construct_t\"* nonnull align 1 dereferenceable(1) @_ZStL19piecewise_construct, %\"class.std::tuple\"* nonnull align 8 dereferenceable(8) %5, %\"class.std::tuple.3\"* nonnull align 1 dereferenceable(1) %6)\n          to label %173 unwind label %180\n\n173:                                              ; preds = %170\n  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %46) #10\n  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %44) #10\n  br label %174\n\n174:                                              ; preds = %173, %164\n  %175 = phi %\"struct.std::_Rb_tree_node_base\"* [ %172, %173 ], [ %157, %164 ]\n  %176 = getelementptr inbounds %\"struct.std::_Rb_tree_node_base\", %\"struct.std::_Rb_tree_node_base\"* %175, i64 1\n  %177 = bitcast %\"struct.std::_Rb_tree_node_base\"* %176 to %\"struct.std::pair\"*\n  %178 = getelementptr inbounds %\"struct.std::pair\", %\"struct.std::pair\"* %177, i64 0, i32 1\n  %179 = load i32, i32* %178, align 4, !tbaa !22\n  br label %182\n\n180:                                              ; preds = %170, %131, %91\n  %181 = landingpad { i8*, i32 }\n          cleanup\n  br label %240\n\n182:                                              ; preds = %59, %174, %135\n  %183 = phi i32 [ %179, %174 ], [ %61, %135 ], [ %61, %59 ]\n  %184 = add nuw i64 %60, 1\n  %185 = load i64, i64* %33, align 8, !tbaa !13\n  %186 = icmp ugt i64 %185, %184\n  br i1 %186, label %59, label %49, !llvm.loop !24\n\n187:                                              ; preds = %49, %231\n  %188 = phi %\"struct.std::_Rb_tree_node_base\"* [ %232, %231 ], [ %51, %49 ]\n  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %12) #10\n  %189 = getelementptr inbounds %\"struct.std::_Rb_tree_node_base\", %\"struct.std::_Rb_tree_node_base\"* %188, i64 1\n  %190 = bitcast %\"struct.std::_Rb_tree_node_base\"* %189 to %\"struct.std::pair\"*\n  %191 = bitcast %\"struct.std::_Rb_tree_node_base\"* %189 to i8*\n  %192 = load i8, i8* %191, align 4, !tbaa !25\n  store i8 %192, i8* %12, align 1, !tbaa !17\n  %193 = getelementptr inbounds %\"struct.std::pair\", %\"struct.std::pair\"* %190, i64 0, i32 1\n  %194 = load i32, i32* %193, align 4, !tbaa !27\n  %195 = icmp eq i32 %194, %183\n  br i1 %195, label %196, label %231\n\n196:                                              ; preds = %187\n  %197 = load %\"struct.std::_Rb_tree_node\"*, %\"struct.std::_Rb_tree_node\"** %52, align 8, !tbaa !18\n  %198 = icmp eq %\"struct.std::_Rb_tree_node\"* %197, null\n  br i1 %198, label %220, label %199\n\n199:                                              ; preds = %196, %199\n  %200 = phi %\"struct.std::_Rb_tree_node\"* [ %211, %199 ], [ %197, %196 ]\n  %201 = phi %\"struct.std::_Rb_tree_node_base\"* [ %208, %199 ], [ %53, %196 ]\n  %202 = getelementptr inbounds %\"struct.std::_Rb_tree_node\", %\"struct.std::_Rb_tree_node\"* %200, i64 0, i32 1, i32 0, i64 0\n  %203 = load i8, i8* %202, align 1, !tbaa !17\n  %204 = icmp slt i8 %203, %192\n  %205 = getelementptr inbounds %\"struct.std::_Rb_tree_node\", %\"struct.std::_Rb_tree_node\"* %200, i64 0, i32 0, i32 3\n  %206 = getelementptr %\"struct.std::_Rb_tree_node\", %\"struct.std::_Rb_tree_node\"* %200, i64 0, i32 0\n  %207 = getelementptr inbounds %\"struct.std::_Rb_tree_node\", %\"struct.std::_Rb_tree_node\"* %200, i64 0, i32 0, i32 2\n  %208 = select i1 %204, %\"struct.std::_Rb_tree_node_base\"* %201, %\"struct.std::_Rb_tree_node_base\"* %206\n  %209 = select i1 %204, %\"struct.std::_Rb_tree_node_base\"** %205, %\"struct.std::_Rb_tree_node_base\"** %207\n  %210 = bitcast %\"struct.std::_Rb_tree_node_base\"** %209 to %\"struct.std::_Rb_tree_node\"**\n  %211 = load %\"struct.std::_Rb_tree_node\"*, %\"struct.std::_Rb_tree_node\"** %210, align 8, !tbaa !19\n  %212 = icmp eq %\"struct.std::_Rb_tree_node\"* %211, null\n  br i1 %212, label %213, label %199, !llvm.loop !20\n\n213:                                              ; preds = %199\n  %214 = icmp eq %\"struct.std::_Rb_tree_node_base\"* %208, %53\n  br i1 %214, label %220, label %215\n\n215:                                              ; preds = %213\n  %216 = getelementptr inbounds %\"struct.std::_Rb_tree_node_base\", %\"struct.std::_Rb_tree_node_base\"* %208, i64 1\n  %217 = bitcast %\"struct.std::_Rb_tree_node_base\"* %216 to i8*\n  %218 = load i8, i8* %217, align 1, !tbaa !17\n  %219 = icmp slt i8 %192, %218\n  br i1 %219, label %220, label %224\n\n220:                                              ; preds = %215, %213, %196\n  %221 = phi %\"struct.std::_Rb_tree_node_base\"* [ %208, %215 ], [ %53, %213 ], [ %53, %196 ]\n  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %55) #10\n  store i8* %12, i8** %56, align 8, !tbaa !19\n  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %57) #10\n  %222 = invoke %\"struct.std::_Rb_tree_node_base\"* @_ZNSt8_Rb_treeIcSt4pairIKciESt10_Select1stIS2_ESt4lessIcESaIS2_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESD_IJEEEEESt17_Rb_tree_iteratorIS2_ESt23_Rb_tree_const_iteratorIS2_EDpOT_(%\"class.std::_Rb_tree\"* nonnull align 8 dereferenceable(48) %54, %\"struct.std::_Rb_tree_node_base\"* %221, %\"struct.std::piecewise_construct_t\"* nonnull align 1 dereferenceable(1) @_ZStL19piecewise_construct, %\"class.std::tuple\"* nonnull align 8 dereferenceable(8) %3, %\"class.std::tuple.3\"* nonnull align 1 dereferenceable(1) %4)\n          to label %223 unwind label %229\n\n223:                                              ; preds = %220\n  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %57) #10\n  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %55) #10\n  br label %224\n\n224:                                              ; preds = %223, %215\n  %225 = phi %\"struct.std::_Rb_tree_node_base\"* [ %222, %223 ], [ %208, %215 ]\n  %226 = getelementptr inbounds %\"struct.std::_Rb_tree_node_base\", %\"struct.std::_Rb_tree_node_base\"* %225, i64 1\n  %227 = bitcast %\"struct.std::_Rb_tree_node_base\"* %226 to %\"struct.std::pair\"*\n  %228 = getelementptr inbounds %\"struct.std::pair\", %\"struct.std::pair\"* %227, i64 0, i32 1\n  store i32 %183, i32* %228, align 4, !tbaa !22\n  br label %231\n\n229:                                              ; preds = %220\n  %230 = landingpad { i8*, i32 }\n          cleanup\n  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %12) #10\n  br label %240\n\n231:                                              ; preds = %224, %187\n  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %12) #10\n  %232 = call %\"struct.std::_Rb_tree_node_base\"* @_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base(%\"struct.std::_Rb_tree_node_base\"* %188) #11\n  %233 = icmp eq %\"struct.std::_Rb_tree_node_base\"* %232, %36\n  br i1 %233, label %234, label %187, !llvm.loop !28\n\n234:                                              ; preds = %231, %2, %49\n  %235 = load %\"struct.std::_Rb_tree_node\"*, %\"struct.std::_Rb_tree_node\"** %35, align 8, !tbaa !18\n  invoke void @_ZNSt8_Rb_treeIcSt4pairIKciESt10_Select1stIS2_ESt4lessIcESaIS2_EE8_M_eraseEPSt13_Rb_tree_nodeIS2_E(%\"class.std::_Rb_tree\"* nonnull align 8 dereferenceable(48) %37, %\"struct.std::_Rb_tree_node\"* %235)\n          to label %239 unwind label %236\n\n236:                                              ; preds = %234\n  %237 = landingpad { i8*, i32 }\n          catch i8* null\n  %238 = extractvalue { i8*, i32 } %237, 0\n  call void @__clang_call_terminate(i8* %238) #12\n  unreachable\n\n239:                                              ; preds = %234\n  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %13) #10\n  ret void\n\n240:                                              ; preds = %229, %180\n  %241 = phi { i8*, i32 } [ %181, %180 ], [ %230, %229 ]\n  call void @_ZNSt3mapIciSt4lessIcESaISt4pairIKciEEED2Ev(%\"class.std::map\"* nonnull align 8 dereferenceable(48) %0) #10\n  call void @_ZNSt3mapIciSt4lessIcESaISt4pairIKciEEED2Ev(%\"class.std::map\"* nonnull align 8 dereferenceable(48) %11) #10\n  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %13) #10\n  resume { i8*, i32 } %241\n}\n\n; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn\ndeclare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1\n\n; Function Attrs: argmemonly mustprogress nofree nounwind willreturn writeonly\ndeclare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2\n\ndeclare dso_local i32 @__gxx_personality_v0(...)\n\n; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn\ndeclare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1\n\n; Function Attrs: nounwind uwtable\ndefine linkonce_odr dso_local void @_ZNSt3mapIciSt4lessIcESaISt4pairIKciEEED2Ev(%\"class.std::map\"* nonnull align 8 dereferenceable(48) %0) unnamed_addr #3 comdat align 2 personality i32 (...)* @__gxx_personality_v0 {\n  %2 = getelementptr inbounds %\"class.std::map\", %\"class.std::map\"* %0, i64 0, i32 0\n  %3 = getelementptr inbounds %\"class.std::map\", %\"class.std::map\"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0\n  %4 = getelementptr inbounds i8, i8* %3, i64 16\n  %5 = bitcast i8* %4 to %\"struct.std::_Rb_tree_node\"**\n  %6 = load %\"struct.std::_Rb_tree_node\"*, %\"struct.std::_Rb_tree_node\"** %5, align 8, !tbaa !18\n  invoke void @_ZNSt8_Rb_treeIcSt4pairIKciESt10_Select1stIS2_ESt4lessIcESaIS2_EE8_M_eraseEPSt13_Rb_tree_nodeIS2_E(%\"class.std::_Rb_tree\"* nonnull align 8 dereferenceable(48) %2, %\"struct.std::_Rb_tree_node\"* %6)\n          to label %10 unwind label %7\n\n7:                                                ; preds = %1\n  %8 = landingpad { i8*, i32 }\n          catch i8* null\n  %9 = extractvalue { i8*, i32 } %8, 0\n  tail call void @__clang_call_terminate(i8* %9) #12\n  unreachable\n\n10:                                               ; preds = %1\n  ret void\n}\n\n; Function Attrs: noinline noreturn nounwind\ndefine linkonce_odr hidden void @__clang_call_terminate(i8* %0) local_unnamed_addr #4 comdat {\n  %2 = tail call i8* @__cxa_begin_catch(i8* %0) #10\n  tail call void @_ZSt9terminatev() #12\n  unreachable\n}\n\ndeclare dso_local i8* @__cxa_begin_catch(i8*) local_unnamed_addr\n\ndeclare dso_local void @_ZSt9terminatev() local_unnamed_addr\n\n; Function Attrs: mustprogress uwtable\ndefine linkonce_odr dso_local void @_ZNSt8_Rb_treeIcSt4pairIKciESt10_Select1stIS2_ESt4lessIcESaIS2_EE8_M_eraseEPSt13_Rb_tree_nodeIS2_E(%\"class.std::_Rb_tree\"* nonnull align 8 dereferenceable(48) %0, %\"struct.std::_Rb_tree_node\"* %1) local_unnamed_addr #5 comdat align 2 personality i32 (...)* @__gxx_personality_v0 {\n  %3 = icmp eq %\"struct.std::_Rb_tree_node\"* %1, null\n  br i1 %3, label %14, label %4\n\n4:                                                ; preds = %2, %4\n  %5 = phi %\"struct.std::_Rb_tree_node\"* [ %11, %4 ], [ %1, %2 ]\n  %6 = getelementptr inbounds %\"struct.std::_Rb_tree_node\", %\"struct.std::_Rb_tree_node\"* %5, i64 0, i32 0, i32 3\n  %7 = bitcast %\"struct.std::_Rb_tree_node_base\"** %6 to %\"struct.std::_Rb_tree_node\"**\n  %8 = load %\"struct.std::_Rb_tree_node\"*, %\"struct.std::_Rb_tree_node\"** %7, align 8, !tbaa !29\n  tail call void @_ZNSt8_Rb_treeIcSt4pairIKciESt10_Select1stIS2_ESt4lessIcESaIS2_EE8_M_eraseEPSt13_Rb_tree_nodeIS2_E(%\"class.std::_Rb_tree\"* nonnull align 8 dereferenceable(48) %0, %\"struct.std::_Rb_tree_node\"* %8)\n  %9 = getelementptr inbounds %\"struct.std::_Rb_tree_node\", %\"struct.std::_Rb_tree_node\"* %5, i64 0, i32 0, i32 2\n  %10 = bitcast %\"struct.std::_Rb_tree_node_base\"** %9 to %\"struct.std::_Rb_tree_node\"**\n  %11 = load %\"struct.std::_Rb_tree_node\"*, %\"struct.std::_Rb_tree_node\"** %10, align 8, !tbaa !30\n  %12 = bitcast %\"struct.std::_Rb_tree_node\"* %5 to i8*\n  tail call void @_ZdlPv(i8* nonnull %12) #10\n  %13 = icmp eq %\"struct.std::_Rb_tree_node\"* %11, null\n  br i1 %13, label %14, label %4, !llvm.loop !31\n\n14:                                               ; preds = %4, %2\n  ret void\n}\n\n; Function Attrs: nobuiltin nounwind\ndeclare dso_local void @_ZdlPv(i8*) local_unnamed_addr #6\n\n; Function Attrs: uwtable\ndefine linkonce_odr dso_local %\"struct.std::_Rb_tree_node_base\"* @_ZNSt8_Rb_treeIcSt4pairIKciESt10_Select1stIS2_ESt4lessIcESaIS2_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESD_IJEEEEESt17_Rb_tree_iteratorIS2_ESt23_Rb_tree_const_iteratorIS2_EDpOT_(%\"class.std::_Rb_tree\"* nonnull align 8 dereferenceable(48) %0, %\"struct.std::_Rb_tree_node_base\"* %1, %\"struct.std::piecewise_construct_t\"* nonnull align 1 dereferenceable(1) %2, %\"class.std::tuple\"* nonnull align 8 dereferenceable(8) %3, %\"class.std::tuple.3\"* nonnull align 1 dereferenceable(1) %4) local_unnamed_addr #0 comdat align 2 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {\n  %6 = tail call noalias nonnull i8* @_Znwm(i64 40) #13\n  %7 = getelementptr inbounds %\"class.std::tuple\", %\"class.std::tuple\"* %3, i64 0, i32 0, i32 0, i32 0\n  %8 = load i8*, i8** %7, align 8, !tbaa !32\n  %9 = getelementptr inbounds i8, i8* %6, i64 32\n  %10 = load i8, i8* %8, align 1, !tbaa !17\n  store i8 %10, i8* %9, align 4, !tbaa !25\n  %11 = getelementptr inbounds i8, i8* %6, i64 36\n  %12 = bitcast i8* %11 to i32*\n  store i32 0, i32* %12, align 4, !tbaa !27\n  %13 = invoke { %\"struct.std::_Rb_tree_node_base\"*, %\"struct.std::_Rb_tree_node_base\"* } @_ZNSt8_Rb_treeIcSt4pairIKciESt10_Select1stIS2_ESt4lessIcESaIS2_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS2_ERS1_(%\"class.std::_Rb_tree\"* nonnull align 8 dereferenceable(48) %0, %\"struct.std::_Rb_tree_node_base\"* %1, i8* nonnull align 1 dereferenceable(1) %9)\n          to label %14 unwind label %41\n\n14:                                               ; preds = %5\n  %15 = extractvalue { %\"struct.std::_Rb_tree_node_base\"*, %\"struct.std::_Rb_tree_node_base\"* } %13, 0\n  %16 = extractvalue { %\"struct.std::_Rb_tree_node_base\"*, %\"struct.std::_Rb_tree_node_base\"* } %13, 1\n  %17 = icmp eq %\"struct.std::_Rb_tree_node_base\"* %16, null\n  br i1 %17, label %45, label %18\n\n18:                                               ; preds = %14\n  %19 = icmp eq %\"struct.std::_Rb_tree_node_base\"* %15, null\n  br i1 %19, label %20, label %31\n\n20:                                               ; preds = %18\n  %21 = getelementptr inbounds %\"class.std::_Rb_tree\", %\"class.std::_Rb_tree\"* %0, i64 0, i32 0, i32 0, i32 0, i32 0\n  %22 = getelementptr inbounds i8, i8* %21, i64 8\n  %23 = bitcast i8* %22 to %\"struct.std::_Rb_tree_node_base\"*\n  %24 = icmp eq %\"struct.std::_Rb_tree_node_base\"* %16, %23\n  br i1 %24, label %31, label %25\n\n25:                                               ; preds = %20\n  %26 = getelementptr inbounds %\"struct.std::_Rb_tree_node_base\", %\"struct.std::_Rb_tree_node_base\"* %16, i64 1\n  %27 = bitcast %\"struct.std::_Rb_tree_node_base\"* %26 to i8*\n  %28 = load i8, i8* %9, align 1, !tbaa !17\n  %29 = load i8, i8* %27, align 1, !tbaa !17\n  %30 = icmp slt i8 %28, %29\n  br label %31\n\n31:                                               ; preds = %18, %25, %20\n  %32 = phi i1 [ true, %20 ], [ %30, %25 ], [ true, %18 ]\n  %33 = bitcast i8* %6 to %\"struct.std::_Rb_tree_node_base\"*\n  %34 = getelementptr inbounds %\"class.std::_Rb_tree\", %\"class.std::_Rb_tree\"* %0, i64 0, i32 0, i32 0, i32 0, i32 0\n  %35 = getelementptr inbounds i8, i8* %34, i64 8\n  %36 = bitcast i8* %35 to %\"struct.std::_Rb_tree_node_base\"*\n  tail call void @_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_(i1 zeroext %32, %\"struct.std::_Rb_tree_node_base\"* nonnull %33, %\"struct.std::_Rb_tree_node_base\"* nonnull %16, %\"struct.std::_Rb_tree_node_base\"* nonnull align 8 dereferenceable(32) %36) #10\n  %37 = getelementptr inbounds i8, i8* %34, i64 40\n  %38 = bitcast i8* %37 to i64*\n  %39 = load i64, i64* %38, align 8, !tbaa !12\n  %40 = add i64 %39, 1\n  store i64 %40, i64* %38, align 8, !tbaa !12\n  br label %46\n\n41:                                               ; preds = %5\n  %42 = landingpad { i8*, i32 }\n          catch i8* null\n  %43 = extractvalue { i8*, i32 } %42, 0\n  %44 = tail call i8* @__cxa_begin_catch(i8* %43) #10\n  tail call void @_ZdlPv(i8* nonnull %6) #10\n  invoke void @__cxa_rethrow() #14\n          to label %54 unwind label %48\n\n45:                                               ; preds = %14\n  tail call void @_ZdlPv(i8* nonnull %6) #10\n  br label %46\n\n46:                                               ; preds = %45, %31\n  %47 = phi %\"struct.std::_Rb_tree_node_base\"* [ %15, %45 ], [ %33, %31 ]\n  ret %\"struct.std::_Rb_tree_node_base\"* %47\n\n48:                                               ; preds = %41\n  %49 = landingpad { i8*, i32 }\n          cleanup\n  invoke void @__cxa_end_catch()\n          to label %50 unwind label %51\n\n50:                                               ; preds = %48\n  resume { i8*, i32 } %49\n\n51:                                               ; preds = %48\n  %52 = landingpad { i8*, i32 }\n          catch i8* null\n  %53 = extractvalue { i8*, i32 } %52, 0\n  tail call void @__clang_call_terminate(i8* %53) #12\n  unreachable\n\n54:                                               ; preds = %41\n  unreachable\n}\n\n; Function Attrs: uwtable\ndefine linkonce_odr dso_local { %\"struct.std::_Rb_tree_node_base\"*, %\"struct.std::_Rb_tree_node_base\"* } @_ZNSt8_Rb_treeIcSt4pairIKciESt10_Select1stIS2_ESt4lessIcESaIS2_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS2_ERS1_(%\"class.std::_Rb_tree\"* nonnull align 8 dereferenceable(48) %0, %\"struct.std::_Rb_tree_node_base\"* %1, i8* nonnull align 1 dereferenceable(1) %2) local_unnamed_addr #0 comdat align 2 {\n  %4 = getelementptr inbounds %\"class.std::_Rb_tree\", %\"class.std::_Rb_tree\"* %0, i64 0, i32 0, i32 0, i32 0, i32 0\n  %5 = getelementptr inbounds i8, i8* %4, i64 8\n  %6 = bitcast i8* %5 to %\"struct.std::_Rb_tree_node_base\"*\n  %7 = icmp eq %\"struct.std::_Rb_tree_node_base\"* %6, %1\n  br i1 %7, label %8, label %60\n\n8:                                                ; preds = %3\n  %9 = getelementptr inbounds i8, i8* %4, i64 40\n  %10 = bitcast i8* %9 to i64*\n  %11 = load i64, i64* %10, align 8, !tbaa !12\n  %12 = icmp eq i64 %11, 0\n  br i1 %12, label %13, label %15\n\n13:                                               ; preds = %8\n  %14 = load i8, i8* %2, align 1\n  br label %24\n\n15:                                               ; preds = %8\n  %16 = getelementptr inbounds i8, i8* %4, i64 32\n  %17 = bitcast i8* %16 to %\"struct.std::_Rb_tree_node_base\"**\n  %18 = load %\"struct.std::_Rb_tree_node_base\"*, %\"struct.std::_Rb_tree_node_base\"** %17, align 8, !tbaa !19\n  %19 = getelementptr inbounds %\"struct.std::_Rb_tree_node_base\", %\"struct.std::_Rb_tree_node_base\"* %18, i64 1\n  %20 = bitcast %\"struct.std::_Rb_tree_node_base\"* %19 to i8*\n  %21 = load i8, i8* %20, align 1, !tbaa !17\n  %22 = load i8, i8* %2, align 1, !tbaa !17\n  %23 = icmp slt i8 %21, %22\n  br i1 %23, label %171, label %24\n\n24:                                               ; preds = %13, %15\n  %25 = phi i8 [ %14, %13 ], [ %22, %15 ]\n  %26 = getelementptr inbounds i8, i8* %4, i64 16\n  %27 = bitcast i8* %26 to %\"struct.std::_Rb_tree_node\"**\n  %28 = load %\"struct.std::_Rb_tree_node\"*, %\"struct.std::_Rb_tree_node\"** %27, align 8, !tbaa !19\n  %29 = icmp eq %\"struct.std::_Rb_tree_node\"* %28, null\n  br i1 %29, label %43, label %30\n\n30:                                               ; preds = %24, %30\n  %31 = phi %\"struct.std::_Rb_tree_node\"* [ %39, %30 ], [ %28, %24 ]\n  %32 = getelementptr inbounds %\"struct.std::_Rb_tree_node\", %\"struct.std::_Rb_tree_node\"* %31, i64 0, i32 1, i32 0, i64 0\n  %33 = load i8, i8* %32, align 1, !tbaa !17\n  %34 = icmp slt i8 %25, %33\n  %35 = getelementptr inbounds %\"struct.std::_Rb_tree_node\", %\"struct.std::_Rb_tree_node\"* %31, i64 0, i32 0, i32 2\n  %36 = getelementptr inbounds %\"struct.std::_Rb_tree_node\", %\"struct.std::_Rb_tree_node\"* %31, i64 0, i32 0, i32 3\n  %37 = select i1 %34, %\"struct.std::_Rb_tree_node_base\"** %35, %\"struct.std::_Rb_tree_node_base\"** %36\n  %38 = bitcast %\"struct.std::_Rb_tree_node_base\"** %37 to %\"struct.std::_Rb_tree_node\"**\n  %39 = load %\"struct.std::_Rb_tree_node\"*, %\"struct.std::_Rb_tree_node\"** %38, align 8, !tbaa !19\n  %40 = icmp eq %\"struct.std::_Rb_tree_node\"* %39, null\n  br i1 %40, label %41, label %30, !llvm.loop !34\n\n41:                                               ; preds = %30\n  %42 = getelementptr %\"struct.std::_Rb_tree_node\", %\"struct.std::_Rb_tree_node\"* %31, i64 0, i32 0\n  br i1 %34, label %43, label %51\n\n43:                                               ; preds = %41, %24\n  %44 = phi %\"struct.std::_Rb_tree_node_base\"* [ %42, %41 ], [ %1, %24 ]\n  %45 = getelementptr inbounds i8, i8* %4, i64 24\n  %46 = bitcast i8* %45 to %\"struct.std::_Rb_tree_node_base\"**\n  %47 = load %\"struct.std::_Rb_tree_node_base\"*, %\"struct.std::_Rb_tree_node_base\"** %46, align 8, !tbaa !3\n  %48 = icmp eq %\"struct.std::_Rb_tree_node_base\"* %44, %47\n  br i1 %48, label %171, label %49\n\n49:                                               ; preds = %43\n  %50 = tail call %\"struct.std::_Rb_tree_node_base\"* @_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base(%\"struct.std::_Rb_tree_node_base\"* %44) #11\n  br label %51\n\n51:                                               ; preds = %49, %41\n  %52 = phi %\"struct.std::_Rb_tree_node_base\"* [ %44, %49 ], [ %42, %41 ]\n  %53 = phi %\"struct.std::_Rb_tree_node_base\"* [ %50, %49 ], [ %42, %41 ]\n  %54 = getelementptr inbounds %\"struct.std::_Rb_tree_node_base\", %\"struct.std::_Rb_tree_node_base\"* %53, i64 1\n  %55 = bitcast %\"struct.std::_Rb_tree_node_base\"* %54 to i8*\n  %56 = load i8, i8* %55, align 1, !tbaa !17\n  %57 = icmp slt i8 %56, %25\n  %58 = select i1 %57, %\"struct.std::_Rb_tree_node_base\"* null, %\"struct.std::_Rb_tree_node_base\"* %53\n  %59 = select i1 %57, %\"struct.std::_Rb_tree_node_base\"* %52, %\"struct.std::_Rb_tree_node_base\"* null\n  br label %171\n\n60:                                               ; preds = %3\n  %61 = getelementptr inbounds %\"struct.std::_Rb_tree_node_base\", %\"struct.std::_Rb_tree_node_base\"* %1, i64 1\n  %62 = bitcast %\"struct.std::_Rb_tree_node_base\"* %61 to i8*\n  %63 = load i8, i8* %2, align 1, !tbaa !17\n  %64 = load i8, i8* %62, align 1, !tbaa !17\n  %65 = icmp slt i8 %63, %64\n  br i1 %65, label %66, label %116\n\n66:                                               ; preds = %60\n  %67 = getelementptr inbounds i8, i8* %4, i64 24\n  %68 = bitcast i8* %67 to %\"struct.std::_Rb_tree_node_base\"**\n  %69 = load %\"struct.std::_Rb_tree_node_base\"*, %\"struct.std::_Rb_tree_node_base\"** %68, align 8, !tbaa !19\n  %70 = icmp eq %\"struct.std::_Rb_tree_node_base\"* %69, %1\n  br i1 %70, label %171, label %71\n\n71:                                               ; preds = %66\n  %72 = tail call %\"struct.std::_Rb_tree_node_base\"* @_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base(%\"struct.std::_Rb_tree_node_base\"* nonnull %1) #11\n  %73 = getelementptr inbounds %\"struct.std::_Rb_tree_node_base\", %\"struct.std::_Rb_tree_node_base\"* %72, i64 1\n  %74 = bitcast %\"struct.std::_Rb_tree_node_base\"* %73 to i8*\n  %75 = load i8, i8* %74, align 1, !tbaa !17\n  %76 = icmp slt i8 %75, %63\n  br i1 %76, label %77, label %84\n\n77:                                               ; preds = %71\n  %78 = getelementptr inbounds %\"struct.std::_Rb_tree_node_base\", %\"struct.std::_Rb_tree_node_base\"* %72, i64 0, i32 3\n  %79 = bitcast %\"struct.std::_Rb_tree_node_base\"** %78 to %\"struct.std::_Rb_tree_node\"**\n  %80 = load %\"struct.std::_Rb_tree_node\"*, %\"struct.std::_Rb_tree_node\"** %79, align 8, !tbaa !29\n  %81 = icmp eq %\"struct.std::_Rb_tree_node\"* %80, null\n  %82 = select i1 %81, %\"struct.std::_Rb_tree_node_base\"* null, %\"struct.std::_Rb_tree_node_base\"* %1\n  %83 = select i1 %81, %\"struct.std::_Rb_tree_node_base\"* %72, %\"struct.std::_Rb_tree_node_base\"* %1\n  br label %171\n\n84:                                               ; preds = %71\n  %85 = getelementptr inbounds i8, i8* %4, i64 16\n  %86 = bitcast i8* %85 to %\"struct.std::_Rb_tree_node\"**\n  %87 = load %\"struct.std::_Rb_tree_node\"*, %\"struct.std::_Rb_tree_node\"** %86, align 8, !tbaa !19\n  %88 = icmp eq %\"struct.std::_Rb_tree_node\"* %87, null\n  br i1 %88, label %102, label %89\n\n89:                                               ; preds = %84, %89\n  %90 = phi %\"struct.std::_Rb_tree_node\"* [ %98, %89 ], [ %87, %84 ]\n  %91 = getelementptr inbounds %\"struct.std::_Rb_tree_node\", %\"struct.std::_Rb_tree_node\"* %90, i64 0, i32 1, i32 0, i64 0\n  %92 = load i8, i8* %91, align 1, !tbaa !17\n  %93 = icmp slt i8 %63, %92\n  %94 = getelementptr inbounds %\"struct.std::_Rb_tree_node\", %\"struct.std::_Rb_tree_node\"* %90, i64 0, i32 0, i32 2\n  %95 = getelementptr inbounds %\"struct.std::_Rb_tree_node\", %\"struct.std::_Rb_tree_node\"* %90, i64 0, i32 0, i32 3\n  %96 = select i1 %93, %\"struct.std::_Rb_tree_node_base\"** %94, %\"struct.std::_Rb_tree_node_base\"** %95\n  %97 = bitcast %\"struct.std::_Rb_tree_node_base\"** %96 to %\"struct.std::_Rb_tree_node\"**\n  %98 = load %\"struct.std::_Rb_tree_node\"*, %\"struct.std::_Rb_tree_node\"** %97, align 8, !tbaa !19\n  %99 = icmp eq %\"struct.std::_Rb_tree_node\"* %98, null\n  br i1 %99, label %100, label %89, !llvm.loop !34\n\n100:                                              ; preds = %89\n  %101 = getelementptr %\"struct.std::_Rb_tree_node\", %\"struct.std::_Rb_tree_node\"* %90, i64 0, i32 0\n  br i1 %93, label %102, label %107\n\n102:                                              ; preds = %100, %84\n  %103 = phi %\"struct.std::_Rb_tree_node_base\"* [ %101, %100 ], [ %6, %84 ]\n  %104 = icmp eq %\"struct.std::_Rb_tree_node_base\"* %103, %69\n  br i1 %104, label %171, label %105\n\n105:                                              ; preds = %102\n  %106 = tail call %\"struct.std::_Rb_tree_node_base\"* @_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base(%\"struct.std::_Rb_tree_node_base\"* %103) #11\n  br label %107\n\n107:                                              ; preds = %105, %100\n  %108 = phi %\"struct.std::_Rb_tree_node_base\"* [ %103, %105 ], [ %101, %100 ]\n  %109 = phi %\"struct.std::_Rb_tree_node_base\"* [ %106, %105 ], [ %101, %100 ]\n  %110 = getelementptr inbounds %\"struct.std::_Rb_tree_node_base\", %\"struct.std::_Rb_tree_node_base\"* %109, i64 1\n  %111 = bitcast %\"struct.std::_Rb_tree_node_base\"* %110 to i8*\n  %112 = load i8, i8* %111, align 1, !tbaa !17\n  %113 = icmp slt i8 %112, %63\n  %114 = select i1 %113, %\"struct.std::_Rb_tree_node_base\"* null, %\"struct.std::_Rb_tree_node_base\"* %109\n  %115 = select i1 %113, %\"struct.std::_Rb_tree_node_base\"* %108, %\"struct.std::_Rb_tree_node_base\"* null\n  br label %171\n\n116:                                              ; preds = %60\n  %117 = icmp slt i8 %64, %63\n  br i1 %117, label %118, label %171\n\n118:                                              ; preds = %116\n  %119 = getelementptr inbounds i8, i8* %4, i64 32\n  %120 = bitcast i8* %119 to %\"struct.std::_Rb_tree_node_base\"**\n  %121 = load %\"struct.std::_Rb_tree_node_base\"*, %\"struct.std::_Rb_tree_node_base\"** %120, align 8, !tbaa !19\n  %122 = icmp eq %\"struct.std::_Rb_tree_node_base\"* %121, %1\n  br i1 %122, label %171, label %123\n\n123:                                              ; preds = %118\n  %124 = tail call %\"struct.std::_Rb_tree_node_base\"* @_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base(%\"struct.std::_Rb_tree_node_base\"* nonnull %1) #11\n  %125 = getelementptr inbounds %\"struct.std::_Rb_tree_node_base\", %\"struct.std::_Rb_tree_node_base\"* %124, i64 1\n  %126 = bitcast %\"struct.std::_Rb_tree_node_base\"* %125 to i8*\n  %127 = load i8, i8* %126, align 1, !tbaa !17\n  %128 = icmp slt i8 %63, %127\n  br i1 %128, label %129, label %136\n\n129:                                              ; preds = %123\n  %130 = getelementptr inbounds %\"struct.std::_Rb_tree_node_base\", %\"struct.std::_Rb_tree_node_base\"* %1, i64 0, i32 3\n  %131 = bitcast %\"struct.std::_Rb_tree_node_base\"** %130 to %\"struct.std::_Rb_tree_node\"**\n  %132 = load %\"struct.std::_Rb_tree_node\"*, %\"struct.std::_Rb_tree_node\"** %131, align 8, !tbaa !29\n  %133 = icmp eq %\"struct.std::_Rb_tree_node\"* %132, null\n  %134 = select i1 %133, %\"struct.std::_Rb_tree_node_base\"* null, %\"struct.std::_Rb_tree_node_base\"* %124\n  %135 = select i1 %133, %\"struct.std::_Rb_tree_node_base\"* %1, %\"struct.std::_Rb_tree_node_base\"* %124\n  br label %171\n\n136:                                              ; preds = %123\n  %137 = getelementptr inbounds i8, i8* %4, i64 16\n  %138 = bitcast i8* %137 to %\"struct.std::_Rb_tree_node\"**\n  %139 = load %\"struct.std::_Rb_tree_node\"*, %\"struct.std::_Rb_tree_node\"** %138, align 8, !tbaa !19\n  %140 = icmp eq %\"struct.std::_Rb_tree_node\"* %139, null\n  br i1 %140, label %154, label %141\n\n141:                                              ; preds = %136, %141\n  %142 = phi %\"struct.std::_Rb_tree_node\"* [ %150, %141 ], [ %139, %136 ]\n  %143 = getelementptr inbounds %\"struct.std::_Rb_tree_node\", %\"struct.std::_Rb_tree_node\"* %142, i64 0, i32 1, i32 0, i64 0\n  %144 = load i8, i8* %143, align 1, !tbaa !17\n  %145 = icmp slt i8 %63, %144\n  %146 = getelementptr inbounds %\"struct.std::_Rb_tree_node\", %\"struct.std::_Rb_tree_node\"* %142, i64 0, i32 0, i32 2\n  %147 = getelementptr inbounds %\"struct.std::_Rb_tree_node\", %\"struct.std::_Rb_tree_node\"* %142, i64 0, i32 0, i32 3\n  %148 = select i1 %145, %\"struct.std::_Rb_tree_node_base\"** %146, %\"struct.std::_Rb_tree_node_base\"** %147\n  %149 = bitcast %\"struct.std::_Rb_tree_node_base\"** %148 to %\"struct.std::_Rb_tree_node\"**\n  %150 = load %\"struct.std::_Rb_tree_node\"*, %\"struct.std::_Rb_tree_node\"** %149, align 8, !tbaa !19\n  %151 = icmp eq %\"struct.std::_Rb_tree_node\"* %150, null\n  br i1 %151, label %152, label %141, !llvm.loop !34\n\n152:                                              ; preds = %141\n  %153 = getelementptr %\"struct.std::_Rb_tree_node\", %\"struct.std::_Rb_tree_node\"* %142, i64 0, i32 0\n  br i1 %145, label %154, label %162\n\n154:                                              ; preds = %152, %136\n  %155 = phi %\"struct.std::_Rb_tree_node_base\"* [ %153, %152 ], [ %6, %136 ]\n  %156 = getelementptr inbounds i8, i8* %4, i64 24\n  %157 = bitcast i8* %156 to %\"struct.std::_Rb_tree_node_base\"**\n  %158 = load %\"struct.std::_Rb_tree_node_base\"*, %\"struct.std::_Rb_tree_node_base\"** %157, align 8, !tbaa !3\n  %159 = icmp eq %\"struct.std::_Rb_tree_node_base\"* %155, %158\n  br i1 %159, label %171, label %160\n\n160:                                              ; preds = %154\n  %161 = tail call %\"struct.std::_Rb_tree_node_base\"* @_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base(%\"struct.std::_Rb_tree_node_base\"* %155) #11\n  br label %162\n\n162:                                              ; preds = %160, %152\n  %163 = phi %\"struct.std::_Rb_tree_node_base\"* [ %155, %160 ], [ %153, %152 ]\n  %164 = phi %\"struct.std::_Rb_tree_node_base\"* [ %161, %160 ], [ %153, %152 ]\n  %165 = getelementptr inbounds %\"struct.std::_Rb_tree_node_base\", %\"struct.std::_Rb_tree_node_base\"* %164, i64 1\n  %166 = bitcast %\"struct.std::_Rb_tree_node_base\"* %165 to i8*\n  %167 = load i8, i8* %166, align 1, !tbaa !17\n  %168 = icmp slt i8 %167, %63\n  %169 = select i1 %168, %\"struct.std::_Rb_tree_node_base\"* null, %\"struct.std::_Rb_tree_node_base\"* %164\n  %170 = select i1 %168, %\"struct.std::_Rb_tree_node_base\"* %163, %\"struct.std::_Rb_tree_node_base\"* null\n  br label %171\n\n171:                                              ; preds = %162, %154, %107, %102, %51, %43, %129, %77, %116, %118, %66, %15\n  %172 = phi %\"struct.std::_Rb_tree_node_base\"* [ null, %15 ], [ %1, %66 ], [ null, %118 ], [ %1, %116 ], [ %82, %77 ], [ %134, %129 ], [ %58, %51 ], [ null, %43 ], [ %114, %107 ], [ null, %102 ], [ %169, %162 ], [ null, %154 ]\n  %173 = phi %\"struct.std::_Rb_tree_node_base\"* [ %18, %15 ], [ %1, %66 ], [ %1, %118 ], [ null, %116 ], [ %83, %77 ], [ %135, %129 ], [ %59, %51 ], [ %44, %43 ], [ %115, %107 ], [ %69, %102 ], [ %170, %162 ], [ %155, %154 ]\n  %174 = insertvalue { %\"struct.std::_Rb_tree_node_base\"*, %\"struct.std::_Rb_tree_node_base\"* } undef, %\"struct.std::_Rb_tree_node_base\"* %172, 0\n  %175 = insertvalue { %\"struct.std::_Rb_tree_node_base\"*, %\"struct.std::_Rb_tree_node_base\"* } %174, %\"struct.std::_Rb_tree_node_base\"* %173, 1\n  ret { %\"struct.std::_Rb_tree_node_base\"*, %\"struct.std::_Rb_tree_node_base\"* } %175\n}\n\ndeclare dso_local void @__cxa_rethrow() local_unnamed_addr\n\ndeclare dso_local void @__cxa_end_catch() local_unnamed_addr\n\n; Function Attrs: nobuiltin allocsize(0)\ndeclare dso_local nonnull i8* @_Znwm(i64) local_unnamed_addr #7\n\n; Function Attrs: mustprogress nofree nounwind readonly willreturn\ndeclare dso_local %\"struct.std::_Rb_tree_node_base\"* @_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base(%\"struct.std::_Rb_tree_node_base\"*) local_unnamed_addr #8\n\n; Function Attrs: mustprogress nofree nounwind readonly willreturn\ndeclare dso_local %\"struct.std::_Rb_tree_node_base\"* @_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base(%\"struct.std::_Rb_tree_node_base\"*) local_unnamed_addr #8\n\n; Function Attrs: nounwind\ndeclare dso_local void @_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_(i1 zeroext, %\"struct.std::_Rb_tree_node_base\"*, %\"struct.std::_Rb_tree_node_base\"*, %\"struct.std::_Rb_tree_node_base\"* nonnull align 8 dereferenceable(32)) local_unnamed_addr #9\n\nattributes #0 = { uwtable \"frame-pointer\"=\"none\" \"min-legal-vector-width\"=\"0\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #1 = { argmemonly mustprogress nofree nosync nounwind willreturn }\nattributes #2 = { argmemonly mustprogress nofree nounwind willreturn writeonly }\nattributes #3 = { nounwind uwtable \"frame-pointer\"=\"none\" \"min-legal-vector-width\"=\"0\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #4 = { noinline noreturn nounwind }\nattributes #5 = { mustprogress uwtable \"frame-pointer\"=\"none\" \"min-legal-vector-width\"=\"0\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #6 = { nobuiltin nounwind \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #7 = { nobuiltin allocsize(0) \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #8 = { mustprogress nofree nounwind readonly willreturn \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #9 = { nounwind \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #10 = { nounwind }\nattributes #11 = { nounwind readonly willreturn }\nattributes #12 = { noreturn nounwind }\nattributes #13 = { allocsize(0) }\nattributes #14 = { noreturn }\n\n!llvm.module.flags = !{!0, !1}\n!llvm.ident = !{!2}\n\n!0 = !{i32 1, !\"wchar_size\", i32 4}\n!1 = !{i32 7, !\"uwtable\", i32 1}\n!2 = !{!\"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)\"}\n!3 = !{!4, !9, i64 16}\n!4 = !{!\"_ZTSSt15_Rb_tree_header\", !5, i64 0, !10, i64 32}\n!5 = !{!\"_ZTSSt18_Rb_tree_node_base\", !6, i64 0, !9, i64 8, !9, i64 16, !9, i64 24}\n!6 = !{!\"_ZTSSt14_Rb_tree_color\", !7, i64 0}\n!7 = !{!\"omnipotent char\", !8, i64 0}\n!8 = !{!\"Simple C++ TBAA\"}\n!9 = !{!\"any pointer\", !7, i64 0}\n!10 = !{!\"long\", !7, i64 0}\n!11 = !{!4, !9, i64 24}\n!12 = !{!4, !10, i64 32}\n!13 = !{!14, !10, i64 8}\n!14 = !{!\"_ZTSNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE\", !15, i64 0, !10, i64 8, !7, i64 16}\n!15 = !{!\"_ZTSNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderE\", !9, i64 0}\n!16 = !{!14, !9, i64 0}\n!17 = !{!7, !7, i64 0}\n!18 = !{!4, !9, i64 8}\n!19 = !{!9, !9, i64 0}\n!20 = distinct !{!20, !21}\n!21 = !{!\"llvm.loop.mustprogress\"}\n!22 = !{!23, !23, i64 0}\n!23 = !{!\"int\", !7, i64 0}\n!24 = distinct !{!24, !21}\n!25 = !{!26, !7, i64 0}\n!26 = !{!\"_ZTSSt4pairIKciE\", !7, i64 0, !23, i64 4}\n!27 = !{!26, !23, i64 4}\n!28 = distinct !{!28, !21}\n!29 = !{!5, !9, i64 24}\n!30 = !{!5, !9, i64 16}\n!31 = distinct !{!31, !21}\n!32 = !{!33, !9, i64 0}\n!33 = !{!\"_ZTSSt10_Head_baseILm0ERKcLb0EE\", !9, i64 0}\n!34 = distinct !{!34, !21}\n", "target": "This is the targeted source code:\n/*\nGiven a string representing a space separated lowercase letters, return a map\nof the letter with the most repetition and containing the corresponding count.\nIf several letters have the same occurrence, return all of them.\n\nExample:\nhistogram(\"a b c\") == {{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}\nhistogram(\"a b b a\") == {{\"a\", 2}, {\"b\", 2}}\nhistogram(\"a b c a b\") == {{\"a\", 2}, {\"b\", 2}}\nhistogram(\"b b b b a\") == {{\"b\", 4}}\nhistogram(\"\") == {}\n\n*/\n#include<stdio.h>\n#include<string>\n#include<map>\nusing namespace std;\nmap<char,int> histogram(string test){\n\n    map<char,int> count={},out={};\n    map <char,int>::iterator it;\n    int max=0;\n    for (int i=0;i<test.length();i++)\n        if (test[i]!=' ')\n        {\n            count[test[i]]+=1;\n            if (count[test[i]]>max) max=count[test[i]];\n        }\n    for (it=count.begin();it!=count.end();it++)\n    {\n        char w1=it->first;\n        int w2=it->second;\n        if (w2==max) out[w1]=w2;\n    }\n    return out;\n}\n"}
{"input": "Convert this to C++:\n; ModuleID = '../../Human_xBenchmarks_164/CPP_112/CPP_112.cpp'\nsource_filename = \"../../Human_xBenchmarks_164/CPP_112/CPP_112.cpp\"\ntarget datalayout = \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\ntarget triple = \"x86_64-unknown-linux-gnu\"\n\n%\"class.std::vector\" = type { %\"struct.std::_Vector_base\" }\n%\"struct.std::_Vector_base\" = type { %\"struct.std::_Vector_base<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char>>>::_Vector_impl\" }\n%\"struct.std::_Vector_base<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char>>>::_Vector_impl\" = type { %\"struct.std::_Vector_base<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char>>>::_Vector_impl_data\" }\n%\"struct.std::_Vector_base<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char>>>::_Vector_impl_data\" = type { %\"class.std::__cxx11::basic_string\"*, %\"class.std::__cxx11::basic_string\"*, %\"class.std::__cxx11::basic_string\"* }\n%\"class.std::__cxx11::basic_string\" = type { %\"struct.std::__cxx11::basic_string<char>::_Alloc_hider\", i64, %union.anon }\n%\"struct.std::__cxx11::basic_string<char>::_Alloc_hider\" = type { i8* }\n%union.anon = type { i64, [8 x i8] }\n\n$__clang_call_terminate = comdat any\n\n$_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPS7_EET0_T_SC_SB_ = comdat any\n\n@.str.2 = private unnamed_addr constant [6 x i8] c\"False\\00\", align 1\n\n; Function Attrs: uwtable\ndefine dso_local void @_Z14reverse_deleteNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES4_(%\"class.std::vector\"* noalias nocapture sret(%\"class.std::vector\") align 8 %0, %\"class.std::__cxx11::basic_string\"* nocapture readonly %1, %\"class.std::__cxx11::basic_string\"* nocapture readonly %2) local_unnamed_addr #0 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {\n  %4 = alloca i64, align 8\n  %5 = alloca i64, align 8\n  %6 = alloca i64, align 8\n  %7 = alloca i64, align 8\n  %8 = alloca %\"class.std::__cxx11::basic_string\", align 8\n  %9 = alloca %\"class.std::__cxx11::basic_string\", align 8\n  %10 = alloca [2 x %\"class.std::__cxx11::basic_string\"], align 8\n  %11 = alloca %\"class.std::__cxx11::basic_string\", align 8\n  %12 = alloca [2 x %\"class.std::__cxx11::basic_string\"], align 8\n  %13 = alloca [2 x %\"class.std::__cxx11::basic_string\"], align 8\n  %14 = bitcast %\"class.std::__cxx11::basic_string\"* %8 to i8*\n  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %14) #10\n  %15 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %8, i64 0, i32 2\n  %16 = bitcast %\"class.std::__cxx11::basic_string\"* %8 to %union.anon**\n  store %union.anon* %15, %union.anon** %16, align 8, !tbaa !3\n  %17 = bitcast %union.anon* %15 to i8*\n  %18 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %8, i64 0, i32 0, i32 0\n  %19 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %8, i64 0, i32 1\n  store i64 0, i64* %19, align 8, !tbaa !8\n  store i8 0, i8* %17, align 8, !tbaa !11\n  %20 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %1, i64 0, i32 1\n  %21 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %2, i64 0, i32 0, i32 0\n  %22 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %2, i64 0, i32 1\n  %23 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %1, i64 0, i32 0, i32 0\n  %24 = bitcast %\"class.std::__cxx11::basic_string\"* %9 to i8*\n  %25 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %9, i64 0, i32 2\n  %26 = bitcast %\"class.std::__cxx11::basic_string\"* %9 to %union.anon**\n  %27 = bitcast i64* %7 to i8*\n  %28 = bitcast %union.anon* %25 to i8*\n  %29 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %9, i64 0, i32 0, i32 0\n  %30 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %9, i64 0, i32 2, i32 0\n  %31 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %9, i64 0, i32 1\n  %32 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %8, i64 0, i32 2, i32 0\n  %33 = load i64, i64* %20, align 8, !tbaa !8\n  %34 = icmp eq i64 %33, 0\n  br i1 %34, label %179, label %35\n\n35:                                               ; preds = %3\n  %36 = bitcast i64* %31 to <2 x i64>*\n  %37 = bitcast i64* %19 to <2 x i64>*\n  br label %41\n\n38:                                               ; preds = %175\n  %39 = load i64, i64* %19, align 8, !tbaa !8\n  %40 = icmp eq i64 %39, 0\n  br i1 %40, label %179, label %235\n\n41:                                               ; preds = %35, %175\n  %42 = phi i64 [ %176, %175 ], [ %33, %35 ]\n  %43 = phi i64 [ %177, %175 ], [ 0, %35 ]\n  %44 = load i8*, i8** %21, align 8, !tbaa !12\n  %45 = load i64, i64* %22, align 8, !tbaa !8\n  %46 = getelementptr inbounds i8, i8* %44, i64 %45\n  %47 = load i8*, i8** %23, align 8, !tbaa !12\n  %48 = getelementptr inbounds i8, i8* %47, i64 %43\n  %49 = ptrtoint i8* %46 to i64\n  %50 = icmp sgt i64 %45, 3\n  br i1 %50, label %51, label %75\n\n51:                                               ; preds = %41\n  %52 = lshr i64 %45, 2\n  %53 = load i8, i8* %48, align 1, !tbaa !11\n  br label %54\n\n54:                                               ; preds = %71, %51\n  %55 = phi i64 [ %52, %51 ], [ %73, %71 ]\n  %56 = phi i8* [ %44, %51 ], [ %72, %71 ]\n  %57 = load i8, i8* %56, align 1, !tbaa !11\n  %58 = icmp eq i8 %57, %53\n  br i1 %58, label %109, label %59\n\n59:                                               ; preds = %54\n  %60 = getelementptr inbounds i8, i8* %56, i64 1\n  %61 = load i8, i8* %60, align 1, !tbaa !11\n  %62 = icmp eq i8 %61, %53\n  br i1 %62, label %107, label %63\n\n63:                                               ; preds = %59\n  %64 = getelementptr inbounds i8, i8* %56, i64 2\n  %65 = load i8, i8* %64, align 1, !tbaa !11\n  %66 = icmp eq i8 %65, %53\n  br i1 %66, label %105, label %67\n\n67:                                               ; preds = %63\n  %68 = getelementptr inbounds i8, i8* %56, i64 3\n  %69 = load i8, i8* %68, align 1, !tbaa !11\n  %70 = icmp eq i8 %69, %53\n  br i1 %70, label %103, label %71\n\n71:                                               ; preds = %67\n  %72 = getelementptr inbounds i8, i8* %56, i64 4\n  %73 = add nsw i64 %55, -1\n  %74 = icmp sgt i64 %55, 1\n  br i1 %74, label %54, label %75, !llvm.loop !13\n\n75:                                               ; preds = %71, %41\n  %76 = phi i8* [ %44, %41 ], [ %72, %71 ]\n  %77 = ptrtoint i8* %76 to i64\n  %78 = sub i64 %49, %77\n  switch i64 %78, label %79 [\n    i64 3, label %85\n    i64 2, label %83\n    i64 1, label %81\n  ]\n\n79:                                               ; preds = %75\n  %80 = load i8, i8* %48, align 1, !tbaa !11\n  br label %113\n\n81:                                               ; preds = %75\n  %82 = load i8, i8* %48, align 1, !tbaa !11\n  br label %98\n\n83:                                               ; preds = %75\n  %84 = load i8, i8* %48, align 1, !tbaa !11\n  br label %91\n\n85:                                               ; preds = %75\n  %86 = load i8, i8* %76, align 1, !tbaa !11\n  %87 = load i8, i8* %48, align 1, !tbaa !11\n  %88 = icmp eq i8 %86, %87\n  br i1 %88, label %109, label %89\n\n89:                                               ; preds = %85\n  %90 = getelementptr inbounds i8, i8* %76, i64 1\n  br label %91\n\n91:                                               ; preds = %89, %83\n  %92 = phi i8 [ %84, %83 ], [ %87, %89 ]\n  %93 = phi i8* [ %76, %83 ], [ %90, %89 ]\n  %94 = load i8, i8* %93, align 1, !tbaa !11\n  %95 = icmp eq i8 %94, %92\n  br i1 %95, label %109, label %96\n\n96:                                               ; preds = %91\n  %97 = getelementptr inbounds i8, i8* %93, i64 1\n  br label %98\n\n98:                                               ; preds = %96, %81\n  %99 = phi i8 [ %82, %81 ], [ %92, %96 ]\n  %100 = phi i8* [ %76, %81 ], [ %97, %96 ]\n  %101 = load i8, i8* %100, align 1, !tbaa !11\n  %102 = icmp eq i8 %101, %99\n  br i1 %102, label %109, label %113\n\n103:                                              ; preds = %67\n  %104 = getelementptr inbounds i8, i8* %56, i64 3\n  br label %109\n\n105:                                              ; preds = %63\n  %106 = getelementptr inbounds i8, i8* %56, i64 2\n  br label %109\n\n107:                                              ; preds = %59\n  %108 = getelementptr inbounds i8, i8* %56, i64 1\n  br label %109\n\n109:                                              ; preds = %54, %103, %105, %107, %98, %91, %85\n  %110 = phi i8 [ %86, %85 ], [ %92, %91 ], [ %99, %98 ], [ %53, %107 ], [ %53, %105 ], [ %53, %103 ], [ %53, %54 ]\n  %111 = phi i8* [ %76, %85 ], [ %93, %91 ], [ %100, %98 ], [ %108, %107 ], [ %106, %105 ], [ %104, %103 ], [ %56, %54 ]\n  %112 = icmp eq i8* %111, %46\n  br i1 %112, label %113, label %175\n\n113:                                              ; preds = %79, %98, %109\n  %114 = phi i8 [ %80, %79 ], [ %99, %98 ], [ %110, %109 ]\n  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %24) #10\n  call void @llvm.experimental.noalias.scope.decl(metadata !15)\n  store %union.anon* %25, %union.anon** %26, align 8, !tbaa !3, !alias.scope !15\n  %115 = load i8*, i8** %18, align 8, !tbaa !12, !noalias !15\n  %116 = load i64, i64* %19, align 8, !tbaa !8, !noalias !15\n  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %27) #10, !noalias !15\n  store i64 %116, i64* %7, align 8, !tbaa !18, !noalias !15\n  %117 = icmp ugt i64 %116, 15\n  br i1 %117, label %118, label %122\n\n118:                                              ; preds = %113\n  %119 = invoke i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %9, i64* nonnull align 8 dereferenceable(8) %7, i64 0)\n          to label %120 unwind label %171\n\n120:                                              ; preds = %118\n  store i8* %119, i8** %29, align 8, !tbaa !12, !alias.scope !15\n  %121 = load i64, i64* %7, align 8, !tbaa !18, !noalias !15\n  store i64 %121, i64* %30, align 8, !tbaa !11, !alias.scope !15\n  br label %122\n\n122:                                              ; preds = %113, %120\n  %123 = phi i8* [ %119, %120 ], [ %28, %113 ]\n  switch i64 %116, label %126 [\n    i64 1, label %124\n    i64 0, label %127\n  ]\n\n124:                                              ; preds = %122\n  %125 = load i8, i8* %115, align 1, !tbaa !11\n  store i8 %125, i8* %123, align 1, !tbaa !11\n  br label %127\n\n126:                                              ; preds = %122\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %123, i8* align 1 %115, i64 %116, i1 false) #10\n  br label %127\n\n127:                                              ; preds = %126, %124, %122\n  %128 = load i64, i64* %7, align 8, !tbaa !18, !noalias !15\n  store i64 %128, i64* %31, align 8, !tbaa !8, !alias.scope !15\n  %129 = load i8*, i8** %29, align 8, !tbaa !12, !alias.scope !15\n  %130 = getelementptr inbounds i8, i8* %129, i64 %128\n  store i8 0, i8* %130, align 1, !tbaa !11\n  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %27) #10, !noalias !15\n  %131 = load i64, i64* %31, align 8, !tbaa !8, !alias.scope !15\n  %132 = invoke nonnull align 8 dereferenceable(32) %\"class.std::__cxx11::basic_string\"* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEmmmc(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %9, i64 %131, i64 0, i64 1, i8 signext %114)\n          to label %138 unwind label %133\n\n133:                                              ; preds = %127\n  %134 = landingpad { i8*, i32 }\n          cleanup\n  %135 = load i8*, i8** %29, align 8, !tbaa !12, !alias.scope !15\n  %136 = icmp eq i8* %135, %28\n  br i1 %136, label %173, label %137\n\n137:                                              ; preds = %133\n  call void @_ZdlPv(i8* %135) #10\n  br label %173\n\n138:                                              ; preds = %127\n  %139 = load i8*, i8** %29, align 8, !tbaa !12\n  %140 = icmp eq i8* %139, %28\n  br i1 %140, label %141, label %155\n\n141:                                              ; preds = %138\n  %142 = load i64, i64* %31, align 8, !tbaa !8\n  %143 = icmp eq i64 %142, 0\n  br i1 %143, label %150, label %144\n\n144:                                              ; preds = %141\n  %145 = load i8*, i8** %18, align 8, !tbaa !12\n  %146 = icmp eq i64 %142, 1\n  br i1 %146, label %147, label %149\n\n147:                                              ; preds = %144\n  %148 = load i8, i8* %28, align 8, !tbaa !11\n  store i8 %148, i8* %145, align 1, !tbaa !11\n  br label %150\n\n149:                                              ; preds = %144\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %145, i8* nonnull align 8 %28, i64 %142, i1 false) #10\n  br label %150\n\n150:                                              ; preds = %149, %147, %141\n  %151 = load i64, i64* %31, align 8, !tbaa !8\n  store i64 %151, i64* %19, align 8, !tbaa !8\n  %152 = load i8*, i8** %18, align 8, !tbaa !12\n  %153 = getelementptr inbounds i8, i8* %152, i64 %151\n  store i8 0, i8* %153, align 1, !tbaa !11\n  %154 = load i8*, i8** %29, align 8, !tbaa !12\n  br label %164\n\n155:                                              ; preds = %138\n  %156 = load i8*, i8** %18, align 8, !tbaa !12\n  %157 = icmp eq i8* %156, %17\n  %158 = load i64, i64* %32, align 8\n  store i8* %139, i8** %18, align 8, !tbaa !12\n  %159 = load <2 x i64>, <2 x i64>* %36, align 8, !tbaa !11\n  store <2 x i64> %159, <2 x i64>* %37, align 8, !tbaa !11\n  %160 = icmp eq i8* %156, null\n  %161 = or i1 %157, %160\n  br i1 %161, label %163, label %162\n\n162:                                              ; preds = %155\n  store i8* %156, i8** %29, align 8, !tbaa !12\n  store i64 %158, i64* %30, align 8, !tbaa !11\n  br label %164\n\n163:                                              ; preds = %155\n  store %union.anon* %25, %union.anon** %26, align 8, !tbaa !12\n  br label %164\n\n164:                                              ; preds = %150, %162, %163\n  %165 = phi i8* [ %154, %150 ], [ %156, %162 ], [ %28, %163 ]\n  store i64 0, i64* %31, align 8, !tbaa !8\n  store i8 0, i8* %165, align 1, !tbaa !11\n  %166 = load i8*, i8** %29, align 8, !tbaa !12\n  %167 = icmp eq i8* %166, %28\n  br i1 %167, label %169, label %168\n\n168:                                              ; preds = %164\n  call void @_ZdlPv(i8* %166) #10\n  br label %169\n\n169:                                              ; preds = %164, %168\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %24) #10\n  %170 = load i64, i64* %20, align 8, !tbaa !8\n  br label %175\n\n171:                                              ; preds = %118\n  %172 = landingpad { i8*, i32 }\n          cleanup\n  br label %173\n\n173:                                              ; preds = %133, %137, %171\n  %174 = phi { i8*, i32 } [ %172, %171 ], [ %134, %137 ], [ %134, %133 ]\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %24) #10\n  br label %556\n\n175:                                              ; preds = %109, %169\n  %176 = phi i64 [ %42, %109 ], [ %170, %169 ]\n  %177 = add nuw i64 %43, 1\n  %178 = icmp ugt i64 %176, %177\n  br i1 %178, label %41, label %38, !llvm.loop !19\n\n179:                                              ; preds = %3, %38\n  %180 = bitcast [2 x %\"class.std::__cxx11::basic_string\"]* %10 to i8*\n  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %180) #10\n  %181 = getelementptr inbounds [2 x %\"class.std::__cxx11::basic_string\"], [2 x %\"class.std::__cxx11::basic_string\"]* %10, i64 0, i64 0, i32 2\n  %182 = bitcast [2 x %\"class.std::__cxx11::basic_string\"]* %10 to %union.anon**\n  store %union.anon* %181, %union.anon** %182, align 8, !tbaa !3\n  %183 = getelementptr inbounds [2 x %\"class.std::__cxx11::basic_string\"], [2 x %\"class.std::__cxx11::basic_string\"]* %10, i64 0, i64 0, i32 1\n  store i64 0, i64* %183, align 8, !tbaa !8\n  %184 = bitcast %union.anon* %181 to i8*\n  store i8 0, i8* %184, align 8, !tbaa !11\n  %185 = getelementptr inbounds [2 x %\"class.std::__cxx11::basic_string\"], [2 x %\"class.std::__cxx11::basic_string\"]* %10, i64 0, i64 1\n  %186 = getelementptr inbounds [2 x %\"class.std::__cxx11::basic_string\"], [2 x %\"class.std::__cxx11::basic_string\"]* %10, i64 0, i64 1, i32 2\n  %187 = bitcast %\"class.std::__cxx11::basic_string\"* %185 to %union.anon**\n  store %union.anon* %186, %union.anon** %187, align 8, !tbaa !3\n  %188 = bitcast %union.anon* %186 to i32*\n  store i32 1702195796, i32* %188, align 8\n  %189 = getelementptr inbounds [2 x %\"class.std::__cxx11::basic_string\"], [2 x %\"class.std::__cxx11::basic_string\"]* %10, i64 0, i64 1, i32 1\n  store i64 4, i64* %189, align 8, !tbaa !8\n  %190 = bitcast %union.anon* %186 to i8*\n  %191 = getelementptr inbounds i8, i8* %190, i64 4\n  store i8 0, i8* %191, align 4, !tbaa !11\n  %192 = bitcast %\"class.std::vector\"* %0 to i8*\n  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(24) %192, i8 0, i64 24, i1 false) #10\n  %193 = invoke noalias nonnull i8* @_Znwm(i64 64) #11\n          to label %196 unwind label %194\n\n194:                                              ; preds = %179\n  %195 = landingpad { i8*, i32 }\n          cleanup\n  br label %221\n\n196:                                              ; preds = %179\n  %197 = getelementptr inbounds [2 x %\"class.std::__cxx11::basic_string\"], [2 x %\"class.std::__cxx11::basic_string\"]* %10, i64 0, i64 0\n  %198 = getelementptr inbounds [2 x %\"class.std::__cxx11::basic_string\"], [2 x %\"class.std::__cxx11::basic_string\"]* %10, i64 0, i64 2\n  %199 = bitcast i8* %193 to %\"class.std::__cxx11::basic_string\"*\n  %200 = bitcast %\"class.std::vector\"* %0 to i8**\n  store i8* %193, i8** %200, align 8, !tbaa !20\n  %201 = getelementptr inbounds i8, i8* %193, i64 64\n  %202 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0, i64 0, i32 0, i32 0, i32 0, i32 2\n  %203 = bitcast %\"class.std::__cxx11::basic_string\"** %202 to i8**\n  store i8* %201, i8** %203, align 8, !tbaa !22\n  %204 = invoke %\"class.std::__cxx11::basic_string\"* @_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPS7_EET0_T_SC_SB_(%\"class.std::__cxx11::basic_string\"* nonnull %197, %\"class.std::__cxx11::basic_string\"* nonnull %198, %\"class.std::__cxx11::basic_string\"* nonnull %199)\n          to label %207 unwind label %205\n\n205:                                              ; preds = %196\n  %206 = landingpad { i8*, i32 }\n          cleanup\n  call void @_ZdlPv(i8* nonnull %193) #10\n  br label %221\n\n207:                                              ; preds = %196\n  %208 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0, i64 0, i32 0, i32 0, i32 0, i32 1\n  store %\"class.std::__cxx11::basic_string\"* %204, %\"class.std::__cxx11::basic_string\"** %208, align 8, !tbaa !23\n  %209 = getelementptr inbounds [2 x %\"class.std::__cxx11::basic_string\"], [2 x %\"class.std::__cxx11::basic_string\"]* %10, i64 0, i64 1, i32 0, i32 0\n  %210 = load i8*, i8** %209, align 8, !tbaa !12\n  %211 = getelementptr inbounds [2 x %\"class.std::__cxx11::basic_string\"], [2 x %\"class.std::__cxx11::basic_string\"]* %10, i64 0, i64 1, i32 2\n  %212 = bitcast %union.anon* %211 to i8*\n  %213 = icmp eq i8* %210, %212\n  br i1 %213, label %215, label %214\n\n214:                                              ; preds = %207\n  call void @_ZdlPv(i8* %210) #10\n  br label %215\n\n215:                                              ; preds = %207, %214\n  %216 = getelementptr inbounds [2 x %\"class.std::__cxx11::basic_string\"], [2 x %\"class.std::__cxx11::basic_string\"]* %10, i64 0, i64 0, i32 0, i32 0\n  %217 = load i8*, i8** %216, align 8, !tbaa !12\n  %218 = getelementptr inbounds [2 x %\"class.std::__cxx11::basic_string\"], [2 x %\"class.std::__cxx11::basic_string\"]* %10, i64 0, i64 0, i32 2\n  %219 = bitcast %union.anon* %218 to i8*\n  %220 = icmp eq i8* %217, %219\n  br i1 %220, label %571, label %570\n\n221:                                              ; preds = %194, %205\n  %222 = phi { i8*, i32 } [ %195, %194 ], [ %206, %205 ]\n  %223 = getelementptr inbounds [2 x %\"class.std::__cxx11::basic_string\"], [2 x %\"class.std::__cxx11::basic_string\"]* %10, i64 0, i64 1, i32 0, i32 0\n  %224 = load i8*, i8** %223, align 8, !tbaa !12\n  %225 = getelementptr inbounds [2 x %\"class.std::__cxx11::basic_string\"], [2 x %\"class.std::__cxx11::basic_string\"]* %10, i64 0, i64 1, i32 2\n  %226 = bitcast %union.anon* %225 to i8*\n  %227 = icmp eq i8* %224, %226\n  br i1 %227, label %229, label %228\n\n228:                                              ; preds = %221\n  call void @_ZdlPv(i8* %224) #10\n  br label %229\n\n229:                                              ; preds = %221, %228\n  %230 = getelementptr inbounds [2 x %\"class.std::__cxx11::basic_string\"], [2 x %\"class.std::__cxx11::basic_string\"]* %10, i64 0, i64 0, i32 0, i32 0\n  %231 = load i8*, i8** %230, align 8, !tbaa !12\n  %232 = getelementptr inbounds [2 x %\"class.std::__cxx11::basic_string\"], [2 x %\"class.std::__cxx11::basic_string\"]* %10, i64 0, i64 0, i32 2\n  %233 = bitcast %union.anon* %232 to i8*\n  %234 = icmp eq i8* %231, %233\n  br i1 %234, label %569, label %568\n\n235:                                              ; preds = %38\n  %236 = bitcast %\"class.std::__cxx11::basic_string\"* %11 to i8*\n  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %236) #10\n  %237 = load i8*, i8** %18, align 8, !tbaa !12, !noalias !24\n  %238 = ptrtoint i8* %237 to i64\n  %239 = getelementptr inbounds i8, i8* %237, i64 %39\n  %240 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %11, i64 0, i32 2\n  %241 = bitcast %\"class.std::__cxx11::basic_string\"* %11 to %union.anon**\n  store %union.anon* %240, %union.anon** %241, align 8, !tbaa !3\n  %242 = bitcast i64* %6 to i8*\n  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %242) #10\n  store i64 %39, i64* %6, align 8, !tbaa !18\n  %243 = icmp ugt i64 %39, 15\n  br i1 %243, label %246, label %244\n\n244:                                              ; preds = %235\n  %245 = bitcast %union.anon* %240 to i8*\n  br label %252\n\n246:                                              ; preds = %235\n  %247 = invoke i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %11, i64* nonnull align 8 dereferenceable(8) %6, i64 0)\n          to label %248 unwind label %438\n\n248:                                              ; preds = %246\n  %249 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %11, i64 0, i32 0, i32 0\n  store i8* %247, i8** %249, align 8, !tbaa !12\n  %250 = load i64, i64* %6, align 8, !tbaa !18\n  %251 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %11, i64 0, i32 2, i32 0\n  store i64 %250, i64* %251, align 8, !tbaa !11\n  br label %252\n\n252:                                              ; preds = %248, %244\n  %253 = phi i8* [ %245, %244 ], [ %247, %248 ]\n  %254 = icmp ult i64 %39, 4\n  br i1 %254, label %309, label %255\n\n255:                                              ; preds = %252\n  %256 = getelementptr i8, i8* %253, i64 %39\n  %257 = icmp ult i8* %253, %239\n  %258 = icmp ult i8* %237, %256\n  %259 = and i1 %257, %258\n  br i1 %259, label %309, label %260\n\n260:                                              ; preds = %255\n  %261 = icmp ult i64 %39, 32\n  br i1 %261, label %290, label %262\n\n262:                                              ; preds = %260\n  %263 = and i64 %39, -32\n  br label %264\n\n264:                                              ; preds = %264, %262\n  %265 = phi i64 [ 0, %262 ], [ %280, %264 ]\n  %266 = getelementptr i8, i8* %253, i64 %265\n  %267 = xor i64 %265, -1\n  %268 = getelementptr i8, i8* %239, i64 %267\n  %269 = getelementptr inbounds i8, i8* %268, i64 -15\n  %270 = bitcast i8* %269 to <16 x i8>*\n  %271 = load <16 x i8>, <16 x i8>* %270, align 1, !tbaa !11, !alias.scope !27\n  %272 = shufflevector <16 x i8> %271, <16 x i8> poison, <16 x i32> <i32 15, i32 14, i32 13, i32 12, i32 11, i32 10, i32 9, i32 8, i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0>\n  %273 = getelementptr inbounds i8, i8* %268, i64 -31\n  %274 = bitcast i8* %273 to <16 x i8>*\n  %275 = load <16 x i8>, <16 x i8>* %274, align 1, !tbaa !11, !alias.scope !27\n  %276 = shufflevector <16 x i8> %275, <16 x i8> poison, <16 x i32> <i32 15, i32 14, i32 13, i32 12, i32 11, i32 10, i32 9, i32 8, i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0>\n  %277 = bitcast i8* %266 to <16 x i8>*\n  store <16 x i8> %272, <16 x i8>* %277, align 1, !tbaa !11, !alias.scope !30, !noalias !27\n  %278 = getelementptr i8, i8* %266, i64 16\n  %279 = bitcast i8* %278 to <16 x i8>*\n  store <16 x i8> %276, <16 x i8>* %279, align 1, !tbaa !11, !alias.scope !30, !noalias !27\n  %280 = add nuw i64 %265, 32\n  %281 = icmp eq i64 %280, %263\n  br i1 %281, label %282, label %264, !llvm.loop !32\n\n282:                                              ; preds = %264\n  %283 = icmp eq i64 %39, %263\n  br i1 %283, label %359, label %284\n\n284:                                              ; preds = %282\n  %285 = getelementptr i8, i8* %253, i64 %263\n  %286 = sub i64 0, %263\n  %287 = getelementptr i8, i8* %239, i64 %286\n  %288 = and i64 %39, 28\n  %289 = icmp eq i64 %288, 0\n  br i1 %289, label %309, label %290\n\n290:                                              ; preds = %260, %284\n  %291 = phi i64 [ %263, %284 ], [ 0, %260 ]\n  %292 = and i64 %39, -4\n  %293 = sub i64 0, %292\n  %294 = getelementptr i8, i8* %239, i64 %293\n  %295 = getelementptr i8, i8* %253, i64 %292\n  br label %296\n\n296:                                              ; preds = %296, %290\n  %297 = phi i64 [ %291, %290 ], [ %305, %296 ]\n  %298 = getelementptr i8, i8* %253, i64 %297\n  %299 = sub nuw nsw i64 -4, %297\n  %300 = getelementptr i8, i8* %239, i64 %299\n  %301 = bitcast i8* %300 to <4 x i8>*\n  %302 = load <4 x i8>, <4 x i8>* %301, align 1, !tbaa !11\n  %303 = shufflevector <4 x i8> %302, <4 x i8> poison, <4 x i32> <i32 3, i32 2, i32 1, i32 0>\n  %304 = bitcast i8* %298 to <4 x i8>*\n  store <4 x i8> %303, <4 x i8>* %304, align 1, !tbaa !11\n  %305 = add nuw i64 %297, 4\n  %306 = icmp eq i64 %305, %292\n  br i1 %306, label %307, label %296, !llvm.loop !34\n\n307:                                              ; preds = %296\n  %308 = icmp eq i64 %39, %292\n  br i1 %308, label %359, label %309\n\n309:                                              ; preds = %255, %252, %284, %307\n  %310 = phi i8* [ %239, %252 ], [ %239, %255 ], [ %287, %284 ], [ %294, %307 ]\n  %311 = phi i8* [ %253, %252 ], [ %253, %255 ], [ %285, %284 ], [ %295, %307 ]\n  %312 = ptrtoint i8* %310 to i64\n  %313 = sub i64 %312, %238\n  %314 = xor i64 %238, -1\n  %315 = add i64 %314, %312\n  %316 = and i64 %313, 7\n  %317 = icmp eq i64 %316, 0\n  br i1 %317, label %327, label %318\n\n318:                                              ; preds = %309, %318\n  %319 = phi i8* [ %322, %318 ], [ %310, %309 ]\n  %320 = phi i8* [ %324, %318 ], [ %311, %309 ]\n  %321 = phi i64 [ %325, %318 ], [ %316, %309 ]\n  %322 = getelementptr inbounds i8, i8* %319, i64 -1\n  %323 = load i8, i8* %322, align 1, !tbaa !11\n  store i8 %323, i8* %320, align 1, !tbaa !11\n  %324 = getelementptr inbounds i8, i8* %320, i64 1\n  %325 = add i64 %321, -1\n  %326 = icmp eq i64 %325, 0\n  br i1 %326, label %327, label %318, !llvm.loop !35\n\n327:                                              ; preds = %318, %309\n  %328 = phi i8* [ %310, %309 ], [ %322, %318 ]\n  %329 = phi i8* [ %311, %309 ], [ %324, %318 ]\n  %330 = icmp ult i64 %315, 7\n  br i1 %330, label %359, label %331\n\n331:                                              ; preds = %327, %331\n  %332 = phi i8* [ %355, %331 ], [ %328, %327 ]\n  %333 = phi i8* [ %357, %331 ], [ %329, %327 ]\n  %334 = getelementptr inbounds i8, i8* %332, i64 -1\n  %335 = load i8, i8* %334, align 1, !tbaa !11\n  store i8 %335, i8* %333, align 1, !tbaa !11\n  %336 = getelementptr inbounds i8, i8* %333, i64 1\n  %337 = getelementptr inbounds i8, i8* %332, i64 -2\n  %338 = load i8, i8* %337, align 1, !tbaa !11\n  store i8 %338, i8* %336, align 1, !tbaa !11\n  %339 = getelementptr inbounds i8, i8* %333, i64 2\n  %340 = getelementptr inbounds i8, i8* %332, i64 -3\n  %341 = load i8, i8* %340, align 1, !tbaa !11\n  store i8 %341, i8* %339, align 1, !tbaa !11\n  %342 = getelementptr inbounds i8, i8* %333, i64 3\n  %343 = getelementptr inbounds i8, i8* %332, i64 -4\n  %344 = load i8, i8* %343, align 1, !tbaa !11\n  store i8 %344, i8* %342, align 1, !tbaa !11\n  %345 = getelementptr inbounds i8, i8* %333, i64 4\n  %346 = getelementptr inbounds i8, i8* %332, i64 -5\n  %347 = load i8, i8* %346, align 1, !tbaa !11\n  store i8 %347, i8* %345, align 1, !tbaa !11\n  %348 = getelementptr inbounds i8, i8* %333, i64 5\n  %349 = getelementptr inbounds i8, i8* %332, i64 -6\n  %350 = load i8, i8* %349, align 1, !tbaa !11\n  store i8 %350, i8* %348, align 1, !tbaa !11\n  %351 = getelementptr inbounds i8, i8* %333, i64 6\n  %352 = getelementptr inbounds i8, i8* %332, i64 -7\n  %353 = load i8, i8* %352, align 1, !tbaa !11\n  store i8 %353, i8* %351, align 1, !tbaa !11\n  %354 = getelementptr inbounds i8, i8* %333, i64 7\n  %355 = getelementptr inbounds i8, i8* %332, i64 -8\n  %356 = load i8, i8* %355, align 1, !tbaa !11\n  store i8 %356, i8* %354, align 1, !tbaa !11\n  %357 = getelementptr inbounds i8, i8* %333, i64 8\n  %358 = icmp eq i8* %355, %237\n  br i1 %358, label %359, label %331, !llvm.loop !37\n\n359:                                              ; preds = %327, %331, %307, %282\n  %360 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %11, i64 0, i32 0, i32 0\n  %361 = load i64, i64* %6, align 8, !tbaa !18\n  %362 = load i8*, i8** %360, align 8, !tbaa !12\n  %363 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %11, i64 0, i32 1\n  store i64 %361, i64* %363, align 8, !tbaa !8\n  %364 = getelementptr inbounds i8, i8* %362, i64 %361\n  store i8 0, i8* %364, align 1, !tbaa !11\n  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %242) #10\n  %365 = load i64, i64* %363, align 8, !tbaa !8\n  %366 = load i64, i64* %19, align 8, !tbaa !8\n  %367 = icmp eq i64 %365, %366\n  br i1 %367, label %370, label %368\n\n368:                                              ; preds = %359\n  %369 = load i8*, i8** %18, align 8, !tbaa !12\n  br label %458\n\n370:                                              ; preds = %359\n  %371 = icmp eq i64 %365, 0\n  %372 = load i8*, i8** %18, align 8, !tbaa !12\n  br i1 %371, label %377, label %373\n\n373:                                              ; preds = %370\n  %374 = load i8*, i8** %360, align 8, !tbaa !12\n  %375 = call i32 @bcmp(i8* %374, i8* %372, i64 %365) #10\n  %376 = icmp eq i32 %375, 0\n  br i1 %376, label %377, label %458\n\n377:                                              ; preds = %370, %373\n  %378 = bitcast [2 x %\"class.std::__cxx11::basic_string\"]* %12 to i8*\n  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %378) #10\n  %379 = getelementptr inbounds [2 x %\"class.std::__cxx11::basic_string\"], [2 x %\"class.std::__cxx11::basic_string\"]* %12, i64 0, i64 0\n  %380 = getelementptr inbounds [2 x %\"class.std::__cxx11::basic_string\"], [2 x %\"class.std::__cxx11::basic_string\"]* %12, i64 0, i64 0, i32 2\n  %381 = bitcast [2 x %\"class.std::__cxx11::basic_string\"]* %12 to %union.anon**\n  store %union.anon* %380, %union.anon** %381, align 8, !tbaa !3\n  %382 = bitcast i64* %5 to i8*\n  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %382) #10\n  store i64 %365, i64* %5, align 8, !tbaa !18\n  %383 = icmp ugt i64 %365, 15\n  br i1 %383, label %386, label %384\n\n384:                                              ; preds = %377\n  %385 = bitcast %union.anon* %380 to i8*\n  br label %392\n\n386:                                              ; preds = %377\n  %387 = invoke i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %379, i64* nonnull align 8 dereferenceable(8) %5, i64 0)\n          to label %388 unwind label %440\n\n388:                                              ; preds = %386\n  %389 = getelementptr inbounds [2 x %\"class.std::__cxx11::basic_string\"], [2 x %\"class.std::__cxx11::basic_string\"]* %12, i64 0, i64 0, i32 0, i32 0\n  store i8* %387, i8** %389, align 8, !tbaa !12\n  %390 = load i64, i64* %5, align 8, !tbaa !18\n  %391 = getelementptr inbounds [2 x %\"class.std::__cxx11::basic_string\"], [2 x %\"class.std::__cxx11::basic_string\"]* %12, i64 0, i64 0, i32 2, i32 0\n  store i64 %390, i64* %391, align 8, !tbaa !11\n  br label %392\n\n392:                                              ; preds = %388, %384\n  %393 = phi i8* [ %385, %384 ], [ %387, %388 ]\n  switch i64 %365, label %396 [\n    i64 1, label %394\n    i64 0, label %397\n  ]\n\n394:                                              ; preds = %392\n  %395 = load i8, i8* %372, align 1, !tbaa !11\n  store i8 %395, i8* %393, align 1, !tbaa !11\n  br label %397\n\n396:                                              ; preds = %392\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %393, i8* align 1 %372, i64 %365, i1 false) #10\n  br label %397\n\n397:                                              ; preds = %396, %394, %392\n  %398 = getelementptr inbounds [2 x %\"class.std::__cxx11::basic_string\"], [2 x %\"class.std::__cxx11::basic_string\"]* %12, i64 0, i64 0, i32 0, i32 0\n  %399 = load i64, i64* %5, align 8, !tbaa !18\n  %400 = getelementptr inbounds [2 x %\"class.std::__cxx11::basic_string\"], [2 x %\"class.std::__cxx11::basic_string\"]* %12, i64 0, i64 0, i32 1\n  store i64 %399, i64* %400, align 8, !tbaa !8\n  %401 = load i8*, i8** %398, align 8, !tbaa !12\n  %402 = getelementptr inbounds i8, i8* %401, i64 %399\n  store i8 0, i8* %402, align 1, !tbaa !11\n  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %382) #10\n  %403 = getelementptr inbounds [2 x %\"class.std::__cxx11::basic_string\"], [2 x %\"class.std::__cxx11::basic_string\"]* %12, i64 0, i64 1\n  %404 = getelementptr inbounds [2 x %\"class.std::__cxx11::basic_string\"], [2 x %\"class.std::__cxx11::basic_string\"]* %12, i64 0, i64 1, i32 2\n  %405 = bitcast %\"class.std::__cxx11::basic_string\"* %403 to %union.anon**\n  store %union.anon* %404, %union.anon** %405, align 8, !tbaa !3\n  %406 = bitcast %union.anon* %404 to i32*\n  store i32 1702195796, i32* %406, align 8\n  %407 = getelementptr inbounds [2 x %\"class.std::__cxx11::basic_string\"], [2 x %\"class.std::__cxx11::basic_string\"]* %12, i64 0, i64 1, i32 1\n  store i64 4, i64* %407, align 8, !tbaa !8\n  %408 = bitcast %union.anon* %404 to i8*\n  %409 = getelementptr inbounds i8, i8* %408, i64 4\n  store i8 0, i8* %409, align 4, !tbaa !11\n  %410 = bitcast %\"class.std::vector\"* %0 to i8*\n  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(24) %410, i8 0, i64 24, i1 false) #10\n  %411 = invoke noalias nonnull i8* @_Znwm(i64 64) #11\n          to label %414 unwind label %412\n\n412:                                              ; preds = %397\n  %413 = landingpad { i8*, i32 }\n          cleanup\n  br label %442\n\n414:                                              ; preds = %397\n  %415 = getelementptr inbounds [2 x %\"class.std::__cxx11::basic_string\"], [2 x %\"class.std::__cxx11::basic_string\"]* %12, i64 0, i64 2\n  %416 = bitcast i8* %411 to %\"class.std::__cxx11::basic_string\"*\n  %417 = bitcast %\"class.std::vector\"* %0 to i8**\n  store i8* %411, i8** %417, align 8, !tbaa !20\n  %418 = getelementptr inbounds i8, i8* %411, i64 64\n  %419 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0, i64 0, i32 0, i32 0, i32 0, i32 2\n  %420 = bitcast %\"class.std::__cxx11::basic_string\"** %419 to i8**\n  store i8* %418, i8** %420, align 8, !tbaa !22\n  %421 = invoke %\"class.std::__cxx11::basic_string\"* @_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPS7_EET0_T_SC_SB_(%\"class.std::__cxx11::basic_string\"* nonnull %379, %\"class.std::__cxx11::basic_string\"* nonnull %415, %\"class.std::__cxx11::basic_string\"* nonnull %416)\n          to label %424 unwind label %422\n\n422:                                              ; preds = %414\n  %423 = landingpad { i8*, i32 }\n          cleanup\n  call void @_ZdlPv(i8* nonnull %411) #10\n  br label %442\n\n424:                                              ; preds = %414\n  %425 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0, i64 0, i32 0, i32 0, i32 0, i32 1\n  store %\"class.std::__cxx11::basic_string\"* %421, %\"class.std::__cxx11::basic_string\"** %425, align 8, !tbaa !23\n  %426 = getelementptr inbounds [2 x %\"class.std::__cxx11::basic_string\"], [2 x %\"class.std::__cxx11::basic_string\"]* %12, i64 0, i64 1, i32 0, i32 0\n  %427 = load i8*, i8** %426, align 8, !tbaa !12\n  %428 = getelementptr inbounds [2 x %\"class.std::__cxx11::basic_string\"], [2 x %\"class.std::__cxx11::basic_string\"]* %12, i64 0, i64 1, i32 2\n  %429 = bitcast %union.anon* %428 to i8*\n  %430 = icmp eq i8* %427, %429\n  br i1 %430, label %432, label %431\n\n431:                                              ; preds = %424\n  call void @_ZdlPv(i8* %427) #10\n  br label %432\n\n432:                                              ; preds = %424, %431\n  %433 = getelementptr inbounds [2 x %\"class.std::__cxx11::basic_string\"], [2 x %\"class.std::__cxx11::basic_string\"]* %12, i64 0, i64 0, i32 0, i32 0\n  %434 = load i8*, i8** %433, align 8, !tbaa !12\n  %435 = getelementptr inbounds [2 x %\"class.std::__cxx11::basic_string\"], [2 x %\"class.std::__cxx11::basic_string\"]* %12, i64 0, i64 0, i32 2\n  %436 = bitcast %union.anon* %435 to i8*\n  %437 = icmp eq i8* %434, %436\n  br i1 %437, label %567, label %566\n\n438:                                              ; preds = %246\n  %439 = landingpad { i8*, i32 }\n          cleanup\n  br label %549\n\n440:                                              ; preds = %386\n  %441 = landingpad { i8*, i32 }\n          cleanup\n  br label %456\n\n442:                                              ; preds = %412, %422\n  %443 = phi { i8*, i32 } [ %413, %412 ], [ %423, %422 ]\n  %444 = getelementptr inbounds [2 x %\"class.std::__cxx11::basic_string\"], [2 x %\"class.std::__cxx11::basic_string\"]* %12, i64 0, i64 1, i32 0, i32 0\n  %445 = load i8*, i8** %444, align 8, !tbaa !12\n  %446 = getelementptr inbounds [2 x %\"class.std::__cxx11::basic_string\"], [2 x %\"class.std::__cxx11::basic_string\"]* %12, i64 0, i64 1, i32 2\n  %447 = bitcast %union.anon* %446 to i8*\n  %448 = icmp eq i8* %445, %447\n  br i1 %448, label %450, label %449\n\n449:                                              ; preds = %442\n  call void @_ZdlPv(i8* %445) #10\n  br label %450\n\n450:                                              ; preds = %442, %449\n  %451 = getelementptr inbounds [2 x %\"class.std::__cxx11::basic_string\"], [2 x %\"class.std::__cxx11::basic_string\"]* %12, i64 0, i64 0, i32 0, i32 0\n  %452 = load i8*, i8** %451, align 8, !tbaa !12\n  %453 = getelementptr inbounds [2 x %\"class.std::__cxx11::basic_string\"], [2 x %\"class.std::__cxx11::basic_string\"]* %12, i64 0, i64 0, i32 2\n  %454 = bitcast %union.anon* %453 to i8*\n  %455 = icmp eq i8* %452, %454\n  br i1 %455, label %456, label %565\n\n456:                                              ; preds = %450, %565, %440\n  %457 = phi { i8*, i32 } [ %441, %440 ], [ %443, %565 ], [ %443, %450 ]\n  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %378) #10\n  br label %543\n\n458:                                              ; preds = %368, %373\n  %459 = phi i8* [ %369, %368 ], [ %372, %373 ]\n  %460 = bitcast [2 x %\"class.std::__cxx11::basic_string\"]* %13 to i8*\n  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %460) #10\n  %461 = getelementptr inbounds [2 x %\"class.std::__cxx11::basic_string\"], [2 x %\"class.std::__cxx11::basic_string\"]* %13, i64 0, i64 0\n  %462 = getelementptr inbounds [2 x %\"class.std::__cxx11::basic_string\"], [2 x %\"class.std::__cxx11::basic_string\"]* %13, i64 0, i64 0, i32 2\n  %463 = bitcast [2 x %\"class.std::__cxx11::basic_string\"]* %13 to %union.anon**\n  store %union.anon* %462, %union.anon** %463, align 8, !tbaa !3\n  %464 = bitcast i64* %4 to i8*\n  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %464) #10\n  store i64 %366, i64* %4, align 8, !tbaa !18\n  %465 = icmp ugt i64 %366, 15\n  br i1 %465, label %468, label %466\n\n466:                                              ; preds = %458\n  %467 = bitcast %union.anon* %462 to i8*\n  br label %474\n\n468:                                              ; preds = %458\n  %469 = invoke i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %461, i64* nonnull align 8 dereferenceable(8) %4, i64 0)\n          to label %470 unwind label %519\n\n470:                                              ; preds = %468\n  %471 = getelementptr inbounds [2 x %\"class.std::__cxx11::basic_string\"], [2 x %\"class.std::__cxx11::basic_string\"]* %13, i64 0, i64 0, i32 0, i32 0\n  store i8* %469, i8** %471, align 8, !tbaa !12\n  %472 = load i64, i64* %4, align 8, !tbaa !18\n  %473 = getelementptr inbounds [2 x %\"class.std::__cxx11::basic_string\"], [2 x %\"class.std::__cxx11::basic_string\"]* %13, i64 0, i64 0, i32 2, i32 0\n  store i64 %472, i64* %473, align 8, !tbaa !11\n  br label %474\n\n474:                                              ; preds = %470, %466\n  %475 = phi i8* [ %467, %466 ], [ %469, %470 ]\n  switch i64 %366, label %478 [\n    i64 1, label %476\n    i64 0, label %479\n  ]\n\n476:                                              ; preds = %474\n  %477 = load i8, i8* %459, align 1, !tbaa !11\n  store i8 %477, i8* %475, align 1, !tbaa !11\n  br label %479\n\n478:                                              ; preds = %474\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %475, i8* align 1 %459, i64 %366, i1 false) #10\n  br label %479\n\n479:                                              ; preds = %478, %476, %474\n  %480 = getelementptr inbounds [2 x %\"class.std::__cxx11::basic_string\"], [2 x %\"class.std::__cxx11::basic_string\"]* %13, i64 0, i64 0, i32 0, i32 0\n  %481 = load i64, i64* %4, align 8, !tbaa !18\n  %482 = getelementptr inbounds [2 x %\"class.std::__cxx11::basic_string\"], [2 x %\"class.std::__cxx11::basic_string\"]* %13, i64 0, i64 0, i32 1\n  store i64 %481, i64* %482, align 8, !tbaa !8\n  %483 = load i8*, i8** %480, align 8, !tbaa !12\n  %484 = getelementptr inbounds i8, i8* %483, i64 %481\n  store i8 0, i8* %484, align 1, !tbaa !11\n  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %464) #10\n  %485 = getelementptr inbounds [2 x %\"class.std::__cxx11::basic_string\"], [2 x %\"class.std::__cxx11::basic_string\"]* %13, i64 0, i64 1\n  %486 = getelementptr inbounds [2 x %\"class.std::__cxx11::basic_string\"], [2 x %\"class.std::__cxx11::basic_string\"]* %13, i64 0, i64 1, i32 2\n  %487 = bitcast %\"class.std::__cxx11::basic_string\"* %485 to %union.anon**\n  store %union.anon* %486, %union.anon** %487, align 8, !tbaa !3\n  %488 = bitcast %union.anon* %486 to i8*\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(5) %488, i8* noundef nonnull align 1 dereferenceable(5) getelementptr inbounds ([6 x i8], [6 x i8]* @.str.2, i64 0, i64 0), i64 5, i1 false) #10\n  %489 = getelementptr inbounds [2 x %\"class.std::__cxx11::basic_string\"], [2 x %\"class.std::__cxx11::basic_string\"]* %13, i64 0, i64 1, i32 1\n  store i64 5, i64* %489, align 8, !tbaa !8\n  %490 = getelementptr inbounds i8, i8* %488, i64 5\n  store i8 0, i8* %490, align 1, !tbaa !11\n  %491 = bitcast %\"class.std::vector\"* %0 to i8*\n  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(24) %491, i8 0, i64 24, i1 false) #10\n  %492 = invoke noalias nonnull i8* @_Znwm(i64 64) #11\n          to label %495 unwind label %493\n\n493:                                              ; preds = %479\n  %494 = landingpad { i8*, i32 }\n          cleanup\n  br label %521\n\n495:                                              ; preds = %479\n  %496 = getelementptr inbounds [2 x %\"class.std::__cxx11::basic_string\"], [2 x %\"class.std::__cxx11::basic_string\"]* %13, i64 0, i64 2\n  %497 = bitcast i8* %492 to %\"class.std::__cxx11::basic_string\"*\n  %498 = bitcast %\"class.std::vector\"* %0 to i8**\n  store i8* %492, i8** %498, align 8, !tbaa !20\n  %499 = getelementptr inbounds i8, i8* %492, i64 64\n  %500 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0, i64 0, i32 0, i32 0, i32 0, i32 2\n  %501 = bitcast %\"class.std::__cxx11::basic_string\"** %500 to i8**\n  store i8* %499, i8** %501, align 8, !tbaa !22\n  %502 = invoke %\"class.std::__cxx11::basic_string\"* @_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPS7_EET0_T_SC_SB_(%\"class.std::__cxx11::basic_string\"* nonnull %461, %\"class.std::__cxx11::basic_string\"* nonnull %496, %\"class.std::__cxx11::basic_string\"* nonnull %497)\n          to label %505 unwind label %503\n\n503:                                              ; preds = %495\n  %504 = landingpad { i8*, i32 }\n          cleanup\n  call void @_ZdlPv(i8* nonnull %492) #10\n  br label %521\n\n505:                                              ; preds = %495\n  %506 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0, i64 0, i32 0, i32 0, i32 0, i32 1\n  store %\"class.std::__cxx11::basic_string\"* %502, %\"class.std::__cxx11::basic_string\"** %506, align 8, !tbaa !23\n  %507 = getelementptr inbounds [2 x %\"class.std::__cxx11::basic_string\"], [2 x %\"class.std::__cxx11::basic_string\"]* %13, i64 0, i64 1, i32 0, i32 0\n  %508 = load i8*, i8** %507, align 8, !tbaa !12\n  %509 = getelementptr inbounds [2 x %\"class.std::__cxx11::basic_string\"], [2 x %\"class.std::__cxx11::basic_string\"]* %13, i64 0, i64 1, i32 2\n  %510 = bitcast %union.anon* %509 to i8*\n  %511 = icmp eq i8* %508, %510\n  br i1 %511, label %513, label %512\n\n512:                                              ; preds = %505\n  call void @_ZdlPv(i8* %508) #10\n  br label %513\n\n513:                                              ; preds = %505, %512\n  %514 = getelementptr inbounds [2 x %\"class.std::__cxx11::basic_string\"], [2 x %\"class.std::__cxx11::basic_string\"]* %13, i64 0, i64 0, i32 0, i32 0\n  %515 = load i8*, i8** %514, align 8, !tbaa !12\n  %516 = getelementptr inbounds [2 x %\"class.std::__cxx11::basic_string\"], [2 x %\"class.std::__cxx11::basic_string\"]* %13, i64 0, i64 0, i32 2\n  %517 = bitcast %union.anon* %516 to i8*\n  %518 = icmp eq i8* %515, %517\n  br i1 %518, label %564, label %563\n\n519:                                              ; preds = %468\n  %520 = landingpad { i8*, i32 }\n          cleanup\n  br label %535\n\n521:                                              ; preds = %493, %503\n  %522 = phi { i8*, i32 } [ %494, %493 ], [ %504, %503 ]\n  %523 = getelementptr inbounds [2 x %\"class.std::__cxx11::basic_string\"], [2 x %\"class.std::__cxx11::basic_string\"]* %13, i64 0, i64 1, i32 0, i32 0\n  %524 = load i8*, i8** %523, align 8, !tbaa !12\n  %525 = getelementptr inbounds [2 x %\"class.std::__cxx11::basic_string\"], [2 x %\"class.std::__cxx11::basic_string\"]* %13, i64 0, i64 1, i32 2\n  %526 = bitcast %union.anon* %525 to i8*\n  %527 = icmp eq i8* %524, %526\n  br i1 %527, label %529, label %528\n\n528:                                              ; preds = %521\n  call void @_ZdlPv(i8* %524) #10\n  br label %529\n\n529:                                              ; preds = %521, %528\n  %530 = getelementptr inbounds [2 x %\"class.std::__cxx11::basic_string\"], [2 x %\"class.std::__cxx11::basic_string\"]* %13, i64 0, i64 0, i32 0, i32 0\n  %531 = load i8*, i8** %530, align 8, !tbaa !12\n  %532 = getelementptr inbounds [2 x %\"class.std::__cxx11::basic_string\"], [2 x %\"class.std::__cxx11::basic_string\"]* %13, i64 0, i64 0, i32 2\n  %533 = bitcast %union.anon* %532 to i8*\n  %534 = icmp eq i8* %531, %533\n  br i1 %534, label %535, label %562\n\n535:                                              ; preds = %529, %562, %519\n  %536 = phi { i8*, i32 } [ %520, %519 ], [ %522, %562 ], [ %522, %529 ]\n  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %460) #10\n  br label %543\n\n537:                                              ; preds = %564, %567\n  %538 = load i8*, i8** %360, align 8, !tbaa !12\n  %539 = bitcast %union.anon* %240 to i8*\n  %540 = icmp eq i8* %538, %539\n  br i1 %540, label %542, label %541\n\n541:                                              ; preds = %537\n  call void @_ZdlPv(i8* %538) #10\n  br label %542\n\n542:                                              ; preds = %537, %541\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %236) #10\n  br label %551\n\n543:                                              ; preds = %535, %456\n  %544 = phi { i8*, i32 } [ %457, %456 ], [ %536, %535 ]\n  %545 = load i8*, i8** %360, align 8, !tbaa !12\n  %546 = bitcast %union.anon* %240 to i8*\n  %547 = icmp eq i8* %545, %546\n  br i1 %547, label %549, label %548\n\n548:                                              ; preds = %543\n  call void @_ZdlPv(i8* %545) #10\n  br label %549\n\n549:                                              ; preds = %548, %543, %438\n  %550 = phi { i8*, i32 } [ %439, %438 ], [ %544, %543 ], [ %544, %548 ]\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %236) #10\n  br label %556\n\n551:                                              ; preds = %542, %571\n  %552 = load i8*, i8** %18, align 8, !tbaa !12\n  %553 = icmp eq i8* %552, %17\n  br i1 %553, label %555, label %554\n\n554:                                              ; preds = %551\n  call void @_ZdlPv(i8* %552) #10\n  br label %555\n\n555:                                              ; preds = %551, %554\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %14) #10\n  ret void\n\n556:                                              ; preds = %173, %549, %569\n  %557 = phi { i8*, i32 } [ %222, %569 ], [ %550, %549 ], [ %174, %173 ]\n  %558 = load i8*, i8** %18, align 8, !tbaa !12\n  %559 = icmp eq i8* %558, %17\n  br i1 %559, label %561, label %560\n\n560:                                              ; preds = %556\n  call void @_ZdlPv(i8* %558) #10\n  br label %561\n\n561:                                              ; preds = %560, %556\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %14) #10\n  resume { i8*, i32 } %557\n\n562:                                              ; preds = %529\n  call void @_ZdlPv(i8* %531) #10\n  br label %535\n\n563:                                              ; preds = %513\n  call void @_ZdlPv(i8* %515) #10\n  br label %564\n\n564:                                              ; preds = %563, %513\n  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %460) #10\n  br label %537\n\n565:                                              ; preds = %450\n  call void @_ZdlPv(i8* %452) #10\n  br label %456\n\n566:                                              ; preds = %432\n  call void @_ZdlPv(i8* %434) #10\n  br label %567\n\n567:                                              ; preds = %566, %432\n  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %378) #10\n  br label %537\n\n568:                                              ; preds = %229\n  call void @_ZdlPv(i8* %231) #10\n  br label %569\n\n569:                                              ; preds = %568, %229\n  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %180) #10\n  br label %556\n\n570:                                              ; preds = %215\n  call void @_ZdlPv(i8* %217) #10\n  br label %571\n\n571:                                              ; preds = %570, %215\n  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %180) #10\n  br label %551\n}\n\n; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn\ndeclare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1\n\ndeclare dso_local i32 @__gxx_personality_v0(...)\n\n; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn\ndeclare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1\n\n; Function Attrs: noinline noreturn nounwind\ndefine linkonce_odr hidden void @__clang_call_terminate(i8* %0) local_unnamed_addr #2 comdat {\n  %2 = tail call i8* @__cxa_begin_catch(i8* %0) #10\n  tail call void @_ZSt9terminatev() #12\n  unreachable\n}\n\ndeclare dso_local i8* @__cxa_begin_catch(i8*) local_unnamed_addr\n\ndeclare dso_local void @_ZSt9terminatev() local_unnamed_addr\n\n; Function Attrs: nobuiltin nounwind\ndeclare dso_local void @_ZdlPv(i8*) local_unnamed_addr #3\n\ndeclare dso_local i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32), i64* nonnull align 8 dereferenceable(8), i64) local_unnamed_addr #4\n\n; Function Attrs: argmemonly mustprogress nofree nounwind willreturn\ndeclare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #5\n\ndeclare dso_local nonnull align 8 dereferenceable(32) %\"class.std::__cxx11::basic_string\"* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEmmmc(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32), i64, i64, i64, i8 signext) local_unnamed_addr #4\n\n; Function Attrs: nobuiltin allocsize(0)\ndeclare dso_local nonnull i8* @_Znwm(i64) local_unnamed_addr #6\n\n; Function Attrs: uwtable\ndefine linkonce_odr dso_local %\"class.std::__cxx11::basic_string\"* @_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPS7_EET0_T_SC_SB_(%\"class.std::__cxx11::basic_string\"* %0, %\"class.std::__cxx11::basic_string\"* %1, %\"class.std::__cxx11::basic_string\"* %2) local_unnamed_addr #0 comdat align 2 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {\n  %4 = alloca i64, align 8\n  %5 = bitcast i64* %4 to i8*\n  %6 = icmp eq %\"class.std::__cxx11::basic_string\"* %0, %1\n  br i1 %6, label %56, label %7\n\n7:                                                ; preds = %3, %30\n  %8 = phi %\"class.std::__cxx11::basic_string\"* [ %37, %30 ], [ %2, %3 ]\n  %9 = phi %\"class.std::__cxx11::basic_string\"* [ %36, %30 ], [ %0, %3 ]\n  %10 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %8, i64 0, i32 2\n  %11 = bitcast %\"class.std::__cxx11::basic_string\"* %8 to %union.anon**\n  store %union.anon* %10, %union.anon** %11, align 8, !tbaa !3\n  %12 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %9, i64 0, i32 0, i32 0\n  %13 = load i8*, i8** %12, align 8, !tbaa !12\n  %14 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %9, i64 0, i32 1\n  %15 = load i64, i64* %14, align 8, !tbaa !8\n  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #10\n  store i64 %15, i64* %4, align 8, !tbaa !18\n  %16 = icmp ugt i64 %15, 15\n  br i1 %16, label %19, label %17\n\n17:                                               ; preds = %7\n  %18 = bitcast %union.anon* %10 to i8*\n  br label %25\n\n19:                                               ; preds = %7\n  %20 = invoke i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %8, i64* nonnull align 8 dereferenceable(8) %4, i64 0)\n          to label %21 unwind label %39\n\n21:                                               ; preds = %19\n  %22 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %8, i64 0, i32 0, i32 0\n  store i8* %20, i8** %22, align 8, !tbaa !12\n  %23 = load i64, i64* %4, align 8, !tbaa !18\n  %24 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %8, i64 0, i32 2, i32 0\n  store i64 %23, i64* %24, align 8, !tbaa !11\n  br label %25\n\n25:                                               ; preds = %21, %17\n  %26 = phi i8* [ %18, %17 ], [ %20, %21 ]\n  switch i64 %15, label %29 [\n    i64 1, label %27\n    i64 0, label %30\n  ]\n\n27:                                               ; preds = %25\n  %28 = load i8, i8* %13, align 1, !tbaa !11\n  store i8 %28, i8* %26, align 1, !tbaa !11\n  br label %30\n\n29:                                               ; preds = %25\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %26, i8* align 1 %13, i64 %15, i1 false) #10\n  br label %30\n\n30:                                               ; preds = %29, %27, %25\n  %31 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %8, i64 0, i32 0, i32 0\n  %32 = load i64, i64* %4, align 8, !tbaa !18\n  %33 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %8, i64 0, i32 1\n  store i64 %32, i64* %33, align 8, !tbaa !8\n  %34 = load i8*, i8** %31, align 8, !tbaa !12\n  %35 = getelementptr inbounds i8, i8* %34, i64 %32\n  store i8 0, i8* %35, align 1, !tbaa !11\n  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5) #10\n  %36 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %9, i64 1\n  %37 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %8, i64 1\n  %38 = icmp eq %\"class.std::__cxx11::basic_string\"* %36, %1\n  br i1 %38, label %56, label %7, !llvm.loop !38\n\n39:                                               ; preds = %19\n  %40 = landingpad { i8*, i32 }\n          catch i8* null\n  %41 = extractvalue { i8*, i32 } %40, 0\n  %42 = call i8* @__cxa_begin_catch(i8* %41) #10\n  %43 = icmp eq %\"class.std::__cxx11::basic_string\"* %8, %2\n  br i1 %43, label %55, label %44\n\n44:                                               ; preds = %39, %52\n  %45 = phi %\"class.std::__cxx11::basic_string\"* [ %53, %52 ], [ %2, %39 ]\n  %46 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %45, i64 0, i32 0, i32 0\n  %47 = load i8*, i8** %46, align 8, !tbaa !12\n  %48 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %45, i64 0, i32 2\n  %49 = bitcast %union.anon* %48 to i8*\n  %50 = icmp eq i8* %47, %49\n  br i1 %50, label %52, label %51\n\n51:                                               ; preds = %44\n  call void @_ZdlPv(i8* %47) #10\n  br label %52\n\n52:                                               ; preds = %51, %44\n  %53 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %45, i64 1\n  %54 = icmp eq %\"class.std::__cxx11::basic_string\"* %53, %8\n  br i1 %54, label %55, label %44, !llvm.loop !39\n\n55:                                               ; preds = %52, %39\n  invoke void @__cxa_rethrow() #13\n          to label %64 unwind label %58\n\n56:                                               ; preds = %30, %3\n  %57 = phi %\"class.std::__cxx11::basic_string\"* [ %2, %3 ], [ %37, %30 ]\n  ret %\"class.std::__cxx11::basic_string\"* %57\n\n58:                                               ; preds = %55\n  %59 = landingpad { i8*, i32 }\n          cleanup\n  invoke void @__cxa_end_catch()\n          to label %60 unwind label %61\n\n60:                                               ; preds = %58\n  resume { i8*, i32 } %59\n\n61:                                               ; preds = %58\n  %62 = landingpad { i8*, i32 }\n          catch i8* null\n  %63 = extractvalue { i8*, i32 } %62, 0\n  call void @__clang_call_terminate(i8* %63) #12\n  unreachable\n\n64:                                               ; preds = %55\n  unreachable\n}\n\ndeclare dso_local void @__cxa_rethrow() local_unnamed_addr\n\ndeclare dso_local void @__cxa_end_catch() local_unnamed_addr\n\n; Function Attrs: argmemonly nofree nounwind willreturn writeonly\ndeclare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #7\n\n; Function Attrs: argmemonly nofree nounwind readonly willreturn\ndeclare i32 @bcmp(i8* nocapture, i8* nocapture, i64) local_unnamed_addr #8\n\n; Function Attrs: inaccessiblememonly nofree nosync nounwind willreturn\ndeclare void @llvm.experimental.noalias.scope.decl(metadata) #9\n\nattributes #0 = { uwtable \"frame-pointer\"=\"none\" \"min-legal-vector-width\"=\"0\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #1 = { argmemonly mustprogress nofree nosync nounwind willreturn }\nattributes #2 = { noinline noreturn nounwind }\nattributes #3 = { nobuiltin nounwind \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #4 = { \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #5 = { argmemonly mustprogress nofree nounwind willreturn }\nattributes #6 = { nobuiltin allocsize(0) \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #7 = { argmemonly nofree nounwind willreturn writeonly }\nattributes #8 = { argmemonly nofree nounwind readonly willreturn }\nattributes #9 = { inaccessiblememonly nofree nosync nounwind willreturn }\nattributes #10 = { nounwind }\nattributes #11 = { allocsize(0) }\nattributes #12 = { noreturn nounwind }\nattributes #13 = { noreturn }\n\n!llvm.module.flags = !{!0, !1}\n!llvm.ident = !{!2}\n\n!0 = !{i32 1, !\"wchar_size\", i32 4}\n!1 = !{i32 7, !\"uwtable\", i32 1}\n!2 = !{!\"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)\"}\n!3 = !{!4, !5, i64 0}\n!4 = !{!\"_ZTSNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderE\", !5, i64 0}\n!5 = !{!\"any pointer\", !6, i64 0}\n!6 = !{!\"omnipotent char\", !7, i64 0}\n!7 = !{!\"Simple C++ TBAA\"}\n!8 = !{!9, !10, i64 8}\n!9 = !{!\"_ZTSNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE\", !4, i64 0, !10, i64 8, !6, i64 16}\n!10 = !{!\"long\", !6, i64 0}\n!11 = !{!6, !6, i64 0}\n!12 = !{!9, !5, i64 0}\n!13 = distinct !{!13, !14}\n!14 = !{!\"llvm.loop.mustprogress\"}\n!15 = !{!16}\n!16 = distinct !{!16, !17, !\"_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_S5_: argument 0\"}\n!17 = distinct !{!17, !\"_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_S5_\"}\n!18 = !{!10, !10, i64 0}\n!19 = distinct !{!19, !14}\n!20 = !{!21, !5, i64 0}\n!21 = !{!\"_ZTSNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_Vector_impl_dataE\", !5, i64 0, !5, i64 8, !5, i64 16}\n!22 = !{!21, !5, i64 16}\n!23 = !{!21, !5, i64 8}\n!24 = !{!25}\n!25 = distinct !{!25, !26, !\"_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6rbeginEv: argument 0\"}\n!26 = distinct !{!26, !\"_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6rbeginEv\"}\n!27 = !{!28}\n!28 = distinct !{!28, !29}\n!29 = distinct !{!29, !\"LVerDomain\"}\n!30 = !{!31}\n!31 = distinct !{!31, !29}\n!32 = distinct !{!32, !14, !33}\n!33 = !{!\"llvm.loop.isvectorized\", i32 1}\n!34 = distinct !{!34, !14, !33}\n!35 = distinct !{!35, !36}\n!36 = !{!\"llvm.loop.unroll.disable\"}\n!37 = distinct !{!37, !14, !33}\n!38 = distinct !{!38, !14}\n!39 = distinct !{!39, !14}\n", "target": "This is the targeted source code:\n/*\nTask\nWe are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\nthen check if the result string is palindrome.\nA string is called palindrome if it reads the same backward as forward.\nYou should return a vector containing the result string and \"True\"/\"False\" for the check.\nExample\nFor s = \"abcde\", c = \"ae\", the result should be (\"bcd\",\"False\")\nFor s = \"abcdef\", c = \"b\"  the result should be (\"acdef\",\"False\")\nFor s = \"abcdedcba\", c = \"ab\", the result should be (\"cdedc\",\"True\")\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\nvector<string> reverse_delete(string s,string c){\n\n    string n=\"\";\n    for (int i=0;i<s.length();i++)\n    if (find(c.begin(),c.end(),s[i])==c.end())\n        n=n+s[i]; \n    if (n.length()==0) return {n,\"True\"};\n    string w(n.rbegin(),n.rend());\n    if (w==n) return {n,\"True\"};\n    return {n,\"False\"};\n}\n"}
{"input": "Convert this to C++:\n; ModuleID = '../../Human_xBenchmarks_164/CPP_113/CPP_113.cpp'\nsource_filename = \"../../Human_xBenchmarks_164/CPP_113/CPP_113.cpp\"\ntarget datalayout = \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\ntarget triple = \"x86_64-unknown-linux-gnu\"\n\n%\"class.std::vector\" = type { %\"struct.std::_Vector_base\" }\n%\"struct.std::_Vector_base\" = type { %\"struct.std::_Vector_base<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char>>>::_Vector_impl\" }\n%\"struct.std::_Vector_base<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char>>>::_Vector_impl\" = type { %\"struct.std::_Vector_base<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char>>>::_Vector_impl_data\" }\n%\"struct.std::_Vector_base<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char>>>::_Vector_impl_data\" = type { %\"class.std::__cxx11::basic_string\"*, %\"class.std::__cxx11::basic_string\"*, %\"class.std::__cxx11::basic_string\"* }\n%\"class.std::__cxx11::basic_string\" = type { %\"struct.std::__cxx11::basic_string<char>::_Alloc_hider\", i64, %union.anon }\n%\"struct.std::__cxx11::basic_string<char>::_Alloc_hider\" = type { i8* }\n%union.anon = type { i64, [8 x i8] }\n%struct.__va_list_tag = type { i32, i32, i8*, i8* }\n\n$_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED2Ev = comdat any\n\n$_ZN9__gnu_cxx12__to_xstringINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcEET_PFiPT0_mPKS8_P13__va_list_tagEmSB_z = comdat any\n\n$__clang_call_terminate = comdat any\n\n$_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_realloc_insertIJRKS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_ = comdat any\n\n@.str = private unnamed_addr constant [57 x i8] c\"the number of odd elements in the string i of the input.\\00\", align 1\n@.str.2 = private unnamed_addr constant [3 x i8] c\"%d\\00\", align 1\n@.str.6 = private unnamed_addr constant [26 x i8] c\"vector::_M_realloc_insert\\00\", align 1\n\n; Function Attrs: uwtable\ndefine dso_local void @_Z9odd_countSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE(%\"class.std::vector\"* noalias sret(%\"class.std::vector\") align 8 %0, %\"class.std::vector\"* nocapture readonly %1) local_unnamed_addr #0 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {\n  %3 = alloca i64, align 8\n  %4 = alloca i64, align 8\n  %5 = alloca i64, align 8\n  %6 = alloca %\"class.std::__cxx11::basic_string\", align 8\n  %7 = alloca %\"class.std::__cxx11::basic_string\", align 8\n  %8 = alloca %\"class.std::__cxx11::basic_string\", align 8\n  %9 = alloca %\"class.std::__cxx11::basic_string\", align 8\n  %10 = alloca %\"class.std::__cxx11::basic_string\", align 8\n  %11 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %1, i64 0, i32 0, i32 0, i32 0, i32 1\n  %12 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %1, i64 0, i32 0, i32 0, i32 0, i32 0\n  %13 = bitcast %\"class.std::__cxx11::basic_string\"* %6 to i8*\n  %14 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %6, i64 0, i32 2\n  %15 = bitcast %\"class.std::__cxx11::basic_string\"* %6 to %union.anon**\n  %16 = bitcast %union.anon* %14 to i8*\n  %17 = bitcast i64* %5 to i8*\n  %18 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %6, i64 0, i32 0, i32 0\n  %19 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %6, i64 0, i32 2, i32 0\n  %20 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %6, i64 0, i32 1\n  %21 = bitcast %\"class.std::__cxx11::basic_string\"* %7 to i8*\n  %22 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %7, i64 0, i32 2\n  %23 = bitcast %\"class.std::__cxx11::basic_string\"* %7 to %union.anon**\n  %24 = bitcast %union.anon* %22 to i8*\n  %25 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %7, i64 0, i32 0, i32 0\n  %26 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %7, i64 0, i32 1\n  %27 = bitcast %\"class.std::__cxx11::basic_string\"* %10 to i8*\n  %28 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %10, i64 0, i32 2\n  %29 = bitcast %\"class.std::__cxx11::basic_string\"* %10 to %union.anon**\n  %30 = bitcast i64* %3 to i8*\n  %31 = bitcast %union.anon* %28 to i8*\n  %32 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %10, i64 0, i32 0, i32 0\n  %33 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %10, i64 0, i32 2, i32 0\n  %34 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %10, i64 0, i32 1\n  %35 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %7, i64 0, i32 2, i32 0\n  %36 = bitcast %\"class.std::__cxx11::basic_string\"* %8 to i8*\n  %37 = bitcast %\"class.std::__cxx11::basic_string\"* %9 to i8*\n  %38 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %8, i64 0, i32 2\n  %39 = bitcast %\"class.std::__cxx11::basic_string\"* %8 to %union.anon**\n  %40 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %8, i64 0, i32 0, i32 0\n  %41 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %8, i64 0, i32 2, i32 0\n  %42 = bitcast %union.anon* %38 to i8*\n  %43 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %8, i64 0, i32 1\n  %44 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %9, i64 0, i32 0, i32 0\n  %45 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %9, i64 0, i32 2\n  %46 = bitcast %union.anon* %45 to i8*\n  %47 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0, i64 0, i32 0, i32 0, i32 0, i32 1\n  %48 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0, i64 0, i32 0, i32 0, i32 0, i32 2\n  %49 = bitcast i64* %4 to i8*\n  %50 = bitcast %\"class.std::vector\"* %0 to i8*\n  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(24) %50, i8 0, i64 24, i1 false)\n  %51 = load %\"class.std::__cxx11::basic_string\"*, %\"class.std::__cxx11::basic_string\"** %11, align 8, !tbaa !3\n  %52 = load %\"class.std::__cxx11::basic_string\"*, %\"class.std::__cxx11::basic_string\"** %12, align 8, !tbaa !8\n  %53 = icmp eq %\"class.std::__cxx11::basic_string\"* %51, %52\n  br i1 %53, label %320, label %54\n\n54:                                               ; preds = %2\n  %55 = bitcast i64* %34 to <2 x i64>*\n  %56 = bitcast i64* %26 to <2 x i64>*\n  %57 = bitcast i64* %43 to <2 x i64>*\n  %58 = bitcast i64* %26 to <2 x i64>*\n  br label %59\n\n59:                                               ; preds = %54, %298\n  %60 = phi i64 [ %299, %298 ], [ 0, %54 ]\n  %61 = phi %\"class.std::__cxx11::basic_string\"* [ %301, %298 ], [ %52, %54 ]\n  %62 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %61, i64 %60, i32 1\n  %63 = load i64, i64* %62, align 8, !tbaa !9\n  %64 = icmp eq i64 %63, 0\n  br i1 %64, label %102, label %65\n\n65:                                               ; preds = %59\n  %66 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %61, i64 %60, i32 0, i32 0\n  %67 = load i8*, i8** %66, align 8, !tbaa !13\n  %68 = icmp ult i64 %63, 8\n  br i1 %68, label %99, label %69\n\n69:                                               ; preds = %65\n  %70 = and i64 %63, -8\n  br label %71\n\n71:                                               ; preds = %71, %69\n  %72 = phi i64 [ 0, %69 ], [ %93, %71 ]\n  %73 = phi <4 x i32> [ zeroinitializer, %69 ], [ %91, %71 ]\n  %74 = phi <4 x i32> [ zeroinitializer, %69 ], [ %92, %71 ]\n  %75 = getelementptr inbounds i8, i8* %67, i64 %72\n  %76 = bitcast i8* %75 to <4 x i8>*\n  %77 = load <4 x i8>, <4 x i8>* %76, align 1, !tbaa !14\n  %78 = getelementptr inbounds i8, i8* %75, i64 4\n  %79 = bitcast i8* %78 to <4 x i8>*\n  %80 = load <4 x i8>, <4 x i8>* %79, align 1, !tbaa !14\n  %81 = add <4 x i8> %77, <i8 -48, i8 -48, i8 -48, i8 -48>\n  %82 = add <4 x i8> %80, <i8 -48, i8 -48, i8 -48, i8 -48>\n  %83 = icmp ult <4 x i8> %81, <i8 10, i8 10, i8 10, i8 10>\n  %84 = icmp ult <4 x i8> %82, <i8 10, i8 10, i8 10, i8 10>\n  %85 = and <4 x i8> %77, <i8 1, i8 1, i8 1, i8 1>\n  %86 = and <4 x i8> %80, <i8 1, i8 1, i8 1, i8 1>\n  %87 = select <4 x i1> %83, <4 x i8> %85, <4 x i8> zeroinitializer\n  %88 = select <4 x i1> %84, <4 x i8> %86, <4 x i8> zeroinitializer\n  %89 = zext <4 x i8> %87 to <4 x i32>\n  %90 = zext <4 x i8> %88 to <4 x i32>\n  %91 = add <4 x i32> %73, %89\n  %92 = add <4 x i32> %74, %90\n  %93 = add nuw i64 %72, 8\n  %94 = icmp eq i64 %93, %70\n  br i1 %94, label %95, label %71, !llvm.loop !15\n\n95:                                               ; preds = %71\n  %96 = add <4 x i32> %92, %91\n  %97 = call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %96)\n  %98 = icmp eq i64 %63, %70\n  br i1 %98, label %102, label %99\n\n99:                                               ; preds = %65, %95\n  %100 = phi i64 [ 0, %65 ], [ %70, %95 ]\n  %101 = phi i32 [ 0, %65 ], [ %97, %95 ]\n  br label %110\n\n102:                                              ; preds = %110, %95, %59\n  %103 = phi i32 [ 0, %59 ], [ %97, %95 ], [ %120, %110 ]\n  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %13) #14\n  store %union.anon* %14, %union.anon** %15, align 8, !tbaa !18\n  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %17) #14\n  store i64 56, i64* %5, align 8, !tbaa !19\n  %104 = invoke i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %6, i64* nonnull align 8 dereferenceable(8) %5, i64 0)\n          to label %105 unwind label %155\n\n105:                                              ; preds = %102\n  store i8* %104, i8** %18, align 8, !tbaa !13\n  %106 = load i64, i64* %5, align 8, !tbaa !19\n  store i64 %106, i64* %19, align 8, !tbaa !14\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef nonnull align 1 dereferenceable(56) %104, i8* noundef nonnull align 1 dereferenceable(56) getelementptr inbounds ([57 x i8], [57 x i8]* @.str, i64 0, i64 0), i64 56, i1 false) #14\n  store i64 %106, i64* %20, align 8, !tbaa !9\n  %107 = getelementptr inbounds i8, i8* %104, i64 %106\n  store i8 0, i8* %107, align 1, !tbaa !14\n  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %17) #14\n  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %21) #14\n  store %union.anon* %22, %union.anon** %23, align 8, !tbaa !18\n  store i64 0, i64* %26, align 8, !tbaa !9\n  store i8 0, i8* %24, align 8, !tbaa !14\n  %108 = load i64, i64* %20, align 8, !tbaa !9\n  %109 = icmp eq i64 %108, 0\n  br i1 %109, label %123, label %157\n\n110:                                              ; preds = %99, %110\n  %111 = phi i64 [ %121, %110 ], [ %100, %99 ]\n  %112 = phi i32 [ %120, %110 ], [ %101, %99 ]\n  %113 = getelementptr inbounds i8, i8* %67, i64 %111\n  %114 = load i8, i8* %113, align 1, !tbaa !14\n  %115 = add i8 %114, -48\n  %116 = icmp ult i8 %115, 10\n  %117 = and i8 %114, 1\n  %118 = select i1 %116, i8 %117, i8 0\n  %119 = zext i8 %118 to i32\n  %120 = add nuw nsw i32 %112, %119\n  %121 = add nuw nsw i64 %111, 1\n  %122 = icmp eq i64 %121, %63\n  br i1 %122, label %102, label %110, !llvm.loop !20\n\n123:                                              ; preds = %286, %105\n  %124 = load %\"class.std::__cxx11::basic_string\"*, %\"class.std::__cxx11::basic_string\"** %47, align 8, !tbaa !3\n  %125 = load %\"class.std::__cxx11::basic_string\"*, %\"class.std::__cxx11::basic_string\"** %48, align 8, !tbaa !22\n  %126 = icmp eq %\"class.std::__cxx11::basic_string\"* %124, %125\n  br i1 %126, label %154, label %127\n\n127:                                              ; preds = %123\n  %128 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %124, i64 0, i32 2\n  %129 = bitcast %\"class.std::__cxx11::basic_string\"* %124 to %union.anon**\n  store %union.anon* %128, %union.anon** %129, align 8, !tbaa !18\n  %130 = load i8*, i8** %25, align 8, !tbaa !13\n  %131 = load i64, i64* %26, align 8, !tbaa !9\n  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %49) #14\n  store i64 %131, i64* %4, align 8, !tbaa !19\n  %132 = icmp ugt i64 %131, 15\n  br i1 %132, label %135, label %133\n\n133:                                              ; preds = %127\n  %134 = bitcast %union.anon* %128 to i8*\n  br label %141\n\n135:                                              ; preds = %127\n  %136 = invoke i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %124, i64* nonnull align 8 dereferenceable(8) %4, i64 0)\n          to label %137 unwind label %307\n\n137:                                              ; preds = %135\n  %138 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %124, i64 0, i32 0, i32 0\n  store i8* %136, i8** %138, align 8, !tbaa !13\n  %139 = load i64, i64* %4, align 8, !tbaa !19\n  %140 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %124, i64 0, i32 2, i32 0\n  store i64 %139, i64* %140, align 8, !tbaa !14\n  br label %141\n\n141:                                              ; preds = %137, %133\n  %142 = phi i8* [ %134, %133 ], [ %136, %137 ]\n  switch i64 %131, label %145 [\n    i64 1, label %143\n    i64 0, label %146\n  ]\n\n143:                                              ; preds = %141\n  %144 = load i8, i8* %130, align 1, !tbaa !14\n  store i8 %144, i8* %142, align 1, !tbaa !14\n  br label %146\n\n145:                                              ; preds = %141\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %142, i8* align 1 %130, i64 %131, i1 false) #14\n  br label %146\n\n146:                                              ; preds = %145, %143, %141\n  %147 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %124, i64 0, i32 0, i32 0\n  %148 = load i64, i64* %4, align 8, !tbaa !19\n  %149 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %124, i64 0, i32 1\n  store i64 %148, i64* %149, align 8, !tbaa !9\n  %150 = load i8*, i8** %147, align 8, !tbaa !13\n  %151 = getelementptr inbounds i8, i8* %150, i64 %148\n  store i8 0, i8* %151, align 1, !tbaa !14\n  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %49) #14\n  %152 = load %\"class.std::__cxx11::basic_string\"*, %\"class.std::__cxx11::basic_string\"** %47, align 8, !tbaa !3\n  %153 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %152, i64 1\n  store %\"class.std::__cxx11::basic_string\"* %153, %\"class.std::__cxx11::basic_string\"** %47, align 8, !tbaa !3\n  br label %290\n\n154:                                              ; preds = %123\n  invoke void @_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_realloc_insertIJRKS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_(%\"class.std::vector\"* nonnull align 8 dereferenceable(24) %0, %\"class.std::__cxx11::basic_string\"* %124, %\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %7)\n          to label %290 unwind label %307\n\n155:                                              ; preds = %102\n  %156 = landingpad { i8*, i32 }\n          cleanup\n  br label %318\n\n157:                                              ; preds = %105, %286\n  %158 = phi i64 [ %287, %286 ], [ 0, %105 ]\n  %159 = load i8*, i8** %18, align 8, !tbaa !13\n  %160 = getelementptr inbounds i8, i8* %159, i64 %158\n  %161 = load i8, i8* %160, align 1, !tbaa !14\n  %162 = icmp eq i8 %161, 105\n  br i1 %162, label %163, label %226\n\n163:                                              ; preds = %157\n  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %36) #14\n  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %37) #14\n  invoke void (%\"class.std::__cxx11::basic_string\"*, i32 (i8*, i64, i8*, %struct.__va_list_tag*)*, i64, i8*, ...) @_ZN9__gnu_cxx12__to_xstringINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcEET_PFiPT0_mPKS8_P13__va_list_tagEmSB_z(%\"class.std::__cxx11::basic_string\"* nonnull sret(%\"class.std::__cxx11::basic_string\") align 8 %9, i32 (i8*, i64, i8*, %struct.__va_list_tag*)* nonnull @vsnprintf, i64 16, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i64 0, i64 0), i32 %103)\n          to label %164 unwind label %217\n\n164:                                              ; preds = %163\n  call void @llvm.experimental.noalias.scope.decl(metadata !23)\n  %165 = load i64, i64* %26, align 8, !tbaa !9, !noalias !23\n  %166 = load i8*, i8** %25, align 8, !tbaa !13, !noalias !23\n  %167 = invoke nonnull align 8 dereferenceable(32) %\"class.std::__cxx11::basic_string\"* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %9, i64 0, i64 0, i8* %166, i64 %165)\n          to label %168 unwind label %219\n\n168:                                              ; preds = %164\n  store %union.anon* %38, %union.anon** %39, align 8, !tbaa !18, !alias.scope !23\n  %169 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %167, i64 0, i32 0, i32 0\n  %170 = load i8*, i8** %169, align 8, !tbaa !13\n  %171 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %167, i64 0, i32 2\n  %172 = bitcast %union.anon* %171 to i8*\n  %173 = icmp eq i8* %170, %172\n  br i1 %173, label %174, label %175\n\n174:                                              ; preds = %168\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(16) %42, i8* noundef nonnull align 8 dereferenceable(16) %170, i64 16, i1 false) #14\n  br label %178\n\n175:                                              ; preds = %168\n  store i8* %170, i8** %40, align 8, !tbaa !13, !alias.scope !23\n  %176 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %167, i64 0, i32 2, i32 0\n  %177 = load i64, i64* %176, align 8, !tbaa !14\n  store i64 %177, i64* %41, align 8, !tbaa !14, !alias.scope !23\n  br label %178\n\n178:                                              ; preds = %175, %174\n  %179 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %167, i64 0, i32 1\n  %180 = load i64, i64* %179, align 8, !tbaa !9\n  store i64 %180, i64* %43, align 8, !tbaa !9, !alias.scope !23\n  %181 = bitcast %\"class.std::__cxx11::basic_string\"* %167 to %union.anon**\n  store %union.anon* %171, %union.anon** %181, align 8, !tbaa !13\n  store i64 0, i64* %179, align 8, !tbaa !9\n  store i8 0, i8* %172, align 8, !tbaa !14\n  %182 = load i8*, i8** %40, align 8, !tbaa !13\n  %183 = icmp eq i8* %182, %42\n  br i1 %183, label %184, label %198\n\n184:                                              ; preds = %178\n  %185 = load i64, i64* %43, align 8, !tbaa !9\n  %186 = icmp eq i64 %185, 0\n  br i1 %186, label %193, label %187\n\n187:                                              ; preds = %184\n  %188 = load i8*, i8** %25, align 8, !tbaa !13\n  %189 = icmp eq i64 %185, 1\n  br i1 %189, label %190, label %192\n\n190:                                              ; preds = %187\n  %191 = load i8, i8* %42, align 8, !tbaa !14\n  store i8 %191, i8* %188, align 1, !tbaa !14\n  br label %193\n\n192:                                              ; preds = %187\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %188, i8* nonnull align 8 %42, i64 %185, i1 false) #14\n  br label %193\n\n193:                                              ; preds = %192, %190, %184\n  %194 = load i64, i64* %43, align 8, !tbaa !9\n  store i64 %194, i64* %26, align 8, !tbaa !9\n  %195 = load i8*, i8** %25, align 8, !tbaa !13\n  %196 = getelementptr inbounds i8, i8* %195, i64 %194\n  store i8 0, i8* %196, align 1, !tbaa !14\n  %197 = load i8*, i8** %40, align 8, !tbaa !13\n  br label %207\n\n198:                                              ; preds = %178\n  %199 = load i8*, i8** %25, align 8, !tbaa !13\n  %200 = icmp eq i8* %199, %24\n  %201 = load i64, i64* %35, align 8\n  store i8* %182, i8** %25, align 8, !tbaa !13\n  %202 = load <2 x i64>, <2 x i64>* %57, align 8, !tbaa !14\n  store <2 x i64> %202, <2 x i64>* %58, align 8, !tbaa !14\n  %203 = icmp eq i8* %199, null\n  %204 = or i1 %200, %203\n  br i1 %204, label %206, label %205\n\n205:                                              ; preds = %198\n  store i8* %199, i8** %40, align 8, !tbaa !13\n  store i64 %201, i64* %41, align 8, !tbaa !14\n  br label %207\n\n206:                                              ; preds = %198\n  store %union.anon* %38, %union.anon** %39, align 8, !tbaa !13\n  br label %207\n\n207:                                              ; preds = %193, %205, %206\n  %208 = phi i8* [ %197, %193 ], [ %199, %205 ], [ %42, %206 ]\n  store i64 0, i64* %43, align 8, !tbaa !9\n  store i8 0, i8* %208, align 1, !tbaa !14\n  %209 = load i8*, i8** %40, align 8, !tbaa !13\n  %210 = icmp eq i8* %209, %42\n  br i1 %210, label %212, label %211\n\n211:                                              ; preds = %207\n  call void @_ZdlPv(i8* %209) #14\n  br label %212\n\n212:                                              ; preds = %207, %211\n  %213 = load i8*, i8** %44, align 8, !tbaa !13\n  %214 = icmp eq i8* %213, %46\n  br i1 %214, label %216, label %215\n\n215:                                              ; preds = %212\n  call void @_ZdlPv(i8* %213) #14\n  br label %216\n\n216:                                              ; preds = %212, %215\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %37) #14\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %36) #14\n  br label %286\n\n217:                                              ; preds = %163\n  %218 = landingpad { i8*, i32 }\n          cleanup\n  br label %224\n\n219:                                              ; preds = %164\n  %220 = landingpad { i8*, i32 }\n          cleanup\n  %221 = load i8*, i8** %44, align 8, !tbaa !13\n  %222 = icmp eq i8* %221, %46\n  br i1 %222, label %224, label %223\n\n223:                                              ; preds = %219\n  call void @_ZdlPv(i8* %221) #14\n  br label %224\n\n224:                                              ; preds = %223, %219, %217\n  %225 = phi { i8*, i32 } [ %218, %217 ], [ %220, %219 ], [ %220, %223 ]\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %37) #14\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %36) #14\n  br label %309\n\n226:                                              ; preds = %157\n  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %27) #14\n  call void @llvm.experimental.noalias.scope.decl(metadata !26)\n  store %union.anon* %28, %union.anon** %29, align 8, !tbaa !18, !alias.scope !26\n  %227 = load i8*, i8** %25, align 8, !tbaa !13, !noalias !26\n  %228 = load i64, i64* %26, align 8, !tbaa !9, !noalias !26\n  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %30) #14, !noalias !26\n  store i64 %228, i64* %3, align 8, !tbaa !19, !noalias !26\n  %229 = icmp ugt i64 %228, 15\n  br i1 %229, label %230, label %234\n\n230:                                              ; preds = %226\n  %231 = invoke i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %10, i64* nonnull align 8 dereferenceable(8) %3, i64 0)\n          to label %232 unwind label %282\n\n232:                                              ; preds = %230\n  store i8* %231, i8** %32, align 8, !tbaa !13, !alias.scope !26\n  %233 = load i64, i64* %3, align 8, !tbaa !19, !noalias !26\n  store i64 %233, i64* %33, align 8, !tbaa !14, !alias.scope !26\n  br label %234\n\n234:                                              ; preds = %226, %232\n  %235 = phi i8* [ %231, %232 ], [ %31, %226 ]\n  switch i64 %228, label %238 [\n    i64 1, label %236\n    i64 0, label %239\n  ]\n\n236:                                              ; preds = %234\n  %237 = load i8, i8* %227, align 1, !tbaa !14\n  store i8 %237, i8* %235, align 1, !tbaa !14\n  br label %239\n\n238:                                              ; preds = %234\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %235, i8* align 1 %227, i64 %228, i1 false) #14\n  br label %239\n\n239:                                              ; preds = %238, %236, %234\n  %240 = load i64, i64* %3, align 8, !tbaa !19, !noalias !26\n  store i64 %240, i64* %34, align 8, !tbaa !9, !alias.scope !26\n  %241 = load i8*, i8** %32, align 8, !tbaa !13, !alias.scope !26\n  %242 = getelementptr inbounds i8, i8* %241, i64 %240\n  store i8 0, i8* %242, align 1, !tbaa !14\n  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %30) #14, !noalias !26\n  %243 = load i64, i64* %34, align 8, !tbaa !9, !alias.scope !26\n  %244 = invoke nonnull align 8 dereferenceable(32) %\"class.std::__cxx11::basic_string\"* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEmmmc(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %10, i64 %243, i64 0, i64 1, i8 signext %161)\n          to label %250 unwind label %245\n\n245:                                              ; preds = %239\n  %246 = landingpad { i8*, i32 }\n          cleanup\n  %247 = load i8*, i8** %32, align 8, !tbaa !13, !alias.scope !26\n  %248 = icmp eq i8* %247, %31\n  br i1 %248, label %284, label %249\n\n249:                                              ; preds = %245\n  call void @_ZdlPv(i8* %247) #14\n  br label %284\n\n250:                                              ; preds = %239\n  %251 = load i8*, i8** %32, align 8, !tbaa !13\n  %252 = icmp eq i8* %251, %31\n  br i1 %252, label %253, label %267\n\n253:                                              ; preds = %250\n  %254 = load i64, i64* %34, align 8, !tbaa !9\n  %255 = icmp eq i64 %254, 0\n  br i1 %255, label %262, label %256\n\n256:                                              ; preds = %253\n  %257 = load i8*, i8** %25, align 8, !tbaa !13\n  %258 = icmp eq i64 %254, 1\n  br i1 %258, label %259, label %261\n\n259:                                              ; preds = %256\n  %260 = load i8, i8* %31, align 8, !tbaa !14\n  store i8 %260, i8* %257, align 1, !tbaa !14\n  br label %262\n\n261:                                              ; preds = %256\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %257, i8* nonnull align 8 %31, i64 %254, i1 false) #14\n  br label %262\n\n262:                                              ; preds = %261, %259, %253\n  %263 = load i64, i64* %34, align 8, !tbaa !9\n  store i64 %263, i64* %26, align 8, !tbaa !9\n  %264 = load i8*, i8** %25, align 8, !tbaa !13\n  %265 = getelementptr inbounds i8, i8* %264, i64 %263\n  store i8 0, i8* %265, align 1, !tbaa !14\n  %266 = load i8*, i8** %32, align 8, !tbaa !13\n  br label %276\n\n267:                                              ; preds = %250\n  %268 = load i8*, i8** %25, align 8, !tbaa !13\n  %269 = icmp eq i8* %268, %24\n  %270 = load i64, i64* %35, align 8\n  store i8* %251, i8** %25, align 8, !tbaa !13\n  %271 = load <2 x i64>, <2 x i64>* %55, align 8, !tbaa !14\n  store <2 x i64> %271, <2 x i64>* %56, align 8, !tbaa !14\n  %272 = icmp eq i8* %268, null\n  %273 = or i1 %269, %272\n  br i1 %273, label %275, label %274\n\n274:                                              ; preds = %267\n  store i8* %268, i8** %32, align 8, !tbaa !13\n  store i64 %270, i64* %33, align 8, !tbaa !14\n  br label %276\n\n275:                                              ; preds = %267\n  store %union.anon* %28, %union.anon** %29, align 8, !tbaa !13\n  br label %276\n\n276:                                              ; preds = %262, %274, %275\n  %277 = phi i8* [ %266, %262 ], [ %268, %274 ], [ %31, %275 ]\n  store i64 0, i64* %34, align 8, !tbaa !9\n  store i8 0, i8* %277, align 1, !tbaa !14\n  %278 = load i8*, i8** %32, align 8, !tbaa !13\n  %279 = icmp eq i8* %278, %31\n  br i1 %279, label %281, label %280\n\n280:                                              ; preds = %276\n  call void @_ZdlPv(i8* %278) #14\n  br label %281\n\n281:                                              ; preds = %276, %280\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %27) #14\n  br label %286\n\n282:                                              ; preds = %230\n  %283 = landingpad { i8*, i32 }\n          cleanup\n  br label %284\n\n284:                                              ; preds = %245, %249, %282\n  %285 = phi { i8*, i32 } [ %283, %282 ], [ %246, %249 ], [ %246, %245 ]\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %27) #14\n  br label %309\n\n286:                                              ; preds = %216, %281\n  %287 = add nuw i64 %158, 1\n  %288 = load i64, i64* %20, align 8, !tbaa !9\n  %289 = icmp ugt i64 %288, %287\n  br i1 %289, label %157, label %123, !llvm.loop !29\n\n290:                                              ; preds = %146, %154\n  %291 = load i8*, i8** %25, align 8, !tbaa !13\n  %292 = icmp eq i8* %291, %24\n  br i1 %292, label %294, label %293\n\n293:                                              ; preds = %290\n  call void @_ZdlPv(i8* %291) #14\n  br label %294\n\n294:                                              ; preds = %290, %293\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %21) #14\n  %295 = load i8*, i8** %18, align 8, !tbaa !13\n  %296 = icmp eq i8* %295, %16\n  br i1 %296, label %298, label %297\n\n297:                                              ; preds = %294\n  call void @_ZdlPv(i8* %295) #14\n  br label %298\n\n298:                                              ; preds = %294, %297\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %13) #14\n  %299 = add nuw i64 %60, 1\n  %300 = load %\"class.std::__cxx11::basic_string\"*, %\"class.std::__cxx11::basic_string\"** %11, align 8, !tbaa !3\n  %301 = load %\"class.std::__cxx11::basic_string\"*, %\"class.std::__cxx11::basic_string\"** %12, align 8, !tbaa !8\n  %302 = ptrtoint %\"class.std::__cxx11::basic_string\"* %300 to i64\n  %303 = ptrtoint %\"class.std::__cxx11::basic_string\"* %301 to i64\n  %304 = sub i64 %302, %303\n  %305 = ashr exact i64 %304, 5\n  %306 = icmp ugt i64 %305, %299\n  br i1 %306, label %59, label %320, !llvm.loop !30\n\n307:                                              ; preds = %154, %135\n  %308 = landingpad { i8*, i32 }\n          cleanup\n  br label %309\n\n309:                                              ; preds = %224, %284, %307\n  %310 = phi { i8*, i32 } [ %308, %307 ], [ %225, %224 ], [ %285, %284 ]\n  %311 = load i8*, i8** %25, align 8, !tbaa !13\n  %312 = icmp eq i8* %311, %24\n  br i1 %312, label %314, label %313\n\n313:                                              ; preds = %309\n  call void @_ZdlPv(i8* %311) #14\n  br label %314\n\n314:                                              ; preds = %313, %309\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %21) #14\n  %315 = load i8*, i8** %18, align 8, !tbaa !13\n  %316 = icmp eq i8* %315, %16\n  br i1 %316, label %318, label %317\n\n317:                                              ; preds = %314\n  call void @_ZdlPv(i8* %315) #14\n  br label %318\n\n318:                                              ; preds = %317, %314, %155\n  %319 = phi { i8*, i32 } [ %156, %155 ], [ %310, %314 ], [ %310, %317 ]\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %13) #14\n  call void @_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED2Ev(%\"class.std::vector\"* nonnull align 8 dereferenceable(24) %0) #14\n  resume { i8*, i32 } %319\n\n320:                                              ; preds = %298, %2\n  ret void\n}\n\n; Function Attrs: argmemonly mustprogress nofree nounwind willreturn writeonly\ndeclare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1\n\n; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn\ndeclare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2\n\ndeclare dso_local i32 @__gxx_personality_v0(...)\n\n; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn\ndeclare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2\n\n; Function Attrs: nounwind uwtable\ndefine linkonce_odr dso_local void @_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED2Ev(%\"class.std::vector\"* nonnull align 8 dereferenceable(24) %0) unnamed_addr #3 comdat align 2 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {\n  %2 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0, i64 0, i32 0, i32 0, i32 0, i32 0\n  %3 = load %\"class.std::__cxx11::basic_string\"*, %\"class.std::__cxx11::basic_string\"** %2, align 8, !tbaa !8\n  %4 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0, i64 0, i32 0, i32 0, i32 0, i32 1\n  %5 = load %\"class.std::__cxx11::basic_string\"*, %\"class.std::__cxx11::basic_string\"** %4, align 8, !tbaa !3\n  %6 = icmp eq %\"class.std::__cxx11::basic_string\"* %3, %5\n  br i1 %6, label %20, label %7\n\n7:                                                ; preds = %1, %15\n  %8 = phi %\"class.std::__cxx11::basic_string\"* [ %16, %15 ], [ %3, %1 ]\n  %9 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %8, i64 0, i32 0, i32 0\n  %10 = load i8*, i8** %9, align 8, !tbaa !13\n  %11 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %8, i64 0, i32 2\n  %12 = bitcast %union.anon* %11 to i8*\n  %13 = icmp eq i8* %10, %12\n  br i1 %13, label %15, label %14\n\n14:                                               ; preds = %7\n  tail call void @_ZdlPv(i8* %10) #14\n  br label %15\n\n15:                                               ; preds = %14, %7\n  %16 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %8, i64 1\n  %17 = icmp eq %\"class.std::__cxx11::basic_string\"* %16, %5\n  br i1 %17, label %18, label %7, !llvm.loop !31\n\n18:                                               ; preds = %15\n  %19 = load %\"class.std::__cxx11::basic_string\"*, %\"class.std::__cxx11::basic_string\"** %2, align 8, !tbaa !8\n  br label %20\n\n20:                                               ; preds = %18, %1\n  %21 = phi %\"class.std::__cxx11::basic_string\"* [ %19, %18 ], [ %3, %1 ]\n  %22 = icmp eq %\"class.std::__cxx11::basic_string\"* %21, null\n  br i1 %22, label %25, label %23\n\n23:                                               ; preds = %20\n  %24 = bitcast %\"class.std::__cxx11::basic_string\"* %21 to i8*\n  tail call void @_ZdlPv(i8* nonnull %24) #14\n  br label %25\n\n25:                                               ; preds = %20, %23\n  ret void\n}\n\n; Function Attrs: uwtable\ndefine linkonce_odr dso_local void @_ZN9__gnu_cxx12__to_xstringINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcEET_PFiPT0_mPKS8_P13__va_list_tagEmSB_z(%\"class.std::__cxx11::basic_string\"* noalias sret(%\"class.std::__cxx11::basic_string\") align 8 %0, i32 (i8*, i64, i8*, %struct.__va_list_tag*)* %1, i64 %2, i8* %3, ...) local_unnamed_addr #0 comdat personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {\n  %5 = alloca i64, align 8\n  %6 = alloca [1 x %struct.__va_list_tag], align 16\n  %7 = alloca i8, i64 %2, align 16\n  %8 = bitcast [1 x %struct.__va_list_tag]* %6 to i8*\n  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %8) #14\n  %9 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %6, i64 0, i64 0\n  call void @llvm.va_start(i8* nonnull %8)\n  %10 = call i32 %1(i8* nonnull %7, i64 %2, i8* %3, %struct.__va_list_tag* nonnull %9)\n  call void @llvm.va_end(i8* nonnull %8)\n  %11 = sext i32 %10 to i64\n  %12 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 2\n  %13 = bitcast %\"class.std::__cxx11::basic_string\"* %0 to %union.anon**\n  store %union.anon* %12, %union.anon** %13, align 8, !tbaa !18\n  %14 = bitcast %union.anon* %12 to i8*\n  %15 = bitcast i64* %5 to i8*\n  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %15) #14\n  store i64 %11, i64* %5, align 8, !tbaa !19\n  %16 = icmp ugt i32 %10, 15\n  br i1 %16, label %17, label %22\n\n17:                                               ; preds = %4\n  %18 = call i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %0, i64* nonnull align 8 dereferenceable(8) %5, i64 0)\n  %19 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 0, i32 0\n  store i8* %18, i8** %19, align 8, !tbaa !13\n  %20 = load i64, i64* %5, align 8, !tbaa !19\n  %21 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 2, i32 0\n  store i64 %20, i64* %21, align 8, !tbaa !14\n  br label %22\n\n22:                                               ; preds = %17, %4\n  %23 = phi i8* [ %18, %17 ], [ %14, %4 ]\n  switch i64 %11, label %26 [\n    i64 1, label %24\n    i64 0, label %27\n  ]\n\n24:                                               ; preds = %22\n  %25 = load i8, i8* %7, align 16, !tbaa !14\n  store i8 %25, i8* %23, align 1, !tbaa !14\n  br label %27\n\n26:                                               ; preds = %22\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %23, i8* nonnull align 16 %7, i64 %11, i1 false) #14\n  br label %27\n\n27:                                               ; preds = %26, %24, %22\n  %28 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 0, i32 0\n  %29 = load i64, i64* %5, align 8, !tbaa !19\n  %30 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 1\n  store i64 %29, i64* %30, align 8, !tbaa !9\n  %31 = load i8*, i8** %28, align 8, !tbaa !13\n  %32 = getelementptr inbounds i8, i8* %31, i64 %29\n  store i8 0, i8* %32, align 1, !tbaa !14\n  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %15) #14\n  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %8) #14\n  ret void\n}\n\n; Function Attrs: nofree nounwind\ndeclare dso_local noundef i32 @vsnprintf(i8* nocapture noundef, i64 noundef, i8* nocapture noundef readonly, %struct.__va_list_tag* noundef) #4\n\n; Function Attrs: mustprogress nofree nosync nounwind willreturn\ndeclare void @llvm.va_start(i8*) #5\n\n; Function Attrs: mustprogress nofree nosync nounwind willreturn\ndeclare void @llvm.va_end(i8*) #5\n\ndeclare dso_local i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32), i64* nonnull align 8 dereferenceable(8), i64) local_unnamed_addr #6\n\ndeclare dso_local i8* @__cxa_begin_catch(i8*) local_unnamed_addr\n\ndeclare dso_local void @__cxa_rethrow() local_unnamed_addr\n\ndeclare dso_local void @__cxa_end_catch() local_unnamed_addr\n\n; Function Attrs: noinline noreturn nounwind\ndefine linkonce_odr hidden void @__clang_call_terminate(i8* %0) local_unnamed_addr #7 comdat {\n  %2 = tail call i8* @__cxa_begin_catch(i8* %0) #14\n  tail call void @_ZSt9terminatev() #15\n  unreachable\n}\n\ndeclare dso_local void @_ZSt9terminatev() local_unnamed_addr\n\n; Function Attrs: argmemonly mustprogress nofree nounwind willreturn\ndeclare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #8\n\n; Function Attrs: nobuiltin nounwind\ndeclare dso_local void @_ZdlPv(i8*) local_unnamed_addr #9\n\ndeclare dso_local nonnull align 8 dereferenceable(32) %\"class.std::__cxx11::basic_string\"* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32), i64, i64, i8*, i64) local_unnamed_addr #6\n\ndeclare dso_local nonnull align 8 dereferenceable(32) %\"class.std::__cxx11::basic_string\"* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEmmmc(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32), i64, i64, i64, i8 signext) local_unnamed_addr #6\n\n; Function Attrs: uwtable\ndefine linkonce_odr dso_local void @_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_realloc_insertIJRKS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_(%\"class.std::vector\"* nonnull align 8 dereferenceable(24) %0, %\"class.std::__cxx11::basic_string\"* %1, %\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %2) local_unnamed_addr #0 comdat align 2 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {\n  %4 = alloca i64, align 8\n  %5 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0, i64 0, i32 0, i32 0, i32 0, i32 1\n  %6 = load %\"class.std::__cxx11::basic_string\"*, %\"class.std::__cxx11::basic_string\"** %5, align 8, !tbaa !3\n  %7 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0, i64 0, i32 0, i32 0, i32 0, i32 0\n  %8 = load %\"class.std::__cxx11::basic_string\"*, %\"class.std::__cxx11::basic_string\"** %7, align 8, !tbaa !8\n  %9 = ptrtoint %\"class.std::__cxx11::basic_string\"* %6 to i64\n  %10 = ptrtoint %\"class.std::__cxx11::basic_string\"* %8 to i64\n  %11 = sub i64 %9, %10\n  %12 = ashr exact i64 %11, 5\n  %13 = icmp eq i64 %11, 9223372036854775776\n  br i1 %13, label %14, label %15\n\n14:                                               ; preds = %3\n  tail call void @_ZSt20__throw_length_errorPKc(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.6, i64 0, i64 0)) #16\n  unreachable\n\n15:                                               ; preds = %3\n  %16 = icmp eq i64 %11, 0\n  %17 = select i1 %16, i64 1, i64 %12\n  %18 = add nsw i64 %17, %12\n  %19 = icmp ult i64 %18, %12\n  %20 = icmp ugt i64 %18, 288230376151711743\n  %21 = or i1 %19, %20\n  %22 = select i1 %21, i64 288230376151711743, i64 %18\n  %23 = ptrtoint %\"class.std::__cxx11::basic_string\"* %1 to i64\n  %24 = sub i64 %23, %10\n  %25 = ashr exact i64 %24, 5\n  %26 = icmp eq i64 %22, 0\n  br i1 %26, label %31, label %27\n\n27:                                               ; preds = %15\n  %28 = shl nuw nsw i64 %22, 5\n  %29 = tail call noalias nonnull i8* @_Znwm(i64 %28) #17\n  %30 = bitcast i8* %29 to %\"class.std::__cxx11::basic_string\"*\n  br label %31\n\n31:                                               ; preds = %15, %27\n  %32 = phi %\"class.std::__cxx11::basic_string\"* [ %30, %27 ], [ null, %15 ]\n  %33 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %32, i64 %25\n  %34 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %32, i64 %25, i32 2\n  %35 = bitcast %\"class.std::__cxx11::basic_string\"* %33 to %union.anon**\n  store %union.anon* %34, %union.anon** %35, align 8, !tbaa !18\n  %36 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %2, i64 0, i32 0, i32 0\n  %37 = load i8*, i8** %36, align 8, !tbaa !13\n  %38 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %2, i64 0, i32 1\n  %39 = load i64, i64* %38, align 8, !tbaa !9\n  %40 = bitcast i64* %4 to i8*\n  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %40) #14\n  store i64 %39, i64* %4, align 8, !tbaa !19\n  %41 = icmp ugt i64 %39, 15\n  br i1 %41, label %44, label %42\n\n42:                                               ; preds = %31\n  %43 = bitcast %union.anon* %34 to i8*\n  br label %50\n\n44:                                               ; preds = %31\n  %45 = invoke i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %33, i64* nonnull align 8 dereferenceable(8) %4, i64 0)\n          to label %46 unwind label %126\n\n46:                                               ; preds = %44\n  %47 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %33, i64 0, i32 0, i32 0\n  store i8* %45, i8** %47, align 8, !tbaa !13\n  %48 = load i64, i64* %4, align 8, !tbaa !19\n  %49 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %32, i64 %25, i32 2, i32 0\n  store i64 %48, i64* %49, align 8, !tbaa !14\n  br label %50\n\n50:                                               ; preds = %46, %42\n  %51 = phi i8* [ %43, %42 ], [ %45, %46 ]\n  switch i64 %39, label %54 [\n    i64 1, label %52\n    i64 0, label %55\n  ]\n\n52:                                               ; preds = %50\n  %53 = load i8, i8* %37, align 1, !tbaa !14\n  store i8 %53, i8* %51, align 1, !tbaa !14\n  br label %55\n\n54:                                               ; preds = %50\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %51, i8* align 1 %37, i64 %39, i1 false) #14\n  br label %55\n\n55:                                               ; preds = %54, %52, %50\n  %56 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %33, i64 0, i32 0, i32 0\n  %57 = load i64, i64* %4, align 8, !tbaa !19\n  %58 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %32, i64 %25, i32 1\n  store i64 %57, i64* %58, align 8, !tbaa !9\n  %59 = load i8*, i8** %56, align 8, !tbaa !13\n  %60 = getelementptr inbounds i8, i8* %59, i64 %57\n  store i8 0, i8* %60, align 1, !tbaa !14\n  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %40) #14\n  %61 = icmp eq %\"class.std::__cxx11::basic_string\"* %8, %1\n  br i1 %61, label %87, label %62\n\n62:                                               ; preds = %55, %79\n  %63 = phi %\"class.std::__cxx11::basic_string\"* [ %85, %79 ], [ %32, %55 ]\n  %64 = phi %\"class.std::__cxx11::basic_string\"* [ %84, %79 ], [ %8, %55 ]\n  %65 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %63, i64 0, i32 2\n  %66 = bitcast %\"class.std::__cxx11::basic_string\"* %63 to %union.anon**\n  store %union.anon* %65, %union.anon** %66, align 8, !tbaa !18\n  %67 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %64, i64 0, i32 0, i32 0\n  %68 = load i8*, i8** %67, align 8, !tbaa !13\n  %69 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %64, i64 0, i32 2\n  %70 = bitcast %union.anon* %69 to i8*\n  %71 = icmp eq i8* %68, %70\n  br i1 %71, label %72, label %74\n\n72:                                               ; preds = %62\n  %73 = bitcast %union.anon* %65 to i8*\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(16) %73, i8* noundef nonnull align 8 dereferenceable(16) %68, i64 16, i1 false) #14\n  br label %79\n\n74:                                               ; preds = %62\n  %75 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %63, i64 0, i32 0, i32 0\n  store i8* %68, i8** %75, align 8, !tbaa !13\n  %76 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %64, i64 0, i32 2, i32 0\n  %77 = load i64, i64* %76, align 8, !tbaa !14\n  %78 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %63, i64 0, i32 2, i32 0\n  store i64 %77, i64* %78, align 8, !tbaa !14\n  br label %79\n\n79:                                               ; preds = %74, %72\n  %80 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %64, i64 0, i32 1\n  %81 = load i64, i64* %80, align 8, !tbaa !9\n  %82 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %63, i64 0, i32 1\n  store i64 %81, i64* %82, align 8, !tbaa !9\n  %83 = bitcast %\"class.std::__cxx11::basic_string\"* %64 to %union.anon**\n  store %union.anon* %69, %union.anon** %83, align 8, !tbaa !13\n  store i64 0, i64* %80, align 8, !tbaa !9\n  store i8 0, i8* %70, align 8, !tbaa !14\n  %84 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %64, i64 1\n  %85 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %63, i64 1\n  %86 = icmp eq %\"class.std::__cxx11::basic_string\"* %84, %1\n  br i1 %86, label %87, label %62, !llvm.loop !32\n\n87:                                               ; preds = %79, %55\n  %88 = phi %\"class.std::__cxx11::basic_string\"* [ %32, %55 ], [ %85, %79 ]\n  %89 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %88, i64 1\n  %90 = icmp eq %\"class.std::__cxx11::basic_string\"* %6, %1\n  br i1 %90, label %116, label %91\n\n91:                                               ; preds = %87, %108\n  %92 = phi %\"class.std::__cxx11::basic_string\"* [ %114, %108 ], [ %89, %87 ]\n  %93 = phi %\"class.std::__cxx11::basic_string\"* [ %113, %108 ], [ %1, %87 ]\n  %94 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %92, i64 0, i32 2\n  %95 = bitcast %\"class.std::__cxx11::basic_string\"* %92 to %union.anon**\n  store %union.anon* %94, %union.anon** %95, align 8, !tbaa !18\n  %96 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %93, i64 0, i32 0, i32 0\n  %97 = load i8*, i8** %96, align 8, !tbaa !13\n  %98 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %93, i64 0, i32 2\n  %99 = bitcast %union.anon* %98 to i8*\n  %100 = icmp eq i8* %97, %99\n  br i1 %100, label %101, label %103\n\n101:                                              ; preds = %91\n  %102 = bitcast %union.anon* %94 to i8*\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(16) %102, i8* noundef nonnull align 8 dereferenceable(16) %97, i64 16, i1 false) #14\n  br label %108\n\n103:                                              ; preds = %91\n  %104 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %92, i64 0, i32 0, i32 0\n  store i8* %97, i8** %104, align 8, !tbaa !13\n  %105 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %93, i64 0, i32 2, i32 0\n  %106 = load i64, i64* %105, align 8, !tbaa !14\n  %107 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %92, i64 0, i32 2, i32 0\n  store i64 %106, i64* %107, align 8, !tbaa !14\n  br label %108\n\n108:                                              ; preds = %103, %101\n  %109 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %93, i64 0, i32 1\n  %110 = load i64, i64* %109, align 8, !tbaa !9\n  %111 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %92, i64 0, i32 1\n  store i64 %110, i64* %111, align 8, !tbaa !9\n  %112 = bitcast %\"class.std::__cxx11::basic_string\"* %93 to %union.anon**\n  store %union.anon* %98, %union.anon** %112, align 8, !tbaa !13\n  store i64 0, i64* %109, align 8, !tbaa !9\n  store i8 0, i8* %99, align 8, !tbaa !14\n  %113 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %93, i64 1\n  %114 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %92, i64 1\n  %115 = icmp eq %\"class.std::__cxx11::basic_string\"* %113, %6\n  br i1 %115, label %116, label %91, !llvm.loop !32\n\n116:                                              ; preds = %108, %87\n  %117 = phi %\"class.std::__cxx11::basic_string\"* [ %89, %87 ], [ %114, %108 ]\n  %118 = icmp eq %\"class.std::__cxx11::basic_string\"* %8, null\n  br i1 %118, label %121, label %119\n\n119:                                              ; preds = %116\n  %120 = bitcast %\"class.std::__cxx11::basic_string\"* %8 to i8*\n  call void @_ZdlPv(i8* nonnull %120) #14\n  br label %121\n\n121:                                              ; preds = %116, %119\n  %122 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0, i64 0, i32 0, i32 0, i32 0, i32 2\n  store %\"class.std::__cxx11::basic_string\"* %32, %\"class.std::__cxx11::basic_string\"** %7, align 8, !tbaa !8\n  store %\"class.std::__cxx11::basic_string\"* %117, %\"class.std::__cxx11::basic_string\"** %5, align 8, !tbaa !3\n  %123 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %32, i64 %22\n  store %\"class.std::__cxx11::basic_string\"* %123, %\"class.std::__cxx11::basic_string\"** %122, align 8, !tbaa !22\n  ret void\n\n124:                                              ; preds = %126\n  %125 = landingpad { i8*, i32 }\n          cleanup\n  invoke void @__cxa_end_catch()\n          to label %131 unwind label %132\n\n126:                                              ; preds = %44\n  %127 = landingpad { i8*, i32 }\n          catch i8* null\n  %128 = extractvalue { i8*, i32 } %127, 0\n  %129 = call i8* @__cxa_begin_catch(i8* %128) #14\n  %130 = bitcast %\"class.std::__cxx11::basic_string\"* %32 to i8*\n  call void @_ZdlPv(i8* nonnull %130) #14\n  invoke void @__cxa_rethrow() #16\n          to label %135 unwind label %124\n\n131:                                              ; preds = %124\n  resume { i8*, i32 } %125\n\n132:                                              ; preds = %124\n  %133 = landingpad { i8*, i32 }\n          catch i8* null\n  %134 = extractvalue { i8*, i32 } %133, 0\n  call void @__clang_call_terminate(i8* %134) #15\n  unreachable\n\n135:                                              ; preds = %126\n  unreachable\n}\n\n; Function Attrs: noreturn\ndeclare dso_local void @_ZSt20__throw_length_errorPKc(i8*) local_unnamed_addr #10\n\n; Function Attrs: nobuiltin allocsize(0)\ndeclare dso_local nonnull i8* @_Znwm(i64) local_unnamed_addr #11\n\n; Function Attrs: inaccessiblememonly nofree nosync nounwind willreturn\ndeclare void @llvm.experimental.noalias.scope.decl(metadata) #12\n\n; Function Attrs: nofree nosync nounwind readnone willreturn\ndeclare i32 @llvm.vector.reduce.add.v4i32(<4 x i32>) #13\n\nattributes #0 = { uwtable \"frame-pointer\"=\"none\" \"min-legal-vector-width\"=\"0\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #1 = { argmemonly mustprogress nofree nounwind willreturn writeonly }\nattributes #2 = { argmemonly mustprogress nofree nosync nounwind willreturn }\nattributes #3 = { nounwind uwtable \"frame-pointer\"=\"none\" \"min-legal-vector-width\"=\"0\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #4 = { nofree nounwind \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #5 = { mustprogress nofree nosync nounwind willreturn }\nattributes #6 = { \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #7 = { noinline noreturn nounwind }\nattributes #8 = { argmemonly mustprogress nofree nounwind willreturn }\nattributes #9 = { nobuiltin nounwind \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #10 = { noreturn \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #11 = { nobuiltin allocsize(0) \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #12 = { inaccessiblememonly nofree nosync nounwind willreturn }\nattributes #13 = { nofree nosync nounwind readnone willreturn }\nattributes #14 = { nounwind }\nattributes #15 = { noreturn nounwind }\nattributes #16 = { noreturn }\nattributes #17 = { allocsize(0) }\n\n!llvm.module.flags = !{!0, !1}\n!llvm.ident = !{!2}\n\n!0 = !{i32 1, !\"wchar_size\", i32 4}\n!1 = !{i32 7, !\"uwtable\", i32 1}\n!2 = !{!\"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)\"}\n!3 = !{!4, !5, i64 8}\n!4 = !{!\"_ZTSNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_Vector_impl_dataE\", !5, i64 0, !5, i64 8, !5, i64 16}\n!5 = !{!\"any pointer\", !6, i64 0}\n!6 = !{!\"omnipotent char\", !7, i64 0}\n!7 = !{!\"Simple C++ TBAA\"}\n!8 = !{!4, !5, i64 0}\n!9 = !{!10, !12, i64 8}\n!10 = !{!\"_ZTSNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE\", !11, i64 0, !12, i64 8, !6, i64 16}\n!11 = !{!\"_ZTSNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderE\", !5, i64 0}\n!12 = !{!\"long\", !6, i64 0}\n!13 = !{!10, !5, i64 0}\n!14 = !{!6, !6, i64 0}\n!15 = distinct !{!15, !16, !17}\n!16 = !{!\"llvm.loop.mustprogress\"}\n!17 = !{!\"llvm.loop.isvectorized\", i32 1}\n!18 = !{!11, !5, i64 0}\n!19 = !{!12, !12, i64 0}\n!20 = distinct !{!20, !16, !21, !17}\n!21 = !{!\"llvm.loop.unroll.runtime.disable\"}\n!22 = !{!4, !5, i64 16}\n!23 = !{!24}\n!24 = distinct !{!24, !25, !\"_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_OS8_: argument 0\"}\n!25 = distinct !{!25, !\"_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_OS8_\"}\n!26 = !{!27}\n!27 = distinct !{!27, !28, !\"_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_S5_: argument 0\"}\n!28 = distinct !{!28, !\"_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_S5_\"}\n!29 = distinct !{!29, !16}\n!30 = distinct !{!30, !16}\n!31 = distinct !{!31, !16}\n!32 = distinct !{!32, !16}\n", "target": "This is the targeted source code:\n/*\nGiven a vector of strings, where each string consists of only digits, return a vector.\nEach element i of the output should be 'the number of odd elements in the\nstring i of the input.\" where all the i's should be replaced by the number\nof odd digits in the i'th string of the input.\n\n>>> odd_count({\"1234567\"})\n{'the number of odd elements 4n the str4ng 4 of the 4nput.\"}\n>>> odd_count({\"3\",\"11111111\"})\n{'the number of odd elements 1n the str1ng 1 of the 1nput.\",\n 'the number of odd elements 8n the str8ng 8 of the 8nput.\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<map>\nusing namespace std;\nvector<string> odd_count(vector<string> lst){\n\n    vector<string> out={};\n    for (int i=0;i<lst.size();i++)\n        {\n            int sum=0;\n            for (int j=0;j<lst[i].length();j++)\n                if (lst[i][j]>=48 and lst[i][j]<=57 and lst[i][j]%2==1)\n                sum+=1;\n            string s=\"the number of odd elements in the string i of the input.\";\n            string s2=\"\";\n            for (int j=0;j<s.length();j++)\n                if (s[j]=='i') s2=s2+to_string(sum);\n                else s2=s2+s[j];\n            out.push_back(s2);\n        }\n    return out;\n}\n"}
{"input": "Convert this to C++:\n; ModuleID = '../../Human_xBenchmarks_164/CPP_114/CPP_114.cpp'\nsource_filename = \"../../Human_xBenchmarks_164/CPP_114/CPP_114.cpp\"\ntarget datalayout = \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\ntarget triple = \"x86_64-unknown-linux-gnu\"\n\n%\"class.std::vector\" = type { %\"struct.std::_Vector_base\" }\n%\"struct.std::_Vector_base\" = type { %\"struct.std::_Vector_base<long long, std::allocator<long long>>::_Vector_impl\" }\n%\"struct.std::_Vector_base<long long, std::allocator<long long>>::_Vector_impl\" = type { %\"struct.std::_Vector_base<long long, std::allocator<long long>>::_Vector_impl_data\" }\n%\"struct.std::_Vector_base<long long, std::allocator<long long>>::_Vector_impl_data\" = type { i64*, i64*, i64* }\n\n; Function Attrs: mustprogress nofree norecurse nosync nounwind readonly uwtable willreturn\ndefine dso_local i64 @_Z14minSubArraySumSt6vectorIxSaIxEE(%\"class.std::vector\"* nocapture readonly %0) local_unnamed_addr #0 {\n  %2 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0, i64 0, i32 0, i32 0, i32 0, i32 0\n  %3 = load i64*, i64** %2, align 8, !tbaa !3\n  %4 = load i64, i64* %3, align 8, !tbaa !8\n  %5 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0, i64 0, i32 0, i32 0, i32 0, i32 1\n  %6 = load i64*, i64** %5, align 8, !tbaa !10\n  %7 = ptrtoint i64* %6 to i64\n  %8 = ptrtoint i64* %3 to i64\n  %9 = sub i64 %7, %8\n  %10 = ashr exact i64 %9, 3\n  %11 = icmp ugt i64 %10, 1\n  br i1 %11, label %12, label %32\n\n12:                                               ; preds = %1\n  %13 = add nsw i64 %10, -1\n  %14 = and i64 %13, 1\n  %15 = icmp eq i64 %9, 16\n  br i1 %15, label %18, label %16\n\n16:                                               ; preds = %12\n  %17 = and i64 %13, -2\n  br label %34\n\n18:                                               ; preds = %34, %12\n  %19 = phi i64 [ undef, %12 ], [ %53, %34 ]\n  %20 = phi i64 [ 1, %12 ], [ %54, %34 ]\n  %21 = phi i64 [ %4, %12 ], [ %53, %34 ]\n  %22 = phi i64 [ %4, %12 ], [ %51, %34 ]\n  %23 = icmp eq i64 %14, 0\n  br i1 %23, label %32, label %24\n\n24:                                               ; preds = %18\n  %25 = icmp slt i64 %22, 0\n  %26 = getelementptr inbounds i64, i64* %3, i64 %20\n  %27 = load i64, i64* %26, align 8, !tbaa !8\n  %28 = select i1 %25, i64 %22, i64 0\n  %29 = add nsw i64 %27, %28\n  %30 = icmp slt i64 %29, %21\n  %31 = select i1 %30, i64 %29, i64 %21\n  br label %32\n\n32:                                               ; preds = %24, %18, %1\n  %33 = phi i64 [ %4, %1 ], [ %19, %18 ], [ %31, %24 ]\n  ret i64 %33\n\n34:                                               ; preds = %34, %16\n  %35 = phi i64 [ 1, %16 ], [ %54, %34 ]\n  %36 = phi i64 [ %4, %16 ], [ %53, %34 ]\n  %37 = phi i64 [ %4, %16 ], [ %51, %34 ]\n  %38 = phi i64 [ %17, %16 ], [ %55, %34 ]\n  %39 = icmp slt i64 %37, 0\n  %40 = getelementptr inbounds i64, i64* %3, i64 %35\n  %41 = load i64, i64* %40, align 8, !tbaa !8\n  %42 = select i1 %39, i64 %37, i64 0\n  %43 = add nsw i64 %41, %42\n  %44 = icmp slt i64 %43, %36\n  %45 = select i1 %44, i64 %43, i64 %36\n  %46 = add nuw nsw i64 %35, 1\n  %47 = icmp slt i64 %43, 0\n  %48 = getelementptr inbounds i64, i64* %3, i64 %46\n  %49 = load i64, i64* %48, align 8, !tbaa !8\n  %50 = select i1 %47, i64 %43, i64 0\n  %51 = add nsw i64 %49, %50\n  %52 = icmp slt i64 %51, %45\n  %53 = select i1 %52, i64 %51, i64 %45\n  %54 = add nuw nsw i64 %35, 2\n  %55 = add i64 %38, -2\n  %56 = icmp eq i64 %55, 0\n  br i1 %56, label %18, label %34, !llvm.loop !11\n}\n\nattributes #0 = { mustprogress nofree norecurse nosync nounwind readonly uwtable willreturn \"frame-pointer\"=\"none\" \"min-legal-vector-width\"=\"0\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\n\n!llvm.module.flags = !{!0, !1}\n!llvm.ident = !{!2}\n\n!0 = !{i32 1, !\"wchar_size\", i32 4}\n!1 = !{i32 7, !\"uwtable\", i32 1}\n!2 = !{!\"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)\"}\n!3 = !{!4, !5, i64 0}\n!4 = !{!\"_ZTSNSt12_Vector_baseIxSaIxEE17_Vector_impl_dataE\", !5, i64 0, !5, i64 8, !5, i64 16}\n!5 = !{!\"any pointer\", !6, i64 0}\n!6 = !{!\"omnipotent char\", !7, i64 0}\n!7 = !{!\"Simple C++ TBAA\"}\n!8 = !{!9, !9, i64 0}\n!9 = !{!\"long long\", !6, i64 0}\n!10 = !{!4, !5, i64 8}\n!11 = distinct !{!11, !12}\n!12 = !{!\"llvm.loop.mustprogress\"}\n", "target": "This is the targeted source code:\n/*\nGiven a vector of integers nums, find the minimum sum of any non-empty sub-vector\nof nums.\nExample\nminSubArraySum({2, 3, 4, 1, 2, 4}) == 1\nminSubArraySum({-1, -2, -3}) == -6\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nlong long minSubArraySum(vector<long long> nums){\n\n    long long current,min;\n    current=nums[0];\n    min=nums[0];\n    for (int i=1;i<nums.size();i++)\n    {\n       if (current<0) current=current+nums[i];\n       else current=nums[i];\n       if (current<min) min=current;\n    }\n    return min;\n}\n"}
{"input": "Convert this to C++:\n; ModuleID = '../../Human_xBenchmarks_164/CPP_115/CPP_115.cpp'\nsource_filename = \"../../Human_xBenchmarks_164/CPP_115/CPP_115.cpp\"\ntarget datalayout = \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\ntarget triple = \"x86_64-unknown-linux-gnu\"\n\n%\"class.std::vector\" = type { %\"struct.std::_Vector_base\" }\n%\"struct.std::_Vector_base\" = type { %\"struct.std::_Vector_base<std::vector<int>, std::allocator<std::vector<int>>>::_Vector_impl\" }\n%\"struct.std::_Vector_base<std::vector<int>, std::allocator<std::vector<int>>>::_Vector_impl\" = type { %\"struct.std::_Vector_base<std::vector<int>, std::allocator<std::vector<int>>>::_Vector_impl_data\" }\n%\"struct.std::_Vector_base<std::vector<int>, std::allocator<std::vector<int>>>::_Vector_impl_data\" = type { %\"class.std::vector.0\"*, %\"class.std::vector.0\"*, %\"class.std::vector.0\"* }\n%\"class.std::vector.0\" = type { %\"struct.std::_Vector_base.1\" }\n%\"struct.std::_Vector_base.1\" = type { %\"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl\" }\n%\"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl\" = type { %\"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl_data\" }\n%\"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl_data\" = type { i32*, i32*, i32* }\n\n; Function Attrs: mustprogress nofree norecurse nosync nounwind readonly uwtable willreturn\ndefine dso_local i32 @_Z8max_fillSt6vectorIS_IiSaIiEESaIS1_EEi(%\"class.std::vector\"* nocapture readonly %0, i32 %1) local_unnamed_addr #0 {\n  %3 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0, i64 0, i32 0, i32 0, i32 0, i32 1\n  %4 = load %\"class.std::vector.0\"*, %\"class.std::vector.0\"** %3, align 8, !tbaa !3\n  %5 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0, i64 0, i32 0, i32 0, i32 0, i32 0\n  %6 = load %\"class.std::vector.0\"*, %\"class.std::vector.0\"** %5, align 8, !tbaa !8\n  %7 = ptrtoint %\"class.std::vector.0\"* %4 to i64\n  %8 = ptrtoint %\"class.std::vector.0\"* %6 to i64\n  %9 = sub i64 %7, %8\n  %10 = icmp eq i64 %9, 0\n  br i1 %10, label %114, label %11\n\n11:                                               ; preds = %2\n  %12 = sdiv exact i64 %9, 24\n  %13 = call i64 @llvm.umax.i64(i64 %12, i64 1)\n  br label %14\n\n14:                                               ; preds = %11, %132\n  %15 = phi i64 [ 0, %11 ], [ %134, %132 ]\n  %16 = phi i32 [ 0, %11 ], [ %133, %132 ]\n  %17 = getelementptr inbounds %\"class.std::vector.0\", %\"class.std::vector.0\"* %6, i64 %15, i32 0, i32 0, i32 0, i32 1\n  %18 = load i32*, i32** %17, align 8, !tbaa !9\n  %19 = getelementptr inbounds %\"class.std::vector.0\", %\"class.std::vector.0\"* %6, i64 %15, i32 0, i32 0, i32 0, i32 0\n  %20 = load i32*, i32** %19, align 8, !tbaa !11\n  %21 = ptrtoint i32* %18 to i64\n  %22 = ptrtoint i32* %20 to i64\n  %23 = sub i64 %21, %22\n  %24 = icmp eq i64 %23, 0\n  br i1 %24, label %132, label %25\n\n25:                                               ; preds = %14\n  %26 = ashr exact i64 %23, 2\n  %27 = call i64 @llvm.umax.i64(i64 %26, i64 1)\n  %28 = call i64 @llvm.umax.i64(i64 %26, i64 1)\n  %29 = icmp ult i64 %28, 8\n  br i1 %29, label %111, label %30\n\n30:                                               ; preds = %25\n  %31 = and i64 %28, -8\n  %32 = add i64 %31, -8\n  %33 = lshr exact i64 %32, 3\n  %34 = add nuw nsw i64 %33, 1\n  %35 = and i64 %34, 3\n  %36 = icmp ult i64 %32, 24\n  br i1 %36, label %82, label %37\n\n37:                                               ; preds = %30\n  %38 = and i64 %34, 4611686018427387900\n  br label %39\n\n39:                                               ; preds = %39, %37\n  %40 = phi i64 [ 0, %37 ], [ %79, %39 ]\n  %41 = phi <4 x i32> [ zeroinitializer, %37 ], [ %77, %39 ]\n  %42 = phi <4 x i32> [ zeroinitializer, %37 ], [ %78, %39 ]\n  %43 = phi i64 [ %38, %37 ], [ %80, %39 ]\n  %44 = getelementptr inbounds i32, i32* %20, i64 %40\n  %45 = bitcast i32* %44 to <4 x i32>*\n  %46 = load <4 x i32>, <4 x i32>* %45, align 4, !tbaa !12\n  %47 = getelementptr inbounds i32, i32* %44, i64 4\n  %48 = bitcast i32* %47 to <4 x i32>*\n  %49 = load <4 x i32>, <4 x i32>* %48, align 4, !tbaa !12\n  %50 = add <4 x i32> %46, %41\n  %51 = add <4 x i32> %49, %42\n  %52 = or i64 %40, 8\n  %53 = getelementptr inbounds i32, i32* %20, i64 %52\n  %54 = bitcast i32* %53 to <4 x i32>*\n  %55 = load <4 x i32>, <4 x i32>* %54, align 4, !tbaa !12\n  %56 = getelementptr inbounds i32, i32* %53, i64 4\n  %57 = bitcast i32* %56 to <4 x i32>*\n  %58 = load <4 x i32>, <4 x i32>* %57, align 4, !tbaa !12\n  %59 = add <4 x i32> %55, %50\n  %60 = add <4 x i32> %58, %51\n  %61 = or i64 %40, 16\n  %62 = getelementptr inbounds i32, i32* %20, i64 %61\n  %63 = bitcast i32* %62 to <4 x i32>*\n  %64 = load <4 x i32>, <4 x i32>* %63, align 4, !tbaa !12\n  %65 = getelementptr inbounds i32, i32* %62, i64 4\n  %66 = bitcast i32* %65 to <4 x i32>*\n  %67 = load <4 x i32>, <4 x i32>* %66, align 4, !tbaa !12\n  %68 = add <4 x i32> %64, %59\n  %69 = add <4 x i32> %67, %60\n  %70 = or i64 %40, 24\n  %71 = getelementptr inbounds i32, i32* %20, i64 %70\n  %72 = bitcast i32* %71 to <4 x i32>*\n  %73 = load <4 x i32>, <4 x i32>* %72, align 4, !tbaa !12\n  %74 = getelementptr inbounds i32, i32* %71, i64 4\n  %75 = bitcast i32* %74 to <4 x i32>*\n  %76 = load <4 x i32>, <4 x i32>* %75, align 4, !tbaa !12\n  %77 = add <4 x i32> %73, %68\n  %78 = add <4 x i32> %76, %69\n  %79 = add nuw i64 %40, 32\n  %80 = add i64 %43, -4\n  %81 = icmp eq i64 %80, 0\n  br i1 %81, label %82, label %39, !llvm.loop !14\n\n82:                                               ; preds = %39, %30\n  %83 = phi <4 x i32> [ undef, %30 ], [ %77, %39 ]\n  %84 = phi <4 x i32> [ undef, %30 ], [ %78, %39 ]\n  %85 = phi i64 [ 0, %30 ], [ %79, %39 ]\n  %86 = phi <4 x i32> [ zeroinitializer, %30 ], [ %77, %39 ]\n  %87 = phi <4 x i32> [ zeroinitializer, %30 ], [ %78, %39 ]\n  %88 = icmp eq i64 %35, 0\n  br i1 %88, label %105, label %89\n\n89:                                               ; preds = %82, %89\n  %90 = phi i64 [ %102, %89 ], [ %85, %82 ]\n  %91 = phi <4 x i32> [ %100, %89 ], [ %86, %82 ]\n  %92 = phi <4 x i32> [ %101, %89 ], [ %87, %82 ]\n  %93 = phi i64 [ %103, %89 ], [ %35, %82 ]\n  %94 = getelementptr inbounds i32, i32* %20, i64 %90\n  %95 = bitcast i32* %94 to <4 x i32>*\n  %96 = load <4 x i32>, <4 x i32>* %95, align 4, !tbaa !12\n  %97 = getelementptr inbounds i32, i32* %94, i64 4\n  %98 = bitcast i32* %97 to <4 x i32>*\n  %99 = load <4 x i32>, <4 x i32>* %98, align 4, !tbaa !12\n  %100 = add <4 x i32> %96, %91\n  %101 = add <4 x i32> %99, %92\n  %102 = add nuw i64 %90, 8\n  %103 = add i64 %93, -1\n  %104 = icmp eq i64 %103, 0\n  br i1 %104, label %105, label %89, !llvm.loop !17\n\n105:                                              ; preds = %89, %82\n  %106 = phi <4 x i32> [ %83, %82 ], [ %100, %89 ]\n  %107 = phi <4 x i32> [ %84, %82 ], [ %101, %89 ]\n  %108 = add <4 x i32> %107, %106\n  %109 = call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %108)\n  %110 = icmp eq i64 %28, %31\n  br i1 %110, label %116, label %111\n\n111:                                              ; preds = %25, %105\n  %112 = phi i64 [ 0, %25 ], [ %31, %105 ]\n  %113 = phi i32 [ 0, %25 ], [ %109, %105 ]\n  br label %119\n\n114:                                              ; preds = %132, %2\n  %115 = phi i32 [ 0, %2 ], [ %133, %132 ]\n  ret i32 %115\n\n116:                                              ; preds = %119, %105\n  %117 = phi i32 [ %109, %105 ], [ %124, %119 ]\n  %118 = icmp sgt i32 %117, 0\n  br i1 %118, label %127, label %132\n\n119:                                              ; preds = %111, %119\n  %120 = phi i64 [ %125, %119 ], [ %112, %111 ]\n  %121 = phi i32 [ %124, %119 ], [ %113, %111 ]\n  %122 = getelementptr inbounds i32, i32* %20, i64 %120\n  %123 = load i32, i32* %122, align 4, !tbaa !12\n  %124 = add nsw i32 %123, %121\n  %125 = add nuw nsw i64 %120, 1\n  %126 = icmp eq i64 %125, %27\n  br i1 %126, label %116, label %119, !llvm.loop !19\n\n127:                                              ; preds = %116\n  %128 = add nsw i32 %117, -1\n  %129 = sdiv i32 %128, %1\n  %130 = add i32 %16, 1\n  %131 = add i32 %130, %129\n  br label %132\n\n132:                                              ; preds = %14, %127, %116\n  %133 = phi i32 [ %131, %127 ], [ %16, %116 ], [ %16, %14 ]\n  %134 = add nuw nsw i64 %15, 1\n  %135 = icmp eq i64 %134, %13\n  br i1 %135, label %114, label %14, !llvm.loop !21\n}\n\n; Function Attrs: nofree nosync nounwind readnone speculatable willreturn\ndeclare i64 @llvm.umax.i64(i64, i64) #1\n\n; Function Attrs: nofree nosync nounwind readnone willreturn\ndeclare i32 @llvm.vector.reduce.add.v4i32(<4 x i32>) #2\n\nattributes #0 = { mustprogress nofree norecurse nosync nounwind readonly uwtable willreturn \"frame-pointer\"=\"none\" \"min-legal-vector-width\"=\"0\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #1 = { nofree nosync nounwind readnone speculatable willreturn }\nattributes #2 = { nofree nosync nounwind readnone willreturn }\n\n!llvm.module.flags = !{!0, !1}\n!llvm.ident = !{!2}\n\n!0 = !{i32 1, !\"wchar_size\", i32 4}\n!1 = !{i32 7, !\"uwtable\", i32 1}\n!2 = !{!\"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)\"}\n!3 = !{!4, !5, i64 8}\n!4 = !{!\"_ZTSNSt12_Vector_baseISt6vectorIiSaIiEESaIS2_EE17_Vector_impl_dataE\", !5, i64 0, !5, i64 8, !5, i64 16}\n!5 = !{!\"any pointer\", !6, i64 0}\n!6 = !{!\"omnipotent char\", !7, i64 0}\n!7 = !{!\"Simple C++ TBAA\"}\n!8 = !{!4, !5, i64 0}\n!9 = !{!10, !5, i64 8}\n!10 = !{!\"_ZTSNSt12_Vector_baseIiSaIiEE17_Vector_impl_dataE\", !5, i64 0, !5, i64 8, !5, i64 16}\n!11 = !{!10, !5, i64 0}\n!12 = !{!13, !13, i64 0}\n!13 = !{!\"int\", !6, i64 0}\n!14 = distinct !{!14, !15, !16}\n!15 = !{!\"llvm.loop.mustprogress\"}\n!16 = !{!\"llvm.loop.isvectorized\", i32 1}\n!17 = distinct !{!17, !18}\n!18 = !{!\"llvm.loop.unroll.disable\"}\n!19 = distinct !{!19, !15, !20, !16}\n!20 = !{!\"llvm.loop.unroll.runtime.disable\"}\n!21 = distinct !{!21, !15}\n", "target": "This is the targeted source code:\n/*\nYou are given a rectangular grid of wells. Each row represents a single well,\nand each 1 in a row represents a single unit of water.\nEach well has a corresponding bucket that can be used to extract water from it, \nand all buckets have the same capacity.\nYour task is to use the buckets to empty the wells.\nOutput the number of times you need to lower the buckets.\n\nExample 1:\n    Input: \n        grid : {{0,0,1,0}, {0,1,0,0}, {1,1,1,1}}\n        bucket_capacity : 1\n    Output: 6\n\nExample 2:\n    Input: \n        grid : {{0,0,1,1}, {0,0,0,0}, {1,1,1,1}, {0,1,1,1}}\n        bucket_capacity : 2\n    Output: 5\n\nExample 3:\n    Input: \n        grid : {{0,0,0}, {0,0,0}}\n        bucket_capacity : 5\n    Output: 0\n\nConstraints:\n    * all wells have the same length\n    * 1 <= grid.length <= 10^2\n    * 1 <= grid{:,1}.length <= 10^2\n    * grid{i}{j} -> 0 | 1\n    * 1 <= capacity <= 10\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint max_fill(vector<vector<int>> grid,int capacity){\n\n    int out=0;\n    for (int i=0;i<grid.size();i++)\n    {\n        int sum=0;\n        for (int j=0;j<grid[i].size();j++)\n            sum+=grid[i][j];\n        if (sum>0)  out+=(sum-1)/capacity+1;\n    }\n    return out;\n}\n"}
{"input": "Convert this to C++:\n; ModuleID = '../../Human_xBenchmarks_164/CPP_116/CPP_116.cpp'\nsource_filename = \"../../Human_xBenchmarks_164/CPP_116/CPP_116.cpp\"\ntarget datalayout = \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\ntarget triple = \"x86_64-unknown-linux-gnu\"\n\n%\"class.std::vector\" = type { %\"struct.std::_Vector_base\" }\n%\"struct.std::_Vector_base\" = type { %\"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl\" }\n%\"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl\" = type { %\"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl_data\" }\n%\"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl_data\" = type { i32*, i32*, i32* }\n\n@.str = private unnamed_addr constant [26 x i8] c\"vector::_M_realloc_insert\\00\", align 1\n\n; Function Attrs: uwtable\ndefine dso_local void @_Z10sort_arraySt6vectorIiSaIiEE(%\"class.std::vector\"* noalias nocapture sret(%\"class.std::vector\") align 8 %0, %\"class.std::vector\"* nocapture %1) local_unnamed_addr #0 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {\n  %3 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %1, i64 0, i32 0, i32 0, i32 0, i32 1\n  %4 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %1, i64 0, i32 0, i32 0, i32 0, i32 0\n  %5 = load i32*, i32** %3, align 8, !tbaa !3\n  %6 = load i32*, i32** %4, align 8, !tbaa !8\n  %7 = icmp eq i32* %5, %6\n  br i1 %7, label %131, label %48\n\n8:                                                ; preds = %108\n  %9 = icmp ult i64 %119, 2\n  br i1 %9, label %131, label %10\n\n10:                                               ; preds = %8, %45\n  %11 = phi i64 [ %46, %45 ], [ 0, %8 ]\n  %12 = load i32, i32* %111, align 4, !tbaa !9\n  br label %13\n\n13:                                               ; preds = %10, %41\n  %14 = phi i32 [ %12, %10 ], [ %42, %41 ]\n  %15 = phi i64 [ 1, %10 ], [ %43, %41 ]\n  %16 = getelementptr inbounds i32, i32* %111, i64 %15\n  %17 = load i32, i32* %16, align 4, !tbaa !9\n  %18 = add nsw i64 %15, -1\n  %19 = getelementptr inbounds i32, i32* %111, i64 %18\n  %20 = icmp slt i32 %17, %14\n  br i1 %20, label %21, label %26\n\n21:                                               ; preds = %13\n  %22 = getelementptr inbounds i32, i32* %109, i64 %15\n  %23 = load i32, i32* %22, align 4, !tbaa !9\n  %24 = getelementptr inbounds i32, i32* %109, i64 %18\n  %25 = load i32, i32* %24, align 4, !tbaa !9\n  br label %34\n\n26:                                               ; preds = %13\n  %27 = icmp eq i32 %17, %14\n  br i1 %27, label %28, label %41\n\n28:                                               ; preds = %26\n  %29 = getelementptr inbounds i32, i32* %109, i64 %15\n  %30 = load i32, i32* %29, align 4, !tbaa !9\n  %31 = getelementptr inbounds i32, i32* %109, i64 %18\n  %32 = load i32, i32* %31, align 4, !tbaa !9\n  %33 = icmp slt i32 %30, %32\n  br i1 %33, label %34, label %41\n\n34:                                               ; preds = %21, %28\n  %35 = phi i32 [ %25, %21 ], [ %32, %28 ]\n  %36 = phi i32 [ %23, %21 ], [ %30, %28 ]\n  %37 = getelementptr inbounds i32, i32* %109, i64 %15\n  %38 = getelementptr inbounds i32, i32* %109, i64 %18\n  store i32 %35, i32* %37, align 4, !tbaa !9\n  store i32 %36, i32* %38, align 4, !tbaa !9\n  %39 = load i32, i32* %16, align 4, !tbaa !9\n  %40 = load i32, i32* %19, align 4, !tbaa !9\n  store i32 %40, i32* %16, align 4, !tbaa !9\n  store i32 %39, i32* %19, align 4, !tbaa !9\n  br label %41\n\n41:                                               ; preds = %34, %28, %26\n  %42 = phi i32 [ %40, %34 ], [ %14, %28 ], [ %17, %26 ]\n  %43 = add nuw nsw i64 %15, 1\n  %44 = icmp eq i64 %43, %119\n  br i1 %44, label %45, label %13, !llvm.loop !11\n\n45:                                               ; preds = %41\n  %46 = add nuw nsw i64 %11, 1\n  %47 = icmp eq i64 %46, %119\n  br i1 %47, label %131, label %10, !llvm.loop !13\n\n48:                                               ; preds = %2, %108\n  %49 = phi i32* [ %109, %108 ], [ %6, %2 ]\n  %50 = phi i32* [ %110, %108 ], [ %5, %2 ]\n  %51 = phi i64 [ %115, %108 ], [ 0, %2 ]\n  %52 = phi i32* [ %113, %108 ], [ null, %2 ]\n  %53 = phi i32* [ %114, %108 ], [ null, %2 ]\n  %54 = phi i32* [ %111, %108 ], [ null, %2 ]\n  %55 = getelementptr inbounds i32, i32* %49, i64 %51\n  %56 = load i32, i32* %55, align 4, !tbaa !9\n  %57 = icmp eq i32 %56, 0\n  br i1 %57, label %67, label %58\n\n58:                                               ; preds = %48\n  %59 = tail call i32 @llvm.abs.i32(i32 %56, i1 true)\n  br label %60\n\n60:                                               ; preds = %58, %60\n  %61 = phi i32 [ %65, %60 ], [ %59, %58 ]\n  %62 = phi i32 [ %64, %60 ], [ 0, %58 ]\n  %63 = and i32 %61, 1\n  %64 = add nuw nsw i32 %63, %62\n  %65 = lshr i32 %61, 1\n  %66 = icmp ult i32 %61, 2\n  br i1 %66, label %67, label %60, !llvm.loop !14\n\n67:                                               ; preds = %60, %48\n  %68 = phi i32 [ 0, %48 ], [ %64, %60 ]\n  %69 = icmp eq i32* %53, %52\n  br i1 %69, label %71, label %70\n\n70:                                               ; preds = %67\n  store i32 %68, i32* %53, align 4, !tbaa !9\n  br label %108\n\n71:                                               ; preds = %67\n  %72 = ptrtoint i32* %52 to i64\n  %73 = ptrtoint i32* %54 to i64\n  %74 = sub i64 %72, %73\n  %75 = ashr exact i64 %74, 2\n  %76 = icmp eq i64 %74, 9223372036854775804\n  br i1 %76, label %77, label %79\n\n77:                                               ; preds = %71\n  invoke void @_ZSt20__throw_length_errorPKc(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str, i64 0, i64 0)) #7\n          to label %78 unwind label %123\n\n78:                                               ; preds = %77\n  unreachable\n\n79:                                               ; preds = %71\n  %80 = icmp eq i64 %74, 0\n  %81 = select i1 %80, i64 1, i64 %75\n  %82 = add nsw i64 %81, %75\n  %83 = icmp ult i64 %82, %75\n  %84 = icmp ugt i64 %82, 2305843009213693951\n  %85 = or i1 %83, %84\n  %86 = select i1 %85, i64 2305843009213693951, i64 %82\n  %87 = icmp eq i64 %86, 0\n  br i1 %87, label %93, label %88\n\n88:                                               ; preds = %79\n  %89 = shl nuw nsw i64 %86, 2\n  %90 = invoke noalias nonnull i8* @_Znwm(i64 %89) #8\n          to label %91 unwind label %121\n\n91:                                               ; preds = %88\n  %92 = bitcast i8* %90 to i32*\n  br label %93\n\n93:                                               ; preds = %91, %79\n  %94 = phi i32* [ %92, %91 ], [ null, %79 ]\n  %95 = getelementptr inbounds i32, i32* %94, i64 %75\n  store i32 %68, i32* %95, align 4, !tbaa !9\n  %96 = icmp sgt i64 %74, 0\n  br i1 %96, label %97, label %100\n\n97:                                               ; preds = %93\n  %98 = bitcast i32* %94 to i8*\n  %99 = bitcast i32* %54 to i8*\n  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %98, i8* align 4 %99, i64 %74, i1 false) #9\n  br label %100\n\n100:                                              ; preds = %93, %97\n  %101 = icmp eq i32* %54, null\n  br i1 %101, label %104, label %102\n\n102:                                              ; preds = %100\n  %103 = bitcast i32* %54 to i8*\n  tail call void @_ZdlPv(i8* nonnull %103) #9\n  br label %104\n\n104:                                              ; preds = %102, %100\n  %105 = getelementptr inbounds i32, i32* %94, i64 %86\n  %106 = load i32*, i32** %3, align 8, !tbaa !3\n  %107 = load i32*, i32** %4, align 8, !tbaa !8\n  br label %108\n\n108:                                              ; preds = %104, %70\n  %109 = phi i32* [ %107, %104 ], [ %49, %70 ]\n  %110 = phi i32* [ %106, %104 ], [ %50, %70 ]\n  %111 = phi i32* [ %94, %104 ], [ %54, %70 ]\n  %112 = phi i32* [ %95, %104 ], [ %53, %70 ]\n  %113 = phi i32* [ %105, %104 ], [ %52, %70 ]\n  %114 = getelementptr inbounds i32, i32* %112, i64 1\n  %115 = add nuw i64 %51, 1\n  %116 = ptrtoint i32* %110 to i64\n  %117 = ptrtoint i32* %109 to i64\n  %118 = sub i64 %116, %117\n  %119 = ashr exact i64 %118, 2\n  %120 = icmp ugt i64 %119, %115\n  br i1 %120, label %48, label %8, !llvm.loop !15\n\n121:                                              ; preds = %88\n  %122 = landingpad { i8*, i32 }\n          cleanup\n  br label %125\n\n123:                                              ; preds = %77\n  %124 = landingpad { i8*, i32 }\n          cleanup\n  br label %125\n\n125:                                              ; preds = %123, %121\n  %126 = phi { i8*, i32 } [ %122, %121 ], [ %124, %123 ]\n  %127 = icmp eq i32* %54, null\n  br i1 %127, label %130, label %128\n\n128:                                              ; preds = %125\n  %129 = bitcast i32* %54 to i8*\n  tail call void @_ZdlPv(i8* nonnull %129) #9\n  br label %130\n\n130:                                              ; preds = %125, %128\n  resume { i8*, i32 } %126\n\n131:                                              ; preds = %45, %8, %2\n  %132 = phi i32* [ %6, %2 ], [ %109, %8 ], [ %109, %45 ]\n  %133 = phi i32* [ %5, %2 ], [ %110, %8 ], [ %110, %45 ]\n  %134 = phi i32* [ null, %2 ], [ %111, %8 ], [ %111, %45 ]\n  %135 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0, i64 0, i32 0, i32 0, i32 0, i32 0\n  store i32* %132, i32** %135, align 8, !tbaa !8\n  %136 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0, i64 0, i32 0, i32 0, i32 0, i32 1\n  store i32* %133, i32** %136, align 8, !tbaa !3\n  %137 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0, i64 0, i32 0, i32 0, i32 0, i32 2\n  %138 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %1, i64 0, i32 0, i32 0, i32 0, i32 2\n  %139 = load i32*, i32** %138, align 8, !tbaa !16\n  store i32* %139, i32** %137, align 8, !tbaa !16\n  %140 = bitcast %\"class.std::vector\"* %1 to i8*\n  tail call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(24) %140, i8 0, i64 24, i1 false) #9\n  %141 = icmp eq i32* %134, null\n  br i1 %141, label %144, label %142\n\n142:                                              ; preds = %131\n  %143 = bitcast i32* %134 to i8*\n  tail call void @_ZdlPv(i8* nonnull %143) #9\n  br label %144\n\n144:                                              ; preds = %131, %142\n  ret void\n}\n\n; Function Attrs: argmemonly mustprogress nofree nounwind willreturn writeonly\ndeclare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1\n\ndeclare dso_local i32 @__gxx_personality_v0(...)\n\n; Function Attrs: nobuiltin nounwind\ndeclare dso_local void @_ZdlPv(i8*) local_unnamed_addr #2\n\n; Function Attrs: noreturn\ndeclare dso_local void @_ZSt20__throw_length_errorPKc(i8*) local_unnamed_addr #3\n\n; Function Attrs: nobuiltin allocsize(0)\ndeclare dso_local nonnull i8* @_Znwm(i64) local_unnamed_addr #4\n\n; Function Attrs: argmemonly mustprogress nofree nounwind willreturn\ndeclare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #5\n\n; Function Attrs: nofree nosync nounwind readnone speculatable willreturn\ndeclare i32 @llvm.abs.i32(i32, i1 immarg) #6\n\nattributes #0 = { uwtable \"frame-pointer\"=\"none\" \"min-legal-vector-width\"=\"0\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #1 = { argmemonly mustprogress nofree nounwind willreturn writeonly }\nattributes #2 = { nobuiltin nounwind \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #3 = { noreturn \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #4 = { nobuiltin allocsize(0) \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #5 = { argmemonly mustprogress nofree nounwind willreturn }\nattributes #6 = { nofree nosync nounwind readnone speculatable willreturn }\nattributes #7 = { noreturn }\nattributes #8 = { allocsize(0) }\nattributes #9 = { nounwind }\n\n!llvm.module.flags = !{!0, !1}\n!llvm.ident = !{!2}\n\n!0 = !{i32 1, !\"wchar_size\", i32 4}\n!1 = !{i32 7, !\"uwtable\", i32 1}\n!2 = !{!\"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)\"}\n!3 = !{!4, !5, i64 8}\n!4 = !{!\"_ZTSNSt12_Vector_baseIiSaIiEE17_Vector_impl_dataE\", !5, i64 0, !5, i64 8, !5, i64 16}\n!5 = !{!\"any pointer\", !6, i64 0}\n!6 = !{!\"omnipotent char\", !7, i64 0}\n!7 = !{!\"Simple C++ TBAA\"}\n!8 = !{!4, !5, i64 0}\n!9 = !{!10, !10, i64 0}\n!10 = !{!\"int\", !6, i64 0}\n!11 = distinct !{!11, !12}\n!12 = !{!\"llvm.loop.mustprogress\"}\n!13 = distinct !{!13, !12}\n!14 = distinct !{!14, !12}\n!15 = distinct !{!15, !12}\n!16 = !{!4, !5, i64 16}\n", "target": "This is the targeted source code:\n/*\nIn this Kata, you have to sort a vector of non-negative integers according to\nnumber of ones in their binary representation in ascending order.\nFor similar number of ones, sort based on decimal value.\n\nIt must be implemented like this:\n>>> sort_vector({1, 5, 2, 3, 4}) == {1, 2, 3, 4, 5}\n>>> sort_vector({-2, -3, -4, -5, -6}) == {-6, -5, -4, -3, -2}\n>>> sort_vector({1, 0, 2, 3, 4}) == {0, 1, 2, 3, 4}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> sort_array(vector<int> arr){\n\n    vector<int> bin={};\n    int m;\n\n    for (int i=0;i<arr.size();i++)\n    {\n        int b=0,n=abs(arr[i]);\n        while (n>0)\n        {\n            b+=n%2;n=n/2;\n        }\n        bin.push_back(b);\n    }\n    for (int i=0;i<arr.size();i++)\n    for (int j=1;j<arr.size();j++)\n    if (bin[j]<bin[j-1] or (bin[j]==bin[j-1] and arr[j]<arr[j-1]))\n    {\n        m=arr[j];arr[j]=arr[j-1];arr[j-1]=m;\n        m=bin[j];bin[j]=bin[j-1];bin[j-1]=m;\n    }\n    return arr;\n}\n"}
{"input": "Convert this to C++:\n; ModuleID = '../../Human_xBenchmarks_164/CPP_117/CPP_117.cpp'\nsource_filename = \"../../Human_xBenchmarks_164/CPP_117/CPP_117.cpp\"\ntarget datalayout = \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\ntarget triple = \"x86_64-unknown-linux-gnu\"\n\n%\"class.std::vector\" = type { %\"struct.std::_Vector_base\" }\n%\"struct.std::_Vector_base\" = type { %\"struct.std::_Vector_base<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char>>>::_Vector_impl\" }\n%\"struct.std::_Vector_base<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char>>>::_Vector_impl\" = type { %\"struct.std::_Vector_base<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char>>>::_Vector_impl_data\" }\n%\"struct.std::_Vector_base<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char>>>::_Vector_impl_data\" = type { %\"class.std::__cxx11::basic_string\"*, %\"class.std::__cxx11::basic_string\"*, %\"class.std::__cxx11::basic_string\"* }\n%\"class.std::__cxx11::basic_string\" = type { %\"struct.std::__cxx11::basic_string<char>::_Alloc_hider\", i64, %union.anon }\n%\"struct.std::__cxx11::basic_string<char>::_Alloc_hider\" = type { i8* }\n%union.anon = type { i64, [8 x i8] }\n\n$_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED2Ev = comdat any\n\n$__clang_call_terminate = comdat any\n\n$_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_realloc_insertIJRKS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_ = comdat any\n\n@.str = private unnamed_addr constant [11 x i8] c\"aeiouAEIOU\\00\", align 1\n@.str.1 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1\n@.str.3 = private unnamed_addr constant [26 x i8] c\"vector::_M_realloc_insert\\00\", align 1\n\n; Function Attrs: uwtable\ndefine dso_local void @_Z12select_wordsNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi(%\"class.std::vector\"* noalias sret(%\"class.std::vector\") align 8 %0, %\"class.std::__cxx11::basic_string\"* %1, i32 %2) local_unnamed_addr #0 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {\n  %4 = alloca i64, align 8\n  %5 = alloca i64, align 8\n  %6 = alloca i64, align 8\n  %7 = alloca %\"class.std::__cxx11::basic_string\", align 8\n  %8 = alloca %\"class.std::__cxx11::basic_string\", align 8\n  %9 = alloca %\"class.std::__cxx11::basic_string\", align 8\n  %10 = alloca %\"class.std::__cxx11::basic_string\", align 8\n  %11 = bitcast %\"class.std::__cxx11::basic_string\"* %7 to i8*\n  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %11) #11\n  %12 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %7, i64 0, i32 2\n  %13 = bitcast %\"class.std::__cxx11::basic_string\"* %7 to %union.anon**\n  store %union.anon* %12, %union.anon** %13, align 8, !tbaa !3\n  %14 = bitcast %union.anon* %12 to i8*\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(10) %14, i8* noundef nonnull align 1 dereferenceable(10) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), i64 10, i1 false) #11\n  %15 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %7, i64 0, i32 0, i32 0\n  %16 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %7, i64 0, i32 1\n  store i64 10, i64* %16, align 8, !tbaa !8\n  %17 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %7, i64 0, i32 2, i32 1, i64 2\n  store i8 0, i8* %17, align 2, !tbaa !11\n  %18 = bitcast %\"class.std::__cxx11::basic_string\"* %8 to i8*\n  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %18) #11\n  %19 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %8, i64 0, i32 2\n  %20 = bitcast %\"class.std::__cxx11::basic_string\"* %8 to %union.anon**\n  store %union.anon* %19, %union.anon** %20, align 8, !tbaa !3\n  %21 = bitcast %union.anon* %19 to i8*\n  %22 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %8, i64 0, i32 0, i32 0\n  %23 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %8, i64 0, i32 1\n  store i64 0, i64* %23, align 8, !tbaa !8\n  store i8 0, i8* %21, align 8, !tbaa !11\n  %24 = bitcast %\"class.std::__cxx11::basic_string\"* %9 to i8*\n  %25 = bitcast %\"class.std::vector\"* %0 to i8*\n  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(24) %25, i8 0, i64 24, i1 false)\n  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %24) #11\n  call void @llvm.experimental.noalias.scope.decl(metadata !12)\n  %26 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %9, i64 0, i32 2\n  %27 = bitcast %\"class.std::__cxx11::basic_string\"* %9 to %union.anon**\n  store %union.anon* %26, %union.anon** %27, align 8, !tbaa !3, !alias.scope !12\n  %28 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %1, i64 0, i32 0, i32 0\n  %29 = load i8*, i8** %28, align 8, !tbaa !15, !noalias !12\n  %30 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %1, i64 0, i32 1\n  %31 = load i64, i64* %30, align 8, !tbaa !8, !noalias !12\n  %32 = bitcast i64* %6 to i8*\n  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %32) #11, !noalias !12\n  store i64 %31, i64* %6, align 8, !tbaa !16, !noalias !12\n  %33 = icmp ugt i64 %31, 15\n  br i1 %33, label %36, label %34\n\n34:                                               ; preds = %3\n  %35 = bitcast %union.anon* %26 to i8*\n  br label %42\n\n36:                                               ; preds = %3\n  %37 = invoke i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %9, i64* nonnull align 8 dereferenceable(8) %6, i64 0)\n          to label %38 unwind label %117\n\n38:                                               ; preds = %36\n  %39 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %9, i64 0, i32 0, i32 0\n  store i8* %37, i8** %39, align 8, !tbaa !15, !alias.scope !12\n  %40 = load i64, i64* %6, align 8, !tbaa !16, !noalias !12\n  %41 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %9, i64 0, i32 2, i32 0\n  store i64 %40, i64* %41, align 8, !tbaa !11, !alias.scope !12\n  br label %42\n\n42:                                               ; preds = %38, %34\n  %43 = phi i8* [ %35, %34 ], [ %37, %38 ]\n  switch i64 %31, label %46 [\n    i64 1, label %44\n    i64 0, label %47\n  ]\n\n44:                                               ; preds = %42\n  %45 = load i8, i8* %29, align 1, !tbaa !11\n  store i8 %45, i8* %43, align 1, !tbaa !11\n  br label %47\n\n46:                                               ; preds = %42\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %43, i8* align 1 %29, i64 %31, i1 false) #11\n  br label %47\n\n47:                                               ; preds = %46, %44, %42\n  %48 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %9, i64 0, i32 0, i32 0\n  %49 = load i64, i64* %6, align 8, !tbaa !16, !noalias !12\n  %50 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %9, i64 0, i32 1\n  store i64 %49, i64* %50, align 8, !tbaa !8, !alias.scope !12\n  %51 = load i8*, i8** %48, align 8, !tbaa !15, !alias.scope !12\n  %52 = getelementptr inbounds i8, i8* %51, i64 %49\n  store i8 0, i8* %52, align 1, !tbaa !11\n  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %32) #11, !noalias !12\n  %53 = load i64, i64* %50, align 8, !tbaa !8, !alias.scope !12\n  %54 = invoke nonnull align 8 dereferenceable(32) %\"class.std::__cxx11::basic_string\"* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEmmmc(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %9, i64 %53, i64 0, i64 1, i8 signext 32)\n          to label %61 unwind label %55\n\n55:                                               ; preds = %47\n  %56 = landingpad { i8*, i32 }\n          cleanup\n  %57 = load i8*, i8** %48, align 8, !tbaa !15, !alias.scope !12\n  %58 = bitcast %union.anon* %26 to i8*\n  %59 = icmp eq i8* %57, %58\n  br i1 %59, label %119, label %60\n\n60:                                               ; preds = %55\n  call void @_ZdlPv(i8* %57) #11\n  br label %119\n\n61:                                               ; preds = %47\n  %62 = load i8*, i8** %48, align 8, !tbaa !15\n  %63 = bitcast %union.anon* %26 to i8*\n  %64 = icmp eq i8* %62, %63\n  br i1 %64, label %65, label %79\n\n65:                                               ; preds = %61\n  %66 = load i64, i64* %50, align 8, !tbaa !8\n  %67 = icmp eq i64 %66, 0\n  br i1 %67, label %74, label %68\n\n68:                                               ; preds = %65\n  %69 = load i8*, i8** %28, align 8, !tbaa !15\n  %70 = icmp eq i64 %66, 1\n  br i1 %70, label %71, label %73\n\n71:                                               ; preds = %68\n  %72 = load i8, i8* %63, align 8, !tbaa !11\n  store i8 %72, i8* %69, align 1, !tbaa !11\n  br label %74\n\n73:                                               ; preds = %68\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %69, i8* nonnull align 8 %63, i64 %66, i1 false) #11\n  br label %74\n\n74:                                               ; preds = %73, %71, %65\n  %75 = load i64, i64* %50, align 8, !tbaa !8\n  store i64 %75, i64* %30, align 8, !tbaa !8\n  %76 = load i8*, i8** %28, align 8, !tbaa !15\n  %77 = getelementptr inbounds i8, i8* %76, i64 %75\n  store i8 0, i8* %77, align 1, !tbaa !11\n  %78 = load i8*, i8** %48, align 8, !tbaa !15\n  br label %94\n\n79:                                               ; preds = %61\n  %80 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %1, i64 0, i32 2\n  %81 = bitcast %union.anon* %80 to i8*\n  %82 = load i8*, i8** %28, align 8, !tbaa !15\n  %83 = icmp eq i8* %82, %81\n  %84 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %1, i64 0, i32 2, i32 0\n  %85 = load i64, i64* %84, align 8\n  store i8* %62, i8** %28, align 8, !tbaa !15\n  %86 = bitcast i64* %50 to <2 x i64>*\n  %87 = load <2 x i64>, <2 x i64>* %86, align 8, !tbaa !11\n  %88 = bitcast i64* %30 to <2 x i64>*\n  store <2 x i64> %87, <2 x i64>* %88, align 8, !tbaa !11\n  %89 = icmp eq i8* %82, null\n  %90 = or i1 %83, %89\n  br i1 %90, label %93, label %91\n\n91:                                               ; preds = %79\n  store i8* %82, i8** %48, align 8, !tbaa !15\n  %92 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %9, i64 0, i32 2, i32 0\n  store i64 %85, i64* %92, align 8, !tbaa !11\n  br label %94\n\n93:                                               ; preds = %79\n  store %union.anon* %26, %union.anon** %27, align 8, !tbaa !15\n  br label %94\n\n94:                                               ; preds = %74, %91, %93\n  %95 = phi i8* [ %78, %74 ], [ %82, %91 ], [ %63, %93 ]\n  store i64 0, i64* %50, align 8, !tbaa !8\n  store i8 0, i8* %95, align 1, !tbaa !11\n  %96 = load i8*, i8** %48, align 8, !tbaa !15\n  %97 = icmp eq i8* %96, %63\n  br i1 %97, label %99, label %98\n\n98:                                               ; preds = %94\n  call void @_ZdlPv(i8* %96) #11\n  br label %99\n\n99:                                               ; preds = %94, %98\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %24) #11\n  %100 = bitcast %\"class.std::__cxx11::basic_string\"* %10 to i8*\n  %101 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %10, i64 0, i32 2\n  %102 = bitcast %\"class.std::__cxx11::basic_string\"* %10 to %union.anon**\n  %103 = bitcast i64* %4 to i8*\n  %104 = bitcast %union.anon* %101 to i8*\n  %105 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %10, i64 0, i32 0, i32 0\n  %106 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %10, i64 0, i32 2, i32 0\n  %107 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %10, i64 0, i32 1\n  %108 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %8, i64 0, i32 2, i32 0\n  %109 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0, i64 0, i32 0, i32 0, i32 0, i32 1\n  %110 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0, i64 0, i32 0, i32 0, i32 0, i32 2\n  %111 = bitcast i64* %5 to i8*\n  %112 = load i64, i64* %30, align 8, !tbaa !8\n  %113 = icmp eq i64 %112, 0\n  br i1 %113, label %306, label %114\n\n114:                                              ; preds = %99\n  %115 = bitcast i64* %107 to <2 x i64>*\n  %116 = bitcast i64* %23 to <2 x i64>*\n  br label %121\n\n117:                                              ; preds = %36\n  %118 = landingpad { i8*, i32 }\n          cleanup\n  br label %119\n\n119:                                              ; preds = %55, %60, %117\n  %120 = phi { i8*, i32 } [ %118, %117 ], [ %56, %60 ], [ %56, %55 ]\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %24) #11\n  br label %301\n\n121:                                              ; preds = %114, %296\n  %122 = phi i64 [ %298, %296 ], [ 0, %114 ]\n  %123 = phi i32 [ %297, %296 ], [ 0, %114 ]\n  %124 = load i8*, i8** %28, align 8, !tbaa !15\n  %125 = getelementptr inbounds i8, i8* %124, i64 %122\n  %126 = load i8, i8* %125, align 1, !tbaa !11\n  %127 = icmp eq i8 %126, 32\n  br i1 %127, label %128, label %167\n\n128:                                              ; preds = %121\n  %129 = icmp eq i32 %123, %2\n  br i1 %129, label %130, label %164\n\n130:                                              ; preds = %128\n  %131 = load %\"class.std::__cxx11::basic_string\"*, %\"class.std::__cxx11::basic_string\"** %109, align 8, !tbaa !17\n  %132 = load %\"class.std::__cxx11::basic_string\"*, %\"class.std::__cxx11::basic_string\"** %110, align 8, !tbaa !19\n  %133 = icmp eq %\"class.std::__cxx11::basic_string\"* %131, %132\n  br i1 %133, label %161, label %134\n\n134:                                              ; preds = %130\n  %135 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %131, i64 0, i32 2\n  %136 = bitcast %\"class.std::__cxx11::basic_string\"* %131 to %union.anon**\n  store %union.anon* %135, %union.anon** %136, align 8, !tbaa !3\n  %137 = load i8*, i8** %22, align 8, !tbaa !15\n  %138 = load i64, i64* %23, align 8, !tbaa !8\n  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %111) #11\n  store i64 %138, i64* %5, align 8, !tbaa !16\n  %139 = icmp ugt i64 %138, 15\n  br i1 %139, label %142, label %140\n\n140:                                              ; preds = %134\n  %141 = bitcast %union.anon* %135 to i8*\n  br label %148\n\n142:                                              ; preds = %134\n  %143 = invoke i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %131, i64* nonnull align 8 dereferenceable(8) %5, i64 0)\n          to label %144 unwind label %162\n\n144:                                              ; preds = %142\n  %145 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %131, i64 0, i32 0, i32 0\n  store i8* %143, i8** %145, align 8, !tbaa !15\n  %146 = load i64, i64* %5, align 8, !tbaa !16\n  %147 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %131, i64 0, i32 2, i32 0\n  store i64 %146, i64* %147, align 8, !tbaa !11\n  br label %148\n\n148:                                              ; preds = %144, %140\n  %149 = phi i8* [ %141, %140 ], [ %143, %144 ]\n  switch i64 %138, label %152 [\n    i64 1, label %150\n    i64 0, label %153\n  ]\n\n150:                                              ; preds = %148\n  %151 = load i8, i8* %137, align 1, !tbaa !11\n  store i8 %151, i8* %149, align 1, !tbaa !11\n  br label %153\n\n152:                                              ; preds = %148\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %149, i8* align 1 %137, i64 %138, i1 false) #11\n  br label %153\n\n153:                                              ; preds = %152, %150, %148\n  %154 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %131, i64 0, i32 0, i32 0\n  %155 = load i64, i64* %5, align 8, !tbaa !16\n  %156 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %131, i64 0, i32 1\n  store i64 %155, i64* %156, align 8, !tbaa !8\n  %157 = load i8*, i8** %154, align 8, !tbaa !15\n  %158 = getelementptr inbounds i8, i8* %157, i64 %155\n  store i8 0, i8* %158, align 1, !tbaa !11\n  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %111) #11\n  %159 = load %\"class.std::__cxx11::basic_string\"*, %\"class.std::__cxx11::basic_string\"** %109, align 8, !tbaa !17\n  %160 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %159, i64 1\n  store %\"class.std::__cxx11::basic_string\"* %160, %\"class.std::__cxx11::basic_string\"** %109, align 8, !tbaa !17\n  br label %164\n\n161:                                              ; preds = %130\n  invoke void @_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_realloc_insertIJRKS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_(%\"class.std::vector\"* nonnull align 8 dereferenceable(24) %0, %\"class.std::__cxx11::basic_string\"* %131, %\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %8)\n          to label %164 unwind label %162\n\n162:                                              ; preds = %164, %161, %142\n  %163 = landingpad { i8*, i32 }\n          cleanup\n  br label %301\n\n164:                                              ; preds = %153, %161, %128\n  %165 = load i64, i64* %23, align 8, !tbaa !8\n  %166 = invoke nonnull align 8 dereferenceable(32) %\"class.std::__cxx11::basic_string\"* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %8, i64 0, i64 %165, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.1, i64 0, i64 0), i64 0)\n          to label %296 unwind label %162\n\n167:                                              ; preds = %121\n  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %100) #11\n  call void @llvm.experimental.noalias.scope.decl(metadata !20)\n  store %union.anon* %101, %union.anon** %102, align 8, !tbaa !3, !alias.scope !20\n  %168 = load i8*, i8** %22, align 8, !tbaa !15, !noalias !20\n  %169 = load i64, i64* %23, align 8, !tbaa !8, !noalias !20\n  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %103) #11, !noalias !20\n  store i64 %169, i64* %4, align 8, !tbaa !16, !noalias !20\n  %170 = icmp ugt i64 %169, 15\n  br i1 %170, label %171, label %175\n\n171:                                              ; preds = %167\n  %172 = invoke i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %10, i64* nonnull align 8 dereferenceable(8) %4, i64 0)\n          to label %173 unwind label %292\n\n173:                                              ; preds = %171\n  store i8* %172, i8** %105, align 8, !tbaa !15, !alias.scope !20\n  %174 = load i64, i64* %4, align 8, !tbaa !16, !noalias !20\n  store i64 %174, i64* %106, align 8, !tbaa !11, !alias.scope !20\n  br label %175\n\n175:                                              ; preds = %167, %173\n  %176 = phi i8* [ %172, %173 ], [ %104, %167 ]\n  switch i64 %169, label %179 [\n    i64 1, label %177\n    i64 0, label %180\n  ]\n\n177:                                              ; preds = %175\n  %178 = load i8, i8* %168, align 1, !tbaa !11\n  store i8 %178, i8* %176, align 1, !tbaa !11\n  br label %180\n\n179:                                              ; preds = %175\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %176, i8* align 1 %168, i64 %169, i1 false) #11\n  br label %180\n\n180:                                              ; preds = %179, %177, %175\n  %181 = load i64, i64* %4, align 8, !tbaa !16, !noalias !20\n  store i64 %181, i64* %107, align 8, !tbaa !8, !alias.scope !20\n  %182 = load i8*, i8** %105, align 8, !tbaa !15, !alias.scope !20\n  %183 = getelementptr inbounds i8, i8* %182, i64 %181\n  store i8 0, i8* %183, align 1, !tbaa !11\n  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %103) #11, !noalias !20\n  %184 = load i64, i64* %107, align 8, !tbaa !8, !alias.scope !20\n  %185 = invoke nonnull align 8 dereferenceable(32) %\"class.std::__cxx11::basic_string\"* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEmmmc(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %10, i64 %184, i64 0, i64 1, i8 signext %126)\n          to label %191 unwind label %186\n\n186:                                              ; preds = %180\n  %187 = landingpad { i8*, i32 }\n          cleanup\n  %188 = load i8*, i8** %105, align 8, !tbaa !15, !alias.scope !20\n  %189 = icmp eq i8* %188, %104\n  br i1 %189, label %294, label %190\n\n190:                                              ; preds = %186\n  call void @_ZdlPv(i8* %188) #11\n  br label %294\n\n191:                                              ; preds = %180\n  %192 = load i8*, i8** %105, align 8, !tbaa !15\n  %193 = icmp eq i8* %192, %104\n  br i1 %193, label %194, label %208\n\n194:                                              ; preds = %191\n  %195 = load i64, i64* %107, align 8, !tbaa !8\n  %196 = icmp eq i64 %195, 0\n  br i1 %196, label %203, label %197\n\n197:                                              ; preds = %194\n  %198 = load i8*, i8** %22, align 8, !tbaa !15\n  %199 = icmp eq i64 %195, 1\n  br i1 %199, label %200, label %202\n\n200:                                              ; preds = %197\n  %201 = load i8, i8* %104, align 8, !tbaa !11\n  store i8 %201, i8* %198, align 1, !tbaa !11\n  br label %203\n\n202:                                              ; preds = %197\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %198, i8* nonnull align 8 %104, i64 %195, i1 false) #11\n  br label %203\n\n203:                                              ; preds = %202, %200, %194\n  %204 = load i64, i64* %107, align 8, !tbaa !8\n  store i64 %204, i64* %23, align 8, !tbaa !8\n  %205 = load i8*, i8** %22, align 8, !tbaa !15\n  %206 = getelementptr inbounds i8, i8* %205, i64 %204\n  store i8 0, i8* %206, align 1, !tbaa !11\n  %207 = load i8*, i8** %105, align 8, !tbaa !15\n  br label %217\n\n208:                                              ; preds = %191\n  %209 = load i8*, i8** %22, align 8, !tbaa !15\n  %210 = icmp eq i8* %209, %21\n  %211 = load i64, i64* %108, align 8\n  store i8* %192, i8** %22, align 8, !tbaa !15\n  %212 = load <2 x i64>, <2 x i64>* %115, align 8, !tbaa !11\n  store <2 x i64> %212, <2 x i64>* %116, align 8, !tbaa !11\n  %213 = icmp eq i8* %209, null\n  %214 = or i1 %210, %213\n  br i1 %214, label %216, label %215\n\n215:                                              ; preds = %208\n  store i8* %209, i8** %105, align 8, !tbaa !15\n  store i64 %211, i64* %106, align 8, !tbaa !11\n  br label %217\n\n216:                                              ; preds = %208\n  store %union.anon* %101, %union.anon** %102, align 8, !tbaa !15\n  br label %217\n\n217:                                              ; preds = %203, %215, %216\n  %218 = phi i8* [ %207, %203 ], [ %209, %215 ], [ %104, %216 ]\n  store i64 0, i64* %107, align 8, !tbaa !8\n  store i8 0, i8* %218, align 1, !tbaa !11\n  %219 = load i8*, i8** %105, align 8, !tbaa !15\n  %220 = icmp eq i8* %219, %104\n  br i1 %220, label %222, label %221\n\n221:                                              ; preds = %217\n  call void @_ZdlPv(i8* %219) #11\n  br label %222\n\n222:                                              ; preds = %217, %221\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %100) #11\n  %223 = load i8*, i8** %28, align 8, !tbaa !15\n  %224 = getelementptr inbounds i8, i8* %223, i64 %122\n  %225 = load i8, i8* %224, align 1, !tbaa !11\n  %226 = icmp sgt i8 %225, 64\n  br i1 %226, label %227, label %296\n\n227:                                              ; preds = %222\n  %228 = icmp slt i8 %225, 91\n  %229 = add nsw i8 %225, -97\n  %230 = icmp ult i8 %229, 26\n  %231 = or i1 %228, %230\n  br i1 %231, label %232, label %296\n\n232:                                              ; preds = %227\n  %233 = load i8*, i8** %15, align 8, !tbaa !15\n  %234 = load i64, i64* %16, align 8, !tbaa !8\n  %235 = getelementptr inbounds i8, i8* %233, i64 %234\n  %236 = ptrtoint i8* %235 to i64\n  %237 = icmp sgt i64 %234, 3\n  br i1 %237, label %238, label %261\n\n238:                                              ; preds = %232\n  %239 = lshr i64 %234, 2\n  br label %240\n\n240:                                              ; preds = %257, %238\n  %241 = phi i64 [ %239, %238 ], [ %259, %257 ]\n  %242 = phi i8* [ %233, %238 ], [ %258, %257 ]\n  %243 = load i8, i8* %242, align 1, !tbaa !11\n  %244 = icmp eq i8 %243, %225\n  br i1 %244, label %287, label %245\n\n245:                                              ; preds = %240\n  %246 = getelementptr inbounds i8, i8* %242, i64 1\n  %247 = load i8, i8* %246, align 1, !tbaa !11\n  %248 = icmp eq i8 %247, %225\n  br i1 %248, label %285, label %249\n\n249:                                              ; preds = %245\n  %250 = getelementptr inbounds i8, i8* %242, i64 2\n  %251 = load i8, i8* %250, align 1, !tbaa !11\n  %252 = icmp eq i8 %251, %225\n  br i1 %252, label %283, label %253\n\n253:                                              ; preds = %249\n  %254 = getelementptr inbounds i8, i8* %242, i64 3\n  %255 = load i8, i8* %254, align 1, !tbaa !11\n  %256 = icmp eq i8 %255, %225\n  br i1 %256, label %281, label %257\n\n257:                                              ; preds = %253\n  %258 = getelementptr inbounds i8, i8* %242, i64 4\n  %259 = add nsw i64 %241, -1\n  %260 = icmp sgt i64 %241, 1\n  br i1 %260, label %240, label %261, !llvm.loop !23\n\n261:                                              ; preds = %257, %232\n  %262 = phi i8* [ %233, %232 ], [ %258, %257 ]\n  %263 = ptrtoint i8* %262 to i64\n  %264 = sub i64 %236, %263\n  switch i64 %264, label %280 [\n    i64 3, label %265\n    i64 2, label %270\n    i64 1, label %276\n  ]\n\n265:                                              ; preds = %261\n  %266 = load i8, i8* %262, align 1, !tbaa !11\n  %267 = icmp eq i8 %266, %225\n  br i1 %267, label %287, label %268\n\n268:                                              ; preds = %265\n  %269 = getelementptr inbounds i8, i8* %262, i64 1\n  br label %270\n\n270:                                              ; preds = %261, %268\n  %271 = phi i8* [ %269, %268 ], [ %262, %261 ]\n  %272 = load i8, i8* %271, align 1, !tbaa !11\n  %273 = icmp eq i8 %272, %225\n  br i1 %273, label %287, label %274\n\n274:                                              ; preds = %270\n  %275 = getelementptr inbounds i8, i8* %271, i64 1\n  br label %276\n\n276:                                              ; preds = %261, %274\n  %277 = phi i8* [ %275, %274 ], [ %262, %261 ]\n  %278 = load i8, i8* %277, align 1, !tbaa !11\n  %279 = icmp eq i8 %278, %225\n  br i1 %279, label %287, label %280\n\n280:                                              ; preds = %276, %261\n  br label %287\n\n281:                                              ; preds = %253\n  %282 = getelementptr inbounds i8, i8* %242, i64 3\n  br label %287\n\n283:                                              ; preds = %249\n  %284 = getelementptr inbounds i8, i8* %242, i64 2\n  br label %287\n\n285:                                              ; preds = %245\n  %286 = getelementptr inbounds i8, i8* %242, i64 1\n  br label %287\n\n287:                                              ; preds = %240, %281, %283, %285, %280, %276, %270, %265\n  %288 = phi i8* [ %235, %280 ], [ %262, %265 ], [ %271, %270 ], [ %277, %276 ], [ %282, %281 ], [ %284, %283 ], [ %286, %285 ], [ %242, %240 ]\n  %289 = icmp eq i8* %288, %235\n  %290 = zext i1 %289 to i32\n  %291 = add nsw i32 %123, %290\n  br label %296\n\n292:                                              ; preds = %171\n  %293 = landingpad { i8*, i32 }\n          cleanup\n  br label %294\n\n294:                                              ; preds = %186, %190, %292\n  %295 = phi { i8*, i32 } [ %293, %292 ], [ %187, %190 ], [ %187, %186 ]\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %100) #11\n  br label %301\n\n296:                                              ; preds = %227, %222, %164, %287\n  %297 = phi i32 [ %291, %287 ], [ 0, %164 ], [ %123, %222 ], [ %123, %227 ]\n  %298 = add nuw i64 %122, 1\n  %299 = load i64, i64* %30, align 8, !tbaa !8\n  %300 = icmp ugt i64 %299, %298\n  br i1 %300, label %121, label %306, !llvm.loop !25\n\n301:                                              ; preds = %162, %294, %119\n  %302 = phi { i8*, i32 } [ %120, %119 ], [ %163, %162 ], [ %295, %294 ]\n  call void @_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED2Ev(%\"class.std::vector\"* nonnull align 8 dereferenceable(24) %0) #11\n  %303 = load i8*, i8** %22, align 8, !tbaa !15\n  %304 = icmp eq i8* %303, %21\n  br i1 %304, label %315, label %305\n\n305:                                              ; preds = %301\n  call void @_ZdlPv(i8* %303) #11\n  br label %315\n\n306:                                              ; preds = %296, %99\n  %307 = load i8*, i8** %22, align 8, !tbaa !15\n  %308 = icmp eq i8* %307, %21\n  br i1 %308, label %310, label %309\n\n309:                                              ; preds = %306\n  call void @_ZdlPv(i8* %307) #11\n  br label %310\n\n310:                                              ; preds = %306, %309\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %18) #11\n  %311 = load i8*, i8** %15, align 8, !tbaa !15\n  %312 = icmp eq i8* %311, %14\n  br i1 %312, label %314, label %313\n\n313:                                              ; preds = %310\n  call void @_ZdlPv(i8* %311) #11\n  br label %314\n\n314:                                              ; preds = %310, %313\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %11) #11\n  ret void\n\n315:                                              ; preds = %305, %301\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %18) #11\n  %316 = load i8*, i8** %15, align 8, !tbaa !15\n  %317 = icmp eq i8* %316, %14\n  br i1 %317, label %319, label %318\n\n318:                                              ; preds = %315\n  call void @_ZdlPv(i8* %316) #11\n  br label %319\n\n319:                                              ; preds = %318, %315\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %11) #11\n  resume { i8*, i32 } %302\n}\n\n; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn\ndeclare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1\n\ndeclare dso_local i32 @__gxx_personality_v0(...)\n\n; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn\ndeclare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1\n\n; Function Attrs: argmemonly mustprogress nofree nounwind willreturn writeonly\ndeclare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2\n\n; Function Attrs: nounwind uwtable\ndefine linkonce_odr dso_local void @_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED2Ev(%\"class.std::vector\"* nonnull align 8 dereferenceable(24) %0) unnamed_addr #3 comdat align 2 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {\n  %2 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0, i64 0, i32 0, i32 0, i32 0, i32 0\n  %3 = load %\"class.std::__cxx11::basic_string\"*, %\"class.std::__cxx11::basic_string\"** %2, align 8, !tbaa !26\n  %4 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0, i64 0, i32 0, i32 0, i32 0, i32 1\n  %5 = load %\"class.std::__cxx11::basic_string\"*, %\"class.std::__cxx11::basic_string\"** %4, align 8, !tbaa !17\n  %6 = icmp eq %\"class.std::__cxx11::basic_string\"* %3, %5\n  br i1 %6, label %20, label %7\n\n7:                                                ; preds = %1, %15\n  %8 = phi %\"class.std::__cxx11::basic_string\"* [ %16, %15 ], [ %3, %1 ]\n  %9 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %8, i64 0, i32 0, i32 0\n  %10 = load i8*, i8** %9, align 8, !tbaa !15\n  %11 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %8, i64 0, i32 2\n  %12 = bitcast %union.anon* %11 to i8*\n  %13 = icmp eq i8* %10, %12\n  br i1 %13, label %15, label %14\n\n14:                                               ; preds = %7\n  tail call void @_ZdlPv(i8* %10) #11\n  br label %15\n\n15:                                               ; preds = %14, %7\n  %16 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %8, i64 1\n  %17 = icmp eq %\"class.std::__cxx11::basic_string\"* %16, %5\n  br i1 %17, label %18, label %7, !llvm.loop !27\n\n18:                                               ; preds = %15\n  %19 = load %\"class.std::__cxx11::basic_string\"*, %\"class.std::__cxx11::basic_string\"** %2, align 8, !tbaa !26\n  br label %20\n\n20:                                               ; preds = %18, %1\n  %21 = phi %\"class.std::__cxx11::basic_string\"* [ %19, %18 ], [ %3, %1 ]\n  %22 = icmp eq %\"class.std::__cxx11::basic_string\"* %21, null\n  br i1 %22, label %25, label %23\n\n23:                                               ; preds = %20\n  %24 = bitcast %\"class.std::__cxx11::basic_string\"* %21 to i8*\n  tail call void @_ZdlPv(i8* nonnull %24) #11\n  br label %25\n\n25:                                               ; preds = %20, %23\n  ret void\n}\n\n; Function Attrs: noinline noreturn nounwind\ndefine linkonce_odr hidden void @__clang_call_terminate(i8* %0) local_unnamed_addr #4 comdat {\n  %2 = tail call i8* @__cxa_begin_catch(i8* %0) #11\n  tail call void @_ZSt9terminatev() #12\n  unreachable\n}\n\ndeclare dso_local i8* @__cxa_begin_catch(i8*) local_unnamed_addr\n\ndeclare dso_local void @_ZSt9terminatev() local_unnamed_addr\n\n; Function Attrs: nobuiltin nounwind\ndeclare dso_local void @_ZdlPv(i8*) local_unnamed_addr #5\n\ndeclare dso_local i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32), i64* nonnull align 8 dereferenceable(8), i64) local_unnamed_addr #6\n\n; Function Attrs: argmemonly mustprogress nofree nounwind willreturn\ndeclare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #7\n\ndeclare dso_local nonnull align 8 dereferenceable(32) %\"class.std::__cxx11::basic_string\"* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEmmmc(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32), i64, i64, i64, i8 signext) local_unnamed_addr #6\n\n; Function Attrs: uwtable\ndefine linkonce_odr dso_local void @_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_realloc_insertIJRKS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_(%\"class.std::vector\"* nonnull align 8 dereferenceable(24) %0, %\"class.std::__cxx11::basic_string\"* %1, %\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %2) local_unnamed_addr #0 comdat align 2 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {\n  %4 = alloca i64, align 8\n  %5 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0, i64 0, i32 0, i32 0, i32 0, i32 1\n  %6 = load %\"class.std::__cxx11::basic_string\"*, %\"class.std::__cxx11::basic_string\"** %5, align 8, !tbaa !17\n  %7 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0, i64 0, i32 0, i32 0, i32 0, i32 0\n  %8 = load %\"class.std::__cxx11::basic_string\"*, %\"class.std::__cxx11::basic_string\"** %7, align 8, !tbaa !26\n  %9 = ptrtoint %\"class.std::__cxx11::basic_string\"* %6 to i64\n  %10 = ptrtoint %\"class.std::__cxx11::basic_string\"* %8 to i64\n  %11 = sub i64 %9, %10\n  %12 = ashr exact i64 %11, 5\n  %13 = icmp eq i64 %11, 9223372036854775776\n  br i1 %13, label %14, label %15\n\n14:                                               ; preds = %3\n  tail call void @_ZSt20__throw_length_errorPKc(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.3, i64 0, i64 0)) #13\n  unreachable\n\n15:                                               ; preds = %3\n  %16 = icmp eq i64 %11, 0\n  %17 = select i1 %16, i64 1, i64 %12\n  %18 = add nsw i64 %17, %12\n  %19 = icmp ult i64 %18, %12\n  %20 = icmp ugt i64 %18, 288230376151711743\n  %21 = or i1 %19, %20\n  %22 = select i1 %21, i64 288230376151711743, i64 %18\n  %23 = ptrtoint %\"class.std::__cxx11::basic_string\"* %1 to i64\n  %24 = sub i64 %23, %10\n  %25 = ashr exact i64 %24, 5\n  %26 = icmp eq i64 %22, 0\n  br i1 %26, label %31, label %27\n\n27:                                               ; preds = %15\n  %28 = shl nuw nsw i64 %22, 5\n  %29 = tail call noalias nonnull i8* @_Znwm(i64 %28) #14\n  %30 = bitcast i8* %29 to %\"class.std::__cxx11::basic_string\"*\n  br label %31\n\n31:                                               ; preds = %15, %27\n  %32 = phi %\"class.std::__cxx11::basic_string\"* [ %30, %27 ], [ null, %15 ]\n  %33 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %32, i64 %25\n  %34 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %32, i64 %25, i32 2\n  %35 = bitcast %\"class.std::__cxx11::basic_string\"* %33 to %union.anon**\n  store %union.anon* %34, %union.anon** %35, align 8, !tbaa !3\n  %36 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %2, i64 0, i32 0, i32 0\n  %37 = load i8*, i8** %36, align 8, !tbaa !15\n  %38 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %2, i64 0, i32 1\n  %39 = load i64, i64* %38, align 8, !tbaa !8\n  %40 = bitcast i64* %4 to i8*\n  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %40) #11\n  store i64 %39, i64* %4, align 8, !tbaa !16\n  %41 = icmp ugt i64 %39, 15\n  br i1 %41, label %44, label %42\n\n42:                                               ; preds = %31\n  %43 = bitcast %union.anon* %34 to i8*\n  br label %50\n\n44:                                               ; preds = %31\n  %45 = invoke i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %33, i64* nonnull align 8 dereferenceable(8) %4, i64 0)\n          to label %46 unwind label %126\n\n46:                                               ; preds = %44\n  %47 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %33, i64 0, i32 0, i32 0\n  store i8* %45, i8** %47, align 8, !tbaa !15\n  %48 = load i64, i64* %4, align 8, !tbaa !16\n  %49 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %32, i64 %25, i32 2, i32 0\n  store i64 %48, i64* %49, align 8, !tbaa !11\n  br label %50\n\n50:                                               ; preds = %46, %42\n  %51 = phi i8* [ %43, %42 ], [ %45, %46 ]\n  switch i64 %39, label %54 [\n    i64 1, label %52\n    i64 0, label %55\n  ]\n\n52:                                               ; preds = %50\n  %53 = load i8, i8* %37, align 1, !tbaa !11\n  store i8 %53, i8* %51, align 1, !tbaa !11\n  br label %55\n\n54:                                               ; preds = %50\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %51, i8* align 1 %37, i64 %39, i1 false) #11\n  br label %55\n\n55:                                               ; preds = %54, %52, %50\n  %56 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %33, i64 0, i32 0, i32 0\n  %57 = load i64, i64* %4, align 8, !tbaa !16\n  %58 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %32, i64 %25, i32 1\n  store i64 %57, i64* %58, align 8, !tbaa !8\n  %59 = load i8*, i8** %56, align 8, !tbaa !15\n  %60 = getelementptr inbounds i8, i8* %59, i64 %57\n  store i8 0, i8* %60, align 1, !tbaa !11\n  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %40) #11\n  %61 = icmp eq %\"class.std::__cxx11::basic_string\"* %8, %1\n  br i1 %61, label %87, label %62\n\n62:                                               ; preds = %55, %79\n  %63 = phi %\"class.std::__cxx11::basic_string\"* [ %85, %79 ], [ %32, %55 ]\n  %64 = phi %\"class.std::__cxx11::basic_string\"* [ %84, %79 ], [ %8, %55 ]\n  %65 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %63, i64 0, i32 2\n  %66 = bitcast %\"class.std::__cxx11::basic_string\"* %63 to %union.anon**\n  store %union.anon* %65, %union.anon** %66, align 8, !tbaa !3\n  %67 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %64, i64 0, i32 0, i32 0\n  %68 = load i8*, i8** %67, align 8, !tbaa !15\n  %69 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %64, i64 0, i32 2\n  %70 = bitcast %union.anon* %69 to i8*\n  %71 = icmp eq i8* %68, %70\n  br i1 %71, label %72, label %74\n\n72:                                               ; preds = %62\n  %73 = bitcast %union.anon* %65 to i8*\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(16) %73, i8* noundef nonnull align 8 dereferenceable(16) %68, i64 16, i1 false) #11\n  br label %79\n\n74:                                               ; preds = %62\n  %75 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %63, i64 0, i32 0, i32 0\n  store i8* %68, i8** %75, align 8, !tbaa !15\n  %76 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %64, i64 0, i32 2, i32 0\n  %77 = load i64, i64* %76, align 8, !tbaa !11\n  %78 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %63, i64 0, i32 2, i32 0\n  store i64 %77, i64* %78, align 8, !tbaa !11\n  br label %79\n\n79:                                               ; preds = %74, %72\n  %80 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %64, i64 0, i32 1\n  %81 = load i64, i64* %80, align 8, !tbaa !8\n  %82 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %63, i64 0, i32 1\n  store i64 %81, i64* %82, align 8, !tbaa !8\n  %83 = bitcast %\"class.std::__cxx11::basic_string\"* %64 to %union.anon**\n  store %union.anon* %69, %union.anon** %83, align 8, !tbaa !15\n  store i64 0, i64* %80, align 8, !tbaa !8\n  store i8 0, i8* %70, align 8, !tbaa !11\n  %84 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %64, i64 1\n  %85 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %63, i64 1\n  %86 = icmp eq %\"class.std::__cxx11::basic_string\"* %84, %1\n  br i1 %86, label %87, label %62, !llvm.loop !28\n\n87:                                               ; preds = %79, %55\n  %88 = phi %\"class.std::__cxx11::basic_string\"* [ %32, %55 ], [ %85, %79 ]\n  %89 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %88, i64 1\n  %90 = icmp eq %\"class.std::__cxx11::basic_string\"* %6, %1\n  br i1 %90, label %116, label %91\n\n91:                                               ; preds = %87, %108\n  %92 = phi %\"class.std::__cxx11::basic_string\"* [ %114, %108 ], [ %89, %87 ]\n  %93 = phi %\"class.std::__cxx11::basic_string\"* [ %113, %108 ], [ %1, %87 ]\n  %94 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %92, i64 0, i32 2\n  %95 = bitcast %\"class.std::__cxx11::basic_string\"* %92 to %union.anon**\n  store %union.anon* %94, %union.anon** %95, align 8, !tbaa !3\n  %96 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %93, i64 0, i32 0, i32 0\n  %97 = load i8*, i8** %96, align 8, !tbaa !15\n  %98 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %93, i64 0, i32 2\n  %99 = bitcast %union.anon* %98 to i8*\n  %100 = icmp eq i8* %97, %99\n  br i1 %100, label %101, label %103\n\n101:                                              ; preds = %91\n  %102 = bitcast %union.anon* %94 to i8*\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(16) %102, i8* noundef nonnull align 8 dereferenceable(16) %97, i64 16, i1 false) #11\n  br label %108\n\n103:                                              ; preds = %91\n  %104 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %92, i64 0, i32 0, i32 0\n  store i8* %97, i8** %104, align 8, !tbaa !15\n  %105 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %93, i64 0, i32 2, i32 0\n  %106 = load i64, i64* %105, align 8, !tbaa !11\n  %107 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %92, i64 0, i32 2, i32 0\n  store i64 %106, i64* %107, align 8, !tbaa !11\n  br label %108\n\n108:                                              ; preds = %103, %101\n  %109 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %93, i64 0, i32 1\n  %110 = load i64, i64* %109, align 8, !tbaa !8\n  %111 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %92, i64 0, i32 1\n  store i64 %110, i64* %111, align 8, !tbaa !8\n  %112 = bitcast %\"class.std::__cxx11::basic_string\"* %93 to %union.anon**\n  store %union.anon* %98, %union.anon** %112, align 8, !tbaa !15\n  store i64 0, i64* %109, align 8, !tbaa !8\n  store i8 0, i8* %99, align 8, !tbaa !11\n  %113 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %93, i64 1\n  %114 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %92, i64 1\n  %115 = icmp eq %\"class.std::__cxx11::basic_string\"* %113, %6\n  br i1 %115, label %116, label %91, !llvm.loop !28\n\n116:                                              ; preds = %108, %87\n  %117 = phi %\"class.std::__cxx11::basic_string\"* [ %89, %87 ], [ %114, %108 ]\n  %118 = icmp eq %\"class.std::__cxx11::basic_string\"* %8, null\n  br i1 %118, label %121, label %119\n\n119:                                              ; preds = %116\n  %120 = bitcast %\"class.std::__cxx11::basic_string\"* %8 to i8*\n  call void @_ZdlPv(i8* nonnull %120) #11\n  br label %121\n\n121:                                              ; preds = %116, %119\n  %122 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0, i64 0, i32 0, i32 0, i32 0, i32 2\n  store %\"class.std::__cxx11::basic_string\"* %32, %\"class.std::__cxx11::basic_string\"** %7, align 8, !tbaa !26\n  store %\"class.std::__cxx11::basic_string\"* %117, %\"class.std::__cxx11::basic_string\"** %5, align 8, !tbaa !17\n  %123 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %32, i64 %22\n  store %\"class.std::__cxx11::basic_string\"* %123, %\"class.std::__cxx11::basic_string\"** %122, align 8, !tbaa !19\n  ret void\n\n124:                                              ; preds = %126\n  %125 = landingpad { i8*, i32 }\n          cleanup\n  invoke void @__cxa_end_catch()\n          to label %131 unwind label %132\n\n126:                                              ; preds = %44\n  %127 = landingpad { i8*, i32 }\n          catch i8* null\n  %128 = extractvalue { i8*, i32 } %127, 0\n  %129 = call i8* @__cxa_begin_catch(i8* %128) #11\n  %130 = bitcast %\"class.std::__cxx11::basic_string\"* %32 to i8*\n  call void @_ZdlPv(i8* nonnull %130) #11\n  invoke void @__cxa_rethrow() #13\n          to label %135 unwind label %124\n\n131:                                              ; preds = %124\n  resume { i8*, i32 } %125\n\n132:                                              ; preds = %124\n  %133 = landingpad { i8*, i32 }\n          catch i8* null\n  %134 = extractvalue { i8*, i32 } %133, 0\n  call void @__clang_call_terminate(i8* %134) #12\n  unreachable\n\n135:                                              ; preds = %126\n  unreachable\n}\n\ndeclare dso_local void @__cxa_rethrow() local_unnamed_addr\n\ndeclare dso_local void @__cxa_end_catch() local_unnamed_addr\n\n; Function Attrs: noreturn\ndeclare dso_local void @_ZSt20__throw_length_errorPKc(i8*) local_unnamed_addr #8\n\n; Function Attrs: nobuiltin allocsize(0)\ndeclare dso_local nonnull i8* @_Znwm(i64) local_unnamed_addr #9\n\ndeclare dso_local nonnull align 8 dereferenceable(32) %\"class.std::__cxx11::basic_string\"* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32), i64, i64, i8*, i64) local_unnamed_addr #6\n\n; Function Attrs: inaccessiblememonly nofree nosync nounwind willreturn\ndeclare void @llvm.experimental.noalias.scope.decl(metadata) #10\n\nattributes #0 = { uwtable \"frame-pointer\"=\"none\" \"min-legal-vector-width\"=\"0\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #1 = { argmemonly mustprogress nofree nosync nounwind willreturn }\nattributes #2 = { argmemonly mustprogress nofree nounwind willreturn writeonly }\nattributes #3 = { nounwind uwtable \"frame-pointer\"=\"none\" \"min-legal-vector-width\"=\"0\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #4 = { noinline noreturn nounwind }\nattributes #5 = { nobuiltin nounwind \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #6 = { \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #7 = { argmemonly mustprogress nofree nounwind willreturn }\nattributes #8 = { noreturn \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #9 = { nobuiltin allocsize(0) \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #10 = { inaccessiblememonly nofree nosync nounwind willreturn }\nattributes #11 = { nounwind }\nattributes #12 = { noreturn nounwind }\nattributes #13 = { noreturn }\nattributes #14 = { allocsize(0) }\n\n!llvm.module.flags = !{!0, !1}\n!llvm.ident = !{!2}\n\n!0 = !{i32 1, !\"wchar_size\", i32 4}\n!1 = !{i32 7, !\"uwtable\", i32 1}\n!2 = !{!\"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)\"}\n!3 = !{!4, !5, i64 0}\n!4 = !{!\"_ZTSNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderE\", !5, i64 0}\n!5 = !{!\"any pointer\", !6, i64 0}\n!6 = !{!\"omnipotent char\", !7, i64 0}\n!7 = !{!\"Simple C++ TBAA\"}\n!8 = !{!9, !10, i64 8}\n!9 = !{!\"_ZTSNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE\", !4, i64 0, !10, i64 8, !6, i64 16}\n!10 = !{!\"long\", !6, i64 0}\n!11 = !{!6, !6, i64 0}\n!12 = !{!13}\n!13 = distinct !{!13, !14, !\"_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_S5_: argument 0\"}\n!14 = distinct !{!14, !\"_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_S5_\"}\n!15 = !{!9, !5, i64 0}\n!16 = !{!10, !10, i64 0}\n!17 = !{!18, !5, i64 8}\n!18 = !{!\"_ZTSNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_Vector_impl_dataE\", !5, i64 0, !5, i64 8, !5, i64 16}\n!19 = !{!18, !5, i64 16}\n!20 = !{!21}\n!21 = distinct !{!21, !22, !\"_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_S5_: argument 0\"}\n!22 = distinct !{!22, !\"_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_S5_\"}\n!23 = distinct !{!23, !24}\n!24 = !{!\"llvm.loop.mustprogress\"}\n!25 = distinct !{!25, !24}\n!26 = !{!18, !5, i64 0}\n!27 = distinct !{!27, !24}\n!28 = distinct !{!28, !24}\n", "target": "This is the targeted source code:\n/*\nGiven a string s and a natural number n, you have been tasked to implement \na function that returns a vector of all words from string s that contain exactly \nn consonants, in order these words appear in the string s.\nIf the string s is empty then the function should return an empty vector.\nNote: you may assume the input string contains only letters and spaces.\nExamples:\nselect_words(\"Mary had a little lamb\", 4) ==> {\"little\"}\nselect_words(\"Mary had a little lamb\", 3) ==> {\"Mary\", \"lamb\"}\nselect_words('simple white space\", 2) ==> {}\nselect_words(\"Hello world\", 4) ==> {\"world\"}\nselect_words(\"Uncle sam\", 3) ==> {\"Uncle\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\nvector<string> select_words(string s,int n){\n\n    string vowels=\"aeiouAEIOU\";\n    string current=\"\";\n    vector<string> out={};\n    int numc=0;\n    s=s+' ';\n    for (int i=0;i<s.length();i++)\n        if (s[i]==' ')\n        {\n            if (numc==n) out.push_back(current);\n            current=\"\";\n            numc=0;\n        }\n        else\n        {\n            current=current+s[i];\n            if ((s[i]>=65 and s[i]<=90) or (s[i]>=97 and s[i]<=122))\n            if (find(vowels.begin(),vowels.end(),s[i])==vowels.end())\n                numc+=1;\n        }\n    return out;\n}\n"}
{"input": "Convert this to C++:\n; ModuleID = '../../Human_xBenchmarks_164/CPP_118/CPP_118.cpp'\nsource_filename = \"../../Human_xBenchmarks_164/CPP_118/CPP_118.cpp\"\ntarget datalayout = \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\ntarget triple = \"x86_64-unknown-linux-gnu\"\n\n%\"class.std::__cxx11::basic_string\" = type { %\"struct.std::__cxx11::basic_string<char>::_Alloc_hider\", i64, %union.anon }\n%\"struct.std::__cxx11::basic_string<char>::_Alloc_hider\" = type { i8* }\n%union.anon = type { i64, [8 x i8] }\n\n@.str.1 = private unnamed_addr constant [11 x i8] c\"AEIOUaeiou\\00\", align 1\n\n; Function Attrs: uwtable\ndefine dso_local void @_Z17get_closest_vowelNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE(%\"class.std::__cxx11::basic_string\"* noalias sret(%\"class.std::__cxx11::basic_string\") align 8 %0, %\"class.std::__cxx11::basic_string\"* nocapture readonly %1) local_unnamed_addr #0 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {\n  %3 = alloca %\"class.std::__cxx11::basic_string\", align 8\n  %4 = alloca %\"class.std::__cxx11::basic_string\", align 8\n  %5 = bitcast %\"class.std::__cxx11::basic_string\"* %3 to i8*\n  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %5) #5\n  %6 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %3, i64 0, i32 2\n  %7 = bitcast %\"class.std::__cxx11::basic_string\"* %3 to %union.anon**\n  store %union.anon* %6, %union.anon** %7, align 8, !tbaa !3\n  %8 = bitcast %union.anon* %6 to i8*\n  %9 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %3, i64 0, i32 0, i32 0\n  %10 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %3, i64 0, i32 1\n  store i64 0, i64* %10, align 8, !tbaa !8\n  store i8 0, i8* %8, align 8, !tbaa !11\n  %11 = bitcast %\"class.std::__cxx11::basic_string\"* %4 to i8*\n  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %11) #5\n  %12 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %4, i64 0, i32 2\n  %13 = bitcast %\"class.std::__cxx11::basic_string\"* %4 to %union.anon**\n  store %union.anon* %12, %union.anon** %13, align 8, !tbaa !3\n  %14 = bitcast %union.anon* %12 to i8*\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(10) %14, i8* noundef nonnull align 1 dereferenceable(10) getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0), i64 10, i1 false) #5\n  %15 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %4, i64 0, i32 0, i32 0\n  %16 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %4, i64 0, i32 1\n  store i64 10, i64* %16, align 8, !tbaa !8\n  %17 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %4, i64 0, i32 2, i32 1, i64 2\n  store i8 0, i8* %17, align 2, !tbaa !11\n  %18 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %1, i64 0, i32 1\n  %19 = load i64, i64* %18, align 8, !tbaa !8\n  %20 = trunc i64 %19 to i32\n  %21 = add i32 %20, -2\n  %22 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %4, i64 0, i32 2, i32 1, i64 2\n  %23 = icmp sgt i32 %21, 0\n  br i1 %23, label %24, label %191\n\n24:                                               ; preds = %2\n  %25 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %1, i64 0, i32 0, i32 0\n  %26 = load i8*, i8** %25, align 8, !tbaa !12\n  %27 = zext i32 %21 to i64\n  %28 = load i8, i8* %14, align 8, !tbaa !11\n  %29 = getelementptr inbounds i8, i8* %14, i64 1\n  %30 = load i8, i8* %29, align 1\n  %31 = getelementptr inbounds i8, i8* %14, i64 2\n  %32 = load i8, i8* %31, align 2\n  %33 = getelementptr inbounds i8, i8* %14, i64 3\n  %34 = load i8, i8* %33, align 1\n  %35 = getelementptr inbounds i8, i8* %14, i64 4\n  %36 = load i8, i8* %35, align 4\n  %37 = getelementptr inbounds i8, i8* %14, i64 5\n  %38 = load i8, i8* %37, align 1\n  %39 = getelementptr inbounds i8, i8* %14, i64 6\n  %40 = load i8, i8* %39, align 2\n  %41 = getelementptr inbounds i8, i8* %14, i64 7\n  %42 = load i8, i8* %41, align 1\n  %43 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %4, i64 0, i32 2, i32 1, i64 0\n  %44 = load i8, i8* %43, align 8\n  %45 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %4, i64 0, i32 2, i32 1, i64 1\n  %46 = load i8, i8* %14, align 8\n  %47 = getelementptr inbounds i8, i8* %14, i64 1\n  %48 = load i8, i8* %47, align 1\n  %49 = getelementptr inbounds i8, i8* %14, i64 2\n  %50 = load i8, i8* %49, align 2\n  %51 = getelementptr inbounds i8, i8* %14, i64 3\n  %52 = load i8, i8* %51, align 1\n  %53 = getelementptr inbounds i8, i8* %14, i64 4\n  %54 = load i8, i8* %53, align 4\n  %55 = getelementptr inbounds i8, i8* %14, i64 5\n  %56 = load i8, i8* %55, align 1\n  %57 = getelementptr inbounds i8, i8* %14, i64 6\n  %58 = load i8, i8* %57, align 2\n  %59 = getelementptr inbounds i8, i8* %14, i64 7\n  %60 = load i8, i8* %59, align 1\n  %61 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %4, i64 0, i32 2, i32 1, i64 0\n  %62 = load i8, i8* %61, align 8\n  %63 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %4, i64 0, i32 2, i32 1, i64 1\n  %64 = load i8, i8* %14, align 8\n  %65 = getelementptr inbounds i8, i8* %14, i64 1\n  %66 = load i8, i8* %65, align 1\n  %67 = getelementptr inbounds i8, i8* %14, i64 2\n  %68 = load i8, i8* %67, align 2\n  %69 = getelementptr inbounds i8, i8* %14, i64 3\n  %70 = load i8, i8* %69, align 1\n  %71 = getelementptr inbounds i8, i8* %14, i64 4\n  %72 = load i8, i8* %71, align 4\n  %73 = getelementptr inbounds i8, i8* %14, i64 5\n  %74 = load i8, i8* %73, align 1\n  %75 = getelementptr inbounds i8, i8* %14, i64 6\n  %76 = load i8, i8* %75, align 2\n  %77 = getelementptr inbounds i8, i8* %14, i64 7\n  %78 = load i8, i8* %77, align 1\n  %79 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %4, i64 0, i32 2, i32 1, i64 0\n  %80 = load i8, i8* %79, align 8\n  %81 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %4, i64 0, i32 2, i32 1, i64 1\n  br label %82\n\n82:                                               ; preds = %183, %24\n  %83 = phi i64 [ %27, %24 ], [ %186, %183 ]\n  %84 = phi i32 [ %21, %24 ], [ %184, %183 ]\n  %85 = getelementptr inbounds i8, i8* %26, i64 %83\n  %86 = load i8, i8* %85, align 1, !tbaa !11\n  %87 = icmp eq i8 %28, %86\n  br i1 %87, label %108, label %88\n\n88:                                               ; preds = %82\n  %89 = icmp eq i8 %30, %86\n  br i1 %89, label %105, label %90\n\n90:                                               ; preds = %88\n  %91 = icmp eq i8 %32, %86\n  br i1 %91, label %102, label %92\n\n92:                                               ; preds = %90\n  %93 = icmp eq i8 %34, %86\n  br i1 %93, label %99, label %94\n\n94:                                               ; preds = %92\n  %95 = icmp eq i8 %36, %86\n  br i1 %95, label %108, label %210\n\n96:                                               ; preds = %216\n  %97 = load i8, i8* %45, align 1, !tbaa !11\n  %98 = icmp eq i8 %97, %217\n  br i1 %98, label %108, label %183\n\n99:                                               ; preds = %214, %92\n  %100 = phi i8* [ %14, %92 ], [ %35, %214 ]\n  %101 = getelementptr inbounds i8, i8* %100, i64 3\n  br label %108\n\n102:                                              ; preds = %212, %90\n  %103 = phi i8* [ %14, %90 ], [ %35, %212 ]\n  %104 = getelementptr inbounds i8, i8* %103, i64 2\n  br label %108\n\n105:                                              ; preds = %210, %88\n  %106 = phi i8* [ %14, %88 ], [ %35, %210 ]\n  %107 = getelementptr inbounds i8, i8* %106, i64 1\n  br label %108\n\n108:                                              ; preds = %82, %94, %99, %102, %105, %96, %216\n  %109 = phi i8 [ %217, %216 ], [ %217, %96 ], [ %86, %105 ], [ %86, %102 ], [ %86, %99 ], [ %86, %94 ], [ %86, %82 ]\n  %110 = phi i8* [ %43, %216 ], [ %45, %96 ], [ %107, %105 ], [ %104, %102 ], [ %101, %99 ], [ %14, %82 ], [ %35, %94 ]\n  %111 = icmp eq i8* %110, %22\n  br i1 %111, label %183, label %112\n\n112:                                              ; preds = %108\n  %113 = shl i64 %83, 32\n  %114 = add i64 %113, 4294967296\n  %115 = ashr exact i64 %114, 32\n  %116 = getelementptr inbounds i8, i8* %26, i64 %115\n  %117 = load i8, i8* %116, align 1, !tbaa !11\n  %118 = icmp eq i8 %46, %117\n  br i1 %118, label %139, label %119\n\n119:                                              ; preds = %112\n  %120 = icmp eq i8 %48, %117\n  br i1 %120, label %136, label %121\n\n121:                                              ; preds = %119\n  %122 = icmp eq i8 %50, %117\n  br i1 %122, label %133, label %123\n\n123:                                              ; preds = %121\n  %124 = icmp eq i8 %52, %117\n  br i1 %124, label %130, label %125\n\n125:                                              ; preds = %123\n  %126 = icmp eq i8 %54, %117\n  br i1 %126, label %139, label %219\n\n127:                                              ; preds = %225\n  %128 = load i8, i8* %63, align 1, !tbaa !11\n  %129 = icmp eq i8 %128, %226\n  br i1 %129, label %139, label %142\n\n130:                                              ; preds = %223, %123\n  %131 = phi i8* [ %14, %123 ], [ %53, %223 ]\n  %132 = getelementptr inbounds i8, i8* %131, i64 3\n  br label %139\n\n133:                                              ; preds = %221, %121\n  %134 = phi i8* [ %14, %121 ], [ %53, %221 ]\n  %135 = getelementptr inbounds i8, i8* %134, i64 2\n  br label %139\n\n136:                                              ; preds = %219, %119\n  %137 = phi i8* [ %14, %119 ], [ %53, %219 ]\n  %138 = getelementptr inbounds i8, i8* %137, i64 1\n  br label %139\n\n139:                                              ; preds = %112, %125, %130, %133, %136, %127, %225\n  %140 = phi i8* [ %61, %225 ], [ %63, %127 ], [ %132, %130 ], [ %135, %133 ], [ %138, %136 ], [ %14, %112 ], [ %53, %125 ]\n  %141 = icmp eq i8* %140, %22\n  br i1 %141, label %142, label %183\n\n142:                                              ; preds = %139, %127\n  %143 = add nsw i32 %84, -1\n  %144 = zext i32 %143 to i64\n  %145 = getelementptr inbounds i8, i8* %26, i64 %144\n  %146 = load i8, i8* %145, align 1, !tbaa !11\n  %147 = icmp eq i8 %64, %146\n  br i1 %147, label %168, label %148\n\n148:                                              ; preds = %142\n  %149 = icmp eq i8 %66, %146\n  br i1 %149, label %165, label %150\n\n150:                                              ; preds = %148\n  %151 = icmp eq i8 %68, %146\n  br i1 %151, label %162, label %152\n\n152:                                              ; preds = %150\n  %153 = icmp eq i8 %70, %146\n  br i1 %153, label %159, label %154\n\n154:                                              ; preds = %152\n  %155 = icmp eq i8 %72, %146\n  br i1 %155, label %168, label %228\n\n156:                                              ; preds = %234\n  %157 = load i8, i8* %81, align 1, !tbaa !11\n  %158 = icmp eq i8 %157, %235\n  br i1 %158, label %168, label %171\n\n159:                                              ; preds = %232, %152\n  %160 = phi i8* [ %14, %152 ], [ %71, %232 ]\n  %161 = getelementptr inbounds i8, i8* %160, i64 3\n  br label %168\n\n162:                                              ; preds = %230, %150\n  %163 = phi i8* [ %14, %150 ], [ %71, %230 ]\n  %164 = getelementptr inbounds i8, i8* %163, i64 2\n  br label %168\n\n165:                                              ; preds = %228, %148\n  %166 = phi i8* [ %14, %148 ], [ %71, %228 ]\n  %167 = getelementptr inbounds i8, i8* %166, i64 1\n  br label %168\n\n168:                                              ; preds = %142, %154, %159, %162, %165, %156, %234\n  %169 = phi i8* [ %79, %234 ], [ %81, %156 ], [ %161, %159 ], [ %164, %162 ], [ %167, %165 ], [ %14, %142 ], [ %71, %154 ]\n  %170 = icmp eq i8* %169, %22\n  br i1 %170, label %171, label %183\n\n171:                                              ; preds = %168, %156\n  %172 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 2\n  %173 = bitcast %\"class.std::__cxx11::basic_string\"* %0 to %union.anon**\n  store %union.anon* %172, %union.anon** %173, align 8, !tbaa !3, !alias.scope !13\n  %174 = bitcast %union.anon* %172 to i8*\n  %175 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 1\n  store i64 0, i64* %175, align 8, !tbaa !8, !alias.scope !13\n  store i8 0, i8* %174, align 8, !tbaa !11\n  %176 = invoke nonnull align 8 dereferenceable(32) %\"class.std::__cxx11::basic_string\"* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEmmmc(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %0, i64 0, i64 0, i64 1, i8 signext %109)\n          to label %196 unwind label %177\n\n177:                                              ; preds = %171\n  %178 = landingpad { i8*, i32 }\n          cleanup\n  %179 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 0, i32 0\n  %180 = load i8*, i8** %179, align 8, !tbaa !12, !alias.scope !13\n  %181 = icmp eq i8* %180, %174\n  br i1 %181, label %187, label %182\n\n182:                                              ; preds = %177\n  call void @_ZdlPv(i8* %180) #5\n  br label %187\n\n183:                                              ; preds = %96, %108, %168, %139\n  %184 = add nsw i32 %84, -1\n  %185 = icmp sgt i64 %83, 1\n  %186 = add nsw i64 %83, -1\n  br i1 %185, label %82, label %191, !llvm.loop !16\n\n187:                                              ; preds = %182, %177\n  %188 = load i8*, i8** %15, align 8, !tbaa !12\n  %189 = icmp eq i8* %188, %14\n  br i1 %189, label %205, label %190\n\n190:                                              ; preds = %187\n  call void @_ZdlPv(i8* %188) #5\n  br label %205\n\n191:                                              ; preds = %183, %2\n  %192 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 2\n  %193 = bitcast %\"class.std::__cxx11::basic_string\"* %0 to %union.anon**\n  store %union.anon* %192, %union.anon** %193, align 8, !tbaa !3\n  %194 = bitcast %union.anon* %192 to i8*\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(16) %194, i8* noundef nonnull align 8 dereferenceable(16) %8, i64 16, i1 false) #5\n  %195 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 1\n  store i64 0, i64* %195, align 8, !tbaa !8\n  store %union.anon* %6, %union.anon** %7, align 8, !tbaa !12\n  store i64 0, i64* %10, align 8, !tbaa !8\n  store i8 0, i8* %8, align 8, !tbaa !11\n  br label %200\n\n196:                                              ; preds = %171\n  %197 = load i8*, i8** %15, align 8, !tbaa !12\n  %198 = icmp eq i8* %197, %14\n  br i1 %198, label %200, label %199\n\n199:                                              ; preds = %196\n  call void @_ZdlPv(i8* %197) #5\n  br label %200\n\n200:                                              ; preds = %191, %196, %199\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %11) #5\n  %201 = load i8*, i8** %9, align 8, !tbaa !12\n  %202 = icmp eq i8* %201, %8\n  br i1 %202, label %204, label %203\n\n203:                                              ; preds = %200\n  call void @_ZdlPv(i8* %201) #5\n  br label %204\n\n204:                                              ; preds = %200, %203\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %5) #5\n  ret void\n\n205:                                              ; preds = %190, %187\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %11) #5\n  %206 = load i8*, i8** %9, align 8, !tbaa !12\n  %207 = icmp eq i8* %206, %8\n  br i1 %207, label %209, label %208\n\n208:                                              ; preds = %205\n  call void @_ZdlPv(i8* %206) #5\n  br label %209\n\n209:                                              ; preds = %208, %205\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %5) #5\n  resume { i8*, i32 } %178\n\n210:                                              ; preds = %94\n  %211 = icmp eq i8 %38, %86\n  br i1 %211, label %105, label %212\n\n212:                                              ; preds = %210\n  %213 = icmp eq i8 %40, %86\n  br i1 %213, label %102, label %214\n\n214:                                              ; preds = %212\n  %215 = icmp eq i8 %42, %86\n  br i1 %215, label %99, label %216\n\n216:                                              ; preds = %214\n  %217 = load i8, i8* %85, align 1, !tbaa !11\n  %218 = icmp eq i8 %44, %217\n  br i1 %218, label %108, label %96\n\n219:                                              ; preds = %125\n  %220 = icmp eq i8 %56, %117\n  br i1 %220, label %136, label %221\n\n221:                                              ; preds = %219\n  %222 = icmp eq i8 %58, %117\n  br i1 %222, label %133, label %223\n\n223:                                              ; preds = %221\n  %224 = icmp eq i8 %60, %117\n  br i1 %224, label %130, label %225\n\n225:                                              ; preds = %223\n  %226 = load i8, i8* %116, align 1, !tbaa !11\n  %227 = icmp eq i8 %62, %226\n  br i1 %227, label %139, label %127\n\n228:                                              ; preds = %154\n  %229 = icmp eq i8 %74, %146\n  br i1 %229, label %165, label %230\n\n230:                                              ; preds = %228\n  %231 = icmp eq i8 %76, %146\n  br i1 %231, label %162, label %232\n\n232:                                              ; preds = %230\n  %233 = icmp eq i8 %78, %146\n  br i1 %233, label %159, label %234\n\n234:                                              ; preds = %232\n  %235 = load i8, i8* %145, align 1, !tbaa !11\n  %236 = icmp eq i8 %80, %235\n  br i1 %236, label %168, label %156\n}\n\n; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn\ndeclare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1\n\ndeclare dso_local i32 @__gxx_personality_v0(...)\n\n; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn\ndeclare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1\n\n; Function Attrs: nobuiltin nounwind\ndeclare dso_local void @_ZdlPv(i8*) local_unnamed_addr #2\n\n; Function Attrs: argmemonly mustprogress nofree nounwind willreturn\ndeclare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #3\n\ndeclare dso_local nonnull align 8 dereferenceable(32) %\"class.std::__cxx11::basic_string\"* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEmmmc(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32), i64, i64, i64, i8 signext) local_unnamed_addr #4\n\nattributes #0 = { uwtable \"frame-pointer\"=\"none\" \"min-legal-vector-width\"=\"0\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #1 = { argmemonly mustprogress nofree nosync nounwind willreturn }\nattributes #2 = { nobuiltin nounwind \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #3 = { argmemonly mustprogress nofree nounwind willreturn }\nattributes #4 = { \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #5 = { nounwind }\n\n!llvm.module.flags = !{!0, !1}\n!llvm.ident = !{!2}\n\n!0 = !{i32 1, !\"wchar_size\", i32 4}\n!1 = !{i32 7, !\"uwtable\", i32 1}\n!2 = !{!\"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)\"}\n!3 = !{!4, !5, i64 0}\n!4 = !{!\"_ZTSNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderE\", !5, i64 0}\n!5 = !{!\"any pointer\", !6, i64 0}\n!6 = !{!\"omnipotent char\", !7, i64 0}\n!7 = !{!\"Simple C++ TBAA\"}\n!8 = !{!9, !10, i64 8}\n!9 = !{!\"_ZTSNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE\", !4, i64 0, !10, i64 8, !6, i64 16}\n!10 = !{!\"long\", !6, i64 0}\n!11 = !{!6, !6, i64 0}\n!12 = !{!9, !5, i64 0}\n!13 = !{!14}\n!14 = distinct !{!14, !15, !\"_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_S5_: argument 0\"}\n!15 = distinct !{!15, !\"_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_S5_\"}\n!16 = distinct !{!16, !17}\n!17 = !{!\"llvm.loop.mustprogress\"}\n", "target": "This is the targeted source code:\n/*\nYou are given a word. Your task is to find the closest vowel that stands between \ntwo consonants from the right side of the word (case sensitive).\n\nVowels in the beginning and ending doesn't count. Return empty string if you didn't\nfind any vowel met the above condition. \n\nYou may assume that the given string contains English letter only.\n\nExample:\nget_closest_vowel(\"yogurt\") ==> \"u\"\nget_closest_vowel(\"FULL\") ==> \"U\"\nget_closest_vowel(\"quick\") ==> \"\"\nget_closest_vowel(\"ab\") ==> \"\"\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nstring get_closest_vowel(string word){\n\n    string out=\"\";\n    string vowels=\"AEIOUaeiou\";\n    for (int i=word.length()-2;i>=1;i-=1)\n        if (find(vowels.begin(),vowels.end(),word[i])!=vowels.end())\n            if (find(vowels.begin(),vowels.end(),word[i+1])==vowels.end())\n                if (find(vowels.begin(),vowels.end(),word[i-1])==vowels.end())\n                    return out+word[i];\n    return out;\n}\n"}
{"input": "Convert this to C++:\n; ModuleID = '../../Human_xBenchmarks_164/CPP_119/CPP_119.cpp'\nsource_filename = \"../../Human_xBenchmarks_164/CPP_119/CPP_119.cpp\"\ntarget datalayout = \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\ntarget triple = \"x86_64-unknown-linux-gnu\"\n\n%\"class.std::__cxx11::basic_string\" = type { %\"struct.std::__cxx11::basic_string<char>::_Alloc_hider\", i64, %union.anon }\n%\"struct.std::__cxx11::basic_string<char>::_Alloc_hider\" = type { i8* }\n%union.anon = type { i64, [8 x i8] }\n%\"class.std::vector\" = type { %\"struct.std::_Vector_base\" }\n%\"struct.std::_Vector_base\" = type { %\"struct.std::_Vector_base<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char>>>::_Vector_impl\" }\n%\"struct.std::_Vector_base<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char>>>::_Vector_impl\" = type { %\"struct.std::_Vector_base<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char>>>::_Vector_impl_data\" }\n%\"struct.std::_Vector_base<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char>>>::_Vector_impl_data\" = type { %\"class.std::__cxx11::basic_string\"*, %\"class.std::__cxx11::basic_string\"*, %\"class.std::__cxx11::basic_string\"* }\n\n@.str.1 = private unnamed_addr constant [4 x i8] c\"Yes\\00\", align 1\n\n; Function Attrs: uwtable\ndefine dso_local void @_Z12match_parensSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE(%\"class.std::__cxx11::basic_string\"* noalias sret(%\"class.std::__cxx11::basic_string\") align 8 %0, %\"class.std::vector\"* nocapture readonly %1) local_unnamed_addr #0 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {\n  %3 = alloca i64, align 8\n  %4 = alloca i64, align 8\n  %5 = alloca %\"class.std::__cxx11::basic_string\", align 8\n  %6 = alloca %\"class.std::__cxx11::basic_string\", align 8\n  %7 = bitcast %\"class.std::__cxx11::basic_string\"* %5 to i8*\n  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %7) #6\n  %8 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %1, i64 0, i32 0, i32 0, i32 0, i32 0\n  %9 = load %\"class.std::__cxx11::basic_string\"*, %\"class.std::__cxx11::basic_string\"** %8, align 8, !tbaa !3\n  tail call void @llvm.experimental.noalias.scope.decl(metadata !8)\n  %10 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %5, i64 0, i32 2\n  %11 = bitcast %\"class.std::__cxx11::basic_string\"* %5 to %union.anon**\n  store %union.anon* %10, %union.anon** %11, align 8, !tbaa !11, !alias.scope !8\n  %12 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %9, i64 0, i32 0, i32 0\n  %13 = load i8*, i8** %12, align 8, !tbaa !13, !noalias !8\n  %14 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %9, i64 0, i32 1\n  %15 = load i64, i64* %14, align 8, !tbaa !16, !noalias !8\n  %16 = bitcast i64* %4 to i8*\n  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %16) #6, !noalias !8\n  store i64 %15, i64* %4, align 8, !tbaa !17, !noalias !8\n  %17 = icmp ugt i64 %15, 15\n  br i1 %17, label %20, label %18\n\n18:                                               ; preds = %2\n  %19 = bitcast %union.anon* %10 to i8*\n  br label %25\n\n20:                                               ; preds = %2\n  %21 = call i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %5, i64* nonnull align 8 dereferenceable(8) %4, i64 0)\n  %22 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %5, i64 0, i32 0, i32 0\n  store i8* %21, i8** %22, align 8, !tbaa !13, !alias.scope !8\n  %23 = load i64, i64* %4, align 8, !tbaa !17, !noalias !8\n  %24 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %5, i64 0, i32 2, i32 0\n  store i64 %23, i64* %24, align 8, !tbaa !18, !alias.scope !8\n  br label %25\n\n25:                                               ; preds = %20, %18\n  %26 = phi i8* [ %19, %18 ], [ %21, %20 ]\n  switch i64 %15, label %29 [\n    i64 1, label %27\n    i64 0, label %30\n  ]\n\n27:                                               ; preds = %25\n  %28 = load i8, i8* %13, align 1, !tbaa !18\n  store i8 %28, i8* %26, align 1, !tbaa !18\n  br label %30\n\n29:                                               ; preds = %25\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %26, i8* align 1 %13, i64 %15, i1 false) #6\n  br label %30\n\n30:                                               ; preds = %29, %27, %25\n  %31 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %5, i64 0, i32 0, i32 0\n  %32 = load i64, i64* %4, align 8, !tbaa !17, !noalias !8\n  %33 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %5, i64 0, i32 1\n  store i64 %32, i64* %33, align 8, !tbaa !16, !alias.scope !8\n  %34 = load i8*, i8** %31, align 8, !tbaa !13, !alias.scope !8\n  %35 = getelementptr inbounds i8, i8* %34, i64 %32\n  store i8 0, i8* %35, align 1, !tbaa !18\n  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %16) #6, !noalias !8\n  %36 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %9, i64 1, i32 0, i32 0\n  %37 = load i8*, i8** %36, align 8, !tbaa !13, !noalias !8\n  %38 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %9, i64 1, i32 1\n  %39 = load i64, i64* %38, align 8, !tbaa !16, !noalias !8\n  %40 = invoke nonnull align 8 dereferenceable(32) %\"class.std::__cxx11::basic_string\"* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %5, i8* %37, i64 %39)\n          to label %41 unwind label %50\n\n41:                                               ; preds = %30\n  %42 = load i64, i64* %33, align 8, !tbaa !16\n  %43 = load i8*, i8** %31, align 8\n  %44 = icmp eq i64 %42, 0\n  br i1 %44, label %119, label %45\n\n45:                                               ; preds = %41\n  %46 = and i64 %42, 1\n  %47 = icmp eq i64 %42, 1\n  br i1 %47, label %87, label %48\n\n48:                                               ; preds = %45\n  %49 = and i64 %42, -2\n  br label %58\n\n50:                                               ; preds = %30\n  %51 = landingpad { i8*, i32 }\n          cleanup\n  %52 = load i8*, i8** %31, align 8, !tbaa !13, !alias.scope !8\n  %53 = bitcast %union.anon* %10 to i8*\n  %54 = icmp eq i8* %52, %53\n  br i1 %54, label %56, label %55\n\n55:                                               ; preds = %50\n  call void @_ZdlPv(i8* %52) #6\n  br label %56\n\n56:                                               ; preds = %50, %55, %289\n  %57 = phi { i8*, i32 } [ %244, %289 ], [ %51, %55 ], [ %51, %50 ]\n  resume { i8*, i32 } %57\n\n58:                                               ; preds = %58, %48\n  %59 = phi i64 [ 0, %48 ], [ %84, %58 ]\n  %60 = phi i8 [ 1, %48 ], [ %83, %58 ]\n  %61 = phi i32 [ 0, %48 ], [ %80, %58 ]\n  %62 = phi i64 [ %49, %48 ], [ %85, %58 ]\n  %63 = getelementptr inbounds i8, i8* %43, i64 %59\n  %64 = load i8, i8* %63, align 1, !tbaa !18\n  %65 = icmp eq i8 %64, 40\n  %66 = zext i1 %65 to i32\n  %67 = add nsw i32 %61, %66\n  %68 = icmp eq i8 %64, 41\n  %69 = sext i1 %68 to i32\n  %70 = add nsw i32 %67, %69\n  %71 = icmp slt i32 %70, 0\n  %72 = or i64 %59, 1\n  %73 = getelementptr inbounds i8, i8* %43, i64 %72\n  %74 = load i8, i8* %73, align 1, !tbaa !18\n  %75 = icmp eq i8 %74, 40\n  %76 = zext i1 %75 to i32\n  %77 = add nsw i32 %70, %76\n  %78 = icmp eq i8 %74, 41\n  %79 = sext i1 %78 to i32\n  %80 = add nsw i32 %77, %79\n  %81 = icmp slt i32 %80, 0\n  %82 = select i1 %81, i1 true, i1 %71\n  %83 = select i1 %82, i8 0, i8 %60\n  %84 = add nuw nsw i64 %59, 2\n  %85 = add i64 %62, -2\n  %86 = icmp eq i64 %85, 0\n  br i1 %86, label %87, label %58, !llvm.loop !19\n\n87:                                               ; preds = %58, %45\n  %88 = phi i32 [ undef, %45 ], [ %80, %58 ]\n  %89 = phi i8 [ undef, %45 ], [ %83, %58 ]\n  %90 = phi i64 [ 0, %45 ], [ %84, %58 ]\n  %91 = phi i8 [ 1, %45 ], [ %83, %58 ]\n  %92 = phi i32 [ 0, %45 ], [ %80, %58 ]\n  %93 = icmp eq i64 %46, 0\n  br i1 %93, label %105, label %94\n\n94:                                               ; preds = %87\n  %95 = getelementptr inbounds i8, i8* %43, i64 %90\n  %96 = load i8, i8* %95, align 1, !tbaa !18\n  %97 = icmp eq i8 %96, 40\n  %98 = zext i1 %97 to i32\n  %99 = add nsw i32 %92, %98\n  %100 = icmp eq i8 %96, 41\n  %101 = sext i1 %100 to i32\n  %102 = add nsw i32 %99, %101\n  %103 = icmp slt i32 %102, 0\n  %104 = select i1 %103, i8 0, i8 %91\n  br label %105\n\n105:                                              ; preds = %87, %94\n  %106 = phi i32 [ %88, %87 ], [ %102, %94 ]\n  %107 = phi i8 [ %89, %87 ], [ %104, %94 ]\n  %108 = icmp eq i32 %106, 0\n  br i1 %108, label %116, label %109\n\n109:                                              ; preds = %105\n  %110 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 2\n  %111 = bitcast %\"class.std::__cxx11::basic_string\"* %0 to %union.anon**\n  store %union.anon* %110, %union.anon** %111, align 8, !tbaa !11\n  %112 = bitcast %union.anon* %110 to i16*\n  store i16 28494, i16* %112, align 8\n  %113 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 1\n  store i64 2, i64* %113, align 8, !tbaa !16\n  %114 = bitcast %union.anon* %110 to i8*\n  %115 = getelementptr inbounds i8, i8* %114, i64 2\n  store i8 0, i8* %115, align 2, !tbaa !18\n  br label %282\n\n116:                                              ; preds = %105\n  %117 = and i8 %107, 1\n  %118 = icmp eq i8 %117, 0\n  br i1 %118, label %125, label %119\n\n119:                                              ; preds = %41, %116\n  %120 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 2\n  %121 = bitcast %\"class.std::__cxx11::basic_string\"* %0 to %union.anon**\n  store %union.anon* %120, %union.anon** %121, align 8, !tbaa !11\n  %122 = bitcast %union.anon* %120 to i8*\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(3) %122, i8* noundef nonnull align 1 dereferenceable(3) getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i64 0, i64 0), i64 3, i1 false) #6\n  %123 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 1\n  store i64 3, i64* %123, align 8, !tbaa !16\n  %124 = getelementptr inbounds i8, i8* %122, i64 3\n  store i8 0, i8* %124, align 1, !tbaa !18\n  br label %282\n\n125:                                              ; preds = %116\n  %126 = bitcast %\"class.std::__cxx11::basic_string\"* %6 to i8*\n  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %126) #6\n  %127 = load %\"class.std::__cxx11::basic_string\"*, %\"class.std::__cxx11::basic_string\"** %8, align 8, !tbaa !3\n  call void @llvm.experimental.noalias.scope.decl(metadata !21)\n  %128 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %6, i64 0, i32 2\n  %129 = bitcast %\"class.std::__cxx11::basic_string\"* %6 to %union.anon**\n  store %union.anon* %128, %union.anon** %129, align 8, !tbaa !11, !alias.scope !21\n  %130 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %127, i64 1, i32 0, i32 0\n  %131 = load i8*, i8** %130, align 8, !tbaa !13, !noalias !21\n  %132 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %127, i64 1, i32 1\n  %133 = load i64, i64* %132, align 8, !tbaa !16, !noalias !21\n  %134 = bitcast i64* %3 to i8*\n  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %134) #6, !noalias !21\n  store i64 %133, i64* %3, align 8, !tbaa !17, !noalias !21\n  %135 = icmp ugt i64 %133, 15\n  br i1 %135, label %138, label %136\n\n136:                                              ; preds = %125\n  %137 = bitcast %union.anon* %128 to i8*\n  br label %144\n\n138:                                              ; preds = %125\n  %139 = invoke i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %6, i64* nonnull align 8 dereferenceable(8) %3, i64 0)\n          to label %140 unwind label %241\n\n140:                                              ; preds = %138\n  %141 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %6, i64 0, i32 0, i32 0\n  store i8* %139, i8** %141, align 8, !tbaa !13, !alias.scope !21\n  %142 = load i64, i64* %3, align 8, !tbaa !17, !noalias !21\n  %143 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %6, i64 0, i32 2, i32 0\n  store i64 %142, i64* %143, align 8, !tbaa !18, !alias.scope !21\n  br label %144\n\n144:                                              ; preds = %140, %136\n  %145 = phi i8* [ %137, %136 ], [ %139, %140 ]\n  switch i64 %133, label %148 [\n    i64 1, label %146\n    i64 0, label %149\n  ]\n\n146:                                              ; preds = %144\n  %147 = load i8, i8* %131, align 1, !tbaa !18\n  store i8 %147, i8* %145, align 1, !tbaa !18\n  br label %149\n\n148:                                              ; preds = %144\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %145, i8* align 1 %131, i64 %133, i1 false) #6\n  br label %149\n\n149:                                              ; preds = %148, %146, %144\n  %150 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %6, i64 0, i32 0, i32 0\n  %151 = load i64, i64* %3, align 8, !tbaa !17, !noalias !21\n  %152 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %6, i64 0, i32 1\n  store i64 %151, i64* %152, align 8, !tbaa !16, !alias.scope !21\n  %153 = load i8*, i8** %150, align 8, !tbaa !13, !alias.scope !21\n  %154 = getelementptr inbounds i8, i8* %153, i64 %151\n  store i8 0, i8* %154, align 1, !tbaa !18\n  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %134) #6, !noalias !21\n  %155 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %127, i64 0, i32 0, i32 0\n  %156 = load i8*, i8** %155, align 8, !tbaa !13, !noalias !21\n  %157 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %127, i64 0, i32 1\n  %158 = load i64, i64* %157, align 8, !tbaa !16, !noalias !21\n  %159 = invoke nonnull align 8 dereferenceable(32) %\"class.std::__cxx11::basic_string\"* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %6, i8* %156, i64 %158)\n          to label %166 unwind label %160\n\n160:                                              ; preds = %149\n  %161 = landingpad { i8*, i32 }\n          cleanup\n  %162 = load i8*, i8** %150, align 8, !tbaa !13, !alias.scope !21\n  %163 = bitcast %union.anon* %128 to i8*\n  %164 = icmp eq i8* %162, %163\n  br i1 %164, label %243, label %165\n\n165:                                              ; preds = %160\n  call void @_ZdlPv(i8* %162) #6\n  br label %243\n\n166:                                              ; preds = %149\n  %167 = load i8*, i8** %150, align 8, !tbaa !13\n  %168 = bitcast %union.anon* %128 to i8*\n  %169 = icmp eq i8* %167, %168\n  br i1 %169, label %170, label %184\n\n170:                                              ; preds = %166\n  %171 = load i64, i64* %152, align 8, !tbaa !16\n  %172 = icmp eq i64 %171, 0\n  br i1 %172, label %179, label %173\n\n173:                                              ; preds = %170\n  %174 = load i8*, i8** %31, align 8, !tbaa !13\n  %175 = icmp eq i64 %171, 1\n  br i1 %175, label %176, label %178\n\n176:                                              ; preds = %173\n  %177 = load i8, i8* %168, align 8, !tbaa !18\n  store i8 %177, i8* %174, align 1, !tbaa !18\n  br label %179\n\n178:                                              ; preds = %173\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %174, i8* nonnull align 8 %168, i64 %171, i1 false) #6\n  br label %179\n\n179:                                              ; preds = %178, %176, %170\n  %180 = load i64, i64* %152, align 8, !tbaa !16\n  store i64 %180, i64* %33, align 8, !tbaa !16\n  %181 = load i8*, i8** %31, align 8, !tbaa !13\n  %182 = getelementptr inbounds i8, i8* %181, i64 %180\n  store i8 0, i8* %182, align 1, !tbaa !18\n  %183 = load i8*, i8** %150, align 8, !tbaa !13\n  br label %198\n\n184:                                              ; preds = %166\n  %185 = bitcast %union.anon* %10 to i8*\n  %186 = load i8*, i8** %31, align 8, !tbaa !13\n  %187 = icmp eq i8* %186, %185\n  %188 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %5, i64 0, i32 2, i32 0\n  %189 = load i64, i64* %188, align 8\n  store i8* %167, i8** %31, align 8, !tbaa !13\n  %190 = bitcast i64* %152 to <2 x i64>*\n  %191 = load <2 x i64>, <2 x i64>* %190, align 8, !tbaa !18\n  %192 = bitcast i64* %33 to <2 x i64>*\n  store <2 x i64> %191, <2 x i64>* %192, align 8, !tbaa !18\n  %193 = icmp eq i8* %186, null\n  %194 = or i1 %187, %193\n  br i1 %194, label %197, label %195\n\n195:                                              ; preds = %184\n  store i8* %186, i8** %150, align 8, !tbaa !13\n  %196 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %6, i64 0, i32 2, i32 0\n  store i64 %189, i64* %196, align 8, !tbaa !18\n  br label %198\n\n197:                                              ; preds = %184\n  store %union.anon* %128, %union.anon** %129, align 8, !tbaa !13\n  br label %198\n\n198:                                              ; preds = %179, %195, %197\n  %199 = phi i8* [ %183, %179 ], [ %186, %195 ], [ %168, %197 ]\n  store i64 0, i64* %152, align 8, !tbaa !16\n  store i8 0, i8* %199, align 1, !tbaa !18\n  %200 = load i8*, i8** %150, align 8, !tbaa !13\n  %201 = icmp eq i8* %200, %168\n  br i1 %201, label %203, label %202\n\n202:                                              ; preds = %198\n  call void @_ZdlPv(i8* %200) #6\n  br label %203\n\n203:                                              ; preds = %198, %202\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %126) #6\n  %204 = load i64, i64* %33, align 8, !tbaa !16\n  %205 = load i8*, i8** %31, align 8\n  %206 = icmp eq i64 %204, 0\n  br i1 %206, label %269, label %207\n\n207:                                              ; preds = %203\n  %208 = and i64 %204, 1\n  %209 = icmp eq i64 %204, 1\n  br i1 %209, label %248, label %210\n\n210:                                              ; preds = %207\n  %211 = and i64 %204, -2\n  br label %212\n\n212:                                              ; preds = %212, %210\n  %213 = phi i64 [ 0, %210 ], [ %238, %212 ]\n  %214 = phi i8 [ 1, %210 ], [ %237, %212 ]\n  %215 = phi i32 [ 0, %210 ], [ %234, %212 ]\n  %216 = phi i64 [ %211, %210 ], [ %239, %212 ]\n  %217 = getelementptr inbounds i8, i8* %205, i64 %213\n  %218 = load i8, i8* %217, align 1, !tbaa !18\n  %219 = icmp eq i8 %218, 40\n  %220 = zext i1 %219 to i32\n  %221 = add nsw i32 %215, %220\n  %222 = icmp eq i8 %218, 41\n  %223 = sext i1 %222 to i32\n  %224 = add nsw i32 %221, %223\n  %225 = icmp slt i32 %224, 0\n  %226 = or i64 %213, 1\n  %227 = getelementptr inbounds i8, i8* %205, i64 %226\n  %228 = load i8, i8* %227, align 1, !tbaa !18\n  %229 = icmp eq i8 %228, 40\n  %230 = zext i1 %229 to i32\n  %231 = add nsw i32 %224, %230\n  %232 = icmp eq i8 %228, 41\n  %233 = sext i1 %232 to i32\n  %234 = add nsw i32 %231, %233\n  %235 = icmp slt i32 %234, 0\n  %236 = select i1 %235, i1 true, i1 %225\n  %237 = select i1 %236, i8 0, i8 %214\n  %238 = add nuw nsw i64 %213, 2\n  %239 = add i64 %216, -2\n  %240 = icmp eq i64 %239, 0\n  br i1 %240, label %248, label %212, !llvm.loop !24\n\n241:                                              ; preds = %138\n  %242 = landingpad { i8*, i32 }\n          cleanup\n  br label %243\n\n243:                                              ; preds = %160, %165, %241\n  %244 = phi { i8*, i32 } [ %242, %241 ], [ %161, %165 ], [ %161, %160 ]\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %126) #6\n  %245 = load i8*, i8** %31, align 8, !tbaa !13\n  %246 = bitcast %union.anon* %10 to i8*\n  %247 = icmp eq i8* %245, %246\n  br i1 %247, label %289, label %288\n\n248:                                              ; preds = %212, %207\n  %249 = phi i8 [ undef, %207 ], [ %237, %212 ]\n  %250 = phi i64 [ 0, %207 ], [ %238, %212 ]\n  %251 = phi i8 [ 1, %207 ], [ %237, %212 ]\n  %252 = phi i32 [ 0, %207 ], [ %234, %212 ]\n  %253 = icmp eq i64 %208, 0\n  br i1 %253, label %265, label %254\n\n254:                                              ; preds = %248\n  %255 = getelementptr inbounds i8, i8* %205, i64 %250\n  %256 = load i8, i8* %255, align 1, !tbaa !18\n  %257 = icmp eq i8 %256, 40\n  %258 = zext i1 %257 to i32\n  %259 = add nsw i32 %252, %258\n  %260 = icmp eq i8 %256, 41\n  %261 = sext i1 %260 to i32\n  %262 = add nsw i32 %259, %261\n  %263 = icmp slt i32 %262, 0\n  %264 = select i1 %263, i8 0, i8 %251\n  br label %265\n\n265:                                              ; preds = %248, %254\n  %266 = phi i8 [ %249, %248 ], [ %264, %254 ]\n  %267 = and i8 %266, 1\n  %268 = icmp eq i8 %267, 0\n  br i1 %268, label %275, label %269\n\n269:                                              ; preds = %203, %265\n  %270 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 2\n  %271 = bitcast %\"class.std::__cxx11::basic_string\"* %0 to %union.anon**\n  store %union.anon* %270, %union.anon** %271, align 8, !tbaa !11\n  %272 = bitcast %union.anon* %270 to i8*\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(3) %272, i8* noundef nonnull align 1 dereferenceable(3) getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i64 0, i64 0), i64 3, i1 false) #6\n  %273 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 1\n  store i64 3, i64* %273, align 8, !tbaa !16\n  %274 = getelementptr inbounds i8, i8* %272, i64 3\n  store i8 0, i8* %274, align 1, !tbaa !18\n  br label %282\n\n275:                                              ; preds = %265\n  %276 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 2\n  %277 = bitcast %\"class.std::__cxx11::basic_string\"* %0 to %union.anon**\n  store %union.anon* %276, %union.anon** %277, align 8, !tbaa !11\n  %278 = bitcast %union.anon* %276 to i16*\n  store i16 28494, i16* %278, align 8\n  %279 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 1\n  store i64 2, i64* %279, align 8, !tbaa !16\n  %280 = bitcast %union.anon* %276 to i8*\n  %281 = getelementptr inbounds i8, i8* %280, i64 2\n  store i8 0, i8* %281, align 2, !tbaa !18\n  br label %282\n\n282:                                              ; preds = %275, %269, %119, %109\n  %283 = phi i8* [ %205, %275 ], [ %205, %269 ], [ %43, %119 ], [ %43, %109 ]\n  %284 = bitcast %union.anon* %10 to i8*\n  %285 = icmp eq i8* %283, %284\n  br i1 %285, label %287, label %286\n\n286:                                              ; preds = %282\n  call void @_ZdlPv(i8* %283) #6\n  br label %287\n\n287:                                              ; preds = %282, %286\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %7) #6\n  ret void\n\n288:                                              ; preds = %243\n  call void @_ZdlPv(i8* %245) #6\n  br label %289\n\n289:                                              ; preds = %243, %288\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %7) #6\n  br label %56\n}\n\n; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn\ndeclare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1\n\ndeclare dso_local i32 @__gxx_personality_v0(...)\n\n; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn\ndeclare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1\n\n; Function Attrs: nobuiltin nounwind\ndeclare dso_local void @_ZdlPv(i8*) local_unnamed_addr #2\n\ndeclare dso_local i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32), i64* nonnull align 8 dereferenceable(8), i64) local_unnamed_addr #3\n\n; Function Attrs: argmemonly mustprogress nofree nounwind willreturn\ndeclare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #4\n\ndeclare dso_local nonnull align 8 dereferenceable(32) %\"class.std::__cxx11::basic_string\"* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32), i8*, i64) local_unnamed_addr #3\n\n; Function Attrs: inaccessiblememonly nofree nosync nounwind willreturn\ndeclare void @llvm.experimental.noalias.scope.decl(metadata) #5\n\nattributes #0 = { uwtable \"frame-pointer\"=\"none\" \"min-legal-vector-width\"=\"0\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #1 = { argmemonly mustprogress nofree nosync nounwind willreturn }\nattributes #2 = { nobuiltin nounwind \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #3 = { \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #4 = { argmemonly mustprogress nofree nounwind willreturn }\nattributes #5 = { inaccessiblememonly nofree nosync nounwind willreturn }\nattributes #6 = { nounwind }\n\n!llvm.module.flags = !{!0, !1}\n!llvm.ident = !{!2}\n\n!0 = !{i32 1, !\"wchar_size\", i32 4}\n!1 = !{i32 7, !\"uwtable\", i32 1}\n!2 = !{!\"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)\"}\n!3 = !{!4, !5, i64 0}\n!4 = !{!\"_ZTSNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_Vector_impl_dataE\", !5, i64 0, !5, i64 8, !5, i64 16}\n!5 = !{!\"any pointer\", !6, i64 0}\n!6 = !{!\"omnipotent char\", !7, i64 0}\n!7 = !{!\"Simple C++ TBAA\"}\n!8 = !{!9}\n!9 = distinct !{!9, !10, !\"_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_SA_: argument 0\"}\n!10 = distinct !{!10, !\"_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_SA_\"}\n!11 = !{!12, !5, i64 0}\n!12 = !{!\"_ZTSNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderE\", !5, i64 0}\n!13 = !{!14, !5, i64 0}\n!14 = !{!\"_ZTSNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE\", !12, i64 0, !15, i64 8, !6, i64 16}\n!15 = !{!\"long\", !6, i64 0}\n!16 = !{!14, !15, i64 8}\n!17 = !{!15, !15, i64 0}\n!18 = !{!6, !6, i64 0}\n!19 = distinct !{!19, !20}\n!20 = !{!\"llvm.loop.mustprogress\"}\n!21 = !{!22}\n!22 = distinct !{!22, !23, !\"_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_SA_: argument 0\"}\n!23 = distinct !{!23, !\"_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_SA_\"}\n!24 = distinct !{!24, !20}\n", "target": "This is the targeted source code:\n/*\nYou are given a vector of two strings, both strings consist of open\nparentheses '(' or close parentheses ')' only.\nYour job is to check if it is possible to concatenate the two strings in\nsome order, that the resulting string will be good.\nA string S is considered to be good if and only if all parentheses in S\nare balanced. For example: the string \"(())()\" is good, while the string\n\"())\" is not.\nReturn \"Yes\" if there's a way to make a good string, and return \"No\" otherwise.\n\nExamples:\nmatch_parens({\"()(\", \")\"}) == \"Yes\"\nmatch_parens({\")\", \")\"}) == \"No\"\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring match_parens(vector<string> lst){\n\n    string l1=lst[0]+lst[1];\n    int i,count=0;\n    bool can=true;\n    for (i=0;i<l1.length();i++)\n        {\n            if (l1[i]=='(') count+=1;\n            if (l1[i]==')') count-=1;\n            if (count<0) can=false;\n        }\n    if (count!=0) return \"No\";\n    if (can==true) return \"Yes\";\n    l1=lst[1]+lst[0];\n    can=true;\n    for (i=0;i<l1.length();i++)\n        {\n            if (l1[i]=='(') count+=1;\n            if (l1[i]==')') count-=1;\n            if (count<0) can=false;\n        }\n    if (can==true) return \"Yes\";\n    return \"No\";\n}\n"}
{"input": "Convert this to C++:\n; ModuleID = '../../Human_xBenchmarks_164/CPP_120/CPP_120.cpp'\nsource_filename = \"../../Human_xBenchmarks_164/CPP_120/CPP_120.cpp\"\ntarget datalayout = \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\ntarget triple = \"x86_64-unknown-linux-gnu\"\n\n%\"class.std::vector\" = type { %\"struct.std::_Vector_base\" }\n%\"struct.std::_Vector_base\" = type { %\"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl\" }\n%\"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl\" = type { %\"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl_data\" }\n%\"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl_data\" = type { i32*, i32*, i32* }\n%\"struct.__gnu_cxx::__ops::_Iter_less_iter\" = type { i8 }\n\n$_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEElNS0_5__ops15_Iter_less_iterEEvT_S9_T0_T1_ = comdat any\n\n$_ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_ = comdat any\n\n$_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEENS0_5__ops15_Iter_less_iterEEvT_S9_RT0_ = comdat any\n\n@.str = private unnamed_addr constant [49 x i8] c\"cannot create std::vector larger than max_size()\\00\", align 1\n\n; Function Attrs: uwtable\ndefine dso_local void @_Z7maximumSt6vectorIiSaIiEEi(%\"class.std::vector\"* noalias nocapture sret(%\"class.std::vector\") align 8 %0, %\"class.std::vector\"* nocapture readonly %1, i32 %2) local_unnamed_addr #0 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {\n  %4 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %1, i64 0, i32 0, i32 0, i32 0, i32 0\n  %5 = load i32*, i32** %4, align 8, !tbaa !3\n  %6 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %1, i64 0, i32 0, i32 0, i32 0, i32 1\n  %7 = load i32*, i32** %6, align 8, !tbaa !3\n  %8 = icmp eq i32* %5, %7\n  br i1 %8, label %18, label %9\n\n9:                                                ; preds = %3\n  %10 = ptrtoint i32* %7 to i64\n  %11 = ptrtoint i32* %5 to i64\n  %12 = sub i64 %10, %11\n  %13 = ashr exact i64 %12, 2\n  %14 = tail call i64 @llvm.ctlz.i64(i64 %13, i1 true) #7, !range !7\n  %15 = shl nuw nsw i64 %14, 1\n  %16 = xor i64 %15, 126\n  tail call void @_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEElNS0_5__ops15_Iter_less_iterEEvT_S9_T0_T1_(i32* %5, i32* %7, i64 %16)\n  tail call void @_ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_(i32* %5, i32* %7)\n  %17 = load i32*, i32** %6, align 8, !tbaa !3\n  br label %18\n\n18:                                               ; preds = %3, %9\n  %19 = phi i32* [ %5, %3 ], [ %17, %9 ]\n  %20 = sext i32 %2 to i64\n  %21 = sub nsw i64 0, %20\n  %22 = getelementptr inbounds i32, i32* %19, i64 %21\n  %23 = bitcast %\"class.std::vector\"* %0 to i8*\n  tail call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(24) %23, i8 0, i64 24, i1 false) #7\n  %24 = shl nsw i64 %20, 2\n  %25 = icmp slt i32 %2, 0\n  br i1 %25, label %26, label %27\n\n26:                                               ; preds = %18\n  call void @_ZSt20__throw_length_errorPKc(i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str, i64 0, i64 0)) #8\n  unreachable\n\n27:                                               ; preds = %18\n  %28 = icmp eq i32 %2, 0\n  br i1 %28, label %29, label %33\n\n29:                                               ; preds = %27\n  %30 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0, i64 0, i32 0, i32 0, i32 0, i32 0\n  store i32* null, i32** %30, align 8, !tbaa !8\n  %31 = getelementptr inbounds i32, i32* null, i64 %20\n  %32 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0, i64 0, i32 0, i32 0, i32 0, i32 2\n  store i32* %31, i32** %32, align 8, !tbaa !10\n  br label %40\n\n33:                                               ; preds = %27\n  %34 = call noalias nonnull i8* @_Znwm(i64 %24) #9\n  %35 = bitcast i8* %34 to i32*\n  %36 = bitcast %\"class.std::vector\"* %0 to i8**\n  store i8* %34, i8** %36, align 8, !tbaa !8\n  %37 = getelementptr inbounds i32, i32* %35, i64 %20\n  %38 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0, i64 0, i32 0, i32 0, i32 0, i32 2\n  store i32* %37, i32** %38, align 8, !tbaa !10\n  %39 = bitcast i32* %22 to i8*\n  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %34, i8* align 4 %39, i64 %24, i1 false) #7\n  br label %40\n\n40:                                               ; preds = %33, %29\n  %41 = phi i32* [ %31, %29 ], [ %37, %33 ]\n  %42 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0, i64 0, i32 0, i32 0, i32 0, i32 1\n  store i32* %41, i32** %42, align 8, !tbaa !11\n  ret void\n}\n\n; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn\ndeclare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1\n\ndeclare dso_local i32 @__gxx_personality_v0(...)\n\n; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn\ndeclare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1\n\n; Function Attrs: argmemonly mustprogress nofree nounwind willreturn\ndeclare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #2\n\n; Function Attrs: uwtable\ndefine linkonce_odr dso_local void @_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEElNS0_5__ops15_Iter_less_iterEEvT_S9_T0_T1_(i32* %0, i32* %1, i64 %2) local_unnamed_addr #0 comdat {\n  %4 = alloca %\"struct.__gnu_cxx::__ops::_Iter_less_iter\", align 1\n  %5 = ptrtoint i32* %0 to i64\n  %6 = getelementptr inbounds i32, i32* %0, i64 1\n  %7 = ptrtoint i32* %1 to i64\n  %8 = sub i64 %7, %5\n  %9 = icmp sgt i64 %8, 64\n  br i1 %9, label %10, label %123\n\n10:                                               ; preds = %3, %119\n  %11 = phi i64 [ %121, %119 ], [ %8, %3 ]\n  %12 = phi i64 [ %76, %119 ], [ %2, %3 ]\n  %13 = phi i32* [ %107, %119 ], [ %1, %3 ]\n  %14 = icmp eq i64 %12, 0\n  br i1 %14, label %15, label %74\n\n15:                                               ; preds = %10\n  %16 = getelementptr inbounds %\"struct.__gnu_cxx::__ops::_Iter_less_iter\", %\"struct.__gnu_cxx::__ops::_Iter_less_iter\"* %4, i64 0, i32 0\n  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %16)\n  call void @_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEENS0_5__ops15_Iter_less_iterEEvT_S9_RT0_(i32* %0, i32* %13, %\"struct.__gnu_cxx::__ops::_Iter_less_iter\"* nonnull align 1 dereferenceable(1) %4)\n  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %16)\n  br label %17\n\n17:                                               ; preds = %15, %70\n  %18 = phi i32* [ %19, %70 ], [ %13, %15 ]\n  %19 = getelementptr inbounds i32, i32* %18, i64 -1\n  %20 = load i32, i32* %19, align 4, !tbaa !12\n  %21 = load i32, i32* %0, align 4, !tbaa !12\n  store i32 %21, i32* %19, align 4, !tbaa !12\n  %22 = ptrtoint i32* %19 to i64\n  %23 = sub i64 %22, %5\n  %24 = ashr exact i64 %23, 2\n  %25 = add nsw i64 %24, -1\n  %26 = sdiv i64 %25, 2\n  %27 = icmp sgt i64 %23, 8\n  br i1 %27, label %28, label %43\n\n28:                                               ; preds = %17, %28\n  %29 = phi i64 [ %38, %28 ], [ 0, %17 ]\n  %30 = shl i64 %29, 1\n  %31 = add i64 %30, 2\n  %32 = getelementptr inbounds i32, i32* %0, i64 %31\n  %33 = or i64 %30, 1\n  %34 = getelementptr inbounds i32, i32* %0, i64 %33\n  %35 = load i32, i32* %32, align 4, !tbaa !12\n  %36 = load i32, i32* %34, align 4, !tbaa !12\n  %37 = icmp slt i32 %35, %36\n  %38 = select i1 %37, i64 %33, i64 %31\n  %39 = getelementptr inbounds i32, i32* %0, i64 %38\n  %40 = load i32, i32* %39, align 4, !tbaa !12\n  %41 = getelementptr inbounds i32, i32* %0, i64 %29\n  store i32 %40, i32* %41, align 4, !tbaa !12\n  %42 = icmp slt i64 %38, %26\n  br i1 %42, label %28, label %43, !llvm.loop !14\n\n43:                                               ; preds = %28, %17\n  %44 = phi i64 [ 0, %17 ], [ %38, %28 ]\n  %45 = and i64 %23, 4\n  %46 = icmp eq i64 %45, 0\n  br i1 %46, label %47, label %57\n\n47:                                               ; preds = %43\n  %48 = add nsw i64 %24, -2\n  %49 = sdiv i64 %48, 2\n  %50 = icmp eq i64 %44, %49\n  br i1 %50, label %51, label %57\n\n51:                                               ; preds = %47\n  %52 = shl i64 %44, 1\n  %53 = or i64 %52, 1\n  %54 = getelementptr inbounds i32, i32* %0, i64 %53\n  %55 = load i32, i32* %54, align 4, !tbaa !12\n  %56 = getelementptr inbounds i32, i32* %0, i64 %44\n  store i32 %55, i32* %56, align 4, !tbaa !12\n  br label %57\n\n57:                                               ; preds = %51, %47, %43\n  %58 = phi i64 [ %53, %51 ], [ %44, %47 ], [ %44, %43 ]\n  %59 = icmp sgt i64 %58, 0\n  br i1 %59, label %60, label %70\n\n60:                                               ; preds = %57, %67\n  %61 = phi i64 [ %63, %67 ], [ %58, %57 ]\n  %62 = add nsw i64 %61, -1\n  %63 = lshr i64 %62, 1\n  %64 = getelementptr inbounds i32, i32* %0, i64 %63\n  %65 = load i32, i32* %64, align 4, !tbaa !12\n  %66 = icmp slt i32 %65, %20\n  br i1 %66, label %67, label %70\n\n67:                                               ; preds = %60\n  %68 = getelementptr inbounds i32, i32* %0, i64 %61\n  store i32 %65, i32* %68, align 4, !tbaa !12\n  %69 = icmp ult i64 %62, 2\n  br i1 %69, label %70, label %60, !llvm.loop !16\n\n70:                                               ; preds = %67, %60, %57\n  %71 = phi i64 [ %58, %57 ], [ %61, %60 ], [ 0, %67 ]\n  %72 = getelementptr inbounds i32, i32* %0, i64 %71\n  store i32 %20, i32* %72, align 4, !tbaa !12\n  %73 = icmp sgt i64 %23, 4\n  br i1 %73, label %17, label %123, !llvm.loop !17\n\n74:                                               ; preds = %10\n  %75 = lshr i64 %11, 3\n  %76 = add nsw i64 %12, -1\n  %77 = getelementptr inbounds i32, i32* %0, i64 %75\n  %78 = getelementptr inbounds i32, i32* %13, i64 -1\n  %79 = load i32, i32* %6, align 4, !tbaa !12\n  %80 = load i32, i32* %77, align 4, !tbaa !12\n  %81 = icmp slt i32 %79, %80\n  %82 = load i32, i32* %78, align 4, !tbaa !12\n  br i1 %81, label %83, label %92\n\n83:                                               ; preds = %74\n  %84 = icmp slt i32 %80, %82\n  br i1 %84, label %85, label %87\n\n85:                                               ; preds = %83\n  %86 = load i32, i32* %0, align 4, !tbaa !12\n  store i32 %80, i32* %0, align 4, !tbaa !12\n  store i32 %86, i32* %77, align 4, !tbaa !12\n  br label %101\n\n87:                                               ; preds = %83\n  %88 = icmp slt i32 %79, %82\n  %89 = load i32, i32* %0, align 4, !tbaa !12\n  br i1 %88, label %90, label %91\n\n90:                                               ; preds = %87\n  store i32 %82, i32* %0, align 4, !tbaa !12\n  store i32 %89, i32* %78, align 4, !tbaa !12\n  br label %101\n\n91:                                               ; preds = %87\n  store i32 %79, i32* %0, align 4, !tbaa !12\n  store i32 %89, i32* %6, align 4, !tbaa !12\n  br label %101\n\n92:                                               ; preds = %74\n  %93 = icmp slt i32 %79, %82\n  br i1 %93, label %94, label %96\n\n94:                                               ; preds = %92\n  %95 = load i32, i32* %0, align 4, !tbaa !12\n  store i32 %79, i32* %0, align 4, !tbaa !12\n  store i32 %95, i32* %6, align 4, !tbaa !12\n  br label %101\n\n96:                                               ; preds = %92\n  %97 = icmp slt i32 %80, %82\n  %98 = load i32, i32* %0, align 4, !tbaa !12\n  br i1 %97, label %99, label %100\n\n99:                                               ; preds = %96\n  store i32 %82, i32* %0, align 4, !tbaa !12\n  store i32 %98, i32* %78, align 4, !tbaa !12\n  br label %101\n\n100:                                              ; preds = %96\n  store i32 %80, i32* %0, align 4, !tbaa !12\n  store i32 %98, i32* %77, align 4, !tbaa !12\n  br label %101\n\n101:                                              ; preds = %100, %99, %94, %91, %90, %85\n  br label %102\n\n102:                                              ; preds = %101, %118\n  %103 = phi i32* [ %110, %118 ], [ %6, %101 ]\n  %104 = phi i32* [ %113, %118 ], [ %13, %101 ]\n  %105 = load i32, i32* %0, align 4, !tbaa !12\n  br label %106\n\n106:                                              ; preds = %106, %102\n  %107 = phi i32* [ %103, %102 ], [ %110, %106 ]\n  %108 = load i32, i32* %107, align 4, !tbaa !12\n  %109 = icmp slt i32 %108, %105\n  %110 = getelementptr inbounds i32, i32* %107, i64 1\n  br i1 %109, label %106, label %111, !llvm.loop !18\n\n111:                                              ; preds = %106, %111\n  %112 = phi i32* [ %113, %111 ], [ %104, %106 ]\n  %113 = getelementptr inbounds i32, i32* %112, i64 -1\n  %114 = load i32, i32* %113, align 4, !tbaa !12\n  %115 = icmp slt i32 %105, %114\n  br i1 %115, label %111, label %116, !llvm.loop !19\n\n116:                                              ; preds = %111\n  %117 = icmp ult i32* %107, %113\n  br i1 %117, label %118, label %119\n\n118:                                              ; preds = %116\n  store i32 %114, i32* %107, align 4, !tbaa !12\n  store i32 %108, i32* %113, align 4, !tbaa !12\n  br label %102, !llvm.loop !20\n\n119:                                              ; preds = %116\n  tail call void @_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEElNS0_5__ops15_Iter_less_iterEEvT_S9_T0_T1_(i32* nonnull %107, i32* %13, i64 %76)\n  %120 = ptrtoint i32* %107 to i64\n  %121 = sub i64 %120, %5\n  %122 = icmp sgt i64 %121, 64\n  br i1 %122, label %10, label %123, !llvm.loop !21\n\n123:                                              ; preds = %119, %70, %3\n  ret void\n}\n\n; Function Attrs: uwtable\ndefine linkonce_odr dso_local void @_ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_(i32* %0, i32* %1) local_unnamed_addr #0 comdat {\n  %3 = ptrtoint i32* %1 to i64\n  %4 = ptrtoint i32* %0 to i64\n  %5 = sub i64 %3, %4\n  %6 = icmp sgt i64 %5, 64\n  br i1 %6, label %7, label %38\n\n7:                                                ; preds = %2\n  %8 = bitcast i32* %0 to i8*\n  %9 = getelementptr i32, i32* %0, i64 1\n  %10 = load i32, i32* %9, align 4, !tbaa !12\n  %11 = load i32, i32* %0, align 4, !tbaa !12\n  %12 = icmp slt i32 %10, %11\n  br i1 %12, label %13, label %15\n\n13:                                               ; preds = %7\n  %14 = load i32, i32* %0, align 4\n  store i32 %14, i32* %9, align 4\n  br label %15\n\n15:                                               ; preds = %7, %13\n  %16 = phi i32* [ %0, %13 ], [ %9, %7 ]\n  store i32 %10, i32* %16, align 4, !tbaa !12\n  %17 = getelementptr inbounds i32, i32* %0, i64 2\n  %18 = load i32, i32* %17, align 4, !tbaa !12\n  %19 = load i32, i32* %0, align 4, !tbaa !12\n  %20 = icmp slt i32 %18, %19\n  br i1 %20, label %84, label %74\n\n21:                                               ; preds = %322, %34\n  %22 = phi i32* [ %36, %34 ], [ %324, %322 ]\n  %23 = load i32, i32* %22, align 4, !tbaa !12\n  %24 = getelementptr inbounds i32, i32* %22, i64 -1\n  %25 = load i32, i32* %24, align 4, !tbaa !12\n  %26 = icmp slt i32 %23, %25\n  br i1 %26, label %27, label %34\n\n27:                                               ; preds = %21, %27\n  %28 = phi i32 [ %32, %27 ], [ %25, %21 ]\n  %29 = phi i32* [ %31, %27 ], [ %24, %21 ]\n  %30 = phi i32* [ %29, %27 ], [ %22, %21 ]\n  store i32 %28, i32* %30, align 4, !tbaa !12\n  %31 = getelementptr inbounds i32, i32* %29, i64 -1\n  %32 = load i32, i32* %31, align 4, !tbaa !12\n  %33 = icmp slt i32 %23, %32\n  br i1 %33, label %27, label %34, !llvm.loop !22\n\n34:                                               ; preds = %27, %21\n  %35 = phi i32* [ %22, %21 ], [ %29, %27 ]\n  store i32 %23, i32* %35, align 4, !tbaa !12\n  %36 = getelementptr inbounds i32, i32* %22, i64 1\n  %37 = icmp eq i32* %36, %1\n  br i1 %37, label %73, label %21, !llvm.loop !23\n\n38:                                               ; preds = %2\n  %39 = icmp eq i32* %0, %1\n  br i1 %39, label %73, label %40\n\n40:                                               ; preds = %38\n  %41 = bitcast i32* %0 to i8*\n  %42 = getelementptr inbounds i32, i32* %0, i64 1\n  %43 = icmp eq i32* %42, %1\n  br i1 %43, label %73, label %44\n\n44:                                               ; preds = %40, %69\n  %45 = phi i32* [ %71, %69 ], [ %42, %40 ]\n  %46 = phi i32* [ %45, %69 ], [ %0, %40 ]\n  %47 = load i32, i32* %45, align 4, !tbaa !12\n  %48 = load i32, i32* %0, align 4, !tbaa !12\n  %49 = icmp slt i32 %47, %48\n  br i1 %49, label %50, label %59\n\n50:                                               ; preds = %44\n  %51 = ptrtoint i32* %45 to i64\n  %52 = sub i64 %51, %4\n  %53 = icmp eq i64 %52, 0\n  br i1 %53, label %69, label %54\n\n54:                                               ; preds = %50\n  %55 = ashr exact i64 %52, 2\n  %56 = sub nsw i64 2, %55\n  %57 = getelementptr inbounds i32, i32* %46, i64 %56\n  %58 = bitcast i32* %57 to i8*\n  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* nonnull align 4 %58, i8* nonnull align 4 %41, i64 %52, i1 false) #7\n  br label %69\n\n59:                                               ; preds = %44\n  %60 = load i32, i32* %46, align 4, !tbaa !12\n  %61 = icmp slt i32 %47, %60\n  br i1 %61, label %62, label %69\n\n62:                                               ; preds = %59, %62\n  %63 = phi i32 [ %67, %62 ], [ %60, %59 ]\n  %64 = phi i32* [ %66, %62 ], [ %46, %59 ]\n  %65 = phi i32* [ %64, %62 ], [ %45, %59 ]\n  store i32 %63, i32* %65, align 4, !tbaa !12\n  %66 = getelementptr inbounds i32, i32* %64, i64 -1\n  %67 = load i32, i32* %66, align 4, !tbaa !12\n  %68 = icmp slt i32 %47, %67\n  br i1 %68, label %62, label %69, !llvm.loop !22\n\n69:                                               ; preds = %62, %59, %54, %50\n  %70 = phi i32* [ %0, %50 ], [ %0, %54 ], [ %45, %59 ], [ %64, %62 ]\n  store i32 %47, i32* %70, align 4, !tbaa !12\n  %71 = getelementptr inbounds i32, i32* %45, i64 1\n  %72 = icmp eq i32* %71, %1\n  br i1 %72, label %73, label %44, !llvm.loop !24\n\n73:                                               ; preds = %69, %34, %40, %38, %322\n  ret void\n\n74:                                               ; preds = %15\n  %75 = load i32, i32* %9, align 4, !tbaa !12\n  %76 = icmp slt i32 %18, %75\n  br i1 %76, label %77, label %88\n\n77:                                               ; preds = %74, %77\n  %78 = phi i32 [ %82, %77 ], [ %75, %74 ]\n  %79 = phi i32* [ %81, %77 ], [ %9, %74 ]\n  %80 = phi i32* [ %79, %77 ], [ %17, %74 ]\n  store i32 %78, i32* %80, align 4, !tbaa !12\n  %81 = getelementptr inbounds i32, i32* %79, i64 -1\n  %82 = load i32, i32* %81, align 4, !tbaa !12\n  %83 = icmp slt i32 %18, %82\n  br i1 %83, label %77, label %88, !llvm.loop !22\n\n84:                                               ; preds = %15\n  %85 = bitcast i32* %0 to i64*\n  %86 = bitcast i32* %9 to i64*\n  %87 = load i64, i64* %85, align 4\n  store i64 %87, i64* %86, align 4\n  br label %88\n\n88:                                               ; preds = %77, %84, %74\n  %89 = phi i32* [ %0, %84 ], [ %17, %74 ], [ %79, %77 ]\n  store i32 %18, i32* %89, align 4, !tbaa !12\n  %90 = getelementptr inbounds i32, i32* %0, i64 3\n  %91 = load i32, i32* %90, align 4, !tbaa !12\n  %92 = load i32, i32* %0, align 4, !tbaa !12\n  %93 = icmp slt i32 %91, %92\n  br i1 %93, label %104, label %94\n\n94:                                               ; preds = %88\n  %95 = load i32, i32* %17, align 4, !tbaa !12\n  %96 = icmp slt i32 %91, %95\n  br i1 %96, label %97, label %106\n\n97:                                               ; preds = %94, %97\n  %98 = phi i32 [ %102, %97 ], [ %95, %94 ]\n  %99 = phi i32* [ %101, %97 ], [ %17, %94 ]\n  %100 = phi i32* [ %99, %97 ], [ %90, %94 ]\n  store i32 %98, i32* %100, align 4, !tbaa !12\n  %101 = getelementptr inbounds i32, i32* %99, i64 -1\n  %102 = load i32, i32* %101, align 4, !tbaa !12\n  %103 = icmp slt i32 %91, %102\n  br i1 %103, label %97, label %106, !llvm.loop !22\n\n104:                                              ; preds = %88\n  %105 = bitcast i32* %9 to i8*\n  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* noundef nonnull align 4 dereferenceable(12) %105, i8* noundef nonnull align 4 dereferenceable(12) %8, i64 12, i1 false) #7\n  br label %106\n\n106:                                              ; preds = %97, %104, %94\n  %107 = phi i32* [ %0, %104 ], [ %90, %94 ], [ %99, %97 ]\n  store i32 %91, i32* %107, align 4, !tbaa !12\n  %108 = getelementptr inbounds i32, i32* %0, i64 4\n  %109 = load i32, i32* %108, align 4, !tbaa !12\n  %110 = load i32, i32* %0, align 4, !tbaa !12\n  %111 = icmp slt i32 %109, %110\n  br i1 %111, label %122, label %112\n\n112:                                              ; preds = %106\n  %113 = load i32, i32* %90, align 4, !tbaa !12\n  %114 = icmp slt i32 %109, %113\n  br i1 %114, label %115, label %124\n\n115:                                              ; preds = %112, %115\n  %116 = phi i32 [ %120, %115 ], [ %113, %112 ]\n  %117 = phi i32* [ %119, %115 ], [ %90, %112 ]\n  %118 = phi i32* [ %117, %115 ], [ %108, %112 ]\n  store i32 %116, i32* %118, align 4, !tbaa !12\n  %119 = getelementptr inbounds i32, i32* %117, i64 -1\n  %120 = load i32, i32* %119, align 4, !tbaa !12\n  %121 = icmp slt i32 %109, %120\n  br i1 %121, label %115, label %124, !llvm.loop !22\n\n122:                                              ; preds = %106\n  %123 = bitcast i32* %9 to i8*\n  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* noundef nonnull align 4 dereferenceable(16) %123, i8* noundef nonnull align 4 dereferenceable(16) %8, i64 16, i1 false) #7\n  br label %124\n\n124:                                              ; preds = %115, %122, %112\n  %125 = phi i32* [ %0, %122 ], [ %108, %112 ], [ %117, %115 ]\n  store i32 %109, i32* %125, align 4, !tbaa !12\n  %126 = getelementptr inbounds i32, i32* %0, i64 5\n  %127 = load i32, i32* %126, align 4, !tbaa !12\n  %128 = load i32, i32* %0, align 4, !tbaa !12\n  %129 = icmp slt i32 %127, %128\n  br i1 %129, label %140, label %130\n\n130:                                              ; preds = %124\n  %131 = load i32, i32* %108, align 4, !tbaa !12\n  %132 = icmp slt i32 %127, %131\n  br i1 %132, label %133, label %142\n\n133:                                              ; preds = %130, %133\n  %134 = phi i32 [ %138, %133 ], [ %131, %130 ]\n  %135 = phi i32* [ %137, %133 ], [ %108, %130 ]\n  %136 = phi i32* [ %135, %133 ], [ %126, %130 ]\n  store i32 %134, i32* %136, align 4, !tbaa !12\n  %137 = getelementptr inbounds i32, i32* %135, i64 -1\n  %138 = load i32, i32* %137, align 4, !tbaa !12\n  %139 = icmp slt i32 %127, %138\n  br i1 %139, label %133, label %142, !llvm.loop !22\n\n140:                                              ; preds = %124\n  %141 = bitcast i32* %9 to i8*\n  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* noundef nonnull align 4 dereferenceable(20) %141, i8* noundef nonnull align 4 dereferenceable(20) %8, i64 20, i1 false) #7\n  br label %142\n\n142:                                              ; preds = %133, %140, %130\n  %143 = phi i32* [ %0, %140 ], [ %126, %130 ], [ %135, %133 ]\n  store i32 %127, i32* %143, align 4, !tbaa !12\n  %144 = getelementptr inbounds i32, i32* %0, i64 6\n  %145 = load i32, i32* %144, align 4, !tbaa !12\n  %146 = load i32, i32* %0, align 4, !tbaa !12\n  %147 = icmp slt i32 %145, %146\n  br i1 %147, label %158, label %148\n\n148:                                              ; preds = %142\n  %149 = load i32, i32* %126, align 4, !tbaa !12\n  %150 = icmp slt i32 %145, %149\n  br i1 %150, label %151, label %160\n\n151:                                              ; preds = %148, %151\n  %152 = phi i32 [ %156, %151 ], [ %149, %148 ]\n  %153 = phi i32* [ %155, %151 ], [ %126, %148 ]\n  %154 = phi i32* [ %153, %151 ], [ %144, %148 ]\n  store i32 %152, i32* %154, align 4, !tbaa !12\n  %155 = getelementptr inbounds i32, i32* %153, i64 -1\n  %156 = load i32, i32* %155, align 4, !tbaa !12\n  %157 = icmp slt i32 %145, %156\n  br i1 %157, label %151, label %160, !llvm.loop !22\n\n158:                                              ; preds = %142\n  %159 = bitcast i32* %9 to i8*\n  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* noundef nonnull align 4 dereferenceable(24) %159, i8* noundef nonnull align 4 dereferenceable(24) %8, i64 24, i1 false) #7\n  br label %160\n\n160:                                              ; preds = %151, %158, %148\n  %161 = phi i32* [ %0, %158 ], [ %144, %148 ], [ %153, %151 ]\n  store i32 %145, i32* %161, align 4, !tbaa !12\n  %162 = getelementptr inbounds i32, i32* %0, i64 7\n  %163 = load i32, i32* %162, align 4, !tbaa !12\n  %164 = load i32, i32* %0, align 4, !tbaa !12\n  %165 = icmp slt i32 %163, %164\n  br i1 %165, label %176, label %166\n\n166:                                              ; preds = %160\n  %167 = load i32, i32* %144, align 4, !tbaa !12\n  %168 = icmp slt i32 %163, %167\n  br i1 %168, label %169, label %178\n\n169:                                              ; preds = %166, %169\n  %170 = phi i32 [ %174, %169 ], [ %167, %166 ]\n  %171 = phi i32* [ %173, %169 ], [ %144, %166 ]\n  %172 = phi i32* [ %171, %169 ], [ %162, %166 ]\n  store i32 %170, i32* %172, align 4, !tbaa !12\n  %173 = getelementptr inbounds i32, i32* %171, i64 -1\n  %174 = load i32, i32* %173, align 4, !tbaa !12\n  %175 = icmp slt i32 %163, %174\n  br i1 %175, label %169, label %178, !llvm.loop !22\n\n176:                                              ; preds = %160\n  %177 = bitcast i32* %9 to i8*\n  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* noundef nonnull align 4 dereferenceable(28) %177, i8* noundef nonnull align 4 dereferenceable(28) %8, i64 28, i1 false) #7\n  br label %178\n\n178:                                              ; preds = %169, %176, %166\n  %179 = phi i32* [ %0, %176 ], [ %162, %166 ], [ %171, %169 ]\n  store i32 %163, i32* %179, align 4, !tbaa !12\n  %180 = getelementptr inbounds i32, i32* %0, i64 8\n  %181 = load i32, i32* %180, align 4, !tbaa !12\n  %182 = load i32, i32* %0, align 4, !tbaa !12\n  %183 = icmp slt i32 %181, %182\n  br i1 %183, label %194, label %184\n\n184:                                              ; preds = %178\n  %185 = load i32, i32* %162, align 4, !tbaa !12\n  %186 = icmp slt i32 %181, %185\n  br i1 %186, label %187, label %196\n\n187:                                              ; preds = %184, %187\n  %188 = phi i32 [ %192, %187 ], [ %185, %184 ]\n  %189 = phi i32* [ %191, %187 ], [ %162, %184 ]\n  %190 = phi i32* [ %189, %187 ], [ %180, %184 ]\n  store i32 %188, i32* %190, align 4, !tbaa !12\n  %191 = getelementptr inbounds i32, i32* %189, i64 -1\n  %192 = load i32, i32* %191, align 4, !tbaa !12\n  %193 = icmp slt i32 %181, %192\n  br i1 %193, label %187, label %196, !llvm.loop !22\n\n194:                                              ; preds = %178\n  %195 = bitcast i32* %9 to i8*\n  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* noundef nonnull align 4 dereferenceable(32) %195, i8* noundef nonnull align 4 dereferenceable(32) %8, i64 32, i1 false) #7\n  br label %196\n\n196:                                              ; preds = %187, %194, %184\n  %197 = phi i32* [ %0, %194 ], [ %180, %184 ], [ %189, %187 ]\n  store i32 %181, i32* %197, align 4, !tbaa !12\n  %198 = getelementptr inbounds i32, i32* %0, i64 9\n  %199 = load i32, i32* %198, align 4, !tbaa !12\n  %200 = load i32, i32* %0, align 4, !tbaa !12\n  %201 = icmp slt i32 %199, %200\n  br i1 %201, label %212, label %202\n\n202:                                              ; preds = %196\n  %203 = load i32, i32* %180, align 4, !tbaa !12\n  %204 = icmp slt i32 %199, %203\n  br i1 %204, label %205, label %214\n\n205:                                              ; preds = %202, %205\n  %206 = phi i32 [ %210, %205 ], [ %203, %202 ]\n  %207 = phi i32* [ %209, %205 ], [ %180, %202 ]\n  %208 = phi i32* [ %207, %205 ], [ %198, %202 ]\n  store i32 %206, i32* %208, align 4, !tbaa !12\n  %209 = getelementptr inbounds i32, i32* %207, i64 -1\n  %210 = load i32, i32* %209, align 4, !tbaa !12\n  %211 = icmp slt i32 %199, %210\n  br i1 %211, label %205, label %214, !llvm.loop !22\n\n212:                                              ; preds = %196\n  %213 = bitcast i32* %9 to i8*\n  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* noundef nonnull align 4 dereferenceable(36) %213, i8* noundef nonnull align 4 dereferenceable(36) %8, i64 36, i1 false) #7\n  br label %214\n\n214:                                              ; preds = %205, %212, %202\n  %215 = phi i32* [ %0, %212 ], [ %198, %202 ], [ %207, %205 ]\n  store i32 %199, i32* %215, align 4, !tbaa !12\n  %216 = getelementptr inbounds i32, i32* %0, i64 10\n  %217 = load i32, i32* %216, align 4, !tbaa !12\n  %218 = load i32, i32* %0, align 4, !tbaa !12\n  %219 = icmp slt i32 %217, %218\n  br i1 %219, label %230, label %220\n\n220:                                              ; preds = %214\n  %221 = load i32, i32* %198, align 4, !tbaa !12\n  %222 = icmp slt i32 %217, %221\n  br i1 %222, label %223, label %232\n\n223:                                              ; preds = %220, %223\n  %224 = phi i32 [ %228, %223 ], [ %221, %220 ]\n  %225 = phi i32* [ %227, %223 ], [ %198, %220 ]\n  %226 = phi i32* [ %225, %223 ], [ %216, %220 ]\n  store i32 %224, i32* %226, align 4, !tbaa !12\n  %227 = getelementptr inbounds i32, i32* %225, i64 -1\n  %228 = load i32, i32* %227, align 4, !tbaa !12\n  %229 = icmp slt i32 %217, %228\n  br i1 %229, label %223, label %232, !llvm.loop !22\n\n230:                                              ; preds = %214\n  %231 = bitcast i32* %9 to i8*\n  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* noundef nonnull align 4 dereferenceable(40) %231, i8* noundef nonnull align 4 dereferenceable(40) %8, i64 40, i1 false) #7\n  br label %232\n\n232:                                              ; preds = %223, %230, %220\n  %233 = phi i32* [ %0, %230 ], [ %216, %220 ], [ %225, %223 ]\n  store i32 %217, i32* %233, align 4, !tbaa !12\n  %234 = getelementptr inbounds i32, i32* %0, i64 11\n  %235 = load i32, i32* %234, align 4, !tbaa !12\n  %236 = load i32, i32* %0, align 4, !tbaa !12\n  %237 = icmp slt i32 %235, %236\n  br i1 %237, label %248, label %238\n\n238:                                              ; preds = %232\n  %239 = load i32, i32* %216, align 4, !tbaa !12\n  %240 = icmp slt i32 %235, %239\n  br i1 %240, label %241, label %250\n\n241:                                              ; preds = %238, %241\n  %242 = phi i32 [ %246, %241 ], [ %239, %238 ]\n  %243 = phi i32* [ %245, %241 ], [ %216, %238 ]\n  %244 = phi i32* [ %243, %241 ], [ %234, %238 ]\n  store i32 %242, i32* %244, align 4, !tbaa !12\n  %245 = getelementptr inbounds i32, i32* %243, i64 -1\n  %246 = load i32, i32* %245, align 4, !tbaa !12\n  %247 = icmp slt i32 %235, %246\n  br i1 %247, label %241, label %250, !llvm.loop !22\n\n248:                                              ; preds = %232\n  %249 = bitcast i32* %9 to i8*\n  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* noundef nonnull align 4 dereferenceable(44) %249, i8* noundef nonnull align 4 dereferenceable(44) %8, i64 44, i1 false) #7\n  br label %250\n\n250:                                              ; preds = %241, %248, %238\n  %251 = phi i32* [ %0, %248 ], [ %234, %238 ], [ %243, %241 ]\n  store i32 %235, i32* %251, align 4, !tbaa !12\n  %252 = getelementptr inbounds i32, i32* %0, i64 12\n  %253 = load i32, i32* %252, align 4, !tbaa !12\n  %254 = load i32, i32* %0, align 4, !tbaa !12\n  %255 = icmp slt i32 %253, %254\n  br i1 %255, label %266, label %256\n\n256:                                              ; preds = %250\n  %257 = load i32, i32* %234, align 4, !tbaa !12\n  %258 = icmp slt i32 %253, %257\n  br i1 %258, label %259, label %268\n\n259:                                              ; preds = %256, %259\n  %260 = phi i32 [ %264, %259 ], [ %257, %256 ]\n  %261 = phi i32* [ %263, %259 ], [ %234, %256 ]\n  %262 = phi i32* [ %261, %259 ], [ %252, %256 ]\n  store i32 %260, i32* %262, align 4, !tbaa !12\n  %263 = getelementptr inbounds i32, i32* %261, i64 -1\n  %264 = load i32, i32* %263, align 4, !tbaa !12\n  %265 = icmp slt i32 %253, %264\n  br i1 %265, label %259, label %268, !llvm.loop !22\n\n266:                                              ; preds = %250\n  %267 = bitcast i32* %9 to i8*\n  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* noundef nonnull align 4 dereferenceable(48) %267, i8* noundef nonnull align 4 dereferenceable(48) %8, i64 48, i1 false) #7\n  br label %268\n\n268:                                              ; preds = %259, %266, %256\n  %269 = phi i32* [ %0, %266 ], [ %252, %256 ], [ %261, %259 ]\n  store i32 %253, i32* %269, align 4, !tbaa !12\n  %270 = getelementptr inbounds i32, i32* %0, i64 13\n  %271 = load i32, i32* %270, align 4, !tbaa !12\n  %272 = load i32, i32* %0, align 4, !tbaa !12\n  %273 = icmp slt i32 %271, %272\n  br i1 %273, label %284, label %274\n\n274:                                              ; preds = %268\n  %275 = load i32, i32* %252, align 4, !tbaa !12\n  %276 = icmp slt i32 %271, %275\n  br i1 %276, label %277, label %286\n\n277:                                              ; preds = %274, %277\n  %278 = phi i32 [ %282, %277 ], [ %275, %274 ]\n  %279 = phi i32* [ %281, %277 ], [ %252, %274 ]\n  %280 = phi i32* [ %279, %277 ], [ %270, %274 ]\n  store i32 %278, i32* %280, align 4, !tbaa !12\n  %281 = getelementptr inbounds i32, i32* %279, i64 -1\n  %282 = load i32, i32* %281, align 4, !tbaa !12\n  %283 = icmp slt i32 %271, %282\n  br i1 %283, label %277, label %286, !llvm.loop !22\n\n284:                                              ; preds = %268\n  %285 = bitcast i32* %9 to i8*\n  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* noundef nonnull align 4 dereferenceable(52) %285, i8* noundef nonnull align 4 dereferenceable(52) %8, i64 52, i1 false) #7\n  br label %286\n\n286:                                              ; preds = %277, %284, %274\n  %287 = phi i32* [ %0, %284 ], [ %270, %274 ], [ %279, %277 ]\n  store i32 %271, i32* %287, align 4, !tbaa !12\n  %288 = getelementptr inbounds i32, i32* %0, i64 14\n  %289 = load i32, i32* %288, align 4, !tbaa !12\n  %290 = load i32, i32* %0, align 4, !tbaa !12\n  %291 = icmp slt i32 %289, %290\n  br i1 %291, label %302, label %292\n\n292:                                              ; preds = %286\n  %293 = load i32, i32* %270, align 4, !tbaa !12\n  %294 = icmp slt i32 %289, %293\n  br i1 %294, label %295, label %304\n\n295:                                              ; preds = %292, %295\n  %296 = phi i32 [ %300, %295 ], [ %293, %292 ]\n  %297 = phi i32* [ %299, %295 ], [ %270, %292 ]\n  %298 = phi i32* [ %297, %295 ], [ %288, %292 ]\n  store i32 %296, i32* %298, align 4, !tbaa !12\n  %299 = getelementptr inbounds i32, i32* %297, i64 -1\n  %300 = load i32, i32* %299, align 4, !tbaa !12\n  %301 = icmp slt i32 %289, %300\n  br i1 %301, label %295, label %304, !llvm.loop !22\n\n302:                                              ; preds = %286\n  %303 = bitcast i32* %9 to i8*\n  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* noundef nonnull align 4 dereferenceable(56) %303, i8* noundef nonnull align 4 dereferenceable(56) %8, i64 56, i1 false) #7\n  br label %304\n\n304:                                              ; preds = %295, %302, %292\n  %305 = phi i32* [ %0, %302 ], [ %288, %292 ], [ %297, %295 ]\n  store i32 %289, i32* %305, align 4, !tbaa !12\n  %306 = getelementptr inbounds i32, i32* %0, i64 15\n  %307 = load i32, i32* %306, align 4, !tbaa !12\n  %308 = load i32, i32* %0, align 4, !tbaa !12\n  %309 = icmp slt i32 %307, %308\n  br i1 %309, label %320, label %310\n\n310:                                              ; preds = %304\n  %311 = load i32, i32* %288, align 4, !tbaa !12\n  %312 = icmp slt i32 %307, %311\n  br i1 %312, label %313, label %322\n\n313:                                              ; preds = %310, %313\n  %314 = phi i32 [ %318, %313 ], [ %311, %310 ]\n  %315 = phi i32* [ %317, %313 ], [ %288, %310 ]\n  %316 = phi i32* [ %315, %313 ], [ %306, %310 ]\n  store i32 %314, i32* %316, align 4, !tbaa !12\n  %317 = getelementptr inbounds i32, i32* %315, i64 -1\n  %318 = load i32, i32* %317, align 4, !tbaa !12\n  %319 = icmp slt i32 %307, %318\n  br i1 %319, label %313, label %322, !llvm.loop !22\n\n320:                                              ; preds = %304\n  %321 = bitcast i32* %9 to i8*\n  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* noundef nonnull align 4 dereferenceable(60) %321, i8* noundef nonnull align 4 dereferenceable(60) %8, i64 60, i1 false) #7\n  br label %322\n\n322:                                              ; preds = %313, %320, %310\n  %323 = phi i32* [ %0, %320 ], [ %306, %310 ], [ %315, %313 ]\n  store i32 %307, i32* %323, align 4, !tbaa !12\n  %324 = getelementptr inbounds i32, i32* %0, i64 16\n  %325 = icmp eq i32* %324, %1\n  br i1 %325, label %73, label %21\n}\n\n; Function Attrs: uwtable\ndefine linkonce_odr dso_local void @_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEENS0_5__ops15_Iter_less_iterEEvT_S9_RT0_(i32* %0, i32* %1, %\"struct.__gnu_cxx::__ops::_Iter_less_iter\"* nonnull align 1 dereferenceable(1) %2) local_unnamed_addr #0 comdat {\n  %4 = ptrtoint i32* %1 to i64\n  %5 = ptrtoint i32* %0 to i64\n  %6 = sub i64 %4, %5\n  %7 = ashr exact i64 %6, 2\n  %8 = icmp slt i64 %6, 8\n  br i1 %8, label %100, label %9\n\n9:                                                ; preds = %3\n  %10 = add nsw i64 %7, -2\n  %11 = lshr i64 %10, 1\n  %12 = add nsw i64 %7, -1\n  %13 = sdiv i64 %12, 2\n  %14 = and i64 %6, 4\n  %15 = icmp eq i64 %14, 0\n  br i1 %15, label %16, label %20\n\n16:                                               ; preds = %9\n  %17 = or i64 %10, 1\n  %18 = getelementptr inbounds i32, i32* %0, i64 %17\n  %19 = getelementptr inbounds i32, i32* %0, i64 %11\n  br label %57\n\n20:                                               ; preds = %9, %52\n  %21 = phi i64 [ %56, %52 ], [ %11, %9 ]\n  %22 = getelementptr inbounds i32, i32* %0, i64 %21\n  %23 = load i32, i32* %22, align 4, !tbaa !12\n  %24 = icmp sgt i64 %13, %21\n  br i1 %24, label %25, label %52\n\n25:                                               ; preds = %20, %25\n  %26 = phi i64 [ %35, %25 ], [ %21, %20 ]\n  %27 = shl i64 %26, 1\n  %28 = add i64 %27, 2\n  %29 = getelementptr inbounds i32, i32* %0, i64 %28\n  %30 = or i64 %27, 1\n  %31 = getelementptr inbounds i32, i32* %0, i64 %30\n  %32 = load i32, i32* %29, align 4, !tbaa !12\n  %33 = load i32, i32* %31, align 4, !tbaa !12\n  %34 = icmp slt i32 %32, %33\n  %35 = select i1 %34, i64 %30, i64 %28\n  %36 = getelementptr inbounds i32, i32* %0, i64 %35\n  %37 = load i32, i32* %36, align 4, !tbaa !12\n  %38 = getelementptr inbounds i32, i32* %0, i64 %26\n  store i32 %37, i32* %38, align 4, !tbaa !12\n  %39 = icmp slt i64 %35, %13\n  br i1 %39, label %25, label %40, !llvm.loop !14\n\n40:                                               ; preds = %25\n  %41 = icmp sgt i64 %35, %21\n  br i1 %41, label %42, label %52\n\n42:                                               ; preds = %40, %49\n  %43 = phi i64 [ %45, %49 ], [ %35, %40 ]\n  %44 = add nsw i64 %43, -1\n  %45 = sdiv i64 %44, 2\n  %46 = getelementptr inbounds i32, i32* %0, i64 %45\n  %47 = load i32, i32* %46, align 4, !tbaa !12\n  %48 = icmp slt i32 %47, %23\n  br i1 %48, label %49, label %52\n\n49:                                               ; preds = %42\n  %50 = getelementptr inbounds i32, i32* %0, i64 %43\n  store i32 %47, i32* %50, align 4, !tbaa !12\n  %51 = icmp sgt i64 %45, %21\n  br i1 %51, label %42, label %52, !llvm.loop !16\n\n52:                                               ; preds = %42, %49, %20, %40\n  %53 = phi i64 [ %35, %40 ], [ %21, %20 ], [ %45, %49 ], [ %43, %42 ]\n  %54 = getelementptr inbounds i32, i32* %0, i64 %53\n  store i32 %23, i32* %54, align 4, !tbaa !12\n  %55 = icmp eq i64 %21, 0\n  %56 = add nsw i64 %21, -1\n  br i1 %55, label %100, label %20, !llvm.loop !25\n\n57:                                               ; preds = %16, %95\n  %58 = phi i64 [ %99, %95 ], [ %11, %16 ]\n  %59 = getelementptr inbounds i32, i32* %0, i64 %58\n  %60 = load i32, i32* %59, align 4, !tbaa !12\n  %61 = icmp sgt i64 %13, %58\n  br i1 %61, label %62, label %77\n\n62:                                               ; preds = %57, %62\n  %63 = phi i64 [ %72, %62 ], [ %58, %57 ]\n  %64 = shl i64 %63, 1\n  %65 = add i64 %64, 2\n  %66 = getelementptr inbounds i32, i32* %0, i64 %65\n  %67 = or i64 %64, 1\n  %68 = getelementptr inbounds i32, i32* %0, i64 %67\n  %69 = load i32, i32* %66, align 4, !tbaa !12\n  %70 = load i32, i32* %68, align 4, !tbaa !12\n  %71 = icmp slt i32 %69, %70\n  %72 = select i1 %71, i64 %67, i64 %65\n  %73 = getelementptr inbounds i32, i32* %0, i64 %72\n  %74 = load i32, i32* %73, align 4, !tbaa !12\n  %75 = getelementptr inbounds i32, i32* %0, i64 %63\n  store i32 %74, i32* %75, align 4, !tbaa !12\n  %76 = icmp slt i64 %72, %13\n  br i1 %76, label %62, label %77, !llvm.loop !14\n\n77:                                               ; preds = %62, %57\n  %78 = phi i64 [ %58, %57 ], [ %72, %62 ]\n  %79 = icmp eq i64 %78, %11\n  br i1 %79, label %80, label %82\n\n80:                                               ; preds = %77\n  %81 = load i32, i32* %18, align 4, !tbaa !12\n  store i32 %81, i32* %19, align 4, !tbaa !12\n  br label %82\n\n82:                                               ; preds = %80, %77\n  %83 = phi i64 [ %17, %80 ], [ %78, %77 ]\n  %84 = icmp sgt i64 %83, %58\n  br i1 %84, label %85, label %95\n\n85:                                               ; preds = %82, %92\n  %86 = phi i64 [ %88, %92 ], [ %83, %82 ]\n  %87 = add nsw i64 %86, -1\n  %88 = sdiv i64 %87, 2\n  %89 = getelementptr inbounds i32, i32* %0, i64 %88\n  %90 = load i32, i32* %89, align 4, !tbaa !12\n  %91 = icmp slt i32 %90, %60\n  br i1 %91, label %92, label %95\n\n92:                                               ; preds = %85\n  %93 = getelementptr inbounds i32, i32* %0, i64 %86\n  store i32 %90, i32* %93, align 4, !tbaa !12\n  %94 = icmp sgt i64 %88, %58\n  br i1 %94, label %85, label %95, !llvm.loop !16\n\n95:                                               ; preds = %85, %92, %82\n  %96 = phi i64 [ %83, %82 ], [ %88, %92 ], [ %86, %85 ]\n  %97 = getelementptr inbounds i32, i32* %0, i64 %96\n  store i32 %60, i32* %97, align 4, !tbaa !12\n  %98 = icmp eq i64 %58, 0\n  %99 = add nsw i64 %58, -1\n  br i1 %98, label %100, label %57, !llvm.loop !25\n\n100:                                              ; preds = %52, %95, %3\n  ret void\n}\n\n; Function Attrs: mustprogress nofree nosync nounwind readnone speculatable willreturn\ndeclare i64 @llvm.ctlz.i64(i64, i1 immarg) #3\n\n; Function Attrs: argmemonly mustprogress nofree nounwind willreturn\ndeclare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #2\n\n; Function Attrs: nobuiltin allocsize(0)\ndeclare dso_local nonnull i8* @_Znwm(i64) local_unnamed_addr #4\n\n; Function Attrs: noreturn\ndeclare dso_local void @_ZSt20__throw_length_errorPKc(i8*) local_unnamed_addr #5\n\n; Function Attrs: argmemonly nofree nounwind willreturn writeonly\ndeclare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #6\n\nattributes #0 = { uwtable \"frame-pointer\"=\"none\" \"min-legal-vector-width\"=\"0\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #1 = { argmemonly mustprogress nofree nosync nounwind willreturn }\nattributes #2 = { argmemonly mustprogress nofree nounwind willreturn }\nattributes #3 = { mustprogress nofree nosync nounwind readnone speculatable willreturn }\nattributes #4 = { nobuiltin allocsize(0) \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #5 = { noreturn \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #6 = { argmemonly nofree nounwind willreturn writeonly }\nattributes #7 = { nounwind }\nattributes #8 = { noreturn }\nattributes #9 = { allocsize(0) }\n\n!llvm.module.flags = !{!0, !1}\n!llvm.ident = !{!2}\n\n!0 = !{i32 1, !\"wchar_size\", i32 4}\n!1 = !{i32 7, !\"uwtable\", i32 1}\n!2 = !{!\"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)\"}\n!3 = !{!4, !4, i64 0}\n!4 = !{!\"any pointer\", !5, i64 0}\n!5 = !{!\"omnipotent char\", !6, i64 0}\n!6 = !{!\"Simple C++ TBAA\"}\n!7 = !{i64 0, i64 65}\n!8 = !{!9, !4, i64 0}\n!9 = !{!\"_ZTSNSt12_Vector_baseIiSaIiEE17_Vector_impl_dataE\", !4, i64 0, !4, i64 8, !4, i64 16}\n!10 = !{!9, !4, i64 16}\n!11 = !{!9, !4, i64 8}\n!12 = !{!13, !13, i64 0}\n!13 = !{!\"int\", !5, i64 0}\n!14 = distinct !{!14, !15}\n!15 = !{!\"llvm.loop.mustprogress\"}\n!16 = distinct !{!16, !15}\n!17 = distinct !{!17, !15}\n!18 = distinct !{!18, !15}\n!19 = distinct !{!19, !15}\n!20 = distinct !{!20, !15}\n!21 = distinct !{!21, !15}\n!22 = distinct !{!22, !15}\n!23 = distinct !{!23, !15}\n!24 = distinct !{!24, !15}\n!25 = distinct !{!25, !15}\n", "target": "This is the targeted source code:\n/*\nGiven a vector arr of integers and a positive integer k, return a sorted vector \nof length k with the maximum k numbers in arr.\n\nExample 1:\n\n    Input: arr = {-3, -4, 5}, k = 3\n    Output: {-4, -3, 5}\n\nExample 2:\n\n    Input: arr = {4, -4, 4}, k = 2\n    Output: {4, 4}\n\nExample 3:\n\n    Input: arr = {-3, 2, 1, 2, -1, -2, 1}, k = 1\n    Output: {2}\n\nNote:\n    1. The length of the vector will be in the range of {1, 1000}.\n    2. The elements in the vector will be in the range of {-1000, 1000}.\n    3. 0 <= k <= len(arr)\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> maximum(vector<int> arr,int k){\n\n    sort(arr.begin(),arr.end());\n    vector<int> out(arr.end()-k,arr.end());\n    return out;\n}\n"}
{"input": "Convert this to C++:\n; ModuleID = '../../Human_xBenchmarks_164/CPP_121/CPP_121.cpp'\nsource_filename = \"../../Human_xBenchmarks_164/CPP_121/CPP_121.cpp\"\ntarget datalayout = \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\ntarget triple = \"x86_64-unknown-linux-gnu\"\n\n%\"class.std::vector\" = type { %\"struct.std::_Vector_base\" }\n%\"struct.std::_Vector_base\" = type { %\"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl\" }\n%\"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl\" = type { %\"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl_data\" }\n%\"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl_data\" = type { i32*, i32*, i32* }\n\n; Function Attrs: mustprogress nofree norecurse nosync nounwind readonly uwtable willreturn\ndefine dso_local i32 @_Z9solutionsSt6vectorIiSaIiEE(%\"class.std::vector\"* nocapture readonly %0) local_unnamed_addr #0 {\n  %2 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0, i64 0, i32 0, i32 0, i32 0, i32 1\n  %3 = load i32*, i32** %2, align 8, !tbaa !3\n  %4 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0, i64 0, i32 0, i32 0, i32 0, i32 0\n  %5 = load i32*, i32** %4, align 8, !tbaa !8\n  %6 = ptrtoint i32* %3 to i64\n  %7 = ptrtoint i32* %5 to i64\n  %8 = sub i64 %6, %7\n  %9 = icmp eq i64 %8, 0\n  br i1 %9, label %74, label %10\n\n10:                                               ; preds = %1\n  %11 = ashr exact i64 %8, 2\n  %12 = call i64 @llvm.umax.i64(i64 %11, i64 2)\n  %13 = add i64 %12, -1\n  %14 = lshr i64 %13, 1\n  %15 = add nuw i64 %14, 1\n  %16 = icmp ult i64 %13, 14\n  br i1 %16, label %70, label %17\n\n17:                                               ; preds = %10\n  %18 = and i64 %15, -8\n  %19 = shl i64 %18, 1\n  br label %20\n\n20:                                               ; preds = %20, %17\n  %21 = phi i64 [ 0, %17 ], [ %64, %20 ]\n  %22 = phi <4 x i32> [ zeroinitializer, %17 ], [ %62, %20 ]\n  %23 = phi <4 x i32> [ zeroinitializer, %17 ], [ %63, %20 ]\n  %24 = shl i64 %21, 1\n  %25 = or i64 %24, 2\n  %26 = or i64 %24, 4\n  %27 = or i64 %24, 6\n  %28 = or i64 %24, 8\n  %29 = or i64 %24, 10\n  %30 = or i64 %24, 12\n  %31 = or i64 %24, 14\n  %32 = getelementptr inbounds i32, i32* %5, i64 %24\n  %33 = getelementptr inbounds i32, i32* %5, i64 %25\n  %34 = getelementptr inbounds i32, i32* %5, i64 %26\n  %35 = getelementptr inbounds i32, i32* %5, i64 %27\n  %36 = getelementptr inbounds i32, i32* %5, i64 %28\n  %37 = getelementptr inbounds i32, i32* %5, i64 %29\n  %38 = getelementptr inbounds i32, i32* %5, i64 %30\n  %39 = getelementptr inbounds i32, i32* %5, i64 %31\n  %40 = load i32, i32* %32, align 4, !tbaa !9\n  %41 = load i32, i32* %33, align 4, !tbaa !9\n  %42 = load i32, i32* %34, align 4, !tbaa !9\n  %43 = load i32, i32* %35, align 4, !tbaa !9\n  %44 = insertelement <4 x i32> poison, i32 %40, i32 0\n  %45 = insertelement <4 x i32> %44, i32 %41, i32 1\n  %46 = insertelement <4 x i32> %45, i32 %42, i32 2\n  %47 = insertelement <4 x i32> %46, i32 %43, i32 3\n  %48 = load i32, i32* %36, align 4, !tbaa !9\n  %49 = load i32, i32* %37, align 4, !tbaa !9\n  %50 = load i32, i32* %38, align 4, !tbaa !9\n  %51 = load i32, i32* %39, align 4, !tbaa !9\n  %52 = insertelement <4 x i32> poison, i32 %48, i32 0\n  %53 = insertelement <4 x i32> %52, i32 %49, i32 1\n  %54 = insertelement <4 x i32> %53, i32 %50, i32 2\n  %55 = insertelement <4 x i32> %54, i32 %51, i32 3\n  %56 = srem <4 x i32> %47, <i32 2, i32 2, i32 2, i32 2>\n  %57 = srem <4 x i32> %55, <i32 2, i32 2, i32 2, i32 2>\n  %58 = icmp eq <4 x i32> %56, <i32 1, i32 1, i32 1, i32 1>\n  %59 = icmp eq <4 x i32> %57, <i32 1, i32 1, i32 1, i32 1>\n  %60 = select <4 x i1> %58, <4 x i32> %47, <4 x i32> zeroinitializer\n  %61 = select <4 x i1> %59, <4 x i32> %55, <4 x i32> zeroinitializer\n  %62 = add <4 x i32> %60, %22\n  %63 = add <4 x i32> %61, %23\n  %64 = add nuw i64 %21, 8\n  %65 = icmp eq i64 %64, %18\n  br i1 %65, label %66, label %20, !llvm.loop !11\n\n66:                                               ; preds = %20\n  %67 = add <4 x i32> %63, %62\n  %68 = call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %67)\n  %69 = icmp eq i64 %15, %18\n  br i1 %69, label %74, label %70\n\n70:                                               ; preds = %10, %66\n  %71 = phi i64 [ 0, %10 ], [ %18, %66 ]\n  %72 = phi i64 [ 0, %10 ], [ %19, %66 ]\n  %73 = phi i32 [ 0, %10 ], [ %68, %66 ]\n  br label %76\n\n74:                                               ; preds = %76, %66, %1\n  %75 = phi i32 [ 0, %1 ], [ %68, %66 ], [ %85, %76 ]\n  ret i32 %75\n\n76:                                               ; preds = %70, %76\n  %77 = phi i64 [ %86, %76 ], [ %71, %70 ]\n  %78 = phi i64 [ %87, %76 ], [ %72, %70 ]\n  %79 = phi i32 [ %85, %76 ], [ %73, %70 ]\n  %80 = getelementptr inbounds i32, i32* %5, i64 %78\n  %81 = load i32, i32* %80, align 4, !tbaa !9\n  %82 = srem i32 %81, 2\n  %83 = icmp eq i32 %82, 1\n  %84 = select i1 %83, i32 %81, i32 0\n  %85 = add nsw i32 %84, %79\n  %86 = add nuw nsw i64 %77, 1\n  %87 = shl nuw nsw i64 %86, 1\n  %88 = icmp eq i64 %77, %14\n  br i1 %88, label %74, label %76, !llvm.loop !14\n}\n\n; Function Attrs: nofree nosync nounwind readnone speculatable willreturn\ndeclare i64 @llvm.umax.i64(i64, i64) #1\n\n; Function Attrs: nofree nosync nounwind readnone willreturn\ndeclare i32 @llvm.vector.reduce.add.v4i32(<4 x i32>) #2\n\nattributes #0 = { mustprogress nofree norecurse nosync nounwind readonly uwtable willreturn \"frame-pointer\"=\"none\" \"min-legal-vector-width\"=\"0\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #1 = { nofree nosync nounwind readnone speculatable willreturn }\nattributes #2 = { nofree nosync nounwind readnone willreturn }\n\n!llvm.module.flags = !{!0, !1}\n!llvm.ident = !{!2}\n\n!0 = !{i32 1, !\"wchar_size\", i32 4}\n!1 = !{i32 7, !\"uwtable\", i32 1}\n!2 = !{!\"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)\"}\n!3 = !{!4, !5, i64 8}\n!4 = !{!\"_ZTSNSt12_Vector_baseIiSaIiEE17_Vector_impl_dataE\", !5, i64 0, !5, i64 8, !5, i64 16}\n!5 = !{!\"any pointer\", !6, i64 0}\n!6 = !{!\"omnipotent char\", !7, i64 0}\n!7 = !{!\"Simple C++ TBAA\"}\n!8 = !{!4, !5, i64 0}\n!9 = !{!10, !10, i64 0}\n!10 = !{!\"int\", !6, i64 0}\n!11 = distinct !{!11, !12, !13}\n!12 = !{!\"llvm.loop.mustprogress\"}\n!13 = !{!\"llvm.loop.isvectorized\", i32 1}\n!14 = distinct !{!14, !12, !15, !13}\n!15 = !{!\"llvm.loop.unroll.runtime.disable\"}\n", "target": "This is the targeted source code:\n/*\nGiven a non-empty vector of integers, return the sum of all of the odd elements that are in even positions.\n\n\nExamples\nsolution({5, 8, 7, 1}) ==> 12\nsolution({3, 3, 3, 3, 3}) ==> 9\nsolution({30, 13, 24, 321}) ==>0\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint solutions(vector<int> lst){\n\n    int sum=0;\n    for (int i=0;i*2<lst.size();i++)\n        if (lst[i*2]%2==1) sum+=lst[i*2];\n    return sum;\n}\n"}
{"input": "Convert this to C++:\n; ModuleID = '../../Human_xBenchmarks_164/CPP_122/CPP_122.cpp'\nsource_filename = \"../../Human_xBenchmarks_164/CPP_122/CPP_122.cpp\"\ntarget datalayout = \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\ntarget triple = \"x86_64-unknown-linux-gnu\"\n\n%\"class.std::vector\" = type { %\"struct.std::_Vector_base\" }\n%\"struct.std::_Vector_base\" = type { %\"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl\" }\n%\"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl\" = type { %\"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl_data\" }\n%\"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl_data\" = type { i32*, i32*, i32* }\n\n; Function Attrs: mustprogress nofree norecurse nosync nounwind readonly uwtable willreturn\ndefine dso_local i32 @_Z12add_elementsSt6vectorIiSaIiEEi(%\"class.std::vector\"* nocapture readonly %0, i32 %1) local_unnamed_addr #0 {\n  %3 = icmp sgt i32 %1, 0\n  br i1 %3, label %4, label %86\n\n4:                                                ; preds = %2\n  %5 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0, i64 0, i32 0, i32 0, i32 0, i32 0\n  %6 = load i32*, i32** %5, align 8, !tbaa !3\n  %7 = zext i32 %1 to i64\n  %8 = icmp ult i32 %1, 8\n  br i1 %8, label %83, label %9\n\n9:                                                ; preds = %4\n  %10 = and i64 %7, 4294967288\n  %11 = add nsw i64 %10, -8\n  %12 = lshr exact i64 %11, 3\n  %13 = add nuw nsw i64 %12, 1\n  %14 = and i64 %13, 1\n  %15 = icmp eq i64 %11, 0\n  br i1 %15, label %55, label %16\n\n16:                                               ; preds = %9\n  %17 = and i64 %13, 4611686018427387902\n  br label %18\n\n18:                                               ; preds = %18, %16\n  %19 = phi i64 [ 0, %16 ], [ %52, %18 ]\n  %20 = phi <4 x i32> [ zeroinitializer, %16 ], [ %50, %18 ]\n  %21 = phi <4 x i32> [ zeroinitializer, %16 ], [ %51, %18 ]\n  %22 = phi i64 [ %17, %16 ], [ %53, %18 ]\n  %23 = getelementptr inbounds i32, i32* %6, i64 %19\n  %24 = bitcast i32* %23 to <4 x i32>*\n  %25 = load <4 x i32>, <4 x i32>* %24, align 4, !tbaa !8\n  %26 = getelementptr inbounds i32, i32* %23, i64 4\n  %27 = bitcast i32* %26 to <4 x i32>*\n  %28 = load <4 x i32>, <4 x i32>* %27, align 4, !tbaa !8\n  %29 = add <4 x i32> %25, <i32 99, i32 99, i32 99, i32 99>\n  %30 = add <4 x i32> %28, <i32 99, i32 99, i32 99, i32 99>\n  %31 = icmp ult <4 x i32> %29, <i32 199, i32 199, i32 199, i32 199>\n  %32 = icmp ult <4 x i32> %30, <i32 199, i32 199, i32 199, i32 199>\n  %33 = select <4 x i1> %31, <4 x i32> %25, <4 x i32> zeroinitializer\n  %34 = select <4 x i1> %32, <4 x i32> %28, <4 x i32> zeroinitializer\n  %35 = add <4 x i32> %33, %20\n  %36 = add <4 x i32> %34, %21\n  %37 = or i64 %19, 8\n  %38 = getelementptr inbounds i32, i32* %6, i64 %37\n  %39 = bitcast i32* %38 to <4 x i32>*\n  %40 = load <4 x i32>, <4 x i32>* %39, align 4, !tbaa !8\n  %41 = getelementptr inbounds i32, i32* %38, i64 4\n  %42 = bitcast i32* %41 to <4 x i32>*\n  %43 = load <4 x i32>, <4 x i32>* %42, align 4, !tbaa !8\n  %44 = add <4 x i32> %40, <i32 99, i32 99, i32 99, i32 99>\n  %45 = add <4 x i32> %43, <i32 99, i32 99, i32 99, i32 99>\n  %46 = icmp ult <4 x i32> %44, <i32 199, i32 199, i32 199, i32 199>\n  %47 = icmp ult <4 x i32> %45, <i32 199, i32 199, i32 199, i32 199>\n  %48 = select <4 x i1> %46, <4 x i32> %40, <4 x i32> zeroinitializer\n  %49 = select <4 x i1> %47, <4 x i32> %43, <4 x i32> zeroinitializer\n  %50 = add <4 x i32> %48, %35\n  %51 = add <4 x i32> %49, %36\n  %52 = add nuw i64 %19, 16\n  %53 = add i64 %22, -2\n  %54 = icmp eq i64 %53, 0\n  br i1 %54, label %55, label %18, !llvm.loop !10\n\n55:                                               ; preds = %18, %9\n  %56 = phi <4 x i32> [ undef, %9 ], [ %50, %18 ]\n  %57 = phi <4 x i32> [ undef, %9 ], [ %51, %18 ]\n  %58 = phi i64 [ 0, %9 ], [ %52, %18 ]\n  %59 = phi <4 x i32> [ zeroinitializer, %9 ], [ %50, %18 ]\n  %60 = phi <4 x i32> [ zeroinitializer, %9 ], [ %51, %18 ]\n  %61 = icmp eq i64 %14, 0\n  br i1 %61, label %77, label %62\n\n62:                                               ; preds = %55\n  %63 = getelementptr inbounds i32, i32* %6, i64 %58\n  %64 = bitcast i32* %63 to <4 x i32>*\n  %65 = load <4 x i32>, <4 x i32>* %64, align 4, !tbaa !8\n  %66 = getelementptr inbounds i32, i32* %63, i64 4\n  %67 = bitcast i32* %66 to <4 x i32>*\n  %68 = load <4 x i32>, <4 x i32>* %67, align 4, !tbaa !8\n  %69 = add <4 x i32> %68, <i32 99, i32 99, i32 99, i32 99>\n  %70 = icmp ult <4 x i32> %69, <i32 199, i32 199, i32 199, i32 199>\n  %71 = select <4 x i1> %70, <4 x i32> %68, <4 x i32> zeroinitializer\n  %72 = add <4 x i32> %71, %60\n  %73 = add <4 x i32> %65, <i32 99, i32 99, i32 99, i32 99>\n  %74 = icmp ult <4 x i32> %73, <i32 199, i32 199, i32 199, i32 199>\n  %75 = select <4 x i1> %74, <4 x i32> %65, <4 x i32> zeroinitializer\n  %76 = add <4 x i32> %75, %59\n  br label %77\n\n77:                                               ; preds = %55, %62\n  %78 = phi <4 x i32> [ %56, %55 ], [ %76, %62 ]\n  %79 = phi <4 x i32> [ %57, %55 ], [ %72, %62 ]\n  %80 = add <4 x i32> %79, %78\n  %81 = call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %80)\n  %82 = icmp eq i64 %10, %7\n  br i1 %82, label %86, label %83\n\n83:                                               ; preds = %4, %77\n  %84 = phi i64 [ 0, %4 ], [ %10, %77 ]\n  %85 = phi i32 [ 0, %4 ], [ %81, %77 ]\n  br label %88\n\n86:                                               ; preds = %88, %77, %2\n  %87 = phi i32 [ 0, %2 ], [ %81, %77 ], [ %96, %88 ]\n  ret i32 %87\n\n88:                                               ; preds = %83, %88\n  %89 = phi i64 [ %97, %88 ], [ %84, %83 ]\n  %90 = phi i32 [ %96, %88 ], [ %85, %83 ]\n  %91 = getelementptr inbounds i32, i32* %6, i64 %89\n  %92 = load i32, i32* %91, align 4, !tbaa !8\n  %93 = add i32 %92, 99\n  %94 = icmp ult i32 %93, 199\n  %95 = select i1 %94, i32 %92, i32 0\n  %96 = add nsw i32 %95, %90\n  %97 = add nuw nsw i64 %89, 1\n  %98 = icmp eq i64 %97, %7\n  br i1 %98, label %86, label %88, !llvm.loop !13\n}\n\n; Function Attrs: nofree nosync nounwind readnone willreturn\ndeclare i32 @llvm.vector.reduce.add.v4i32(<4 x i32>) #1\n\nattributes #0 = { mustprogress nofree norecurse nosync nounwind readonly uwtable willreturn \"frame-pointer\"=\"none\" \"min-legal-vector-width\"=\"0\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #1 = { nofree nosync nounwind readnone willreturn }\n\n!llvm.module.flags = !{!0, !1}\n!llvm.ident = !{!2}\n\n!0 = !{i32 1, !\"wchar_size\", i32 4}\n!1 = !{i32 7, !\"uwtable\", i32 1}\n!2 = !{!\"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)\"}\n!3 = !{!4, !5, i64 0}\n!4 = !{!\"_ZTSNSt12_Vector_baseIiSaIiEE17_Vector_impl_dataE\", !5, i64 0, !5, i64 8, !5, i64 16}\n!5 = !{!\"any pointer\", !6, i64 0}\n!6 = !{!\"omnipotent char\", !7, i64 0}\n!7 = !{!\"Simple C++ TBAA\"}\n!8 = !{!9, !9, i64 0}\n!9 = !{!\"int\", !6, i64 0}\n!10 = distinct !{!10, !11, !12}\n!11 = !{!\"llvm.loop.mustprogress\"}\n!12 = !{!\"llvm.loop.isvectorized\", i32 1}\n!13 = distinct !{!13, !11, !14, !12}\n!14 = !{!\"llvm.loop.unroll.runtime.disable\"}\n", "target": "This is the targeted source code:\n/*\nGiven a non-empty vector of integers arr and an integer k, return\nthe sum of the elements with at most two digits from the first k elements of arr.\n\nExample:\n\n    Input: arr = {111,21,3,4000,5,6,7,8,9}, k = 4\n    Output: 24 # sum of 21 + 3\n\nConstraints:\n    1. 1 <= len(arr) <= 100\n    2. 1 <= k <= len(arr)\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint add_elements(vector<int> arr,int k){\n\n    int sum=0;\n    for (int i=0;i<k;i++)\n        if( arr[i]>=-99 and arr[i]<=99)\n            sum+=arr[i];\n    return sum;\n}\n"}
{"input": "Convert this to C++:\n; ModuleID = '../../Human_xBenchmarks_164/CPP_123/CPP_123.cpp'\nsource_filename = \"../../Human_xBenchmarks_164/CPP_123/CPP_123.cpp\"\ntarget datalayout = \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\ntarget triple = \"x86_64-unknown-linux-gnu\"\n\n%\"class.std::vector\" = type { %\"struct.std::_Vector_base\" }\n%\"struct.std::_Vector_base\" = type { %\"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl\" }\n%\"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl\" = type { %\"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl_data\" }\n%\"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl_data\" = type { i32*, i32*, i32* }\n%\"struct.__gnu_cxx::__ops::_Iter_less_iter\" = type { i8 }\n\n$_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEElNS0_5__ops15_Iter_less_iterEEvT_S9_T0_T1_ = comdat any\n\n$_ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_ = comdat any\n\n$_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEENS0_5__ops15_Iter_less_iterEEvT_S9_RT0_ = comdat any\n\n@.str.1 = private unnamed_addr constant [26 x i8] c\"vector::_M_realloc_insert\\00\", align 1\n\n; Function Attrs: uwtable\ndefine dso_local void @_Z15get_odd_collatzi(%\"class.std::vector\"* noalias nocapture sret(%\"class.std::vector\") align 8 %0, i32 %1) local_unnamed_addr #0 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {\n  %3 = bitcast %\"class.std::vector\"* %0 to i8*\n  tail call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(24) %3, i8 0, i64 24, i1 false) #8\n  %4 = call noalias nonnull i8* @_Znwm(i64 4) #9\n  %5 = bitcast i8* %4 to i32*\n  %6 = bitcast %\"class.std::vector\"* %0 to i8**\n  store i8* %4, i8** %6, align 8, !tbaa !3\n  %7 = getelementptr inbounds i8, i8* %4, i64 4\n  %8 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0, i64 0, i32 0, i32 0, i32 0, i32 2\n  %9 = bitcast i32** %8 to i8**\n  store i8* %7, i8** %9, align 8, !tbaa !8\n  store i32 1, i32* %5, align 4\n  %10 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0, i64 0, i32 0, i32 0, i32 0, i32 1\n  %11 = bitcast i32** %10 to i8**\n  store i8* %7, i8** %11, align 8, !tbaa !9\n  %12 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0, i64 0, i32 0, i32 0, i32 0, i32 0\n  %13 = icmp eq i32 %1, 1\n  %14 = bitcast i8* %7 to i32*\n  br i1 %13, label %96, label %15\n\n15:                                               ; preds = %2, %85\n  %16 = phi i32* [ %86, %85 ], [ %5, %2 ]\n  %17 = phi i32* [ %87, %85 ], [ %14, %2 ]\n  %18 = phi i32* [ %88, %85 ], [ %5, %2 ]\n  %19 = phi i32* [ %89, %85 ], [ %5, %2 ]\n  %20 = phi i32* [ %90, %85 ], [ %14, %2 ]\n  %21 = phi i32* [ %91, %85 ], [ %14, %2 ]\n  %22 = phi i32 [ %92, %85 ], [ %1, %2 ]\n  %23 = srem i32 %22, 2\n  %24 = sdiv i32 %22, 2\n  %25 = icmp eq i32 %23, 1\n  br i1 %25, label %26, label %85\n\n26:                                               ; preds = %15\n  %27 = icmp eq i32* %21, %20\n  br i1 %27, label %30, label %28\n\n28:                                               ; preds = %26\n  store i32 %22, i32* %21, align 4, !tbaa !10\n  %29 = getelementptr inbounds i32, i32* %21, i64 1\n  store i32* %29, i32** %10, align 8, !tbaa !9\n  br label %66\n\n30:                                               ; preds = %26\n  %31 = ptrtoint i32* %20 to i64\n  %32 = ptrtoint i32* %19 to i64\n  %33 = sub i64 %31, %32\n  %34 = ashr exact i64 %33, 2\n  %35 = icmp eq i64 %33, 9223372036854775804\n  br i1 %35, label %36, label %38\n\n36:                                               ; preds = %30\n  invoke void @_ZSt20__throw_length_errorPKc(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.1, i64 0, i64 0)) #10\n          to label %37 unwind label %76\n\n37:                                               ; preds = %36\n  unreachable\n\n38:                                               ; preds = %30\n  %39 = icmp eq i64 %33, 0\n  %40 = select i1 %39, i64 1, i64 %34\n  %41 = add nsw i64 %40, %34\n  %42 = icmp ult i64 %41, %34\n  %43 = icmp ugt i64 %41, 2305843009213693951\n  %44 = or i1 %42, %43\n  %45 = select i1 %44, i64 2305843009213693951, i64 %41\n  %46 = icmp eq i64 %45, 0\n  br i1 %46, label %52, label %47\n\n47:                                               ; preds = %38\n  %48 = shl nuw nsw i64 %45, 2\n  %49 = invoke noalias nonnull i8* @_Znwm(i64 %48) #9\n          to label %50 unwind label %74\n\n50:                                               ; preds = %47\n  %51 = bitcast i8* %49 to i32*\n  br label %52\n\n52:                                               ; preds = %50, %38\n  %53 = phi i32* [ %51, %50 ], [ null, %38 ]\n  %54 = getelementptr inbounds i32, i32* %53, i64 %34\n  store i32 %22, i32* %54, align 4, !tbaa !10\n  %55 = icmp sgt i64 %33, 0\n  br i1 %55, label %56, label %59\n\n56:                                               ; preds = %52\n  %57 = bitcast i32* %53 to i8*\n  %58 = bitcast i32* %19 to i8*\n  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %57, i8* align 4 %58, i64 %33, i1 false) #8\n  br label %59\n\n59:                                               ; preds = %52, %56\n  %60 = getelementptr inbounds i32, i32* %54, i64 1\n  %61 = icmp eq i32* %19, null\n  br i1 %61, label %64, label %62\n\n62:                                               ; preds = %59\n  %63 = bitcast i32* %19 to i8*\n  tail call void @_ZdlPv(i8* nonnull %63) #8\n  br label %64\n\n64:                                               ; preds = %62, %59\n  store i32* %53, i32** %12, align 8, !tbaa !3\n  store i32* %60, i32** %10, align 8, !tbaa !9\n  %65 = getelementptr inbounds i32, i32* %53, i64 %45\n  store i32* %65, i32** %8, align 8, !tbaa !8\n  br label %66\n\n66:                                               ; preds = %64, %28\n  %67 = phi i32* [ %53, %64 ], [ %16, %28 ]\n  %68 = phi i32* [ %53, %64 ], [ %18, %28 ]\n  %69 = phi i32* [ %53, %64 ], [ %19, %28 ]\n  %70 = phi i32* [ %65, %64 ], [ %20, %28 ]\n  %71 = phi i32* [ %60, %64 ], [ %29, %28 ]\n  %72 = mul nsw i32 %22, 3\n  %73 = add nsw i32 %72, 1\n  br label %85\n\n74:                                               ; preds = %47\n  %75 = landingpad { i8*, i32 }\n          cleanup\n  br label %79\n\n76:                                               ; preds = %96, %107, %36\n  %77 = phi i32* [ %99, %96 ], [ %99, %107 ], [ %16, %36 ]\n  %78 = landingpad { i8*, i32 }\n          cleanup\n  br label %79\n\n79:                                               ; preds = %76, %74\n  %80 = phi i32* [ %16, %74 ], [ %77, %76 ]\n  %81 = phi { i8*, i32 } [ %75, %74 ], [ %78, %76 ]\n  %82 = icmp eq i32* %80, null\n  br i1 %82, label %109, label %83\n\n83:                                               ; preds = %79\n  %84 = bitcast i32* %80 to i8*\n  tail call void @_ZdlPv(i8* nonnull %84) #8\n  br label %109\n\n85:                                               ; preds = %15, %66\n  %86 = phi i32* [ %67, %66 ], [ %16, %15 ]\n  %87 = phi i32* [ %71, %66 ], [ %17, %15 ]\n  %88 = phi i32* [ %68, %66 ], [ %18, %15 ]\n  %89 = phi i32* [ %69, %66 ], [ %19, %15 ]\n  %90 = phi i32* [ %70, %66 ], [ %20, %15 ]\n  %91 = phi i32* [ %71, %66 ], [ %21, %15 ]\n  %92 = phi i32 [ %73, %66 ], [ %24, %15 ]\n  %93 = icmp eq i32 %92, 1\n  br i1 %93, label %94, label %15, !llvm.loop !12\n\n94:                                               ; preds = %85\n  %95 = icmp eq i32* %88, %87\n  br i1 %95, label %108, label %96\n\n96:                                               ; preds = %2, %94\n  %97 = phi i32* [ %88, %94 ], [ %5, %2 ]\n  %98 = phi i32* [ %87, %94 ], [ %14, %2 ]\n  %99 = phi i32* [ %86, %94 ], [ %5, %2 ]\n  %100 = ptrtoint i32* %98 to i64\n  %101 = ptrtoint i32* %97 to i64\n  %102 = sub i64 %100, %101\n  %103 = ashr exact i64 %102, 2\n  %104 = tail call i64 @llvm.ctlz.i64(i64 %103, i1 true) #8, !range !14\n  %105 = shl nuw nsw i64 %104, 1\n  %106 = xor i64 %105, 126\n  invoke void @_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEElNS0_5__ops15_Iter_less_iterEEvT_S9_T0_T1_(i32* %97, i32* %98, i64 %106)\n          to label %107 unwind label %76\n\n107:                                              ; preds = %96\n  invoke void @_ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_(i32* %97, i32* %98)\n          to label %108 unwind label %76\n\n108:                                              ; preds = %94, %107\n  ret void\n\n109:                                              ; preds = %83, %79\n  resume { i8*, i32 } %81\n}\n\n; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn\ndeclare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1\n\ndeclare dso_local i32 @__gxx_personality_v0(...)\n\n; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn\ndeclare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1\n\n; Function Attrs: nobuiltin allocsize(0)\ndeclare dso_local nonnull i8* @_Znwm(i64) local_unnamed_addr #2\n\n; Function Attrs: noreturn\ndeclare dso_local void @_ZSt20__throw_length_errorPKc(i8*) local_unnamed_addr #3\n\n; Function Attrs: argmemonly mustprogress nofree nounwind willreturn\ndeclare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #4\n\n; Function Attrs: nobuiltin nounwind\ndeclare dso_local void @_ZdlPv(i8*) local_unnamed_addr #5\n\n; Function Attrs: uwtable\ndefine linkonce_odr dso_local void @_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEElNS0_5__ops15_Iter_less_iterEEvT_S9_T0_T1_(i32* %0, i32* %1, i64 %2) local_unnamed_addr #0 comdat {\n  %4 = alloca %\"struct.__gnu_cxx::__ops::_Iter_less_iter\", align 1\n  %5 = ptrtoint i32* %0 to i64\n  %6 = getelementptr inbounds i32, i32* %0, i64 1\n  %7 = ptrtoint i32* %1 to i64\n  %8 = sub i64 %7, %5\n  %9 = icmp sgt i64 %8, 64\n  br i1 %9, label %10, label %123\n\n10:                                               ; preds = %3, %119\n  %11 = phi i64 [ %121, %119 ], [ %8, %3 ]\n  %12 = phi i64 [ %76, %119 ], [ %2, %3 ]\n  %13 = phi i32* [ %107, %119 ], [ %1, %3 ]\n  %14 = icmp eq i64 %12, 0\n  br i1 %14, label %15, label %74\n\n15:                                               ; preds = %10\n  %16 = getelementptr inbounds %\"struct.__gnu_cxx::__ops::_Iter_less_iter\", %\"struct.__gnu_cxx::__ops::_Iter_less_iter\"* %4, i64 0, i32 0\n  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %16)\n  call void @_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEENS0_5__ops15_Iter_less_iterEEvT_S9_RT0_(i32* %0, i32* %13, %\"struct.__gnu_cxx::__ops::_Iter_less_iter\"* nonnull align 1 dereferenceable(1) %4)\n  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %16)\n  br label %17\n\n17:                                               ; preds = %15, %70\n  %18 = phi i32* [ %19, %70 ], [ %13, %15 ]\n  %19 = getelementptr inbounds i32, i32* %18, i64 -1\n  %20 = load i32, i32* %19, align 4, !tbaa !10\n  %21 = load i32, i32* %0, align 4, !tbaa !10\n  store i32 %21, i32* %19, align 4, !tbaa !10\n  %22 = ptrtoint i32* %19 to i64\n  %23 = sub i64 %22, %5\n  %24 = ashr exact i64 %23, 2\n  %25 = add nsw i64 %24, -1\n  %26 = sdiv i64 %25, 2\n  %27 = icmp sgt i64 %23, 8\n  br i1 %27, label %28, label %43\n\n28:                                               ; preds = %17, %28\n  %29 = phi i64 [ %38, %28 ], [ 0, %17 ]\n  %30 = shl i64 %29, 1\n  %31 = add i64 %30, 2\n  %32 = getelementptr inbounds i32, i32* %0, i64 %31\n  %33 = or i64 %30, 1\n  %34 = getelementptr inbounds i32, i32* %0, i64 %33\n  %35 = load i32, i32* %32, align 4, !tbaa !10\n  %36 = load i32, i32* %34, align 4, !tbaa !10\n  %37 = icmp slt i32 %35, %36\n  %38 = select i1 %37, i64 %33, i64 %31\n  %39 = getelementptr inbounds i32, i32* %0, i64 %38\n  %40 = load i32, i32* %39, align 4, !tbaa !10\n  %41 = getelementptr inbounds i32, i32* %0, i64 %29\n  store i32 %40, i32* %41, align 4, !tbaa !10\n  %42 = icmp slt i64 %38, %26\n  br i1 %42, label %28, label %43, !llvm.loop !15\n\n43:                                               ; preds = %28, %17\n  %44 = phi i64 [ 0, %17 ], [ %38, %28 ]\n  %45 = and i64 %23, 4\n  %46 = icmp eq i64 %45, 0\n  br i1 %46, label %47, label %57\n\n47:                                               ; preds = %43\n  %48 = add nsw i64 %24, -2\n  %49 = sdiv i64 %48, 2\n  %50 = icmp eq i64 %44, %49\n  br i1 %50, label %51, label %57\n\n51:                                               ; preds = %47\n  %52 = shl i64 %44, 1\n  %53 = or i64 %52, 1\n  %54 = getelementptr inbounds i32, i32* %0, i64 %53\n  %55 = load i32, i32* %54, align 4, !tbaa !10\n  %56 = getelementptr inbounds i32, i32* %0, i64 %44\n  store i32 %55, i32* %56, align 4, !tbaa !10\n  br label %57\n\n57:                                               ; preds = %51, %47, %43\n  %58 = phi i64 [ %53, %51 ], [ %44, %47 ], [ %44, %43 ]\n  %59 = icmp sgt i64 %58, 0\n  br i1 %59, label %60, label %70\n\n60:                                               ; preds = %57, %67\n  %61 = phi i64 [ %63, %67 ], [ %58, %57 ]\n  %62 = add nsw i64 %61, -1\n  %63 = lshr i64 %62, 1\n  %64 = getelementptr inbounds i32, i32* %0, i64 %63\n  %65 = load i32, i32* %64, align 4, !tbaa !10\n  %66 = icmp slt i32 %65, %20\n  br i1 %66, label %67, label %70\n\n67:                                               ; preds = %60\n  %68 = getelementptr inbounds i32, i32* %0, i64 %61\n  store i32 %65, i32* %68, align 4, !tbaa !10\n  %69 = icmp ult i64 %62, 2\n  br i1 %69, label %70, label %60, !llvm.loop !16\n\n70:                                               ; preds = %67, %60, %57\n  %71 = phi i64 [ %58, %57 ], [ %61, %60 ], [ 0, %67 ]\n  %72 = getelementptr inbounds i32, i32* %0, i64 %71\n  store i32 %20, i32* %72, align 4, !tbaa !10\n  %73 = icmp sgt i64 %23, 4\n  br i1 %73, label %17, label %123, !llvm.loop !17\n\n74:                                               ; preds = %10\n  %75 = lshr i64 %11, 3\n  %76 = add nsw i64 %12, -1\n  %77 = getelementptr inbounds i32, i32* %0, i64 %75\n  %78 = getelementptr inbounds i32, i32* %13, i64 -1\n  %79 = load i32, i32* %6, align 4, !tbaa !10\n  %80 = load i32, i32* %77, align 4, !tbaa !10\n  %81 = icmp slt i32 %79, %80\n  %82 = load i32, i32* %78, align 4, !tbaa !10\n  br i1 %81, label %83, label %92\n\n83:                                               ; preds = %74\n  %84 = icmp slt i32 %80, %82\n  br i1 %84, label %85, label %87\n\n85:                                               ; preds = %83\n  %86 = load i32, i32* %0, align 4, !tbaa !10\n  store i32 %80, i32* %0, align 4, !tbaa !10\n  store i32 %86, i32* %77, align 4, !tbaa !10\n  br label %101\n\n87:                                               ; preds = %83\n  %88 = icmp slt i32 %79, %82\n  %89 = load i32, i32* %0, align 4, !tbaa !10\n  br i1 %88, label %90, label %91\n\n90:                                               ; preds = %87\n  store i32 %82, i32* %0, align 4, !tbaa !10\n  store i32 %89, i32* %78, align 4, !tbaa !10\n  br label %101\n\n91:                                               ; preds = %87\n  store i32 %79, i32* %0, align 4, !tbaa !10\n  store i32 %89, i32* %6, align 4, !tbaa !10\n  br label %101\n\n92:                                               ; preds = %74\n  %93 = icmp slt i32 %79, %82\n  br i1 %93, label %94, label %96\n\n94:                                               ; preds = %92\n  %95 = load i32, i32* %0, align 4, !tbaa !10\n  store i32 %79, i32* %0, align 4, !tbaa !10\n  store i32 %95, i32* %6, align 4, !tbaa !10\n  br label %101\n\n96:                                               ; preds = %92\n  %97 = icmp slt i32 %80, %82\n  %98 = load i32, i32* %0, align 4, !tbaa !10\n  br i1 %97, label %99, label %100\n\n99:                                               ; preds = %96\n  store i32 %82, i32* %0, align 4, !tbaa !10\n  store i32 %98, i32* %78, align 4, !tbaa !10\n  br label %101\n\n100:                                              ; preds = %96\n  store i32 %80, i32* %0, align 4, !tbaa !10\n  store i32 %98, i32* %77, align 4, !tbaa !10\n  br label %101\n\n101:                                              ; preds = %100, %99, %94, %91, %90, %85\n  br label %102\n\n102:                                              ; preds = %101, %118\n  %103 = phi i32* [ %110, %118 ], [ %6, %101 ]\n  %104 = phi i32* [ %113, %118 ], [ %13, %101 ]\n  %105 = load i32, i32* %0, align 4, !tbaa !10\n  br label %106\n\n106:                                              ; preds = %106, %102\n  %107 = phi i32* [ %103, %102 ], [ %110, %106 ]\n  %108 = load i32, i32* %107, align 4, !tbaa !10\n  %109 = icmp slt i32 %108, %105\n  %110 = getelementptr inbounds i32, i32* %107, i64 1\n  br i1 %109, label %106, label %111, !llvm.loop !18\n\n111:                                              ; preds = %106, %111\n  %112 = phi i32* [ %113, %111 ], [ %104, %106 ]\n  %113 = getelementptr inbounds i32, i32* %112, i64 -1\n  %114 = load i32, i32* %113, align 4, !tbaa !10\n  %115 = icmp slt i32 %105, %114\n  br i1 %115, label %111, label %116, !llvm.loop !19\n\n116:                                              ; preds = %111\n  %117 = icmp ult i32* %107, %113\n  br i1 %117, label %118, label %119\n\n118:                                              ; preds = %116\n  store i32 %114, i32* %107, align 4, !tbaa !10\n  store i32 %108, i32* %113, align 4, !tbaa !10\n  br label %102, !llvm.loop !20\n\n119:                                              ; preds = %116\n  tail call void @_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEElNS0_5__ops15_Iter_less_iterEEvT_S9_T0_T1_(i32* nonnull %107, i32* %13, i64 %76)\n  %120 = ptrtoint i32* %107 to i64\n  %121 = sub i64 %120, %5\n  %122 = icmp sgt i64 %121, 64\n  br i1 %122, label %10, label %123, !llvm.loop !21\n\n123:                                              ; preds = %119, %70, %3\n  ret void\n}\n\n; Function Attrs: uwtable\ndefine linkonce_odr dso_local void @_ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_(i32* %0, i32* %1) local_unnamed_addr #0 comdat {\n  %3 = ptrtoint i32* %1 to i64\n  %4 = ptrtoint i32* %0 to i64\n  %5 = sub i64 %3, %4\n  %6 = icmp sgt i64 %5, 64\n  br i1 %6, label %7, label %38\n\n7:                                                ; preds = %2\n  %8 = bitcast i32* %0 to i8*\n  %9 = getelementptr i32, i32* %0, i64 1\n  %10 = load i32, i32* %9, align 4, !tbaa !10\n  %11 = load i32, i32* %0, align 4, !tbaa !10\n  %12 = icmp slt i32 %10, %11\n  br i1 %12, label %13, label %15\n\n13:                                               ; preds = %7\n  %14 = load i32, i32* %0, align 4\n  store i32 %14, i32* %9, align 4\n  br label %15\n\n15:                                               ; preds = %7, %13\n  %16 = phi i32* [ %0, %13 ], [ %9, %7 ]\n  store i32 %10, i32* %16, align 4, !tbaa !10\n  %17 = getelementptr inbounds i32, i32* %0, i64 2\n  %18 = load i32, i32* %17, align 4, !tbaa !10\n  %19 = load i32, i32* %0, align 4, !tbaa !10\n  %20 = icmp slt i32 %18, %19\n  br i1 %20, label %84, label %74\n\n21:                                               ; preds = %322, %34\n  %22 = phi i32* [ %36, %34 ], [ %324, %322 ]\n  %23 = load i32, i32* %22, align 4, !tbaa !10\n  %24 = getelementptr inbounds i32, i32* %22, i64 -1\n  %25 = load i32, i32* %24, align 4, !tbaa !10\n  %26 = icmp slt i32 %23, %25\n  br i1 %26, label %27, label %34\n\n27:                                               ; preds = %21, %27\n  %28 = phi i32 [ %32, %27 ], [ %25, %21 ]\n  %29 = phi i32* [ %31, %27 ], [ %24, %21 ]\n  %30 = phi i32* [ %29, %27 ], [ %22, %21 ]\n  store i32 %28, i32* %30, align 4, !tbaa !10\n  %31 = getelementptr inbounds i32, i32* %29, i64 -1\n  %32 = load i32, i32* %31, align 4, !tbaa !10\n  %33 = icmp slt i32 %23, %32\n  br i1 %33, label %27, label %34, !llvm.loop !22\n\n34:                                               ; preds = %27, %21\n  %35 = phi i32* [ %22, %21 ], [ %29, %27 ]\n  store i32 %23, i32* %35, align 4, !tbaa !10\n  %36 = getelementptr inbounds i32, i32* %22, i64 1\n  %37 = icmp eq i32* %36, %1\n  br i1 %37, label %73, label %21, !llvm.loop !23\n\n38:                                               ; preds = %2\n  %39 = icmp eq i32* %0, %1\n  br i1 %39, label %73, label %40\n\n40:                                               ; preds = %38\n  %41 = bitcast i32* %0 to i8*\n  %42 = getelementptr inbounds i32, i32* %0, i64 1\n  %43 = icmp eq i32* %42, %1\n  br i1 %43, label %73, label %44\n\n44:                                               ; preds = %40, %69\n  %45 = phi i32* [ %71, %69 ], [ %42, %40 ]\n  %46 = phi i32* [ %45, %69 ], [ %0, %40 ]\n  %47 = load i32, i32* %45, align 4, !tbaa !10\n  %48 = load i32, i32* %0, align 4, !tbaa !10\n  %49 = icmp slt i32 %47, %48\n  br i1 %49, label %50, label %59\n\n50:                                               ; preds = %44\n  %51 = ptrtoint i32* %45 to i64\n  %52 = sub i64 %51, %4\n  %53 = icmp eq i64 %52, 0\n  br i1 %53, label %69, label %54\n\n54:                                               ; preds = %50\n  %55 = ashr exact i64 %52, 2\n  %56 = sub nsw i64 2, %55\n  %57 = getelementptr inbounds i32, i32* %46, i64 %56\n  %58 = bitcast i32* %57 to i8*\n  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* nonnull align 4 %58, i8* nonnull align 4 %41, i64 %52, i1 false) #8\n  br label %69\n\n59:                                               ; preds = %44\n  %60 = load i32, i32* %46, align 4, !tbaa !10\n  %61 = icmp slt i32 %47, %60\n  br i1 %61, label %62, label %69\n\n62:                                               ; preds = %59, %62\n  %63 = phi i32 [ %67, %62 ], [ %60, %59 ]\n  %64 = phi i32* [ %66, %62 ], [ %46, %59 ]\n  %65 = phi i32* [ %64, %62 ], [ %45, %59 ]\n  store i32 %63, i32* %65, align 4, !tbaa !10\n  %66 = getelementptr inbounds i32, i32* %64, i64 -1\n  %67 = load i32, i32* %66, align 4, !tbaa !10\n  %68 = icmp slt i32 %47, %67\n  br i1 %68, label %62, label %69, !llvm.loop !22\n\n69:                                               ; preds = %62, %59, %54, %50\n  %70 = phi i32* [ %0, %50 ], [ %0, %54 ], [ %45, %59 ], [ %64, %62 ]\n  store i32 %47, i32* %70, align 4, !tbaa !10\n  %71 = getelementptr inbounds i32, i32* %45, i64 1\n  %72 = icmp eq i32* %71, %1\n  br i1 %72, label %73, label %44, !llvm.loop !24\n\n73:                                               ; preds = %69, %34, %40, %38, %322\n  ret void\n\n74:                                               ; preds = %15\n  %75 = load i32, i32* %9, align 4, !tbaa !10\n  %76 = icmp slt i32 %18, %75\n  br i1 %76, label %77, label %88\n\n77:                                               ; preds = %74, %77\n  %78 = phi i32 [ %82, %77 ], [ %75, %74 ]\n  %79 = phi i32* [ %81, %77 ], [ %9, %74 ]\n  %80 = phi i32* [ %79, %77 ], [ %17, %74 ]\n  store i32 %78, i32* %80, align 4, !tbaa !10\n  %81 = getelementptr inbounds i32, i32* %79, i64 -1\n  %82 = load i32, i32* %81, align 4, !tbaa !10\n  %83 = icmp slt i32 %18, %82\n  br i1 %83, label %77, label %88, !llvm.loop !22\n\n84:                                               ; preds = %15\n  %85 = bitcast i32* %0 to i64*\n  %86 = bitcast i32* %9 to i64*\n  %87 = load i64, i64* %85, align 4\n  store i64 %87, i64* %86, align 4\n  br label %88\n\n88:                                               ; preds = %77, %84, %74\n  %89 = phi i32* [ %0, %84 ], [ %17, %74 ], [ %79, %77 ]\n  store i32 %18, i32* %89, align 4, !tbaa !10\n  %90 = getelementptr inbounds i32, i32* %0, i64 3\n  %91 = load i32, i32* %90, align 4, !tbaa !10\n  %92 = load i32, i32* %0, align 4, !tbaa !10\n  %93 = icmp slt i32 %91, %92\n  br i1 %93, label %104, label %94\n\n94:                                               ; preds = %88\n  %95 = load i32, i32* %17, align 4, !tbaa !10\n  %96 = icmp slt i32 %91, %95\n  br i1 %96, label %97, label %106\n\n97:                                               ; preds = %94, %97\n  %98 = phi i32 [ %102, %97 ], [ %95, %94 ]\n  %99 = phi i32* [ %101, %97 ], [ %17, %94 ]\n  %100 = phi i32* [ %99, %97 ], [ %90, %94 ]\n  store i32 %98, i32* %100, align 4, !tbaa !10\n  %101 = getelementptr inbounds i32, i32* %99, i64 -1\n  %102 = load i32, i32* %101, align 4, !tbaa !10\n  %103 = icmp slt i32 %91, %102\n  br i1 %103, label %97, label %106, !llvm.loop !22\n\n104:                                              ; preds = %88\n  %105 = bitcast i32* %9 to i8*\n  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* noundef nonnull align 4 dereferenceable(12) %105, i8* noundef nonnull align 4 dereferenceable(12) %8, i64 12, i1 false) #8\n  br label %106\n\n106:                                              ; preds = %97, %104, %94\n  %107 = phi i32* [ %0, %104 ], [ %90, %94 ], [ %99, %97 ]\n  store i32 %91, i32* %107, align 4, !tbaa !10\n  %108 = getelementptr inbounds i32, i32* %0, i64 4\n  %109 = load i32, i32* %108, align 4, !tbaa !10\n  %110 = load i32, i32* %0, align 4, !tbaa !10\n  %111 = icmp slt i32 %109, %110\n  br i1 %111, label %122, label %112\n\n112:                                              ; preds = %106\n  %113 = load i32, i32* %90, align 4, !tbaa !10\n  %114 = icmp slt i32 %109, %113\n  br i1 %114, label %115, label %124\n\n115:                                              ; preds = %112, %115\n  %116 = phi i32 [ %120, %115 ], [ %113, %112 ]\n  %117 = phi i32* [ %119, %115 ], [ %90, %112 ]\n  %118 = phi i32* [ %117, %115 ], [ %108, %112 ]\n  store i32 %116, i32* %118, align 4, !tbaa !10\n  %119 = getelementptr inbounds i32, i32* %117, i64 -1\n  %120 = load i32, i32* %119, align 4, !tbaa !10\n  %121 = icmp slt i32 %109, %120\n  br i1 %121, label %115, label %124, !llvm.loop !22\n\n122:                                              ; preds = %106\n  %123 = bitcast i32* %9 to i8*\n  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* noundef nonnull align 4 dereferenceable(16) %123, i8* noundef nonnull align 4 dereferenceable(16) %8, i64 16, i1 false) #8\n  br label %124\n\n124:                                              ; preds = %115, %122, %112\n  %125 = phi i32* [ %0, %122 ], [ %108, %112 ], [ %117, %115 ]\n  store i32 %109, i32* %125, align 4, !tbaa !10\n  %126 = getelementptr inbounds i32, i32* %0, i64 5\n  %127 = load i32, i32* %126, align 4, !tbaa !10\n  %128 = load i32, i32* %0, align 4, !tbaa !10\n  %129 = icmp slt i32 %127, %128\n  br i1 %129, label %140, label %130\n\n130:                                              ; preds = %124\n  %131 = load i32, i32* %108, align 4, !tbaa !10\n  %132 = icmp slt i32 %127, %131\n  br i1 %132, label %133, label %142\n\n133:                                              ; preds = %130, %133\n  %134 = phi i32 [ %138, %133 ], [ %131, %130 ]\n  %135 = phi i32* [ %137, %133 ], [ %108, %130 ]\n  %136 = phi i32* [ %135, %133 ], [ %126, %130 ]\n  store i32 %134, i32* %136, align 4, !tbaa !10\n  %137 = getelementptr inbounds i32, i32* %135, i64 -1\n  %138 = load i32, i32* %137, align 4, !tbaa !10\n  %139 = icmp slt i32 %127, %138\n  br i1 %139, label %133, label %142, !llvm.loop !22\n\n140:                                              ; preds = %124\n  %141 = bitcast i32* %9 to i8*\n  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* noundef nonnull align 4 dereferenceable(20) %141, i8* noundef nonnull align 4 dereferenceable(20) %8, i64 20, i1 false) #8\n  br label %142\n\n142:                                              ; preds = %133, %140, %130\n  %143 = phi i32* [ %0, %140 ], [ %126, %130 ], [ %135, %133 ]\n  store i32 %127, i32* %143, align 4, !tbaa !10\n  %144 = getelementptr inbounds i32, i32* %0, i64 6\n  %145 = load i32, i32* %144, align 4, !tbaa !10\n  %146 = load i32, i32* %0, align 4, !tbaa !10\n  %147 = icmp slt i32 %145, %146\n  br i1 %147, label %158, label %148\n\n148:                                              ; preds = %142\n  %149 = load i32, i32* %126, align 4, !tbaa !10\n  %150 = icmp slt i32 %145, %149\n  br i1 %150, label %151, label %160\n\n151:                                              ; preds = %148, %151\n  %152 = phi i32 [ %156, %151 ], [ %149, %148 ]\n  %153 = phi i32* [ %155, %151 ], [ %126, %148 ]\n  %154 = phi i32* [ %153, %151 ], [ %144, %148 ]\n  store i32 %152, i32* %154, align 4, !tbaa !10\n  %155 = getelementptr inbounds i32, i32* %153, i64 -1\n  %156 = load i32, i32* %155, align 4, !tbaa !10\n  %157 = icmp slt i32 %145, %156\n  br i1 %157, label %151, label %160, !llvm.loop !22\n\n158:                                              ; preds = %142\n  %159 = bitcast i32* %9 to i8*\n  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* noundef nonnull align 4 dereferenceable(24) %159, i8* noundef nonnull align 4 dereferenceable(24) %8, i64 24, i1 false) #8\n  br label %160\n\n160:                                              ; preds = %151, %158, %148\n  %161 = phi i32* [ %0, %158 ], [ %144, %148 ], [ %153, %151 ]\n  store i32 %145, i32* %161, align 4, !tbaa !10\n  %162 = getelementptr inbounds i32, i32* %0, i64 7\n  %163 = load i32, i32* %162, align 4, !tbaa !10\n  %164 = load i32, i32* %0, align 4, !tbaa !10\n  %165 = icmp slt i32 %163, %164\n  br i1 %165, label %176, label %166\n\n166:                                              ; preds = %160\n  %167 = load i32, i32* %144, align 4, !tbaa !10\n  %168 = icmp slt i32 %163, %167\n  br i1 %168, label %169, label %178\n\n169:                                              ; preds = %166, %169\n  %170 = phi i32 [ %174, %169 ], [ %167, %166 ]\n  %171 = phi i32* [ %173, %169 ], [ %144, %166 ]\n  %172 = phi i32* [ %171, %169 ], [ %162, %166 ]\n  store i32 %170, i32* %172, align 4, !tbaa !10\n  %173 = getelementptr inbounds i32, i32* %171, i64 -1\n  %174 = load i32, i32* %173, align 4, !tbaa !10\n  %175 = icmp slt i32 %163, %174\n  br i1 %175, label %169, label %178, !llvm.loop !22\n\n176:                                              ; preds = %160\n  %177 = bitcast i32* %9 to i8*\n  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* noundef nonnull align 4 dereferenceable(28) %177, i8* noundef nonnull align 4 dereferenceable(28) %8, i64 28, i1 false) #8\n  br label %178\n\n178:                                              ; preds = %169, %176, %166\n  %179 = phi i32* [ %0, %176 ], [ %162, %166 ], [ %171, %169 ]\n  store i32 %163, i32* %179, align 4, !tbaa !10\n  %180 = getelementptr inbounds i32, i32* %0, i64 8\n  %181 = load i32, i32* %180, align 4, !tbaa !10\n  %182 = load i32, i32* %0, align 4, !tbaa !10\n  %183 = icmp slt i32 %181, %182\n  br i1 %183, label %194, label %184\n\n184:                                              ; preds = %178\n  %185 = load i32, i32* %162, align 4, !tbaa !10\n  %186 = icmp slt i32 %181, %185\n  br i1 %186, label %187, label %196\n\n187:                                              ; preds = %184, %187\n  %188 = phi i32 [ %192, %187 ], [ %185, %184 ]\n  %189 = phi i32* [ %191, %187 ], [ %162, %184 ]\n  %190 = phi i32* [ %189, %187 ], [ %180, %184 ]\n  store i32 %188, i32* %190, align 4, !tbaa !10\n  %191 = getelementptr inbounds i32, i32* %189, i64 -1\n  %192 = load i32, i32* %191, align 4, !tbaa !10\n  %193 = icmp slt i32 %181, %192\n  br i1 %193, label %187, label %196, !llvm.loop !22\n\n194:                                              ; preds = %178\n  %195 = bitcast i32* %9 to i8*\n  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* noundef nonnull align 4 dereferenceable(32) %195, i8* noundef nonnull align 4 dereferenceable(32) %8, i64 32, i1 false) #8\n  br label %196\n\n196:                                              ; preds = %187, %194, %184\n  %197 = phi i32* [ %0, %194 ], [ %180, %184 ], [ %189, %187 ]\n  store i32 %181, i32* %197, align 4, !tbaa !10\n  %198 = getelementptr inbounds i32, i32* %0, i64 9\n  %199 = load i32, i32* %198, align 4, !tbaa !10\n  %200 = load i32, i32* %0, align 4, !tbaa !10\n  %201 = icmp slt i32 %199, %200\n  br i1 %201, label %212, label %202\n\n202:                                              ; preds = %196\n  %203 = load i32, i32* %180, align 4, !tbaa !10\n  %204 = icmp slt i32 %199, %203\n  br i1 %204, label %205, label %214\n\n205:                                              ; preds = %202, %205\n  %206 = phi i32 [ %210, %205 ], [ %203, %202 ]\n  %207 = phi i32* [ %209, %205 ], [ %180, %202 ]\n  %208 = phi i32* [ %207, %205 ], [ %198, %202 ]\n  store i32 %206, i32* %208, align 4, !tbaa !10\n  %209 = getelementptr inbounds i32, i32* %207, i64 -1\n  %210 = load i32, i32* %209, align 4, !tbaa !10\n  %211 = icmp slt i32 %199, %210\n  br i1 %211, label %205, label %214, !llvm.loop !22\n\n212:                                              ; preds = %196\n  %213 = bitcast i32* %9 to i8*\n  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* noundef nonnull align 4 dereferenceable(36) %213, i8* noundef nonnull align 4 dereferenceable(36) %8, i64 36, i1 false) #8\n  br label %214\n\n214:                                              ; preds = %205, %212, %202\n  %215 = phi i32* [ %0, %212 ], [ %198, %202 ], [ %207, %205 ]\n  store i32 %199, i32* %215, align 4, !tbaa !10\n  %216 = getelementptr inbounds i32, i32* %0, i64 10\n  %217 = load i32, i32* %216, align 4, !tbaa !10\n  %218 = load i32, i32* %0, align 4, !tbaa !10\n  %219 = icmp slt i32 %217, %218\n  br i1 %219, label %230, label %220\n\n220:                                              ; preds = %214\n  %221 = load i32, i32* %198, align 4, !tbaa !10\n  %222 = icmp slt i32 %217, %221\n  br i1 %222, label %223, label %232\n\n223:                                              ; preds = %220, %223\n  %224 = phi i32 [ %228, %223 ], [ %221, %220 ]\n  %225 = phi i32* [ %227, %223 ], [ %198, %220 ]\n  %226 = phi i32* [ %225, %223 ], [ %216, %220 ]\n  store i32 %224, i32* %226, align 4, !tbaa !10\n  %227 = getelementptr inbounds i32, i32* %225, i64 -1\n  %228 = load i32, i32* %227, align 4, !tbaa !10\n  %229 = icmp slt i32 %217, %228\n  br i1 %229, label %223, label %232, !llvm.loop !22\n\n230:                                              ; preds = %214\n  %231 = bitcast i32* %9 to i8*\n  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* noundef nonnull align 4 dereferenceable(40) %231, i8* noundef nonnull align 4 dereferenceable(40) %8, i64 40, i1 false) #8\n  br label %232\n\n232:                                              ; preds = %223, %230, %220\n  %233 = phi i32* [ %0, %230 ], [ %216, %220 ], [ %225, %223 ]\n  store i32 %217, i32* %233, align 4, !tbaa !10\n  %234 = getelementptr inbounds i32, i32* %0, i64 11\n  %235 = load i32, i32* %234, align 4, !tbaa !10\n  %236 = load i32, i32* %0, align 4, !tbaa !10\n  %237 = icmp slt i32 %235, %236\n  br i1 %237, label %248, label %238\n\n238:                                              ; preds = %232\n  %239 = load i32, i32* %216, align 4, !tbaa !10\n  %240 = icmp slt i32 %235, %239\n  br i1 %240, label %241, label %250\n\n241:                                              ; preds = %238, %241\n  %242 = phi i32 [ %246, %241 ], [ %239, %238 ]\n  %243 = phi i32* [ %245, %241 ], [ %216, %238 ]\n  %244 = phi i32* [ %243, %241 ], [ %234, %238 ]\n  store i32 %242, i32* %244, align 4, !tbaa !10\n  %245 = getelementptr inbounds i32, i32* %243, i64 -1\n  %246 = load i32, i32* %245, align 4, !tbaa !10\n  %247 = icmp slt i32 %235, %246\n  br i1 %247, label %241, label %250, !llvm.loop !22\n\n248:                                              ; preds = %232\n  %249 = bitcast i32* %9 to i8*\n  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* noundef nonnull align 4 dereferenceable(44) %249, i8* noundef nonnull align 4 dereferenceable(44) %8, i64 44, i1 false) #8\n  br label %250\n\n250:                                              ; preds = %241, %248, %238\n  %251 = phi i32* [ %0, %248 ], [ %234, %238 ], [ %243, %241 ]\n  store i32 %235, i32* %251, align 4, !tbaa !10\n  %252 = getelementptr inbounds i32, i32* %0, i64 12\n  %253 = load i32, i32* %252, align 4, !tbaa !10\n  %254 = load i32, i32* %0, align 4, !tbaa !10\n  %255 = icmp slt i32 %253, %254\n  br i1 %255, label %266, label %256\n\n256:                                              ; preds = %250\n  %257 = load i32, i32* %234, align 4, !tbaa !10\n  %258 = icmp slt i32 %253, %257\n  br i1 %258, label %259, label %268\n\n259:                                              ; preds = %256, %259\n  %260 = phi i32 [ %264, %259 ], [ %257, %256 ]\n  %261 = phi i32* [ %263, %259 ], [ %234, %256 ]\n  %262 = phi i32* [ %261, %259 ], [ %252, %256 ]\n  store i32 %260, i32* %262, align 4, !tbaa !10\n  %263 = getelementptr inbounds i32, i32* %261, i64 -1\n  %264 = load i32, i32* %263, align 4, !tbaa !10\n  %265 = icmp slt i32 %253, %264\n  br i1 %265, label %259, label %268, !llvm.loop !22\n\n266:                                              ; preds = %250\n  %267 = bitcast i32* %9 to i8*\n  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* noundef nonnull align 4 dereferenceable(48) %267, i8* noundef nonnull align 4 dereferenceable(48) %8, i64 48, i1 false) #8\n  br label %268\n\n268:                                              ; preds = %259, %266, %256\n  %269 = phi i32* [ %0, %266 ], [ %252, %256 ], [ %261, %259 ]\n  store i32 %253, i32* %269, align 4, !tbaa !10\n  %270 = getelementptr inbounds i32, i32* %0, i64 13\n  %271 = load i32, i32* %270, align 4, !tbaa !10\n  %272 = load i32, i32* %0, align 4, !tbaa !10\n  %273 = icmp slt i32 %271, %272\n  br i1 %273, label %284, label %274\n\n274:                                              ; preds = %268\n  %275 = load i32, i32* %252, align 4, !tbaa !10\n  %276 = icmp slt i32 %271, %275\n  br i1 %276, label %277, label %286\n\n277:                                              ; preds = %274, %277\n  %278 = phi i32 [ %282, %277 ], [ %275, %274 ]\n  %279 = phi i32* [ %281, %277 ], [ %252, %274 ]\n  %280 = phi i32* [ %279, %277 ], [ %270, %274 ]\n  store i32 %278, i32* %280, align 4, !tbaa !10\n  %281 = getelementptr inbounds i32, i32* %279, i64 -1\n  %282 = load i32, i32* %281, align 4, !tbaa !10\n  %283 = icmp slt i32 %271, %282\n  br i1 %283, label %277, label %286, !llvm.loop !22\n\n284:                                              ; preds = %268\n  %285 = bitcast i32* %9 to i8*\n  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* noundef nonnull align 4 dereferenceable(52) %285, i8* noundef nonnull align 4 dereferenceable(52) %8, i64 52, i1 false) #8\n  br label %286\n\n286:                                              ; preds = %277, %284, %274\n  %287 = phi i32* [ %0, %284 ], [ %270, %274 ], [ %279, %277 ]\n  store i32 %271, i32* %287, align 4, !tbaa !10\n  %288 = getelementptr inbounds i32, i32* %0, i64 14\n  %289 = load i32, i32* %288, align 4, !tbaa !10\n  %290 = load i32, i32* %0, align 4, !tbaa !10\n  %291 = icmp slt i32 %289, %290\n  br i1 %291, label %302, label %292\n\n292:                                              ; preds = %286\n  %293 = load i32, i32* %270, align 4, !tbaa !10\n  %294 = icmp slt i32 %289, %293\n  br i1 %294, label %295, label %304\n\n295:                                              ; preds = %292, %295\n  %296 = phi i32 [ %300, %295 ], [ %293, %292 ]\n  %297 = phi i32* [ %299, %295 ], [ %270, %292 ]\n  %298 = phi i32* [ %297, %295 ], [ %288, %292 ]\n  store i32 %296, i32* %298, align 4, !tbaa !10\n  %299 = getelementptr inbounds i32, i32* %297, i64 -1\n  %300 = load i32, i32* %299, align 4, !tbaa !10\n  %301 = icmp slt i32 %289, %300\n  br i1 %301, label %295, label %304, !llvm.loop !22\n\n302:                                              ; preds = %286\n  %303 = bitcast i32* %9 to i8*\n  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* noundef nonnull align 4 dereferenceable(56) %303, i8* noundef nonnull align 4 dereferenceable(56) %8, i64 56, i1 false) #8\n  br label %304\n\n304:                                              ; preds = %295, %302, %292\n  %305 = phi i32* [ %0, %302 ], [ %288, %292 ], [ %297, %295 ]\n  store i32 %289, i32* %305, align 4, !tbaa !10\n  %306 = getelementptr inbounds i32, i32* %0, i64 15\n  %307 = load i32, i32* %306, align 4, !tbaa !10\n  %308 = load i32, i32* %0, align 4, !tbaa !10\n  %309 = icmp slt i32 %307, %308\n  br i1 %309, label %320, label %310\n\n310:                                              ; preds = %304\n  %311 = load i32, i32* %288, align 4, !tbaa !10\n  %312 = icmp slt i32 %307, %311\n  br i1 %312, label %313, label %322\n\n313:                                              ; preds = %310, %313\n  %314 = phi i32 [ %318, %313 ], [ %311, %310 ]\n  %315 = phi i32* [ %317, %313 ], [ %288, %310 ]\n  %316 = phi i32* [ %315, %313 ], [ %306, %310 ]\n  store i32 %314, i32* %316, align 4, !tbaa !10\n  %317 = getelementptr inbounds i32, i32* %315, i64 -1\n  %318 = load i32, i32* %317, align 4, !tbaa !10\n  %319 = icmp slt i32 %307, %318\n  br i1 %319, label %313, label %322, !llvm.loop !22\n\n320:                                              ; preds = %304\n  %321 = bitcast i32* %9 to i8*\n  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* noundef nonnull align 4 dereferenceable(60) %321, i8* noundef nonnull align 4 dereferenceable(60) %8, i64 60, i1 false) #8\n  br label %322\n\n322:                                              ; preds = %313, %320, %310\n  %323 = phi i32* [ %0, %320 ], [ %306, %310 ], [ %315, %313 ]\n  store i32 %307, i32* %323, align 4, !tbaa !10\n  %324 = getelementptr inbounds i32, i32* %0, i64 16\n  %325 = icmp eq i32* %324, %1\n  br i1 %325, label %73, label %21\n}\n\n; Function Attrs: uwtable\ndefine linkonce_odr dso_local void @_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEENS0_5__ops15_Iter_less_iterEEvT_S9_RT0_(i32* %0, i32* %1, %\"struct.__gnu_cxx::__ops::_Iter_less_iter\"* nonnull align 1 dereferenceable(1) %2) local_unnamed_addr #0 comdat {\n  %4 = ptrtoint i32* %1 to i64\n  %5 = ptrtoint i32* %0 to i64\n  %6 = sub i64 %4, %5\n  %7 = ashr exact i64 %6, 2\n  %8 = icmp slt i64 %6, 8\n  br i1 %8, label %100, label %9\n\n9:                                                ; preds = %3\n  %10 = add nsw i64 %7, -2\n  %11 = lshr i64 %10, 1\n  %12 = add nsw i64 %7, -1\n  %13 = sdiv i64 %12, 2\n  %14 = and i64 %6, 4\n  %15 = icmp eq i64 %14, 0\n  br i1 %15, label %16, label %20\n\n16:                                               ; preds = %9\n  %17 = or i64 %10, 1\n  %18 = getelementptr inbounds i32, i32* %0, i64 %17\n  %19 = getelementptr inbounds i32, i32* %0, i64 %11\n  br label %57\n\n20:                                               ; preds = %9, %52\n  %21 = phi i64 [ %56, %52 ], [ %11, %9 ]\n  %22 = getelementptr inbounds i32, i32* %0, i64 %21\n  %23 = load i32, i32* %22, align 4, !tbaa !10\n  %24 = icmp sgt i64 %13, %21\n  br i1 %24, label %25, label %52\n\n25:                                               ; preds = %20, %25\n  %26 = phi i64 [ %35, %25 ], [ %21, %20 ]\n  %27 = shl i64 %26, 1\n  %28 = add i64 %27, 2\n  %29 = getelementptr inbounds i32, i32* %0, i64 %28\n  %30 = or i64 %27, 1\n  %31 = getelementptr inbounds i32, i32* %0, i64 %30\n  %32 = load i32, i32* %29, align 4, !tbaa !10\n  %33 = load i32, i32* %31, align 4, !tbaa !10\n  %34 = icmp slt i32 %32, %33\n  %35 = select i1 %34, i64 %30, i64 %28\n  %36 = getelementptr inbounds i32, i32* %0, i64 %35\n  %37 = load i32, i32* %36, align 4, !tbaa !10\n  %38 = getelementptr inbounds i32, i32* %0, i64 %26\n  store i32 %37, i32* %38, align 4, !tbaa !10\n  %39 = icmp slt i64 %35, %13\n  br i1 %39, label %25, label %40, !llvm.loop !15\n\n40:                                               ; preds = %25\n  %41 = icmp sgt i64 %35, %21\n  br i1 %41, label %42, label %52\n\n42:                                               ; preds = %40, %49\n  %43 = phi i64 [ %45, %49 ], [ %35, %40 ]\n  %44 = add nsw i64 %43, -1\n  %45 = sdiv i64 %44, 2\n  %46 = getelementptr inbounds i32, i32* %0, i64 %45\n  %47 = load i32, i32* %46, align 4, !tbaa !10\n  %48 = icmp slt i32 %47, %23\n  br i1 %48, label %49, label %52\n\n49:                                               ; preds = %42\n  %50 = getelementptr inbounds i32, i32* %0, i64 %43\n  store i32 %47, i32* %50, align 4, !tbaa !10\n  %51 = icmp sgt i64 %45, %21\n  br i1 %51, label %42, label %52, !llvm.loop !16\n\n52:                                               ; preds = %42, %49, %20, %40\n  %53 = phi i64 [ %35, %40 ], [ %21, %20 ], [ %45, %49 ], [ %43, %42 ]\n  %54 = getelementptr inbounds i32, i32* %0, i64 %53\n  store i32 %23, i32* %54, align 4, !tbaa !10\n  %55 = icmp eq i64 %21, 0\n  %56 = add nsw i64 %21, -1\n  br i1 %55, label %100, label %20, !llvm.loop !25\n\n57:                                               ; preds = %16, %95\n  %58 = phi i64 [ %99, %95 ], [ %11, %16 ]\n  %59 = getelementptr inbounds i32, i32* %0, i64 %58\n  %60 = load i32, i32* %59, align 4, !tbaa !10\n  %61 = icmp sgt i64 %13, %58\n  br i1 %61, label %62, label %77\n\n62:                                               ; preds = %57, %62\n  %63 = phi i64 [ %72, %62 ], [ %58, %57 ]\n  %64 = shl i64 %63, 1\n  %65 = add i64 %64, 2\n  %66 = getelementptr inbounds i32, i32* %0, i64 %65\n  %67 = or i64 %64, 1\n  %68 = getelementptr inbounds i32, i32* %0, i64 %67\n  %69 = load i32, i32* %66, align 4, !tbaa !10\n  %70 = load i32, i32* %68, align 4, !tbaa !10\n  %71 = icmp slt i32 %69, %70\n  %72 = select i1 %71, i64 %67, i64 %65\n  %73 = getelementptr inbounds i32, i32* %0, i64 %72\n  %74 = load i32, i32* %73, align 4, !tbaa !10\n  %75 = getelementptr inbounds i32, i32* %0, i64 %63\n  store i32 %74, i32* %75, align 4, !tbaa !10\n  %76 = icmp slt i64 %72, %13\n  br i1 %76, label %62, label %77, !llvm.loop !15\n\n77:                                               ; preds = %62, %57\n  %78 = phi i64 [ %58, %57 ], [ %72, %62 ]\n  %79 = icmp eq i64 %78, %11\n  br i1 %79, label %80, label %82\n\n80:                                               ; preds = %77\n  %81 = load i32, i32* %18, align 4, !tbaa !10\n  store i32 %81, i32* %19, align 4, !tbaa !10\n  br label %82\n\n82:                                               ; preds = %80, %77\n  %83 = phi i64 [ %17, %80 ], [ %78, %77 ]\n  %84 = icmp sgt i64 %83, %58\n  br i1 %84, label %85, label %95\n\n85:                                               ; preds = %82, %92\n  %86 = phi i64 [ %88, %92 ], [ %83, %82 ]\n  %87 = add nsw i64 %86, -1\n  %88 = sdiv i64 %87, 2\n  %89 = getelementptr inbounds i32, i32* %0, i64 %88\n  %90 = load i32, i32* %89, align 4, !tbaa !10\n  %91 = icmp slt i32 %90, %60\n  br i1 %91, label %92, label %95\n\n92:                                               ; preds = %85\n  %93 = getelementptr inbounds i32, i32* %0, i64 %86\n  store i32 %90, i32* %93, align 4, !tbaa !10\n  %94 = icmp sgt i64 %88, %58\n  br i1 %94, label %85, label %95, !llvm.loop !16\n\n95:                                               ; preds = %85, %92, %82\n  %96 = phi i64 [ %83, %82 ], [ %88, %92 ], [ %86, %85 ]\n  %97 = getelementptr inbounds i32, i32* %0, i64 %96\n  store i32 %60, i32* %97, align 4, !tbaa !10\n  %98 = icmp eq i64 %58, 0\n  %99 = add nsw i64 %58, -1\n  br i1 %98, label %100, label %57, !llvm.loop !25\n\n100:                                              ; preds = %52, %95, %3\n  ret void\n}\n\n; Function Attrs: mustprogress nofree nosync nounwind readnone speculatable willreturn\ndeclare i64 @llvm.ctlz.i64(i64, i1 immarg) #6\n\n; Function Attrs: argmemonly nofree nounwind willreturn writeonly\ndeclare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #7\n\nattributes #0 = { uwtable \"frame-pointer\"=\"none\" \"min-legal-vector-width\"=\"0\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #1 = { argmemonly mustprogress nofree nosync nounwind willreturn }\nattributes #2 = { nobuiltin allocsize(0) \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #3 = { noreturn \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #4 = { argmemonly mustprogress nofree nounwind willreturn }\nattributes #5 = { nobuiltin nounwind \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #6 = { mustprogress nofree nosync nounwind readnone speculatable willreturn }\nattributes #7 = { argmemonly nofree nounwind willreturn writeonly }\nattributes #8 = { nounwind }\nattributes #9 = { allocsize(0) }\nattributes #10 = { noreturn }\n\n!llvm.module.flags = !{!0, !1}\n!llvm.ident = !{!2}\n\n!0 = !{i32 1, !\"wchar_size\", i32 4}\n!1 = !{i32 7, !\"uwtable\", i32 1}\n!2 = !{!\"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)\"}\n!3 = !{!4, !5, i64 0}\n!4 = !{!\"_ZTSNSt12_Vector_baseIiSaIiEE17_Vector_impl_dataE\", !5, i64 0, !5, i64 8, !5, i64 16}\n!5 = !{!\"any pointer\", !6, i64 0}\n!6 = !{!\"omnipotent char\", !7, i64 0}\n!7 = !{!\"Simple C++ TBAA\"}\n!8 = !{!4, !5, i64 16}\n!9 = !{!4, !5, i64 8}\n!10 = !{!11, !11, i64 0}\n!11 = !{!\"int\", !6, i64 0}\n!12 = distinct !{!12, !13}\n!13 = !{!\"llvm.loop.mustprogress\"}\n!14 = !{i64 0, i64 65}\n!15 = distinct !{!15, !13}\n!16 = distinct !{!16, !13}\n!17 = distinct !{!17, !13}\n!18 = distinct !{!18, !13}\n!19 = distinct !{!19, !13}\n!20 = distinct !{!20, !13}\n!21 = distinct !{!21, !13}\n!22 = distinct !{!22, !13}\n!23 = distinct !{!23, !13}\n!24 = distinct !{!24, !13}\n!25 = distinct !{!25, !13}\n", "target": "This is the targeted source code:\n/*\nGiven a positive integer n, return a sorted vector that has the odd numbers in collatz sequence.\n\nThe Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\nas follows: start with any positive integer n. Then each term is obtained from the \nprevious term as follows: if the previous term is even, the next term is one half of \nthe previous term. If the previous term is odd, the next term is 3 times the previous\nterm plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\nNote: \n    1. Collatz(1) is {1}.\n    2. returned vector sorted in increasing order.\n\nFor example:\nget_odd_collatz(5) returns {1, 5} // The collatz sequence for 5 is {5, 16, 8, 4, 2, 1}, so the odd numbers are only 1, and 5.\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> get_odd_collatz(int n){\n\n    vector<int> out={1};\n    while (n!=1)\n    {\n        if (n%2==1) {out.push_back(n); n=n*3+1;}\n        else n=n/2;\n    }\n    sort(out.begin(),out.end());\n    return out;\n}\n"}
{"input": "Convert this to C++:\n; ModuleID = '../../Human_xBenchmarks_164/CPP_124/CPP_124.cpp'\nsource_filename = \"../../Human_xBenchmarks_164/CPP_124/CPP_124.cpp\"\ntarget datalayout = \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\ntarget triple = \"x86_64-unknown-linux-gnu\"\n\n%\"class.std::__cxx11::basic_string\" = type { %\"struct.std::__cxx11::basic_string<char>::_Alloc_hider\", i64, %union.anon }\n%\"struct.std::__cxx11::basic_string<char>::_Alloc_hider\" = type { i8* }\n%union.anon = type { i64, [8 x i8] }\n\n@.str = private unnamed_addr constant [21 x i8] c\"basic_string::substr\\00\", align 1\n@.str.1 = private unnamed_addr constant [55 x i8] c\"%s: __pos (which is %zu) > this->size() (which is %zu)\\00\", align 1\n\n; Function Attrs: uwtable\ndefine dso_local zeroext i1 @_Z10valid_dateNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE(%\"class.std::__cxx11::basic_string\"* nocapture readonly %0) local_unnamed_addr #0 personality i32 (...)* @__gxx_personality_v0 {\n  %2 = alloca %\"class.std::__cxx11::basic_string\", align 8\n  %3 = alloca %\"class.std::__cxx11::basic_string\", align 8\n  %4 = alloca %\"class.std::__cxx11::basic_string\", align 8\n  %5 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 1\n  %6 = load i64, i64* %5, align 8, !tbaa !3\n  %7 = icmp eq i64 %6, 10\n  br i1 %7, label %8, label %92\n\n8:                                                ; preds = %1\n  %9 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 0, i32 0\n  %10 = load i8*, i8** %9, align 8, !tbaa !10\n  %11 = load i8, i8* %10, align 1, !tbaa !11\n  %12 = add i8 %11, -48\n  %13 = icmp ugt i8 %12, 9\n  br i1 %13, label %92, label %94\n\n14:                                               ; preds = %132\n  %15 = bitcast %\"class.std::__cxx11::basic_string\"* %2 to i8*\n  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %15) #7\n  %16 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %2, i64 0, i32 2\n  %17 = bitcast %\"class.std::__cxx11::basic_string\"* %2 to %union.anon**\n  store %union.anon* %16, %union.anon** %17, align 8, !tbaa !12, !alias.scope !13\n  %18 = bitcast %union.anon* %16 to i8*\n  %19 = bitcast i8* %10 to i16*\n  %20 = bitcast %union.anon* %16 to i16*\n  %21 = load i16, i16* %19, align 1\n  store i16 %21, i16* %20, align 8\n  %22 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %2, i64 0, i32 0, i32 0\n  %23 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %2, i64 0, i32 1\n  store i64 2, i64* %23, align 8, !tbaa !3, !alias.scope !13\n  %24 = getelementptr inbounds i8, i8* %18, i64 2\n  store i8 0, i8* %24, align 2, !tbaa !11\n  %25 = call i64 @strtol(i8* nocapture nonnull %18, i8** null, i32 10) #7\n  %26 = trunc i64 %25 to i32\n  %27 = load i8*, i8** %22, align 8, !tbaa !10\n  %28 = icmp eq i8* %27, %18\n  br i1 %28, label %30, label %29\n\n29:                                               ; preds = %14\n  call void @_ZdlPv(i8* %27) #7\n  br label %30\n\n30:                                               ; preds = %14, %29\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %15) #7\n  %31 = bitcast %\"class.std::__cxx11::basic_string\"* %3 to i8*\n  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %31) #7\n  call void @llvm.experimental.noalias.scope.decl(metadata !16)\n  %32 = load i64, i64* %5, align 8, !tbaa !3, !noalias !16\n  %33 = icmp ult i64 %32, 3\n  br i1 %33, label %34, label %35\n\n34:                                               ; preds = %30\n  call void (i8*, ...) @_ZSt24__throw_out_of_range_fmtPKcz(i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str, i64 0, i64 0), i64 3, i64 %32) #8, !noalias !16\n  unreachable\n\n35:                                               ; preds = %30\n  %36 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %3, i64 0, i32 2\n  %37 = bitcast %\"class.std::__cxx11::basic_string\"* %3 to %union.anon**\n  store %union.anon* %36, %union.anon** %37, align 8, !tbaa !12, !alias.scope !16\n  %38 = bitcast %union.anon* %36 to i8*\n  %39 = load i8*, i8** %9, align 8, !tbaa !10, !noalias !16\n  %40 = getelementptr inbounds i8, i8* %39, i64 3\n  %41 = add i64 %32, -3\n  %42 = icmp ult i64 %41, 2\n  %43 = select i1 %42, i64 %41, i64 2\n  switch i64 %43, label %46 [\n    i64 1, label %44\n    i64 0, label %47\n  ]\n\n44:                                               ; preds = %35\n  %45 = load i8, i8* %40, align 1, !tbaa !11\n  store i8 %45, i8* %38, align 8, !tbaa !11\n  br label %47\n\n46:                                               ; preds = %35\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %38, i8* nonnull align 1 %40, i64 %43, i1 false) #7\n  br label %47\n\n47:                                               ; preds = %35, %44, %46\n  %48 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %3, i64 0, i32 0, i32 0\n  %49 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %3, i64 0, i32 1\n  store i64 %43, i64* %49, align 8, !tbaa !3, !alias.scope !16\n  %50 = getelementptr inbounds i8, i8* %38, i64 %43\n  store i8 0, i8* %50, align 1, !tbaa !11\n  %51 = call i64 @strtol(i8* nocapture nonnull %38, i8** null, i32 10) #7\n  %52 = trunc i64 %51 to i32\n  %53 = load i8*, i8** %48, align 8, !tbaa !10\n  %54 = icmp eq i8* %53, %38\n  br i1 %54, label %56, label %55\n\n55:                                               ; preds = %47\n  call void @_ZdlPv(i8* %53) #7\n  br label %56\n\n56:                                               ; preds = %47, %55\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %31) #7\n  %57 = bitcast %\"class.std::__cxx11::basic_string\"* %4 to i8*\n  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %57) #7\n  call void @llvm.experimental.noalias.scope.decl(metadata !19)\n  %58 = load i64, i64* %5, align 8, !tbaa !3, !noalias !19\n  %59 = icmp ult i64 %58, 6\n  br i1 %59, label %60, label %61\n\n60:                                               ; preds = %56\n  call void (i8*, ...) @_ZSt24__throw_out_of_range_fmtPKcz(i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str, i64 0, i64 0), i64 6, i64 %58) #8, !noalias !19\n  unreachable\n\n61:                                               ; preds = %56\n  %62 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %4, i64 0, i32 2\n  %63 = bitcast %\"class.std::__cxx11::basic_string\"* %4 to %union.anon**\n  store %union.anon* %62, %union.anon** %63, align 8, !tbaa !12, !alias.scope !19\n  %64 = add i64 %58, -6\n  %65 = icmp ult i64 %64, 4\n  %66 = select i1 %65, i64 %64, i64 4\n  %67 = icmp ult i64 %66, 2\n  br i1 %67, label %72, label %68\n\n68:                                               ; preds = %61\n  %69 = load i8*, i8** %9, align 8, !tbaa !10, !noalias !19\n  %70 = getelementptr inbounds i8, i8* %69, i64 6\n  %71 = bitcast %union.anon* %62 to i8*\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %71, i8* nonnull align 1 %70, i64 %66, i1 false) #7\n  br label %72\n\n72:                                               ; preds = %61, %68\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %57) #7\n  %73 = add i32 %26, -1\n  %74 = icmp ugt i32 %73, 11\n  %75 = add i32 %52, -1\n  %76 = icmp ugt i32 %75, 30\n  %77 = select i1 %74, i1 true, i1 %76\n  br i1 %77, label %92, label %78\n\n78:                                               ; preds = %72\n  %79 = icmp eq i32 %52, 31\n  br i1 %79, label %80, label %83\n\n80:                                               ; preds = %78\n  %81 = add i32 %26, -2\n  %82 = icmp ult i32 %81, 10\n  br i1 %82, label %87, label %83\n\n83:                                               ; preds = %87, %80, %78\n  %84 = icmp ne i32 %52, 30\n  %85 = icmp ne i32 %26, 2\n  %86 = select i1 %84, i1 true, i1 %85\n  br label %92\n\n87:                                               ; preds = %80\n  %88 = trunc i32 %81 to i16\n  %89 = lshr i16 661, %88\n  %90 = and i16 %89, 1\n  %91 = icmp eq i16 %90, 0\n  br i1 %91, label %83, label %92\n\n92:                                               ; preds = %87, %8, %94, %99, %103, %108, %113, %117, %122, %127, %132, %83, %72, %1\n  %93 = phi i1 [ false, %1 ], [ false, %72 ], [ %86, %83 ], [ false, %132 ], [ false, %127 ], [ false, %122 ], [ false, %117 ], [ false, %113 ], [ false, %108 ], [ false, %103 ], [ false, %99 ], [ false, %94 ], [ false, %8 ], [ false, %87 ]\n  ret i1 %93\n\n94:                                               ; preds = %8\n  %95 = getelementptr inbounds i8, i8* %10, i64 1\n  %96 = load i8, i8* %95, align 1, !tbaa !11\n  %97 = add i8 %96, -48\n  %98 = icmp ugt i8 %97, 9\n  br i1 %98, label %92, label %99\n\n99:                                               ; preds = %94\n  %100 = getelementptr inbounds i8, i8* %10, i64 2\n  %101 = load i8, i8* %100, align 1, !tbaa !11\n  %102 = icmp eq i8 %101, 45\n  br i1 %102, label %103, label %92\n\n103:                                              ; preds = %99\n  %104 = getelementptr inbounds i8, i8* %10, i64 3\n  %105 = load i8, i8* %104, align 1, !tbaa !11\n  %106 = add i8 %105, -48\n  %107 = icmp ugt i8 %106, 9\n  br i1 %107, label %92, label %108\n\n108:                                              ; preds = %103\n  %109 = getelementptr inbounds i8, i8* %10, i64 4\n  %110 = load i8, i8* %109, align 1, !tbaa !11\n  %111 = add i8 %110, -48\n  %112 = icmp ugt i8 %111, 9\n  br i1 %112, label %92, label %113\n\n113:                                              ; preds = %108\n  %114 = getelementptr inbounds i8, i8* %10, i64 5\n  %115 = load i8, i8* %114, align 1, !tbaa !11\n  %116 = icmp eq i8 %115, 45\n  br i1 %116, label %117, label %92\n\n117:                                              ; preds = %113\n  %118 = getelementptr inbounds i8, i8* %10, i64 6\n  %119 = load i8, i8* %118, align 1, !tbaa !11\n  %120 = add i8 %119, -48\n  %121 = icmp ugt i8 %120, 9\n  br i1 %121, label %92, label %122\n\n122:                                              ; preds = %117\n  %123 = getelementptr inbounds i8, i8* %10, i64 7\n  %124 = load i8, i8* %123, align 1, !tbaa !11\n  %125 = add i8 %124, -48\n  %126 = icmp ugt i8 %125, 9\n  br i1 %126, label %92, label %127\n\n127:                                              ; preds = %122\n  %128 = getelementptr inbounds i8, i8* %10, i64 8\n  %129 = load i8, i8* %128, align 1, !tbaa !11\n  %130 = add i8 %129, -48\n  %131 = icmp ugt i8 %130, 9\n  br i1 %131, label %92, label %132\n\n132:                                              ; preds = %127\n  %133 = getelementptr inbounds i8, i8* %10, i64 9\n  %134 = load i8, i8* %133, align 1, !tbaa !11\n  %135 = add i8 %134, -48\n  %136 = icmp ugt i8 %135, 9\n  br i1 %136, label %92, label %14\n}\n\n; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn\ndeclare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1\n\n; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn\ndeclare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1\n\n; Function Attrs: mustprogress nofree nounwind willreturn\ndeclare dso_local i64 @strtol(i8* readonly, i8** nocapture, i32) local_unnamed_addr #2\n\ndeclare dso_local i32 @__gxx_personality_v0(...)\n\n; Function Attrs: nobuiltin nounwind\ndeclare dso_local void @_ZdlPv(i8*) local_unnamed_addr #3\n\n; Function Attrs: noreturn\ndeclare dso_local void @_ZSt24__throw_out_of_range_fmtPKcz(i8*, ...) local_unnamed_addr #4\n\n; Function Attrs: argmemonly mustprogress nofree nounwind willreturn\ndeclare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #5\n\n; Function Attrs: inaccessiblememonly nofree nosync nounwind willreturn\ndeclare void @llvm.experimental.noalias.scope.decl(metadata) #6\n\nattributes #0 = { uwtable \"frame-pointer\"=\"none\" \"min-legal-vector-width\"=\"0\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #1 = { argmemonly mustprogress nofree nosync nounwind willreturn }\nattributes #2 = { mustprogress nofree nounwind willreturn \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #3 = { nobuiltin nounwind \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #4 = { noreturn \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #5 = { argmemonly mustprogress nofree nounwind willreturn }\nattributes #6 = { inaccessiblememonly nofree nosync nounwind willreturn }\nattributes #7 = { nounwind }\nattributes #8 = { noreturn }\n\n!llvm.module.flags = !{!0, !1}\n!llvm.ident = !{!2}\n\n!0 = !{i32 1, !\"wchar_size\", i32 4}\n!1 = !{i32 7, !\"uwtable\", i32 1}\n!2 = !{!\"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)\"}\n!3 = !{!4, !9, i64 8}\n!4 = !{!\"_ZTSNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE\", !5, i64 0, !9, i64 8, !7, i64 16}\n!5 = !{!\"_ZTSNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderE\", !6, i64 0}\n!6 = !{!\"any pointer\", !7, i64 0}\n!7 = !{!\"omnipotent char\", !8, i64 0}\n!8 = !{!\"Simple C++ TBAA\"}\n!9 = !{!\"long\", !7, i64 0}\n!10 = !{!4, !6, i64 0}\n!11 = !{!7, !7, i64 0}\n!12 = !{!5, !6, i64 0}\n!13 = !{!14}\n!14 = distinct !{!14, !15, !\"_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEmm: argument 0\"}\n!15 = distinct !{!15, !\"_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEmm\"}\n!16 = !{!17}\n!17 = distinct !{!17, !18, !\"_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEmm: argument 0\"}\n!18 = distinct !{!18, !\"_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEmm\"}\n!19 = !{!20}\n!20 = distinct !{!20, !21, !\"_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEmm: argument 0\"}\n!21 = distinct !{!21, !\"_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEmm\"}\n", "target": "This is the targeted source code:\n/*\nYou have to write a function which validates a given date string and\nreturns true if the date is valid otherwise false.\nThe date is valid if all of the following rules are satisfied:\n1. The date string is not empty.\n2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n3. The months should not be less than 1 or higher than 12.\n4. The date should be in the format: mm-dd-yyyy\n\nfor example: \nvalid_date(\"03-11-2000\") => true\n\nvalid_date(\"15-01-2012\") => false\n\nvalid_date(\"04-0-2040\") => false\n\nvalid_date(\"06-04-2020\") => true\n\nvalid_date(\"06/04/2020\") => false\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool valid_date(string date){\n\n    int mm,dd,yy,i;\n    if (date.length()!=10) return false;\n    for (int i=0;i<10;i++)\n        if (i==2 or i==5)\n        {\n            if (date[i]!='-') return false;\n        }\n        else\n            if (date[i]<48 or date[i]>57) return false;\n\n    mm=atoi(date.substr(0,2).c_str());\n    dd=atoi(date.substr(3,2).c_str());\n    yy=atoi(date.substr(6,4).c_str());\n    if (mm<1 or mm>12) return false;\n    if (dd<1 or dd>31) return false;\n    if (dd==31 and (mm==4 or mm==6 or mm==9 or mm==11 or mm==2)) return false;\n    if (dd==30 and mm==2) return false;\n    return true;\n\n}\n"}
{"input": "Convert this to C++:\n; ModuleID = '../../Human_xBenchmarks_164/CPP_125/CPP_125.cpp'\nsource_filename = \"../../Human_xBenchmarks_164/CPP_125/CPP_125.cpp\"\ntarget datalayout = \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\ntarget triple = \"x86_64-unknown-linux-gnu\"\n\n%\"class.std::vector\" = type { %\"struct.std::_Vector_base\" }\n%\"struct.std::_Vector_base\" = type { %\"struct.std::_Vector_base<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char>>>::_Vector_impl\" }\n%\"struct.std::_Vector_base<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char>>>::_Vector_impl\" = type { %\"struct.std::_Vector_base<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char>>>::_Vector_impl_data\" }\n%\"struct.std::_Vector_base<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char>>>::_Vector_impl_data\" = type { %\"class.std::__cxx11::basic_string\"*, %\"class.std::__cxx11::basic_string\"*, %\"class.std::__cxx11::basic_string\"* }\n%\"class.std::__cxx11::basic_string\" = type { %\"struct.std::__cxx11::basic_string<char>::_Alloc_hider\", i64, %union.anon }\n%\"struct.std::__cxx11::basic_string<char>::_Alloc_hider\" = type { i8* }\n%union.anon = type { i64, [8 x i8] }\n%struct.__va_list_tag = type { i32, i32, i8*, i8* }\n\n$_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED2Ev = comdat any\n\n$_ZN9__gnu_cxx12__to_xstringINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcEET_PFiPT0_mPKS8_P13__va_list_tagEmSB_z = comdat any\n\n$__clang_call_terminate = comdat any\n\n$_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_realloc_insertIJRKS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_ = comdat any\n\n$_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPS7_EET0_T_SC_SB_ = comdat any\n\n@.str = private unnamed_addr constant [1 x i8] zeroinitializer, align 1\n@.str.1 = private unnamed_addr constant [3 x i8] c\"%d\\00\", align 1\n@.str.3 = private unnamed_addr constant [26 x i8] c\"vector::_M_realloc_insert\\00\", align 1\n\n; Function Attrs: uwtable\ndefine dso_local void @_Z11split_wordsNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE(%\"class.std::vector\"* noalias nocapture sret(%\"class.std::vector\") align 8 %0, %\"class.std::__cxx11::basic_string\"* %1) local_unnamed_addr #0 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {\n  %3 = alloca i64, align 8\n  %4 = alloca i64, align 8\n  %5 = alloca i64, align 8\n  %6 = alloca i64, align 8\n  %7 = alloca i64, align 8\n  %8 = alloca i64, align 8\n  %9 = alloca %\"class.std::__cxx11::basic_string\", align 8\n  %10 = alloca %\"class.std::vector\", align 16\n  %11 = alloca %\"class.std::__cxx11::basic_string\", align 8\n  %12 = alloca %\"class.std::__cxx11::basic_string\", align 8\n  %13 = alloca %\"class.std::__cxx11::basic_string\", align 8\n  %14 = alloca %\"class.std::__cxx11::basic_string\", align 8\n  %15 = alloca [1 x %\"class.std::__cxx11::basic_string\"], align 8\n  %16 = bitcast %\"class.std::__cxx11::basic_string\"* %9 to i8*\n  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %16) #14\n  %17 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %9, i64 0, i32 2\n  %18 = bitcast %\"class.std::__cxx11::basic_string\"* %9 to %union.anon**\n  store %union.anon* %17, %union.anon** %18, align 8, !tbaa !3\n  %19 = bitcast %union.anon* %17 to i8*\n  %20 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %9, i64 0, i32 0, i32 0\n  %21 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %9, i64 0, i32 1\n  store i64 0, i64* %21, align 8, !tbaa !8\n  store i8 0, i8* %19, align 8, !tbaa !11\n  %22 = bitcast %\"class.std::vector\"* %10 to i8*\n  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %22) #14\n  %23 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %1, i64 0, i32 0, i32 0\n  %24 = bitcast %\"class.std::vector\"* %10 to i8*\n  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 16 dereferenceable(24) %24, i8 0, i64 24, i1 false)\n  %25 = load i8*, i8** %23, align 8, !tbaa !12\n  %26 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %1, i64 0, i32 1\n  %27 = load i64, i64* %26, align 8, !tbaa !8\n  %28 = getelementptr inbounds i8, i8* %25, i64 %27\n  %29 = ptrtoint i8* %28 to i64\n  %30 = ptrtoint i8* %25 to i64\n  %31 = icmp sgt i64 %27, 3\n  br i1 %31, label %32, label %57\n\n32:                                               ; preds = %2\n  %33 = lshr i64 %27, 2\n  br label %34\n\n34:                                               ; preds = %51, %32\n  %35 = phi i64 [ %33, %32 ], [ %53, %51 ]\n  %36 = phi i8* [ %25, %32 ], [ %52, %51 ]\n  %37 = load i8, i8* %36, align 1, !tbaa !11\n  %38 = icmp eq i8 %37, 32\n  br i1 %38, label %82, label %39\n\n39:                                               ; preds = %34\n  %40 = getelementptr inbounds i8, i8* %36, i64 1\n  %41 = load i8, i8* %40, align 1, !tbaa !11\n  %42 = icmp eq i8 %41, 32\n  br i1 %42, label %80, label %43\n\n43:                                               ; preds = %39\n  %44 = getelementptr inbounds i8, i8* %36, i64 2\n  %45 = load i8, i8* %44, align 1, !tbaa !11\n  %46 = icmp eq i8 %45, 32\n  br i1 %46, label %78, label %47\n\n47:                                               ; preds = %43\n  %48 = getelementptr inbounds i8, i8* %36, i64 3\n  %49 = load i8, i8* %48, align 1, !tbaa !11\n  %50 = icmp eq i8 %49, 32\n  br i1 %50, label %76, label %51\n\n51:                                               ; preds = %47\n  %52 = getelementptr inbounds i8, i8* %36, i64 4\n  %53 = add nsw i64 %35, -1\n  %54 = icmp sgt i64 %35, 1\n  br i1 %54, label %34, label %55, !llvm.loop !13\n\n55:                                               ; preds = %51\n  %56 = ptrtoint i8* %52 to i64\n  br label %57\n\n57:                                               ; preds = %55, %2\n  %58 = phi i64 [ %56, %55 ], [ %30, %2 ]\n  %59 = phi i8* [ %52, %55 ], [ %25, %2 ]\n  %60 = sub i64 %29, %58\n  switch i64 %60, label %295 [\n    i64 3, label %61\n    i64 2, label %66\n    i64 1, label %72\n  ]\n\n61:                                               ; preds = %57\n  %62 = load i8, i8* %59, align 1, !tbaa !11\n  %63 = icmp eq i8 %62, 32\n  br i1 %63, label %82, label %64\n\n64:                                               ; preds = %61\n  %65 = getelementptr inbounds i8, i8* %59, i64 1\n  br label %66\n\n66:                                               ; preds = %57, %64\n  %67 = phi i8* [ %65, %64 ], [ %59, %57 ]\n  %68 = load i8, i8* %67, align 1, !tbaa !11\n  %69 = icmp eq i8 %68, 32\n  br i1 %69, label %82, label %70\n\n70:                                               ; preds = %66\n  %71 = getelementptr inbounds i8, i8* %67, i64 1\n  br label %72\n\n72:                                               ; preds = %57, %70\n  %73 = phi i8* [ %71, %70 ], [ %59, %57 ]\n  %74 = load i8, i8* %73, align 1, !tbaa !11\n  %75 = icmp eq i8 %74, 32\n  br i1 %75, label %82, label %295\n\n76:                                               ; preds = %47\n  %77 = getelementptr inbounds i8, i8* %36, i64 3\n  br label %82\n\n78:                                               ; preds = %43\n  %79 = getelementptr inbounds i8, i8* %36, i64 2\n  br label %82\n\n80:                                               ; preds = %39\n  %81 = getelementptr inbounds i8, i8* %36, i64 1\n  br label %82\n\n82:                                               ; preds = %34, %76, %78, %80, %72, %66, %61\n  %83 = phi i8* [ %59, %61 ], [ %67, %66 ], [ %73, %72 ], [ %77, %76 ], [ %79, %78 ], [ %81, %80 ], [ %36, %34 ]\n  %84 = icmp eq i8* %83, %28\n  br i1 %84, label %295, label %85\n\n85:                                               ; preds = %82\n  %86 = bitcast %\"class.std::__cxx11::basic_string\"* %11 to i8*\n  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %86) #14\n  call void @llvm.experimental.noalias.scope.decl(metadata !15)\n  %87 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %11, i64 0, i32 2\n  %88 = bitcast %\"class.std::__cxx11::basic_string\"* %11 to %union.anon**\n  store %union.anon* %87, %union.anon** %88, align 8, !tbaa !3, !alias.scope !15\n  %89 = bitcast i64* %8 to i8*\n  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %89) #14, !noalias !15\n  store i64 %27, i64* %8, align 8, !tbaa !18, !noalias !15\n  %90 = icmp ugt i64 %27, 15\n  br i1 %90, label %93, label %91\n\n91:                                               ; preds = %85\n  %92 = bitcast %union.anon* %87 to i8*\n  br label %99\n\n93:                                               ; preds = %85\n  %94 = invoke i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %11, i64* nonnull align 8 dereferenceable(8) %8, i64 0)\n          to label %95 unwind label %214\n\n95:                                               ; preds = %93\n  %96 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %11, i64 0, i32 0, i32 0\n  store i8* %94, i8** %96, align 8, !tbaa !12, !alias.scope !15\n  %97 = load i64, i64* %8, align 8, !tbaa !18, !noalias !15\n  %98 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %11, i64 0, i32 2, i32 0\n  store i64 %97, i64* %98, align 8, !tbaa !11, !alias.scope !15\n  br label %99\n\n99:                                               ; preds = %95, %91\n  %100 = phi i8* [ %92, %91 ], [ %94, %95 ]\n  switch i64 %27, label %103 [\n    i64 1, label %101\n    i64 0, label %104\n  ]\n\n101:                                              ; preds = %99\n  %102 = load i8, i8* %25, align 1, !tbaa !11\n  store i8 %102, i8* %100, align 1, !tbaa !11\n  br label %104\n\n103:                                              ; preds = %99\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %100, i8* align 1 %25, i64 %27, i1 false) #14\n  br label %104\n\n104:                                              ; preds = %103, %101, %99\n  %105 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %11, i64 0, i32 0, i32 0\n  %106 = load i64, i64* %8, align 8, !tbaa !18, !noalias !15\n  %107 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %11, i64 0, i32 1\n  store i64 %106, i64* %107, align 8, !tbaa !8, !alias.scope !15\n  %108 = load i8*, i8** %105, align 8, !tbaa !12, !alias.scope !15\n  %109 = getelementptr inbounds i8, i8* %108, i64 %106\n  store i8 0, i8* %109, align 1, !tbaa !11\n  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %89) #14, !noalias !15\n  %110 = load i64, i64* %107, align 8, !tbaa !8, !alias.scope !15\n  %111 = invoke nonnull align 8 dereferenceable(32) %\"class.std::__cxx11::basic_string\"* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEmmmc(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %11, i64 %110, i64 0, i64 1, i8 signext 32)\n          to label %118 unwind label %112\n\n112:                                              ; preds = %104\n  %113 = landingpad { i8*, i32 }\n          cleanup\n  %114 = load i8*, i8** %105, align 8, !tbaa !12, !alias.scope !15\n  %115 = bitcast %union.anon* %87 to i8*\n  %116 = icmp eq i8* %114, %115\n  br i1 %116, label %216, label %117\n\n117:                                              ; preds = %112\n  call void @_ZdlPv(i8* %114) #14\n  br label %216\n\n118:                                              ; preds = %104\n  %119 = load i8*, i8** %105, align 8, !tbaa !12\n  %120 = bitcast %union.anon* %87 to i8*\n  %121 = icmp eq i8* %119, %120\n  br i1 %121, label %122, label %136\n\n122:                                              ; preds = %118\n  %123 = load i64, i64* %107, align 8, !tbaa !8\n  %124 = icmp eq i64 %123, 0\n  br i1 %124, label %131, label %125\n\n125:                                              ; preds = %122\n  %126 = load i8*, i8** %23, align 8, !tbaa !12\n  %127 = icmp eq i64 %123, 1\n  br i1 %127, label %128, label %130\n\n128:                                              ; preds = %125\n  %129 = load i8, i8* %120, align 8, !tbaa !11\n  store i8 %129, i8* %126, align 1, !tbaa !11\n  br label %131\n\n130:                                              ; preds = %125\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %126, i8* nonnull align 8 %120, i64 %123, i1 false) #14\n  br label %131\n\n131:                                              ; preds = %130, %128, %122\n  %132 = load i64, i64* %107, align 8, !tbaa !8\n  store i64 %132, i64* %26, align 8, !tbaa !8\n  %133 = load i8*, i8** %23, align 8, !tbaa !12\n  %134 = getelementptr inbounds i8, i8* %133, i64 %132\n  store i8 0, i8* %134, align 1, !tbaa !11\n  %135 = load i8*, i8** %105, align 8, !tbaa !12\n  br label %151\n\n136:                                              ; preds = %118\n  %137 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %1, i64 0, i32 2\n  %138 = bitcast %union.anon* %137 to i8*\n  %139 = load i8*, i8** %23, align 8, !tbaa !12\n  %140 = icmp eq i8* %139, %138\n  %141 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %1, i64 0, i32 2, i32 0\n  %142 = load i64, i64* %141, align 8\n  store i8* %119, i8** %23, align 8, !tbaa !12\n  %143 = bitcast i64* %107 to <2 x i64>*\n  %144 = load <2 x i64>, <2 x i64>* %143, align 8, !tbaa !11\n  %145 = bitcast i64* %26 to <2 x i64>*\n  store <2 x i64> %144, <2 x i64>* %145, align 8, !tbaa !11\n  %146 = icmp eq i8* %139, null\n  %147 = or i1 %140, %146\n  br i1 %147, label %150, label %148\n\n148:                                              ; preds = %136\n  store i8* %139, i8** %105, align 8, !tbaa !12\n  %149 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %11, i64 0, i32 2, i32 0\n  store i64 %142, i64* %149, align 8, !tbaa !11\n  br label %151\n\n150:                                              ; preds = %136\n  store %union.anon* %87, %union.anon** %88, align 8, !tbaa !12\n  br label %151\n\n151:                                              ; preds = %131, %148, %150\n  %152 = phi i8* [ %135, %131 ], [ %139, %148 ], [ %120, %150 ]\n  store i64 0, i64* %107, align 8, !tbaa !8\n  store i8 0, i8* %152, align 1, !tbaa !11\n  %153 = load i8*, i8** %105, align 8, !tbaa !12\n  %154 = icmp eq i8* %153, %120\n  br i1 %154, label %156, label %155\n\n155:                                              ; preds = %151\n  call void @_ZdlPv(i8* %153) #14\n  br label %156\n\n156:                                              ; preds = %151, %155\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %86) #14\n  %157 = bitcast %\"class.std::__cxx11::basic_string\"* %12 to i8*\n  %158 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %12, i64 0, i32 2\n  %159 = bitcast %\"class.std::__cxx11::basic_string\"* %12 to %union.anon**\n  %160 = bitcast i64* %6 to i8*\n  %161 = bitcast %union.anon* %158 to i8*\n  %162 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %12, i64 0, i32 0, i32 0\n  %163 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %12, i64 0, i32 2, i32 0\n  %164 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %12, i64 0, i32 1\n  %165 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %9, i64 0, i32 2, i32 0\n  %166 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %10, i64 0, i32 0, i32 0, i32 0, i32 1\n  %167 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %10, i64 0, i32 0, i32 0, i32 0, i32 2\n  %168 = bitcast i64* %7 to i8*\n  %169 = load i64, i64* %26, align 8, !tbaa !8\n  %170 = icmp eq i64 %169, 0\n  br i1 %170, label %289, label %171\n\n171:                                              ; preds = %156\n  %172 = bitcast i64* %164 to <2 x i64>*\n  %173 = bitcast i64* %21 to <2 x i64>*\n  br label %174\n\n174:                                              ; preds = %171, %285\n  %175 = phi i64 [ %286, %285 ], [ 0, %171 ]\n  %176 = load i8*, i8** %23, align 8, !tbaa !12\n  %177 = getelementptr inbounds i8, i8* %176, i64 %175\n  %178 = load i8, i8* %177, align 1, !tbaa !11\n  %179 = icmp eq i8 %178, 32\n  br i1 %179, label %180, label %225\n\n180:                                              ; preds = %174\n  %181 = load i64, i64* %21, align 8, !tbaa !8\n  %182 = icmp eq i64 %181, 0\n  br i1 %182, label %222, label %183\n\n183:                                              ; preds = %180\n  %184 = load %\"class.std::__cxx11::basic_string\"*, %\"class.std::__cxx11::basic_string\"** %166, align 8, !tbaa !19\n  %185 = load %\"class.std::__cxx11::basic_string\"*, %\"class.std::__cxx11::basic_string\"** %167, align 16, !tbaa !21\n  %186 = icmp eq %\"class.std::__cxx11::basic_string\"* %184, %185\n  br i1 %186, label %213, label %187\n\n187:                                              ; preds = %183\n  %188 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %184, i64 0, i32 2\n  %189 = bitcast %\"class.std::__cxx11::basic_string\"* %184 to %union.anon**\n  store %union.anon* %188, %union.anon** %189, align 8, !tbaa !3\n  %190 = load i8*, i8** %20, align 8, !tbaa !12\n  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %168) #14\n  store i64 %181, i64* %7, align 8, !tbaa !18\n  %191 = icmp ugt i64 %181, 15\n  br i1 %191, label %192, label %198\n\n192:                                              ; preds = %187\n  %193 = invoke i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %184, i64* nonnull align 8 dereferenceable(8) %7, i64 0)\n          to label %194 unwind label %220\n\n194:                                              ; preds = %192\n  %195 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %184, i64 0, i32 0, i32 0\n  store i8* %193, i8** %195, align 8, !tbaa !12\n  %196 = load i64, i64* %7, align 8, !tbaa !18\n  %197 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %184, i64 0, i32 2, i32 0\n  store i64 %196, i64* %197, align 8, !tbaa !11\n  br label %203\n\n198:                                              ; preds = %187\n  %199 = bitcast %union.anon* %188 to i8*\n  %200 = icmp eq i64 %181, 1\n  br i1 %200, label %201, label %203\n\n201:                                              ; preds = %198\n  %202 = load i8, i8* %190, align 1, !tbaa !11\n  store i8 %202, i8* %199, align 1, !tbaa !11\n  br label %205\n\n203:                                              ; preds = %194, %198\n  %204 = phi i8* [ %193, %194 ], [ %199, %198 ]\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %204, i8* align 1 %190, i64 %181, i1 false) #14\n  br label %205\n\n205:                                              ; preds = %203, %201\n  %206 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %184, i64 0, i32 0, i32 0\n  %207 = load i64, i64* %7, align 8, !tbaa !18\n  %208 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %184, i64 0, i32 1\n  store i64 %207, i64* %208, align 8, !tbaa !8\n  %209 = load i8*, i8** %206, align 8, !tbaa !12\n  %210 = getelementptr inbounds i8, i8* %209, i64 %207\n  store i8 0, i8* %210, align 1, !tbaa !11\n  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %168) #14\n  %211 = load %\"class.std::__cxx11::basic_string\"*, %\"class.std::__cxx11::basic_string\"** %166, align 8, !tbaa !19\n  %212 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %211, i64 1\n  store %\"class.std::__cxx11::basic_string\"* %212, %\"class.std::__cxx11::basic_string\"** %166, align 8, !tbaa !19\n  br label %222\n\n213:                                              ; preds = %183\n  invoke void @_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_realloc_insertIJRKS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_(%\"class.std::vector\"* nonnull align 8 dereferenceable(24) %10, %\"class.std::__cxx11::basic_string\"* %184, %\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %9)\n          to label %222 unwind label %220\n\n214:                                              ; preds = %93\n  %215 = landingpad { i8*, i32 }\n          cleanup\n  br label %216\n\n216:                                              ; preds = %112, %117, %214\n  %217 = phi { i8*, i32 } [ %215, %214 ], [ %113, %117 ], [ %113, %112 ]\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %86) #14\n  br label %677\n\n218:                                              ; preds = %495, %516, %521\n  %219 = landingpad { i8*, i32 }\n          cleanup\n  br label %677\n\n220:                                              ; preds = %192, %213, %222\n  %221 = landingpad { i8*, i32 }\n          cleanup\n  br label %677\n\n222:                                              ; preds = %205, %213, %180\n  %223 = load i64, i64* %21, align 8, !tbaa !8\n  %224 = invoke nonnull align 8 dereferenceable(32) %\"class.std::__cxx11::basic_string\"* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %9, i64 0, i64 %223, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str, i64 0, i64 0), i64 0)\n          to label %285 unwind label %220\n\n225:                                              ; preds = %174\n  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %157) #14\n  call void @llvm.experimental.noalias.scope.decl(metadata !22)\n  store %union.anon* %158, %union.anon** %159, align 8, !tbaa !3, !alias.scope !22\n  %226 = load i8*, i8** %20, align 8, !tbaa !12, !noalias !22\n  %227 = load i64, i64* %21, align 8, !tbaa !8, !noalias !22\n  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %160) #14, !noalias !22\n  store i64 %227, i64* %6, align 8, !tbaa !18, !noalias !22\n  %228 = icmp ugt i64 %227, 15\n  br i1 %228, label %229, label %233\n\n229:                                              ; preds = %225\n  %230 = invoke i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %12, i64* nonnull align 8 dereferenceable(8) %6, i64 0)\n          to label %231 unwind label %281\n\n231:                                              ; preds = %229\n  store i8* %230, i8** %162, align 8, !tbaa !12, !alias.scope !22\n  %232 = load i64, i64* %6, align 8, !tbaa !18, !noalias !22\n  store i64 %232, i64* %163, align 8, !tbaa !11, !alias.scope !22\n  br label %233\n\n233:                                              ; preds = %225, %231\n  %234 = phi i8* [ %230, %231 ], [ %161, %225 ]\n  switch i64 %227, label %237 [\n    i64 1, label %235\n    i64 0, label %238\n  ]\n\n235:                                              ; preds = %233\n  %236 = load i8, i8* %226, align 1, !tbaa !11\n  store i8 %236, i8* %234, align 1, !tbaa !11\n  br label %238\n\n237:                                              ; preds = %233\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %234, i8* align 1 %226, i64 %227, i1 false) #14\n  br label %238\n\n238:                                              ; preds = %237, %235, %233\n  %239 = load i64, i64* %6, align 8, !tbaa !18, !noalias !22\n  store i64 %239, i64* %164, align 8, !tbaa !8, !alias.scope !22\n  %240 = load i8*, i8** %162, align 8, !tbaa !12, !alias.scope !22\n  %241 = getelementptr inbounds i8, i8* %240, i64 %239\n  store i8 0, i8* %241, align 1, !tbaa !11\n  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %160) #14, !noalias !22\n  %242 = load i64, i64* %164, align 8, !tbaa !8, !alias.scope !22\n  %243 = invoke nonnull align 8 dereferenceable(32) %\"class.std::__cxx11::basic_string\"* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEmmmc(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %12, i64 %242, i64 0, i64 1, i8 signext %178)\n          to label %249 unwind label %244\n\n244:                                              ; preds = %238\n  %245 = landingpad { i8*, i32 }\n          cleanup\n  %246 = load i8*, i8** %162, align 8, !tbaa !12, !alias.scope !22\n  %247 = icmp eq i8* %246, %161\n  br i1 %247, label %283, label %248\n\n248:                                              ; preds = %244\n  call void @_ZdlPv(i8* %246) #14\n  br label %283\n\n249:                                              ; preds = %238\n  %250 = load i8*, i8** %162, align 8, !tbaa !12\n  %251 = icmp eq i8* %250, %161\n  br i1 %251, label %252, label %266\n\n252:                                              ; preds = %249\n  %253 = load i64, i64* %164, align 8, !tbaa !8\n  %254 = icmp eq i64 %253, 0\n  br i1 %254, label %261, label %255\n\n255:                                              ; preds = %252\n  %256 = load i8*, i8** %20, align 8, !tbaa !12\n  %257 = icmp eq i64 %253, 1\n  br i1 %257, label %258, label %260\n\n258:                                              ; preds = %255\n  %259 = load i8, i8* %161, align 8, !tbaa !11\n  store i8 %259, i8* %256, align 1, !tbaa !11\n  br label %261\n\n260:                                              ; preds = %255\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %256, i8* nonnull align 8 %161, i64 %253, i1 false) #14\n  br label %261\n\n261:                                              ; preds = %260, %258, %252\n  %262 = load i64, i64* %164, align 8, !tbaa !8\n  store i64 %262, i64* %21, align 8, !tbaa !8\n  %263 = load i8*, i8** %20, align 8, !tbaa !12\n  %264 = getelementptr inbounds i8, i8* %263, i64 %262\n  store i8 0, i8* %264, align 1, !tbaa !11\n  %265 = load i8*, i8** %162, align 8, !tbaa !12\n  br label %275\n\n266:                                              ; preds = %249\n  %267 = load i8*, i8** %20, align 8, !tbaa !12\n  %268 = icmp eq i8* %267, %19\n  %269 = load i64, i64* %165, align 8\n  store i8* %250, i8** %20, align 8, !tbaa !12\n  %270 = load <2 x i64>, <2 x i64>* %172, align 8, !tbaa !11\n  store <2 x i64> %270, <2 x i64>* %173, align 8, !tbaa !11\n  %271 = icmp eq i8* %267, null\n  %272 = or i1 %268, %271\n  br i1 %272, label %274, label %273\n\n273:                                              ; preds = %266\n  store i8* %267, i8** %162, align 8, !tbaa !12\n  store i64 %269, i64* %163, align 8, !tbaa !11\n  br label %275\n\n274:                                              ; preds = %266\n  store %union.anon* %158, %union.anon** %159, align 8, !tbaa !12\n  br label %275\n\n275:                                              ; preds = %261, %273, %274\n  %276 = phi i8* [ %265, %261 ], [ %267, %273 ], [ %161, %274 ]\n  store i64 0, i64* %164, align 8, !tbaa !8\n  store i8 0, i8* %276, align 1, !tbaa !11\n  %277 = load i8*, i8** %162, align 8, !tbaa !12\n  %278 = icmp eq i8* %277, %161\n  br i1 %278, label %280, label %279\n\n279:                                              ; preds = %275\n  call void @_ZdlPv(i8* %277) #14\n  br label %280\n\n280:                                              ; preds = %275, %279\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %157) #14\n  br label %285\n\n281:                                              ; preds = %229\n  %282 = landingpad { i8*, i32 }\n          cleanup\n  br label %283\n\n283:                                              ; preds = %244, %248, %281\n  %284 = phi { i8*, i32 } [ %282, %281 ], [ %245, %248 ], [ %245, %244 ]\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %157) #14\n  br label %677\n\n285:                                              ; preds = %222, %280\n  %286 = add nuw i64 %175, 1\n  %287 = load i64, i64* %26, align 8, !tbaa !8\n  %288 = icmp ugt i64 %287, %286\n  br i1 %288, label %174, label %289, !llvm.loop !25\n\n289:                                              ; preds = %285, %156\n  %290 = bitcast %\"class.std::vector\"* %10 to <2 x %\"class.std::__cxx11::basic_string\"*>*\n  %291 = load <2 x %\"class.std::__cxx11::basic_string\"*>, <2 x %\"class.std::__cxx11::basic_string\"*>* %290, align 16, !tbaa !26\n  %292 = bitcast %\"class.std::vector\"* %0 to <2 x %\"class.std::__cxx11::basic_string\"*>*\n  store <2 x %\"class.std::__cxx11::basic_string\"*> %291, <2 x %\"class.std::__cxx11::basic_string\"*>* %292, align 8, !tbaa !26\n  %293 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0, i64 0, i32 0, i32 0, i32 0, i32 2\n  %294 = load %\"class.std::__cxx11::basic_string\"*, %\"class.std::__cxx11::basic_string\"** %167, align 16, !tbaa !21\n  store %\"class.std::__cxx11::basic_string\"* %294, %\"class.std::__cxx11::basic_string\"** %293, align 8, !tbaa !21\n  br label %672\n\n295:                                              ; preds = %72, %57, %82\n  br i1 %31, label %296, label %321\n\n296:                                              ; preds = %295\n  %297 = lshr i64 %27, 2\n  br label %298\n\n298:                                              ; preds = %315, %296\n  %299 = phi i64 [ %297, %296 ], [ %317, %315 ]\n  %300 = phi i8* [ %25, %296 ], [ %316, %315 ]\n  %301 = load i8, i8* %300, align 1, !tbaa !11\n  %302 = icmp eq i8 %301, 44\n  br i1 %302, label %346, label %303\n\n303:                                              ; preds = %298\n  %304 = getelementptr inbounds i8, i8* %300, i64 1\n  %305 = load i8, i8* %304, align 1, !tbaa !11\n  %306 = icmp eq i8 %305, 44\n  br i1 %306, label %344, label %307\n\n307:                                              ; preds = %303\n  %308 = getelementptr inbounds i8, i8* %300, i64 2\n  %309 = load i8, i8* %308, align 1, !tbaa !11\n  %310 = icmp eq i8 %309, 44\n  br i1 %310, label %342, label %311\n\n311:                                              ; preds = %307\n  %312 = getelementptr inbounds i8, i8* %300, i64 3\n  %313 = load i8, i8* %312, align 1, !tbaa !11\n  %314 = icmp eq i8 %313, 44\n  br i1 %314, label %340, label %315\n\n315:                                              ; preds = %311\n  %316 = getelementptr inbounds i8, i8* %300, i64 4\n  %317 = add nsw i64 %299, -1\n  %318 = icmp sgt i64 %299, 1\n  br i1 %318, label %298, label %319, !llvm.loop !13\n\n319:                                              ; preds = %315\n  %320 = ptrtoint i8* %316 to i64\n  br label %321\n\n321:                                              ; preds = %319, %295\n  %322 = phi i64 [ %320, %319 ], [ %30, %295 ]\n  %323 = phi i8* [ %316, %319 ], [ %25, %295 ]\n  %324 = sub i64 %29, %322\n  switch i64 %324, label %349 [\n    i64 3, label %325\n    i64 2, label %330\n    i64 1, label %336\n  ]\n\n325:                                              ; preds = %321\n  %326 = load i8, i8* %323, align 1, !tbaa !11\n  %327 = icmp eq i8 %326, 44\n  br i1 %327, label %346, label %328\n\n328:                                              ; preds = %325\n  %329 = getelementptr inbounds i8, i8* %323, i64 1\n  br label %330\n\n330:                                              ; preds = %321, %328\n  %331 = phi i8* [ %329, %328 ], [ %323, %321 ]\n  %332 = load i8, i8* %331, align 1, !tbaa !11\n  %333 = icmp eq i8 %332, 44\n  br i1 %333, label %346, label %334\n\n334:                                              ; preds = %330\n  %335 = getelementptr inbounds i8, i8* %331, i64 1\n  br label %336\n\n336:                                              ; preds = %321, %334\n  %337 = phi i8* [ %335, %334 ], [ %323, %321 ]\n  %338 = load i8, i8* %337, align 1, !tbaa !11\n  %339 = icmp eq i8 %338, 44\n  br i1 %339, label %346, label %349\n\n340:                                              ; preds = %311\n  %341 = getelementptr inbounds i8, i8* %300, i64 3\n  br label %346\n\n342:                                              ; preds = %307\n  %343 = getelementptr inbounds i8, i8* %300, i64 2\n  br label %346\n\n344:                                              ; preds = %303\n  %345 = getelementptr inbounds i8, i8* %300, i64 1\n  br label %346\n\n346:                                              ; preds = %298, %340, %342, %344, %336, %330, %325\n  %347 = phi i8* [ %323, %325 ], [ %331, %330 ], [ %337, %336 ], [ %341, %340 ], [ %343, %342 ], [ %345, %344 ], [ %300, %298 ]\n  %348 = icmp eq i8* %347, %28\n  br i1 %348, label %349, label %388\n\n349:                                              ; preds = %336, %321, %346\n  %350 = icmp eq i64 %27, 0\n  br i1 %350, label %608, label %351\n\n351:                                              ; preds = %349\n  %352 = icmp ult i64 %27, 8\n  br i1 %352, label %385, label %353\n\n353:                                              ; preds = %351\n  %354 = and i64 %27, -8\n  br label %355\n\n355:                                              ; preds = %355, %353\n  %356 = phi i64 [ 0, %353 ], [ %379, %355 ]\n  %357 = phi <4 x i32> [ zeroinitializer, %353 ], [ %377, %355 ]\n  %358 = phi <4 x i32> [ zeroinitializer, %353 ], [ %378, %355 ]\n  %359 = getelementptr inbounds i8, i8* %25, i64 %356\n  %360 = bitcast i8* %359 to <4 x i8>*\n  %361 = load <4 x i8>, <4 x i8>* %360, align 1, !tbaa !11\n  %362 = getelementptr inbounds i8, i8* %359, i64 4\n  %363 = bitcast i8* %362 to <4 x i8>*\n  %364 = load <4 x i8>, <4 x i8>* %363, align 1, !tbaa !11\n  %365 = add <4 x i8> %361, <i8 -97, i8 -97, i8 -97, i8 -97>\n  %366 = add <4 x i8> %364, <i8 -97, i8 -97, i8 -97, i8 -97>\n  %367 = icmp ult <4 x i8> %365, <i8 26, i8 26, i8 26, i8 26>\n  %368 = icmp ult <4 x i8> %366, <i8 26, i8 26, i8 26, i8 26>\n  %369 = and <4 x i8> %361, <i8 1, i8 1, i8 1, i8 1>\n  %370 = and <4 x i8> %364, <i8 1, i8 1, i8 1, i8 1>\n  %371 = xor <4 x i8> %369, <i8 1, i8 1, i8 1, i8 1>\n  %372 = xor <4 x i8> %370, <i8 1, i8 1, i8 1, i8 1>\n  %373 = select <4 x i1> %367, <4 x i8> %371, <4 x i8> zeroinitializer\n  %374 = select <4 x i1> %368, <4 x i8> %372, <4 x i8> zeroinitializer\n  %375 = zext <4 x i8> %373 to <4 x i32>\n  %376 = zext <4 x i8> %374 to <4 x i32>\n  %377 = add <4 x i32> %357, %375\n  %378 = add <4 x i32> %358, %376\n  %379 = add nuw i64 %356, 8\n  %380 = icmp eq i64 %379, %354\n  br i1 %380, label %381, label %355, !llvm.loop !27\n\n381:                                              ; preds = %355\n  %382 = add <4 x i32> %378, %377\n  %383 = call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %382)\n  %384 = icmp eq i64 %27, %354\n  br i1 %384, label %608, label %385\n\n385:                                              ; preds = %351, %381\n  %386 = phi i64 [ 0, %351 ], [ %354, %381 ]\n  %387 = phi i32 [ 0, %351 ], [ %383, %381 ]\n  br label %594\n\n388:                                              ; preds = %346\n  %389 = bitcast %\"class.std::__cxx11::basic_string\"* %13 to i8*\n  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %389) #14\n  call void @llvm.experimental.noalias.scope.decl(metadata !29)\n  %390 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %13, i64 0, i32 2\n  %391 = bitcast %\"class.std::__cxx11::basic_string\"* %13 to %union.anon**\n  store %union.anon* %390, %union.anon** %391, align 8, !tbaa !3, !alias.scope !29\n  %392 = bitcast i64* %5 to i8*\n  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %392) #14, !noalias !29\n  store i64 %27, i64* %5, align 8, !tbaa !18, !noalias !29\n  %393 = icmp ugt i64 %27, 15\n  br i1 %393, label %396, label %394\n\n394:                                              ; preds = %388\n  %395 = bitcast %union.anon* %390 to i8*\n  br label %402\n\n396:                                              ; preds = %388\n  %397 = invoke i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %13, i64* nonnull align 8 dereferenceable(8) %5, i64 0)\n          to label %398 unwind label %517\n\n398:                                              ; preds = %396\n  %399 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %13, i64 0, i32 0, i32 0\n  store i8* %397, i8** %399, align 8, !tbaa !12, !alias.scope !29\n  %400 = load i64, i64* %5, align 8, !tbaa !18, !noalias !29\n  %401 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %13, i64 0, i32 2, i32 0\n  store i64 %400, i64* %401, align 8, !tbaa !11, !alias.scope !29\n  br label %402\n\n402:                                              ; preds = %398, %394\n  %403 = phi i8* [ %395, %394 ], [ %397, %398 ]\n  switch i64 %27, label %406 [\n    i64 1, label %404\n    i64 0, label %407\n  ]\n\n404:                                              ; preds = %402\n  %405 = load i8, i8* %25, align 1, !tbaa !11\n  store i8 %405, i8* %403, align 1, !tbaa !11\n  br label %407\n\n406:                                              ; preds = %402\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %403, i8* align 1 %25, i64 %27, i1 false) #14\n  br label %407\n\n407:                                              ; preds = %406, %404, %402\n  %408 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %13, i64 0, i32 0, i32 0\n  %409 = load i64, i64* %5, align 8, !tbaa !18, !noalias !29\n  %410 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %13, i64 0, i32 1\n  store i64 %409, i64* %410, align 8, !tbaa !8, !alias.scope !29\n  %411 = load i8*, i8** %408, align 8, !tbaa !12, !alias.scope !29\n  %412 = getelementptr inbounds i8, i8* %411, i64 %409\n  store i8 0, i8* %412, align 1, !tbaa !11\n  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %392) #14, !noalias !29\n  %413 = load i64, i64* %410, align 8, !tbaa !8, !alias.scope !29\n  %414 = invoke nonnull align 8 dereferenceable(32) %\"class.std::__cxx11::basic_string\"* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEmmmc(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %13, i64 %413, i64 0, i64 1, i8 signext 44)\n          to label %421 unwind label %415\n\n415:                                              ; preds = %407\n  %416 = landingpad { i8*, i32 }\n          cleanup\n  %417 = load i8*, i8** %408, align 8, !tbaa !12, !alias.scope !29\n  %418 = bitcast %union.anon* %390 to i8*\n  %419 = icmp eq i8* %417, %418\n  br i1 %419, label %519, label %420\n\n420:                                              ; preds = %415\n  call void @_ZdlPv(i8* %417) #14\n  br label %519\n\n421:                                              ; preds = %407\n  %422 = load i8*, i8** %408, align 8, !tbaa !12\n  %423 = bitcast %union.anon* %390 to i8*\n  %424 = icmp eq i8* %422, %423\n  br i1 %424, label %425, label %439\n\n425:                                              ; preds = %421\n  %426 = load i64, i64* %410, align 8, !tbaa !8\n  %427 = icmp eq i64 %426, 0\n  br i1 %427, label %434, label %428\n\n428:                                              ; preds = %425\n  %429 = load i8*, i8** %23, align 8, !tbaa !12\n  %430 = icmp eq i64 %426, 1\n  br i1 %430, label %431, label %433\n\n431:                                              ; preds = %428\n  %432 = load i8, i8* %423, align 8, !tbaa !11\n  store i8 %432, i8* %429, align 1, !tbaa !11\n  br label %434\n\n433:                                              ; preds = %428\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %429, i8* nonnull align 8 %423, i64 %426, i1 false) #14\n  br label %434\n\n434:                                              ; preds = %433, %431, %425\n  %435 = load i64, i64* %410, align 8, !tbaa !8\n  store i64 %435, i64* %26, align 8, !tbaa !8\n  %436 = load i8*, i8** %23, align 8, !tbaa !12\n  %437 = getelementptr inbounds i8, i8* %436, i64 %435\n  store i8 0, i8* %437, align 1, !tbaa !11\n  %438 = load i8*, i8** %408, align 8, !tbaa !12\n  br label %454\n\n439:                                              ; preds = %421\n  %440 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %1, i64 0, i32 2\n  %441 = bitcast %union.anon* %440 to i8*\n  %442 = load i8*, i8** %23, align 8, !tbaa !12\n  %443 = icmp eq i8* %442, %441\n  %444 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %1, i64 0, i32 2, i32 0\n  %445 = load i64, i64* %444, align 8\n  store i8* %422, i8** %23, align 8, !tbaa !12\n  %446 = bitcast i64* %410 to <2 x i64>*\n  %447 = load <2 x i64>, <2 x i64>* %446, align 8, !tbaa !11\n  %448 = bitcast i64* %26 to <2 x i64>*\n  store <2 x i64> %447, <2 x i64>* %448, align 8, !tbaa !11\n  %449 = icmp eq i8* %442, null\n  %450 = or i1 %443, %449\n  br i1 %450, label %453, label %451\n\n451:                                              ; preds = %439\n  store i8* %442, i8** %408, align 8, !tbaa !12\n  %452 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %13, i64 0, i32 2, i32 0\n  store i64 %445, i64* %452, align 8, !tbaa !11\n  br label %454\n\n453:                                              ; preds = %439\n  store %union.anon* %390, %union.anon** %391, align 8, !tbaa !12\n  br label %454\n\n454:                                              ; preds = %434, %451, %453\n  %455 = phi i8* [ %438, %434 ], [ %442, %451 ], [ %423, %453 ]\n  store i64 0, i64* %410, align 8, !tbaa !8\n  store i8 0, i8* %455, align 1, !tbaa !11\n  %456 = load i8*, i8** %408, align 8, !tbaa !12\n  %457 = icmp eq i8* %456, %423\n  br i1 %457, label %459, label %458\n\n458:                                              ; preds = %454\n  call void @_ZdlPv(i8* %456) #14\n  br label %459\n\n459:                                              ; preds = %454, %458\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %389) #14\n  %460 = bitcast %\"class.std::__cxx11::basic_string\"* %14 to i8*\n  %461 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %14, i64 0, i32 2\n  %462 = bitcast %\"class.std::__cxx11::basic_string\"* %14 to %union.anon**\n  %463 = bitcast i64* %3 to i8*\n  %464 = bitcast %union.anon* %461 to i8*\n  %465 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %14, i64 0, i32 0, i32 0\n  %466 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %14, i64 0, i32 2, i32 0\n  %467 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %14, i64 0, i32 1\n  %468 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %9, i64 0, i32 2, i32 0\n  %469 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %10, i64 0, i32 0, i32 0, i32 0, i32 1\n  %470 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %10, i64 0, i32 0, i32 0, i32 0, i32 2\n  %471 = bitcast i64* %4 to i8*\n  %472 = load i64, i64* %26, align 8, !tbaa !8\n  %473 = icmp eq i64 %472, 0\n  br i1 %473, label %588, label %474\n\n474:                                              ; preds = %459\n  %475 = bitcast i64* %467 to <2 x i64>*\n  %476 = bitcast i64* %21 to <2 x i64>*\n  br label %477\n\n477:                                              ; preds = %474, %584\n  %478 = phi i64 [ %585, %584 ], [ 0, %474 ]\n  %479 = load i8*, i8** %23, align 8, !tbaa !12\n  %480 = getelementptr inbounds i8, i8* %479, i64 %478\n  %481 = load i8, i8* %480, align 1, !tbaa !11\n  %482 = icmp eq i8 %481, 44\n  br i1 %482, label %483, label %524\n\n483:                                              ; preds = %477\n  %484 = load i64, i64* %21, align 8, !tbaa !8\n  %485 = icmp eq i64 %484, 0\n  br i1 %485, label %521, label %486\n\n486:                                              ; preds = %483\n  %487 = load %\"class.std::__cxx11::basic_string\"*, %\"class.std::__cxx11::basic_string\"** %469, align 8, !tbaa !19\n  %488 = load %\"class.std::__cxx11::basic_string\"*, %\"class.std::__cxx11::basic_string\"** %470, align 16, !tbaa !21\n  %489 = icmp eq %\"class.std::__cxx11::basic_string\"* %487, %488\n  br i1 %489, label %516, label %490\n\n490:                                              ; preds = %486\n  %491 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %487, i64 0, i32 2\n  %492 = bitcast %\"class.std::__cxx11::basic_string\"* %487 to %union.anon**\n  store %union.anon* %491, %union.anon** %492, align 8, !tbaa !3\n  %493 = load i8*, i8** %20, align 8, !tbaa !12\n  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %471) #14\n  store i64 %484, i64* %4, align 8, !tbaa !18\n  %494 = icmp ugt i64 %484, 15\n  br i1 %494, label %495, label %501\n\n495:                                              ; preds = %490\n  %496 = invoke i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %487, i64* nonnull align 8 dereferenceable(8) %4, i64 0)\n          to label %497 unwind label %218\n\n497:                                              ; preds = %495\n  %498 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %487, i64 0, i32 0, i32 0\n  store i8* %496, i8** %498, align 8, !tbaa !12\n  %499 = load i64, i64* %4, align 8, !tbaa !18\n  %500 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %487, i64 0, i32 2, i32 0\n  store i64 %499, i64* %500, align 8, !tbaa !11\n  br label %506\n\n501:                                              ; preds = %490\n  %502 = bitcast %union.anon* %491 to i8*\n  %503 = icmp eq i64 %484, 1\n  br i1 %503, label %504, label %506\n\n504:                                              ; preds = %501\n  %505 = load i8, i8* %493, align 1, !tbaa !11\n  store i8 %505, i8* %502, align 1, !tbaa !11\n  br label %508\n\n506:                                              ; preds = %497, %501\n  %507 = phi i8* [ %496, %497 ], [ %502, %501 ]\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %507, i8* align 1 %493, i64 %484, i1 false) #14\n  br label %508\n\n508:                                              ; preds = %506, %504\n  %509 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %487, i64 0, i32 0, i32 0\n  %510 = load i64, i64* %4, align 8, !tbaa !18\n  %511 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %487, i64 0, i32 1\n  store i64 %510, i64* %511, align 8, !tbaa !8\n  %512 = load i8*, i8** %509, align 8, !tbaa !12\n  %513 = getelementptr inbounds i8, i8* %512, i64 %510\n  store i8 0, i8* %513, align 1, !tbaa !11\n  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %471) #14\n  %514 = load %\"class.std::__cxx11::basic_string\"*, %\"class.std::__cxx11::basic_string\"** %469, align 8, !tbaa !19\n  %515 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %514, i64 1\n  store %\"class.std::__cxx11::basic_string\"* %515, %\"class.std::__cxx11::basic_string\"** %469, align 8, !tbaa !19\n  br label %521\n\n516:                                              ; preds = %486\n  invoke void @_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_realloc_insertIJRKS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_(%\"class.std::vector\"* nonnull align 8 dereferenceable(24) %10, %\"class.std::__cxx11::basic_string\"* %487, %\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %9)\n          to label %521 unwind label %218\n\n517:                                              ; preds = %396\n  %518 = landingpad { i8*, i32 }\n          cleanup\n  br label %519\n\n519:                                              ; preds = %415, %420, %517\n  %520 = phi { i8*, i32 } [ %518, %517 ], [ %416, %420 ], [ %416, %415 ]\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %389) #14\n  br label %677\n\n521:                                              ; preds = %508, %516, %483\n  %522 = load i64, i64* %21, align 8, !tbaa !8\n  %523 = invoke nonnull align 8 dereferenceable(32) %\"class.std::__cxx11::basic_string\"* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %9, i64 0, i64 %522, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str, i64 0, i64 0), i64 0)\n          to label %584 unwind label %218\n\n524:                                              ; preds = %477\n  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %460) #14\n  call void @llvm.experimental.noalias.scope.decl(metadata !32)\n  store %union.anon* %461, %union.anon** %462, align 8, !tbaa !3, !alias.scope !32\n  %525 = load i8*, i8** %20, align 8, !tbaa !12, !noalias !32\n  %526 = load i64, i64* %21, align 8, !tbaa !8, !noalias !32\n  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %463) #14, !noalias !32\n  store i64 %526, i64* %3, align 8, !tbaa !18, !noalias !32\n  %527 = icmp ugt i64 %526, 15\n  br i1 %527, label %528, label %532\n\n528:                                              ; preds = %524\n  %529 = invoke i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %14, i64* nonnull align 8 dereferenceable(8) %3, i64 0)\n          to label %530 unwind label %580\n\n530:                                              ; preds = %528\n  store i8* %529, i8** %465, align 8, !tbaa !12, !alias.scope !32\n  %531 = load i64, i64* %3, align 8, !tbaa !18, !noalias !32\n  store i64 %531, i64* %466, align 8, !tbaa !11, !alias.scope !32\n  br label %532\n\n532:                                              ; preds = %524, %530\n  %533 = phi i8* [ %529, %530 ], [ %464, %524 ]\n  switch i64 %526, label %536 [\n    i64 1, label %534\n    i64 0, label %537\n  ]\n\n534:                                              ; preds = %532\n  %535 = load i8, i8* %525, align 1, !tbaa !11\n  store i8 %535, i8* %533, align 1, !tbaa !11\n  br label %537\n\n536:                                              ; preds = %532\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %533, i8* align 1 %525, i64 %526, i1 false) #14\n  br label %537\n\n537:                                              ; preds = %536, %534, %532\n  %538 = load i64, i64* %3, align 8, !tbaa !18, !noalias !32\n  store i64 %538, i64* %467, align 8, !tbaa !8, !alias.scope !32\n  %539 = load i8*, i8** %465, align 8, !tbaa !12, !alias.scope !32\n  %540 = getelementptr inbounds i8, i8* %539, i64 %538\n  store i8 0, i8* %540, align 1, !tbaa !11\n  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %463) #14, !noalias !32\n  %541 = load i64, i64* %467, align 8, !tbaa !8, !alias.scope !32\n  %542 = invoke nonnull align 8 dereferenceable(32) %\"class.std::__cxx11::basic_string\"* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEmmmc(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %14, i64 %541, i64 0, i64 1, i8 signext %481)\n          to label %548 unwind label %543\n\n543:                                              ; preds = %537\n  %544 = landingpad { i8*, i32 }\n          cleanup\n  %545 = load i8*, i8** %465, align 8, !tbaa !12, !alias.scope !32\n  %546 = icmp eq i8* %545, %464\n  br i1 %546, label %582, label %547\n\n547:                                              ; preds = %543\n  call void @_ZdlPv(i8* %545) #14\n  br label %582\n\n548:                                              ; preds = %537\n  %549 = load i8*, i8** %465, align 8, !tbaa !12\n  %550 = icmp eq i8* %549, %464\n  br i1 %550, label %551, label %565\n\n551:                                              ; preds = %548\n  %552 = load i64, i64* %467, align 8, !tbaa !8\n  %553 = icmp eq i64 %552, 0\n  br i1 %553, label %560, label %554\n\n554:                                              ; preds = %551\n  %555 = load i8*, i8** %20, align 8, !tbaa !12\n  %556 = icmp eq i64 %552, 1\n  br i1 %556, label %557, label %559\n\n557:                                              ; preds = %554\n  %558 = load i8, i8* %464, align 8, !tbaa !11\n  store i8 %558, i8* %555, align 1, !tbaa !11\n  br label %560\n\n559:                                              ; preds = %554\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %555, i8* nonnull align 8 %464, i64 %552, i1 false) #14\n  br label %560\n\n560:                                              ; preds = %559, %557, %551\n  %561 = load i64, i64* %467, align 8, !tbaa !8\n  store i64 %561, i64* %21, align 8, !tbaa !8\n  %562 = load i8*, i8** %20, align 8, !tbaa !12\n  %563 = getelementptr inbounds i8, i8* %562, i64 %561\n  store i8 0, i8* %563, align 1, !tbaa !11\n  %564 = load i8*, i8** %465, align 8, !tbaa !12\n  br label %574\n\n565:                                              ; preds = %548\n  %566 = load i8*, i8** %20, align 8, !tbaa !12\n  %567 = icmp eq i8* %566, %19\n  %568 = load i64, i64* %468, align 8\n  store i8* %549, i8** %20, align 8, !tbaa !12\n  %569 = load <2 x i64>, <2 x i64>* %475, align 8, !tbaa !11\n  store <2 x i64> %569, <2 x i64>* %476, align 8, !tbaa !11\n  %570 = icmp eq i8* %566, null\n  %571 = or i1 %567, %570\n  br i1 %571, label %573, label %572\n\n572:                                              ; preds = %565\n  store i8* %566, i8** %465, align 8, !tbaa !12\n  store i64 %568, i64* %466, align 8, !tbaa !11\n  br label %574\n\n573:                                              ; preds = %565\n  store %union.anon* %461, %union.anon** %462, align 8, !tbaa !12\n  br label %574\n\n574:                                              ; preds = %560, %572, %573\n  %575 = phi i8* [ %564, %560 ], [ %566, %572 ], [ %464, %573 ]\n  store i64 0, i64* %467, align 8, !tbaa !8\n  store i8 0, i8* %575, align 1, !tbaa !11\n  %576 = load i8*, i8** %465, align 8, !tbaa !12\n  %577 = icmp eq i8* %576, %464\n  br i1 %577, label %579, label %578\n\n578:                                              ; preds = %574\n  call void @_ZdlPv(i8* %576) #14\n  br label %579\n\n579:                                              ; preds = %574, %578\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %460) #14\n  br label %584\n\n580:                                              ; preds = %528\n  %581 = landingpad { i8*, i32 }\n          cleanup\n  br label %582\n\n582:                                              ; preds = %543, %547, %580\n  %583 = phi { i8*, i32 } [ %581, %580 ], [ %544, %547 ], [ %544, %543 ]\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %460) #14\n  br label %677\n\n584:                                              ; preds = %521, %579\n  %585 = add nuw i64 %478, 1\n  %586 = load i64, i64* %26, align 8, !tbaa !8\n  %587 = icmp ugt i64 %586, %585\n  br i1 %587, label %477, label %588, !llvm.loop !35\n\n588:                                              ; preds = %584, %459\n  %589 = bitcast %\"class.std::vector\"* %10 to <2 x %\"class.std::__cxx11::basic_string\"*>*\n  %590 = load <2 x %\"class.std::__cxx11::basic_string\"*>, <2 x %\"class.std::__cxx11::basic_string\"*>* %589, align 16, !tbaa !26\n  %591 = bitcast %\"class.std::vector\"* %0 to <2 x %\"class.std::__cxx11::basic_string\"*>*\n  store <2 x %\"class.std::__cxx11::basic_string\"*> %590, <2 x %\"class.std::__cxx11::basic_string\"*>* %591, align 8, !tbaa !26\n  %592 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0, i64 0, i32 0, i32 0, i32 0, i32 2\n  %593 = load %\"class.std::__cxx11::basic_string\"*, %\"class.std::__cxx11::basic_string\"** %470, align 16, !tbaa !21\n  store %\"class.std::__cxx11::basic_string\"* %593, %\"class.std::__cxx11::basic_string\"** %592, align 8, !tbaa !21\n  br label %672\n\n594:                                              ; preds = %385, %594\n  %595 = phi i64 [ %606, %594 ], [ %386, %385 ]\n  %596 = phi i32 [ %605, %594 ], [ %387, %385 ]\n  %597 = getelementptr inbounds i8, i8* %25, i64 %595\n  %598 = load i8, i8* %597, align 1, !tbaa !11\n  %599 = add i8 %598, -97\n  %600 = icmp ult i8 %599, 26\n  %601 = and i8 %598, 1\n  %602 = xor i8 %601, 1\n  %603 = select i1 %600, i8 %602, i8 0\n  %604 = zext i8 %603 to i32\n  %605 = add nuw nsw i32 %596, %604\n  %606 = add nuw nsw i64 %595, 1\n  %607 = icmp eq i64 %606, %27\n  br i1 %607, label %608, label %594, !llvm.loop !36\n\n608:                                              ; preds = %594, %381, %349\n  %609 = phi i32 [ 0, %349 ], [ %383, %381 ], [ %605, %594 ]\n  %610 = bitcast [1 x %\"class.std::__cxx11::basic_string\"]* %15 to i8*\n  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %610) #14\n  %611 = getelementptr inbounds [1 x %\"class.std::__cxx11::basic_string\"], [1 x %\"class.std::__cxx11::basic_string\"]* %15, i64 0, i64 0\n  invoke void (%\"class.std::__cxx11::basic_string\"*, i32 (i8*, i64, i8*, %struct.__va_list_tag*)*, i64, i8*, ...) @_ZN9__gnu_cxx12__to_xstringINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcEET_PFiPT0_mPKS8_P13__va_list_tagEmSB_z(%\"class.std::__cxx11::basic_string\"* nonnull sret(%\"class.std::__cxx11::basic_string\") align 8 %611, i32 (i8*, i64, i8*, %struct.__va_list_tag*)* nonnull @vsnprintf, i64 16, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32 %609)\n          to label %612 unwind label %635\n\n612:                                              ; preds = %608\n  %613 = bitcast %\"class.std::vector\"* %0 to i8*\n  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(24) %613, i8 0, i64 24, i1 false) #14\n  %614 = invoke noalias nonnull i8* @_Znwm(i64 32) #15\n          to label %617 unwind label %615\n\n615:                                              ; preds = %612\n  %616 = landingpad { i8*, i32 }\n          cleanup\n  br label %637\n\n617:                                              ; preds = %612\n  %618 = getelementptr inbounds [1 x %\"class.std::__cxx11::basic_string\"], [1 x %\"class.std::__cxx11::basic_string\"]* %15, i64 0, i64 1\n  %619 = bitcast i8* %614 to %\"class.std::__cxx11::basic_string\"*\n  %620 = bitcast %\"class.std::vector\"* %0 to i8**\n  store i8* %614, i8** %620, align 8, !tbaa !38\n  %621 = getelementptr inbounds i8, i8* %614, i64 32\n  %622 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0, i64 0, i32 0, i32 0, i32 0, i32 2\n  %623 = bitcast %\"class.std::__cxx11::basic_string\"** %622 to i8**\n  store i8* %621, i8** %623, align 8, !tbaa !21\n  %624 = invoke %\"class.std::__cxx11::basic_string\"* @_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPS7_EET0_T_SC_SB_(%\"class.std::__cxx11::basic_string\"* nonnull %611, %\"class.std::__cxx11::basic_string\"* nonnull %618, %\"class.std::__cxx11::basic_string\"* nonnull %619)\n          to label %627 unwind label %625\n\n625:                                              ; preds = %617\n  %626 = landingpad { i8*, i32 }\n          cleanup\n  call void @_ZdlPv(i8* nonnull %614) #14\n  br label %637\n\n627:                                              ; preds = %617\n  %628 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0, i64 0, i32 0, i32 0, i32 0, i32 1\n  store %\"class.std::__cxx11::basic_string\"* %624, %\"class.std::__cxx11::basic_string\"** %628, align 8, !tbaa !19\n  %629 = getelementptr inbounds [1 x %\"class.std::__cxx11::basic_string\"], [1 x %\"class.std::__cxx11::basic_string\"]* %15, i64 0, i64 0, i32 0, i32 0\n  %630 = load i8*, i8** %629, align 8, !tbaa !12\n  %631 = getelementptr inbounds [1 x %\"class.std::__cxx11::basic_string\"], [1 x %\"class.std::__cxx11::basic_string\"]* %15, i64 0, i64 0, i32 2\n  %632 = bitcast %union.anon* %631 to i8*\n  %633 = icmp eq i8* %630, %632\n  br i1 %633, label %647, label %634\n\n634:                                              ; preds = %627\n  call void @_ZdlPv(i8* %630) #14\n  br label %647\n\n635:                                              ; preds = %608\n  %636 = landingpad { i8*, i32 }\n          cleanup\n  br label %645\n\n637:                                              ; preds = %615, %625\n  %638 = phi { i8*, i32 } [ %616, %615 ], [ %626, %625 ]\n  %639 = getelementptr inbounds [1 x %\"class.std::__cxx11::basic_string\"], [1 x %\"class.std::__cxx11::basic_string\"]* %15, i64 0, i64 0, i32 0, i32 0\n  %640 = load i8*, i8** %639, align 8, !tbaa !12\n  %641 = getelementptr inbounds [1 x %\"class.std::__cxx11::basic_string\"], [1 x %\"class.std::__cxx11::basic_string\"]* %15, i64 0, i64 0, i32 2\n  %642 = bitcast %union.anon* %641 to i8*\n  %643 = icmp eq i8* %640, %642\n  br i1 %643, label %645, label %644\n\n644:                                              ; preds = %637\n  call void @_ZdlPv(i8* %640) #14\n  br label %645\n\n645:                                              ; preds = %637, %644, %635\n  %646 = phi { i8*, i32 } [ %636, %635 ], [ %638, %644 ], [ %638, %637 ]\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %610) #14\n  br label %677\n\n647:                                              ; preds = %627, %634\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %610) #14\n  %648 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %10, i64 0, i32 0, i32 0, i32 0, i32 0\n  %649 = load %\"class.std::__cxx11::basic_string\"*, %\"class.std::__cxx11::basic_string\"** %648, align 16, !tbaa !38\n  %650 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %10, i64 0, i32 0, i32 0, i32 0, i32 1\n  %651 = load %\"class.std::__cxx11::basic_string\"*, %\"class.std::__cxx11::basic_string\"** %650, align 8, !tbaa !19\n  %652 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %10, i64 0, i32 0, i32 0, i32 0, i32 0\n  %653 = icmp eq %\"class.std::__cxx11::basic_string\"* %649, %651\n  br i1 %653, label %667, label %654\n\n654:                                              ; preds = %647, %662\n  %655 = phi %\"class.std::__cxx11::basic_string\"* [ %663, %662 ], [ %649, %647 ]\n  %656 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %655, i64 0, i32 0, i32 0\n  %657 = load i8*, i8** %656, align 8, !tbaa !12\n  %658 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %655, i64 0, i32 2\n  %659 = bitcast %union.anon* %658 to i8*\n  %660 = icmp eq i8* %657, %659\n  br i1 %660, label %662, label %661\n\n661:                                              ; preds = %654\n  call void @_ZdlPv(i8* %657) #14\n  br label %662\n\n662:                                              ; preds = %661, %654\n  %663 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %655, i64 1\n  %664 = icmp eq %\"class.std::__cxx11::basic_string\"* %663, %651\n  br i1 %664, label %665, label %654, !llvm.loop !39\n\n665:                                              ; preds = %662\n  %666 = load %\"class.std::__cxx11::basic_string\"*, %\"class.std::__cxx11::basic_string\"** %652, align 16, !tbaa !38\n  br label %667\n\n667:                                              ; preds = %665, %647\n  %668 = phi %\"class.std::__cxx11::basic_string\"* [ %666, %665 ], [ %651, %647 ]\n  %669 = icmp eq %\"class.std::__cxx11::basic_string\"* %668, null\n  br i1 %669, label %672, label %670\n\n670:                                              ; preds = %667\n  %671 = bitcast %\"class.std::__cxx11::basic_string\"* %668 to i8*\n  call void @_ZdlPv(i8* nonnull %671) #14\n  br label %672\n\n672:                                              ; preds = %588, %289, %667, %670\n  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %22) #14\n  %673 = load i8*, i8** %20, align 8, !tbaa !12\n  %674 = icmp eq i8* %673, %19\n  br i1 %674, label %676, label %675\n\n675:                                              ; preds = %672\n  call void @_ZdlPv(i8* %673) #14\n  br label %676\n\n676:                                              ; preds = %672, %675\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %16) #14\n  ret void\n\n677:                                              ; preds = %218, %220, %645, %582, %519, %283, %216\n  %678 = phi { i8*, i32 } [ %284, %283 ], [ %217, %216 ], [ %583, %582 ], [ %520, %519 ], [ %646, %645 ], [ %219, %218 ], [ %221, %220 ]\n  call void @_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED2Ev(%\"class.std::vector\"* nonnull align 8 dereferenceable(24) %10) #14\n  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %22) #14\n  %679 = load i8*, i8** %20, align 8, !tbaa !12\n  %680 = icmp eq i8* %679, %19\n  br i1 %680, label %682, label %681\n\n681:                                              ; preds = %677\n  call void @_ZdlPv(i8* %679) #14\n  br label %682\n\n682:                                              ; preds = %681, %677\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %16) #14\n  resume { i8*, i32 } %678\n}\n\n; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn\ndeclare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1\n\ndeclare dso_local i32 @__gxx_personality_v0(...)\n\n; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn\ndeclare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1\n\n; Function Attrs: argmemonly mustprogress nofree nounwind willreturn writeonly\ndeclare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2\n\n; Function Attrs: nounwind uwtable\ndefine linkonce_odr dso_local void @_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED2Ev(%\"class.std::vector\"* nonnull align 8 dereferenceable(24) %0) unnamed_addr #3 comdat align 2 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {\n  %2 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0, i64 0, i32 0, i32 0, i32 0, i32 0\n  %3 = load %\"class.std::__cxx11::basic_string\"*, %\"class.std::__cxx11::basic_string\"** %2, align 8, !tbaa !38\n  %4 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0, i64 0, i32 0, i32 0, i32 0, i32 1\n  %5 = load %\"class.std::__cxx11::basic_string\"*, %\"class.std::__cxx11::basic_string\"** %4, align 8, !tbaa !19\n  %6 = icmp eq %\"class.std::__cxx11::basic_string\"* %3, %5\n  br i1 %6, label %20, label %7\n\n7:                                                ; preds = %1, %15\n  %8 = phi %\"class.std::__cxx11::basic_string\"* [ %16, %15 ], [ %3, %1 ]\n  %9 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %8, i64 0, i32 0, i32 0\n  %10 = load i8*, i8** %9, align 8, !tbaa !12\n  %11 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %8, i64 0, i32 2\n  %12 = bitcast %union.anon* %11 to i8*\n  %13 = icmp eq i8* %10, %12\n  br i1 %13, label %15, label %14\n\n14:                                               ; preds = %7\n  tail call void @_ZdlPv(i8* %10) #14\n  br label %15\n\n15:                                               ; preds = %14, %7\n  %16 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %8, i64 1\n  %17 = icmp eq %\"class.std::__cxx11::basic_string\"* %16, %5\n  br i1 %17, label %18, label %7, !llvm.loop !39\n\n18:                                               ; preds = %15\n  %19 = load %\"class.std::__cxx11::basic_string\"*, %\"class.std::__cxx11::basic_string\"** %2, align 8, !tbaa !38\n  br label %20\n\n20:                                               ; preds = %18, %1\n  %21 = phi %\"class.std::__cxx11::basic_string\"* [ %19, %18 ], [ %3, %1 ]\n  %22 = icmp eq %\"class.std::__cxx11::basic_string\"* %21, null\n  br i1 %22, label %25, label %23\n\n23:                                               ; preds = %20\n  %24 = bitcast %\"class.std::__cxx11::basic_string\"* %21 to i8*\n  tail call void @_ZdlPv(i8* nonnull %24) #14\n  br label %25\n\n25:                                               ; preds = %20, %23\n  ret void\n}\n\n; Function Attrs: uwtable\ndefine linkonce_odr dso_local void @_ZN9__gnu_cxx12__to_xstringINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcEET_PFiPT0_mPKS8_P13__va_list_tagEmSB_z(%\"class.std::__cxx11::basic_string\"* noalias sret(%\"class.std::__cxx11::basic_string\") align 8 %0, i32 (i8*, i64, i8*, %struct.__va_list_tag*)* %1, i64 %2, i8* %3, ...) local_unnamed_addr #0 comdat personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {\n  %5 = alloca i64, align 8\n  %6 = alloca [1 x %struct.__va_list_tag], align 16\n  %7 = alloca i8, i64 %2, align 16\n  %8 = bitcast [1 x %struct.__va_list_tag]* %6 to i8*\n  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %8) #14\n  %9 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %6, i64 0, i64 0\n  call void @llvm.va_start(i8* nonnull %8)\n  %10 = call i32 %1(i8* nonnull %7, i64 %2, i8* %3, %struct.__va_list_tag* nonnull %9)\n  call void @llvm.va_end(i8* nonnull %8)\n  %11 = sext i32 %10 to i64\n  %12 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 2\n  %13 = bitcast %\"class.std::__cxx11::basic_string\"* %0 to %union.anon**\n  store %union.anon* %12, %union.anon** %13, align 8, !tbaa !3\n  %14 = bitcast %union.anon* %12 to i8*\n  %15 = bitcast i64* %5 to i8*\n  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %15) #14\n  store i64 %11, i64* %5, align 8, !tbaa !18\n  %16 = icmp ugt i32 %10, 15\n  br i1 %16, label %17, label %22\n\n17:                                               ; preds = %4\n  %18 = call i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %0, i64* nonnull align 8 dereferenceable(8) %5, i64 0)\n  %19 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 0, i32 0\n  store i8* %18, i8** %19, align 8, !tbaa !12\n  %20 = load i64, i64* %5, align 8, !tbaa !18\n  %21 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 2, i32 0\n  store i64 %20, i64* %21, align 8, !tbaa !11\n  br label %22\n\n22:                                               ; preds = %17, %4\n  %23 = phi i8* [ %18, %17 ], [ %14, %4 ]\n  switch i64 %11, label %26 [\n    i64 1, label %24\n    i64 0, label %27\n  ]\n\n24:                                               ; preds = %22\n  %25 = load i8, i8* %7, align 16, !tbaa !11\n  store i8 %25, i8* %23, align 1, !tbaa !11\n  br label %27\n\n26:                                               ; preds = %22\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %23, i8* nonnull align 16 %7, i64 %11, i1 false) #14\n  br label %27\n\n27:                                               ; preds = %26, %24, %22\n  %28 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 0, i32 0\n  %29 = load i64, i64* %5, align 8, !tbaa !18\n  %30 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 1\n  store i64 %29, i64* %30, align 8, !tbaa !8\n  %31 = load i8*, i8** %28, align 8, !tbaa !12\n  %32 = getelementptr inbounds i8, i8* %31, i64 %29\n  store i8 0, i8* %32, align 1, !tbaa !11\n  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %15) #14\n  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %8) #14\n  ret void\n}\n\n; Function Attrs: nofree nounwind\ndeclare dso_local noundef i32 @vsnprintf(i8* nocapture noundef, i64 noundef, i8* nocapture noundef readonly, %struct.__va_list_tag* noundef) #4\n\n; Function Attrs: mustprogress nofree nosync nounwind willreturn\ndeclare void @llvm.va_start(i8*) #5\n\n; Function Attrs: mustprogress nofree nosync nounwind willreturn\ndeclare void @llvm.va_end(i8*) #5\n\ndeclare dso_local i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32), i64* nonnull align 8 dereferenceable(8), i64) local_unnamed_addr #6\n\ndeclare dso_local i8* @__cxa_begin_catch(i8*) local_unnamed_addr\n\ndeclare dso_local void @__cxa_rethrow() local_unnamed_addr\n\ndeclare dso_local void @__cxa_end_catch() local_unnamed_addr\n\n; Function Attrs: noinline noreturn nounwind\ndefine linkonce_odr hidden void @__clang_call_terminate(i8* %0) local_unnamed_addr #7 comdat {\n  %2 = tail call i8* @__cxa_begin_catch(i8* %0) #14\n  tail call void @_ZSt9terminatev() #16\n  unreachable\n}\n\ndeclare dso_local void @_ZSt9terminatev() local_unnamed_addr\n\n; Function Attrs: argmemonly mustprogress nofree nounwind willreturn\ndeclare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #8\n\n; Function Attrs: nobuiltin nounwind\ndeclare dso_local void @_ZdlPv(i8*) local_unnamed_addr #9\n\ndeclare dso_local nonnull align 8 dereferenceable(32) %\"class.std::__cxx11::basic_string\"* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEmmmc(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32), i64, i64, i64, i8 signext) local_unnamed_addr #6\n\n; Function Attrs: uwtable\ndefine linkonce_odr dso_local void @_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_realloc_insertIJRKS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_(%\"class.std::vector\"* nonnull align 8 dereferenceable(24) %0, %\"class.std::__cxx11::basic_string\"* %1, %\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %2) local_unnamed_addr #0 comdat align 2 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {\n  %4 = alloca i64, align 8\n  %5 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0, i64 0, i32 0, i32 0, i32 0, i32 1\n  %6 = load %\"class.std::__cxx11::basic_string\"*, %\"class.std::__cxx11::basic_string\"** %5, align 8, !tbaa !19\n  %7 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0, i64 0, i32 0, i32 0, i32 0, i32 0\n  %8 = load %\"class.std::__cxx11::basic_string\"*, %\"class.std::__cxx11::basic_string\"** %7, align 8, !tbaa !38\n  %9 = ptrtoint %\"class.std::__cxx11::basic_string\"* %6 to i64\n  %10 = ptrtoint %\"class.std::__cxx11::basic_string\"* %8 to i64\n  %11 = sub i64 %9, %10\n  %12 = ashr exact i64 %11, 5\n  %13 = icmp eq i64 %11, 9223372036854775776\n  br i1 %13, label %14, label %15\n\n14:                                               ; preds = %3\n  tail call void @_ZSt20__throw_length_errorPKc(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.3, i64 0, i64 0)) #17\n  unreachable\n\n15:                                               ; preds = %3\n  %16 = icmp eq i64 %11, 0\n  %17 = select i1 %16, i64 1, i64 %12\n  %18 = add nsw i64 %17, %12\n  %19 = icmp ult i64 %18, %12\n  %20 = icmp ugt i64 %18, 288230376151711743\n  %21 = or i1 %19, %20\n  %22 = select i1 %21, i64 288230376151711743, i64 %18\n  %23 = ptrtoint %\"class.std::__cxx11::basic_string\"* %1 to i64\n  %24 = sub i64 %23, %10\n  %25 = ashr exact i64 %24, 5\n  %26 = icmp eq i64 %22, 0\n  br i1 %26, label %31, label %27\n\n27:                                               ; preds = %15\n  %28 = shl nuw nsw i64 %22, 5\n  %29 = tail call noalias nonnull i8* @_Znwm(i64 %28) #15\n  %30 = bitcast i8* %29 to %\"class.std::__cxx11::basic_string\"*\n  br label %31\n\n31:                                               ; preds = %15, %27\n  %32 = phi %\"class.std::__cxx11::basic_string\"* [ %30, %27 ], [ null, %15 ]\n  %33 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %32, i64 %25\n  %34 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %32, i64 %25, i32 2\n  %35 = bitcast %\"class.std::__cxx11::basic_string\"* %33 to %union.anon**\n  store %union.anon* %34, %union.anon** %35, align 8, !tbaa !3\n  %36 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %2, i64 0, i32 0, i32 0\n  %37 = load i8*, i8** %36, align 8, !tbaa !12\n  %38 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %2, i64 0, i32 1\n  %39 = load i64, i64* %38, align 8, !tbaa !8\n  %40 = bitcast i64* %4 to i8*\n  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %40) #14\n  store i64 %39, i64* %4, align 8, !tbaa !18\n  %41 = icmp ugt i64 %39, 15\n  br i1 %41, label %44, label %42\n\n42:                                               ; preds = %31\n  %43 = bitcast %union.anon* %34 to i8*\n  br label %50\n\n44:                                               ; preds = %31\n  %45 = invoke i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %33, i64* nonnull align 8 dereferenceable(8) %4, i64 0)\n          to label %46 unwind label %126\n\n46:                                               ; preds = %44\n  %47 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %33, i64 0, i32 0, i32 0\n  store i8* %45, i8** %47, align 8, !tbaa !12\n  %48 = load i64, i64* %4, align 8, !tbaa !18\n  %49 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %32, i64 %25, i32 2, i32 0\n  store i64 %48, i64* %49, align 8, !tbaa !11\n  br label %50\n\n50:                                               ; preds = %46, %42\n  %51 = phi i8* [ %43, %42 ], [ %45, %46 ]\n  switch i64 %39, label %54 [\n    i64 1, label %52\n    i64 0, label %55\n  ]\n\n52:                                               ; preds = %50\n  %53 = load i8, i8* %37, align 1, !tbaa !11\n  store i8 %53, i8* %51, align 1, !tbaa !11\n  br label %55\n\n54:                                               ; preds = %50\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %51, i8* align 1 %37, i64 %39, i1 false) #14\n  br label %55\n\n55:                                               ; preds = %54, %52, %50\n  %56 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %33, i64 0, i32 0, i32 0\n  %57 = load i64, i64* %4, align 8, !tbaa !18\n  %58 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %32, i64 %25, i32 1\n  store i64 %57, i64* %58, align 8, !tbaa !8\n  %59 = load i8*, i8** %56, align 8, !tbaa !12\n  %60 = getelementptr inbounds i8, i8* %59, i64 %57\n  store i8 0, i8* %60, align 1, !tbaa !11\n  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %40) #14\n  %61 = icmp eq %\"class.std::__cxx11::basic_string\"* %8, %1\n  br i1 %61, label %87, label %62\n\n62:                                               ; preds = %55, %79\n  %63 = phi %\"class.std::__cxx11::basic_string\"* [ %85, %79 ], [ %32, %55 ]\n  %64 = phi %\"class.std::__cxx11::basic_string\"* [ %84, %79 ], [ %8, %55 ]\n  %65 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %63, i64 0, i32 2\n  %66 = bitcast %\"class.std::__cxx11::basic_string\"* %63 to %union.anon**\n  store %union.anon* %65, %union.anon** %66, align 8, !tbaa !3\n  %67 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %64, i64 0, i32 0, i32 0\n  %68 = load i8*, i8** %67, align 8, !tbaa !12\n  %69 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %64, i64 0, i32 2\n  %70 = bitcast %union.anon* %69 to i8*\n  %71 = icmp eq i8* %68, %70\n  br i1 %71, label %72, label %74\n\n72:                                               ; preds = %62\n  %73 = bitcast %union.anon* %65 to i8*\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(16) %73, i8* noundef nonnull align 8 dereferenceable(16) %68, i64 16, i1 false) #14\n  br label %79\n\n74:                                               ; preds = %62\n  %75 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %63, i64 0, i32 0, i32 0\n  store i8* %68, i8** %75, align 8, !tbaa !12\n  %76 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %64, i64 0, i32 2, i32 0\n  %77 = load i64, i64* %76, align 8, !tbaa !11\n  %78 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %63, i64 0, i32 2, i32 0\n  store i64 %77, i64* %78, align 8, !tbaa !11\n  br label %79\n\n79:                                               ; preds = %74, %72\n  %80 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %64, i64 0, i32 1\n  %81 = load i64, i64* %80, align 8, !tbaa !8\n  %82 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %63, i64 0, i32 1\n  store i64 %81, i64* %82, align 8, !tbaa !8\n  %83 = bitcast %\"class.std::__cxx11::basic_string\"* %64 to %union.anon**\n  store %union.anon* %69, %union.anon** %83, align 8, !tbaa !12\n  store i64 0, i64* %80, align 8, !tbaa !8\n  store i8 0, i8* %70, align 8, !tbaa !11\n  %84 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %64, i64 1\n  %85 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %63, i64 1\n  %86 = icmp eq %\"class.std::__cxx11::basic_string\"* %84, %1\n  br i1 %86, label %87, label %62, !llvm.loop !40\n\n87:                                               ; preds = %79, %55\n  %88 = phi %\"class.std::__cxx11::basic_string\"* [ %32, %55 ], [ %85, %79 ]\n  %89 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %88, i64 1\n  %90 = icmp eq %\"class.std::__cxx11::basic_string\"* %6, %1\n  br i1 %90, label %116, label %91\n\n91:                                               ; preds = %87, %108\n  %92 = phi %\"class.std::__cxx11::basic_string\"* [ %114, %108 ], [ %89, %87 ]\n  %93 = phi %\"class.std::__cxx11::basic_string\"* [ %113, %108 ], [ %1, %87 ]\n  %94 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %92, i64 0, i32 2\n  %95 = bitcast %\"class.std::__cxx11::basic_string\"* %92 to %union.anon**\n  store %union.anon* %94, %union.anon** %95, align 8, !tbaa !3\n  %96 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %93, i64 0, i32 0, i32 0\n  %97 = load i8*, i8** %96, align 8, !tbaa !12\n  %98 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %93, i64 0, i32 2\n  %99 = bitcast %union.anon* %98 to i8*\n  %100 = icmp eq i8* %97, %99\n  br i1 %100, label %101, label %103\n\n101:                                              ; preds = %91\n  %102 = bitcast %union.anon* %94 to i8*\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(16) %102, i8* noundef nonnull align 8 dereferenceable(16) %97, i64 16, i1 false) #14\n  br label %108\n\n103:                                              ; preds = %91\n  %104 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %92, i64 0, i32 0, i32 0\n  store i8* %97, i8** %104, align 8, !tbaa !12\n  %105 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %93, i64 0, i32 2, i32 0\n  %106 = load i64, i64* %105, align 8, !tbaa !11\n  %107 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %92, i64 0, i32 2, i32 0\n  store i64 %106, i64* %107, align 8, !tbaa !11\n  br label %108\n\n108:                                              ; preds = %103, %101\n  %109 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %93, i64 0, i32 1\n  %110 = load i64, i64* %109, align 8, !tbaa !8\n  %111 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %92, i64 0, i32 1\n  store i64 %110, i64* %111, align 8, !tbaa !8\n  %112 = bitcast %\"class.std::__cxx11::basic_string\"* %93 to %union.anon**\n  store %union.anon* %98, %union.anon** %112, align 8, !tbaa !12\n  store i64 0, i64* %109, align 8, !tbaa !8\n  store i8 0, i8* %99, align 8, !tbaa !11\n  %113 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %93, i64 1\n  %114 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %92, i64 1\n  %115 = icmp eq %\"class.std::__cxx11::basic_string\"* %113, %6\n  br i1 %115, label %116, label %91, !llvm.loop !40\n\n116:                                              ; preds = %108, %87\n  %117 = phi %\"class.std::__cxx11::basic_string\"* [ %89, %87 ], [ %114, %108 ]\n  %118 = icmp eq %\"class.std::__cxx11::basic_string\"* %8, null\n  br i1 %118, label %121, label %119\n\n119:                                              ; preds = %116\n  %120 = bitcast %\"class.std::__cxx11::basic_string\"* %8 to i8*\n  call void @_ZdlPv(i8* nonnull %120) #14\n  br label %121\n\n121:                                              ; preds = %116, %119\n  %122 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0, i64 0, i32 0, i32 0, i32 0, i32 2\n  store %\"class.std::__cxx11::basic_string\"* %32, %\"class.std::__cxx11::basic_string\"** %7, align 8, !tbaa !38\n  store %\"class.std::__cxx11::basic_string\"* %117, %\"class.std::__cxx11::basic_string\"** %5, align 8, !tbaa !19\n  %123 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %32, i64 %22\n  store %\"class.std::__cxx11::basic_string\"* %123, %\"class.std::__cxx11::basic_string\"** %122, align 8, !tbaa !21\n  ret void\n\n124:                                              ; preds = %126\n  %125 = landingpad { i8*, i32 }\n          cleanup\n  invoke void @__cxa_end_catch()\n          to label %131 unwind label %132\n\n126:                                              ; preds = %44\n  %127 = landingpad { i8*, i32 }\n          catch i8* null\n  %128 = extractvalue { i8*, i32 } %127, 0\n  %129 = call i8* @__cxa_begin_catch(i8* %128) #14\n  %130 = bitcast %\"class.std::__cxx11::basic_string\"* %32 to i8*\n  call void @_ZdlPv(i8* nonnull %130) #14\n  invoke void @__cxa_rethrow() #17\n          to label %135 unwind label %124\n\n131:                                              ; preds = %124\n  resume { i8*, i32 } %125\n\n132:                                              ; preds = %124\n  %133 = landingpad { i8*, i32 }\n          catch i8* null\n  %134 = extractvalue { i8*, i32 } %133, 0\n  call void @__clang_call_terminate(i8* %134) #16\n  unreachable\n\n135:                                              ; preds = %126\n  unreachable\n}\n\n; Function Attrs: noreturn\ndeclare dso_local void @_ZSt20__throw_length_errorPKc(i8*) local_unnamed_addr #10\n\n; Function Attrs: nobuiltin allocsize(0)\ndeclare dso_local nonnull i8* @_Znwm(i64) local_unnamed_addr #11\n\ndeclare dso_local nonnull align 8 dereferenceable(32) %\"class.std::__cxx11::basic_string\"* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32), i64, i64, i8*, i64) local_unnamed_addr #6\n\n; Function Attrs: uwtable\ndefine linkonce_odr dso_local %\"class.std::__cxx11::basic_string\"* @_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPS7_EET0_T_SC_SB_(%\"class.std::__cxx11::basic_string\"* %0, %\"class.std::__cxx11::basic_string\"* %1, %\"class.std::__cxx11::basic_string\"* %2) local_unnamed_addr #0 comdat align 2 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {\n  %4 = alloca i64, align 8\n  %5 = bitcast i64* %4 to i8*\n  %6 = icmp eq %\"class.std::__cxx11::basic_string\"* %0, %1\n  br i1 %6, label %56, label %7\n\n7:                                                ; preds = %3, %30\n  %8 = phi %\"class.std::__cxx11::basic_string\"* [ %37, %30 ], [ %2, %3 ]\n  %9 = phi %\"class.std::__cxx11::basic_string\"* [ %36, %30 ], [ %0, %3 ]\n  %10 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %8, i64 0, i32 2\n  %11 = bitcast %\"class.std::__cxx11::basic_string\"* %8 to %union.anon**\n  store %union.anon* %10, %union.anon** %11, align 8, !tbaa !3\n  %12 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %9, i64 0, i32 0, i32 0\n  %13 = load i8*, i8** %12, align 8, !tbaa !12\n  %14 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %9, i64 0, i32 1\n  %15 = load i64, i64* %14, align 8, !tbaa !8\n  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #14\n  store i64 %15, i64* %4, align 8, !tbaa !18\n  %16 = icmp ugt i64 %15, 15\n  br i1 %16, label %19, label %17\n\n17:                                               ; preds = %7\n  %18 = bitcast %union.anon* %10 to i8*\n  br label %25\n\n19:                                               ; preds = %7\n  %20 = invoke i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %8, i64* nonnull align 8 dereferenceable(8) %4, i64 0)\n          to label %21 unwind label %39\n\n21:                                               ; preds = %19\n  %22 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %8, i64 0, i32 0, i32 0\n  store i8* %20, i8** %22, align 8, !tbaa !12\n  %23 = load i64, i64* %4, align 8, !tbaa !18\n  %24 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %8, i64 0, i32 2, i32 0\n  store i64 %23, i64* %24, align 8, !tbaa !11\n  br label %25\n\n25:                                               ; preds = %21, %17\n  %26 = phi i8* [ %18, %17 ], [ %20, %21 ]\n  switch i64 %15, label %29 [\n    i64 1, label %27\n    i64 0, label %30\n  ]\n\n27:                                               ; preds = %25\n  %28 = load i8, i8* %13, align 1, !tbaa !11\n  store i8 %28, i8* %26, align 1, !tbaa !11\n  br label %30\n\n29:                                               ; preds = %25\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %26, i8* align 1 %13, i64 %15, i1 false) #14\n  br label %30\n\n30:                                               ; preds = %29, %27, %25\n  %31 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %8, i64 0, i32 0, i32 0\n  %32 = load i64, i64* %4, align 8, !tbaa !18\n  %33 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %8, i64 0, i32 1\n  store i64 %32, i64* %33, align 8, !tbaa !8\n  %34 = load i8*, i8** %31, align 8, !tbaa !12\n  %35 = getelementptr inbounds i8, i8* %34, i64 %32\n  store i8 0, i8* %35, align 1, !tbaa !11\n  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5) #14\n  %36 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %9, i64 1\n  %37 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %8, i64 1\n  %38 = icmp eq %\"class.std::__cxx11::basic_string\"* %36, %1\n  br i1 %38, label %56, label %7, !llvm.loop !41\n\n39:                                               ; preds = %19\n  %40 = landingpad { i8*, i32 }\n          catch i8* null\n  %41 = extractvalue { i8*, i32 } %40, 0\n  %42 = call i8* @__cxa_begin_catch(i8* %41) #14\n  %43 = icmp eq %\"class.std::__cxx11::basic_string\"* %8, %2\n  br i1 %43, label %55, label %44\n\n44:                                               ; preds = %39, %52\n  %45 = phi %\"class.std::__cxx11::basic_string\"* [ %53, %52 ], [ %2, %39 ]\n  %46 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %45, i64 0, i32 0, i32 0\n  %47 = load i8*, i8** %46, align 8, !tbaa !12\n  %48 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %45, i64 0, i32 2\n  %49 = bitcast %union.anon* %48 to i8*\n  %50 = icmp eq i8* %47, %49\n  br i1 %50, label %52, label %51\n\n51:                                               ; preds = %44\n  call void @_ZdlPv(i8* %47) #14\n  br label %52\n\n52:                                               ; preds = %51, %44\n  %53 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %45, i64 1\n  %54 = icmp eq %\"class.std::__cxx11::basic_string\"* %53, %8\n  br i1 %54, label %55, label %44, !llvm.loop !39\n\n55:                                               ; preds = %52, %39\n  invoke void @__cxa_rethrow() #17\n          to label %64 unwind label %58\n\n56:                                               ; preds = %30, %3\n  %57 = phi %\"class.std::__cxx11::basic_string\"* [ %2, %3 ], [ %37, %30 ]\n  ret %\"class.std::__cxx11::basic_string\"* %57\n\n58:                                               ; preds = %55\n  %59 = landingpad { i8*, i32 }\n          cleanup\n  invoke void @__cxa_end_catch()\n          to label %60 unwind label %61\n\n60:                                               ; preds = %58\n  resume { i8*, i32 } %59\n\n61:                                               ; preds = %58\n  %62 = landingpad { i8*, i32 }\n          catch i8* null\n  %63 = extractvalue { i8*, i32 } %62, 0\n  call void @__clang_call_terminate(i8* %63) #16\n  unreachable\n\n64:                                               ; preds = %55\n  unreachable\n}\n\n; Function Attrs: inaccessiblememonly nofree nosync nounwind willreturn\ndeclare void @llvm.experimental.noalias.scope.decl(metadata) #12\n\n; Function Attrs: nofree nosync nounwind readnone willreturn\ndeclare i32 @llvm.vector.reduce.add.v4i32(<4 x i32>) #13\n\nattributes #0 = { uwtable \"frame-pointer\"=\"none\" \"min-legal-vector-width\"=\"0\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #1 = { argmemonly mustprogress nofree nosync nounwind willreturn }\nattributes #2 = { argmemonly mustprogress nofree nounwind willreturn writeonly }\nattributes #3 = { nounwind uwtable \"frame-pointer\"=\"none\" \"min-legal-vector-width\"=\"0\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #4 = { nofree nounwind \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #5 = { mustprogress nofree nosync nounwind willreturn }\nattributes #6 = { \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #7 = { noinline noreturn nounwind }\nattributes #8 = { argmemonly mustprogress nofree nounwind willreturn }\nattributes #9 = { nobuiltin nounwind \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #10 = { noreturn \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #11 = { nobuiltin allocsize(0) \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #12 = { inaccessiblememonly nofree nosync nounwind willreturn }\nattributes #13 = { nofree nosync nounwind readnone willreturn }\nattributes #14 = { nounwind }\nattributes #15 = { allocsize(0) }\nattributes #16 = { noreturn nounwind }\nattributes #17 = { noreturn }\n\n!llvm.module.flags = !{!0, !1}\n!llvm.ident = !{!2}\n\n!0 = !{i32 1, !\"wchar_size\", i32 4}\n!1 = !{i32 7, !\"uwtable\", i32 1}\n!2 = !{!\"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)\"}\n!3 = !{!4, !5, i64 0}\n!4 = !{!\"_ZTSNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderE\", !5, i64 0}\n!5 = !{!\"any pointer\", !6, i64 0}\n!6 = !{!\"omnipotent char\", !7, i64 0}\n!7 = !{!\"Simple C++ TBAA\"}\n!8 = !{!9, !10, i64 8}\n!9 = !{!\"_ZTSNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE\", !4, i64 0, !10, i64 8, !6, i64 16}\n!10 = !{!\"long\", !6, i64 0}\n!11 = !{!6, !6, i64 0}\n!12 = !{!9, !5, i64 0}\n!13 = distinct !{!13, !14}\n!14 = !{!\"llvm.loop.mustprogress\"}\n!15 = !{!16}\n!16 = distinct !{!16, !17, !\"_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_S5_: argument 0\"}\n!17 = distinct !{!17, !\"_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_S5_\"}\n!18 = !{!10, !10, i64 0}\n!19 = !{!20, !5, i64 8}\n!20 = !{!\"_ZTSNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_Vector_impl_dataE\", !5, i64 0, !5, i64 8, !5, i64 16}\n!21 = !{!20, !5, i64 16}\n!22 = !{!23}\n!23 = distinct !{!23, !24, !\"_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_S5_: argument 0\"}\n!24 = distinct !{!24, !\"_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_S5_\"}\n!25 = distinct !{!25, !14}\n!26 = !{!5, !5, i64 0}\n!27 = distinct !{!27, !14, !28}\n!28 = !{!\"llvm.loop.isvectorized\", i32 1}\n!29 = !{!30}\n!30 = distinct !{!30, !31, !\"_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_S5_: argument 0\"}\n!31 = distinct !{!31, !\"_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_S5_\"}\n!32 = !{!33}\n!33 = distinct !{!33, !34, !\"_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_S5_: argument 0\"}\n!34 = distinct !{!34, !\"_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_S5_\"}\n!35 = distinct !{!35, !14}\n!36 = distinct !{!36, !14, !37, !28}\n!37 = !{!\"llvm.loop.unroll.runtime.disable\"}\n!38 = !{!20, !5, i64 0}\n!39 = distinct !{!39, !14}\n!40 = distinct !{!40, !14}\n!41 = distinct !{!41, !14}\n", "target": "This is the targeted source code:\n/*\nGiven a string of words, return a vector of words split on whitespace, if no whitespaces exists in the text you\nshould split on commas ',' if no commas exists you should return a vector with one element, the number of lower-case letters with odd order in the\nalphabet, ord(\"a\") = 0, ord(\"b\") = 1, ... ord(\"z\") = 25\nExamples\nsplit_words(\"Hello world!\") \u279e {\"Hello\", \"world!\"}\nsplit_words(\"Hello,world!\") \u279e {\"Hello\", \"world!\"}\nsplit_words(\"abcdef\") == {\"3\"} \n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\nvector<string> split_words(string txt){\n\n    int i;\n    string current=\"\";\n    vector<string> out={};\n    if (find(txt.begin(),txt.end(),' ')!=txt.end())\n    {\n        txt=txt+' ';\n        for (i=0;i<txt.length();i++)\n            if (txt[i]==' ') \n            {\n                if (current.length()>0)out.push_back(current); \n                current=\"\";\n            }\n            else current=current+txt[i];\n        return out;\n    }\n    if (find(txt.begin(),txt.end(),',')!=txt.end())\n    {\n        txt=txt+',';\n        for (i=0;i<txt.length();i++)\n            if (txt[i]==',') \n            {\n                if (current.length()>0)out.push_back(current); \n                current=\"\";\n            }\n            else current=current+txt[i];\n        return out;\n    }\n    int num=0;\n    for (i=0;i<txt.length();i++)\n        if (txt[i]>=97 and txt[i]<=122 and txt[i]%2==0)\n            num+=1;\n    return {to_string(num)};\n}\n"}
{"input": "Convert this to C++:\n; ModuleID = '../../Human_xBenchmarks_164/CPP_126/CPP_126.cpp'\nsource_filename = \"../../Human_xBenchmarks_164/CPP_126/CPP_126.cpp\"\ntarget datalayout = \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\ntarget triple = \"x86_64-unknown-linux-gnu\"\n\n%\"class.std::vector\" = type { %\"struct.std::_Vector_base\" }\n%\"struct.std::_Vector_base\" = type { %\"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl\" }\n%\"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl\" = type { %\"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl_data\" }\n%\"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl_data\" = type { i32*, i32*, i32* }\n\n; Function Attrs: mustprogress nofree norecurse nosync nounwind readonly uwtable willreturn\ndefine dso_local zeroext i1 @_Z9is_sortedSt6vectorIiSaIiEE(%\"class.std::vector\"* nocapture readonly %0) local_unnamed_addr #0 {\n  %2 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0, i64 0, i32 0, i32 0, i32 0, i32 1\n  %3 = load i32*, i32** %2, align 8, !tbaa !3\n  %4 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0, i64 0, i32 0, i32 0, i32 0, i32 0\n  %5 = load i32*, i32** %4, align 8, !tbaa !8\n  %6 = ptrtoint i32* %3 to i64\n  %7 = ptrtoint i32* %5 to i64\n  %8 = sub i64 %6, %7\n  %9 = ashr exact i64 %8, 2\n  %10 = icmp ugt i64 %9, 1\n  br i1 %10, label %11, label %32\n\n11:                                               ; preds = %1\n  %12 = load i32, i32* %5, align 4, !tbaa !9\n  br label %13\n\n13:                                               ; preds = %11, %29\n  %14 = phi i32 [ %12, %11 ], [ %17, %29 ]\n  %15 = phi i64 [ 1, %11 ], [ %30, %29 ]\n  %16 = getelementptr inbounds i32, i32* %5, i64 %15\n  %17 = load i32, i32* %16, align 4, !tbaa !9\n  %18 = icmp slt i32 %17, %14\n  br i1 %18, label %32, label %19\n\n19:                                               ; preds = %13\n  %20 = icmp ugt i64 %15, 1\n  %21 = icmp eq i32 %17, %14\n  %22 = select i1 %20, i1 %21, i1 false\n  br i1 %22, label %23, label %29\n\n23:                                               ; preds = %19\n  %24 = add i64 %15, 4294967294\n  %25 = and i64 %24, 4294967295\n  %26 = getelementptr inbounds i32, i32* %5, i64 %25\n  %27 = load i32, i32* %26, align 4, !tbaa !9\n  %28 = icmp eq i32 %14, %27\n  br i1 %28, label %32, label %29\n\n29:                                               ; preds = %19, %23\n  %30 = add nuw i64 %15, 1\n  %31 = icmp eq i64 %30, %9\n  br i1 %31, label %32, label %13, !llvm.loop !11\n\n32:                                               ; preds = %29, %13, %23, %1\n  %33 = phi i1 [ true, %1 ], [ false, %23 ], [ false, %13 ], [ true, %29 ]\n  ret i1 %33\n}\n\nattributes #0 = { mustprogress nofree norecurse nosync nounwind readonly uwtable willreturn \"frame-pointer\"=\"none\" \"min-legal-vector-width\"=\"0\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\n\n!llvm.module.flags = !{!0, !1}\n!llvm.ident = !{!2}\n\n!0 = !{i32 1, !\"wchar_size\", i32 4}\n!1 = !{i32 7, !\"uwtable\", i32 1}\n!2 = !{!\"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)\"}\n!3 = !{!4, !5, i64 8}\n!4 = !{!\"_ZTSNSt12_Vector_baseIiSaIiEE17_Vector_impl_dataE\", !5, i64 0, !5, i64 8, !5, i64 16}\n!5 = !{!\"any pointer\", !6, i64 0}\n!6 = !{!\"omnipotent char\", !7, i64 0}\n!7 = !{!\"Simple C++ TBAA\"}\n!8 = !{!4, !5, i64 0}\n!9 = !{!10, !10, i64 0}\n!10 = !{!\"int\", !6, i64 0}\n!11 = distinct !{!11, !12}\n!12 = !{!\"llvm.loop.mustprogress\"}\n", "target": "This is the targeted source code:\n/*\nGiven a vector of numbers, return whether or not they are sorted\nin ascending order. If vector has more than 1 duplicate of the same\nnumber, return false. Assume no negative numbers and only integers.\n\nExamples\nis_sorted({5}) \u279e true\nis_sorted({1, 2, 3, 4, 5}) \u279e true\nis_sorted({1, 3, 2, 4, 5}) \u279e false\nis_sorted({1, 2, 3, 4, 5, 6}) \u279e true\nis_sorted({1, 2, 3, 4, 5, 6, 7}) \u279e true\nis_sorted({1, 3, 2, 4, 5, 6, 7}) \u279e false\nis_sorted({1, 2, 2, 3, 3, 4}) \u279e true\nis_sorted({1, 2, 2, 2, 3, 4}) \u279e false\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nbool is_sorted(vector<int> lst){\n\n    for (int i=1;i<lst.size();i++)\n    {\n        if (lst[i]<lst[i-1]) return false;\n        if (i>=2 and lst[i]==lst[i-1] and lst[i]==lst[i-2]) return false;\n    }\n    return true;\n}\n"}
{"input": "Convert this to C++:\n; ModuleID = '../../Human_xBenchmarks_164/CPP_127/CPP_127.cpp'\nsource_filename = \"../../Human_xBenchmarks_164/CPP_127/CPP_127.cpp\"\ntarget datalayout = \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\ntarget triple = \"x86_64-unknown-linux-gnu\"\n\n%\"class.std::__cxx11::basic_string\" = type { %\"struct.std::__cxx11::basic_string<char>::_Alloc_hider\", i64, %union.anon }\n%\"struct.std::__cxx11::basic_string<char>::_Alloc_hider\" = type { i8* }\n%union.anon = type { i64, [8 x i8] }\n%\"class.std::vector\" = type { %\"struct.std::_Vector_base\" }\n%\"struct.std::_Vector_base\" = type { %\"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl\" }\n%\"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl\" = type { %\"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl_data\" }\n%\"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl_data\" = type { i32*, i32*, i32* }\n\n@.str.1 = private unnamed_addr constant [4 x i8] c\"YES\\00\", align 1\n\n; Function Attrs: uwtable\ndefine dso_local void @_Z12intersectionB5cxx11St6vectorIiSaIiEES1_(%\"class.std::__cxx11::basic_string\"* noalias sret(%\"class.std::__cxx11::basic_string\") align 8 %0, %\"class.std::vector\"* nocapture readonly %1, %\"class.std::vector\"* nocapture readonly %2) local_unnamed_addr #0 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {\n  %4 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %1, i64 0, i32 0, i32 0, i32 0, i32 0\n  %5 = load i32*, i32** %4, align 8, !tbaa !3\n  %6 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %2, i64 0, i32 0, i32 0, i32 0, i32 0\n  %7 = load i32*, i32** %6, align 8, !tbaa !3\n  %8 = load i32, i32* %5, align 4\n  %9 = load i32, i32* %7, align 4\n  %10 = icmp slt i32 %8, %9\n  %11 = select i1 %10, i32 %9, i32 %8\n  %12 = getelementptr inbounds i32, i32* %5, i64 1\n  %13 = getelementptr inbounds i32, i32* %7, i64 1\n  %14 = load i32, i32* %13, align 4\n  %15 = load i32, i32* %12, align 4\n  %16 = icmp slt i32 %14, %15\n  %17 = select i1 %16, i32 %14, i32 %15\n  %18 = sub nsw i32 %17, %11\n  %19 = icmp slt i32 %18, 2\n  br i1 %19, label %22, label %20\n\n20:                                               ; preds = %3\n  %21 = icmp slt i32 %18, 4\n  br i1 %21, label %44, label %32\n\n22:                                               ; preds = %3\n  %23 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 2\n  %24 = bitcast %\"class.std::__cxx11::basic_string\"* %0 to %union.anon**\n  store %union.anon* %23, %union.anon** %24, align 8, !tbaa !8\n  %25 = bitcast %union.anon* %23 to i16*\n  store i16 20302, i16* %25, align 8\n  %26 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 1\n  store i64 2, i64* %26, align 8, !tbaa !10\n  %27 = bitcast %union.anon* %23 to i8*\n  %28 = getelementptr inbounds i8, i8* %27, i64 2\n  store i8 0, i8* %28, align 2, !tbaa !13\n  br label %50\n\n29:                                               ; preds = %32\n  %30 = mul nsw i32 %36, %36\n  %31 = icmp sgt i32 %30, %18\n  br i1 %31, label %44, label %32, !llvm.loop !14\n\n32:                                               ; preds = %20, %29\n  %33 = phi i32 [ %36, %29 ], [ 2, %20 ]\n  %34 = srem i32 %18, %33\n  %35 = icmp eq i32 %34, 0\n  %36 = add nuw nsw i32 %33, 1\n  br i1 %35, label %37, label %29\n\n37:                                               ; preds = %32\n  %38 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 2\n  %39 = bitcast %\"class.std::__cxx11::basic_string\"* %0 to %union.anon**\n  store %union.anon* %38, %union.anon** %39, align 8, !tbaa !8\n  %40 = bitcast %union.anon* %38 to i16*\n  store i16 20302, i16* %40, align 8\n  %41 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 1\n  store i64 2, i64* %41, align 8, !tbaa !10\n  %42 = bitcast %union.anon* %38 to i8*\n  %43 = getelementptr inbounds i8, i8* %42, i64 2\n  store i8 0, i8* %43, align 2, !tbaa !13\n  br label %50\n\n44:                                               ; preds = %29, %20\n  %45 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 2\n  %46 = bitcast %\"class.std::__cxx11::basic_string\"* %0 to %union.anon**\n  store %union.anon* %45, %union.anon** %46, align 8, !tbaa !8\n  %47 = bitcast %union.anon* %45 to i8*\n  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(3) %47, i8* noundef nonnull align 1 dereferenceable(3) getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i64 0, i64 0), i64 3, i1 false) #2\n  %48 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 1\n  store i64 3, i64* %48, align 8, !tbaa !10\n  %49 = getelementptr inbounds i8, i8* %47, i64 3\n  store i8 0, i8* %49, align 1, !tbaa !13\n  br label %50\n\n50:                                               ; preds = %44, %37, %22\n  ret void\n}\n\ndeclare dso_local i32 @__gxx_personality_v0(...)\n\n; Function Attrs: argmemonly mustprogress nofree nounwind willreturn\ndeclare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #1\n\nattributes #0 = { uwtable \"frame-pointer\"=\"none\" \"min-legal-vector-width\"=\"0\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #1 = { argmemonly mustprogress nofree nounwind willreturn }\nattributes #2 = { nounwind }\n\n!llvm.module.flags = !{!0, !1}\n!llvm.ident = !{!2}\n\n!0 = !{i32 1, !\"wchar_size\", i32 4}\n!1 = !{i32 7, !\"uwtable\", i32 1}\n!2 = !{!\"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)\"}\n!3 = !{!4, !5, i64 0}\n!4 = !{!\"_ZTSNSt12_Vector_baseIiSaIiEE17_Vector_impl_dataE\", !5, i64 0, !5, i64 8, !5, i64 16}\n!5 = !{!\"any pointer\", !6, i64 0}\n!6 = !{!\"omnipotent char\", !7, i64 0}\n!7 = !{!\"Simple C++ TBAA\"}\n!8 = !{!9, !5, i64 0}\n!9 = !{!\"_ZTSNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderE\", !5, i64 0}\n!10 = !{!11, !12, i64 8}\n!11 = !{!\"_ZTSNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE\", !9, i64 0, !12, i64 8, !6, i64 16}\n!12 = !{!\"long\", !6, i64 0}\n!13 = !{!6, !6, i64 0}\n!14 = distinct !{!14, !15}\n!15 = !{!\"llvm.loop.mustprogress\"}\n", "target": "This is the targeted source code:\n/*\nYou are given two intervals,\nwhere each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\nThe given intervals are closed which means that the interval (start, end)\nincludes both start and end.\nFor each given interval, it is assumed that its start is less or equal its end.\nYour task is to determine whether the length of intersection of these two \nintervals is a prime number.\nExample, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\nwhich its length is 1, which not a prime number.\nIf the length of the intersection is a prime number, return \"YES\",\notherwise, return \"NO\".\nIf the two intervals don't intersect, return \"NO\".\n\n\n{input/output} samples:\nintersection({1, 2}, {2, 3}) ==> \"NO\"\nintersection({-1, 1}, {0, 4}) ==> \"NO\"\nintersection({-3, -1}, {-5, 5}) ==> \"YES\"\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring intersection( vector<int> interval1,vector<int> interval2){\n\n    int inter1,inter2,l,i;\n    inter1=max(interval1[0],interval2[0]);\n    inter2=min(interval1[1],interval2[1]);\n    l=inter2-inter1;\n    if (l<2) return \"NO\";\n    for (i=2;i*i<=l;i++)\n        if (l%i==0) return \"NO\";\n    return \"YES\";\n}\n"}
{"input": "Convert this to C++:\n; ModuleID = '../../Human_xBenchmarks_164/CPP_128/CPP_128.cpp'\nsource_filename = \"../../Human_xBenchmarks_164/CPP_128/CPP_128.cpp\"\ntarget datalayout = \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\ntarget triple = \"x86_64-unknown-linux-gnu\"\n\n%\"class.std::vector\" = type { %\"struct.std::_Vector_base\" }\n%\"struct.std::_Vector_base\" = type { %\"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl\" }\n%\"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl\" = type { %\"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl_data\" }\n%\"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl_data\" = type { i32*, i32*, i32* }\n\n; Function Attrs: mustprogress nofree nosync nounwind readonly uwtable willreturn\ndefine dso_local i32 @_Z10prod_signsSt6vectorIiSaIiEE(%\"class.std::vector\"* nocapture readonly %0) local_unnamed_addr #0 {\n  %2 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0, i64 0, i32 0, i32 0, i32 0, i32 1\n  %3 = load i32*, i32** %2, align 8, !tbaa !3\n  %4 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0, i64 0, i32 0, i32 0, i32 0, i32 0\n  %5 = load i32*, i32** %4, align 8, !tbaa !8\n  %6 = ptrtoint i32* %3 to i64\n  %7 = ptrtoint i32* %5 to i64\n  %8 = sub i64 %6, %7\n  %9 = icmp eq i64 %8, 0\n  br i1 %9, label %65, label %10\n\n10:                                               ; preds = %1\n  %11 = ashr exact i64 %8, 2\n  %12 = call i64 @llvm.umax.i64(i64 %11, i64 1)\n  %13 = and i64 %12, 1\n  %14 = icmp ult i64 %11, 2\n  br i1 %14, label %44, label %15\n\n15:                                               ; preds = %10\n  %16 = and i64 %12, -2\n  br label %17\n\n17:                                               ; preds = %17, %15\n  %18 = phi i64 [ 0, %15 ], [ %41, %17 ]\n  %19 = phi i32 [ 1, %15 ], [ %40, %17 ]\n  %20 = phi i32 [ 0, %15 ], [ %35, %17 ]\n  %21 = phi i64 [ %16, %15 ], [ %42, %17 ]\n  %22 = getelementptr inbounds i32, i32* %5, i64 %18\n  %23 = load i32, i32* %22, align 4, !tbaa !9\n  %24 = tail call i32 @llvm.abs.i32(i32 %23, i1 true)\n  %25 = add nuw nsw i32 %24, %20\n  %26 = icmp eq i32 %23, 0\n  %27 = select i1 %26, i32 0, i32 %19\n  %28 = icmp slt i32 %23, 0\n  %29 = sub nsw i32 0, %27\n  %30 = select i1 %28, i32 %29, i32 %27\n  %31 = or i64 %18, 1\n  %32 = getelementptr inbounds i32, i32* %5, i64 %31\n  %33 = load i32, i32* %32, align 4, !tbaa !9\n  %34 = tail call i32 @llvm.abs.i32(i32 %33, i1 true)\n  %35 = add nuw nsw i32 %34, %25\n  %36 = icmp eq i32 %33, 0\n  %37 = select i1 %36, i32 0, i32 %30\n  %38 = icmp slt i32 %33, 0\n  %39 = sub nsw i32 0, %37\n  %40 = select i1 %38, i32 %39, i32 %37\n  %41 = add nuw nsw i64 %18, 2\n  %42 = add i64 %21, -2\n  %43 = icmp eq i64 %42, 0\n  br i1 %43, label %44, label %17, !llvm.loop !11\n\n44:                                               ; preds = %17, %10\n  %45 = phi i32 [ undef, %10 ], [ %35, %17 ]\n  %46 = phi i32 [ undef, %10 ], [ %40, %17 ]\n  %47 = phi i64 [ 0, %10 ], [ %41, %17 ]\n  %48 = phi i32 [ 1, %10 ], [ %40, %17 ]\n  %49 = phi i32 [ 0, %10 ], [ %35, %17 ]\n  %50 = icmp eq i64 %13, 0\n  br i1 %50, label %61, label %51\n\n51:                                               ; preds = %44\n  %52 = getelementptr inbounds i32, i32* %5, i64 %47\n  %53 = load i32, i32* %52, align 4, !tbaa !9\n  %54 = icmp eq i32 %53, 0\n  %55 = select i1 %54, i32 0, i32 %48\n  %56 = icmp slt i32 %53, 0\n  %57 = sub nsw i32 0, %55\n  %58 = select i1 %56, i32 %57, i32 %55\n  %59 = tail call i32 @llvm.abs.i32(i32 %53, i1 true)\n  %60 = add nuw nsw i32 %59, %49\n  br label %61\n\n61:                                               ; preds = %44, %51\n  %62 = phi i32 [ %45, %44 ], [ %60, %51 ]\n  %63 = phi i32 [ %46, %44 ], [ %58, %51 ]\n  %64 = mul nsw i32 %63, %62\n  br label %65\n\n65:                                               ; preds = %1, %61\n  %66 = phi i32 [ %64, %61 ], [ -32768, %1 ]\n  ret i32 %66\n}\n\n; Function Attrs: nofree nosync nounwind readnone speculatable willreturn\ndeclare i32 @llvm.abs.i32(i32, i1 immarg) #1\n\n; Function Attrs: nofree nosync nounwind readnone speculatable willreturn\ndeclare i64 @llvm.umax.i64(i64, i64) #1\n\nattributes #0 = { mustprogress nofree nosync nounwind readonly uwtable willreturn \"frame-pointer\"=\"none\" \"min-legal-vector-width\"=\"0\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #1 = { nofree nosync nounwind readnone speculatable willreturn }\n\n!llvm.module.flags = !{!0, !1}\n!llvm.ident = !{!2}\n\n!0 = !{i32 1, !\"wchar_size\", i32 4}\n!1 = !{i32 7, !\"uwtable\", i32 1}\n!2 = !{!\"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)\"}\n!3 = !{!4, !5, i64 8}\n!4 = !{!\"_ZTSNSt12_Vector_baseIiSaIiEE17_Vector_impl_dataE\", !5, i64 0, !5, i64 8, !5, i64 16}\n!5 = !{!\"any pointer\", !6, i64 0}\n!6 = !{!\"omnipotent char\", !7, i64 0}\n!7 = !{!\"Simple C++ TBAA\"}\n!8 = !{!4, !5, i64 0}\n!9 = !{!10, !10, i64 0}\n!10 = !{!\"int\", !6, i64 0}\n!11 = distinct !{!11, !12}\n!12 = !{!\"llvm.loop.mustprogress\"}\n", "target": "This is the targeted source code:\n/*\nYou are given a vector arr of integers and you need to return\nsum of magnitudes of integers multiplied by product of all signs\nof each number in the vector, represented by 1, -1 or 0.\nNote: return -32768 for empty arr.\n\nExample:\n>>> prod_signs({1, 2, 2, -4}) == -9\n>>> prod_signs({0, 1}) == 0\n>>> prod_signs({}) == -32768\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nint prod_signs(vector<int> arr){\n\n    if (arr.size()==0) return -32768;\n    int i,sum=0,prods=1;\n    for (i=0;i<arr.size();i++)\n    {\n        sum+=abs(arr[i]);\n        if (arr[i]==0) prods=0;\n        if (arr[i]<0) prods=-prods;\n   }\n   return sum*prods;\n}\n"}
{"input": "Convert this to C++:\n; ModuleID = '../../Human_xBenchmarks_164/CPP_129/CPP_129.cpp'\nsource_filename = \"../../Human_xBenchmarks_164/CPP_129/CPP_129.cpp\"\ntarget datalayout = \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\ntarget triple = \"x86_64-unknown-linux-gnu\"\n\n%\"class.std::vector\" = type { %\"struct.std::_Vector_base\" }\n%\"struct.std::_Vector_base\" = type { %\"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl\" }\n%\"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl\" = type { %\"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl_data\" }\n%\"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl_data\" = type { i32*, i32*, i32* }\n%\"class.std::vector.0\" = type { %\"struct.std::_Vector_base.1\" }\n%\"struct.std::_Vector_base.1\" = type { %\"struct.std::_Vector_base<std::vector<int>, std::allocator<std::vector<int>>>::_Vector_impl\" }\n%\"struct.std::_Vector_base<std::vector<int>, std::allocator<std::vector<int>>>::_Vector_impl\" = type { %\"struct.std::_Vector_base<std::vector<int>, std::allocator<std::vector<int>>>::_Vector_impl_data\" }\n%\"struct.std::_Vector_base<std::vector<int>, std::allocator<std::vector<int>>>::_Vector_impl_data\" = type { %\"class.std::vector\"*, %\"class.std::vector\"*, %\"class.std::vector\"* }\n\n@.str = private unnamed_addr constant [26 x i8] c\"vector::_M_realloc_insert\\00\", align 1\n\n; Function Attrs: uwtable\ndefine dso_local void @_Z7minPathSt6vectorIS_IiSaIiEESaIS1_EEi(%\"class.std::vector\"* noalias nocapture sret(%\"class.std::vector\") align 8 %0, %\"class.std::vector.0\"* nocapture readonly %1, i32 %2) local_unnamed_addr #0 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {\n  %4 = getelementptr inbounds %\"class.std::vector.0\", %\"class.std::vector.0\"* %1, i64 0, i32 0, i32 0, i32 0, i32 1\n  %5 = load %\"class.std::vector\"*, %\"class.std::vector\"** %4, align 8, !tbaa !3\n  %6 = getelementptr inbounds %\"class.std::vector.0\", %\"class.std::vector.0\"* %1, i64 0, i32 0, i32 0, i32 0, i32 0\n  %7 = load %\"class.std::vector\"*, %\"class.std::vector\"** %6, align 8, !tbaa !8\n  %8 = ptrtoint %\"class.std::vector\"* %5 to i64\n  %9 = ptrtoint %\"class.std::vector\"* %7 to i64\n  %10 = sub i64 %8, %9\n  %11 = sdiv exact i64 %10, 24\n  %12 = icmp eq i64 %10, 0\n  br i1 %12, label %111, label %13\n\n13:                                               ; preds = %3\n  %14 = call i64 @llvm.umax.i64(i64 %11, i64 1)\n  br label %15\n\n15:                                               ; preds = %13, %92\n  %16 = phi i64 [ 0, %13 ], [ %95, %92 ]\n  %17 = phi i32 [ undef, %13 ], [ %94, %92 ]\n  %18 = phi i32 [ undef, %13 ], [ %93, %92 ]\n  %19 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %7, i64 %16, i32 0, i32 0, i32 0, i32 1\n  %20 = load i32*, i32** %19, align 8, !tbaa !9\n  %21 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %7, i64 %16, i32 0, i32 0, i32 0, i32 0\n  %22 = load i32*, i32** %21, align 8, !tbaa !11\n  %23 = ptrtoint i32* %20 to i64\n  %24 = ptrtoint i32* %22 to i64\n  %25 = sub i64 %23, %24\n  %26 = icmp eq i64 %25, 0\n  br i1 %26, label %92, label %27\n\n27:                                               ; preds = %15\n  %28 = ashr exact i64 %25, 2\n  %29 = call i64 @llvm.umax.i64(i64 %28, i64 1)\n  %30 = trunc i64 %16 to i32\n  %31 = add i64 %29, -1\n  %32 = and i64 %29, 3\n  %33 = icmp ult i64 %31, 3\n  br i1 %33, label %71, label %34\n\n34:                                               ; preds = %27\n  %35 = and i64 %29, -4\n  br label %36\n\n36:                                               ; preds = %36, %34\n  %37 = phi i64 [ 0, %34 ], [ %68, %36 ]\n  %38 = phi i32 [ %17, %34 ], [ %67, %36 ]\n  %39 = phi i32 [ %18, %34 ], [ %65, %36 ]\n  %40 = phi i64 [ %35, %34 ], [ %69, %36 ]\n  %41 = getelementptr inbounds i32, i32* %22, i64 %37\n  %42 = load i32, i32* %41, align 4, !tbaa !12\n  %43 = icmp eq i32 %42, 1\n  %44 = trunc i64 %37 to i32\n  %45 = select i1 %43, i32 %44, i32 %38\n  %46 = or i64 %37, 1\n  %47 = getelementptr inbounds i32, i32* %22, i64 %46\n  %48 = load i32, i32* %47, align 4, !tbaa !12\n  %49 = icmp eq i32 %48, 1\n  %50 = trunc i64 %46 to i32\n  %51 = select i1 %49, i32 %50, i32 %45\n  %52 = or i64 %37, 2\n  %53 = getelementptr inbounds i32, i32* %22, i64 %52\n  %54 = load i32, i32* %53, align 4, !tbaa !12\n  %55 = icmp eq i32 %54, 1\n  %56 = trunc i64 %52 to i32\n  %57 = select i1 %55, i32 %56, i32 %51\n  %58 = or i64 %37, 3\n  %59 = getelementptr inbounds i32, i32* %22, i64 %58\n  %60 = load i32, i32* %59, align 4, !tbaa !12\n  %61 = icmp eq i32 %60, 1\n  %62 = select i1 %61, i1 true, i1 %55\n  %63 = select i1 %62, i1 true, i1 %49\n  %64 = select i1 %63, i1 true, i1 %43\n  %65 = select i1 %64, i32 %30, i32 %39\n  %66 = trunc i64 %58 to i32\n  %67 = select i1 %61, i32 %66, i32 %57\n  %68 = add nuw nsw i64 %37, 4\n  %69 = add i64 %40, -4\n  %70 = icmp eq i64 %69, 0\n  br i1 %70, label %71, label %36, !llvm.loop !14\n\n71:                                               ; preds = %36, %27\n  %72 = phi i32 [ undef, %27 ], [ %65, %36 ]\n  %73 = phi i32 [ undef, %27 ], [ %67, %36 ]\n  %74 = phi i64 [ 0, %27 ], [ %68, %36 ]\n  %75 = phi i32 [ %17, %27 ], [ %67, %36 ]\n  %76 = phi i32 [ %18, %27 ], [ %65, %36 ]\n  %77 = icmp eq i64 %32, 0\n  br i1 %77, label %92, label %78\n\n78:                                               ; preds = %71, %78\n  %79 = phi i64 [ %89, %78 ], [ %74, %71 ]\n  %80 = phi i32 [ %88, %78 ], [ %75, %71 ]\n  %81 = phi i32 [ %86, %78 ], [ %76, %71 ]\n  %82 = phi i64 [ %90, %78 ], [ %32, %71 ]\n  %83 = getelementptr inbounds i32, i32* %22, i64 %79\n  %84 = load i32, i32* %83, align 4, !tbaa !12\n  %85 = icmp eq i32 %84, 1\n  %86 = select i1 %85, i32 %30, i32 %81\n  %87 = trunc i64 %79 to i32\n  %88 = select i1 %85, i32 %87, i32 %80\n  %89 = add nuw nsw i64 %79, 1\n  %90 = add i64 %82, -1\n  %91 = icmp eq i64 %90, 0\n  br i1 %91, label %92, label %78, !llvm.loop !16\n\n92:                                               ; preds = %71, %78, %15\n  %93 = phi i32 [ %18, %15 ], [ %72, %71 ], [ %86, %78 ]\n  %94 = phi i32 [ %17, %15 ], [ %73, %71 ], [ %88, %78 ]\n  %95 = add nuw nsw i64 %16, 1\n  %96 = icmp eq i64 %95, %14\n  br i1 %96, label %97, label %15, !llvm.loop !18\n\n97:                                               ; preds = %92\n  %98 = mul i64 %11, %11\n  %99 = trunc i64 %98 to i32\n  %100 = icmp sgt i32 %93, 0\n  br i1 %100, label %101, label %111\n\n101:                                              ; preds = %97\n  %102 = add nsw i32 %93, -1\n  %103 = zext i32 %102 to i64\n  %104 = sext i32 %94 to i64\n  %105 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %7, i64 %103, i32 0, i32 0, i32 0, i32 0\n  %106 = load i32*, i32** %105, align 8, !tbaa !11\n  %107 = getelementptr inbounds i32, i32* %106, i64 %104\n  %108 = load i32, i32* %107, align 4, !tbaa !12\n  %109 = icmp slt i32 %108, %99\n  %110 = select i1 %109, i32 %108, i32 %99\n  br label %111\n\n111:                                              ; preds = %3, %101, %97\n  %112 = phi i32 [ %94, %97 ], [ %94, %101 ], [ undef, %3 ]\n  %113 = phi i32 [ %93, %97 ], [ %93, %101 ], [ undef, %3 ]\n  %114 = phi i32 [ %99, %97 ], [ %110, %101 ], [ 0, %3 ]\n  %115 = sext i32 %113 to i64\n  %116 = add nsw i64 %11, -1\n  %117 = icmp ugt i64 %116, %115\n  br i1 %117, label %118, label %128\n\n118:                                              ; preds = %111\n  %119 = add nsw i32 %113, 1\n  %120 = sext i32 %119 to i64\n  %121 = sext i32 %112 to i64\n  %122 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %7, i64 %120, i32 0, i32 0, i32 0, i32 0\n  %123 = load i32*, i32** %122, align 8, !tbaa !11\n  %124 = getelementptr inbounds i32, i32* %123, i64 %121\n  %125 = load i32, i32* %124, align 4, !tbaa !12\n  %126 = icmp slt i32 %125, %114\n  %127 = select i1 %126, i32 %125, i32 %114\n  br label %128\n\n128:                                              ; preds = %118, %111\n  %129 = phi i32 [ %114, %111 ], [ %127, %118 ]\n  %130 = icmp sgt i32 %112, 0\n  br i1 %130, label %131, label %140\n\n131:                                              ; preds = %128\n  %132 = add nsw i32 %112, -1\n  %133 = zext i32 %132 to i64\n  %134 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %7, i64 %115, i32 0, i32 0, i32 0, i32 0\n  %135 = load i32*, i32** %134, align 8, !tbaa !11\n  %136 = getelementptr inbounds i32, i32* %135, i64 %133\n  %137 = load i32, i32* %136, align 4, !tbaa !12\n  %138 = icmp slt i32 %137, %129\n  %139 = select i1 %138, i32 %137, i32 %129\n  br label %140\n\n140:                                              ; preds = %131, %128\n  %141 = phi i32 [ %129, %128 ], [ %139, %131 ]\n  %142 = sext i32 %112 to i64\n  %143 = icmp ugt i64 %116, %142\n  br i1 %143, label %144, label %153\n\n144:                                              ; preds = %140\n  %145 = add nsw i32 %112, 1\n  %146 = sext i32 %145 to i64\n  %147 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %7, i64 %115, i32 0, i32 0, i32 0, i32 0\n  %148 = load i32*, i32** %147, align 8, !tbaa !11\n  %149 = getelementptr inbounds i32, i32* %148, i64 %146\n  %150 = load i32, i32* %149, align 4, !tbaa !12\n  %151 = icmp slt i32 %150, %141\n  %152 = select i1 %151, i32 %150, i32 %141\n  br label %153\n\n153:                                              ; preds = %144, %140\n  %154 = phi i32 [ %141, %140 ], [ %152, %144 ]\n  %155 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0, i64 0, i32 0, i32 0, i32 0, i32 1\n  %156 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0, i64 0, i32 0, i32 0, i32 0, i32 2\n  %157 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0, i64 0, i32 0, i32 0, i32 0, i32 0\n  %158 = icmp sgt i32 %2, 0\n  %159 = bitcast %\"class.std::vector\"* %0 to i8*\n  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(24) %159, i8 0, i64 24, i1 false)\n  br i1 %158, label %160, label %263\n\n160:                                              ; preds = %153, %256\n  %161 = phi i32* [ %257, %256 ], [ null, %153 ]\n  %162 = phi i32* [ %258, %256 ], [ null, %153 ]\n  %163 = phi i32* [ %259, %256 ], [ null, %153 ]\n  %164 = phi i32* [ %260, %256 ], [ null, %153 ]\n  %165 = phi i32 [ %261, %256 ], [ 0, %153 ]\n  %166 = and i32 %165, 1\n  %167 = icmp eq i32 %166, 0\n  br i1 %167, label %168, label %212\n\n168:                                              ; preds = %160\n  %169 = icmp eq i32* %164, %161\n  br i1 %169, label %172, label %170\n\n170:                                              ; preds = %168\n  store i32 1, i32* %164, align 4, !tbaa !12\n  %171 = getelementptr inbounds i32, i32* %164, i64 1\n  store i32* %171, i32** %155, align 8, !tbaa !9\n  br label %256\n\n172:                                              ; preds = %168\n  %173 = ptrtoint i32* %161 to i64\n  %174 = ptrtoint i32* %162 to i64\n  %175 = sub i64 %173, %174\n  %176 = ashr exact i64 %175, 2\n  %177 = icmp eq i64 %175, 9223372036854775804\n  br i1 %177, label %178, label %180\n\n178:                                              ; preds = %172\n  invoke void @_ZSt20__throw_length_errorPKc(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str, i64 0, i64 0)) #7\n          to label %179 unwind label %210\n\n179:                                              ; preds = %178\n  unreachable\n\n180:                                              ; preds = %172\n  %181 = icmp eq i64 %175, 0\n  %182 = select i1 %181, i64 1, i64 %176\n  %183 = add nsw i64 %182, %176\n  %184 = icmp ult i64 %183, %176\n  %185 = icmp ugt i64 %183, 2305843009213693951\n  %186 = or i1 %184, %185\n  %187 = select i1 %186, i64 2305843009213693951, i64 %183\n  %188 = icmp eq i64 %187, 0\n  br i1 %188, label %194, label %189\n\n189:                                              ; preds = %180\n  %190 = shl nuw nsw i64 %187, 2\n  %191 = invoke noalias nonnull i8* @_Znwm(i64 %190) #8\n          to label %192 unwind label %208\n\n192:                                              ; preds = %189\n  %193 = bitcast i8* %191 to i32*\n  br label %194\n\n194:                                              ; preds = %192, %180\n  %195 = phi i32* [ %193, %192 ], [ null, %180 ]\n  %196 = getelementptr inbounds i32, i32* %195, i64 %176\n  store i32 1, i32* %196, align 4, !tbaa !12\n  %197 = icmp sgt i64 %175, 0\n  br i1 %197, label %198, label %201\n\n198:                                              ; preds = %194\n  %199 = bitcast i32* %195 to i8*\n  %200 = bitcast i32* %162 to i8*\n  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %199, i8* align 4 %200, i64 %175, i1 false) #9\n  br label %201\n\n201:                                              ; preds = %194, %198\n  %202 = getelementptr inbounds i32, i32* %196, i64 1\n  %203 = icmp eq i32* %162, null\n  br i1 %203, label %206, label %204\n\n204:                                              ; preds = %201\n  %205 = bitcast i32* %162 to i8*\n  tail call void @_ZdlPv(i8* nonnull %205) #9\n  br label %206\n\n206:                                              ; preds = %204, %201\n  store i32* %195, i32** %157, align 8, !tbaa !11\n  store i32* %202, i32** %155, align 8, !tbaa !9\n  %207 = getelementptr inbounds i32, i32* %195, i64 %187\n  store i32* %207, i32** %156, align 8, !tbaa !19\n  br label %256\n\n208:                                              ; preds = %189\n  %209 = landingpad { i8*, i32 }\n          cleanup\n  br label %264\n\n210:                                              ; preds = %178\n  %211 = landingpad { i8*, i32 }\n          cleanup\n  br label %264\n\n212:                                              ; preds = %160\n  %213 = icmp eq i32* %164, %163\n  br i1 %213, label %216, label %214\n\n214:                                              ; preds = %212\n  store i32 %154, i32* %164, align 4, !tbaa !12\n  %215 = getelementptr inbounds i32, i32* %164, i64 1\n  store i32* %215, i32** %155, align 8, !tbaa !9\n  br label %256\n\n216:                                              ; preds = %212\n  %217 = ptrtoint i32* %163 to i64\n  %218 = ptrtoint i32* %162 to i64\n  %219 = sub i64 %217, %218\n  %220 = ashr exact i64 %219, 2\n  %221 = icmp eq i64 %219, 9223372036854775804\n  br i1 %221, label %222, label %224\n\n222:                                              ; preds = %216\n  invoke void @_ZSt20__throw_length_errorPKc(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str, i64 0, i64 0)) #7\n          to label %223 unwind label %254\n\n223:                                              ; preds = %222\n  unreachable\n\n224:                                              ; preds = %216\n  %225 = icmp eq i64 %219, 0\n  %226 = select i1 %225, i64 1, i64 %220\n  %227 = add nsw i64 %226, %220\n  %228 = icmp ult i64 %227, %220\n  %229 = icmp ugt i64 %227, 2305843009213693951\n  %230 = or i1 %228, %229\n  %231 = select i1 %230, i64 2305843009213693951, i64 %227\n  %232 = icmp eq i64 %231, 0\n  br i1 %232, label %238, label %233\n\n233:                                              ; preds = %224\n  %234 = shl nuw nsw i64 %231, 2\n  %235 = invoke noalias nonnull i8* @_Znwm(i64 %234) #8\n          to label %236 unwind label %252\n\n236:                                              ; preds = %233\n  %237 = bitcast i8* %235 to i32*\n  br label %238\n\n238:                                              ; preds = %236, %224\n  %239 = phi i32* [ %237, %236 ], [ null, %224 ]\n  %240 = getelementptr inbounds i32, i32* %239, i64 %220\n  store i32 %154, i32* %240, align 4, !tbaa !12\n  %241 = icmp sgt i64 %219, 0\n  br i1 %241, label %242, label %245\n\n242:                                              ; preds = %238\n  %243 = bitcast i32* %239 to i8*\n  %244 = bitcast i32* %162 to i8*\n  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %243, i8* align 4 %244, i64 %219, i1 false) #9\n  br label %245\n\n245:                                              ; preds = %238, %242\n  %246 = getelementptr inbounds i32, i32* %240, i64 1\n  %247 = icmp eq i32* %162, null\n  br i1 %247, label %250, label %248\n\n248:                                              ; preds = %245\n  %249 = bitcast i32* %162 to i8*\n  tail call void @_ZdlPv(i8* nonnull %249) #9\n  br label %250\n\n250:                                              ; preds = %248, %245\n  store i32* %239, i32** %157, align 8, !tbaa !11\n  store i32* %246, i32** %155, align 8, !tbaa !9\n  %251 = getelementptr inbounds i32, i32* %239, i64 %231\n  store i32* %251, i32** %156, align 8, !tbaa !19\n  br label %256\n\n252:                                              ; preds = %233\n  %253 = landingpad { i8*, i32 }\n          cleanup\n  br label %264\n\n254:                                              ; preds = %222\n  %255 = landingpad { i8*, i32 }\n          cleanup\n  br label %264\n\n256:                                              ; preds = %250, %214, %170, %206\n  %257 = phi i32* [ %251, %250 ], [ %161, %214 ], [ %161, %170 ], [ %207, %206 ]\n  %258 = phi i32* [ %239, %250 ], [ %162, %214 ], [ %162, %170 ], [ %195, %206 ]\n  %259 = phi i32* [ %251, %250 ], [ %163, %214 ], [ %161, %170 ], [ %207, %206 ]\n  %260 = phi i32* [ %246, %250 ], [ %215, %214 ], [ %171, %170 ], [ %202, %206 ]\n  %261 = add nuw nsw i32 %165, 1\n  %262 = icmp eq i32 %261, %2\n  br i1 %262, label %263, label %160, !llvm.loop !20\n\n263:                                              ; preds = %256, %153\n  ret void\n\n264:                                              ; preds = %252, %254, %208, %210\n  %265 = phi { i8*, i32 } [ %209, %208 ], [ %211, %210 ], [ %253, %252 ], [ %255, %254 ]\n  %266 = icmp eq i32* %162, null\n  br i1 %266, label %269, label %267\n\n267:                                              ; preds = %264\n  %268 = bitcast i32* %162 to i8*\n  tail call void @_ZdlPv(i8* nonnull %268) #9\n  br label %269\n\n269:                                              ; preds = %264, %267\n  resume { i8*, i32 } %265\n}\n\n; Function Attrs: argmemonly mustprogress nofree nounwind willreturn writeonly\ndeclare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1\n\ndeclare dso_local i32 @__gxx_personality_v0(...)\n\n; Function Attrs: nobuiltin nounwind\ndeclare dso_local void @_ZdlPv(i8*) local_unnamed_addr #2\n\n; Function Attrs: noreturn\ndeclare dso_local void @_ZSt20__throw_length_errorPKc(i8*) local_unnamed_addr #3\n\n; Function Attrs: nobuiltin allocsize(0)\ndeclare dso_local nonnull i8* @_Znwm(i64) local_unnamed_addr #4\n\n; Function Attrs: argmemonly mustprogress nofree nounwind willreturn\ndeclare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #5\n\n; Function Attrs: nofree nosync nounwind readnone speculatable willreturn\ndeclare i64 @llvm.umax.i64(i64, i64) #6\n\nattributes #0 = { uwtable \"frame-pointer\"=\"none\" \"min-legal-vector-width\"=\"0\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #1 = { argmemonly mustprogress nofree nounwind willreturn writeonly }\nattributes #2 = { nobuiltin nounwind \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #3 = { noreturn \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #4 = { nobuiltin allocsize(0) \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #5 = { argmemonly mustprogress nofree nounwind willreturn }\nattributes #6 = { nofree nosync nounwind readnone speculatable willreturn }\nattributes #7 = { noreturn }\nattributes #8 = { allocsize(0) }\nattributes #9 = { nounwind }\n\n!llvm.module.flags = !{!0, !1}\n!llvm.ident = !{!2}\n\n!0 = !{i32 1, !\"wchar_size\", i32 4}\n!1 = !{i32 7, !\"uwtable\", i32 1}\n!2 = !{!\"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)\"}\n!3 = !{!4, !5, i64 8}\n!4 = !{!\"_ZTSNSt12_Vector_baseISt6vectorIiSaIiEESaIS2_EE17_Vector_impl_dataE\", !5, i64 0, !5, i64 8, !5, i64 16}\n!5 = !{!\"any pointer\", !6, i64 0}\n!6 = !{!\"omnipotent char\", !7, i64 0}\n!7 = !{!\"Simple C++ TBAA\"}\n!8 = !{!4, !5, i64 0}\n!9 = !{!10, !5, i64 8}\n!10 = !{!\"_ZTSNSt12_Vector_baseIiSaIiEE17_Vector_impl_dataE\", !5, i64 0, !5, i64 8, !5, i64 16}\n!11 = !{!10, !5, i64 0}\n!12 = !{!13, !13, i64 0}\n!13 = !{!\"int\", !6, i64 0}\n!14 = distinct !{!14, !15}\n!15 = !{!\"llvm.loop.mustprogress\"}\n!16 = distinct !{!16, !17}\n!17 = !{!\"llvm.loop.unroll.disable\"}\n!18 = distinct !{!18, !15}\n!19 = !{!10, !5, i64 16}\n!20 = distinct !{!20, !15}\n", "target": "This is the targeted source code:\n/*\nGiven a grid with N rows and N columns (N >= 2) and a positive integer k, \neach cell of the grid contains a value. Every integer in the range {1, N * N}\ninclusive appears exactly once on the cells of the grid.\n\nYou have to find the minimum path of length k in the grid. You can start\nfrom any cell, and in each step you can move to any of the neighbor cells,\nin other words, you can go to cells which share an edge with you current\ncell.\nPlease note that a path of length k means visiting exactly k cells (not\nnecessarily distinct).\nYou CANNOT go off the grid.\nA path A (of length k) is considered less than a path B (of length k) if\nafter making the ordered vectors of the values on the cells that A and B go\nthrough (let's call them lst_A and lst_B), lst_A is lexicographically less\nthan lst_B, in other words, there exist an integer index i (1 <= i <= k)\nsuch that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\nlst_A[j] = lst_B[j].\nIt is guaranteed that the answer is unique.\nReturn an ordered vector of the values on the cells that the minimum path go through.\n\nExamples:\n\n    Input: grid = { {1,2,3}, {4,5,6}, {7,8,9}}, k = 3\n    Output: {1, 2, 1}\n\n    Input: grid = { {5,9,3}, {4,1,6}, {7,8,2}}, k = 1\n    Output: {1}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> minPath(vector<vector<int>> grid, int k){\n\n    int i,j,x,y,min;\n    for (i=0;i<grid.size();i++)\n        for (j=0;j<grid[i].size();j++)\n            if (grid[i][j]==1) {\n                x=i;y=j;\n            }\n    min=grid.size()*grid.size();\n    if (x>0 and grid[x-1][y]<min) min=grid[x-1][y];\n    if (x<grid.size()-1 and grid[x+1][y]<min) min=grid[x+1][y];\n    if (y>0 and grid[x][y-1]<min) min=grid[x][y-1];\n    if (y<grid.size()-1 and grid[x][y+1]<min) min=grid[x][y+1];\n    vector<int> out={};\n    for (i=0;i<k;i++)\n    if (i%2==0) out.push_back(1);\n    else out.push_back(min);\n    return out;\n}\n"}
{"input": "Convert this to C++:\n; ModuleID = '../../Human_xBenchmarks_164/CPP_130/CPP_130.cpp'\nsource_filename = \"../../Human_xBenchmarks_164/CPP_130/CPP_130.cpp\"\ntarget datalayout = \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\ntarget triple = \"x86_64-unknown-linux-gnu\"\n\n%\"class.std::vector\" = type { %\"struct.std::_Vector_base\" }\n%\"struct.std::_Vector_base\" = type { %\"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl\" }\n%\"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl\" = type { %\"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl_data\" }\n%\"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl_data\" = type { i32*, i32*, i32* }\n\n@.str.1 = private unnamed_addr constant [26 x i8] c\"vector::_M_realloc_insert\\00\", align 1\n\n; Function Attrs: uwtable\ndefine dso_local void @_Z3trii(%\"class.std::vector\"* noalias nocapture sret(%\"class.std::vector\") align 8 %0, i32 %1) local_unnamed_addr #0 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {\n  %3 = tail call noalias nonnull i8* @_Znwm(i64 8) #6\n  %4 = bitcast i8* %3 to i32*\n  %5 = getelementptr inbounds i8, i8* %3, i64 8\n  %6 = bitcast i8* %5 to i32*\n  store i32 1, i32* %4, align 4\n  %7 = getelementptr inbounds i8, i8* %3, i64 4\n  %8 = bitcast i8* %7 to i32*\n  store i32 3, i32* %8, align 4\n  %9 = icmp eq i32 %1, 0\n  br i1 %9, label %15, label %10\n\n10:                                               ; preds = %2\n  %11 = icmp slt i32 %1, 2\n  br i1 %11, label %20, label %12\n\n12:                                               ; preds = %10\n  %13 = add nuw i32 %1, 1\n  %14 = zext i32 %13 to i64\n  br label %27\n\n15:                                               ; preds = %2\n  %16 = bitcast %\"class.std::vector\"* %0 to i8*\n  tail call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(24) %16, i8 0, i64 24, i1 false) #7\n  %17 = invoke noalias nonnull i8* @_Znwm(i64 4) #6\n          to label %136 unwind label %18\n\n18:                                               ; preds = %15\n  %19 = landingpad { i8*, i32 }\n          cleanup\n  br label %152\n\n20:                                               ; preds = %130, %10\n  %21 = phi i32* [ %6, %10 ], [ %131, %130 ]\n  %22 = phi i32* [ %6, %10 ], [ %132, %130 ]\n  %23 = phi i32* [ %4, %10 ], [ %133, %130 ]\n  %24 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0, i64 0, i32 0, i32 0, i32 0, i32 0\n  store i32* %23, i32** %24, align 8, !tbaa !3\n  %25 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0, i64 0, i32 0, i32 0, i32 0, i32 1\n  store i32* %22, i32** %25, align 8, !tbaa !8\n  %26 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0, i64 0, i32 0, i32 0, i32 0, i32 2\n  store i32* %21, i32** %26, align 8, !tbaa !9\n  br label %144\n\n27:                                               ; preds = %12, %130\n  %28 = phi i64 [ 2, %12 ], [ %134, %130 ]\n  %29 = phi i32* [ %4, %12 ], [ %133, %130 ]\n  %30 = phi i32* [ %6, %12 ], [ %132, %130 ]\n  %31 = phi i32* [ %6, %12 ], [ %131, %130 ]\n  %32 = trunc i64 %28 to i32\n  %33 = and i32 %32, 1\n  %34 = icmp eq i32 %33, 0\n  br i1 %34, label %35, label %77\n\n35:                                               ; preds = %27\n  %36 = lshr i32 %32, 1\n  %37 = add nuw nsw i32 %36, 1\n  %38 = icmp eq i32* %30, %31\n  br i1 %38, label %41, label %39\n\n39:                                               ; preds = %35\n  store i32 %37, i32* %30, align 4, !tbaa !10\n  %40 = getelementptr inbounds i32, i32* %30, i64 1\n  br label %130\n\n41:                                               ; preds = %35\n  %42 = ptrtoint i32* %30 to i64\n  %43 = ptrtoint i32* %29 to i64\n  %44 = sub i64 %42, %43\n  %45 = ashr exact i64 %44, 2\n  %46 = icmp eq i64 %44, 9223372036854775804\n  br i1 %46, label %47, label %49\n\n47:                                               ; preds = %41\n  invoke void @_ZSt20__throw_length_errorPKc(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.1, i64 0, i64 0)) #8\n          to label %48 unwind label %147\n\n48:                                               ; preds = %47\n  unreachable\n\n49:                                               ; preds = %41\n  %50 = icmp eq i64 %44, 0\n  %51 = select i1 %50, i64 1, i64 %45\n  %52 = add nsw i64 %51, %45\n  %53 = icmp ult i64 %52, %45\n  %54 = icmp ugt i64 %52, 2305843009213693951\n  %55 = or i1 %53, %54\n  %56 = select i1 %55, i64 2305843009213693951, i64 %52\n  %57 = icmp eq i64 %56, 0\n  br i1 %57, label %63, label %58\n\n58:                                               ; preds = %49\n  %59 = shl nuw nsw i64 %56, 2\n  %60 = invoke noalias nonnull i8* @_Znwm(i64 %59) #6\n          to label %61 unwind label %145\n\n61:                                               ; preds = %58\n  %62 = bitcast i8* %60 to i32*\n  br label %63\n\n63:                                               ; preds = %61, %49\n  %64 = phi i32* [ %62, %61 ], [ null, %49 ]\n  %65 = getelementptr inbounds i32, i32* %64, i64 %45\n  store i32 %37, i32* %65, align 4, !tbaa !10\n  %66 = icmp sgt i64 %44, 0\n  br i1 %66, label %67, label %70\n\n67:                                               ; preds = %63\n  %68 = bitcast i32* %64 to i8*\n  %69 = bitcast i32* %29 to i8*\n  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %68, i8* align 4 %69, i64 %44, i1 false) #7\n  br label %70\n\n70:                                               ; preds = %67, %63\n  %71 = getelementptr inbounds i32, i32* %65, i64 1\n  %72 = icmp eq i32* %29, null\n  br i1 %72, label %75, label %73\n\n73:                                               ; preds = %70\n  %74 = bitcast i32* %29 to i8*\n  tail call void @_ZdlPv(i8* nonnull %74) #7\n  br label %75\n\n75:                                               ; preds = %73, %70\n  %76 = getelementptr inbounds i32, i32* %64, i64 %56\n  br label %130\n\n77:                                               ; preds = %27\n  %78 = add nsw i64 %28, -1\n  %79 = getelementptr inbounds i32, i32* %29, i64 %78\n  %80 = load i32, i32* %79, align 4, !tbaa !10\n  %81 = add nsw i64 %28, -2\n  %82 = getelementptr inbounds i32, i32* %29, i64 %81\n  %83 = load i32, i32* %82, align 4, !tbaa !10\n  %84 = trunc i64 %28 to i32\n  %85 = add i32 %84, 1\n  %86 = lshr i32 %85, 1\n  %87 = add nuw nsw i32 %86, 1\n  %88 = add i32 %87, %80\n  %89 = add i32 %88, %83\n  %90 = icmp eq i32* %30, %31\n  br i1 %90, label %93, label %91\n\n91:                                               ; preds = %77\n  store i32 %89, i32* %30, align 4, !tbaa !10\n  %92 = getelementptr inbounds i32, i32* %30, i64 1\n  br label %130\n\n93:                                               ; preds = %77\n  %94 = ptrtoint i32* %30 to i64\n  %95 = ptrtoint i32* %29 to i64\n  %96 = sub i64 %94, %95\n  %97 = ashr exact i64 %96, 2\n  %98 = icmp eq i64 %96, 9223372036854775804\n  br i1 %98, label %99, label %101\n\n99:                                               ; preds = %93\n  invoke void @_ZSt20__throw_length_errorPKc(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.1, i64 0, i64 0)) #8\n          to label %100 unwind label %128\n\n100:                                              ; preds = %99\n  unreachable\n\n101:                                              ; preds = %93\n  %102 = icmp eq i64 %96, 0\n  %103 = select i1 %102, i64 1, i64 %97\n  %104 = add nsw i64 %103, %97\n  %105 = icmp ult i64 %104, %97\n  %106 = icmp ugt i64 %104, 2305843009213693951\n  %107 = or i1 %105, %106\n  %108 = select i1 %107, i64 2305843009213693951, i64 %104\n  %109 = icmp eq i64 %108, 0\n  br i1 %109, label %115, label %110\n\n110:                                              ; preds = %101\n  %111 = shl nuw nsw i64 %108, 2\n  %112 = invoke noalias nonnull i8* @_Znwm(i64 %111) #6\n          to label %113 unwind label %126\n\n113:                                              ; preds = %110\n  %114 = bitcast i8* %112 to i32*\n  br label %115\n\n115:                                              ; preds = %113, %101\n  %116 = phi i32* [ %114, %113 ], [ null, %101 ]\n  %117 = getelementptr inbounds i32, i32* %116, i64 %97\n  store i32 %89, i32* %117, align 4, !tbaa !10\n  %118 = icmp sgt i64 %96, 0\n  br i1 %118, label %119, label %122\n\n119:                                              ; preds = %115\n  %120 = bitcast i32* %116 to i8*\n  %121 = bitcast i32* %29 to i8*\n  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %120, i8* align 4 %121, i64 %96, i1 false) #7\n  br label %122\n\n122:                                              ; preds = %115, %119\n  %123 = bitcast i32* %29 to i8*\n  %124 = getelementptr inbounds i32, i32* %117, i64 1\n  tail call void @_ZdlPv(i8* nonnull %123) #7\n  %125 = getelementptr inbounds i32, i32* %116, i64 %108\n  br label %130\n\n126:                                              ; preds = %110\n  %127 = landingpad { i8*, i32 }\n          cleanup\n  br label %152\n\n128:                                              ; preds = %99\n  %129 = landingpad { i8*, i32 }\n          cleanup\n  br label %152\n\n130:                                              ; preds = %91, %122, %39, %75\n  %131 = phi i32* [ %76, %75 ], [ %31, %39 ], [ %125, %122 ], [ %31, %91 ]\n  %132 = phi i32* [ %71, %75 ], [ %40, %39 ], [ %124, %122 ], [ %92, %91 ]\n  %133 = phi i32* [ %64, %75 ], [ %29, %39 ], [ %116, %122 ], [ %29, %91 ]\n  %134 = add nuw nsw i64 %28, 1\n  %135 = icmp eq i64 %134, %14\n  br i1 %135, label %20, label %27, !llvm.loop !12\n\n136:                                              ; preds = %15\n  %137 = bitcast i8* %17 to i32*\n  %138 = bitcast %\"class.std::vector\"* %0 to i8**\n  store i8* %17, i8** %138, align 8, !tbaa !3\n  %139 = getelementptr inbounds i8, i8* %17, i64 4\n  %140 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0, i64 0, i32 0, i32 0, i32 0, i32 2\n  %141 = bitcast i32** %140 to i8**\n  store i8* %139, i8** %141, align 8, !tbaa !9\n  store i32 1, i32* %137, align 4\n  %142 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0, i64 0, i32 0, i32 0, i32 0, i32 1\n  %143 = bitcast i32** %142 to i8**\n  store i8* %139, i8** %143, align 8, !tbaa !8\n  tail call void @_ZdlPv(i8* nonnull %3) #7\n  br label %144\n\n144:                                              ; preds = %20, %136\n  ret void\n\n145:                                              ; preds = %58\n  %146 = landingpad { i8*, i32 }\n          cleanup\n  br label %149\n\n147:                                              ; preds = %47\n  %148 = landingpad { i8*, i32 }\n          cleanup\n  br label %149\n\n149:                                              ; preds = %147, %145\n  %150 = phi { i8*, i32 } [ %146, %145 ], [ %148, %147 ]\n  %151 = icmp eq i32* %29, null\n  br i1 %151, label %156, label %152\n\n152:                                              ; preds = %18, %126, %128, %149\n  %153 = phi { i8*, i32 } [ %150, %149 ], [ %19, %18 ], [ %127, %126 ], [ %129, %128 ]\n  %154 = phi i32* [ %29, %149 ], [ %4, %18 ], [ %29, %126 ], [ %29, %128 ]\n  %155 = bitcast i32* %154 to i8*\n  tail call void @_ZdlPv(i8* nonnull %155) #7\n  br label %156\n\n156:                                              ; preds = %152, %149\n  %157 = phi { i8*, i32 } [ %150, %149 ], [ %153, %152 ]\n  resume { i8*, i32 } %157\n}\n\ndeclare dso_local i32 @__gxx_personality_v0(...)\n\n; Function Attrs: nobuiltin allocsize(0)\ndeclare dso_local nonnull i8* @_Znwm(i64) local_unnamed_addr #1\n\n; Function Attrs: noreturn\ndeclare dso_local void @_ZSt20__throw_length_errorPKc(i8*) local_unnamed_addr #2\n\n; Function Attrs: argmemonly mustprogress nofree nounwind willreturn\ndeclare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #3\n\n; Function Attrs: nobuiltin nounwind\ndeclare dso_local void @_ZdlPv(i8*) local_unnamed_addr #4\n\n; Function Attrs: argmemonly nofree nounwind willreturn writeonly\ndeclare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #5\n\nattributes #0 = { uwtable \"frame-pointer\"=\"none\" \"min-legal-vector-width\"=\"0\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #1 = { nobuiltin allocsize(0) \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #2 = { noreturn \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #3 = { argmemonly mustprogress nofree nounwind willreturn }\nattributes #4 = { nobuiltin nounwind \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #5 = { argmemonly nofree nounwind willreturn writeonly }\nattributes #6 = { allocsize(0) }\nattributes #7 = { nounwind }\nattributes #8 = { noreturn }\n\n!llvm.module.flags = !{!0, !1}\n!llvm.ident = !{!2}\n\n!0 = !{i32 1, !\"wchar_size\", i32 4}\n!1 = !{i32 7, !\"uwtable\", i32 1}\n!2 = !{!\"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)\"}\n!3 = !{!4, !5, i64 0}\n!4 = !{!\"_ZTSNSt12_Vector_baseIiSaIiEE17_Vector_impl_dataE\", !5, i64 0, !5, i64 8, !5, i64 16}\n!5 = !{!\"any pointer\", !6, i64 0}\n!6 = !{!\"omnipotent char\", !7, i64 0}\n!7 = !{!\"Simple C++ TBAA\"}\n!8 = !{!4, !5, i64 8}\n!9 = !{!4, !5, i64 16}\n!10 = !{!11, !11, i64 0}\n!11 = !{!\"int\", !6, i64 0}\n!12 = distinct !{!12, !13}\n!13 = !{!\"llvm.loop.mustprogress\"}\n", "target": "This is the targeted source code:\n/*\nEveryone knows Fibonacci sequence, it was studied deeply by mathematicians in \nthe last couple centuries. However, what people don't know is Tribonacci sequence.\nTribonacci sequence is defined by the recurrence:\ntri(1) = 3\ntri(n) = 1 + n / 2, if n is even.\ntri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\nFor example:\ntri(2) = 1 + (2 / 2) = 2\ntri(4) = 3\ntri(3) = tri(2) + tri(1) + tri(4)\n       = 2 + 3 + 3 = 8 \nYou are given a non-negative integer number n, you have to a return a vector of the \nfirst n + 1 numbers of the Tribonacci sequence.\nExamples:\ntri(3) = {1, 3, 2, 8}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> tri(int n){\n\n    vector<int> out={1,3};\n    if (n==0) return {1};\n    for (int i=2;i<=n;i++)\n    {\n        if (i%2==0) out.push_back(1+i/2);\n        else out.push_back(out[i-1]+out[i-2]+1+(i+1)/2);\n    }\n    return out;\n}\n"}
{"input": "Convert this to C++:\n; ModuleID = '../../Human_xBenchmarks_164/CPP_131/CPP_131.cpp'\nsource_filename = \"../../Human_xBenchmarks_164/CPP_131/CPP_131.cpp\"\ntarget datalayout = \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\ntarget triple = \"x86_64-unknown-linux-gnu\"\n\n%\"class.std::__cxx11::basic_string\" = type { %\"struct.std::__cxx11::basic_string<char>::_Alloc_hider\", i64, %union.anon }\n%\"struct.std::__cxx11::basic_string<char>::_Alloc_hider\" = type { i8* }\n%union.anon = type { i64, [8 x i8] }\n%struct.__va_list_tag = type { i32, i32, i8*, i8* }\n\n$_ZN9__gnu_cxx12__to_xstringINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcEET_PFiPT0_mPKS8_P13__va_list_tagEmSB_z = comdat any\n\n@.str = private unnamed_addr constant [3 x i8] c\"%d\\00\", align 1\n\n; Function Attrs: uwtable\ndefine dso_local i32 @_Z6digitsi(i32 %0) local_unnamed_addr #0 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {\n  %2 = alloca %\"class.std::__cxx11::basic_string\", align 8\n  %3 = bitcast %\"class.std::__cxx11::basic_string\"* %2 to i8*\n  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %3) #7\n  call void (%\"class.std::__cxx11::basic_string\"*, i32 (i8*, i64, i8*, %struct.__va_list_tag*)*, i64, i8*, ...) @_ZN9__gnu_cxx12__to_xstringINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcEET_PFiPT0_mPKS8_P13__va_list_tagEmSB_z(%\"class.std::__cxx11::basic_string\"* nonnull sret(%\"class.std::__cxx11::basic_string\") align 8 %2, i32 (i8*, i64, i8*, %struct.__va_list_tag*)* nonnull @vsnprintf, i64 16, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %0)\n  %4 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %2, i64 0, i32 1\n  %5 = load i64, i64* %4, align 8, !tbaa !3\n  %6 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %2, i64 0, i32 0, i32 0\n  %7 = load i8*, i8** %6, align 8\n  %8 = icmp eq i64 %5, 0\n  br i1 %8, label %31, label %9\n\n9:                                                ; preds = %1\n  %10 = and i64 %5, 1\n  %11 = icmp eq i64 %5, 1\n  br i1 %11, label %14, label %12\n\n12:                                               ; preds = %9\n  %13 = and i64 %5, -2\n  br label %41\n\n14:                                               ; preds = %41, %9\n  %15 = phi i32 [ undef, %9 ], [ %62, %41 ]\n  %16 = phi i32 [ undef, %9 ], [ %64, %41 ]\n  %17 = phi i64 [ 0, %9 ], [ %65, %41 ]\n  %18 = phi i32 [ 0, %9 ], [ %64, %41 ]\n  %19 = phi i32 [ 1, %9 ], [ %62, %41 ]\n  %20 = icmp eq i64 %10, 0\n  br i1 %20, label %31, label %21\n\n21:                                               ; preds = %14\n  %22 = getelementptr inbounds i8, i8* %7, i64 %17\n  %23 = load i8, i8* %22, align 1, !tbaa !10\n  %24 = srem i8 %23, 2\n  %25 = icmp eq i8 %24, 1\n  %26 = select i1 %25, i32 1, i32 %18\n  %27 = sext i8 %23 to i32\n  %28 = add nsw i32 %27, -48\n  %29 = select i1 %25, i32 %28, i32 1\n  %30 = mul nsw i32 %29, %19\n  br label %31\n\n31:                                               ; preds = %21, %14, %1\n  %32 = phi i32 [ 1, %1 ], [ %15, %14 ], [ %30, %21 ]\n  %33 = phi i32 [ 0, %1 ], [ %16, %14 ], [ %26, %21 ]\n  %34 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %2, i64 0, i32 2\n  %35 = bitcast %union.anon* %34 to i8*\n  %36 = icmp eq i8* %7, %35\n  br i1 %36, label %38, label %37\n\n37:                                               ; preds = %31\n  call void @_ZdlPv(i8* %7) #7\n  br label %38\n\n38:                                               ; preds = %31, %37\n  %39 = icmp eq i32 %33, 0\n  %40 = select i1 %39, i32 0, i32 %32\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %3) #7\n  ret i32 %40\n\n41:                                               ; preds = %41, %12\n  %42 = phi i64 [ 0, %12 ], [ %65, %41 ]\n  %43 = phi i32 [ 0, %12 ], [ %64, %41 ]\n  %44 = phi i32 [ 1, %12 ], [ %62, %41 ]\n  %45 = phi i64 [ %13, %12 ], [ %66, %41 ]\n  %46 = getelementptr inbounds i8, i8* %7, i64 %42\n  %47 = load i8, i8* %46, align 1, !tbaa !10\n  %48 = sext i8 %47 to i32\n  %49 = srem i8 %47, 2\n  %50 = icmp eq i8 %49, 1\n  %51 = add nsw i32 %48, -48\n  %52 = select i1 %50, i32 %51, i32 1\n  %53 = mul nsw i32 %52, %44\n  %54 = or i64 %42, 1\n  %55 = getelementptr inbounds i8, i8* %7, i64 %54\n  %56 = load i8, i8* %55, align 1, !tbaa !10\n  %57 = sext i8 %56 to i32\n  %58 = srem i8 %56, 2\n  %59 = icmp eq i8 %58, 1\n  %60 = add nsw i32 %57, -48\n  %61 = select i1 %59, i32 %60, i32 1\n  %62 = mul nsw i32 %61, %53\n  %63 = select i1 %59, i1 true, i1 %50\n  %64 = select i1 %63, i32 1, i32 %43\n  %65 = add nuw nsw i64 %42, 2\n  %66 = add i64 %45, -2\n  %67 = icmp eq i64 %66, 0\n  br i1 %67, label %14, label %41, !llvm.loop !11\n}\n\n; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn\ndeclare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1\n\ndeclare dso_local i32 @__gxx_personality_v0(...)\n\n; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn\ndeclare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1\n\n; Function Attrs: uwtable\ndefine linkonce_odr dso_local void @_ZN9__gnu_cxx12__to_xstringINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcEET_PFiPT0_mPKS8_P13__va_list_tagEmSB_z(%\"class.std::__cxx11::basic_string\"* noalias sret(%\"class.std::__cxx11::basic_string\") align 8 %0, i32 (i8*, i64, i8*, %struct.__va_list_tag*)* %1, i64 %2, i8* %3, ...) local_unnamed_addr #0 comdat personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {\n  %5 = alloca i64, align 8\n  %6 = alloca [1 x %struct.__va_list_tag], align 16\n  %7 = alloca i8, i64 %2, align 16\n  %8 = bitcast [1 x %struct.__va_list_tag]* %6 to i8*\n  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %8) #7\n  %9 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %6, i64 0, i64 0\n  call void @llvm.va_start(i8* nonnull %8)\n  %10 = call i32 %1(i8* nonnull %7, i64 %2, i8* %3, %struct.__va_list_tag* nonnull %9)\n  call void @llvm.va_end(i8* nonnull %8)\n  %11 = sext i32 %10 to i64\n  %12 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 2\n  %13 = bitcast %\"class.std::__cxx11::basic_string\"* %0 to %union.anon**\n  store %union.anon* %12, %union.anon** %13, align 8, !tbaa !13\n  %14 = bitcast %union.anon* %12 to i8*\n  %15 = bitcast i64* %5 to i8*\n  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %15) #7\n  store i64 %11, i64* %5, align 8, !tbaa !14\n  %16 = icmp ugt i32 %10, 15\n  br i1 %16, label %17, label %22\n\n17:                                               ; preds = %4\n  %18 = call i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %0, i64* nonnull align 8 dereferenceable(8) %5, i64 0)\n  %19 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 0, i32 0\n  store i8* %18, i8** %19, align 8, !tbaa !15\n  %20 = load i64, i64* %5, align 8, !tbaa !14\n  %21 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 2, i32 0\n  store i64 %20, i64* %21, align 8, !tbaa !10\n  br label %22\n\n22:                                               ; preds = %17, %4\n  %23 = phi i8* [ %18, %17 ], [ %14, %4 ]\n  switch i64 %11, label %26 [\n    i64 1, label %24\n    i64 0, label %27\n  ]\n\n24:                                               ; preds = %22\n  %25 = load i8, i8* %7, align 16, !tbaa !10\n  store i8 %25, i8* %23, align 1, !tbaa !10\n  br label %27\n\n26:                                               ; preds = %22\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %23, i8* nonnull align 16 %7, i64 %11, i1 false) #7\n  br label %27\n\n27:                                               ; preds = %26, %24, %22\n  %28 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 0, i32 0\n  %29 = load i64, i64* %5, align 8, !tbaa !14\n  %30 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 1\n  store i64 %29, i64* %30, align 8, !tbaa !3\n  %31 = load i8*, i8** %28, align 8, !tbaa !15\n  %32 = getelementptr inbounds i8, i8* %31, i64 %29\n  store i8 0, i8* %32, align 1, !tbaa !10\n  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %15) #7\n  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %8) #7\n  ret void\n}\n\n; Function Attrs: nofree nounwind\ndeclare dso_local noundef i32 @vsnprintf(i8* nocapture noundef, i64 noundef, i8* nocapture noundef readonly, %struct.__va_list_tag* noundef) #2\n\n; Function Attrs: mustprogress nofree nosync nounwind willreturn\ndeclare void @llvm.va_start(i8*) #3\n\n; Function Attrs: mustprogress nofree nosync nounwind willreturn\ndeclare void @llvm.va_end(i8*) #3\n\ndeclare dso_local i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32), i64* nonnull align 8 dereferenceable(8), i64) local_unnamed_addr #4\n\n; Function Attrs: argmemonly mustprogress nofree nounwind willreturn\ndeclare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #5\n\n; Function Attrs: nobuiltin nounwind\ndeclare dso_local void @_ZdlPv(i8*) local_unnamed_addr #6\n\nattributes #0 = { uwtable \"frame-pointer\"=\"none\" \"min-legal-vector-width\"=\"0\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #1 = { argmemonly mustprogress nofree nosync nounwind willreturn }\nattributes #2 = { nofree nounwind \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #3 = { mustprogress nofree nosync nounwind willreturn }\nattributes #4 = { \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #5 = { argmemonly mustprogress nofree nounwind willreturn }\nattributes #6 = { nobuiltin nounwind \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #7 = { nounwind }\n\n!llvm.module.flags = !{!0, !1}\n!llvm.ident = !{!2}\n\n!0 = !{i32 1, !\"wchar_size\", i32 4}\n!1 = !{i32 7, !\"uwtable\", i32 1}\n!2 = !{!\"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)\"}\n!3 = !{!4, !9, i64 8}\n!4 = !{!\"_ZTSNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE\", !5, i64 0, !9, i64 8, !7, i64 16}\n!5 = !{!\"_ZTSNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderE\", !6, i64 0}\n!6 = !{!\"any pointer\", !7, i64 0}\n!7 = !{!\"omnipotent char\", !8, i64 0}\n!8 = !{!\"Simple C++ TBAA\"}\n!9 = !{!\"long\", !7, i64 0}\n!10 = !{!7, !7, i64 0}\n!11 = distinct !{!11, !12}\n!12 = !{!\"llvm.loop.mustprogress\"}\n!13 = !{!5, !6, i64 0}\n!14 = !{!9, !9, i64 0}\n!15 = !{!4, !6, i64 0}\n", "target": "This is the targeted source code:\n/*\nGiven a positive integer n, return the product of the odd digits.\nReturn 0 if all digits are even.\nFor example:\ndigits(1)  == 1\ndigits(4)  == 0\ndigits(235) == 15\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nint digits(int n){\n\n    int prod=1,has=0;\n    string s=to_string(n);\n    for (int i=0;i<s.length();i++)\n        if (s[i]%2==1) \n        {\n            has=1;\n            prod=prod*(s[i]-48);\n        }\n    if (has==0) return 0;\n    return prod;\n}\n"}
{"input": "Convert this to C++:\n; ModuleID = '../../Human_xBenchmarks_164/CPP_132/CPP_132.cpp'\nsource_filename = \"../../Human_xBenchmarks_164/CPP_132/CPP_132.cpp\"\ntarget datalayout = \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\ntarget triple = \"x86_64-unknown-linux-gnu\"\n\n%\"class.std::__cxx11::basic_string\" = type { %\"struct.std::__cxx11::basic_string<char>::_Alloc_hider\", i64, %union.anon }\n%\"struct.std::__cxx11::basic_string<char>::_Alloc_hider\" = type { i8* }\n%union.anon = type { i64, [8 x i8] }\n\n; Function Attrs: mustprogress nofree norecurse nosync nounwind readonly uwtable willreturn\ndefine dso_local zeroext i1 @_Z9is_nestedNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE(%\"class.std::__cxx11::basic_string\"* nocapture readonly %0) local_unnamed_addr #0 {\n  %2 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 1\n  %3 = load i64, i64* %2, align 8, !tbaa !3\n  %4 = icmp eq i64 %3, 0\n  br i1 %4, label %39, label %5\n\n5:                                                ; preds = %1\n  %6 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 0, i32 0\n  %7 = load i8*, i8** %6, align 8, !tbaa !10\n  %8 = load i8, i8* %7, align 1, !tbaa !11\n  %9 = icmp eq i8 %8, 91\n  %10 = zext i1 %9 to i32\n  %11 = icmp eq i8 %8, 93\n  %12 = sext i1 %11 to i32\n  %13 = add nsw i32 %10, %12\n  %14 = icmp sgt i32 %13, 0\n  %15 = select i1 %14, i32 %13, i32 0\n  br label %16\n\n16:                                               ; preds = %5, %21\n  %17 = phi i64 [ 1, %5 ], [ %36, %21 ]\n  %18 = phi i32 [ %15, %5 ], [ %33, %21 ]\n  %19 = phi i32 [ %15, %5 ], [ %31, %21 ]\n  %20 = icmp eq i64 %17, %3\n  br i1 %20, label %37, label %21, !llvm.loop !12\n\n21:                                               ; preds = %16\n  %22 = getelementptr inbounds i8, i8* %7, i64 %17\n  %23 = load i8, i8* %22, align 1, !tbaa !11\n  %24 = icmp eq i8 %23, 91\n  %25 = zext i1 %24 to i32\n  %26 = add nuw nsw i32 %19, %25\n  %27 = icmp eq i8 %23, 93\n  %28 = sext i1 %27 to i32\n  %29 = add nsw i32 %26, %28\n  %30 = icmp sgt i32 %29, 0\n  %31 = select i1 %30, i32 %29, i32 0\n  %32 = icmp ugt i32 %31, %18\n  %33 = select i1 %32, i32 %31, i32 %18\n  %34 = add nsw i32 %33, -2\n  %35 = icmp sgt i32 %31, %34\n  %36 = add nuw i64 %17, 1\n  br i1 %35, label %16, label %37, !llvm.loop !12\n\n37:                                               ; preds = %16, %21\n  %38 = icmp ugt i64 %3, %17\n  br label %39\n\n39:                                               ; preds = %37, %1\n  %40 = phi i1 [ false, %1 ], [ %38, %37 ]\n  ret i1 %40\n}\n\nattributes #0 = { mustprogress nofree norecurse nosync nounwind readonly uwtable willreturn \"frame-pointer\"=\"none\" \"min-legal-vector-width\"=\"0\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\n\n!llvm.module.flags = !{!0, !1}\n!llvm.ident = !{!2}\n\n!0 = !{i32 1, !\"wchar_size\", i32 4}\n!1 = !{i32 7, !\"uwtable\", i32 1}\n!2 = !{!\"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)\"}\n!3 = !{!4, !9, i64 8}\n!4 = !{!\"_ZTSNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE\", !5, i64 0, !9, i64 8, !7, i64 16}\n!5 = !{!\"_ZTSNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderE\", !6, i64 0}\n!6 = !{!\"any pointer\", !7, i64 0}\n!7 = !{!\"omnipotent char\", !8, i64 0}\n!8 = !{!\"Simple C++ TBAA\"}\n!9 = !{!\"long\", !7, i64 0}\n!10 = !{!4, !6, i64 0}\n!11 = !{!7, !7, i64 0}\n!12 = distinct !{!12, !13}\n!13 = !{!\"llvm.loop.mustprogress\"}\n", "target": "This is the targeted source code:\n/*\nCreate a function that takes a string as input which contains only square brackets.\nThe function should return true if and only if there is a valid subsequence of brackets\nwhere at least one bracket in the subsequence is nested.\n\nis_nested(\"[[]]\") \u279e true\nis_nested(\"[]]]]]]][[[[[]\") \u279e false\nis_nested(\"[][]\") \u279e false\nis_nested(\"[]\") \u279e false\nis_nested(\"[[][]]\") \u279e true\nis_nested(\"[[]][[\") \u279e true\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool is_nested(string str){\n\n    int count=0,maxcount=0;\n    for (int i=0;i<str.length();i++)\n    {\n        if (str[i]=='[') count+=1;\n        if (str[i]==']') count-=1;\n        if (count<0) count=0;\n        if (count>maxcount) maxcount=count;\n        if (count<=maxcount-2) return  true;\n    }\n    return false;\n}\n"}
{"input": "Convert this to C++:\n; ModuleID = '../../Human_xBenchmarks_164/CPP_133/CPP_133.cpp'\nsource_filename = \"../../Human_xBenchmarks_164/CPP_133/CPP_133.cpp\"\ntarget datalayout = \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\ntarget triple = \"x86_64-unknown-linux-gnu\"\n\n%\"class.std::vector\" = type { %\"struct.std::_Vector_base\" }\n%\"struct.std::_Vector_base\" = type { %\"struct.std::_Vector_base<float, std::allocator<float>>::_Vector_impl\" }\n%\"struct.std::_Vector_base<float, std::allocator<float>>::_Vector_impl\" = type { %\"struct.std::_Vector_base<float, std::allocator<float>>::_Vector_impl_data\" }\n%\"struct.std::_Vector_base<float, std::allocator<float>>::_Vector_impl_data\" = type { float*, float*, float* }\n\n; Function Attrs: mustprogress nofree nosync nounwind readonly uwtable willreturn\ndefine dso_local i32 @_Z11sum_squaresSt6vectorIfSaIfEE(%\"class.std::vector\"* nocapture readonly %0) local_unnamed_addr #0 {\n  %2 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0, i64 0, i32 0, i32 0, i32 0, i32 1\n  %3 = load float*, float** %2, align 8, !tbaa !3\n  %4 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0, i64 0, i32 0, i32 0, i32 0, i32 0\n  %5 = load float*, float** %4, align 8, !tbaa !8\n  %6 = ptrtoint float* %3 to i64\n  %7 = ptrtoint float* %5 to i64\n  %8 = sub i64 %6, %7\n  %9 = icmp eq i64 %8, 0\n  br i1 %9, label %31, label %10\n\n10:                                               ; preds = %1\n  %11 = ashr exact i64 %8, 2\n  %12 = call i64 @llvm.umax.i64(i64 %11, i64 1)\n  %13 = and i64 %12, 1\n  %14 = icmp ult i64 %11, 2\n  br i1 %14, label %19, label %15\n\n15:                                               ; preds = %10\n  %16 = and i64 %12, -2\n  br label %33\n\n17:                                               ; preds = %33\n  %18 = sitofp i32 %51 to float\n  br label %19\n\n19:                                               ; preds = %17, %10\n  %20 = phi i32 [ undef, %10 ], [ %51, %17 ]\n  %21 = phi i64 [ 0, %10 ], [ %52, %17 ]\n  %22 = phi float [ 0.000000e+00, %10 ], [ %18, %17 ]\n  %23 = icmp eq i64 %13, 0\n  br i1 %23, label %31, label %24\n\n24:                                               ; preds = %19\n  %25 = getelementptr inbounds float, float* %5, i64 %21\n  %26 = load float, float* %25, align 4, !tbaa !9\n  %27 = tail call float @llvm.ceil.f32(float %26) #3\n  %28 = fmul float %27, %27\n  %29 = fadd float %28, %22\n  %30 = fptosi float %29 to i32\n  br label %31\n\n31:                                               ; preds = %24, %19, %1\n  %32 = phi i32 [ 0, %1 ], [ %20, %19 ], [ %30, %24 ]\n  ret i32 %32\n\n33:                                               ; preds = %33, %15\n  %34 = phi i64 [ 0, %15 ], [ %52, %33 ]\n  %35 = phi i32 [ 0, %15 ], [ %51, %33 ]\n  %36 = phi i64 [ %16, %15 ], [ %53, %33 ]\n  %37 = getelementptr inbounds float, float* %5, i64 %34\n  %38 = load float, float* %37, align 4, !tbaa !9\n  %39 = tail call float @llvm.ceil.f32(float %38) #3\n  %40 = fmul float %39, %39\n  %41 = sitofp i32 %35 to float\n  %42 = fadd float %40, %41\n  %43 = fptosi float %42 to i32\n  %44 = or i64 %34, 1\n  %45 = getelementptr inbounds float, float* %5, i64 %44\n  %46 = load float, float* %45, align 4, !tbaa !9\n  %47 = tail call float @llvm.ceil.f32(float %46) #3\n  %48 = fmul float %47, %47\n  %49 = sitofp i32 %43 to float\n  %50 = fadd float %48, %49\n  %51 = fptosi float %50 to i32\n  %52 = add nuw nsw i64 %34, 2\n  %53 = add i64 %36, -2\n  %54 = icmp eq i64 %53, 0\n  br i1 %54, label %17, label %33, !llvm.loop !11\n}\n\n; Function Attrs: mustprogress nofree nosync nounwind readnone speculatable willreturn\ndeclare float @llvm.ceil.f32(float) #1\n\n; Function Attrs: nofree nosync nounwind readnone speculatable willreturn\ndeclare i64 @llvm.umax.i64(i64, i64) #2\n\nattributes #0 = { mustprogress nofree nosync nounwind readonly uwtable willreturn \"frame-pointer\"=\"none\" \"min-legal-vector-width\"=\"0\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #1 = { mustprogress nofree nosync nounwind readnone speculatable willreturn }\nattributes #2 = { nofree nosync nounwind readnone speculatable willreturn }\nattributes #3 = { nounwind }\n\n!llvm.module.flags = !{!0, !1}\n!llvm.ident = !{!2}\n\n!0 = !{i32 1, !\"wchar_size\", i32 4}\n!1 = !{i32 7, !\"uwtable\", i32 1}\n!2 = !{!\"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)\"}\n!3 = !{!4, !5, i64 8}\n!4 = !{!\"_ZTSNSt12_Vector_baseIfSaIfEE17_Vector_impl_dataE\", !5, i64 0, !5, i64 8, !5, i64 16}\n!5 = !{!\"any pointer\", !6, i64 0}\n!6 = !{!\"omnipotent char\", !7, i64 0}\n!7 = !{!\"Simple C++ TBAA\"}\n!8 = !{!4, !5, i64 0}\n!9 = !{!10, !10, i64 0}\n!10 = !{!\"float\", !6, i64 0}\n!11 = distinct !{!11, !12}\n!12 = !{!\"llvm.loop.mustprogress\"}\n", "target": "This is the targeted source code:\n/*\nYou are given a vector of numbers.\nYou need to return the sum of squared numbers in the given vector,\nround each element in the vector to the upper int(Ceiling) first.\nExamples:\nFor lst = {1,2,3} the output should be 14\nFor lst = {1,4,9} the output should be 98\nFor lst = {1,3,5,7} the output should be 84\nFor lst = {1.4,4.2,0} the output should be 29\nFor lst = {-2.4,1,1} the output should be 6\n\n\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nint sum_squares(vector<float> lst){\n\n    int sum=0;\n    for (int i=0;i<lst.size();i++)\n        sum+=ceil(lst[i])*ceil(lst[i]);\n    return sum;\n}\n"}
{"input": "Convert this to C++:\n; ModuleID = '../../Human_xBenchmarks_164/CPP_134/CPP_134.cpp'\nsource_filename = \"../../Human_xBenchmarks_164/CPP_134/CPP_134.cpp\"\ntarget datalayout = \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\ntarget triple = \"x86_64-unknown-linux-gnu\"\n\n%\"class.std::__cxx11::basic_string\" = type { %\"struct.std::__cxx11::basic_string<char>::_Alloc_hider\", i64, %union.anon }\n%\"struct.std::__cxx11::basic_string<char>::_Alloc_hider\" = type { i8* }\n%union.anon = type { i64, [8 x i8] }\n\n; Function Attrs: mustprogress nofree norecurse nosync nounwind readonly uwtable willreturn\ndefine dso_local zeroext i1 @_Z30check_if_last_char_is_a_letterNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE(%\"class.std::__cxx11::basic_string\"* nocapture readonly %0) local_unnamed_addr #0 {\n  %2 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 1\n  %3 = load i64, i64* %2, align 8, !tbaa !3\n  %4 = icmp eq i64 %3, 0\n  br i1 %4, label %31, label %5\n\n5:                                                ; preds = %1\n  %6 = add i64 %3, -1\n  %7 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 0, i32 0\n  %8 = load i8*, i8** %7, align 8, !tbaa !10\n  %9 = getelementptr inbounds i8, i8* %8, i64 %6\n  %10 = load i8, i8* %9, align 1, !tbaa !11\n  %11 = icmp slt i8 %10, 65\n  br i1 %11, label %31, label %12\n\n12:                                               ; preds = %5\n  %13 = icmp sgt i8 %10, 90\n  br i1 %13, label %25, label %14\n\n14:                                               ; preds = %25, %12\n  %15 = icmp eq i64 %3, 1\n  br i1 %15, label %31, label %16\n\n16:                                               ; preds = %14\n  %17 = add i64 %3, -2\n  %18 = getelementptr inbounds i8, i8* %8, i64 %17\n  %19 = load i8, i8* %18, align 1, !tbaa !11\n  %20 = add i8 %19, -65\n  %21 = icmp ult i8 %20, 26\n  br i1 %21, label %31, label %22\n\n22:                                               ; preds = %16\n  %23 = add i8 %19, -97\n  %24 = icmp ugt i8 %23, 25\n  br label %31\n\n25:                                               ; preds = %12\n  %26 = add i8 %10, -91\n  %27 = zext i8 %26 to i64\n  %28 = lshr i64 133143986239, %27\n  %29 = and i64 %28, 1\n  %30 = icmp eq i64 %29, 0\n  br i1 %30, label %14, label %31\n\n31:                                               ; preds = %25, %22, %5, %14, %16, %1\n  %32 = phi i1 [ false, %1 ], [ false, %5 ], [ true, %14 ], [ false, %16 ], [ %24, %22 ], [ false, %25 ]\n  ret i1 %32\n}\n\nattributes #0 = { mustprogress nofree norecurse nosync nounwind readonly uwtable willreturn \"frame-pointer\"=\"none\" \"min-legal-vector-width\"=\"0\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\n\n!llvm.module.flags = !{!0, !1}\n!llvm.ident = !{!2}\n\n!0 = !{i32 1, !\"wchar_size\", i32 4}\n!1 = !{i32 7, !\"uwtable\", i32 1}\n!2 = !{!\"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)\"}\n!3 = !{!4, !9, i64 8}\n!4 = !{!\"_ZTSNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE\", !5, i64 0, !9, i64 8, !7, i64 16}\n!5 = !{!\"_ZTSNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderE\", !6, i64 0}\n!6 = !{!\"any pointer\", !7, i64 0}\n!7 = !{!\"omnipotent char\", !8, i64 0}\n!8 = !{!\"Simple C++ TBAA\"}\n!9 = !{!\"long\", !7, i64 0}\n!10 = !{!4, !6, i64 0}\n!11 = !{!7, !7, i64 0}\n", "target": "This is the targeted source code:\n/*\nCreate a function that returns true if the last character\nof a given string is an alphabetical character and is not\na part of a word, and false otherwise.\nNote: \"word\" is a group of characters separated by space.\n\nExamples:\ncheck_if_last_char_is_a_letter(\"apple pie\") \u279e false\ncheck_if_last_char_is_a_le/home/anonymous/LLMs-in-IR/Human_xBenchmarks_164/CPP_139tter(\"apple pi e\") \u279e true\ncheck_if_last_char_is_a_letter(\"apple pi e \") \u279e false\ncheck_if_last_char_is_a_letter(\"\") \u279e false \n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool check_if_last_char_is_a_letter(string txt){\n\n    if (txt.length()==0) return false;\n    char chr=txt[txt.length()-1];\n    if (chr<65 or (chr>90 and chr<97) or chr>122) return false;\n    if (txt.length()==1) return true;\n    chr=txt[txt.length()-2];\n    if ((chr>=65 and chr<=90) or (chr>=97 and chr<=122)) return false;\n    return true;\n}\n"}
{"input": "Convert this to C++:\n; ModuleID = '../../Human_xBenchmarks_164/CPP_135/CPP_135.cpp'\nsource_filename = \"../../Human_xBenchmarks_164/CPP_135/CPP_135.cpp\"\ntarget datalayout = \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\ntarget triple = \"x86_64-unknown-linux-gnu\"\n\n%\"class.std::vector\" = type { %\"struct.std::_Vector_base\" }\n%\"struct.std::_Vector_base\" = type { %\"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl\" }\n%\"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl\" = type { %\"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl_data\" }\n%\"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl_data\" = type { i32*, i32*, i32* }\n\n; Function Attrs: mustprogress nofree norecurse nosync nounwind readonly uwtable willreturn\ndefine dso_local i32 @_Z11can_arrangeSt6vectorIiSaIiEE(%\"class.std::vector\"* nocapture readonly %0) local_unnamed_addr #0 {\n  %2 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0, i64 0, i32 0, i32 0, i32 0, i32 1\n  %3 = load i32*, i32** %2, align 8, !tbaa !3\n  %4 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0, i64 0, i32 0, i32 0, i32 0, i32 0\n  %5 = load i32*, i32** %4, align 8, !tbaa !8\n  %6 = ptrtoint i32* %3 to i64\n  %7 = ptrtoint i32* %5 to i64\n  %8 = sub i64 %6, %7\n  %9 = icmp eq i64 %8, 0\n  br i1 %9, label %36, label %10\n\n10:                                               ; preds = %1\n  %11 = ashr exact i64 %8, 2\n  %12 = call i64 @llvm.umax.i64(i64 %11, i64 1)\n  %13 = add i64 %12, -1\n  %14 = and i64 %12, 3\n  %15 = icmp ult i64 %13, 3\n  br i1 %15, label %18, label %16\n\n16:                                               ; preds = %10\n  %17 = and i64 %12, -4\n  br label %38\n\n18:                                               ; preds = %38, %10\n  %19 = phi i32 [ undef, %10 ], [ %68, %38 ]\n  %20 = phi i64 [ 0, %10 ], [ %69, %38 ]\n  %21 = phi i32 [ -1, %10 ], [ %68, %38 ]\n  %22 = icmp eq i64 %14, 0\n  br i1 %22, label %36, label %23\n\n23:                                               ; preds = %18, %23\n  %24 = phi i64 [ %33, %23 ], [ %20, %18 ]\n  %25 = phi i32 [ %32, %23 ], [ %21, %18 ]\n  %26 = phi i64 [ %34, %23 ], [ %14, %18 ]\n  %27 = getelementptr inbounds i32, i32* %5, i64 %24\n  %28 = load i32, i32* %27, align 4, !tbaa !9\n  %29 = sext i32 %28 to i64\n  %30 = icmp slt i64 %24, %29\n  %31 = trunc i64 %24 to i32\n  %32 = select i1 %30, i32 %25, i32 %31\n  %33 = add nuw nsw i64 %24, 1\n  %34 = add i64 %26, -1\n  %35 = icmp eq i64 %34, 0\n  br i1 %35, label %36, label %23, !llvm.loop !11\n\n36:                                               ; preds = %18, %23, %1\n  %37 = phi i32 [ -1, %1 ], [ %19, %18 ], [ %32, %23 ]\n  ret i32 %37\n\n38:                                               ; preds = %38, %16\n  %39 = phi i64 [ 0, %16 ], [ %69, %38 ]\n  %40 = phi i32 [ -1, %16 ], [ %68, %38 ]\n  %41 = phi i64 [ %17, %16 ], [ %70, %38 ]\n  %42 = getelementptr inbounds i32, i32* %5, i64 %39\n  %43 = load i32, i32* %42, align 4, !tbaa !9\n  %44 = sext i32 %43 to i64\n  %45 = icmp slt i64 %39, %44\n  %46 = trunc i64 %39 to i32\n  %47 = select i1 %45, i32 %40, i32 %46\n  %48 = or i64 %39, 1\n  %49 = getelementptr inbounds i32, i32* %5, i64 %48\n  %50 = load i32, i32* %49, align 4, !tbaa !9\n  %51 = sext i32 %50 to i64\n  %52 = icmp slt i64 %48, %51\n  %53 = trunc i64 %48 to i32\n  %54 = select i1 %52, i32 %47, i32 %53\n  %55 = or i64 %39, 2\n  %56 = getelementptr inbounds i32, i32* %5, i64 %55\n  %57 = load i32, i32* %56, align 4, !tbaa !9\n  %58 = sext i32 %57 to i64\n  %59 = icmp slt i64 %55, %58\n  %60 = trunc i64 %55 to i32\n  %61 = select i1 %59, i32 %54, i32 %60\n  %62 = or i64 %39, 3\n  %63 = getelementptr inbounds i32, i32* %5, i64 %62\n  %64 = load i32, i32* %63, align 4, !tbaa !9\n  %65 = sext i32 %64 to i64\n  %66 = icmp slt i64 %62, %65\n  %67 = trunc i64 %62 to i32\n  %68 = select i1 %66, i32 %61, i32 %67\n  %69 = add nuw nsw i64 %39, 4\n  %70 = add i64 %41, -4\n  %71 = icmp eq i64 %70, 0\n  br i1 %71, label %18, label %38, !llvm.loop !13\n}\n\n; Function Attrs: nofree nosync nounwind readnone speculatable willreturn\ndeclare i64 @llvm.umax.i64(i64, i64) #1\n\nattributes #0 = { mustprogress nofree norecurse nosync nounwind readonly uwtable willreturn \"frame-pointer\"=\"none\" \"min-legal-vector-width\"=\"0\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #1 = { nofree nosync nounwind readnone speculatable willreturn }\n\n!llvm.module.flags = !{!0, !1}\n!llvm.ident = !{!2}\n\n!0 = !{i32 1, !\"wchar_size\", i32 4}\n!1 = !{i32 7, !\"uwtable\", i32 1}\n!2 = !{!\"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)\"}\n!3 = !{!4, !5, i64 8}\n!4 = !{!\"_ZTSNSt12_Vector_baseIiSaIiEE17_Vector_impl_dataE\", !5, i64 0, !5, i64 8, !5, i64 16}\n!5 = !{!\"any pointer\", !6, i64 0}\n!6 = !{!\"omnipotent char\", !7, i64 0}\n!7 = !{!\"Simple C++ TBAA\"}\n!8 = !{!4, !5, i64 0}\n!9 = !{!10, !10, i64 0}\n!10 = !{!\"int\", !6, i64 0}\n!11 = distinct !{!11, !12}\n!12 = !{!\"llvm.loop.unroll.disable\"}\n!13 = distinct !{!13, !14}\n!14 = !{!\"llvm.loop.mustprogress\"}\n", "target": "This is the targeted source code:\n/*\nCreate a function which returns the largest index of an element which\nis not greater than or equal to the element immediately preceding it. If\nno such element exists then return -1. The given vector will not contain\nduplicate values.\n\nExamples:\ncan_arrange({1,2,4,3,5}) = 3\ncan_arrange({1,2,3}) = -1\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint can_arrange(vector<int> arr){\n\n    int max=-1;\n    for (int i=0;i<arr.size();i++)\n    if (arr[i]<=i) max=i;\n    return max;\n}\n"}
{"input": "Convert this to C++:\n; ModuleID = '../../Human_xBenchmarks_164/CPP_136/CPP_136.cpp'\nsource_filename = \"../../Human_xBenchmarks_164/CPP_136/CPP_136.cpp\"\ntarget datalayout = \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\ntarget triple = \"x86_64-unknown-linux-gnu\"\n\n%\"class.std::vector\" = type { %\"struct.std::_Vector_base\" }\n%\"struct.std::_Vector_base\" = type { %\"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl\" }\n%\"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl\" = type { %\"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl_data\" }\n%\"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl_data\" = type { i32*, i32*, i32* }\n\n; Function Attrs: uwtable\ndefine dso_local void @_Z25largest_smallest_integersSt6vectorIiSaIiEE(%\"class.std::vector\"* noalias nocapture sret(%\"class.std::vector\") align 8 %0, %\"class.std::vector\"* nocapture readonly %1) local_unnamed_addr #0 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {\n  %3 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %1, i64 0, i32 0, i32 0, i32 0, i32 1\n  %4 = load i32*, i32** %3, align 8, !tbaa !3\n  %5 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %1, i64 0, i32 0, i32 0, i32 0, i32 0\n  %6 = load i32*, i32** %5, align 8, !tbaa !8\n  %7 = ptrtoint i32* %4 to i64\n  %8 = ptrtoint i32* %6 to i64\n  %9 = sub i64 %7, %8\n  %10 = icmp eq i64 %9, 0\n  br i1 %10, label %14, label %11\n\n11:                                               ; preds = %2\n  %12 = ashr exact i64 %9, 2\n  %13 = call i64 @llvm.umax.i64(i64 %12, i64 1)\n  br label %28\n\n14:                                               ; preds = %47, %2\n  %15 = phi i32 [ 0, %2 ], [ %49, %47 ]\n  %16 = phi i32 [ 0, %2 ], [ %48, %47 ]\n  %17 = bitcast %\"class.std::vector\"* %0 to i8*\n  tail call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(24) %17, i8 0, i64 24, i1 false) #4\n  %18 = call noalias nonnull i8* @_Znwm(i64 8) #5\n  %19 = bitcast i8* %18 to i32*\n  %20 = bitcast %\"class.std::vector\"* %0 to i8**\n  store i8* %18, i8** %20, align 8, !tbaa !8\n  %21 = getelementptr inbounds i8, i8* %18, i64 8\n  %22 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0, i64 0, i32 0, i32 0, i32 0, i32 2\n  %23 = bitcast i32** %22 to i8**\n  store i8* %21, i8** %23, align 8, !tbaa !9\n  store i32 %16, i32* %19, align 4\n  %24 = getelementptr inbounds i8, i8* %18, i64 4\n  %25 = bitcast i8* %24 to i32*\n  store i32 %15, i32* %25, align 4\n  %26 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0, i64 0, i32 0, i32 0, i32 0, i32 1\n  %27 = bitcast i32** %26 to i8**\n  store i8* %21, i8** %27, align 8, !tbaa !3\n  ret void\n\n28:                                               ; preds = %11, %47\n  %29 = phi i64 [ 0, %11 ], [ %50, %47 ]\n  %30 = phi i32 [ 0, %11 ], [ %48, %47 ]\n  %31 = phi i32 [ 0, %11 ], [ %49, %47 ]\n  %32 = getelementptr inbounds i32, i32* %6, i64 %29\n  %33 = load i32, i32* %32, align 4, !tbaa !10\n  %34 = icmp slt i32 %33, 0\n  br i1 %34, label %35, label %40\n\n35:                                               ; preds = %28\n  %36 = icmp eq i32 %30, 0\n  %37 = icmp sgt i32 %33, %30\n  %38 = select i1 %36, i1 true, i1 %37\n  %39 = select i1 %38, i32 %33, i32 %30\n  br label %47\n\n40:                                               ; preds = %28\n  %41 = icmp eq i32 %33, 0\n  br i1 %41, label %47, label %42\n\n42:                                               ; preds = %40\n  %43 = icmp eq i32 %31, 0\n  %44 = icmp slt i32 %33, %31\n  %45 = select i1 %43, i1 true, i1 %44\n  %46 = select i1 %45, i32 %33, i32 %31\n  br label %47\n\n47:                                               ; preds = %42, %35, %40\n  %48 = phi i32 [ %30, %40 ], [ %39, %35 ], [ %30, %42 ]\n  %49 = phi i32 [ %31, %40 ], [ %31, %35 ], [ %46, %42 ]\n  %50 = add nuw nsw i64 %29, 1\n  %51 = icmp eq i64 %50, %13\n  br i1 %51, label %14, label %28, !llvm.loop !12\n}\n\ndeclare dso_local i32 @__gxx_personality_v0(...)\n\n; Function Attrs: nobuiltin allocsize(0)\ndeclare dso_local nonnull i8* @_Znwm(i64) local_unnamed_addr #1\n\n; Function Attrs: argmemonly nofree nounwind willreturn writeonly\ndeclare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2\n\n; Function Attrs: nofree nosync nounwind readnone speculatable willreturn\ndeclare i64 @llvm.umax.i64(i64, i64) #3\n\nattributes #0 = { uwtable \"frame-pointer\"=\"none\" \"min-legal-vector-width\"=\"0\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #1 = { nobuiltin allocsize(0) \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #2 = { argmemonly nofree nounwind willreturn writeonly }\nattributes #3 = { nofree nosync nounwind readnone speculatable willreturn }\nattributes #4 = { nounwind }\nattributes #5 = { allocsize(0) }\n\n!llvm.module.flags = !{!0, !1}\n!llvm.ident = !{!2}\n\n!0 = !{i32 1, !\"wchar_size\", i32 4}\n!1 = !{i32 7, !\"uwtable\", i32 1}\n!2 = !{!\"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)\"}\n!3 = !{!4, !5, i64 8}\n!4 = !{!\"_ZTSNSt12_Vector_baseIiSaIiEE17_Vector_impl_dataE\", !5, i64 0, !5, i64 8, !5, i64 16}\n!5 = !{!\"any pointer\", !6, i64 0}\n!6 = !{!\"omnipotent char\", !7, i64 0}\n!7 = !{!\"Simple C++ TBAA\"}\n!8 = !{!4, !5, i64 0}\n!9 = !{!4, !5, i64 16}\n!10 = !{!11, !11, i64 0}\n!11 = !{!\"int\", !6, i64 0}\n!12 = distinct !{!12, !13}\n!13 = !{!\"llvm.loop.mustprogress\"}\n", "target": "This is the targeted source code:\n/*\nCreate a function that returns a vector (a, b), where \"a\" is\nthe largest of negative integers, and \"b\" is the smallest\nof positive integers in a vector.\nIf there is no negative or positive integers, return them as 0.\n\nExamples:\nlargest_smallest_integers({2, 4, 1, 3, 5, 7}) == {0, 1}\nlargest_smallest_integers({}) == {0,0}\nlargest_smallest_integers({0}) == {0,0}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> largest_smallest_integers(vector<int> lst){\n\n    int maxneg=0,minpos=0;\n    for (int i=0;i<lst.size();i++)\n    {\n        if (lst[i]<0 and (maxneg==0 or lst[i]>maxneg)) maxneg=lst[i];\n        if (lst[i]>0 and (minpos==0 or lst[i]<minpos)) minpos=lst[i];\n    }\n    return {maxneg,minpos};\n}\n"}
{"input": "Convert this to C++:\n; ModuleID = '../../Human_xBenchmarks_164/CPP_137/CPP_137.cpp'\nsource_filename = \"../../Human_xBenchmarks_164/CPP_137/CPP_137.cpp\"\ntarget datalayout = \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\ntarget triple = \"x86_64-unknown-linux-gnu\"\n\n%\"class.boost::any\" = type { %\"class.boost::any::placeholder\"* }\n%\"class.boost::any::placeholder\" = type { i32 (...)** }\n%\"class.boost::bad_any_cast\" = type { %\"class.std::bad_cast\" }\n%\"class.std::bad_cast\" = type { %\"class.std::exception\" }\n%\"class.std::exception\" = type { i32 (...)** }\n%\"class.std::__cxx11::basic_string\" = type { %\"struct.std::__cxx11::basic_string<char>::_Alloc_hider\", i64, %union.anon }\n%\"struct.std::__cxx11::basic_string<char>::_Alloc_hider\" = type { i8* }\n%union.anon = type { i64, [8 x i8] }\n%\"class.std::type_info\" = type { i32 (...)**, i8* }\n%\"class.boost::any::holder.0\" = type <{ %\"class.boost::any::placeholder\", i32, [4 x i8] }>\n%\"class.boost::any::holder.1\" = type { %\"class.boost::any::placeholder\", double }\n%\"class.boost::any::holder\" = type { %\"class.boost::any::placeholder\", %\"class.std::__cxx11::basic_string\" }\n%\"struct.boost::exception_detail::error_info_injector\" = type <{ %\"class.boost::bad_any_cast\", %\"class.boost::exception.base\", [4 x i8] }>\n%\"class.boost::exception.base\" = type <{ i32 (...)**, %\"class.boost::exception_detail::refcount_ptr\", i8*, i8*, i32 }>\n%\"class.boost::exception_detail::refcount_ptr\" = type { %\"struct.boost::exception_detail::error_info_container\"* }\n%\"struct.boost::exception_detail::error_info_container\" = type { i32 (...)** }\n%\"class.boost::exception\" = type <{ i32 (...)**, %\"class.boost::exception_detail::refcount_ptr\", i8*, i8*, i32, [4 x i8] }>\n%\"class.boost::exception_detail::clone_impl\" = type { %\"struct.boost::exception_detail::error_info_injector.base\", %\"class.boost::exception_detail::clone_base\" }\n%\"struct.boost::exception_detail::error_info_injector.base\" = type <{ %\"class.boost::bad_any_cast\", %\"class.boost::exception.base\" }>\n%\"class.boost::exception_detail::clone_base\" = type { i32 (...)** }\n\n$_ZN5boost8any_castINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEET_RNS_3anyE = comdat any\n\n$__clang_call_terminate = comdat any\n\n$_ZN5boost15throw_exceptionINS_12bad_any_castEEEvRKT_ = comdat any\n\n$_ZN5boost16exception_detail10clone_implINS0_19error_info_injectorINS_12bad_any_castEEEED1Ev = comdat any\n\n$_ZN5boost16exception_detail19error_info_injectorINS_12bad_any_castEED2Ev = comdat any\n\n$_ZN5boost16exception_detail20copy_boost_exceptionEPNS_9exceptionEPKS1_ = comdat any\n\n$_ZN5boost16exception_detail10clone_implINS0_19error_info_injectorINS_12bad_any_castEEEED0Ev = comdat any\n\n$_ZNK5boost12bad_any_cast4whatEv = comdat any\n\n$_ZNK5boost16exception_detail10clone_implINS0_19error_info_injectorINS_12bad_any_castEEEE5cloneEv = comdat any\n\n$_ZNK5boost16exception_detail10clone_implINS0_19error_info_injectorINS_12bad_any_castEEEE7rethrowEv = comdat any\n\n$_ZThn8_N5boost16exception_detail10clone_implINS0_19error_info_injectorINS_12bad_any_castEEEED1Ev = comdat any\n\n$_ZThn8_N5boost16exception_detail10clone_implINS0_19error_info_injectorINS_12bad_any_castEEEED0Ev = comdat any\n\n$_ZTv0_n24_NK5boost16exception_detail10clone_implINS0_19error_info_injectorINS_12bad_any_castEEEE5cloneEv = comdat any\n\n$_ZTv0_n32_NK5boost16exception_detail10clone_implINS0_19error_info_injectorINS_12bad_any_castEEEE7rethrowEv = comdat any\n\n$_ZTv0_n40_N5boost16exception_detail10clone_implINS0_19error_info_injectorINS_12bad_any_castEEEED1Ev = comdat any\n\n$_ZTv0_n40_N5boost16exception_detail10clone_implINS0_19error_info_injectorINS_12bad_any_castEEEED0Ev = comdat any\n\n$_ZN5boost16exception_detail10clone_baseD2Ev = comdat any\n\n$_ZN5boost16exception_detail10clone_baseD0Ev = comdat any\n\n$_ZN5boost16exception_detail19error_info_injectorINS_12bad_any_castEED0Ev = comdat any\n\n$_ZThn8_N5boost16exception_detail19error_info_injectorINS_12bad_any_castEED1Ev = comdat any\n\n$_ZThn8_N5boost16exception_detail19error_info_injectorINS_12bad_any_castEED0Ev = comdat any\n\n$_ZN5boost12bad_any_castD0Ev = comdat any\n\n$_ZN5boost16exception_detail10clone_implINS0_19error_info_injectorINS_12bad_any_castEEEEC1ERKS5_NS5_9clone_tagE = comdat any\n\n$_ZN5boost16exception_detail10clone_implINS0_19error_info_injectorINS_12bad_any_castEEEEC1ERKS5_ = comdat any\n\n$_ZN5boost3any6holderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED2Ev = comdat any\n\n$_ZN5boost3any6holderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED0Ev = comdat any\n\n$_ZNK5boost3any6holderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE4typeEv = comdat any\n\n$_ZNK5boost3any6holderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE5cloneEv = comdat any\n\n$_ZTSNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE = comdat any\n\n$_ZTINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE = comdat any\n\n$_ZTSN5boost16exception_detail10clone_implINS0_19error_info_injectorINS_12bad_any_castEEEEE = comdat any\n\n$_ZTSN5boost16exception_detail19error_info_injectorINS_12bad_any_castEEE = comdat any\n\n$_ZTSN5boost12bad_any_castE = comdat any\n\n$_ZTIN5boost12bad_any_castE = comdat any\n\n$_ZTSN5boost9exceptionE = comdat any\n\n$_ZTIN5boost9exceptionE = comdat any\n\n$_ZTIN5boost16exception_detail19error_info_injectorINS_12bad_any_castEEE = comdat any\n\n$_ZTSN5boost16exception_detail10clone_baseE = comdat any\n\n$_ZTIN5boost16exception_detail10clone_baseE = comdat any\n\n$_ZTIN5boost16exception_detail10clone_implINS0_19error_info_injectorINS_12bad_any_castEEEEE = comdat any\n\n$_ZTVN5boost16exception_detail10clone_implINS0_19error_info_injectorINS_12bad_any_castEEEEE = comdat any\n\n$_ZTVN5boost16exception_detail10clone_baseE = comdat any\n\n$_ZTVN5boost16exception_detail19error_info_injectorINS_12bad_any_castEEE = comdat any\n\n$_ZTVN5boost12bad_any_castE = comdat any\n\n$_ZTVN5boost9exceptionE = comdat any\n\n$_ZTVN5boost3any6holderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE = comdat any\n\n$_ZTSN5boost3any6holderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE = comdat any\n\n$_ZTSN5boost3any11placeholderE = comdat any\n\n$_ZTIN5boost3any11placeholderE = comdat any\n\n$_ZTIN5boost3any6holderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE = comdat any\n\n@_ZTVN10__cxxabiv117__class_type_infoE = external dso_local global i8*\n@_ZTSNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE = linkonce_odr dso_local constant [53 x i8] c\"NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE\\00\", comdat, align 1\n@_ZTINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE = linkonce_odr dso_local constant { i8*, i8* } { i8* bitcast (i8** getelementptr inbounds (i8*, i8** @_ZTVN10__cxxabiv117__class_type_infoE, i64 2) to i8*), i8* getelementptr inbounds ([53 x i8], [53 x i8]* @_ZTSNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE, i32 0, i32 0) }, comdat, align 8\n@_ZTIi = external dso_local local_unnamed_addr constant i8*\n@_ZTId = external dso_local local_unnamed_addr constant i8*\n@_ZTIv = external dso_local local_unnamed_addr constant i8*\n@.str.3 = private unnamed_addr constant [55 x i8] c\"%s: __pos (which is %zu) > this->size() (which is %zu)\\00\", align 1\n@_ZTVN10__cxxabiv121__vmi_class_type_infoE = external dso_local global i8*\n@_ZTSN5boost16exception_detail10clone_implINS0_19error_info_injectorINS_12bad_any_castEEEEE = linkonce_odr dso_local constant [87 x i8] c\"N5boost16exception_detail10clone_implINS0_19error_info_injectorINS_12bad_any_castEEEEE\\00\", comdat, align 1\n@_ZTSN5boost16exception_detail19error_info_injectorINS_12bad_any_castEEE = linkonce_odr dso_local constant [68 x i8] c\"N5boost16exception_detail19error_info_injectorINS_12bad_any_castEEE\\00\", comdat, align 1\n@_ZTVN10__cxxabiv120__si_class_type_infoE = external dso_local global i8*\n@_ZTSN5boost12bad_any_castE = linkonce_odr dso_local constant [23 x i8] c\"N5boost12bad_any_castE\\00\", comdat, align 1\n@_ZTISt8bad_cast = external dso_local constant i8*\n@_ZTIN5boost12bad_any_castE = linkonce_odr dso_local constant { i8*, i8*, i8* } { i8* bitcast (i8** getelementptr inbounds (i8*, i8** @_ZTVN10__cxxabiv120__si_class_type_infoE, i64 2) to i8*), i8* getelementptr inbounds ([23 x i8], [23 x i8]* @_ZTSN5boost12bad_any_castE, i32 0, i32 0), i8* bitcast (i8** @_ZTISt8bad_cast to i8*) }, comdat, align 8\n@_ZTSN5boost9exceptionE = linkonce_odr dso_local constant [19 x i8] c\"N5boost9exceptionE\\00\", comdat, align 1\n@_ZTIN5boost9exceptionE = linkonce_odr dso_local constant { i8*, i8* } { i8* bitcast (i8** getelementptr inbounds (i8*, i8** @_ZTVN10__cxxabiv117__class_type_infoE, i64 2) to i8*), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @_ZTSN5boost9exceptionE, i32 0, i32 0) }, comdat, align 8\n@_ZTIN5boost16exception_detail19error_info_injectorINS_12bad_any_castEEE = linkonce_odr dso_local constant { i8*, i8*, i32, i32, i8*, i64, i8*, i64 } { i8* bitcast (i8** getelementptr inbounds (i8*, i8** @_ZTVN10__cxxabiv121__vmi_class_type_infoE, i64 2) to i8*), i8* getelementptr inbounds ([68 x i8], [68 x i8]* @_ZTSN5boost16exception_detail19error_info_injectorINS_12bad_any_castEEE, i32 0, i32 0), i32 0, i32 2, i8* bitcast ({ i8*, i8*, i8* }* @_ZTIN5boost12bad_any_castE to i8*), i64 2, i8* bitcast ({ i8*, i8* }* @_ZTIN5boost9exceptionE to i8*), i64 2050 }, comdat, align 8\n@_ZTSN5boost16exception_detail10clone_baseE = linkonce_odr dso_local constant [39 x i8] c\"N5boost16exception_detail10clone_baseE\\00\", comdat, align 1\n@_ZTIN5boost16exception_detail10clone_baseE = linkonce_odr dso_local constant { i8*, i8* } { i8* bitcast (i8** getelementptr inbounds (i8*, i8** @_ZTVN10__cxxabiv117__class_type_infoE, i64 2) to i8*), i8* getelementptr inbounds ([39 x i8], [39 x i8]* @_ZTSN5boost16exception_detail10clone_baseE, i32 0, i32 0) }, comdat, align 8\n@_ZTIN5boost16exception_detail10clone_implINS0_19error_info_injectorINS_12bad_any_castEEEEE = linkonce_odr dso_local constant { i8*, i8*, i32, i32, i8*, i64, i8*, i64 } { i8* bitcast (i8** getelementptr inbounds (i8*, i8** @_ZTVN10__cxxabiv121__vmi_class_type_infoE, i64 2) to i8*), i8* getelementptr inbounds ([87 x i8], [87 x i8]* @_ZTSN5boost16exception_detail10clone_implINS0_19error_info_injectorINS_12bad_any_castEEEEE, i32 0, i32 0), i32 0, i32 2, i8* bitcast ({ i8*, i8*, i32, i32, i8*, i64, i8*, i64 }* @_ZTIN5boost16exception_detail19error_info_injectorINS_12bad_any_castEEE to i8*), i64 2, i8* bitcast ({ i8*, i8* }* @_ZTIN5boost16exception_detail10clone_baseE to i8*), i64 -6141 }, comdat, align 8\n@_ZTVN5boost16exception_detail10clone_implINS0_19error_info_injectorINS_12bad_any_castEEEEE = linkonce_odr dso_local unnamed_addr constant { [8 x i8*], [4 x i8*], [9 x i8*] } { [8 x i8*] [i8* inttoptr (i64 48 to i8*), i8* null, i8* bitcast ({ i8*, i8*, i32, i32, i8*, i64, i8*, i64 }* @_ZTIN5boost16exception_detail10clone_implINS0_19error_info_injectorINS_12bad_any_castEEEEE to i8*), i8* bitcast (void (%\"class.boost::exception_detail::clone_impl\"*)* @_ZN5boost16exception_detail10clone_implINS0_19error_info_injectorINS_12bad_any_castEEEED1Ev to i8*), i8* bitcast (void (%\"class.boost::exception_detail::clone_impl\"*)* @_ZN5boost16exception_detail10clone_implINS0_19error_info_injectorINS_12bad_any_castEEEED0Ev to i8*), i8* bitcast (i8* (%\"class.boost::bad_any_cast\"*)* @_ZNK5boost12bad_any_cast4whatEv to i8*), i8* bitcast (%\"class.boost::exception_detail::clone_base\"* (%\"class.boost::exception_detail::clone_impl\"*)* @_ZNK5boost16exception_detail10clone_implINS0_19error_info_injectorINS_12bad_any_castEEEE5cloneEv to i8*), i8* bitcast (void (%\"class.boost::exception_detail::clone_impl\"*)* @_ZNK5boost16exception_detail10clone_implINS0_19error_info_injectorINS_12bad_any_castEEEE7rethrowEv to i8*)], [4 x i8*] [i8* inttoptr (i64 -8 to i8*), i8* bitcast ({ i8*, i8*, i32, i32, i8*, i64, i8*, i64 }* @_ZTIN5boost16exception_detail10clone_implINS0_19error_info_injectorINS_12bad_any_castEEEEE to i8*), i8* bitcast (void (%\"class.boost::exception_detail::clone_impl\"*)* @_ZThn8_N5boost16exception_detail10clone_implINS0_19error_info_injectorINS_12bad_any_castEEEED1Ev to i8*), i8* bitcast (void (%\"class.boost::exception_detail::clone_impl\"*)* @_ZThn8_N5boost16exception_detail10clone_implINS0_19error_info_injectorINS_12bad_any_castEEEED0Ev to i8*)], [9 x i8*] [i8* inttoptr (i64 -48 to i8*), i8* inttoptr (i64 -48 to i8*), i8* inttoptr (i64 -48 to i8*), i8* inttoptr (i64 -48 to i8*), i8* bitcast ({ i8*, i8*, i32, i32, i8*, i64, i8*, i64 }* @_ZTIN5boost16exception_detail10clone_implINS0_19error_info_injectorINS_12bad_any_castEEEEE to i8*), i8* bitcast (%\"class.boost::exception_detail::clone_base\"* (%\"class.boost::exception_detail::clone_impl\"*)* @_ZTv0_n24_NK5boost16exception_detail10clone_implINS0_19error_info_injectorINS_12bad_any_castEEEE5cloneEv to i8*), i8* bitcast (void (%\"class.boost::exception_detail::clone_impl\"*)* @_ZTv0_n32_NK5boost16exception_detail10clone_implINS0_19error_info_injectorINS_12bad_any_castEEEE7rethrowEv to i8*), i8* bitcast (void (%\"class.boost::exception_detail::clone_impl\"*)* @_ZTv0_n40_N5boost16exception_detail10clone_implINS0_19error_info_injectorINS_12bad_any_castEEEED1Ev to i8*), i8* bitcast (void (%\"class.boost::exception_detail::clone_impl\"*)* @_ZTv0_n40_N5boost16exception_detail10clone_implINS0_19error_info_injectorINS_12bad_any_castEEEED0Ev to i8*)] }, comdat, align 8\n@_ZTVN5boost16exception_detail10clone_baseE = linkonce_odr dso_local unnamed_addr constant { [6 x i8*] } { [6 x i8*] [i8* null, i8* bitcast ({ i8*, i8* }* @_ZTIN5boost16exception_detail10clone_baseE to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void (%\"class.boost::exception_detail::clone_base\"*)* @_ZN5boost16exception_detail10clone_baseD2Ev to i8*), i8* bitcast (void (%\"class.boost::exception_detail::clone_base\"*)* @_ZN5boost16exception_detail10clone_baseD0Ev to i8*)] }, comdat, align 8\n@_ZTVN5boost16exception_detail19error_info_injectorINS_12bad_any_castEEE = linkonce_odr dso_local unnamed_addr constant { [5 x i8*], [4 x i8*] } { [5 x i8*] [i8* null, i8* bitcast ({ i8*, i8*, i32, i32, i8*, i64, i8*, i64 }* @_ZTIN5boost16exception_detail19error_info_injectorINS_12bad_any_castEEE to i8*), i8* bitcast (void (%\"struct.boost::exception_detail::error_info_injector\"*)* @_ZN5boost16exception_detail19error_info_injectorINS_12bad_any_castEED2Ev to i8*), i8* bitcast (void (%\"struct.boost::exception_detail::error_info_injector\"*)* @_ZN5boost16exception_detail19error_info_injectorINS_12bad_any_castEED0Ev to i8*), i8* bitcast (i8* (%\"class.boost::bad_any_cast\"*)* @_ZNK5boost12bad_any_cast4whatEv to i8*)], [4 x i8*] [i8* inttoptr (i64 -8 to i8*), i8* bitcast ({ i8*, i8*, i32, i32, i8*, i64, i8*, i64 }* @_ZTIN5boost16exception_detail19error_info_injectorINS_12bad_any_castEEE to i8*), i8* bitcast (void (%\"struct.boost::exception_detail::error_info_injector\"*)* @_ZThn8_N5boost16exception_detail19error_info_injectorINS_12bad_any_castEED1Ev to i8*), i8* bitcast (void (%\"struct.boost::exception_detail::error_info_injector\"*)* @_ZThn8_N5boost16exception_detail19error_info_injectorINS_12bad_any_castEED0Ev to i8*)] }, comdat, align 8\n@_ZTVN5boost12bad_any_castE = linkonce_odr dso_local unnamed_addr constant { [5 x i8*] } { [5 x i8*] [i8* null, i8* bitcast ({ i8*, i8*, i8* }* @_ZTIN5boost12bad_any_castE to i8*), i8* bitcast (void (%\"class.std::bad_cast\"*)* @_ZNSt8bad_castD2Ev to i8*), i8* bitcast (void (%\"class.boost::bad_any_cast\"*)* @_ZN5boost12bad_any_castD0Ev to i8*), i8* bitcast (i8* (%\"class.boost::bad_any_cast\"*)* @_ZNK5boost12bad_any_cast4whatEv to i8*)] }, comdat, align 8\n@_ZTVN5boost9exceptionE = linkonce_odr dso_local unnamed_addr constant { [4 x i8*] } { [4 x i8*] [i8* null, i8* bitcast ({ i8*, i8* }* @_ZTIN5boost9exceptionE to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*)] }, comdat, align 8\n@.str.4 = private unnamed_addr constant [61 x i8] c\"boost::bad_any_cast: failed conversion using boost::any_cast\\00\", align 1\n@.str.5 = private unnamed_addr constant [21 x i8] c\"basic_string::substr\\00\", align 1\n@_ZTVN5boost3any6holderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE = linkonce_odr dso_local unnamed_addr constant { [6 x i8*] } { [6 x i8*] [i8* null, i8* bitcast ({ i8*, i8*, i8* }* @_ZTIN5boost3any6holderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE to i8*), i8* bitcast (void (%\"class.boost::any::holder\"*)* @_ZN5boost3any6holderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED2Ev to i8*), i8* bitcast (void (%\"class.boost::any::holder\"*)* @_ZN5boost3any6holderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED0Ev to i8*), i8* bitcast (%\"class.std::type_info\"* (%\"class.boost::any::holder\"*)* @_ZNK5boost3any6holderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE4typeEv to i8*), i8* bitcast (%\"class.boost::any::placeholder\"* (%\"class.boost::any::holder\"*)* @_ZNK5boost3any6holderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE5cloneEv to i8*)] }, comdat, align 8\n@_ZTSN5boost3any6holderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE = linkonce_odr dso_local constant [74 x i8] c\"N5boost3any6holderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE\\00\", comdat, align 1\n@_ZTSN5boost3any11placeholderE = linkonce_odr dso_local constant [26 x i8] c\"N5boost3any11placeholderE\\00\", comdat, align 1\n@_ZTIN5boost3any11placeholderE = linkonce_odr dso_local constant { i8*, i8* } { i8* bitcast (i8** getelementptr inbounds (i8*, i8** @_ZTVN10__cxxabiv117__class_type_infoE, i64 2) to i8*), i8* getelementptr inbounds ([26 x i8], [26 x i8]* @_ZTSN5boost3any11placeholderE, i32 0, i32 0) }, comdat, align 8\n@_ZTIN5boost3any6holderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE = linkonce_odr dso_local constant { i8*, i8*, i8* } { i8* bitcast (i8** getelementptr inbounds (i8*, i8** @_ZTVN10__cxxabiv120__si_class_type_infoE, i64 2) to i8*), i8* getelementptr inbounds ([74 x i8], [74 x i8]* @_ZTSN5boost3any6holderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE, i32 0, i32 0), i8* bitcast ({ i8*, i8* }* @_ZTIN5boost3any11placeholderE to i8*) }, comdat, align 8\n\n; Function Attrs: uwtable\ndefine dso_local void @_Z11compare_oneN5boost3anyES0_(%\"class.boost::any\"* noalias nocapture sret(%\"class.boost::any\") align 8 %0, %\"class.boost::any\"* %1, %\"class.boost::any\"* %2) local_unnamed_addr #0 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {\n  %4 = alloca %\"class.boost::bad_any_cast\", align 8\n  %5 = alloca %\"class.boost::bad_any_cast\", align 8\n  %6 = alloca i64, align 8\n  %7 = alloca i64, align 8\n  %8 = alloca %\"class.boost::bad_any_cast\", align 8\n  %9 = alloca %\"class.boost::bad_any_cast\", align 8\n  %10 = alloca i64, align 8\n  %11 = alloca i64, align 8\n  %12 = alloca %\"class.std::__cxx11::basic_string\", align 8\n  %13 = alloca %\"class.std::__cxx11::basic_string\", align 8\n  %14 = alloca %\"class.std::__cxx11::basic_string\", align 8\n  %15 = alloca %\"class.std::__cxx11::basic_string\", align 8\n  %16 = alloca %\"class.std::__cxx11::basic_string\", align 8\n  %17 = alloca %\"class.std::__cxx11::basic_string\", align 8\n  %18 = alloca %\"class.std::__cxx11::basic_string\", align 8\n  %19 = alloca %\"class.std::__cxx11::basic_string\", align 8\n  %20 = alloca %\"class.std::__cxx11::basic_string\", align 8\n  %21 = alloca %\"class.std::__cxx11::basic_string\", align 8\n  %22 = alloca %\"class.std::__cxx11::basic_string\", align 8\n  %23 = alloca %\"class.std::__cxx11::basic_string\", align 8\n  %24 = alloca %\"class.std::__cxx11::basic_string\", align 8\n  %25 = getelementptr inbounds %\"class.boost::any\", %\"class.boost::any\"* %1, i64 0, i32 0\n  %26 = load %\"class.boost::any::placeholder\"*, %\"class.boost::any::placeholder\"** %25, align 8, !tbaa !3\n  %27 = icmp eq %\"class.boost::any::placeholder\"* %26, null\n  br i1 %27, label %34, label %28\n\n28:                                               ; preds = %3\n  %29 = bitcast %\"class.boost::any::placeholder\"* %26 to %\"class.std::type_info\"* (%\"class.boost::any::placeholder\"*)***\n  %30 = load %\"class.std::type_info\"* (%\"class.boost::any::placeholder\"*)**, %\"class.std::type_info\"* (%\"class.boost::any::placeholder\"*)*** %29, align 8, !tbaa !8\n  %31 = getelementptr inbounds %\"class.std::type_info\"* (%\"class.boost::any::placeholder\"*)*, %\"class.std::type_info\"* (%\"class.boost::any::placeholder\"*)** %30, i64 2\n  %32 = load %\"class.std::type_info\"* (%\"class.boost::any::placeholder\"*)*, %\"class.std::type_info\"* (%\"class.boost::any::placeholder\"*)** %31, align 8\n  %33 = tail call nonnull align 8 dereferenceable(16) %\"class.std::type_info\"* %32(%\"class.boost::any::placeholder\"* nonnull align 8 dereferenceable(8) %26) #20\n  br label %34\n\n34:                                               ; preds = %3, %28\n  %35 = phi %\"class.std::type_info\"* [ %33, %28 ], [ bitcast (i8** @_ZTIv to %\"class.std::type_info\"*), %3 ]\n  %36 = getelementptr inbounds %\"class.std::type_info\", %\"class.std::type_info\"* %35, i64 0, i32 1\n  %37 = load i8*, i8** %36, align 8, !tbaa !10\n  %38 = icmp eq i8* %37, getelementptr inbounds ([53 x i8], [53 x i8]* @_ZTSNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE, i64 0, i64 0)\n  br i1 %38, label %45, label %39\n\n39:                                               ; preds = %34\n  %40 = load i8, i8* %37, align 1, !tbaa !12\n  %41 = icmp eq i8 %40, 42\n  br i1 %41, label %376, label %42\n\n42:                                               ; preds = %39\n  %43 = tail call i32 @strcmp(i8* noundef nonnull %37, i8* noundef nonnull dereferenceable(53) getelementptr inbounds ([53 x i8], [53 x i8]* @_ZTSNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE, i64 0, i64 0)) #20\n  %44 = icmp eq i32 %43, 0\n  br i1 %44, label %45, label %376\n\n45:                                               ; preds = %34, %42\n  %46 = bitcast %\"class.std::__cxx11::basic_string\"* %12 to i8*\n  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %46) #20\n  %47 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %12, i64 0, i32 2\n  %48 = bitcast %\"class.std::__cxx11::basic_string\"* %12 to %union.anon**\n  store %union.anon* %47, %union.anon** %48, align 8, !tbaa !13\n  %49 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %12, i64 0, i32 1\n  store i64 0, i64* %49, align 8, !tbaa !15\n  %50 = bitcast %union.anon* %47 to i8*\n  store i8 0, i8* %50, align 8, !tbaa !12\n  %51 = bitcast %\"class.std::__cxx11::basic_string\"* %13 to i8*\n  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %51) #20\n  invoke void @_ZN5boost8any_castINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEET_RNS_3anyE(%\"class.std::__cxx11::basic_string\"* nonnull sret(%\"class.std::__cxx11::basic_string\") align 8 %13, %\"class.boost::any\"* nonnull align 8 dereferenceable(8) %1)\n          to label %52 unwind label %188\n\n52:                                               ; preds = %45\n  %53 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %12, i64 0, i32 0, i32 0\n  %54 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %13, i64 0, i32 0, i32 0\n  %55 = load i8*, i8** %54, align 8, !tbaa !18\n  %56 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %13, i64 0, i32 2\n  %57 = bitcast %union.anon* %56 to i8*\n  %58 = icmp eq i8* %55, %57\n  br i1 %58, label %59, label %74\n\n59:                                               ; preds = %52\n  %60 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %13, i64 0, i32 1\n  %61 = load i64, i64* %60, align 8, !tbaa !15\n  %62 = icmp eq i64 %61, 0\n  br i1 %62, label %69, label %63\n\n63:                                               ; preds = %59\n  %64 = load i8*, i8** %53, align 8, !tbaa !18\n  %65 = icmp eq i64 %61, 1\n  br i1 %65, label %66, label %68\n\n66:                                               ; preds = %63\n  %67 = load i8, i8* %55, align 1, !tbaa !12\n  store i8 %67, i8* %64, align 1, !tbaa !12\n  br label %69\n\n68:                                               ; preds = %63\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %64, i8* align 1 %55, i64 %61, i1 false) #20\n  br label %69\n\n69:                                               ; preds = %68, %66, %59\n  %70 = load i64, i64* %60, align 8, !tbaa !15\n  store i64 %70, i64* %49, align 8, !tbaa !15\n  %71 = load i8*, i8** %53, align 8, !tbaa !18\n  %72 = getelementptr inbounds i8, i8* %71, i64 %70\n  store i8 0, i8* %72, align 1, !tbaa !12\n  %73 = load i8*, i8** %54, align 8, !tbaa !18\n  br label %89\n\n74:                                               ; preds = %52\n  %75 = load i8*, i8** %53, align 8, !tbaa !18\n  %76 = icmp eq i8* %75, %50\n  %77 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %12, i64 0, i32 2, i32 0\n  %78 = load i64, i64* %77, align 8\n  store i8* %55, i8** %53, align 8, !tbaa !18\n  %79 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %13, i64 0, i32 1\n  %80 = bitcast i64* %79 to <2 x i64>*\n  %81 = load <2 x i64>, <2 x i64>* %80, align 8, !tbaa !12\n  %82 = bitcast i64* %49 to <2 x i64>*\n  store <2 x i64> %81, <2 x i64>* %82, align 8, !tbaa !12\n  %83 = icmp eq i8* %75, null\n  %84 = or i1 %76, %83\n  br i1 %84, label %87, label %85\n\n85:                                               ; preds = %74\n  store i8* %75, i8** %54, align 8, !tbaa !18\n  %86 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %13, i64 0, i32 2, i32 0\n  store i64 %78, i64* %86, align 8, !tbaa !12\n  br label %89\n\n87:                                               ; preds = %74\n  %88 = bitcast %\"class.std::__cxx11::basic_string\"* %13 to %union.anon**\n  store %union.anon* %56, %union.anon** %88, align 8, !tbaa !18\n  br label %89\n\n89:                                               ; preds = %69, %85, %87\n  %90 = phi i8* [ %73, %69 ], [ %75, %85 ], [ %57, %87 ]\n  %91 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %13, i64 0, i32 1\n  store i64 0, i64* %91, align 8, !tbaa !15\n  store i8 0, i8* %90, align 1, !tbaa !12\n  %92 = load i8*, i8** %54, align 8, !tbaa !18\n  %93 = icmp eq i8* %92, %57\n  br i1 %93, label %95, label %94\n\n94:                                               ; preds = %89\n  call void @_ZdlPv(i8* %92) #20\n  br label %95\n\n95:                                               ; preds = %89, %94\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %51) #20\n  %96 = load i8*, i8** %53, align 8, !tbaa !18\n  %97 = load i64, i64* %49, align 8, !tbaa !15\n  %98 = getelementptr inbounds i8, i8* %96, i64 %97\n  %99 = ptrtoint i8* %98 to i64\n  %100 = icmp sgt i64 %97, 3\n  br i1 %100, label %101, label %124\n\n101:                                              ; preds = %95\n  %102 = lshr i64 %97, 2\n  br label %103\n\n103:                                              ; preds = %120, %101\n  %104 = phi i64 [ %102, %101 ], [ %122, %120 ]\n  %105 = phi i8* [ %96, %101 ], [ %121, %120 ]\n  %106 = load i8, i8* %105, align 1, !tbaa !12\n  %107 = icmp eq i8 %106, 44\n  br i1 %107, label %149, label %108\n\n108:                                              ; preds = %103\n  %109 = getelementptr inbounds i8, i8* %105, i64 1\n  %110 = load i8, i8* %109, align 1, !tbaa !12\n  %111 = icmp eq i8 %110, 44\n  br i1 %111, label %147, label %112\n\n112:                                              ; preds = %108\n  %113 = getelementptr inbounds i8, i8* %105, i64 2\n  %114 = load i8, i8* %113, align 1, !tbaa !12\n  %115 = icmp eq i8 %114, 44\n  br i1 %115, label %145, label %116\n\n116:                                              ; preds = %112\n  %117 = getelementptr inbounds i8, i8* %105, i64 3\n  %118 = load i8, i8* %117, align 1, !tbaa !12\n  %119 = icmp eq i8 %118, 44\n  br i1 %119, label %143, label %120\n\n120:                                              ; preds = %116\n  %121 = getelementptr inbounds i8, i8* %105, i64 4\n  %122 = add nsw i64 %104, -1\n  %123 = icmp sgt i64 %104, 1\n  br i1 %123, label %103, label %124, !llvm.loop !19\n\n124:                                              ; preds = %120, %95\n  %125 = phi i8* [ %96, %95 ], [ %121, %120 ]\n  %126 = ptrtoint i8* %125 to i64\n  %127 = sub i64 %99, %126\n  switch i64 %127, label %362 [\n    i64 3, label %128\n    i64 2, label %133\n    i64 1, label %139\n  ]\n\n128:                                              ; preds = %124\n  %129 = load i8, i8* %125, align 1, !tbaa !12\n  %130 = icmp eq i8 %129, 44\n  br i1 %130, label %149, label %131\n\n131:                                              ; preds = %128\n  %132 = getelementptr inbounds i8, i8* %125, i64 1\n  br label %133\n\n133:                                              ; preds = %124, %131\n  %134 = phi i8* [ %132, %131 ], [ %125, %124 ]\n  %135 = load i8, i8* %134, align 1, !tbaa !12\n  %136 = icmp eq i8 %135, 44\n  br i1 %136, label %149, label %137\n\n137:                                              ; preds = %133\n  %138 = getelementptr inbounds i8, i8* %134, i64 1\n  br label %139\n\n139:                                              ; preds = %124, %137\n  %140 = phi i8* [ %138, %137 ], [ %125, %124 ]\n  %141 = load i8, i8* %140, align 1, !tbaa !12\n  %142 = icmp eq i8 %141, 44\n  br i1 %142, label %149, label %362\n\n143:                                              ; preds = %116\n  %144 = getelementptr inbounds i8, i8* %105, i64 3\n  br label %149\n\n145:                                              ; preds = %112\n  %146 = getelementptr inbounds i8, i8* %105, i64 2\n  br label %149\n\n147:                                              ; preds = %108\n  %148 = getelementptr inbounds i8, i8* %105, i64 1\n  br label %149\n\n149:                                              ; preds = %103, %143, %145, %147, %139, %133, %128\n  %150 = phi i8* [ %125, %128 ], [ %134, %133 ], [ %140, %139 ], [ %144, %143 ], [ %146, %145 ], [ %148, %147 ], [ %105, %103 ]\n  %151 = icmp eq i8* %150, %98\n  br i1 %151, label %362, label %152\n\n152:                                              ; preds = %149\n  %153 = bitcast %\"class.std::__cxx11::basic_string\"* %14 to i8*\n  %154 = bitcast %\"class.std::__cxx11::basic_string\"* %15 to i8*\n  %155 = bitcast %\"class.std::__cxx11::basic_string\"* %16 to i8*\n  %156 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %16, i64 0, i32 2\n  %157 = bitcast %\"class.std::__cxx11::basic_string\"* %16 to %union.anon**\n  %158 = bitcast %union.anon* %156 to i8*\n  %159 = bitcast i64* %11 to i8*\n  %160 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %16, i64 0, i32 0, i32 0\n  %161 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %16, i64 0, i32 2, i32 0\n  %162 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %16, i64 0, i32 1\n  %163 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %15, i64 0, i32 2\n  %164 = bitcast %\"class.std::__cxx11::basic_string\"* %15 to %union.anon**\n  %165 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %15, i64 0, i32 0, i32 0\n  %166 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %15, i64 0, i32 2, i32 0\n  %167 = bitcast %union.anon* %163 to i8*\n  %168 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %15, i64 0, i32 1\n  %169 = bitcast %\"class.std::__cxx11::basic_string\"* %17 to i8*\n  %170 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %17, i64 0, i32 2\n  %171 = bitcast %\"class.std::__cxx11::basic_string\"* %17 to %union.anon**\n  %172 = bitcast %union.anon* %170 to i8*\n  %173 = bitcast i64* %10 to i8*\n  %174 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %17, i64 0, i32 0, i32 0\n  %175 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %17, i64 0, i32 2, i32 0\n  %176 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %17, i64 0, i32 1\n  %177 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %14, i64 0, i32 2\n  %178 = bitcast %\"class.std::__cxx11::basic_string\"* %14 to %union.anon**\n  %179 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %14, i64 0, i32 0, i32 0\n  %180 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %14, i64 0, i32 2, i32 0\n  %181 = bitcast %union.anon* %177 to i8*\n  %182 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %14, i64 0, i32 1\n  %183 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %12, i64 0, i32 2, i32 0\n  %184 = icmp eq i64 %97, 0\n  br i1 %184, label %362, label %185\n\n185:                                              ; preds = %152\n  %186 = bitcast i64* %182 to <2 x i64>*\n  %187 = bitcast i64* %49 to <2 x i64>*\n  br label %190\n\n188:                                              ; preds = %45\n  %189 = landingpad { i8*, i32 }\n          cleanup\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %51) #20\n  br label %369\n\n190:                                              ; preds = %185, %357\n  %191 = phi i64 [ %359, %357 ], [ %97, %185 ]\n  %192 = phi i8* [ %361, %357 ], [ %96, %185 ]\n  %193 = phi i64 [ %358, %357 ], [ 0, %185 ]\n  %194 = getelementptr inbounds i8, i8* %192, i64 %193\n  %195 = load i8, i8* %194, align 1, !tbaa !12\n  %196 = icmp eq i8 %195, 44\n  br i1 %196, label %199, label %197\n\n197:                                              ; preds = %190\n  %198 = add nuw i64 %193, 1\n  br label %357\n\n199:                                              ; preds = %190\n  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %153) #20\n  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %154) #20\n  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %155) #20\n  call void @llvm.experimental.noalias.scope.decl(metadata !21)\n  store %union.anon* %156, %union.anon** %157, align 8, !tbaa !13, !alias.scope !21\n  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %159) #20, !noalias !21\n  store i64 %193, i64* %11, align 8, !tbaa !24, !noalias !21\n  %200 = icmp ugt i64 %193, 15\n  br i1 %200, label %201, label %205\n\n201:                                              ; preds = %199\n  %202 = invoke i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %16, i64* nonnull align 8 dereferenceable(8) %11, i64 0)\n          to label %203 unwind label %332\n\n203:                                              ; preds = %201\n  store i8* %202, i8** %160, align 8, !tbaa !18, !alias.scope !21\n  %204 = load i64, i64* %11, align 8, !tbaa !24, !noalias !21\n  store i64 %204, i64* %161, align 8, !tbaa !12, !alias.scope !21\n  br label %205\n\n205:                                              ; preds = %203, %199\n  %206 = phi i8* [ %202, %203 ], [ %158, %199 ]\n  %207 = trunc i64 %193 to i32\n  switch i32 %207, label %210 [\n    i32 1, label %208\n    i32 0, label %211\n  ]\n\n208:                                              ; preds = %205\n  %209 = load i8, i8* %192, align 1, !tbaa !12\n  store i8 %209, i8* %206, align 1, !tbaa !12\n  br label %211\n\n210:                                              ; preds = %205\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %206, i8* nonnull align 1 %192, i64 %193, i1 false) #20\n  br label %211\n\n211:                                              ; preds = %210, %208, %205\n  %212 = load i64, i64* %11, align 8, !tbaa !24, !noalias !21\n  store i64 %212, i64* %162, align 8, !tbaa !15, !alias.scope !21\n  %213 = load i8*, i8** %160, align 8, !tbaa !18, !alias.scope !21\n  %214 = getelementptr inbounds i8, i8* %213, i64 %212\n  store i8 0, i8* %214, align 1, !tbaa !12\n  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %159) #20, !noalias !21\n  call void @llvm.experimental.noalias.scope.decl(metadata !25)\n  %215 = load i64, i64* %162, align 8, !tbaa !15, !noalias !25\n  %216 = invoke nonnull align 8 dereferenceable(32) %\"class.std::__cxx11::basic_string\"* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEmmmc(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %16, i64 %215, i64 0, i64 1, i8 signext 46)\n          to label %217 unwind label %334\n\n217:                                              ; preds = %211\n  store %union.anon* %163, %union.anon** %164, align 8, !tbaa !13, !alias.scope !25\n  %218 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %216, i64 0, i32 0, i32 0\n  %219 = load i8*, i8** %218, align 8, !tbaa !18\n  %220 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %216, i64 0, i32 2\n  %221 = bitcast %union.anon* %220 to i8*\n  %222 = icmp eq i8* %219, %221\n  br i1 %222, label %223, label %224\n\n223:                                              ; preds = %217\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(16) %167, i8* noundef nonnull align 8 dereferenceable(16) %219, i64 16, i1 false) #20\n  br label %227\n\n224:                                              ; preds = %217\n  store i8* %219, i8** %165, align 8, !tbaa !18, !alias.scope !25\n  %225 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %216, i64 0, i32 2, i32 0\n  %226 = load i64, i64* %225, align 8, !tbaa !12\n  store i64 %226, i64* %166, align 8, !tbaa !12, !alias.scope !25\n  br label %227\n\n227:                                              ; preds = %224, %223\n  %228 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %216, i64 0, i32 1\n  %229 = load i64, i64* %228, align 8, !tbaa !15\n  store i64 %229, i64* %168, align 8, !tbaa !15, !alias.scope !25\n  %230 = bitcast %\"class.std::__cxx11::basic_string\"* %216 to %union.anon**\n  store %union.anon* %220, %union.anon** %230, align 8, !tbaa !18\n  store i64 0, i64* %228, align 8, !tbaa !15\n  store i8 0, i8* %221, align 8, !tbaa !12\n  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %169) #20\n  %231 = add nuw i64 %193, 1\n  call void @llvm.experimental.noalias.scope.decl(metadata !28)\n  %232 = load i64, i64* %49, align 8, !tbaa !15, !noalias !28\n  %233 = icmp ugt i64 %232, %193\n  br i1 %233, label %237, label %234\n\n234:                                              ; preds = %227\n  %235 = and i64 %231, 4294967295\n  invoke void (i8*, ...) @_ZSt24__throw_out_of_range_fmtPKcz(i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.3, i64 0, i64 0), i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.5, i64 0, i64 0), i64 %235, i64 %232) #21\n          to label %236 unwind label %338\n\n236:                                              ; preds = %234\n  unreachable\n\n237:                                              ; preds = %227\n  store %union.anon* %170, %union.anon** %171, align 8, !tbaa !13, !alias.scope !28\n  %238 = load i8*, i8** %53, align 8, !tbaa !18, !noalias !28\n  %239 = getelementptr inbounds i8, i8* %238, i64 %231\n  %240 = sub i64 %232, %231\n  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %173) #20, !noalias !28\n  store i64 %240, i64* %10, align 8, !tbaa !24, !noalias !28\n  %241 = icmp ugt i64 %240, 15\n  br i1 %241, label %242, label %246\n\n242:                                              ; preds = %237\n  %243 = invoke i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %17, i64* nonnull align 8 dereferenceable(8) %10, i64 0)\n          to label %244 unwind label %336\n\n244:                                              ; preds = %242\n  store i8* %243, i8** %174, align 8, !tbaa !18, !alias.scope !28\n  %245 = load i64, i64* %10, align 8, !tbaa !24, !noalias !28\n  store i64 %245, i64* %175, align 8, !tbaa !12, !alias.scope !28\n  br label %246\n\n246:                                              ; preds = %244, %237\n  %247 = phi i8* [ %243, %244 ], [ %172, %237 ]\n  switch i64 %240, label %250 [\n    i64 1, label %248\n    i64 0, label %251\n  ]\n\n248:                                              ; preds = %246\n  %249 = load i8, i8* %239, align 1, !tbaa !12\n  store i8 %249, i8* %247, align 1, !tbaa !12\n  br label %251\n\n250:                                              ; preds = %246\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %247, i8* nonnull align 1 %239, i64 %240, i1 false) #20\n  br label %251\n\n251:                                              ; preds = %250, %248, %246\n  %252 = load i64, i64* %10, align 8, !tbaa !24, !noalias !28\n  store i64 %252, i64* %176, align 8, !tbaa !15, !alias.scope !28\n  %253 = load i8*, i8** %174, align 8, !tbaa !18, !alias.scope !28\n  %254 = getelementptr inbounds i8, i8* %253, i64 %252\n  store i8 0, i8* %254, align 1, !tbaa !12\n  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %173) #20, !noalias !28\n  call void @llvm.experimental.noalias.scope.decl(metadata !31)\n  %255 = load i64, i64* %168, align 8, !tbaa !15, !noalias !31\n  %256 = load i64, i64* %176, align 8, !tbaa !15, !noalias !31\n  %257 = add i64 %256, %255\n  %258 = load i8*, i8** %165, align 8, !tbaa !18, !noalias !31\n  %259 = icmp eq i8* %258, %167\n  %260 = load i64, i64* %166, align 8, !noalias !31\n  %261 = select i1 %259, i64 15, i64 %260\n  %262 = icmp ugt i64 %257, %261\n  %263 = load i8*, i8** %174, align 8, !tbaa !18, !noalias !31\n  br i1 %262, label %264, label %271\n\n264:                                              ; preds = %251\n  %265 = icmp eq i8* %263, %172\n  %266 = load i64, i64* %175, align 8, !noalias !31\n  %267 = select i1 %265, i64 15, i64 %266\n  %268 = icmp ugt i64 %257, %267\n  br i1 %268, label %271, label %269\n\n269:                                              ; preds = %264\n  %270 = invoke nonnull align 8 dereferenceable(32) %\"class.std::__cxx11::basic_string\"* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %17, i64 0, i64 0, i8* %258, i64 %255)\n          to label %273 unwind label %340\n\n271:                                              ; preds = %264, %251\n  %272 = invoke nonnull align 8 dereferenceable(32) %\"class.std::__cxx11::basic_string\"* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %15, i8* %263, i64 %256)\n          to label %273 unwind label %340\n\n273:                                              ; preds = %271, %269\n  %274 = phi %\"class.std::__cxx11::basic_string\"* [ %270, %269 ], [ %272, %271 ]\n  store %union.anon* %177, %union.anon** %178, align 8, !tbaa !13, !alias.scope !31\n  %275 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %274, i64 0, i32 0, i32 0\n  %276 = load i8*, i8** %275, align 8, !tbaa !18\n  %277 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %274, i64 0, i32 2\n  %278 = bitcast %union.anon* %277 to i8*\n  %279 = icmp eq i8* %276, %278\n  br i1 %279, label %280, label %281\n\n280:                                              ; preds = %273\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(16) %181, i8* noundef nonnull align 8 dereferenceable(16) %276, i64 16, i1 false) #20\n  br label %284\n\n281:                                              ; preds = %273\n  store i8* %276, i8** %179, align 8, !tbaa !18, !alias.scope !31\n  %282 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %274, i64 0, i32 2, i32 0\n  %283 = load i64, i64* %282, align 8, !tbaa !12\n  store i64 %283, i64* %180, align 8, !tbaa !12, !alias.scope !31\n  br label %284\n\n284:                                              ; preds = %281, %280\n  %285 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %274, i64 0, i32 1\n  %286 = load i64, i64* %285, align 8, !tbaa !15\n  store i64 %286, i64* %182, align 8, !tbaa !15, !alias.scope !31\n  %287 = bitcast %\"class.std::__cxx11::basic_string\"* %274 to %union.anon**\n  store %union.anon* %277, %union.anon** %287, align 8, !tbaa !18\n  store i64 0, i64* %285, align 8, !tbaa !15\n  store i8 0, i8* %278, align 8, !tbaa !12\n  %288 = load i8*, i8** %179, align 8, !tbaa !18\n  %289 = icmp eq i8* %288, %181\n  br i1 %289, label %290, label %304\n\n290:                                              ; preds = %284\n  %291 = load i64, i64* %182, align 8, !tbaa !15\n  %292 = icmp eq i64 %291, 0\n  br i1 %292, label %299, label %293\n\n293:                                              ; preds = %290\n  %294 = load i8*, i8** %53, align 8, !tbaa !18\n  %295 = icmp eq i64 %291, 1\n  br i1 %295, label %296, label %298\n\n296:                                              ; preds = %293\n  %297 = load i8, i8* %181, align 8, !tbaa !12\n  store i8 %297, i8* %294, align 1, !tbaa !12\n  br label %299\n\n298:                                              ; preds = %293\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %294, i8* nonnull align 8 %181, i64 %291, i1 false) #20\n  br label %299\n\n299:                                              ; preds = %298, %296, %290\n  %300 = load i64, i64* %182, align 8, !tbaa !15\n  store i64 %300, i64* %49, align 8, !tbaa !15\n  %301 = load i8*, i8** %53, align 8, !tbaa !18\n  %302 = getelementptr inbounds i8, i8* %301, i64 %300\n  store i8 0, i8* %302, align 1, !tbaa !12\n  %303 = load i8*, i8** %179, align 8, !tbaa !18\n  br label %313\n\n304:                                              ; preds = %284\n  %305 = load i8*, i8** %53, align 8, !tbaa !18\n  %306 = icmp eq i8* %305, %50\n  %307 = load i64, i64* %183, align 8\n  store i8* %288, i8** %53, align 8, !tbaa !18\n  %308 = load <2 x i64>, <2 x i64>* %186, align 8, !tbaa !12\n  store <2 x i64> %308, <2 x i64>* %187, align 8, !tbaa !12\n  %309 = icmp eq i8* %305, null\n  %310 = or i1 %306, %309\n  br i1 %310, label %312, label %311\n\n311:                                              ; preds = %304\n  store i8* %305, i8** %179, align 8, !tbaa !18\n  store i64 %307, i64* %180, align 8, !tbaa !12\n  br label %313\n\n312:                                              ; preds = %304\n  store %union.anon* %177, %union.anon** %178, align 8, !tbaa !18\n  br label %313\n\n313:                                              ; preds = %299, %311, %312\n  %314 = phi i8* [ %303, %299 ], [ %305, %311 ], [ %181, %312 ]\n  store i64 0, i64* %182, align 8, !tbaa !15\n  store i8 0, i8* %314, align 1, !tbaa !12\n  %315 = load i8*, i8** %179, align 8, !tbaa !18\n  %316 = icmp eq i8* %315, %181\n  br i1 %316, label %318, label %317\n\n317:                                              ; preds = %313\n  call void @_ZdlPv(i8* %315) #20\n  br label %318\n\n318:                                              ; preds = %313, %317\n  %319 = load i8*, i8** %174, align 8, !tbaa !18\n  %320 = icmp eq i8* %319, %172\n  br i1 %320, label %322, label %321\n\n321:                                              ; preds = %318\n  call void @_ZdlPv(i8* %319) #20\n  br label %322\n\n322:                                              ; preds = %318, %321\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %169) #20\n  %323 = load i8*, i8** %165, align 8, !tbaa !18\n  %324 = icmp eq i8* %323, %167\n  br i1 %324, label %326, label %325\n\n325:                                              ; preds = %322\n  call void @_ZdlPv(i8* %323) #20\n  br label %326\n\n326:                                              ; preds = %322, %325\n  %327 = load i8*, i8** %160, align 8, !tbaa !18\n  %328 = icmp eq i8* %327, %158\n  br i1 %328, label %330, label %329\n\n329:                                              ; preds = %326\n  call void @_ZdlPv(i8* %327) #20\n  br label %330\n\n330:                                              ; preds = %326, %329\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %155) #20\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %154) #20\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %153) #20\n  %331 = load i64, i64* %49, align 8, !tbaa !15\n  br label %357\n\n332:                                              ; preds = %201\n  %333 = landingpad { i8*, i32 }\n          cleanup\n  br label %355\n\n334:                                              ; preds = %211\n  %335 = landingpad { i8*, i32 }\n          cleanup\n  br label %350\n\n336:                                              ; preds = %242\n  %337 = landingpad { i8*, i32 }\n          cleanup\n  br label %345\n\n338:                                              ; preds = %234\n  %339 = landingpad { i8*, i32 }\n          cleanup\n  br label %345\n\n340:                                              ; preds = %271, %269\n  %341 = landingpad { i8*, i32 }\n          cleanup\n  %342 = load i8*, i8** %174, align 8, !tbaa !18\n  %343 = icmp eq i8* %342, %172\n  br i1 %343, label %345, label %344\n\n344:                                              ; preds = %340\n  call void @_ZdlPv(i8* %342) #20\n  br label %345\n\n345:                                              ; preds = %336, %338, %344, %340\n  %346 = phi { i8*, i32 } [ %341, %340 ], [ %341, %344 ], [ %337, %336 ], [ %339, %338 ]\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %169) #20\n  %347 = load i8*, i8** %165, align 8, !tbaa !18\n  %348 = icmp eq i8* %347, %167\n  br i1 %348, label %350, label %349\n\n349:                                              ; preds = %345\n  call void @_ZdlPv(i8* %347) #20\n  br label %350\n\n350:                                              ; preds = %349, %345, %334\n  %351 = phi { i8*, i32 } [ %335, %334 ], [ %346, %345 ], [ %346, %349 ]\n  %352 = load i8*, i8** %160, align 8, !tbaa !18\n  %353 = icmp eq i8* %352, %158\n  br i1 %353, label %355, label %354\n\n354:                                              ; preds = %350\n  call void @_ZdlPv(i8* %352) #20\n  br label %355\n\n355:                                              ; preds = %354, %350, %332\n  %356 = phi { i8*, i32 } [ %333, %332 ], [ %351, %350 ], [ %351, %354 ]\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %155) #20\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %154) #20\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %153) #20\n  br label %369\n\n357:                                              ; preds = %197, %330\n  %358 = phi i64 [ %198, %197 ], [ %231, %330 ]\n  %359 = phi i64 [ %191, %197 ], [ %331, %330 ]\n  %360 = icmp ugt i64 %359, %358\n  %361 = load i8*, i8** %53, align 8, !tbaa !18\n  br i1 %360, label %190, label %362, !llvm.loop !34\n\n362:                                              ; preds = %357, %152, %139, %124, %149\n  %363 = phi i8* [ %96, %152 ], [ %96, %139 ], [ %96, %124 ], [ %96, %149 ], [ %361, %357 ]\n  %364 = call double @strtod(i8* nocapture nonnull %363, i8** null) #20\n  %365 = load i8*, i8** %53, align 8, !tbaa !18\n  %366 = icmp eq i8* %365, %50\n  br i1 %366, label %368, label %367\n\n367:                                              ; preds = %362\n  call void @_ZdlPv(i8* %365) #20\n  br label %368\n\n368:                                              ; preds = %362, %367\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %46) #20\n  br label %497\n\n369:                                              ; preds = %355, %188\n  %370 = phi { i8*, i32 } [ %356, %355 ], [ %189, %188 ]\n  %371 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %12, i64 0, i32 0, i32 0\n  %372 = load i8*, i8** %371, align 8, !tbaa !18\n  %373 = icmp eq i8* %372, %50\n  br i1 %373, label %375, label %374\n\n374:                                              ; preds = %369\n  call void @_ZdlPv(i8* %372) #20\n  br label %375\n\n375:                                              ; preds = %369, %374\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %46) #20\n  br label %1000\n\n376:                                              ; preds = %39, %42\n  %377 = load %\"class.boost::any::placeholder\"*, %\"class.boost::any::placeholder\"** %25, align 8, !tbaa !3\n  %378 = icmp eq %\"class.boost::any::placeholder\"* %377, null\n  br i1 %378, label %385, label %379\n\n379:                                              ; preds = %376\n  %380 = bitcast %\"class.boost::any::placeholder\"* %377 to %\"class.std::type_info\"* (%\"class.boost::any::placeholder\"*)***\n  %381 = load %\"class.std::type_info\"* (%\"class.boost::any::placeholder\"*)**, %\"class.std::type_info\"* (%\"class.boost::any::placeholder\"*)*** %380, align 8, !tbaa !8\n  %382 = getelementptr inbounds %\"class.std::type_info\"* (%\"class.boost::any::placeholder\"*)*, %\"class.std::type_info\"* (%\"class.boost::any::placeholder\"*)** %381, i64 2\n  %383 = load %\"class.std::type_info\"* (%\"class.boost::any::placeholder\"*)*, %\"class.std::type_info\"* (%\"class.boost::any::placeholder\"*)** %382, align 8\n  %384 = tail call nonnull align 8 dereferenceable(16) %\"class.std::type_info\"* %383(%\"class.boost::any::placeholder\"* nonnull align 8 dereferenceable(8) %377) #20\n  br label %385\n\n385:                                              ; preds = %376, %379\n  %386 = phi %\"class.std::type_info\"* [ %384, %379 ], [ bitcast (i8** @_ZTIv to %\"class.std::type_info\"*), %376 ]\n  %387 = getelementptr inbounds %\"class.std::type_info\", %\"class.std::type_info\"* %386, i64 0, i32 1\n  %388 = load i8*, i8** %387, align 8, !tbaa !10\n  %389 = load i8*, i8** getelementptr inbounds (i8*, i8** @_ZTIi, i64 1), align 8, !tbaa !10\n  %390 = icmp eq i8* %388, %389\n  br i1 %390, label %397, label %391\n\n391:                                              ; preds = %385\n  %392 = load i8, i8* %388, align 1, !tbaa !12\n  %393 = icmp eq i8 %392, 42\n  br i1 %393, label %436, label %394\n\n394:                                              ; preds = %391\n  %395 = tail call i32 @strcmp(i8* noundef nonnull %388, i8* noundef nonnull dereferenceable(1) %389) #20\n  %396 = icmp eq i32 %395, 0\n  br i1 %396, label %397, label %436\n\n397:                                              ; preds = %385, %394\n  %398 = load %\"class.boost::any::placeholder\"*, %\"class.boost::any::placeholder\"** %25, align 8, !tbaa !3\n  %399 = icmp eq %\"class.boost::any::placeholder\"* %398, null\n  br i1 %399, label %406, label %400\n\n400:                                              ; preds = %397\n  %401 = bitcast %\"class.boost::any::placeholder\"* %398 to %\"class.std::type_info\"* (%\"class.boost::any::placeholder\"*)***\n  %402 = load %\"class.std::type_info\"* (%\"class.boost::any::placeholder\"*)**, %\"class.std::type_info\"* (%\"class.boost::any::placeholder\"*)*** %401, align 8, !tbaa !8\n  %403 = getelementptr inbounds %\"class.std::type_info\"* (%\"class.boost::any::placeholder\"*)*, %\"class.std::type_info\"* (%\"class.boost::any::placeholder\"*)** %402, i64 2\n  %404 = load %\"class.std::type_info\"* (%\"class.boost::any::placeholder\"*)*, %\"class.std::type_info\"* (%\"class.boost::any::placeholder\"*)** %403, align 8\n  %405 = tail call nonnull align 8 dereferenceable(16) %\"class.std::type_info\"* %404(%\"class.boost::any::placeholder\"* nonnull align 8 dereferenceable(8) %398) #20\n  br label %406\n\n406:                                              ; preds = %400, %397\n  %407 = phi %\"class.std::type_info\"* [ %405, %400 ], [ bitcast (i8** @_ZTIv to %\"class.std::type_info\"*), %397 ]\n  %408 = getelementptr inbounds %\"class.std::type_info\", %\"class.std::type_info\"* %407, i64 0, i32 1\n  %409 = load i8*, i8** %408, align 8, !tbaa !10\n  %410 = load i8, i8* %409, align 1, !tbaa !12\n  %411 = icmp eq i8 %410, 42\n  %412 = zext i1 %411 to i64\n  %413 = getelementptr i8, i8* %409, i64 %412\n  %414 = load i8, i8* %389, align 1, !tbaa !12\n  %415 = icmp eq i8 %414, 42\n  %416 = zext i1 %415 to i64\n  %417 = getelementptr i8, i8* %389, i64 %416\n  %418 = icmp eq i8* %413, %417\n  br i1 %418, label %429, label %419\n\n419:                                              ; preds = %406\n  %420 = tail call i32 @strcmp(i8* noundef nonnull dereferenceable(1) %413, i8* noundef nonnull dereferenceable(1) %417) #22\n  %421 = icmp eq i32 %420, 0\n  br i1 %421, label %429, label %422\n\n422:                                              ; preds = %419\n  %423 = bitcast %\"class.boost::bad_any_cast\"* %9 to i8*\n  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %423) #20\n  %424 = getelementptr inbounds %\"class.boost::bad_any_cast\", %\"class.boost::bad_any_cast\"* %9, i64 0, i32 0, i32 0, i32 0\n  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*] }, { [5 x i8*] }* @_ZTVN5boost12bad_any_castE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %424, align 8, !tbaa !8\n  invoke void @_ZN5boost15throw_exceptionINS_12bad_any_castEEEvRKT_(%\"class.boost::bad_any_cast\"* nonnull align 8 dereferenceable(8) %9) #21\n          to label %425 unwind label %426\n\n425:                                              ; preds = %422\n  unreachable\n\n426:                                              ; preds = %422\n  %427 = landingpad { i8*, i32 }\n          cleanup\n  %428 = getelementptr inbounds %\"class.boost::bad_any_cast\", %\"class.boost::bad_any_cast\"* %9, i64 0, i32 0\n  call void @_ZNSt8bad_castD2Ev(%\"class.std::bad_cast\"* nonnull align 8 dereferenceable(8) %428) #20\n  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %423) #20\n  br label %1000\n\n429:                                              ; preds = %406, %419\n  %430 = bitcast %\"class.boost::any\"* %1 to %\"class.boost::any::holder.0\"**\n  %431 = load %\"class.boost::any::holder.0\"*, %\"class.boost::any::holder.0\"** %430, align 8, !tbaa !3\n  %432 = getelementptr inbounds %\"class.boost::any::holder.0\", %\"class.boost::any::holder.0\"* %431, i64 0, i32 1\n  %433 = load i32, i32* %432, align 4, !tbaa !35\n  %434 = sitofp i32 %433 to double\n  %435 = getelementptr %\"class.boost::any::holder.0\", %\"class.boost::any::holder.0\"* %431, i64 0, i32 0\n  br label %439\n\n436:                                              ; preds = %391, %394\n  %437 = load %\"class.boost::any::placeholder\"*, %\"class.boost::any::placeholder\"** %25, align 8, !tbaa !3\n  %438 = icmp eq %\"class.boost::any::placeholder\"* %437, null\n  br i1 %438, label %447, label %439\n\n439:                                              ; preds = %429, %436\n  %440 = phi double [ %434, %429 ], [ undef, %436 ]\n  %441 = phi %\"class.boost::any::placeholder\"* [ %435, %429 ], [ %437, %436 ]\n  %442 = bitcast %\"class.boost::any::placeholder\"* %441 to %\"class.std::type_info\"* (%\"class.boost::any::placeholder\"*)***\n  %443 = load %\"class.std::type_info\"* (%\"class.boost::any::placeholder\"*)**, %\"class.std::type_info\"* (%\"class.boost::any::placeholder\"*)*** %442, align 8, !tbaa !8\n  %444 = getelementptr inbounds %\"class.std::type_info\"* (%\"class.boost::any::placeholder\"*)*, %\"class.std::type_info\"* (%\"class.boost::any::placeholder\"*)** %443, i64 2\n  %445 = load %\"class.std::type_info\"* (%\"class.boost::any::placeholder\"*)*, %\"class.std::type_info\"* (%\"class.boost::any::placeholder\"*)** %444, align 8\n  %446 = tail call nonnull align 8 dereferenceable(16) %\"class.std::type_info\"* %445(%\"class.boost::any::placeholder\"* nonnull align 8 dereferenceable(8) %441) #20\n  br label %447\n\n447:                                              ; preds = %436, %439\n  %448 = phi double [ %440, %439 ], [ undef, %436 ]\n  %449 = phi %\"class.std::type_info\"* [ %446, %439 ], [ bitcast (i8** @_ZTIv to %\"class.std::type_info\"*), %436 ]\n  %450 = getelementptr inbounds %\"class.std::type_info\", %\"class.std::type_info\"* %449, i64 0, i32 1\n  %451 = load i8*, i8** %450, align 8, !tbaa !10\n  %452 = load i8*, i8** getelementptr inbounds (i8*, i8** @_ZTId, i64 1), align 8, !tbaa !10\n  %453 = icmp eq i8* %451, %452\n  br i1 %453, label %460, label %454\n\n454:                                              ; preds = %447\n  %455 = load i8, i8* %451, align 1, !tbaa !12\n  %456 = icmp eq i8 %455, 42\n  br i1 %456, label %497, label %457\n\n457:                                              ; preds = %454\n  %458 = tail call i32 @strcmp(i8* noundef nonnull %451, i8* noundef nonnull dereferenceable(1) %452) #20\n  %459 = icmp eq i32 %458, 0\n  br i1 %459, label %460, label %497\n\n460:                                              ; preds = %447, %457\n  %461 = load %\"class.boost::any::placeholder\"*, %\"class.boost::any::placeholder\"** %25, align 8, !tbaa !3\n  %462 = icmp eq %\"class.boost::any::placeholder\"* %461, null\n  br i1 %462, label %469, label %463\n\n463:                                              ; preds = %460\n  %464 = bitcast %\"class.boost::any::placeholder\"* %461 to %\"class.std::type_info\"* (%\"class.boost::any::placeholder\"*)***\n  %465 = load %\"class.std::type_info\"* (%\"class.boost::any::placeholder\"*)**, %\"class.std::type_info\"* (%\"class.boost::any::placeholder\"*)*** %464, align 8, !tbaa !8\n  %466 = getelementptr inbounds %\"class.std::type_info\"* (%\"class.boost::any::placeholder\"*)*, %\"class.std::type_info\"* (%\"class.boost::any::placeholder\"*)** %465, i64 2\n  %467 = load %\"class.std::type_info\"* (%\"class.boost::any::placeholder\"*)*, %\"class.std::type_info\"* (%\"class.boost::any::placeholder\"*)** %466, align 8\n  %468 = tail call nonnull align 8 dereferenceable(16) %\"class.std::type_info\"* %467(%\"class.boost::any::placeholder\"* nonnull align 8 dereferenceable(8) %461) #20\n  br label %469\n\n469:                                              ; preds = %463, %460\n  %470 = phi %\"class.std::type_info\"* [ %468, %463 ], [ bitcast (i8** @_ZTIv to %\"class.std::type_info\"*), %460 ]\n  %471 = getelementptr inbounds %\"class.std::type_info\", %\"class.std::type_info\"* %470, i64 0, i32 1\n  %472 = load i8*, i8** %471, align 8, !tbaa !10\n  %473 = load i8, i8* %472, align 1, !tbaa !12\n  %474 = icmp eq i8 %473, 42\n  %475 = zext i1 %474 to i64\n  %476 = getelementptr i8, i8* %472, i64 %475\n  %477 = load i8, i8* %452, align 1, !tbaa !12\n  %478 = icmp eq i8 %477, 42\n  %479 = zext i1 %478 to i64\n  %480 = getelementptr i8, i8* %452, i64 %479\n  %481 = icmp eq i8* %476, %480\n  br i1 %481, label %492, label %482\n\n482:                                              ; preds = %469\n  %483 = tail call i32 @strcmp(i8* noundef nonnull dereferenceable(1) %476, i8* noundef nonnull dereferenceable(1) %480) #22\n  %484 = icmp eq i32 %483, 0\n  br i1 %484, label %492, label %485\n\n485:                                              ; preds = %482\n  %486 = bitcast %\"class.boost::bad_any_cast\"* %8 to i8*\n  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %486) #20\n  %487 = getelementptr inbounds %\"class.boost::bad_any_cast\", %\"class.boost::bad_any_cast\"* %8, i64 0, i32 0, i32 0, i32 0\n  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*] }, { [5 x i8*] }* @_ZTVN5boost12bad_any_castE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %487, align 8, !tbaa !8\n  invoke void @_ZN5boost15throw_exceptionINS_12bad_any_castEEEvRKT_(%\"class.boost::bad_any_cast\"* nonnull align 8 dereferenceable(8) %8) #21\n          to label %488 unwind label %489\n\n488:                                              ; preds = %485\n  unreachable\n\n489:                                              ; preds = %485\n  %490 = landingpad { i8*, i32 }\n          cleanup\n  %491 = getelementptr inbounds %\"class.boost::bad_any_cast\", %\"class.boost::bad_any_cast\"* %8, i64 0, i32 0\n  call void @_ZNSt8bad_castD2Ev(%\"class.std::bad_cast\"* nonnull align 8 dereferenceable(8) %491) #20\n  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %486) #20\n  br label %1000\n\n492:                                              ; preds = %469, %482\n  %493 = bitcast %\"class.boost::any\"* %1 to %\"class.boost::any::holder.1\"**\n  %494 = load %\"class.boost::any::holder.1\"*, %\"class.boost::any::holder.1\"** %493, align 8, !tbaa !3\n  %495 = getelementptr inbounds %\"class.boost::any::holder.1\", %\"class.boost::any::holder.1\"* %494, i64 0, i32 1\n  %496 = load double, double* %495, align 8, !tbaa !37\n  br label %497\n\n497:                                              ; preds = %454, %492, %457, %368\n  %498 = phi double [ %364, %368 ], [ %448, %457 ], [ %496, %492 ], [ %448, %454 ]\n  %499 = getelementptr inbounds %\"class.boost::any\", %\"class.boost::any\"* %2, i64 0, i32 0\n  %500 = load %\"class.boost::any::placeholder\"*, %\"class.boost::any::placeholder\"** %499, align 8, !tbaa !3\n  %501 = icmp eq %\"class.boost::any::placeholder\"* %500, null\n  br i1 %501, label %508, label %502\n\n502:                                              ; preds = %497\n  %503 = bitcast %\"class.boost::any::placeholder\"* %500 to %\"class.std::type_info\"* (%\"class.boost::any::placeholder\"*)***\n  %504 = load %\"class.std::type_info\"* (%\"class.boost::any::placeholder\"*)**, %\"class.std::type_info\"* (%\"class.boost::any::placeholder\"*)*** %503, align 8, !tbaa !8\n  %505 = getelementptr inbounds %\"class.std::type_info\"* (%\"class.boost::any::placeholder\"*)*, %\"class.std::type_info\"* (%\"class.boost::any::placeholder\"*)** %504, i64 2\n  %506 = load %\"class.std::type_info\"* (%\"class.boost::any::placeholder\"*)*, %\"class.std::type_info\"* (%\"class.boost::any::placeholder\"*)** %505, align 8\n  %507 = call nonnull align 8 dereferenceable(16) %\"class.std::type_info\"* %506(%\"class.boost::any::placeholder\"* nonnull align 8 dereferenceable(8) %500) #20\n  br label %508\n\n508:                                              ; preds = %497, %502\n  %509 = phi %\"class.std::type_info\"* [ %507, %502 ], [ bitcast (i8** @_ZTIv to %\"class.std::type_info\"*), %497 ]\n  %510 = getelementptr inbounds %\"class.std::type_info\", %\"class.std::type_info\"* %509, i64 0, i32 1\n  %511 = load i8*, i8** %510, align 8, !tbaa !10\n  %512 = icmp eq i8* %511, getelementptr inbounds ([53 x i8], [53 x i8]* @_ZTSNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE, i64 0, i64 0)\n  br i1 %512, label %519, label %513\n\n513:                                              ; preds = %508\n  %514 = load i8, i8* %511, align 1, !tbaa !12\n  %515 = icmp eq i8 %514, 42\n  br i1 %515, label %850, label %516\n\n516:                                              ; preds = %513\n  %517 = call i32 @strcmp(i8* noundef nonnull %511, i8* noundef nonnull dereferenceable(53) getelementptr inbounds ([53 x i8], [53 x i8]* @_ZTSNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE, i64 0, i64 0)) #20\n  %518 = icmp eq i32 %517, 0\n  br i1 %518, label %519, label %850\n\n519:                                              ; preds = %508, %516\n  %520 = bitcast %\"class.std::__cxx11::basic_string\"* %18 to i8*\n  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %520) #20\n  %521 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %18, i64 0, i32 2\n  %522 = bitcast %\"class.std::__cxx11::basic_string\"* %18 to %union.anon**\n  store %union.anon* %521, %union.anon** %522, align 8, !tbaa !13\n  %523 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %18, i64 0, i32 1\n  store i64 0, i64* %523, align 8, !tbaa !15\n  %524 = bitcast %union.anon* %521 to i8*\n  store i8 0, i8* %524, align 8, !tbaa !12\n  %525 = bitcast %\"class.std::__cxx11::basic_string\"* %19 to i8*\n  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %525) #20\n  invoke void @_ZN5boost8any_castINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEET_RNS_3anyE(%\"class.std::__cxx11::basic_string\"* nonnull sret(%\"class.std::__cxx11::basic_string\") align 8 %19, %\"class.boost::any\"* nonnull align 8 dereferenceable(8) %2)\n          to label %526 unwind label %662\n\n526:                                              ; preds = %519\n  %527 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %18, i64 0, i32 0, i32 0\n  %528 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %19, i64 0, i32 0, i32 0\n  %529 = load i8*, i8** %528, align 8, !tbaa !18\n  %530 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %19, i64 0, i32 2\n  %531 = bitcast %union.anon* %530 to i8*\n  %532 = icmp eq i8* %529, %531\n  br i1 %532, label %533, label %548\n\n533:                                              ; preds = %526\n  %534 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %19, i64 0, i32 1\n  %535 = load i64, i64* %534, align 8, !tbaa !15\n  %536 = icmp eq i64 %535, 0\n  br i1 %536, label %543, label %537\n\n537:                                              ; preds = %533\n  %538 = load i8*, i8** %527, align 8, !tbaa !18\n  %539 = icmp eq i64 %535, 1\n  br i1 %539, label %540, label %542\n\n540:                                              ; preds = %537\n  %541 = load i8, i8* %529, align 1, !tbaa !12\n  store i8 %541, i8* %538, align 1, !tbaa !12\n  br label %543\n\n542:                                              ; preds = %537\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %538, i8* align 1 %529, i64 %535, i1 false) #20\n  br label %543\n\n543:                                              ; preds = %542, %540, %533\n  %544 = load i64, i64* %534, align 8, !tbaa !15\n  store i64 %544, i64* %523, align 8, !tbaa !15\n  %545 = load i8*, i8** %527, align 8, !tbaa !18\n  %546 = getelementptr inbounds i8, i8* %545, i64 %544\n  store i8 0, i8* %546, align 1, !tbaa !12\n  %547 = load i8*, i8** %528, align 8, !tbaa !18\n  br label %563\n\n548:                                              ; preds = %526\n  %549 = load i8*, i8** %527, align 8, !tbaa !18\n  %550 = icmp eq i8* %549, %524\n  %551 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %18, i64 0, i32 2, i32 0\n  %552 = load i64, i64* %551, align 8\n  store i8* %529, i8** %527, align 8, !tbaa !18\n  %553 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %19, i64 0, i32 1\n  %554 = bitcast i64* %553 to <2 x i64>*\n  %555 = load <2 x i64>, <2 x i64>* %554, align 8, !tbaa !12\n  %556 = bitcast i64* %523 to <2 x i64>*\n  store <2 x i64> %555, <2 x i64>* %556, align 8, !tbaa !12\n  %557 = icmp eq i8* %549, null\n  %558 = or i1 %550, %557\n  br i1 %558, label %561, label %559\n\n559:                                              ; preds = %548\n  store i8* %549, i8** %528, align 8, !tbaa !18\n  %560 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %19, i64 0, i32 2, i32 0\n  store i64 %552, i64* %560, align 8, !tbaa !12\n  br label %563\n\n561:                                              ; preds = %548\n  %562 = bitcast %\"class.std::__cxx11::basic_string\"* %19 to %union.anon**\n  store %union.anon* %530, %union.anon** %562, align 8, !tbaa !18\n  br label %563\n\n563:                                              ; preds = %543, %559, %561\n  %564 = phi i8* [ %547, %543 ], [ %549, %559 ], [ %531, %561 ]\n  %565 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %19, i64 0, i32 1\n  store i64 0, i64* %565, align 8, !tbaa !15\n  store i8 0, i8* %564, align 1, !tbaa !12\n  %566 = load i8*, i8** %528, align 8, !tbaa !18\n  %567 = icmp eq i8* %566, %531\n  br i1 %567, label %569, label %568\n\n568:                                              ; preds = %563\n  call void @_ZdlPv(i8* %566) #20\n  br label %569\n\n569:                                              ; preds = %563, %568\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %525) #20\n  %570 = load i8*, i8** %527, align 8, !tbaa !18\n  %571 = load i64, i64* %523, align 8, !tbaa !15\n  %572 = getelementptr inbounds i8, i8* %570, i64 %571\n  %573 = ptrtoint i8* %572 to i64\n  %574 = icmp sgt i64 %571, 3\n  br i1 %574, label %575, label %598\n\n575:                                              ; preds = %569\n  %576 = lshr i64 %571, 2\n  br label %577\n\n577:                                              ; preds = %594, %575\n  %578 = phi i64 [ %576, %575 ], [ %596, %594 ]\n  %579 = phi i8* [ %570, %575 ], [ %595, %594 ]\n  %580 = load i8, i8* %579, align 1, !tbaa !12\n  %581 = icmp eq i8 %580, 44\n  br i1 %581, label %623, label %582\n\n582:                                              ; preds = %577\n  %583 = getelementptr inbounds i8, i8* %579, i64 1\n  %584 = load i8, i8* %583, align 1, !tbaa !12\n  %585 = icmp eq i8 %584, 44\n  br i1 %585, label %621, label %586\n\n586:                                              ; preds = %582\n  %587 = getelementptr inbounds i8, i8* %579, i64 2\n  %588 = load i8, i8* %587, align 1, !tbaa !12\n  %589 = icmp eq i8 %588, 44\n  br i1 %589, label %619, label %590\n\n590:                                              ; preds = %586\n  %591 = getelementptr inbounds i8, i8* %579, i64 3\n  %592 = load i8, i8* %591, align 1, !tbaa !12\n  %593 = icmp eq i8 %592, 44\n  br i1 %593, label %617, label %594\n\n594:                                              ; preds = %590\n  %595 = getelementptr inbounds i8, i8* %579, i64 4\n  %596 = add nsw i64 %578, -1\n  %597 = icmp sgt i64 %578, 1\n  br i1 %597, label %577, label %598, !llvm.loop !19\n\n598:                                              ; preds = %594, %569\n  %599 = phi i8* [ %570, %569 ], [ %595, %594 ]\n  %600 = ptrtoint i8* %599 to i64\n  %601 = sub i64 %573, %600\n  switch i64 %601, label %836 [\n    i64 3, label %602\n    i64 2, label %607\n    i64 1, label %613\n  ]\n\n602:                                              ; preds = %598\n  %603 = load i8, i8* %599, align 1, !tbaa !12\n  %604 = icmp eq i8 %603, 44\n  br i1 %604, label %623, label %605\n\n605:                                              ; preds = %602\n  %606 = getelementptr inbounds i8, i8* %599, i64 1\n  br label %607\n\n607:                                              ; preds = %598, %605\n  %608 = phi i8* [ %606, %605 ], [ %599, %598 ]\n  %609 = load i8, i8* %608, align 1, !tbaa !12\n  %610 = icmp eq i8 %609, 44\n  br i1 %610, label %623, label %611\n\n611:                                              ; preds = %607\n  %612 = getelementptr inbounds i8, i8* %608, i64 1\n  br label %613\n\n613:                                              ; preds = %598, %611\n  %614 = phi i8* [ %612, %611 ], [ %599, %598 ]\n  %615 = load i8, i8* %614, align 1, !tbaa !12\n  %616 = icmp eq i8 %615, 44\n  br i1 %616, label %623, label %836\n\n617:                                              ; preds = %590\n  %618 = getelementptr inbounds i8, i8* %579, i64 3\n  br label %623\n\n619:                                              ; preds = %586\n  %620 = getelementptr inbounds i8, i8* %579, i64 2\n  br label %623\n\n621:                                              ; preds = %582\n  %622 = getelementptr inbounds i8, i8* %579, i64 1\n  br label %623\n\n623:                                              ; preds = %577, %617, %619, %621, %613, %607, %602\n  %624 = phi i8* [ %599, %602 ], [ %608, %607 ], [ %614, %613 ], [ %618, %617 ], [ %620, %619 ], [ %622, %621 ], [ %579, %577 ]\n  %625 = icmp eq i8* %624, %572\n  br i1 %625, label %836, label %626\n\n626:                                              ; preds = %623\n  %627 = bitcast %\"class.std::__cxx11::basic_string\"* %20 to i8*\n  %628 = bitcast %\"class.std::__cxx11::basic_string\"* %21 to i8*\n  %629 = bitcast %\"class.std::__cxx11::basic_string\"* %22 to i8*\n  %630 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %22, i64 0, i32 2\n  %631 = bitcast %\"class.std::__cxx11::basic_string\"* %22 to %union.anon**\n  %632 = bitcast %union.anon* %630 to i8*\n  %633 = bitcast i64* %7 to i8*\n  %634 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %22, i64 0, i32 0, i32 0\n  %635 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %22, i64 0, i32 2, i32 0\n  %636 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %22, i64 0, i32 1\n  %637 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %21, i64 0, i32 2\n  %638 = bitcast %\"class.std::__cxx11::basic_string\"* %21 to %union.anon**\n  %639 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %21, i64 0, i32 0, i32 0\n  %640 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %21, i64 0, i32 2, i32 0\n  %641 = bitcast %union.anon* %637 to i8*\n  %642 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %21, i64 0, i32 1\n  %643 = bitcast %\"class.std::__cxx11::basic_string\"* %23 to i8*\n  %644 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %23, i64 0, i32 2\n  %645 = bitcast %\"class.std::__cxx11::basic_string\"* %23 to %union.anon**\n  %646 = bitcast %union.anon* %644 to i8*\n  %647 = bitcast i64* %6 to i8*\n  %648 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %23, i64 0, i32 0, i32 0\n  %649 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %23, i64 0, i32 2, i32 0\n  %650 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %23, i64 0, i32 1\n  %651 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %20, i64 0, i32 2\n  %652 = bitcast %\"class.std::__cxx11::basic_string\"* %20 to %union.anon**\n  %653 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %20, i64 0, i32 0, i32 0\n  %654 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %20, i64 0, i32 2, i32 0\n  %655 = bitcast %union.anon* %651 to i8*\n  %656 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %20, i64 0, i32 1\n  %657 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %18, i64 0, i32 2, i32 0\n  %658 = icmp eq i64 %571, 0\n  br i1 %658, label %836, label %659\n\n659:                                              ; preds = %626\n  %660 = bitcast i64* %656 to <2 x i64>*\n  %661 = bitcast i64* %523 to <2 x i64>*\n  br label %664\n\n662:                                              ; preds = %519\n  %663 = landingpad { i8*, i32 }\n          cleanup\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %525) #20\n  br label %843\n\n664:                                              ; preds = %659, %831\n  %665 = phi i64 [ %833, %831 ], [ %571, %659 ]\n  %666 = phi i8* [ %835, %831 ], [ %570, %659 ]\n  %667 = phi i64 [ %832, %831 ], [ 0, %659 ]\n  %668 = getelementptr inbounds i8, i8* %666, i64 %667\n  %669 = load i8, i8* %668, align 1, !tbaa !12\n  %670 = icmp eq i8 %669, 44\n  br i1 %670, label %673, label %671\n\n671:                                              ; preds = %664\n  %672 = add nuw i64 %667, 1\n  br label %831\n\n673:                                              ; preds = %664\n  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %627) #20\n  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %628) #20\n  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %629) #20\n  call void @llvm.experimental.noalias.scope.decl(metadata !39)\n  store %union.anon* %630, %union.anon** %631, align 8, !tbaa !13, !alias.scope !39\n  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %633) #20, !noalias !39\n  store i64 %667, i64* %7, align 8, !tbaa !24, !noalias !39\n  %674 = icmp ugt i64 %667, 15\n  br i1 %674, label %675, label %679\n\n675:                                              ; preds = %673\n  %676 = invoke i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %22, i64* nonnull align 8 dereferenceable(8) %7, i64 0)\n          to label %677 unwind label %806\n\n677:                                              ; preds = %675\n  store i8* %676, i8** %634, align 8, !tbaa !18, !alias.scope !39\n  %678 = load i64, i64* %7, align 8, !tbaa !24, !noalias !39\n  store i64 %678, i64* %635, align 8, !tbaa !12, !alias.scope !39\n  br label %679\n\n679:                                              ; preds = %677, %673\n  %680 = phi i8* [ %676, %677 ], [ %632, %673 ]\n  %681 = trunc i64 %667 to i32\n  switch i32 %681, label %684 [\n    i32 1, label %682\n    i32 0, label %685\n  ]\n\n682:                                              ; preds = %679\n  %683 = load i8, i8* %666, align 1, !tbaa !12\n  store i8 %683, i8* %680, align 1, !tbaa !12\n  br label %685\n\n684:                                              ; preds = %679\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %680, i8* nonnull align 1 %666, i64 %667, i1 false) #20\n  br label %685\n\n685:                                              ; preds = %684, %682, %679\n  %686 = load i64, i64* %7, align 8, !tbaa !24, !noalias !39\n  store i64 %686, i64* %636, align 8, !tbaa !15, !alias.scope !39\n  %687 = load i8*, i8** %634, align 8, !tbaa !18, !alias.scope !39\n  %688 = getelementptr inbounds i8, i8* %687, i64 %686\n  store i8 0, i8* %688, align 1, !tbaa !12\n  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %633) #20, !noalias !39\n  call void @llvm.experimental.noalias.scope.decl(metadata !42)\n  %689 = load i64, i64* %636, align 8, !tbaa !15, !noalias !42\n  %690 = invoke nonnull align 8 dereferenceable(32) %\"class.std::__cxx11::basic_string\"* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEmmmc(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %22, i64 %689, i64 0, i64 1, i8 signext 46)\n          to label %691 unwind label %808\n\n691:                                              ; preds = %685\n  store %union.anon* %637, %union.anon** %638, align 8, !tbaa !13, !alias.scope !42\n  %692 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %690, i64 0, i32 0, i32 0\n  %693 = load i8*, i8** %692, align 8, !tbaa !18\n  %694 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %690, i64 0, i32 2\n  %695 = bitcast %union.anon* %694 to i8*\n  %696 = icmp eq i8* %693, %695\n  br i1 %696, label %697, label %698\n\n697:                                              ; preds = %691\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(16) %641, i8* noundef nonnull align 8 dereferenceable(16) %693, i64 16, i1 false) #20\n  br label %701\n\n698:                                              ; preds = %691\n  store i8* %693, i8** %639, align 8, !tbaa !18, !alias.scope !42\n  %699 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %690, i64 0, i32 2, i32 0\n  %700 = load i64, i64* %699, align 8, !tbaa !12\n  store i64 %700, i64* %640, align 8, !tbaa !12, !alias.scope !42\n  br label %701\n\n701:                                              ; preds = %698, %697\n  %702 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %690, i64 0, i32 1\n  %703 = load i64, i64* %702, align 8, !tbaa !15\n  store i64 %703, i64* %642, align 8, !tbaa !15, !alias.scope !42\n  %704 = bitcast %\"class.std::__cxx11::basic_string\"* %690 to %union.anon**\n  store %union.anon* %694, %union.anon** %704, align 8, !tbaa !18\n  store i64 0, i64* %702, align 8, !tbaa !15\n  store i8 0, i8* %695, align 8, !tbaa !12\n  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %643) #20\n  %705 = add nuw i64 %667, 1\n  call void @llvm.experimental.noalias.scope.decl(metadata !45)\n  %706 = load i64, i64* %523, align 8, !tbaa !15, !noalias !45\n  %707 = icmp ugt i64 %706, %667\n  br i1 %707, label %711, label %708\n\n708:                                              ; preds = %701\n  %709 = and i64 %705, 4294967295\n  invoke void (i8*, ...) @_ZSt24__throw_out_of_range_fmtPKcz(i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.3, i64 0, i64 0), i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.5, i64 0, i64 0), i64 %709, i64 %706) #21\n          to label %710 unwind label %812\n\n710:                                              ; preds = %708\n  unreachable\n\n711:                                              ; preds = %701\n  store %union.anon* %644, %union.anon** %645, align 8, !tbaa !13, !alias.scope !45\n  %712 = load i8*, i8** %527, align 8, !tbaa !18, !noalias !45\n  %713 = getelementptr inbounds i8, i8* %712, i64 %705\n  %714 = sub i64 %706, %705\n  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %647) #20, !noalias !45\n  store i64 %714, i64* %6, align 8, !tbaa !24, !noalias !45\n  %715 = icmp ugt i64 %714, 15\n  br i1 %715, label %716, label %720\n\n716:                                              ; preds = %711\n  %717 = invoke i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %23, i64* nonnull align 8 dereferenceable(8) %6, i64 0)\n          to label %718 unwind label %810\n\n718:                                              ; preds = %716\n  store i8* %717, i8** %648, align 8, !tbaa !18, !alias.scope !45\n  %719 = load i64, i64* %6, align 8, !tbaa !24, !noalias !45\n  store i64 %719, i64* %649, align 8, !tbaa !12, !alias.scope !45\n  br label %720\n\n720:                                              ; preds = %718, %711\n  %721 = phi i8* [ %717, %718 ], [ %646, %711 ]\n  switch i64 %714, label %724 [\n    i64 1, label %722\n    i64 0, label %725\n  ]\n\n722:                                              ; preds = %720\n  %723 = load i8, i8* %713, align 1, !tbaa !12\n  store i8 %723, i8* %721, align 1, !tbaa !12\n  br label %725\n\n724:                                              ; preds = %720\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %721, i8* nonnull align 1 %713, i64 %714, i1 false) #20\n  br label %725\n\n725:                                              ; preds = %724, %722, %720\n  %726 = load i64, i64* %6, align 8, !tbaa !24, !noalias !45\n  store i64 %726, i64* %650, align 8, !tbaa !15, !alias.scope !45\n  %727 = load i8*, i8** %648, align 8, !tbaa !18, !alias.scope !45\n  %728 = getelementptr inbounds i8, i8* %727, i64 %726\n  store i8 0, i8* %728, align 1, !tbaa !12\n  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %647) #20, !noalias !45\n  call void @llvm.experimental.noalias.scope.decl(metadata !48)\n  %729 = load i64, i64* %642, align 8, !tbaa !15, !noalias !48\n  %730 = load i64, i64* %650, align 8, !tbaa !15, !noalias !48\n  %731 = add i64 %730, %729\n  %732 = load i8*, i8** %639, align 8, !tbaa !18, !noalias !48\n  %733 = icmp eq i8* %732, %641\n  %734 = load i64, i64* %640, align 8, !noalias !48\n  %735 = select i1 %733, i64 15, i64 %734\n  %736 = icmp ugt i64 %731, %735\n  %737 = load i8*, i8** %648, align 8, !tbaa !18, !noalias !48\n  br i1 %736, label %738, label %745\n\n738:                                              ; preds = %725\n  %739 = icmp eq i8* %737, %646\n  %740 = load i64, i64* %649, align 8, !noalias !48\n  %741 = select i1 %739, i64 15, i64 %740\n  %742 = icmp ugt i64 %731, %741\n  br i1 %742, label %745, label %743\n\n743:                                              ; preds = %738\n  %744 = invoke nonnull align 8 dereferenceable(32) %\"class.std::__cxx11::basic_string\"* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %23, i64 0, i64 0, i8* %732, i64 %729)\n          to label %747 unwind label %814\n\n745:                                              ; preds = %738, %725\n  %746 = invoke nonnull align 8 dereferenceable(32) %\"class.std::__cxx11::basic_string\"* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %21, i8* %737, i64 %730)\n          to label %747 unwind label %814\n\n747:                                              ; preds = %745, %743\n  %748 = phi %\"class.std::__cxx11::basic_string\"* [ %744, %743 ], [ %746, %745 ]\n  store %union.anon* %651, %union.anon** %652, align 8, !tbaa !13, !alias.scope !48\n  %749 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %748, i64 0, i32 0, i32 0\n  %750 = load i8*, i8** %749, align 8, !tbaa !18\n  %751 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %748, i64 0, i32 2\n  %752 = bitcast %union.anon* %751 to i8*\n  %753 = icmp eq i8* %750, %752\n  br i1 %753, label %754, label %755\n\n754:                                              ; preds = %747\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(16) %655, i8* noundef nonnull align 8 dereferenceable(16) %750, i64 16, i1 false) #20\n  br label %758\n\n755:                                              ; preds = %747\n  store i8* %750, i8** %653, align 8, !tbaa !18, !alias.scope !48\n  %756 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %748, i64 0, i32 2, i32 0\n  %757 = load i64, i64* %756, align 8, !tbaa !12\n  store i64 %757, i64* %654, align 8, !tbaa !12, !alias.scope !48\n  br label %758\n\n758:                                              ; preds = %755, %754\n  %759 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %748, i64 0, i32 1\n  %760 = load i64, i64* %759, align 8, !tbaa !15\n  store i64 %760, i64* %656, align 8, !tbaa !15, !alias.scope !48\n  %761 = bitcast %\"class.std::__cxx11::basic_string\"* %748 to %union.anon**\n  store %union.anon* %751, %union.anon** %761, align 8, !tbaa !18\n  store i64 0, i64* %759, align 8, !tbaa !15\n  store i8 0, i8* %752, align 8, !tbaa !12\n  %762 = load i8*, i8** %653, align 8, !tbaa !18\n  %763 = icmp eq i8* %762, %655\n  br i1 %763, label %764, label %778\n\n764:                                              ; preds = %758\n  %765 = load i64, i64* %656, align 8, !tbaa !15\n  %766 = icmp eq i64 %765, 0\n  br i1 %766, label %773, label %767\n\n767:                                              ; preds = %764\n  %768 = load i8*, i8** %527, align 8, !tbaa !18\n  %769 = icmp eq i64 %765, 1\n  br i1 %769, label %770, label %772\n\n770:                                              ; preds = %767\n  %771 = load i8, i8* %655, align 8, !tbaa !12\n  store i8 %771, i8* %768, align 1, !tbaa !12\n  br label %773\n\n772:                                              ; preds = %767\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %768, i8* nonnull align 8 %655, i64 %765, i1 false) #20\n  br label %773\n\n773:                                              ; preds = %772, %770, %764\n  %774 = load i64, i64* %656, align 8, !tbaa !15\n  store i64 %774, i64* %523, align 8, !tbaa !15\n  %775 = load i8*, i8** %527, align 8, !tbaa !18\n  %776 = getelementptr inbounds i8, i8* %775, i64 %774\n  store i8 0, i8* %776, align 1, !tbaa !12\n  %777 = load i8*, i8** %653, align 8, !tbaa !18\n  br label %787\n\n778:                                              ; preds = %758\n  %779 = load i8*, i8** %527, align 8, !tbaa !18\n  %780 = icmp eq i8* %779, %524\n  %781 = load i64, i64* %657, align 8\n  store i8* %762, i8** %527, align 8, !tbaa !18\n  %782 = load <2 x i64>, <2 x i64>* %660, align 8, !tbaa !12\n  store <2 x i64> %782, <2 x i64>* %661, align 8, !tbaa !12\n  %783 = icmp eq i8* %779, null\n  %784 = or i1 %780, %783\n  br i1 %784, label %786, label %785\n\n785:                                              ; preds = %778\n  store i8* %779, i8** %653, align 8, !tbaa !18\n  store i64 %781, i64* %654, align 8, !tbaa !12\n  br label %787\n\n786:                                              ; preds = %778\n  store %union.anon* %651, %union.anon** %652, align 8, !tbaa !18\n  br label %787\n\n787:                                              ; preds = %773, %785, %786\n  %788 = phi i8* [ %777, %773 ], [ %779, %785 ], [ %655, %786 ]\n  store i64 0, i64* %656, align 8, !tbaa !15\n  store i8 0, i8* %788, align 1, !tbaa !12\n  %789 = load i8*, i8** %653, align 8, !tbaa !18\n  %790 = icmp eq i8* %789, %655\n  br i1 %790, label %792, label %791\n\n791:                                              ; preds = %787\n  call void @_ZdlPv(i8* %789) #20\n  br label %792\n\n792:                                              ; preds = %787, %791\n  %793 = load i8*, i8** %648, align 8, !tbaa !18\n  %794 = icmp eq i8* %793, %646\n  br i1 %794, label %796, label %795\n\n795:                                              ; preds = %792\n  call void @_ZdlPv(i8* %793) #20\n  br label %796\n\n796:                                              ; preds = %792, %795\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %643) #20\n  %797 = load i8*, i8** %639, align 8, !tbaa !18\n  %798 = icmp eq i8* %797, %641\n  br i1 %798, label %800, label %799\n\n799:                                              ; preds = %796\n  call void @_ZdlPv(i8* %797) #20\n  br label %800\n\n800:                                              ; preds = %796, %799\n  %801 = load i8*, i8** %634, align 8, !tbaa !18\n  %802 = icmp eq i8* %801, %632\n  br i1 %802, label %804, label %803\n\n803:                                              ; preds = %800\n  call void @_ZdlPv(i8* %801) #20\n  br label %804\n\n804:                                              ; preds = %800, %803\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %629) #20\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %628) #20\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %627) #20\n  %805 = load i64, i64* %523, align 8, !tbaa !15\n  br label %831\n\n806:                                              ; preds = %675\n  %807 = landingpad { i8*, i32 }\n          cleanup\n  br label %829\n\n808:                                              ; preds = %685\n  %809 = landingpad { i8*, i32 }\n          cleanup\n  br label %824\n\n810:                                              ; preds = %716\n  %811 = landingpad { i8*, i32 }\n          cleanup\n  br label %819\n\n812:                                              ; preds = %708\n  %813 = landingpad { i8*, i32 }\n          cleanup\n  br label %819\n\n814:                                              ; preds = %745, %743\n  %815 = landingpad { i8*, i32 }\n          cleanup\n  %816 = load i8*, i8** %648, align 8, !tbaa !18\n  %817 = icmp eq i8* %816, %646\n  br i1 %817, label %819, label %818\n\n818:                                              ; preds = %814\n  call void @_ZdlPv(i8* %816) #20\n  br label %819\n\n819:                                              ; preds = %810, %812, %818, %814\n  %820 = phi { i8*, i32 } [ %815, %814 ], [ %815, %818 ], [ %811, %810 ], [ %813, %812 ]\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %643) #20\n  %821 = load i8*, i8** %639, align 8, !tbaa !18\n  %822 = icmp eq i8* %821, %641\n  br i1 %822, label %824, label %823\n\n823:                                              ; preds = %819\n  call void @_ZdlPv(i8* %821) #20\n  br label %824\n\n824:                                              ; preds = %823, %819, %808\n  %825 = phi { i8*, i32 } [ %809, %808 ], [ %820, %819 ], [ %820, %823 ]\n  %826 = load i8*, i8** %634, align 8, !tbaa !18\n  %827 = icmp eq i8* %826, %632\n  br i1 %827, label %829, label %828\n\n828:                                              ; preds = %824\n  call void @_ZdlPv(i8* %826) #20\n  br label %829\n\n829:                                              ; preds = %828, %824, %806\n  %830 = phi { i8*, i32 } [ %807, %806 ], [ %825, %824 ], [ %825, %828 ]\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %629) #20\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %628) #20\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %627) #20\n  br label %843\n\n831:                                              ; preds = %671, %804\n  %832 = phi i64 [ %672, %671 ], [ %705, %804 ]\n  %833 = phi i64 [ %665, %671 ], [ %805, %804 ]\n  %834 = icmp ugt i64 %833, %832\n  %835 = load i8*, i8** %527, align 8, !tbaa !18\n  br i1 %834, label %664, label %836, !llvm.loop !51\n\n836:                                              ; preds = %831, %626, %613, %598, %623\n  %837 = phi i8* [ %570, %626 ], [ %570, %613 ], [ %570, %598 ], [ %570, %623 ], [ %835, %831 ]\n  %838 = call double @strtod(i8* nocapture nonnull %837, i8** null) #20\n  %839 = load i8*, i8** %527, align 8, !tbaa !18\n  %840 = icmp eq i8* %839, %524\n  br i1 %840, label %842, label %841\n\n841:                                              ; preds = %836\n  call void @_ZdlPv(i8* %839) #20\n  br label %842\n\n842:                                              ; preds = %836, %841\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %520) #20\n  br label %971\n\n843:                                              ; preds = %829, %662\n  %844 = phi { i8*, i32 } [ %830, %829 ], [ %663, %662 ]\n  %845 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %18, i64 0, i32 0, i32 0\n  %846 = load i8*, i8** %845, align 8, !tbaa !18\n  %847 = icmp eq i8* %846, %524\n  br i1 %847, label %849, label %848\n\n848:                                              ; preds = %843\n  call void @_ZdlPv(i8* %846) #20\n  br label %849\n\n849:                                              ; preds = %843, %848\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %520) #20\n  br label %1000\n\n850:                                              ; preds = %513, %516\n  %851 = load %\"class.boost::any::placeholder\"*, %\"class.boost::any::placeholder\"** %499, align 8, !tbaa !3\n  %852 = icmp eq %\"class.boost::any::placeholder\"* %851, null\n  br i1 %852, label %859, label %853\n\n853:                                              ; preds = %850\n  %854 = bitcast %\"class.boost::any::placeholder\"* %851 to %\"class.std::type_info\"* (%\"class.boost::any::placeholder\"*)***\n  %855 = load %\"class.std::type_info\"* (%\"class.boost::any::placeholder\"*)**, %\"class.std::type_info\"* (%\"class.boost::any::placeholder\"*)*** %854, align 8, !tbaa !8\n  %856 = getelementptr inbounds %\"class.std::type_info\"* (%\"class.boost::any::placeholder\"*)*, %\"class.std::type_info\"* (%\"class.boost::any::placeholder\"*)** %855, i64 2\n  %857 = load %\"class.std::type_info\"* (%\"class.boost::any::placeholder\"*)*, %\"class.std::type_info\"* (%\"class.boost::any::placeholder\"*)** %856, align 8\n  %858 = call nonnull align 8 dereferenceable(16) %\"class.std::type_info\"* %857(%\"class.boost::any::placeholder\"* nonnull align 8 dereferenceable(8) %851) #20\n  br label %859\n\n859:                                              ; preds = %850, %853\n  %860 = phi %\"class.std::type_info\"* [ %858, %853 ], [ bitcast (i8** @_ZTIv to %\"class.std::type_info\"*), %850 ]\n  %861 = getelementptr inbounds %\"class.std::type_info\", %\"class.std::type_info\"* %860, i64 0, i32 1\n  %862 = load i8*, i8** %861, align 8, !tbaa !10\n  %863 = load i8*, i8** getelementptr inbounds (i8*, i8** @_ZTIi, i64 1), align 8, !tbaa !10\n  %864 = icmp eq i8* %862, %863\n  br i1 %864, label %871, label %865\n\n865:                                              ; preds = %859\n  %866 = load i8, i8* %862, align 1, !tbaa !12\n  %867 = icmp eq i8 %866, 42\n  br i1 %867, label %910, label %868\n\n868:                                              ; preds = %865\n  %869 = call i32 @strcmp(i8* noundef nonnull %862, i8* noundef nonnull dereferenceable(1) %863) #20\n  %870 = icmp eq i32 %869, 0\n  br i1 %870, label %871, label %910\n\n871:                                              ; preds = %859, %868\n  %872 = load %\"class.boost::any::placeholder\"*, %\"class.boost::any::placeholder\"** %499, align 8, !tbaa !3\n  %873 = icmp eq %\"class.boost::any::placeholder\"* %872, null\n  br i1 %873, label %880, label %874\n\n874:                                              ; preds = %871\n  %875 = bitcast %\"class.boost::any::placeholder\"* %872 to %\"class.std::type_info\"* (%\"class.boost::any::placeholder\"*)***\n  %876 = load %\"class.std::type_info\"* (%\"class.boost::any::placeholder\"*)**, %\"class.std::type_info\"* (%\"class.boost::any::placeholder\"*)*** %875, align 8, !tbaa !8\n  %877 = getelementptr inbounds %\"class.std::type_info\"* (%\"class.boost::any::placeholder\"*)*, %\"class.std::type_info\"* (%\"class.boost::any::placeholder\"*)** %876, i64 2\n  %878 = load %\"class.std::type_info\"* (%\"class.boost::any::placeholder\"*)*, %\"class.std::type_info\"* (%\"class.boost::any::placeholder\"*)** %877, align 8\n  %879 = call nonnull align 8 dereferenceable(16) %\"class.std::type_info\"* %878(%\"class.boost::any::placeholder\"* nonnull align 8 dereferenceable(8) %872) #20\n  br label %880\n\n880:                                              ; preds = %874, %871\n  %881 = phi %\"class.std::type_info\"* [ %879, %874 ], [ bitcast (i8** @_ZTIv to %\"class.std::type_info\"*), %871 ]\n  %882 = getelementptr inbounds %\"class.std::type_info\", %\"class.std::type_info\"* %881, i64 0, i32 1\n  %883 = load i8*, i8** %882, align 8, !tbaa !10\n  %884 = load i8, i8* %883, align 1, !tbaa !12\n  %885 = icmp eq i8 %884, 42\n  %886 = zext i1 %885 to i64\n  %887 = getelementptr i8, i8* %883, i64 %886\n  %888 = load i8, i8* %863, align 1, !tbaa !12\n  %889 = icmp eq i8 %888, 42\n  %890 = zext i1 %889 to i64\n  %891 = getelementptr i8, i8* %863, i64 %890\n  %892 = icmp eq i8* %887, %891\n  br i1 %892, label %903, label %893\n\n893:                                              ; preds = %880\n  %894 = call i32 @strcmp(i8* noundef nonnull dereferenceable(1) %887, i8* noundef nonnull dereferenceable(1) %891) #22\n  %895 = icmp eq i32 %894, 0\n  br i1 %895, label %903, label %896\n\n896:                                              ; preds = %893\n  %897 = bitcast %\"class.boost::bad_any_cast\"* %5 to i8*\n  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %897) #20\n  %898 = getelementptr inbounds %\"class.boost::bad_any_cast\", %\"class.boost::bad_any_cast\"* %5, i64 0, i32 0, i32 0, i32 0\n  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*] }, { [5 x i8*] }* @_ZTVN5boost12bad_any_castE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %898, align 8, !tbaa !8\n  invoke void @_ZN5boost15throw_exceptionINS_12bad_any_castEEEvRKT_(%\"class.boost::bad_any_cast\"* nonnull align 8 dereferenceable(8) %5) #21\n          to label %899 unwind label %900\n\n899:                                              ; preds = %896\n  unreachable\n\n900:                                              ; preds = %896\n  %901 = landingpad { i8*, i32 }\n          cleanup\n  %902 = getelementptr inbounds %\"class.boost::bad_any_cast\", %\"class.boost::bad_any_cast\"* %5, i64 0, i32 0\n  call void @_ZNSt8bad_castD2Ev(%\"class.std::bad_cast\"* nonnull align 8 dereferenceable(8) %902) #20\n  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %897) #20\n  br label %1000\n\n903:                                              ; preds = %880, %893\n  %904 = bitcast %\"class.boost::any\"* %2 to %\"class.boost::any::holder.0\"**\n  %905 = load %\"class.boost::any::holder.0\"*, %\"class.boost::any::holder.0\"** %904, align 8, !tbaa !3\n  %906 = getelementptr inbounds %\"class.boost::any::holder.0\", %\"class.boost::any::holder.0\"* %905, i64 0, i32 1\n  %907 = load i32, i32* %906, align 4, !tbaa !35\n  %908 = sitofp i32 %907 to double\n  %909 = getelementptr %\"class.boost::any::holder.0\", %\"class.boost::any::holder.0\"* %905, i64 0, i32 0\n  br label %913\n\n910:                                              ; preds = %865, %868\n  %911 = load %\"class.boost::any::placeholder\"*, %\"class.boost::any::placeholder\"** %499, align 8, !tbaa !3\n  %912 = icmp eq %\"class.boost::any::placeholder\"* %911, null\n  br i1 %912, label %921, label %913\n\n913:                                              ; preds = %903, %910\n  %914 = phi double [ %908, %903 ], [ undef, %910 ]\n  %915 = phi %\"class.boost::any::placeholder\"* [ %909, %903 ], [ %911, %910 ]\n  %916 = bitcast %\"class.boost::any::placeholder\"* %915 to %\"class.std::type_info\"* (%\"class.boost::any::placeholder\"*)***\n  %917 = load %\"class.std::type_info\"* (%\"class.boost::any::placeholder\"*)**, %\"class.std::type_info\"* (%\"class.boost::any::placeholder\"*)*** %916, align 8, !tbaa !8\n  %918 = getelementptr inbounds %\"class.std::type_info\"* (%\"class.boost::any::placeholder\"*)*, %\"class.std::type_info\"* (%\"class.boost::any::placeholder\"*)** %917, i64 2\n  %919 = load %\"class.std::type_info\"* (%\"class.boost::any::placeholder\"*)*, %\"class.std::type_info\"* (%\"class.boost::any::placeholder\"*)** %918, align 8\n  %920 = call nonnull align 8 dereferenceable(16) %\"class.std::type_info\"* %919(%\"class.boost::any::placeholder\"* nonnull align 8 dereferenceable(8) %915) #20\n  br label %921\n\n921:                                              ; preds = %910, %913\n  %922 = phi double [ %914, %913 ], [ undef, %910 ]\n  %923 = phi %\"class.std::type_info\"* [ %920, %913 ], [ bitcast (i8** @_ZTIv to %\"class.std::type_info\"*), %910 ]\n  %924 = getelementptr inbounds %\"class.std::type_info\", %\"class.std::type_info\"* %923, i64 0, i32 1\n  %925 = load i8*, i8** %924, align 8, !tbaa !10\n  %926 = load i8*, i8** getelementptr inbounds (i8*, i8** @_ZTId, i64 1), align 8, !tbaa !10\n  %927 = icmp eq i8* %925, %926\n  br i1 %927, label %934, label %928\n\n928:                                              ; preds = %921\n  %929 = load i8, i8* %925, align 1, !tbaa !12\n  %930 = icmp eq i8 %929, 42\n  br i1 %930, label %971, label %931\n\n931:                                              ; preds = %928\n  %932 = call i32 @strcmp(i8* noundef nonnull %925, i8* noundef nonnull dereferenceable(1) %926) #20\n  %933 = icmp eq i32 %932, 0\n  br i1 %933, label %934, label %971\n\n934:                                              ; preds = %921, %931\n  %935 = load %\"class.boost::any::placeholder\"*, %\"class.boost::any::placeholder\"** %499, align 8, !tbaa !3\n  %936 = icmp eq %\"class.boost::any::placeholder\"* %935, null\n  br i1 %936, label %943, label %937\n\n937:                                              ; preds = %934\n  %938 = bitcast %\"class.boost::any::placeholder\"* %935 to %\"class.std::type_info\"* (%\"class.boost::any::placeholder\"*)***\n  %939 = load %\"class.std::type_info\"* (%\"class.boost::any::placeholder\"*)**, %\"class.std::type_info\"* (%\"class.boost::any::placeholder\"*)*** %938, align 8, !tbaa !8\n  %940 = getelementptr inbounds %\"class.std::type_info\"* (%\"class.boost::any::placeholder\"*)*, %\"class.std::type_info\"* (%\"class.boost::any::placeholder\"*)** %939, i64 2\n  %941 = load %\"class.std::type_info\"* (%\"class.boost::any::placeholder\"*)*, %\"class.std::type_info\"* (%\"class.boost::any::placeholder\"*)** %940, align 8\n  %942 = call nonnull align 8 dereferenceable(16) %\"class.std::type_info\"* %941(%\"class.boost::any::placeholder\"* nonnull align 8 dereferenceable(8) %935) #20\n  br label %943\n\n943:                                              ; preds = %937, %934\n  %944 = phi %\"class.std::type_info\"* [ %942, %937 ], [ bitcast (i8** @_ZTIv to %\"class.std::type_info\"*), %934 ]\n  %945 = getelementptr inbounds %\"class.std::type_info\", %\"class.std::type_info\"* %944, i64 0, i32 1\n  %946 = load i8*, i8** %945, align 8, !tbaa !10\n  %947 = load i8, i8* %946, align 1, !tbaa !12\n  %948 = icmp eq i8 %947, 42\n  %949 = zext i1 %948 to i64\n  %950 = getelementptr i8, i8* %946, i64 %949\n  %951 = load i8, i8* %926, align 1, !tbaa !12\n  %952 = icmp eq i8 %951, 42\n  %953 = zext i1 %952 to i64\n  %954 = getelementptr i8, i8* %926, i64 %953\n  %955 = icmp eq i8* %950, %954\n  br i1 %955, label %966, label %956\n\n956:                                              ; preds = %943\n  %957 = call i32 @strcmp(i8* noundef nonnull dereferenceable(1) %950, i8* noundef nonnull dereferenceable(1) %954) #22\n  %958 = icmp eq i32 %957, 0\n  br i1 %958, label %966, label %959\n\n959:                                              ; preds = %956\n  %960 = bitcast %\"class.boost::bad_any_cast\"* %4 to i8*\n  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %960) #20\n  %961 = getelementptr inbounds %\"class.boost::bad_any_cast\", %\"class.boost::bad_any_cast\"* %4, i64 0, i32 0, i32 0, i32 0\n  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*] }, { [5 x i8*] }* @_ZTVN5boost12bad_any_castE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %961, align 8, !tbaa !8\n  invoke void @_ZN5boost15throw_exceptionINS_12bad_any_castEEEvRKT_(%\"class.boost::bad_any_cast\"* nonnull align 8 dereferenceable(8) %4) #21\n          to label %962 unwind label %963\n\n962:                                              ; preds = %959\n  unreachable\n\n963:                                              ; preds = %959\n  %964 = landingpad { i8*, i32 }\n          cleanup\n  %965 = getelementptr inbounds %\"class.boost::bad_any_cast\", %\"class.boost::bad_any_cast\"* %4, i64 0, i32 0\n  call void @_ZNSt8bad_castD2Ev(%\"class.std::bad_cast\"* nonnull align 8 dereferenceable(8) %965) #20\n  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %960) #20\n  br label %1000\n\n966:                                              ; preds = %943, %956\n  %967 = bitcast %\"class.boost::any\"* %2 to %\"class.boost::any::holder.1\"**\n  %968 = load %\"class.boost::any::holder.1\"*, %\"class.boost::any::holder.1\"** %967, align 8, !tbaa !3\n  %969 = getelementptr inbounds %\"class.boost::any::holder.1\", %\"class.boost::any::holder.1\"* %968, i64 0, i32 1\n  %970 = load double, double* %969, align 8, !tbaa !37\n  br label %971\n\n971:                                              ; preds = %928, %966, %931, %842\n  %972 = phi double [ %838, %842 ], [ %922, %931 ], [ %970, %966 ], [ %922, %928 ]\n  %973 = fcmp oeq double %498, %972\n  br i1 %973, label %974, label %990\n\n974:                                              ; preds = %971\n  %975 = bitcast %\"class.std::__cxx11::basic_string\"* %24 to i8*\n  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %975) #20\n  %976 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %24, i64 0, i32 2\n  %977 = bitcast %union.anon* %976 to i8*\n  %978 = bitcast %union.anon* %976 to i32*\n  store i32 1701736270, i32* %978, align 8\n  %979 = getelementptr inbounds i8, i8* %977, i64 4\n  store i8 0, i8* %979, align 4, !tbaa !12\n  %980 = call noalias nonnull dereferenceable(40) i8* @_Znwm(i64 40) #23\n  %981 = bitcast i8* %980 to %\"class.boost::any::holder\"*\n  %982 = getelementptr inbounds %\"class.boost::any::holder\", %\"class.boost::any::holder\"* %981, i64 0, i32 0, i32 0\n  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN5boost3any6holderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %982, align 8, !tbaa !8\n  %983 = getelementptr inbounds %\"class.boost::any::holder\", %\"class.boost::any::holder\"* %981, i64 0, i32 1\n  %984 = getelementptr inbounds %\"class.boost::any::holder\", %\"class.boost::any::holder\"* %981, i64 0, i32 1, i32 2\n  %985 = bitcast %\"class.std::__cxx11::basic_string\"* %983 to %union.anon**\n  store %union.anon* %984, %union.anon** %985, align 8, !tbaa !13\n  %986 = bitcast %union.anon* %984 to i8*\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(16) %986, i8* noundef nonnull align 8 dereferenceable(16) %977, i64 16, i1 false) #20\n  %987 = getelementptr inbounds %\"class.boost::any\", %\"class.boost::any\"* %0, i64 0, i32 0\n  %988 = getelementptr inbounds %\"class.boost::any::holder\", %\"class.boost::any::holder\"* %981, i64 0, i32 1, i32 1\n  store i64 4, i64* %988, align 8, !tbaa !15\n  %989 = getelementptr %\"class.boost::any::holder\", %\"class.boost::any::holder\"* %981, i64 0, i32 0\n  store %\"class.boost::any::placeholder\"* %989, %\"class.boost::any::placeholder\"** %987, align 8, !tbaa !3\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %975) #20\n  br label %999\n\n990:                                              ; preds = %971\n  %991 = fcmp olt double %498, %972\n  br i1 %991, label %992, label %995\n\n992:                                              ; preds = %990\n  %993 = getelementptr inbounds %\"class.boost::any\", %\"class.boost::any\"* %0, i64 0, i32 0\n  %994 = load %\"class.boost::any::placeholder\"*, %\"class.boost::any::placeholder\"** %499, align 8, !tbaa !3\n  store %\"class.boost::any::placeholder\"* %994, %\"class.boost::any::placeholder\"** %993, align 8, !tbaa !3\n  store %\"class.boost::any::placeholder\"* null, %\"class.boost::any::placeholder\"** %499, align 8, !tbaa !3\n  br label %999\n\n995:                                              ; preds = %990\n  %996 = fcmp ogt double %498, %972\n  call void @llvm.assume(i1 %996)\n  %997 = getelementptr inbounds %\"class.boost::any\", %\"class.boost::any\"* %0, i64 0, i32 0\n  %998 = load %\"class.boost::any::placeholder\"*, %\"class.boost::any::placeholder\"** %25, align 8, !tbaa !3\n  store %\"class.boost::any::placeholder\"* %998, %\"class.boost::any::placeholder\"** %997, align 8, !tbaa !3\n  store %\"class.boost::any::placeholder\"* null, %\"class.boost::any::placeholder\"** %25, align 8, !tbaa !3\n  br label %999\n\n999:                                              ; preds = %974, %992, %995\n  ret void\n\n1000:                                             ; preds = %375, %849, %489, %963, %900, %426\n  %1001 = phi { i8*, i32 } [ %370, %375 ], [ %844, %849 ], [ %427, %426 ], [ %490, %489 ], [ %901, %900 ], [ %964, %963 ]\n  resume { i8*, i32 } %1001\n}\n\n; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn\ndeclare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1\n\n; Function Attrs: uwtable\ndefine linkonce_odr dso_local void @_ZN5boost8any_castINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEET_RNS_3anyE(%\"class.std::__cxx11::basic_string\"* noalias sret(%\"class.std::__cxx11::basic_string\") align 8 %0, %\"class.boost::any\"* nonnull align 8 dereferenceable(8) %1) local_unnamed_addr #0 comdat personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {\n  %3 = alloca i64, align 8\n  %4 = alloca %\"class.boost::bad_any_cast\", align 8\n  %5 = getelementptr inbounds %\"class.boost::any\", %\"class.boost::any\"* %1, i64 0, i32 0\n  %6 = load %\"class.boost::any::placeholder\"*, %\"class.boost::any::placeholder\"** %5, align 8, !tbaa !3\n  %7 = icmp eq %\"class.boost::any::placeholder\"* %6, null\n  br i1 %7, label %14, label %8\n\n8:                                                ; preds = %2\n  %9 = bitcast %\"class.boost::any::placeholder\"* %6 to %\"class.std::type_info\"* (%\"class.boost::any::placeholder\"*)***\n  %10 = load %\"class.std::type_info\"* (%\"class.boost::any::placeholder\"*)**, %\"class.std::type_info\"* (%\"class.boost::any::placeholder\"*)*** %9, align 8, !tbaa !8\n  %11 = getelementptr inbounds %\"class.std::type_info\"* (%\"class.boost::any::placeholder\"*)*, %\"class.std::type_info\"* (%\"class.boost::any::placeholder\"*)** %10, i64 2\n  %12 = load %\"class.std::type_info\"* (%\"class.boost::any::placeholder\"*)*, %\"class.std::type_info\"* (%\"class.boost::any::placeholder\"*)** %11, align 8\n  %13 = tail call nonnull align 8 dereferenceable(16) %\"class.std::type_info\"* %12(%\"class.boost::any::placeholder\"* nonnull align 8 dereferenceable(8) %6) #20\n  br label %14\n\n14:                                               ; preds = %8, %2\n  %15 = phi %\"class.std::type_info\"* [ %13, %8 ], [ bitcast (i8** @_ZTIv to %\"class.std::type_info\"*), %2 ]\n  %16 = getelementptr inbounds %\"class.std::type_info\", %\"class.std::type_info\"* %15, i64 0, i32 1\n  %17 = load i8*, i8** %16, align 8, !tbaa !10\n  %18 = load i8, i8* %17, align 1, !tbaa !12\n  %19 = icmp eq i8 %18, 42\n  %20 = zext i1 %19 to i64\n  %21 = getelementptr i8, i8* %17, i64 %20\n  %22 = icmp eq i8* %21, getelementptr inbounds ([53 x i8], [53 x i8]* @_ZTSNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE, i64 0, i64 0)\n  br i1 %22, label %33, label %23\n\n23:                                               ; preds = %14\n  %24 = tail call i32 @strcmp(i8* noundef nonnull dereferenceable(1) %21, i8* noundef nonnull dereferenceable(53) getelementptr inbounds ([53 x i8], [53 x i8]* @_ZTSNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE, i64 0, i64 0)) #22\n  %25 = icmp eq i32 %24, 0\n  br i1 %25, label %33, label %26\n\n26:                                               ; preds = %23\n  %27 = bitcast %\"class.boost::bad_any_cast\"* %4 to i8*\n  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %27) #20\n  %28 = getelementptr inbounds %\"class.boost::bad_any_cast\", %\"class.boost::bad_any_cast\"* %4, i64 0, i32 0, i32 0, i32 0\n  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*] }, { [5 x i8*] }* @_ZTVN5boost12bad_any_castE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %28, align 8, !tbaa !8\n  invoke void @_ZN5boost15throw_exceptionINS_12bad_any_castEEEvRKT_(%\"class.boost::bad_any_cast\"* nonnull align 8 dereferenceable(8) %4) #21\n          to label %29 unwind label %30\n\n29:                                               ; preds = %26\n  unreachable\n\n30:                                               ; preds = %26\n  %31 = landingpad { i8*, i32 }\n          cleanup\n  %32 = getelementptr inbounds %\"class.boost::bad_any_cast\", %\"class.boost::bad_any_cast\"* %4, i64 0, i32 0\n  call void @_ZNSt8bad_castD2Ev(%\"class.std::bad_cast\"* nonnull align 8 dereferenceable(8) %32) #20\n  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %27) #20\n  resume { i8*, i32 } %31\n\n33:                                               ; preds = %23, %14\n  %34 = bitcast %\"class.boost::any\"* %1 to %\"class.boost::any::holder\"**\n  %35 = load %\"class.boost::any::holder\"*, %\"class.boost::any::holder\"** %34, align 8, !tbaa !3\n  %36 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 2\n  %37 = bitcast %\"class.std::__cxx11::basic_string\"* %0 to %union.anon**\n  store %union.anon* %36, %union.anon** %37, align 8, !tbaa !13\n  %38 = getelementptr inbounds %\"class.boost::any::holder\", %\"class.boost::any::holder\"* %35, i64 0, i32 1, i32 0, i32 0\n  %39 = load i8*, i8** %38, align 8, !tbaa !18\n  %40 = getelementptr inbounds %\"class.boost::any::holder\", %\"class.boost::any::holder\"* %35, i64 0, i32 1, i32 1\n  %41 = load i64, i64* %40, align 8, !tbaa !15\n  %42 = bitcast i64* %3 to i8*\n  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %42) #20\n  store i64 %41, i64* %3, align 8, !tbaa !24\n  %43 = icmp ugt i64 %41, 15\n  br i1 %43, label %46, label %44\n\n44:                                               ; preds = %33\n  %45 = bitcast %union.anon* %36 to i8*\n  br label %51\n\n46:                                               ; preds = %33\n  %47 = call i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %0, i64* nonnull align 8 dereferenceable(8) %3, i64 0)\n  %48 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 0, i32 0\n  store i8* %47, i8** %48, align 8, !tbaa !18\n  %49 = load i64, i64* %3, align 8, !tbaa !24\n  %50 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 2, i32 0\n  store i64 %49, i64* %50, align 8, !tbaa !12\n  br label %51\n\n51:                                               ; preds = %46, %44\n  %52 = phi i8* [ %45, %44 ], [ %47, %46 ]\n  switch i64 %41, label %55 [\n    i64 1, label %53\n    i64 0, label %56\n  ]\n\n53:                                               ; preds = %51\n  %54 = load i8, i8* %39, align 1, !tbaa !12\n  store i8 %54, i8* %52, align 1, !tbaa !12\n  br label %56\n\n55:                                               ; preds = %51\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %52, i8* align 1 %39, i64 %41, i1 false) #20\n  br label %56\n\n56:                                               ; preds = %51, %53, %55\n  %57 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 0, i32 0\n  %58 = load i64, i64* %3, align 8, !tbaa !24\n  %59 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 1\n  store i64 %58, i64* %59, align 8, !tbaa !15\n  %60 = load i8*, i8** %57, align 8, !tbaa !18\n  %61 = getelementptr inbounds i8, i8* %60, i64 %58\n  store i8 0, i8* %61, align 1, !tbaa !12\n  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %42) #20\n  ret void\n}\n\ndeclare dso_local i32 @__gxx_personality_v0(...)\n\n; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn\ndeclare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1\n\n; Function Attrs: argmemonly mustprogress nofree nounwind readonly willreturn\ndeclare dso_local i32 @strcmp(i8* nocapture, i8* nocapture) local_unnamed_addr #2\n\n; Function Attrs: mustprogress nofree nounwind willreturn\ndeclare dso_local double @strtod(i8* readonly, i8** nocapture) local_unnamed_addr #3\n\n; Function Attrs: noinline noreturn nounwind\ndefine linkonce_odr hidden void @__clang_call_terminate(i8* %0) local_unnamed_addr #4 comdat {\n  %2 = tail call i8* @__cxa_begin_catch(i8* %0) #20\n  tail call void @_ZSt9terminatev() #24\n  unreachable\n}\n\ndeclare dso_local i8* @__cxa_begin_catch(i8*) local_unnamed_addr\n\ndeclare dso_local void @_ZSt9terminatev() local_unnamed_addr\n\n; Function Attrs: nobuiltin nounwind\ndeclare dso_local void @_ZdlPv(i8*) local_unnamed_addr #5\n\ndeclare dso_local i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32), i64* nonnull align 8 dereferenceable(8), i64) local_unnamed_addr #6\n\n; Function Attrs: argmemonly mustprogress nofree nounwind willreturn\ndeclare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #7\n\ndeclare dso_local nonnull align 8 dereferenceable(32) %\"class.std::__cxx11::basic_string\"* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32), i64, i64, i8*, i64) local_unnamed_addr #6\n\n; Function Attrs: noreturn\ndeclare dso_local void @_ZSt24__throw_out_of_range_fmtPKcz(i8*, ...) local_unnamed_addr #8\n\ndeclare dso_local nonnull align 8 dereferenceable(32) %\"class.std::__cxx11::basic_string\"* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32), i8*, i64) local_unnamed_addr #6\n\n; Function Attrs: inlinehint noreturn uwtable\ndefine linkonce_odr dso_local void @_ZN5boost15throw_exceptionINS_12bad_any_castEEEvRKT_(%\"class.boost::bad_any_cast\"* nonnull align 8 dereferenceable(8) %0) local_unnamed_addr #9 comdat personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {\n  %2 = alloca %\"struct.boost::exception_detail::error_info_injector\", align 8\n  %3 = tail call i8* @__cxa_allocate_exception(i64 56) #20\n  %4 = bitcast %\"struct.boost::exception_detail::error_info_injector\"* %2 to i8*\n  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %4) #20\n  %5 = getelementptr inbounds %\"struct.boost::exception_detail::error_info_injector\", %\"struct.boost::exception_detail::error_info_injector\"* %2, i64 0, i32 0, i32 0, i32 0, i32 0\n  %6 = getelementptr inbounds %\"struct.boost::exception_detail::error_info_injector\", %\"struct.boost::exception_detail::error_info_injector\"* %2, i64 0, i32 1, i32 0\n  %7 = getelementptr inbounds %\"struct.boost::exception_detail::error_info_injector\", %\"struct.boost::exception_detail::error_info_injector\"* %2, i64 0, i32 1, i32 1, i32 0\n  %8 = getelementptr inbounds %\"struct.boost::exception_detail::error_info_injector\", %\"struct.boost::exception_detail::error_info_injector\"* %2, i64 0, i32 1, i32 4\n  %9 = bitcast %\"struct.boost::exception_detail::error_info_container\"** %7 to i8*\n  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(24) %9, i8 0, i64 24, i1 false), !alias.scope !52\n  store i32 -1, i32* %8, align 8, !tbaa !55, !alias.scope !52\n  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*], [4 x i8*] }, { [5 x i8*], [4 x i8*] }* @_ZTVN5boost16exception_detail19error_info_injectorINS_12bad_any_castEEE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %5, align 8, !tbaa !8, !alias.scope !52\n  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*], [4 x i8*] }, { [5 x i8*], [4 x i8*] }* @_ZTVN5boost16exception_detail19error_info_injectorINS_12bad_any_castEEE, i64 0, inrange i32 1, i64 2) to i32 (...)**), i32 (...)*** %6, align 8, !tbaa !8, !alias.scope !52\n  %10 = getelementptr inbounds i8, i8* %3, i64 48\n  %11 = bitcast i8* %10 to i32 (...)***\n  %12 = bitcast i8* %3 to i32 (...)***\n  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*] }, { [5 x i8*] }* @_ZTVN5boost12bad_any_castE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %12, align 8, !tbaa !8, !alias.scope !58\n  %13 = getelementptr inbounds i8, i8* %3, i64 8\n  %14 = bitcast i8* %13 to i32 (...)***\n  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [4 x i8*] }, { [4 x i8*] }* @_ZTVN5boost9exceptionE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %14, align 8, !tbaa !8, !alias.scope !58\n  %15 = getelementptr inbounds i8, i8* %3, i64 16\n  %16 = bitcast i8* %15 to %\"struct.boost::exception_detail::error_info_container\"**\n  store %\"struct.boost::exception_detail::error_info_container\"* null, %\"struct.boost::exception_detail::error_info_container\"** %16, align 8, !tbaa !61, !alias.scope !58\n  %17 = getelementptr inbounds i8, i8* %3, i64 24\n  %18 = getelementptr inbounds %\"struct.boost::exception_detail::error_info_injector\", %\"struct.boost::exception_detail::error_info_injector\"* %2, i64 0, i32 1, i32 2\n  %19 = bitcast i8** %18 to i8*\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(20) %17, i8* noundef nonnull align 8 dereferenceable(20) %19, i64 20, i1 false)\n  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [8 x i8*], [4 x i8*], [9 x i8*] }, { [8 x i8*], [4 x i8*], [9 x i8*] }* @_ZTVN5boost16exception_detail10clone_implINS0_19error_info_injectorINS_12bad_any_castEEEEE, i64 0, inrange i32 0, i64 3) to i32 (...)**), i32 (...)*** %12, align 8, !tbaa !8, !alias.scope !58\n  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [8 x i8*], [4 x i8*], [9 x i8*] }, { [8 x i8*], [4 x i8*], [9 x i8*] }* @_ZTVN5boost16exception_detail10clone_implINS0_19error_info_injectorINS_12bad_any_castEEEEE, i64 0, inrange i32 1, i64 2) to i32 (...)**), i32 (...)*** %14, align 8, !tbaa !8, !alias.scope !58\n  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [8 x i8*], [4 x i8*], [9 x i8*] }, { [8 x i8*], [4 x i8*], [9 x i8*] }* @_ZTVN5boost16exception_detail10clone_implINS0_19error_info_injectorINS_12bad_any_castEEEEE, i64 0, inrange i32 2, i64 5) to i32 (...)**), i32 (...)*** %11, align 8, !tbaa !8, !alias.scope !58\n  %20 = bitcast i8* %13 to %\"class.boost::exception\"*\n  %21 = getelementptr inbounds %\"struct.boost::exception_detail::error_info_injector\", %\"struct.boost::exception_detail::error_info_injector\"* %2, i64 0, i32 1\n  %22 = bitcast %\"class.boost::exception.base\"* %21 to %\"class.boost::exception\"*\n  invoke void @_ZN5boost16exception_detail20copy_boost_exceptionEPNS_9exceptionEPKS1_(%\"class.boost::exception\"* nonnull %20, %\"class.boost::exception\"* nonnull %22)\n          to label %38 unwind label %23\n\n23:                                               ; preds = %1\n  %24 = landingpad { i8*, i32 }\n          cleanup\n  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [4 x i8*] }, { [4 x i8*] }* @_ZTVN5boost9exceptionE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %14, align 8, !tbaa !8, !alias.scope !58\n  %25 = load %\"struct.boost::exception_detail::error_info_container\"*, %\"struct.boost::exception_detail::error_info_container\"** %16, align 8, !tbaa !61, !alias.scope !58\n  %26 = icmp eq %\"struct.boost::exception_detail::error_info_container\"* %25, null\n  br i1 %26, label %41, label %27\n\n27:                                               ; preds = %23\n  %28 = bitcast %\"struct.boost::exception_detail::error_info_container\"* %25 to i1 (%\"struct.boost::exception_detail::error_info_container\"*)***\n  %29 = load i1 (%\"struct.boost::exception_detail::error_info_container\"*)**, i1 (%\"struct.boost::exception_detail::error_info_container\"*)*** %28, align 8, !tbaa !8\n  %30 = getelementptr inbounds i1 (%\"struct.boost::exception_detail::error_info_container\"*)*, i1 (%\"struct.boost::exception_detail::error_info_container\"*)** %29, i64 4\n  %31 = load i1 (%\"struct.boost::exception_detail::error_info_container\"*)*, i1 (%\"struct.boost::exception_detail::error_info_container\"*)** %30, align 8\n  %32 = invoke zeroext i1 %31(%\"struct.boost::exception_detail::error_info_container\"* nonnull align 8 dereferenceable(8) %25)\n          to label %33 unwind label %35\n\n33:                                               ; preds = %27\n  br i1 %32, label %34, label %41\n\n34:                                               ; preds = %33\n  store %\"struct.boost::exception_detail::error_info_container\"* null, %\"struct.boost::exception_detail::error_info_container\"** %16, align 8, !tbaa !61, !alias.scope !58\n  br label %41\n\n35:                                               ; preds = %27\n  %36 = landingpad { i8*, i32 }\n          catch i8* null\n  %37 = extractvalue { i8*, i32 } %36, 0\n  call void @__clang_call_terminate(i8* %37) #24\n  unreachable\n\n38:                                               ; preds = %1\n  invoke void @__cxa_throw(i8* nonnull %3, i8* bitcast ({ i8*, i8*, i32, i32, i8*, i64, i8*, i64 }* @_ZTIN5boost16exception_detail10clone_implINS0_19error_info_injectorINS_12bad_any_castEEEEE to i8*), i8* bitcast (void (%\"class.boost::exception_detail::clone_impl\"*)* @_ZN5boost16exception_detail10clone_implINS0_19error_info_injectorINS_12bad_any_castEEEED1Ev to i8*)) #21\n          to label %45 unwind label %39\n\n39:                                               ; preds = %38\n  %40 = landingpad { i8*, i32 }\n          cleanup\n  call void @_ZN5boost16exception_detail19error_info_injectorINS_12bad_any_castEED2Ev(%\"struct.boost::exception_detail::error_info_injector\"* nonnull align 8 dereferenceable(44) %2) #20\n  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %4) #20\n  br label %43\n\n41:                                               ; preds = %34, %33, %23\n  %42 = bitcast i8* %3 to %\"class.std::bad_cast\"*\n  call void @_ZNSt8bad_castD2Ev(%\"class.std::bad_cast\"* nonnull align 8 dereferenceable(8) %42) #20\n  call void @_ZN5boost16exception_detail19error_info_injectorINS_12bad_any_castEED2Ev(%\"struct.boost::exception_detail::error_info_injector\"* nonnull align 8 dereferenceable(44) %2) #20\n  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %4) #20\n  call void @__cxa_free_exception(i8* nonnull %3) #20\n  br label %43\n\n43:                                               ; preds = %39, %41\n  %44 = phi { i8*, i32 } [ %40, %39 ], [ %24, %41 ]\n  resume { i8*, i32 } %44\n\n45:                                               ; preds = %38\n  unreachable\n}\n\n; Function Attrs: argmemonly mustprogress nofree nounwind willreturn writeonly\ndeclare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #10\n\n; Function Attrs: nounwind\ndeclare dso_local void @_ZNSt8bad_castD2Ev(%\"class.std::bad_cast\"* nonnull align 8 dereferenceable(8)) unnamed_addr #11\n\ndeclare dso_local i8* @__cxa_allocate_exception(i64) local_unnamed_addr\n\n; Function Attrs: nounwind uwtable\ndefine linkonce_odr dso_local void @_ZN5boost16exception_detail10clone_implINS0_19error_info_injectorINS_12bad_any_castEEEED1Ev(%\"class.boost::exception_detail::clone_impl\"* nonnull align 8 dereferenceable(44) %0) unnamed_addr #12 comdat align 2 personality i32 (...)* @__gxx_personality_v0 {\n  %2 = getelementptr inbounds %\"class.boost::exception_detail::clone_impl\", %\"class.boost::exception_detail::clone_impl\"* %0, i64 0, i32 0, i32 1, i32 0\n  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [4 x i8*] }, { [4 x i8*] }* @_ZTVN5boost9exceptionE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8, !tbaa !8\n  %3 = getelementptr inbounds %\"class.boost::exception_detail::clone_impl\", %\"class.boost::exception_detail::clone_impl\"* %0, i64 0, i32 0, i32 1, i32 1, i32 0\n  %4 = load %\"struct.boost::exception_detail::error_info_container\"*, %\"struct.boost::exception_detail::error_info_container\"** %3, align 8, !tbaa !61\n  %5 = icmp eq %\"struct.boost::exception_detail::error_info_container\"* %4, null\n  br i1 %5, label %17, label %6\n\n6:                                                ; preds = %1\n  %7 = bitcast %\"struct.boost::exception_detail::error_info_container\"* %4 to i1 (%\"struct.boost::exception_detail::error_info_container\"*)***\n  %8 = load i1 (%\"struct.boost::exception_detail::error_info_container\"*)**, i1 (%\"struct.boost::exception_detail::error_info_container\"*)*** %7, align 8, !tbaa !8\n  %9 = getelementptr inbounds i1 (%\"struct.boost::exception_detail::error_info_container\"*)*, i1 (%\"struct.boost::exception_detail::error_info_container\"*)** %8, i64 4\n  %10 = load i1 (%\"struct.boost::exception_detail::error_info_container\"*)*, i1 (%\"struct.boost::exception_detail::error_info_container\"*)** %9, align 8\n  %11 = invoke zeroext i1 %10(%\"struct.boost::exception_detail::error_info_container\"* nonnull align 8 dereferenceable(8) %4)\n          to label %12 unwind label %14\n\n12:                                               ; preds = %6\n  br i1 %11, label %13, label %17\n\n13:                                               ; preds = %12\n  store %\"struct.boost::exception_detail::error_info_container\"* null, %\"struct.boost::exception_detail::error_info_container\"** %3, align 8, !tbaa !61\n  br label %17\n\n14:                                               ; preds = %6\n  %15 = landingpad { i8*, i32 }\n          catch i8* null\n  %16 = extractvalue { i8*, i32 } %15, 0\n  tail call void @__clang_call_terminate(i8* %16) #24\n  unreachable\n\n17:                                               ; preds = %1, %12, %13\n  %18 = getelementptr inbounds %\"class.boost::exception_detail::clone_impl\", %\"class.boost::exception_detail::clone_impl\"* %0, i64 0, i32 0, i32 0, i32 0\n  tail call void @_ZNSt8bad_castD2Ev(%\"class.std::bad_cast\"* nonnull align 8 dereferenceable(8) %18) #20\n  ret void\n}\n\ndeclare dso_local void @__cxa_throw(i8*, i8*, i8*) local_unnamed_addr\n\n; Function Attrs: nounwind uwtable\ndefine linkonce_odr dso_local void @_ZN5boost16exception_detail19error_info_injectorINS_12bad_any_castEED2Ev(%\"struct.boost::exception_detail::error_info_injector\"* nonnull align 8 dereferenceable(44) %0) unnamed_addr #12 comdat align 2 personality i32 (...)* @__gxx_personality_v0 {\n  %2 = getelementptr inbounds %\"struct.boost::exception_detail::error_info_injector\", %\"struct.boost::exception_detail::error_info_injector\"* %0, i64 0, i32 1, i32 0\n  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [4 x i8*] }, { [4 x i8*] }* @_ZTVN5boost9exceptionE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8, !tbaa !8\n  %3 = getelementptr inbounds %\"struct.boost::exception_detail::error_info_injector\", %\"struct.boost::exception_detail::error_info_injector\"* %0, i64 0, i32 1, i32 1, i32 0\n  %4 = load %\"struct.boost::exception_detail::error_info_container\"*, %\"struct.boost::exception_detail::error_info_container\"** %3, align 8, !tbaa !61\n  %5 = icmp eq %\"struct.boost::exception_detail::error_info_container\"* %4, null\n  br i1 %5, label %17, label %6\n\n6:                                                ; preds = %1\n  %7 = bitcast %\"struct.boost::exception_detail::error_info_container\"* %4 to i1 (%\"struct.boost::exception_detail::error_info_container\"*)***\n  %8 = load i1 (%\"struct.boost::exception_detail::error_info_container\"*)**, i1 (%\"struct.boost::exception_detail::error_info_container\"*)*** %7, align 8, !tbaa !8\n  %9 = getelementptr inbounds i1 (%\"struct.boost::exception_detail::error_info_container\"*)*, i1 (%\"struct.boost::exception_detail::error_info_container\"*)** %8, i64 4\n  %10 = load i1 (%\"struct.boost::exception_detail::error_info_container\"*)*, i1 (%\"struct.boost::exception_detail::error_info_container\"*)** %9, align 8\n  %11 = invoke zeroext i1 %10(%\"struct.boost::exception_detail::error_info_container\"* nonnull align 8 dereferenceable(8) %4)\n          to label %12 unwind label %14\n\n12:                                               ; preds = %6\n  br i1 %11, label %13, label %17\n\n13:                                               ; preds = %12\n  store %\"struct.boost::exception_detail::error_info_container\"* null, %\"struct.boost::exception_detail::error_info_container\"** %3, align 8, !tbaa !61\n  br label %17\n\n14:                                               ; preds = %6\n  %15 = landingpad { i8*, i32 }\n          catch i8* null\n  %16 = extractvalue { i8*, i32 } %15, 0\n  tail call void @__clang_call_terminate(i8* %16) #24\n  unreachable\n\n17:                                               ; preds = %1, %12, %13\n  %18 = getelementptr inbounds %\"struct.boost::exception_detail::error_info_injector\", %\"struct.boost::exception_detail::error_info_injector\"* %0, i64 0, i32 0, i32 0\n  tail call void @_ZNSt8bad_castD2Ev(%\"class.std::bad_cast\"* nonnull align 8 dereferenceable(8) %18) #20\n  ret void\n}\n\ndeclare dso_local void @__cxa_free_exception(i8*) local_unnamed_addr\n\n; Function Attrs: inlinehint uwtable\ndefine linkonce_odr dso_local void @_ZN5boost16exception_detail20copy_boost_exceptionEPNS_9exceptionEPKS1_(%\"class.boost::exception\"* %0, %\"class.boost::exception\"* %1) local_unnamed_addr #13 comdat personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {\n  %3 = alloca %\"class.boost::exception_detail::refcount_ptr\", align 8\n  %4 = getelementptr inbounds %\"class.boost::exception\", %\"class.boost::exception\"* %1, i64 0, i32 1, i32 0\n  %5 = load %\"struct.boost::exception_detail::error_info_container\"*, %\"struct.boost::exception_detail::error_info_container\"** %4, align 8, !tbaa !61\n  %6 = icmp eq %\"struct.boost::exception_detail::error_info_container\"* %5, null\n  br i1 %6, label %53, label %7\n\n7:                                                ; preds = %2\n  %8 = bitcast %\"class.boost::exception_detail::refcount_ptr\"* %3 to i8*\n  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %8) #20\n  %9 = bitcast %\"struct.boost::exception_detail::error_info_container\"* %5 to void (%\"class.boost::exception_detail::refcount_ptr\"*, %\"struct.boost::exception_detail::error_info_container\"*)***\n  %10 = load void (%\"class.boost::exception_detail::refcount_ptr\"*, %\"struct.boost::exception_detail::error_info_container\"*)**, void (%\"class.boost::exception_detail::refcount_ptr\"*, %\"struct.boost::exception_detail::error_info_container\"*)*** %9, align 8, !tbaa !8\n  %11 = getelementptr inbounds void (%\"class.boost::exception_detail::refcount_ptr\"*, %\"struct.boost::exception_detail::error_info_container\"*)*, void (%\"class.boost::exception_detail::refcount_ptr\"*, %\"struct.boost::exception_detail::error_info_container\"*)** %10, i64 5\n  %12 = load void (%\"class.boost::exception_detail::refcount_ptr\"*, %\"struct.boost::exception_detail::error_info_container\"*)*, void (%\"class.boost::exception_detail::refcount_ptr\"*, %\"struct.boost::exception_detail::error_info_container\"*)** %11, align 8\n  invoke void %12(%\"class.boost::exception_detail::refcount_ptr\"* nonnull sret(%\"class.boost::exception_detail::refcount_ptr\") align 8 %3, %\"struct.boost::exception_detail::error_info_container\"* nonnull align 8 dereferenceable(8) %5)\n          to label %13 unwind label %35\n\n13:                                               ; preds = %7\n  %14 = getelementptr inbounds %\"class.boost::exception_detail::refcount_ptr\", %\"class.boost::exception_detail::refcount_ptr\"* %3, i64 0, i32 0\n  %15 = load %\"struct.boost::exception_detail::error_info_container\"*, %\"struct.boost::exception_detail::error_info_container\"** %14, align 8, !tbaa !61\n  %16 = icmp eq %\"struct.boost::exception_detail::error_info_container\"* %15, null\n  br i1 %16, label %34, label %17\n\n17:                                               ; preds = %13\n  %18 = bitcast %\"struct.boost::exception_detail::error_info_container\"* %15 to void (%\"struct.boost::exception_detail::error_info_container\"*)***\n  %19 = load void (%\"struct.boost::exception_detail::error_info_container\"*)**, void (%\"struct.boost::exception_detail::error_info_container\"*)*** %18, align 8, !tbaa !8\n  %20 = getelementptr inbounds void (%\"struct.boost::exception_detail::error_info_container\"*)*, void (%\"struct.boost::exception_detail::error_info_container\"*)** %19, i64 3\n  %21 = load void (%\"struct.boost::exception_detail::error_info_container\"*)*, void (%\"struct.boost::exception_detail::error_info_container\"*)** %20, align 8\n  invoke void %21(%\"struct.boost::exception_detail::error_info_container\"* nonnull align 8 dereferenceable(8) %15)\n          to label %22 unwind label %37\n\n22:                                               ; preds = %17\n  %23 = load %\"struct.boost::exception_detail::error_info_container\"*, %\"struct.boost::exception_detail::error_info_container\"** %14, align 8, !tbaa !61\n  %24 = icmp eq %\"struct.boost::exception_detail::error_info_container\"* %23, null\n  br i1 %24, label %34, label %25\n\n25:                                               ; preds = %22\n  %26 = bitcast %\"struct.boost::exception_detail::error_info_container\"* %23 to i1 (%\"struct.boost::exception_detail::error_info_container\"*)***\n  %27 = load i1 (%\"struct.boost::exception_detail::error_info_container\"*)**, i1 (%\"struct.boost::exception_detail::error_info_container\"*)*** %26, align 8, !tbaa !8\n  %28 = getelementptr inbounds i1 (%\"struct.boost::exception_detail::error_info_container\"*)*, i1 (%\"struct.boost::exception_detail::error_info_container\"*)** %27, i64 4\n  %29 = load i1 (%\"struct.boost::exception_detail::error_info_container\"*)*, i1 (%\"struct.boost::exception_detail::error_info_container\"*)** %28, align 8\n  %30 = invoke zeroext i1 %29(%\"struct.boost::exception_detail::error_info_container\"* nonnull align 8 dereferenceable(8) %23)\n          to label %34 unwind label %31\n\n31:                                               ; preds = %25\n  %32 = landingpad { i8*, i32 }\n          catch i8* null\n  %33 = extractvalue { i8*, i32 } %32, 0\n  call void @__clang_call_terminate(i8* %33) #24\n  unreachable\n\n34:                                               ; preds = %25, %13, %22\n  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %8) #20\n  br label %53\n\n35:                                               ; preds = %7\n  %36 = landingpad { i8*, i32 }\n          cleanup\n  br label %50\n\n37:                                               ; preds = %17\n  %38 = landingpad { i8*, i32 }\n          cleanup\n  %39 = load %\"struct.boost::exception_detail::error_info_container\"*, %\"struct.boost::exception_detail::error_info_container\"** %14, align 8, !tbaa !61\n  %40 = icmp eq %\"struct.boost::exception_detail::error_info_container\"* %39, null\n  br i1 %40, label %50, label %41\n\n41:                                               ; preds = %37\n  %42 = bitcast %\"struct.boost::exception_detail::error_info_container\"* %39 to i1 (%\"struct.boost::exception_detail::error_info_container\"*)***\n  %43 = load i1 (%\"struct.boost::exception_detail::error_info_container\"*)**, i1 (%\"struct.boost::exception_detail::error_info_container\"*)*** %42, align 8, !tbaa !8\n  %44 = getelementptr inbounds i1 (%\"struct.boost::exception_detail::error_info_container\"*)*, i1 (%\"struct.boost::exception_detail::error_info_container\"*)** %43, i64 4\n  %45 = load i1 (%\"struct.boost::exception_detail::error_info_container\"*)*, i1 (%\"struct.boost::exception_detail::error_info_container\"*)** %44, align 8\n  %46 = invoke zeroext i1 %45(%\"struct.boost::exception_detail::error_info_container\"* nonnull align 8 dereferenceable(8) %39)\n          to label %50 unwind label %47\n\n47:                                               ; preds = %41\n  %48 = landingpad { i8*, i32 }\n          catch i8* null\n  %49 = extractvalue { i8*, i32 } %48, 0\n  call void @__clang_call_terminate(i8* %49) #24\n  unreachable\n\n50:                                               ; preds = %41, %37, %35\n  %51 = phi %\"struct.boost::exception_detail::error_info_container\"* [ null, %35 ], [ %15, %37 ], [ %15, %41 ]\n  %52 = phi { i8*, i32 } [ %36, %35 ], [ %38, %37 ], [ %38, %41 ]\n  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %8) #20\n  br label %92\n\n53:                                               ; preds = %34, %2\n  %54 = phi %\"struct.boost::exception_detail::error_info_container\"* [ null, %2 ], [ %15, %34 ]\n  %55 = getelementptr inbounds %\"class.boost::exception\", %\"class.boost::exception\"* %1, i64 0, i32 3\n  %56 = load i8*, i8** %55, align 8, !tbaa !62\n  %57 = getelementptr inbounds %\"class.boost::exception\", %\"class.boost::exception\"* %0, i64 0, i32 3\n  store i8* %56, i8** %57, align 8, !tbaa !62\n  %58 = getelementptr inbounds %\"class.boost::exception\", %\"class.boost::exception\"* %1, i64 0, i32 4\n  %59 = load i32, i32* %58, align 8, !tbaa !55\n  %60 = getelementptr inbounds %\"class.boost::exception\", %\"class.boost::exception\"* %0, i64 0, i32 4\n  store i32 %59, i32* %60, align 8, !tbaa !55\n  %61 = getelementptr inbounds %\"class.boost::exception\", %\"class.boost::exception\"* %1, i64 0, i32 2\n  %62 = load i8*, i8** %61, align 8, !tbaa !63\n  %63 = getelementptr inbounds %\"class.boost::exception\", %\"class.boost::exception\"* %0, i64 0, i32 2\n  store i8* %62, i8** %63, align 8, !tbaa !63\n  %64 = getelementptr inbounds %\"class.boost::exception\", %\"class.boost::exception\"* %0, i64 0, i32 1, i32 0\n  %65 = load %\"struct.boost::exception_detail::error_info_container\"*, %\"struct.boost::exception_detail::error_info_container\"** %64, align 8, !tbaa !61\n  %66 = icmp eq %\"struct.boost::exception_detail::error_info_container\"* %65, null\n  br i1 %66, label %73, label %67\n\n67:                                               ; preds = %53\n  %68 = bitcast %\"struct.boost::exception_detail::error_info_container\"* %65 to i1 (%\"struct.boost::exception_detail::error_info_container\"*)***\n  %69 = load i1 (%\"struct.boost::exception_detail::error_info_container\"*)**, i1 (%\"struct.boost::exception_detail::error_info_container\"*)*** %68, align 8, !tbaa !8\n  %70 = getelementptr inbounds i1 (%\"struct.boost::exception_detail::error_info_container\"*)*, i1 (%\"struct.boost::exception_detail::error_info_container\"*)** %69, i64 4\n  %71 = load i1 (%\"struct.boost::exception_detail::error_info_container\"*)*, i1 (%\"struct.boost::exception_detail::error_info_container\"*)** %70, align 8\n  %72 = invoke zeroext i1 %71(%\"struct.boost::exception_detail::error_info_container\"* nonnull align 8 dereferenceable(8) %65)\n          to label %73 unwind label %90\n\n73:                                               ; preds = %67, %53\n  store %\"struct.boost::exception_detail::error_info_container\"* %54, %\"struct.boost::exception_detail::error_info_container\"** %64, align 8, !tbaa !61\n  %74 = icmp eq %\"struct.boost::exception_detail::error_info_container\"* %54, null\n  br i1 %74, label %89, label %75\n\n75:                                               ; preds = %73\n  %76 = bitcast %\"struct.boost::exception_detail::error_info_container\"* %54 to void (%\"struct.boost::exception_detail::error_info_container\"*)***\n  %77 = load void (%\"struct.boost::exception_detail::error_info_container\"*)**, void (%\"struct.boost::exception_detail::error_info_container\"*)*** %76, align 8, !tbaa !8\n  %78 = getelementptr inbounds void (%\"struct.boost::exception_detail::error_info_container\"*)*, void (%\"struct.boost::exception_detail::error_info_container\"*)** %77, i64 3\n  %79 = load void (%\"struct.boost::exception_detail::error_info_container\"*)*, void (%\"struct.boost::exception_detail::error_info_container\"*)** %78, align 8\n  invoke void %79(%\"struct.boost::exception_detail::error_info_container\"* nonnull align 8 dereferenceable(8) %54)\n          to label %80 unwind label %90\n\n80:                                               ; preds = %75\n  %81 = bitcast %\"struct.boost::exception_detail::error_info_container\"* %54 to i1 (%\"struct.boost::exception_detail::error_info_container\"*)***\n  %82 = load i1 (%\"struct.boost::exception_detail::error_info_container\"*)**, i1 (%\"struct.boost::exception_detail::error_info_container\"*)*** %81, align 8, !tbaa !8\n  %83 = getelementptr inbounds i1 (%\"struct.boost::exception_detail::error_info_container\"*)*, i1 (%\"struct.boost::exception_detail::error_info_container\"*)** %82, i64 4\n  %84 = load i1 (%\"struct.boost::exception_detail::error_info_container\"*)*, i1 (%\"struct.boost::exception_detail::error_info_container\"*)** %83, align 8\n  %85 = invoke zeroext i1 %84(%\"struct.boost::exception_detail::error_info_container\"* nonnull align 8 dereferenceable(8) %54)\n          to label %89 unwind label %86\n\n86:                                               ; preds = %80\n  %87 = landingpad { i8*, i32 }\n          catch i8* null\n  %88 = extractvalue { i8*, i32 } %87, 0\n  call void @__clang_call_terminate(i8* %88) #24\n  unreachable\n\n89:                                               ; preds = %80, %73\n  ret void\n\n90:                                               ; preds = %75, %67\n  %91 = landingpad { i8*, i32 }\n          cleanup\n  br label %92\n\n92:                                               ; preds = %90, %50\n  %93 = phi %\"struct.boost::exception_detail::error_info_container\"* [ %54, %90 ], [ %51, %50 ]\n  %94 = phi { i8*, i32 } [ %91, %90 ], [ %52, %50 ]\n  %95 = icmp eq %\"struct.boost::exception_detail::error_info_container\"* %93, null\n  br i1 %95, label %105, label %96\n\n96:                                               ; preds = %92\n  %97 = bitcast %\"struct.boost::exception_detail::error_info_container\"* %93 to i1 (%\"struct.boost::exception_detail::error_info_container\"*)***\n  %98 = load i1 (%\"struct.boost::exception_detail::error_info_container\"*)**, i1 (%\"struct.boost::exception_detail::error_info_container\"*)*** %97, align 8, !tbaa !8\n  %99 = getelementptr inbounds i1 (%\"struct.boost::exception_detail::error_info_container\"*)*, i1 (%\"struct.boost::exception_detail::error_info_container\"*)** %98, i64 4\n  %100 = load i1 (%\"struct.boost::exception_detail::error_info_container\"*)*, i1 (%\"struct.boost::exception_detail::error_info_container\"*)** %99, align 8\n  %101 = invoke zeroext i1 %100(%\"struct.boost::exception_detail::error_info_container\"* nonnull align 8 dereferenceable(8) %93)\n          to label %105 unwind label %102\n\n102:                                              ; preds = %96\n  %103 = landingpad { i8*, i32 }\n          catch i8* null\n  %104 = extractvalue { i8*, i32 } %103, 0\n  call void @__clang_call_terminate(i8* %104) #24\n  unreachable\n\n105:                                              ; preds = %96, %92\n  resume { i8*, i32 } %94\n}\n\n; Function Attrs: nounwind uwtable\ndefine linkonce_odr dso_local void @_ZN5boost16exception_detail10clone_implINS0_19error_info_injectorINS_12bad_any_castEEEED0Ev(%\"class.boost::exception_detail::clone_impl\"* nonnull align 8 dereferenceable(44) %0) unnamed_addr #12 comdat align 2 personality i32 (...)* @__gxx_personality_v0 {\n  %2 = getelementptr inbounds %\"class.boost::exception_detail::clone_impl\", %\"class.boost::exception_detail::clone_impl\"* %0, i64 0, i32 0, i32 1, i32 0\n  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [4 x i8*] }, { [4 x i8*] }* @_ZTVN5boost9exceptionE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8, !tbaa !8\n  %3 = getelementptr inbounds %\"class.boost::exception_detail::clone_impl\", %\"class.boost::exception_detail::clone_impl\"* %0, i64 0, i32 0, i32 1, i32 1, i32 0\n  %4 = load %\"struct.boost::exception_detail::error_info_container\"*, %\"struct.boost::exception_detail::error_info_container\"** %3, align 8, !tbaa !61\n  %5 = icmp eq %\"struct.boost::exception_detail::error_info_container\"* %4, null\n  br i1 %5, label %17, label %6\n\n6:                                                ; preds = %1\n  %7 = bitcast %\"struct.boost::exception_detail::error_info_container\"* %4 to i1 (%\"struct.boost::exception_detail::error_info_container\"*)***\n  %8 = load i1 (%\"struct.boost::exception_detail::error_info_container\"*)**, i1 (%\"struct.boost::exception_detail::error_info_container\"*)*** %7, align 8, !tbaa !8\n  %9 = getelementptr inbounds i1 (%\"struct.boost::exception_detail::error_info_container\"*)*, i1 (%\"struct.boost::exception_detail::error_info_container\"*)** %8, i64 4\n  %10 = load i1 (%\"struct.boost::exception_detail::error_info_container\"*)*, i1 (%\"struct.boost::exception_detail::error_info_container\"*)** %9, align 8\n  %11 = invoke zeroext i1 %10(%\"struct.boost::exception_detail::error_info_container\"* nonnull align 8 dereferenceable(8) %4)\n          to label %12 unwind label %14\n\n12:                                               ; preds = %6\n  br i1 %11, label %13, label %17\n\n13:                                               ; preds = %12\n  store %\"struct.boost::exception_detail::error_info_container\"* null, %\"struct.boost::exception_detail::error_info_container\"** %3, align 8, !tbaa !61\n  br label %17\n\n14:                                               ; preds = %6\n  %15 = landingpad { i8*, i32 }\n          catch i8* null\n  %16 = extractvalue { i8*, i32 } %15, 0\n  tail call void @__clang_call_terminate(i8* %16) #24\n  unreachable\n\n17:                                               ; preds = %1, %12, %13\n  %18 = getelementptr inbounds %\"class.boost::exception_detail::clone_impl\", %\"class.boost::exception_detail::clone_impl\"* %0, i64 0, i32 0, i32 0, i32 0\n  tail call void @_ZNSt8bad_castD2Ev(%\"class.std::bad_cast\"* nonnull align 8 dereferenceable(8) %18) #20\n  %19 = bitcast %\"class.boost::exception_detail::clone_impl\"* %0 to i8*\n  tail call void @_ZdlPv(i8* nonnull %19) #25\n  ret void\n}\n\n; Function Attrs: mustprogress nounwind uwtable\ndefine linkonce_odr dso_local i8* @_ZNK5boost12bad_any_cast4whatEv(%\"class.boost::bad_any_cast\"* nonnull align 8 dereferenceable(8) %0) unnamed_addr #14 comdat align 2 {\n  ret i8* getelementptr inbounds ([61 x i8], [61 x i8]* @.str.4, i64 0, i64 0)\n}\n\n; Function Attrs: mustprogress uwtable\ndefine linkonce_odr dso_local %\"class.boost::exception_detail::clone_base\"* @_ZNK5boost16exception_detail10clone_implINS0_19error_info_injectorINS_12bad_any_castEEEE5cloneEv(%\"class.boost::exception_detail::clone_impl\"* nonnull align 8 dereferenceable(44) %0) unnamed_addr #15 comdat align 2 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {\n  %2 = tail call noalias nonnull dereferenceable(56) i8* @_Znwm(i64 56) #23\n  %3 = bitcast i8* %2 to %\"class.boost::exception_detail::clone_impl\"*\n  invoke void @_ZN5boost16exception_detail10clone_implINS0_19error_info_injectorINS_12bad_any_castEEEEC1ERKS5_NS5_9clone_tagE(%\"class.boost::exception_detail::clone_impl\"* nonnull align 8 dereferenceable(44) %3, %\"class.boost::exception_detail::clone_impl\"* nonnull align 8 dereferenceable(44) %0)\n          to label %4 unwind label %12\n\n4:                                                ; preds = %1\n  %5 = bitcast i8* %2 to i8**\n  %6 = load i8*, i8** %5, align 8, !tbaa !8\n  %7 = getelementptr i8, i8* %6, i64 -24\n  %8 = bitcast i8* %7 to i64*\n  %9 = load i64, i64* %8, align 8\n  %10 = getelementptr inbounds i8, i8* %2, i64 %9\n  %11 = bitcast i8* %10 to %\"class.boost::exception_detail::clone_base\"*\n  ret %\"class.boost::exception_detail::clone_base\"* %11\n\n12:                                               ; preds = %1\n  %13 = landingpad { i8*, i32 }\n          cleanup\n  tail call void @_ZdlPv(i8* nonnull %2) #25\n  resume { i8*, i32 } %13\n}\n\n; Function Attrs: mustprogress uwtable\ndefine linkonce_odr dso_local void @_ZNK5boost16exception_detail10clone_implINS0_19error_info_injectorINS_12bad_any_castEEEE7rethrowEv(%\"class.boost::exception_detail::clone_impl\"* nonnull align 8 dereferenceable(44) %0) unnamed_addr #15 comdat align 2 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {\n  %2 = tail call i8* @__cxa_allocate_exception(i64 56) #20\n  %3 = bitcast i8* %2 to %\"class.boost::exception_detail::clone_impl\"*\n  invoke void @_ZN5boost16exception_detail10clone_implINS0_19error_info_injectorINS_12bad_any_castEEEEC1ERKS5_(%\"class.boost::exception_detail::clone_impl\"* nonnull align 8 dereferenceable(44) %3, %\"class.boost::exception_detail::clone_impl\"* nonnull align 8 dereferenceable(44) %0)\n          to label %4 unwind label %5\n\n4:                                                ; preds = %1\n  tail call void @__cxa_throw(i8* %2, i8* bitcast ({ i8*, i8*, i32, i32, i8*, i64, i8*, i64 }* @_ZTIN5boost16exception_detail10clone_implINS0_19error_info_injectorINS_12bad_any_castEEEEE to i8*), i8* bitcast (void (%\"class.boost::exception_detail::clone_impl\"*)* @_ZN5boost16exception_detail10clone_implINS0_19error_info_injectorINS_12bad_any_castEEEED1Ev to i8*)) #21\n  unreachable\n\n5:                                                ; preds = %1\n  %6 = landingpad { i8*, i32 }\n          cleanup\n  tail call void @__cxa_free_exception(i8* %2) #20\n  resume { i8*, i32 } %6\n}\n\n; Function Attrs: nounwind uwtable\ndefine linkonce_odr dso_local void @_ZThn8_N5boost16exception_detail10clone_implINS0_19error_info_injectorINS_12bad_any_castEEEED1Ev(%\"class.boost::exception_detail::clone_impl\"* %0) unnamed_addr #12 comdat align 2 personality i32 (...)* @__gxx_personality_v0 {\n  %2 = getelementptr inbounds %\"class.boost::exception_detail::clone_impl\", %\"class.boost::exception_detail::clone_impl\"* %0, i64 -1, i32 1\n  %3 = getelementptr inbounds %\"class.boost::exception_detail::clone_base\", %\"class.boost::exception_detail::clone_base\"* %2, i64 1, i32 0\n  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [4 x i8*] }, { [4 x i8*] }* @_ZTVN5boost9exceptionE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %3, align 8, !tbaa !8\n  %4 = getelementptr inbounds %\"class.boost::exception_detail::clone_base\", %\"class.boost::exception_detail::clone_base\"* %2, i64 2\n  %5 = bitcast %\"class.boost::exception_detail::clone_base\"* %4 to %\"struct.boost::exception_detail::error_info_container\"**\n  %6 = load %\"struct.boost::exception_detail::error_info_container\"*, %\"struct.boost::exception_detail::error_info_container\"** %5, align 8, !tbaa !61\n  %7 = icmp eq %\"struct.boost::exception_detail::error_info_container\"* %6, null\n  br i1 %7, label %19, label %8\n\n8:                                                ; preds = %1\n  %9 = bitcast %\"struct.boost::exception_detail::error_info_container\"* %6 to i1 (%\"struct.boost::exception_detail::error_info_container\"*)***\n  %10 = load i1 (%\"struct.boost::exception_detail::error_info_container\"*)**, i1 (%\"struct.boost::exception_detail::error_info_container\"*)*** %9, align 8, !tbaa !8\n  %11 = getelementptr inbounds i1 (%\"struct.boost::exception_detail::error_info_container\"*)*, i1 (%\"struct.boost::exception_detail::error_info_container\"*)** %10, i64 4\n  %12 = load i1 (%\"struct.boost::exception_detail::error_info_container\"*)*, i1 (%\"struct.boost::exception_detail::error_info_container\"*)** %11, align 8\n  %13 = invoke zeroext i1 %12(%\"struct.boost::exception_detail::error_info_container\"* nonnull align 8 dereferenceable(8) %6)\n          to label %14 unwind label %16\n\n14:                                               ; preds = %8\n  br i1 %13, label %15, label %19\n\n15:                                               ; preds = %14\n  store %\"struct.boost::exception_detail::error_info_container\"* null, %\"struct.boost::exception_detail::error_info_container\"** %5, align 8, !tbaa !61\n  br label %19\n\n16:                                               ; preds = %8\n  %17 = landingpad { i8*, i32 }\n          catch i8* null\n  %18 = extractvalue { i8*, i32 } %17, 0\n  tail call void @__clang_call_terminate(i8* %18) #24\n  unreachable\n\n19:                                               ; preds = %1, %14, %15\n  %20 = bitcast %\"class.boost::exception_detail::clone_base\"* %2 to %\"class.std::bad_cast\"*\n  tail call void @_ZNSt8bad_castD2Ev(%\"class.std::bad_cast\"* nonnull align 8 dereferenceable(8) %20) #20\n  ret void\n}\n\n; Function Attrs: nounwind uwtable\ndefine linkonce_odr dso_local void @_ZThn8_N5boost16exception_detail10clone_implINS0_19error_info_injectorINS_12bad_any_castEEEED0Ev(%\"class.boost::exception_detail::clone_impl\"* %0) unnamed_addr #12 comdat align 2 personality i32 (...)* @__gxx_personality_v0 {\n  %2 = getelementptr inbounds %\"class.boost::exception_detail::clone_impl\", %\"class.boost::exception_detail::clone_impl\"* %0, i64 -1, i32 1\n  %3 = getelementptr inbounds %\"class.boost::exception_detail::clone_base\", %\"class.boost::exception_detail::clone_base\"* %2, i64 1, i32 0\n  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [4 x i8*] }, { [4 x i8*] }* @_ZTVN5boost9exceptionE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %3, align 8, !tbaa !8\n  %4 = getelementptr inbounds %\"class.boost::exception_detail::clone_base\", %\"class.boost::exception_detail::clone_base\"* %2, i64 2\n  %5 = bitcast %\"class.boost::exception_detail::clone_base\"* %4 to %\"struct.boost::exception_detail::error_info_container\"**\n  %6 = load %\"struct.boost::exception_detail::error_info_container\"*, %\"struct.boost::exception_detail::error_info_container\"** %5, align 8, !tbaa !61\n  %7 = icmp eq %\"struct.boost::exception_detail::error_info_container\"* %6, null\n  br i1 %7, label %19, label %8\n\n8:                                                ; preds = %1\n  %9 = bitcast %\"struct.boost::exception_detail::error_info_container\"* %6 to i1 (%\"struct.boost::exception_detail::error_info_container\"*)***\n  %10 = load i1 (%\"struct.boost::exception_detail::error_info_container\"*)**, i1 (%\"struct.boost::exception_detail::error_info_container\"*)*** %9, align 8, !tbaa !8\n  %11 = getelementptr inbounds i1 (%\"struct.boost::exception_detail::error_info_container\"*)*, i1 (%\"struct.boost::exception_detail::error_info_container\"*)** %10, i64 4\n  %12 = load i1 (%\"struct.boost::exception_detail::error_info_container\"*)*, i1 (%\"struct.boost::exception_detail::error_info_container\"*)** %11, align 8\n  %13 = invoke zeroext i1 %12(%\"struct.boost::exception_detail::error_info_container\"* nonnull align 8 dereferenceable(8) %6)\n          to label %14 unwind label %16\n\n14:                                               ; preds = %8\n  br i1 %13, label %15, label %19\n\n15:                                               ; preds = %14\n  store %\"struct.boost::exception_detail::error_info_container\"* null, %\"struct.boost::exception_detail::error_info_container\"** %5, align 8, !tbaa !61\n  br label %19\n\n16:                                               ; preds = %8\n  %17 = landingpad { i8*, i32 }\n          catch i8* null\n  %18 = extractvalue { i8*, i32 } %17, 0\n  tail call void @__clang_call_terminate(i8* %18) #24\n  unreachable\n\n19:                                               ; preds = %1, %14, %15\n  %20 = bitcast %\"class.boost::exception_detail::clone_base\"* %2 to %\"class.std::bad_cast\"*\n  tail call void @_ZNSt8bad_castD2Ev(%\"class.std::bad_cast\"* nonnull align 8 dereferenceable(8) %20) #20\n  %21 = bitcast %\"class.boost::exception_detail::clone_base\"* %2 to i8*\n  tail call void @_ZdlPv(i8* nonnull %21) #25\n  ret void\n}\n\n; Function Attrs: uwtable\ndefine linkonce_odr dso_local %\"class.boost::exception_detail::clone_base\"* @_ZTv0_n24_NK5boost16exception_detail10clone_implINS0_19error_info_injectorINS_12bad_any_castEEEE5cloneEv(%\"class.boost::exception_detail::clone_impl\"* %0) unnamed_addr #0 comdat align 2 personality i32 (...)* @__gxx_personality_v0 {\n  %2 = bitcast %\"class.boost::exception_detail::clone_impl\"* %0 to i8*\n  %3 = bitcast %\"class.boost::exception_detail::clone_impl\"* %0 to i8**\n  %4 = load i8*, i8** %3, align 8\n  %5 = getelementptr inbounds i8, i8* %4, i64 -24\n  %6 = bitcast i8* %5 to i64*\n  %7 = load i64, i64* %6, align 8\n  %8 = getelementptr inbounds i8, i8* %2, i64 %7\n  %9 = tail call noalias nonnull dereferenceable(56) i8* @_Znwm(i64 56) #23\n  %10 = bitcast i8* %9 to %\"class.boost::exception_detail::clone_impl\"*\n  %11 = getelementptr inbounds %\"class.boost::exception_detail::clone_impl\", %\"class.boost::exception_detail::clone_impl\"* %10, i64 0, i32 1, i32 0\n  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN5boost16exception_detail10clone_baseE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %11, align 8, !tbaa !8\n  %12 = bitcast i8* %9 to %\"struct.boost::exception_detail::error_info_injector\"*\n  %13 = getelementptr inbounds %\"class.boost::exception_detail::clone_impl\", %\"class.boost::exception_detail::clone_impl\"* %10, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0\n  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*] }, { [5 x i8*] }* @_ZTVN5boost12bad_any_castE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %13, align 8, !tbaa !8\n  %14 = getelementptr inbounds %\"class.boost::exception_detail::clone_impl\", %\"class.boost::exception_detail::clone_impl\"* %10, i64 0, i32 0, i32 1, i32 0\n  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [4 x i8*] }, { [4 x i8*] }* @_ZTVN5boost9exceptionE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %14, align 8, !tbaa !8\n  %15 = getelementptr inbounds %\"class.boost::exception_detail::clone_impl\", %\"class.boost::exception_detail::clone_impl\"* %10, i64 0, i32 0, i32 1, i32 1, i32 0\n  %16 = getelementptr inbounds i8, i8* %8, i64 16\n  %17 = bitcast i8* %16 to %\"struct.boost::exception_detail::error_info_container\"**\n  %18 = load %\"struct.boost::exception_detail::error_info_container\"*, %\"struct.boost::exception_detail::error_info_container\"** %17, align 8, !tbaa !61\n  store %\"struct.boost::exception_detail::error_info_container\"* %18, %\"struct.boost::exception_detail::error_info_container\"** %15, align 8, !tbaa !61\n  %19 = icmp eq %\"struct.boost::exception_detail::error_info_container\"* %18, null\n  br i1 %19, label %27, label %20\n\n20:                                               ; preds = %1\n  %21 = bitcast %\"struct.boost::exception_detail::error_info_container\"* %18 to void (%\"struct.boost::exception_detail::error_info_container\"*)***\n  %22 = load void (%\"struct.boost::exception_detail::error_info_container\"*)**, void (%\"struct.boost::exception_detail::error_info_container\"*)*** %21, align 8, !tbaa !8\n  %23 = getelementptr inbounds void (%\"struct.boost::exception_detail::error_info_container\"*)*, void (%\"struct.boost::exception_detail::error_info_container\"*)** %22, i64 3\n  %24 = load void (%\"struct.boost::exception_detail::error_info_container\"*)*, void (%\"struct.boost::exception_detail::error_info_container\"*)** %23, align 8\n  invoke void %24(%\"struct.boost::exception_detail::error_info_container\"* nonnull align 8 dereferenceable(8) %18)\n          to label %27 unwind label %25\n\n25:                                               ; preds = %20\n  %26 = landingpad { i8*, i32 }\n          cleanup\n  br label %53\n\n27:                                               ; preds = %20, %1\n  %28 = getelementptr inbounds %\"class.boost::exception_detail::clone_impl\", %\"class.boost::exception_detail::clone_impl\"* %10, i64 0, i32 0, i32 1, i32 2\n  %29 = getelementptr inbounds i8, i8* %8, i64 24\n  %30 = bitcast i8** %28 to i8*\n  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(20) %30, i8* noundef nonnull align 8 dereferenceable(20) %29, i64 20, i1 false)\n  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [8 x i8*], [4 x i8*], [9 x i8*] }, { [8 x i8*], [4 x i8*], [9 x i8*] }* @_ZTVN5boost16exception_detail10clone_implINS0_19error_info_injectorINS_12bad_any_castEEEEE, i64 0, inrange i32 0, i64 3) to i32 (...)**), i32 (...)*** %13, align 8, !tbaa !8\n  %31 = getelementptr inbounds %\"class.boost::exception_detail::clone_impl\", %\"class.boost::exception_detail::clone_impl\"* %10, i64 0, i32 0, i32 1\n  %32 = getelementptr %\"class.boost::exception.base\", %\"class.boost::exception.base\"* %31, i64 0, i32 0\n  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [8 x i8*], [4 x i8*], [9 x i8*] }, { [8 x i8*], [4 x i8*], [9 x i8*] }* @_ZTVN5boost16exception_detail10clone_implINS0_19error_info_injectorINS_12bad_any_castEEEEE, i64 0, inrange i32 1, i64 2) to i32 (...)**), i32 (...)*** %32, align 8, !tbaa !8\n  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [8 x i8*], [4 x i8*], [9 x i8*] }, { [8 x i8*], [4 x i8*], [9 x i8*] }* @_ZTVN5boost16exception_detail10clone_implINS0_19error_info_injectorINS_12bad_any_castEEEEE, i64 0, inrange i32 2, i64 5) to i32 (...)**), i32 (...)*** %11, align 8, !tbaa !8\n  %33 = bitcast %\"class.boost::exception.base\"* %31 to %\"class.boost::exception\"*\n  %34 = getelementptr inbounds i8, i8* %8, i64 8\n  %35 = bitcast i8* %34 to %\"class.boost::exception\"*\n  invoke void @_ZN5boost16exception_detail20copy_boost_exceptionEPNS_9exceptionEPKS1_(%\"class.boost::exception\"* nonnull %33, %\"class.boost::exception\"* nonnull %35)\n          to label %56 unwind label %36\n\n36:                                               ; preds = %27\n  %37 = landingpad { i8*, i32 }\n          cleanup\n  %38 = getelementptr inbounds %\"struct.boost::exception_detail::error_info_injector\", %\"struct.boost::exception_detail::error_info_injector\"* %12, i64 0, i32 1, i32 0\n  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [4 x i8*] }, { [4 x i8*] }* @_ZTVN5boost9exceptionE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %38, align 8, !tbaa !8\n  %39 = getelementptr inbounds %\"struct.boost::exception_detail::error_info_injector\", %\"struct.boost::exception_detail::error_info_injector\"* %12, i64 0, i32 1, i32 1, i32 0\n  %40 = load %\"struct.boost::exception_detail::error_info_container\"*, %\"struct.boost::exception_detail::error_info_container\"** %39, align 8, !tbaa !61\n  %41 = icmp eq %\"struct.boost::exception_detail::error_info_container\"* %40, null\n  br i1 %41, label %53, label %42\n\n42:                                               ; preds = %36\n  %43 = bitcast %\"struct.boost::exception_detail::error_info_container\"* %40 to i1 (%\"struct.boost::exception_detail::error_info_container\"*)***\n  %44 = load i1 (%\"struct.boost::exception_detail::error_info_container\"*)**, i1 (%\"struct.boost::exception_detail::error_info_container\"*)*** %43, align 8, !tbaa !8\n  %45 = getelementptr inbounds i1 (%\"struct.boost::exception_detail::error_info_container\"*)*, i1 (%\"struct.boost::exception_detail::error_info_container\"*)** %44, i64 4\n  %46 = load i1 (%\"struct.boost::exception_detail::error_info_container\"*)*, i1 (%\"struct.boost::exception_detail::error_info_container\"*)** %45, align 8\n  %47 = invoke zeroext i1 %46(%\"struct.boost::exception_detail::error_info_container\"* nonnull align 8 dereferenceable(8) %40)\n          to label %48 unwind label %50\n\n48:                                               ; preds = %42\n  br i1 %47, label %49, label %53\n\n49:                                               ; preds = %48\n  store %\"struct.boost::exception_detail::error_info_container\"* null, %\"struct.boost::exception_detail::error_info_container\"** %39, align 8, !tbaa !61\n  br label %53\n\n50:                                               ; preds = %42\n  %51 = landingpad { i8*, i32 }\n          catch i8* null\n  %52 = extractvalue { i8*, i32 } %51, 0\n  tail call void @__clang_call_terminate(i8* %52) #24\n  unreachable\n\n53:                                               ; preds = %49, %48, %36, %25\n  %54 = phi { i8*, i32 } [ %26, %25 ], [ %37, %36 ], [ %37, %48 ], [ %37, %49 ]\n  %55 = bitcast i8* %9 to %\"class.std::bad_cast\"*\n  tail call void @_ZNSt8bad_castD2Ev(%\"class.std::bad_cast\"* nonnull align 8 dereferenceable(8) %55) #20\n  tail call void @_ZdlPv(i8* nonnull %9) #25\n  resume { i8*, i32 } %54\n\n56:                                               ; preds = %27\n  %57 = bitcast i8* %9 to i8**\n  %58 = load i8*, i8** %57, align 8, !tbaa !8\n  %59 = getelementptr i8, i8* %58, i64 -24\n  %60 = bitcast i8* %59 to i64*\n  %61 = load i64, i64* %60, align 8\n  %62 = getelementptr inbounds i8, i8* %9, i64 %61\n  %63 = bitcast i8* %62 to %\"class.boost::exception_detail::clone_base\"*\n  ret %\"class.boost::exception_detail::clone_base\"* %63\n}\n\n; Function Attrs: uwtable\ndefine linkonce_odr dso_local void @_ZTv0_n32_NK5boost16exception_detail10clone_implINS0_19error_info_injectorINS_12bad_any_castEEEE7rethrowEv(%\"class.boost::exception_detail::clone_impl\"* %0) unnamed_addr #0 comdat align 2 personality i32 (...)* @__gxx_personality_v0 {\n  %2 = bitcast %\"class.boost::exception_detail::clone_impl\"* %0 to i8*\n  %3 = bitcast %\"class.boost::exception_detail::clone_impl\"* %0 to i8**\n  %4 = load i8*, i8** %3, align 8\n  %5 = getelementptr inbounds i8, i8* %4, i64 -32\n  %6 = bitcast i8* %5 to i64*\n  %7 = load i64, i64* %6, align 8\n  %8 = getelementptr inbounds i8, i8* %2, i64 %7\n  %9 = bitcast i8* %8 to %\"class.boost::exception_detail::clone_impl\"*\n  %10 = tail call i8* @__cxa_allocate_exception(i64 56) #20\n  %11 = bitcast i8* %10 to %\"class.boost::exception_detail::clone_impl\"*\n  invoke void @_ZN5boost16exception_detail10clone_implINS0_19error_info_injectorINS_12bad_any_castEEEEC1ERKS5_(%\"class.boost::exception_detail::clone_impl\"* nonnull align 8 dereferenceable(44) %11, %\"class.boost::exception_detail::clone_impl\"* nonnull align 8 dereferenceable(44) %9)\n          to label %12 unwind label %13\n\n12:                                               ; preds = %1\n  tail call void @__cxa_throw(i8* %10, i8* bitcast ({ i8*, i8*, i32, i32, i8*, i64, i8*, i64 }* @_ZTIN5boost16exception_detail10clone_implINS0_19error_info_injectorINS_12bad_any_castEEEEE to i8*), i8* bitcast (void (%\"class.boost::exception_detail::clone_impl\"*)* @_ZN5boost16exception_detail10clone_implINS0_19error_info_injectorINS_12bad_any_castEEEED1Ev to i8*)) #21\n  unreachable\n\n13:                                               ; preds = %1\n  %14 = landingpad { i8*, i32 }\n          cleanup\n  tail call void @__cxa_free_exception(i8* %10) #20\n  resume { i8*, i32 } %14\n}\n\n; Function Attrs: nounwind uwtable\ndefine linkonce_odr dso_local void @_ZTv0_n40_N5boost16exception_detail10clone_implINS0_19error_info_injectorINS_12bad_any_castEEEED1Ev(%\"class.boost::exception_detail::clone_impl\"* %0) unnamed_addr #12 comdat align 2 personality i32 (...)* @__gxx_personality_v0 {\n  %2 = bitcast %\"class.boost::exception_detail::clone_impl\"* %0 to i8*\n  %3 = bitcast %\"class.boost::exception_detail::clone_impl\"* %0 to i8**\n  %4 = load i8*, i8** %3, align 8\n  %5 = getelementptr inbounds i8, i8* %4, i64 -40\n  %6 = bitcast i8* %5 to i64*\n  %7 = load i64, i64* %6, align 8\n  %8 = getelementptr inbounds i8, i8* %2, i64 %7\n  %9 = getelementptr inbounds i8, i8* %8, i64 8\n  %10 = bitcast i8* %9 to i32 (...)***\n  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [4 x i8*] }, { [4 x i8*] }* @_ZTVN5boost9exceptionE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %10, align 8, !tbaa !8\n  %11 = getelementptr inbounds i8, i8* %8, i64 16\n  %12 = bitcast i8* %11 to %\"struct.boost::exception_detail::error_info_container\"**\n  %13 = load %\"struct.boost::exception_detail::error_info_container\"*, %\"struct.boost::exception_detail::error_info_container\"** %12, align 8, !tbaa !61\n  %14 = icmp eq %\"struct.boost::exception_detail::error_info_container\"* %13, null\n  br i1 %14, label %26, label %15\n\n15:                                               ; preds = %1\n  %16 = bitcast %\"struct.boost::exception_detail::error_info_container\"* %13 to i1 (%\"struct.boost::exception_detail::error_info_container\"*)***\n  %17 = load i1 (%\"struct.boost::exception_detail::error_info_container\"*)**, i1 (%\"struct.boost::exception_detail::error_info_container\"*)*** %16, align 8, !tbaa !8\n  %18 = getelementptr inbounds i1 (%\"struct.boost::exception_detail::error_info_container\"*)*, i1 (%\"struct.boost::exception_detail::error_info_container\"*)** %17, i64 4\n  %19 = load i1 (%\"struct.boost::exception_detail::error_info_container\"*)*, i1 (%\"struct.boost::exception_detail::error_info_container\"*)** %18, align 8\n  %20 = invoke zeroext i1 %19(%\"struct.boost::exception_detail::error_info_container\"* nonnull align 8 dereferenceable(8) %13)\n          to label %21 unwind label %23\n\n21:                                               ; preds = %15\n  br i1 %20, label %22, label %26\n\n22:                                               ; preds = %21\n  store %\"struct.boost::exception_detail::error_info_container\"* null, %\"struct.boost::exception_detail::error_info_container\"** %12, align 8, !tbaa !61\n  br label %26\n\n23:                                               ; preds = %15\n  %24 = landingpad { i8*, i32 }\n          catch i8* null\n  %25 = extractvalue { i8*, i32 } %24, 0\n  tail call void @__clang_call_terminate(i8* %25) #24\n  unreachable\n\n26:                                               ; preds = %1, %21, %22\n  %27 = bitcast i8* %8 to %\"class.std::bad_cast\"*\n  tail call void @_ZNSt8bad_castD2Ev(%\"class.std::bad_cast\"* nonnull align 8 dereferenceable(8) %27) #20\n  ret void\n}\n\n; Function Attrs: nounwind uwtable\ndefine linkonce_odr dso_local void @_ZTv0_n40_N5boost16exception_detail10clone_implINS0_19error_info_injectorINS_12bad_any_castEEEED0Ev(%\"class.boost::exception_detail::clone_impl\"* %0) unnamed_addr #12 comdat align 2 personality i32 (...)* @__gxx_personality_v0 {\n  %2 = bitcast %\"class.boost::exception_detail::clone_impl\"* %0 to i8*\n  %3 = bitcast %\"class.boost::exception_detail::clone_impl\"* %0 to i8**\n  %4 = load i8*, i8** %3, align 8\n  %5 = getelementptr inbounds i8, i8* %4, i64 -40\n  %6 = bitcast i8* %5 to i64*\n  %7 = load i64, i64* %6, align 8\n  %8 = getelementptr inbounds i8, i8* %2, i64 %7\n  %9 = getelementptr inbounds i8, i8* %8, i64 8\n  %10 = bitcast i8* %9 to i32 (...)***\n  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [4 x i8*] }, { [4 x i8*] }* @_ZTVN5boost9exceptionE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %10, align 8, !tbaa !8\n  %11 = getelementptr inbounds i8, i8* %8, i64 16\n  %12 = bitcast i8* %11 to %\"struct.boost::exception_detail::error_info_container\"**\n  %13 = load %\"struct.boost::exception_detail::error_info_container\"*, %\"struct.boost::exception_detail::error_info_container\"** %12, align 8, !tbaa !61\n  %14 = icmp eq %\"struct.boost::exception_detail::error_info_container\"* %13, null\n  br i1 %14, label %26, label %15\n\n15:                                               ; preds = %1\n  %16 = bitcast %\"struct.boost::exception_detail::error_info_container\"* %13 to i1 (%\"struct.boost::exception_detail::error_info_container\"*)***\n  %17 = load i1 (%\"struct.boost::exception_detail::error_info_container\"*)**, i1 (%\"struct.boost::exception_detail::error_info_container\"*)*** %16, align 8, !tbaa !8\n  %18 = getelementptr inbounds i1 (%\"struct.boost::exception_detail::error_info_container\"*)*, i1 (%\"struct.boost::exception_detail::error_info_container\"*)** %17, i64 4\n  %19 = load i1 (%\"struct.boost::exception_detail::error_info_container\"*)*, i1 (%\"struct.boost::exception_detail::error_info_container\"*)** %18, align 8\n  %20 = invoke zeroext i1 %19(%\"struct.boost::exception_detail::error_info_container\"* nonnull align 8 dereferenceable(8) %13)\n          to label %21 unwind label %23\n\n21:                                               ; preds = %15\n  br i1 %20, label %22, label %26\n\n22:                                               ; preds = %21\n  store %\"struct.boost::exception_detail::error_info_container\"* null, %\"struct.boost::exception_detail::error_info_container\"** %12, align 8, !tbaa !61\n  br label %26\n\n23:                                               ; preds = %15\n  %24 = landingpad { i8*, i32 }\n          catch i8* null\n  %25 = extractvalue { i8*, i32 } %24, 0\n  tail call void @__clang_call_terminate(i8* %25) #24\n  unreachable\n\n26:                                               ; preds = %1, %21, %22\n  %27 = bitcast i8* %8 to %\"class.std::bad_cast\"*\n  tail call void @_ZNSt8bad_castD2Ev(%\"class.std::bad_cast\"* nonnull align 8 dereferenceable(8) %27) #20\n  tail call void @_ZdlPv(i8* nonnull %8) #25\n  ret void\n}\n\ndeclare dso_local void @__cxa_pure_virtual() unnamed_addr\n\n; Function Attrs: nounwind uwtable\ndefine linkonce_odr dso_local void @_ZN5boost16exception_detail10clone_baseD2Ev(%\"class.boost::exception_detail::clone_base\"* nonnull align 8 dereferenceable(8) %0) unnamed_addr #12 comdat align 2 {\n  ret void\n}\n\n; Function Attrs: nounwind uwtable\ndefine linkonce_odr dso_local void @_ZN5boost16exception_detail10clone_baseD0Ev(%\"class.boost::exception_detail::clone_base\"* nonnull align 8 dereferenceable(8) %0) unnamed_addr #12 comdat align 2 {\n  tail call void @llvm.trap() #24\n  unreachable\n}\n\n; Function Attrs: cold noreturn nounwind\ndeclare void @llvm.trap() #16\n\n; Function Attrs: nounwind uwtable\ndefine linkonce_odr dso_local void @_ZN5boost16exception_detail19error_info_injectorINS_12bad_any_castEED0Ev(%\"struct.boost::exception_detail::error_info_injector\"* nonnull align 8 dereferenceable(44) %0) unnamed_addr #12 comdat align 2 personality i32 (...)* @__gxx_personality_v0 {\n  %2 = getelementptr inbounds %\"struct.boost::exception_detail::error_info_injector\", %\"struct.boost::exception_detail::error_info_injector\"* %0, i64 0, i32 1, i32 0\n  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [4 x i8*] }, { [4 x i8*] }* @_ZTVN5boost9exceptionE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8, !tbaa !8\n  %3 = getelementptr inbounds %\"struct.boost::exception_detail::error_info_injector\", %\"struct.boost::exception_detail::error_info_injector\"* %0, i64 0, i32 1, i32 1, i32 0\n  %4 = load %\"struct.boost::exception_detail::error_info_container\"*, %\"struct.boost::exception_detail::error_info_container\"** %3, align 8, !tbaa !61\n  %5 = icmp eq %\"struct.boost::exception_detail::error_info_container\"* %4, null\n  br i1 %5, label %17, label %6\n\n6:                                                ; preds = %1\n  %7 = bitcast %\"struct.boost::exception_detail::error_info_container\"* %4 to i1 (%\"struct.boost::exception_detail::error_info_container\"*)***\n  %8 = load i1 (%\"struct.boost::exception_detail::error_info_container\"*)**, i1 (%\"struct.boost::exception_detail::error_info_container\"*)*** %7, align 8, !tbaa !8\n  %9 = getelementptr inbounds i1 (%\"struct.boost::exception_detail::error_info_container\"*)*, i1 (%\"struct.boost::exception_detail::error_info_container\"*)** %8, i64 4\n  %10 = load i1 (%\"struct.boost::exception_detail::error_info_container\"*)*, i1 (%\"struct.boost::exception_detail::error_info_container\"*)** %9, align 8\n  %11 = invoke zeroext i1 %10(%\"struct.boost::exception_detail::error_info_container\"* nonnull align 8 dereferenceable(8) %4)\n          to label %12 unwind label %14\n\n12:                                               ; preds = %6\n  br i1 %11, label %13, label %17\n\n13:                                               ; preds = %12\n  store %\"struct.boost::exception_detail::error_info_container\"* null, %\"struct.boost::exception_detail::error_info_container\"** %3, align 8, !tbaa !61\n  br label %17\n\n14:                                               ; preds = %6\n  %15 = landingpad { i8*, i32 }\n          catch i8* null\n  %16 = extractvalue { i8*, i32 } %15, 0\n  tail call void @__clang_call_terminate(i8* %16) #24\n  unreachable\n\n17:                                               ; preds = %1, %12, %13\n  %18 = getelementptr inbounds %\"struct.boost::exception_detail::error_info_injector\", %\"struct.boost::exception_detail::error_info_injector\"* %0, i64 0, i32 0, i32 0\n  tail call void @_ZNSt8bad_castD2Ev(%\"class.std::bad_cast\"* nonnull align 8 dereferenceable(8) %18) #20\n  %19 = bitcast %\"struct.boost::exception_detail::error_info_injector\"* %0 to i8*\n  tail call void @_ZdlPv(i8* nonnull %19) #25\n  ret void\n}\n\n; Function Attrs: nounwind uwtable\ndefine linkonce_odr dso_local void @_ZThn8_N5boost16exception_detail19error_info_injectorINS_12bad_any_castEED1Ev(%\"struct.boost::exception_detail::error_info_injector\"* %0) unnamed_addr #12 comdat align 2 personality i32 (...)* @__gxx_personality_v0 {\n  %2 = getelementptr inbounds %\"struct.boost::exception_detail::error_info_injector\", %\"struct.boost::exception_detail::error_info_injector\"* %0, i64 -1, i32 1, i32 4\n  %3 = getelementptr inbounds i32, i32* %2, i64 2\n  %4 = bitcast i32* %3 to i32 (...)***\n  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [4 x i8*] }, { [4 x i8*] }* @_ZTVN5boost9exceptionE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %4, align 8, !tbaa !8\n  %5 = getelementptr inbounds i32, i32* %2, i64 4\n  %6 = bitcast i32* %5 to %\"struct.boost::exception_detail::error_info_container\"**\n  %7 = load %\"struct.boost::exception_detail::error_info_container\"*, %\"struct.boost::exception_detail::error_info_container\"** %6, align 8, !tbaa !61\n  %8 = icmp eq %\"struct.boost::exception_detail::error_info_container\"* %7, null\n  br i1 %8, label %20, label %9\n\n9:                                                ; preds = %1\n  %10 = bitcast %\"struct.boost::exception_detail::error_info_container\"* %7 to i1 (%\"struct.boost::exception_detail::error_info_container\"*)***\n  %11 = load i1 (%\"struct.boost::exception_detail::error_info_container\"*)**, i1 (%\"struct.boost::exception_detail::error_info_container\"*)*** %10, align 8, !tbaa !8\n  %12 = getelementptr inbounds i1 (%\"struct.boost::exception_detail::error_info_container\"*)*, i1 (%\"struct.boost::exception_detail::error_info_container\"*)** %11, i64 4\n  %13 = load i1 (%\"struct.boost::exception_detail::error_info_container\"*)*, i1 (%\"struct.boost::exception_detail::error_info_container\"*)** %12, align 8\n  %14 = invoke zeroext i1 %13(%\"struct.boost::exception_detail::error_info_container\"* nonnull align 8 dereferenceable(8) %7)\n          to label %15 unwind label %17\n\n15:                                               ; preds = %9\n  br i1 %14, label %16, label %20\n\n16:                                               ; preds = %15\n  store %\"struct.boost::exception_detail::error_info_container\"* null, %\"struct.boost::exception_detail::error_info_container\"** %6, align 8, !tbaa !61\n  br label %20\n\n17:                                               ; preds = %9\n  %18 = landingpad { i8*, i32 }\n          catch i8* null\n  %19 = extractvalue { i8*, i32 } %18, 0\n  tail call void @__clang_call_terminate(i8* %19) #24\n  unreachable\n\n20:                                               ; preds = %1, %15, %16\n  %21 = bitcast i32* %2 to %\"class.std::bad_cast\"*\n  tail call void @_ZNSt8bad_castD2Ev(%\"class.std::bad_cast\"* nonnull align 8 dereferenceable(8) %21) #20\n  ret void\n}\n\n; Function Attrs: nounwind uwtable\ndefine linkonce_odr dso_local void @_ZThn8_N5boost16exception_detail19error_info_injectorINS_12bad_any_castEED0Ev(%\"struct.boost::exception_detail::error_info_injector\"* %0) unnamed_addr #12 comdat align 2 personality i32 (...)* @__gxx_personality_v0 {\n  %2 = getelementptr inbounds %\"struct.boost::exception_detail::error_info_injector\", %\"struct.boost::exception_detail::error_info_injector\"* %0, i64 -1, i32 1, i32 4\n  %3 = getelementptr inbounds i32, i32* %2, i64 2\n  %4 = bitcast i32* %3 to i32 (...)***\n  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [4 x i8*] }, { [4 x i8*] }* @_ZTVN5boost9exceptionE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %4, align 8, !tbaa !8\n  %5 = getelementptr inbounds i32, i32* %2, i64 4\n  %6 = bitcast i32* %5 to %\"struct.boost::exception_detail::error_info_container\"**\n  %7 = load %\"struct.boost::exception_detail::error_info_container\"*, %\"struct.boost::exception_detail::error_info_container\"** %6, align 8, !tbaa !61\n  %8 = icmp eq %\"struct.boost::exception_detail::error_info_container\"* %7, null\n  br i1 %8, label %20, label %9\n\n9:                                                ; preds = %1\n  %10 = bitcast %\"struct.boost::exception_detail::error_info_container\"* %7 to i1 (%\"struct.boost::exception_detail::error_info_container\"*)***\n  %11 = load i1 (%\"struct.boost::exception_detail::error_info_container\"*)**, i1 (%\"struct.boost::exception_detail::error_info_container\"*)*** %10, align 8, !tbaa !8\n  %12 = getelementptr inbounds i1 (%\"struct.boost::exception_detail::error_info_container\"*)*, i1 (%\"struct.boost::exception_detail::error_info_container\"*)** %11, i64 4\n  %13 = load i1 (%\"struct.boost::exception_detail::error_info_container\"*)*, i1 (%\"struct.boost::exception_detail::error_info_container\"*)** %12, align 8\n  %14 = invoke zeroext i1 %13(%\"struct.boost::exception_detail::error_info_container\"* nonnull align 8 dereferenceable(8) %7)\n          to label %15 unwind label %17\n\n15:                                               ; preds = %9\n  br i1 %14, label %16, label %20\n\n16:                                               ; preds = %15\n  store %\"struct.boost::exception_detail::error_info_container\"* null, %\"struct.boost::exception_detail::error_info_container\"** %6, align 8, !tbaa !61\n  br label %20\n\n17:                                               ; preds = %9\n  %18 = landingpad { i8*, i32 }\n          catch i8* null\n  %19 = extractvalue { i8*, i32 } %18, 0\n  tail call void @__clang_call_terminate(i8* %19) #24\n  unreachable\n\n20:                                               ; preds = %1, %15, %16\n  %21 = bitcast i32* %2 to %\"class.std::bad_cast\"*\n  tail call void @_ZNSt8bad_castD2Ev(%\"class.std::bad_cast\"* nonnull align 8 dereferenceable(8) %21) #20\n  %22 = bitcast i32* %2 to i8*\n  tail call void @_ZdlPv(i8* nonnull %22) #25\n  ret void\n}\n\n; Function Attrs: inlinehint nounwind uwtable\ndefine linkonce_odr dso_local void @_ZN5boost12bad_any_castD0Ev(%\"class.boost::bad_any_cast\"* nonnull align 8 dereferenceable(8) %0) unnamed_addr #17 comdat align 2 {\n  %2 = getelementptr inbounds %\"class.boost::bad_any_cast\", %\"class.boost::bad_any_cast\"* %0, i64 0, i32 0\n  tail call void @_ZNSt8bad_castD2Ev(%\"class.std::bad_cast\"* nonnull align 8 dereferenceable(8) %2) #20\n  %3 = bitcast %\"class.boost::bad_any_cast\"* %0 to i8*\n  tail call void @_ZdlPv(i8* nonnull %3) #25\n  ret void\n}\n\n; Function Attrs: nobuiltin allocsize(0)\ndeclare dso_local nonnull i8* @_Znwm(i64) local_unnamed_addr #18\n\n; Function Attrs: uwtable\ndefine linkonce_odr dso_local void @_ZN5boost16exception_detail10clone_implINS0_19error_info_injectorINS_12bad_any_castEEEEC1ERKS5_NS5_9clone_tagE(%\"class.boost::exception_detail::clone_impl\"* nonnull align 8 dereferenceable(44) %0, %\"class.boost::exception_detail::clone_impl\"* nonnull align 8 dereferenceable(44) %1) unnamed_addr #0 comdat align 2 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {\n  %3 = getelementptr inbounds %\"class.boost::exception_detail::clone_impl\", %\"class.boost::exception_detail::clone_impl\"* %0, i64 0, i32 1, i32 0\n  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN5boost16exception_detail10clone_baseE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %3, align 8, !tbaa !8\n  %4 = bitcast %\"class.boost::exception_detail::clone_impl\"* %0 to %\"struct.boost::exception_detail::error_info_injector\"*\n  %5 = getelementptr inbounds %\"class.boost::exception_detail::clone_impl\", %\"class.boost::exception_detail::clone_impl\"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0\n  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*] }, { [5 x i8*] }* @_ZTVN5boost12bad_any_castE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %5, align 8, !tbaa !8\n  %6 = getelementptr inbounds %\"class.boost::exception_detail::clone_impl\", %\"class.boost::exception_detail::clone_impl\"* %0, i64 0, i32 0, i32 1, i32 0\n  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [4 x i8*] }, { [4 x i8*] }* @_ZTVN5boost9exceptionE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %6, align 8, !tbaa !8\n  %7 = getelementptr inbounds %\"class.boost::exception_detail::clone_impl\", %\"class.boost::exception_detail::clone_impl\"* %0, i64 0, i32 0, i32 1, i32 1, i32 0\n  %8 = getelementptr inbounds %\"class.boost::exception_detail::clone_impl\", %\"class.boost::exception_detail::clone_impl\"* %1, i64 0, i32 0, i32 1, i32 1, i32 0\n  %9 = load %\"struct.boost::exception_detail::error_info_container\"*, %\"struct.boost::exception_detail::error_info_container\"** %8, align 8, !tbaa !61\n  store %\"struct.boost::exception_detail::error_info_container\"* %9, %\"struct.boost::exception_detail::error_info_container\"** %7, align 8, !tbaa !61\n  %10 = icmp eq %\"struct.boost::exception_detail::error_info_container\"* %9, null\n  br i1 %10, label %19, label %11\n\n11:                                               ; preds = %2\n  %12 = bitcast %\"struct.boost::exception_detail::error_info_container\"* %9 to void (%\"struct.boost::exception_detail::error_info_container\"*)***\n  %13 = load void (%\"struct.boost::exception_detail::error_info_container\"*)**, void (%\"struct.boost::exception_detail::error_info_container\"*)*** %12, align 8, !tbaa !8\n  %14 = getelementptr inbounds void (%\"struct.boost::exception_detail::error_info_container\"*)*, void (%\"struct.boost::exception_detail::error_info_container\"*)** %13, i64 3\n  %15 = load void (%\"struct.boost::exception_detail::error_info_container\"*)*, void (%\"struct.boost::exception_detail::error_info_container\"*)** %14, align 8\n  invoke void %15(%\"struct.boost::exception_detail::error_info_container\"* nonnull align 8 dereferenceable(8) %9)\n          to label %19 unwind label %16\n\n16:                                               ; preds = %11\n  %17 = landingpad { i8*, i32 }\n          cleanup\n  %18 = getelementptr inbounds %\"class.boost::exception_detail::clone_impl\", %\"class.boost::exception_detail::clone_impl\"* %0, i64 0, i32 0, i32 0, i32 0\n  tail call void @_ZNSt8bad_castD2Ev(%\"class.std::bad_cast\"* nonnull align 8 dereferenceable(8) %18) #20\n  br label %32\n\n19:                                               ; preds = %11, %2\n  %20 = getelementptr inbounds %\"class.boost::exception_detail::clone_impl\", %\"class.boost::exception_detail::clone_impl\"* %0, i64 0, i32 0, i32 1, i32 2\n  %21 = getelementptr inbounds %\"class.boost::exception_detail::clone_impl\", %\"class.boost::exception_detail::clone_impl\"* %1, i64 0, i32 0, i32 1, i32 2\n  %22 = bitcast i8** %20 to i8*\n  %23 = bitcast i8** %21 to i8*\n  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(20) %22, i8* noundef nonnull align 8 dereferenceable(20) %23, i64 20, i1 false)\n  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [8 x i8*], [4 x i8*], [9 x i8*] }, { [8 x i8*], [4 x i8*], [9 x i8*] }* @_ZTVN5boost16exception_detail10clone_implINS0_19error_info_injectorINS_12bad_any_castEEEEE, i64 0, inrange i32 0, i64 3) to i32 (...)**), i32 (...)*** %5, align 8, !tbaa !8\n  %24 = getelementptr inbounds %\"class.boost::exception_detail::clone_impl\", %\"class.boost::exception_detail::clone_impl\"* %0, i64 0, i32 0, i32 1\n  %25 = getelementptr %\"class.boost::exception.base\", %\"class.boost::exception.base\"* %24, i64 0, i32 0\n  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [8 x i8*], [4 x i8*], [9 x i8*] }, { [8 x i8*], [4 x i8*], [9 x i8*] }* @_ZTVN5boost16exception_detail10clone_implINS0_19error_info_injectorINS_12bad_any_castEEEEE, i64 0, inrange i32 1, i64 2) to i32 (...)**), i32 (...)*** %25, align 8, !tbaa !8\n  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [8 x i8*], [4 x i8*], [9 x i8*] }, { [8 x i8*], [4 x i8*], [9 x i8*] }* @_ZTVN5boost16exception_detail10clone_implINS0_19error_info_injectorINS_12bad_any_castEEEEE, i64 0, inrange i32 2, i64 5) to i32 (...)**), i32 (...)*** %3, align 8, !tbaa !8\n  %26 = bitcast %\"class.boost::exception.base\"* %24 to %\"class.boost::exception\"*\n  %27 = getelementptr inbounds %\"class.boost::exception_detail::clone_impl\", %\"class.boost::exception_detail::clone_impl\"* %1, i64 0, i32 0, i32 1\n  %28 = bitcast %\"class.boost::exception.base\"* %27 to %\"class.boost::exception\"*\n  invoke void @_ZN5boost16exception_detail20copy_boost_exceptionEPNS_9exceptionEPKS1_(%\"class.boost::exception\"* nonnull %26, %\"class.boost::exception\"* nonnull %28)\n          to label %29 unwind label %30\n\n29:                                               ; preds = %19\n  ret void\n\n30:                                               ; preds = %19\n  %31 = landingpad { i8*, i32 }\n          cleanup\n  tail call void @_ZN5boost16exception_detail19error_info_injectorINS_12bad_any_castEED2Ev(%\"struct.boost::exception_detail::error_info_injector\"* nonnull align 8 dereferenceable(44) %4) #20\n  br label %32\n\n32:                                               ; preds = %16, %30\n  %33 = phi { i8*, i32 } [ %31, %30 ], [ %17, %16 ]\n  resume { i8*, i32 } %33\n}\n\n; Function Attrs: inlinehint uwtable\ndefine linkonce_odr dso_local void @_ZN5boost16exception_detail10clone_implINS0_19error_info_injectorINS_12bad_any_castEEEEC1ERKS5_(%\"class.boost::exception_detail::clone_impl\"* nonnull align 8 dereferenceable(44) %0, %\"class.boost::exception_detail::clone_impl\"* nonnull align 8 dereferenceable(44) %1) unnamed_addr #13 comdat align 2 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {\n  %3 = getelementptr inbounds %\"class.boost::exception_detail::clone_impl\", %\"class.boost::exception_detail::clone_impl\"* %0, i64 0, i32 1, i32 0\n  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN5boost16exception_detail10clone_baseE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %3, align 8, !tbaa !8\n  %4 = getelementptr inbounds %\"class.boost::exception_detail::clone_impl\", %\"class.boost::exception_detail::clone_impl\"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0\n  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*] }, { [5 x i8*] }* @_ZTVN5boost12bad_any_castE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %4, align 8, !tbaa !8\n  %5 = getelementptr inbounds %\"class.boost::exception_detail::clone_impl\", %\"class.boost::exception_detail::clone_impl\"* %0, i64 0, i32 0, i32 1, i32 0\n  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [4 x i8*] }, { [4 x i8*] }* @_ZTVN5boost9exceptionE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %5, align 8, !tbaa !8\n  %6 = getelementptr inbounds %\"class.boost::exception_detail::clone_impl\", %\"class.boost::exception_detail::clone_impl\"* %0, i64 0, i32 0, i32 1, i32 1, i32 0\n  %7 = getelementptr inbounds %\"class.boost::exception_detail::clone_impl\", %\"class.boost::exception_detail::clone_impl\"* %1, i64 0, i32 0, i32 1, i32 1, i32 0\n  %8 = load %\"struct.boost::exception_detail::error_info_container\"*, %\"struct.boost::exception_detail::error_info_container\"** %7, align 8, !tbaa !61\n  store %\"struct.boost::exception_detail::error_info_container\"* %8, %\"struct.boost::exception_detail::error_info_container\"** %6, align 8, !tbaa !61\n  %9 = icmp eq %\"struct.boost::exception_detail::error_info_container\"* %8, null\n  br i1 %9, label %18, label %10\n\n10:                                               ; preds = %2\n  %11 = bitcast %\"struct.boost::exception_detail::error_info_container\"* %8 to void (%\"struct.boost::exception_detail::error_info_container\"*)***\n  %12 = load void (%\"struct.boost::exception_detail::error_info_container\"*)**, void (%\"struct.boost::exception_detail::error_info_container\"*)*** %11, align 8, !tbaa !8\n  %13 = getelementptr inbounds void (%\"struct.boost::exception_detail::error_info_container\"*)*, void (%\"struct.boost::exception_detail::error_info_container\"*)** %12, i64 3\n  %14 = load void (%\"struct.boost::exception_detail::error_info_container\"*)*, void (%\"struct.boost::exception_detail::error_info_container\"*)** %13, align 8\n  invoke void %14(%\"struct.boost::exception_detail::error_info_container\"* nonnull align 8 dereferenceable(8) %8)\n          to label %18 unwind label %15\n\n15:                                               ; preds = %10\n  %16 = landingpad { i8*, i32 }\n          cleanup\n  %17 = getelementptr inbounds %\"class.boost::exception_detail::clone_impl\", %\"class.boost::exception_detail::clone_impl\"* %0, i64 0, i32 0, i32 0, i32 0\n  tail call void @_ZNSt8bad_castD2Ev(%\"class.std::bad_cast\"* nonnull align 8 dereferenceable(8) %17) #20\n  resume { i8*, i32 } %16\n\n18:                                               ; preds = %10, %2\n  %19 = getelementptr inbounds %\"class.boost::exception_detail::clone_impl\", %\"class.boost::exception_detail::clone_impl\"* %0, i64 0, i32 0, i32 1, i32 2\n  %20 = getelementptr inbounds %\"class.boost::exception_detail::clone_impl\", %\"class.boost::exception_detail::clone_impl\"* %1, i64 0, i32 0, i32 1, i32 2\n  %21 = bitcast i8** %19 to i8*\n  %22 = bitcast i8** %20 to i8*\n  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(20) %21, i8* noundef nonnull align 8 dereferenceable(20) %22, i64 20, i1 false)\n  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [8 x i8*], [4 x i8*], [9 x i8*] }, { [8 x i8*], [4 x i8*], [9 x i8*] }* @_ZTVN5boost16exception_detail10clone_implINS0_19error_info_injectorINS_12bad_any_castEEEEE, i64 0, inrange i32 0, i64 3) to i32 (...)**), i32 (...)*** %4, align 8, !tbaa !8\n  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [8 x i8*], [4 x i8*], [9 x i8*] }, { [8 x i8*], [4 x i8*], [9 x i8*] }* @_ZTVN5boost16exception_detail10clone_implINS0_19error_info_injectorINS_12bad_any_castEEEEE, i64 0, inrange i32 1, i64 2) to i32 (...)**), i32 (...)*** %5, align 8, !tbaa !8\n  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [8 x i8*], [4 x i8*], [9 x i8*] }, { [8 x i8*], [4 x i8*], [9 x i8*] }* @_ZTVN5boost16exception_detail10clone_implINS0_19error_info_injectorINS_12bad_any_castEEEEE, i64 0, inrange i32 2, i64 5) to i32 (...)**), i32 (...)*** %3, align 8, !tbaa !8\n  ret void\n}\n\ndeclare dso_local nonnull align 8 dereferenceable(32) %\"class.std::__cxx11::basic_string\"* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEmmmc(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32), i64, i64, i64, i8 signext) local_unnamed_addr #6\n\n; Function Attrs: inlinehint nounwind uwtable\ndefine linkonce_odr dso_local void @_ZN5boost3any6holderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED2Ev(%\"class.boost::any::holder\"* nonnull align 8 dereferenceable(40) %0) unnamed_addr #17 comdat align 2 personality i32 (...)* @__gxx_personality_v0 {\n  %2 = getelementptr inbounds %\"class.boost::any::holder\", %\"class.boost::any::holder\"* %0, i64 0, i32 0, i32 0\n  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN5boost3any6holderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8, !tbaa !8\n  %3 = getelementptr inbounds %\"class.boost::any::holder\", %\"class.boost::any::holder\"* %0, i64 0, i32 1, i32 0, i32 0\n  %4 = load i8*, i8** %3, align 8, !tbaa !18\n  %5 = getelementptr inbounds %\"class.boost::any::holder\", %\"class.boost::any::holder\"* %0, i64 0, i32 1, i32 2\n  %6 = bitcast %union.anon* %5 to i8*\n  %7 = icmp eq i8* %4, %6\n  br i1 %7, label %9, label %8\n\n8:                                                ; preds = %1\n  tail call void @_ZdlPv(i8* %4) #20\n  br label %9\n\n9:                                                ; preds = %1, %8\n  ret void\n}\n\n; Function Attrs: inlinehint nounwind uwtable\ndefine linkonce_odr dso_local void @_ZN5boost3any6holderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED0Ev(%\"class.boost::any::holder\"* nonnull align 8 dereferenceable(40) %0) unnamed_addr #17 comdat align 2 personality i32 (...)* @__gxx_personality_v0 {\n  %2 = getelementptr inbounds %\"class.boost::any::holder\", %\"class.boost::any::holder\"* %0, i64 0, i32 0, i32 0\n  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN5boost3any6holderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8, !tbaa !8\n  %3 = getelementptr inbounds %\"class.boost::any::holder\", %\"class.boost::any::holder\"* %0, i64 0, i32 1, i32 0, i32 0\n  %4 = load i8*, i8** %3, align 8, !tbaa !18\n  %5 = getelementptr inbounds %\"class.boost::any::holder\", %\"class.boost::any::holder\"* %0, i64 0, i32 1, i32 2\n  %6 = bitcast %union.anon* %5 to i8*\n  %7 = icmp eq i8* %4, %6\n  br i1 %7, label %9, label %8\n\n8:                                                ; preds = %1\n  tail call void @_ZdlPv(i8* %4) #20\n  br label %9\n\n9:                                                ; preds = %1, %8\n  %10 = bitcast %\"class.boost::any::holder\"* %0 to i8*\n  tail call void @_ZdlPv(i8* nonnull %10) #25\n  ret void\n}\n\n; Function Attrs: nounwind uwtable\ndefine linkonce_odr dso_local nonnull align 8 dereferenceable(16) %\"class.std::type_info\"* @_ZNK5boost3any6holderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE4typeEv(%\"class.boost::any::holder\"* nonnull align 8 dereferenceable(40) %0) unnamed_addr #12 comdat align 2 {\n  ret %\"class.std::type_info\"* bitcast ({ i8*, i8* }* @_ZTINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE to %\"class.std::type_info\"*)\n}\n\n; Function Attrs: uwtable\ndefine linkonce_odr dso_local %\"class.boost::any::placeholder\"* @_ZNK5boost3any6holderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE5cloneEv(%\"class.boost::any::holder\"* nonnull align 8 dereferenceable(40) %0) unnamed_addr #0 comdat align 2 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {\n  %2 = alloca i64, align 8\n  %3 = tail call noalias nonnull dereferenceable(40) i8* @_Znwm(i64 40) #23\n  %4 = bitcast i8* %3 to %\"class.boost::any::holder\"*\n  %5 = getelementptr inbounds %\"class.boost::any::holder\", %\"class.boost::any::holder\"* %4, i64 0, i32 0, i32 0\n  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN5boost3any6holderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %5, align 8, !tbaa !8\n  %6 = getelementptr inbounds %\"class.boost::any::holder\", %\"class.boost::any::holder\"* %4, i64 0, i32 1\n  %7 = getelementptr inbounds %\"class.boost::any::holder\", %\"class.boost::any::holder\"* %4, i64 0, i32 1, i32 2\n  %8 = bitcast %\"class.std::__cxx11::basic_string\"* %6 to %union.anon**\n  store %union.anon* %7, %union.anon** %8, align 8, !tbaa !13\n  %9 = getelementptr inbounds %\"class.boost::any::holder\", %\"class.boost::any::holder\"* %0, i64 0, i32 1, i32 0, i32 0\n  %10 = load i8*, i8** %9, align 8, !tbaa !18\n  %11 = getelementptr inbounds %\"class.boost::any::holder\", %\"class.boost::any::holder\"* %0, i64 0, i32 1, i32 1\n  %12 = load i64, i64* %11, align 8, !tbaa !15\n  %13 = bitcast i64* %2 to i8*\n  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %13) #20\n  store i64 %12, i64* %2, align 8, !tbaa !24\n  %14 = icmp ugt i64 %12, 15\n  br i1 %14, label %17, label %15\n\n15:                                               ; preds = %1\n  %16 = bitcast %union.anon* %7 to i8*\n  br label %23\n\n17:                                               ; preds = %1\n  %18 = invoke i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %6, i64* nonnull align 8 dereferenceable(8) %2, i64 0)\n          to label %19 unwind label %35\n\n19:                                               ; preds = %17\n  %20 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %6, i64 0, i32 0, i32 0\n  store i8* %18, i8** %20, align 8, !tbaa !18\n  %21 = load i64, i64* %2, align 8, !tbaa !24\n  %22 = getelementptr inbounds %\"class.boost::any::holder\", %\"class.boost::any::holder\"* %4, i64 0, i32 1, i32 2, i32 0\n  store i64 %21, i64* %22, align 8, !tbaa !12\n  br label %23\n\n23:                                               ; preds = %19, %15\n  %24 = phi i8* [ %16, %15 ], [ %18, %19 ]\n  switch i64 %12, label %27 [\n    i64 1, label %25\n    i64 0, label %28\n  ]\n\n25:                                               ; preds = %23\n  %26 = load i8, i8* %10, align 1, !tbaa !12\n  store i8 %26, i8* %24, align 1, !tbaa !12\n  br label %28\n\n27:                                               ; preds = %23\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %24, i8* align 1 %10, i64 %12, i1 false) #20\n  br label %28\n\n28:                                               ; preds = %27, %25, %23\n  %29 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %6, i64 0, i32 0, i32 0\n  %30 = load i64, i64* %2, align 8, !tbaa !24\n  %31 = getelementptr inbounds %\"class.boost::any::holder\", %\"class.boost::any::holder\"* %4, i64 0, i32 1, i32 1\n  store i64 %30, i64* %31, align 8, !tbaa !15\n  %32 = load i8*, i8** %29, align 8, !tbaa !18\n  %33 = getelementptr inbounds i8, i8* %32, i64 %30\n  store i8 0, i8* %33, align 1, !tbaa !12\n  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %13) #20\n  %34 = getelementptr %\"class.boost::any::holder\", %\"class.boost::any::holder\"* %4, i64 0, i32 0\n  ret %\"class.boost::any::placeholder\"* %34\n\n35:                                               ; preds = %17\n  %36 = landingpad { i8*, i32 }\n          cleanup\n  call void @_ZdlPv(i8* nonnull %3) #25\n  resume { i8*, i32 } %36\n}\n\n; Function Attrs: inaccessiblememonly nofree nosync nounwind willreturn\ndeclare void @llvm.assume(i1 noundef) #19\n\n; Function Attrs: inaccessiblememonly nofree nosync nounwind willreturn\ndeclare void @llvm.experimental.noalias.scope.decl(metadata) #19\n\nattributes #0 = { uwtable \"frame-pointer\"=\"none\" \"min-legal-vector-width\"=\"0\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #1 = { argmemonly mustprogress nofree nosync nounwind willreturn }\nattributes #2 = { argmemonly mustprogress nofree nounwind readonly willreturn \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #3 = { mustprogress nofree nounwind willreturn \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #4 = { noinline noreturn nounwind }\nattributes #5 = { nobuiltin nounwind \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #6 = { \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #7 = { argmemonly mustprogress nofree nounwind willreturn }\nattributes #8 = { noreturn \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #9 = { inlinehint noreturn uwtable \"frame-pointer\"=\"none\" \"min-legal-vector-width\"=\"0\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #10 = { argmemonly mustprogress nofree nounwind willreturn writeonly }\nattributes #11 = { nounwind \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #12 = { nounwind uwtable \"frame-pointer\"=\"none\" \"min-legal-vector-width\"=\"0\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #13 = { inlinehint uwtable \"frame-pointer\"=\"none\" \"min-legal-vector-width\"=\"0\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #14 = { mustprogress nounwind uwtable \"frame-pointer\"=\"none\" \"min-legal-vector-width\"=\"0\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #15 = { mustprogress uwtable \"frame-pointer\"=\"none\" \"min-legal-vector-width\"=\"0\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #16 = { cold noreturn nounwind }\nattributes #17 = { inlinehint nounwind uwtable \"frame-pointer\"=\"none\" \"min-legal-vector-width\"=\"0\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #18 = { nobuiltin allocsize(0) \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #19 = { inaccessiblememonly nofree nosync nounwind willreturn }\nattributes #20 = { nounwind }\nattributes #21 = { noreturn }\nattributes #22 = { nounwind readonly willreturn }\nattributes #23 = { builtin allocsize(0) }\nattributes #24 = { noreturn nounwind }\nattributes #25 = { builtin nounwind }\n\n!llvm.module.flags = !{!0, !1}\n!llvm.ident = !{!2}\n\n!0 = !{i32 1, !\"wchar_size\", i32 4}\n!1 = !{i32 7, !\"uwtable\", i32 1}\n!2 = !{!\"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)\"}\n!3 = !{!4, !5, i64 0}\n!4 = !{!\"_ZTSN5boost3anyE\", !5, i64 0}\n!5 = !{!\"any pointer\", !6, i64 0}\n!6 = !{!\"omnipotent char\", !7, i64 0}\n!7 = !{!\"Simple C++ TBAA\"}\n!8 = !{!9, !9, i64 0}\n!9 = !{!\"vtable pointer\", !7, i64 0}\n!10 = !{!11, !5, i64 8}\n!11 = !{!\"_ZTSSt9type_info\", !5, i64 8}\n!12 = !{!6, !6, i64 0}\n!13 = !{!14, !5, i64 0}\n!14 = !{!\"_ZTSNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderE\", !5, i64 0}\n!15 = !{!16, !17, i64 8}\n!16 = !{!\"_ZTSNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE\", !14, i64 0, !17, i64 8, !6, i64 16}\n!17 = !{!\"long\", !6, i64 0}\n!18 = !{!16, !5, i64 0}\n!19 = distinct !{!19, !20}\n!20 = !{!\"llvm.loop.mustprogress\"}\n!21 = !{!22}\n!22 = distinct !{!22, !23, !\"_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEmm: argument 0\"}\n!23 = distinct !{!23, !\"_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEmm\"}\n!24 = !{!17, !17, i64 0}\n!25 = !{!26}\n!26 = distinct !{!26, !27, !\"_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_S5_: argument 0\"}\n!27 = distinct !{!27, !\"_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_S5_\"}\n!28 = !{!29}\n!29 = distinct !{!29, !30, !\"_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEmm: argument 0\"}\n!30 = distinct !{!30, !\"_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEmm\"}\n!31 = !{!32}\n!32 = distinct !{!32, !33, !\"_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_S9_: argument 0\"}\n!33 = distinct !{!33, !\"_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_S9_\"}\n!34 = distinct !{!34, !20}\n!35 = !{!36, !36, i64 0}\n!36 = !{!\"int\", !6, i64 0}\n!37 = !{!38, !38, i64 0}\n!38 = !{!\"double\", !6, i64 0}\n!39 = !{!40}\n!40 = distinct !{!40, !41, !\"_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEmm: argument 0\"}\n!41 = distinct !{!41, !\"_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEmm\"}\n!42 = !{!43}\n!43 = distinct !{!43, !44, !\"_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_S5_: argument 0\"}\n!44 = distinct !{!44, !\"_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_S5_\"}\n!45 = !{!46}\n!46 = distinct !{!46, !47, !\"_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEmm: argument 0\"}\n!47 = distinct !{!47, !\"_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEmm\"}\n!48 = !{!49}\n!49 = distinct !{!49, !50, !\"_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_S9_: argument 0\"}\n!50 = distinct !{!50, !\"_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_S9_\"}\n!51 = distinct !{!51, !20}\n!52 = !{!53}\n!53 = distinct !{!53, !54, !\"_ZN5boost17enable_error_infoINS_12bad_any_castEEENS_16exception_detail29enable_error_info_return_typeIT_E4typeERKS4_: argument 0\"}\n!54 = distinct !{!54, !\"_ZN5boost17enable_error_infoINS_12bad_any_castEEENS_16exception_detail29enable_error_info_return_typeIT_E4typeERKS4_\"}\n!55 = !{!56, !36, i64 32}\n!56 = !{!\"_ZTSN5boost9exceptionE\", !57, i64 8, !5, i64 16, !5, i64 24, !36, i64 32}\n!57 = !{!\"_ZTSN5boost16exception_detail12refcount_ptrINS0_20error_info_containerEEE\", !5, i64 0}\n!58 = !{!59}\n!59 = distinct !{!59, !60, !\"_ZN5boost24enable_current_exceptionINS_16exception_detail19error_info_injectorINS_12bad_any_castEEEEENS1_10clone_implIT_EERKS6_: argument 0\"}\n!60 = distinct !{!60, !\"_ZN5boost24enable_current_exceptionINS_16exception_detail19error_info_injectorINS_12bad_any_castEEEEENS1_10clone_implIT_EERKS6_\"}\n!61 = !{!57, !5, i64 0}\n!62 = !{!56, !5, i64 24}\n!63 = !{!56, !5, i64 16}\n", "target": "This is the targeted source code:\n/*\nCreate a function that takes integers, floats, or strings representing\nreal numbers, and returns the larger variable in its given variable type.\nReturn \"None\" if the values are equal.\nNote: If a real number is represented as a string, the floating point might be . or ,\n\ncompare_one(1, 2.5) \u279e 2.5\ncompare_one(1, \"2,3\") \u279e \"2,3\"\ncompare_one(\"5,1\", \"6\") \u279e \"6\"\ncompare_one(\"1\", 1) \u279e \"None\"\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\n#include<boost/any.hpp>\nusing namespace std;\nboost::any compare_one(boost::any a,boost::any b){\n\n    double  numa,numb;\n    boost::any out;\n   \n    if (a.type()==typeid(string))\n    {\n        string s;\n        s=boost::any_cast<string>(a);\n        if (find(s.begin(),s.end(),',')!=s.end())\n            for (int i=0;i<s.length();i++)\n                if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);\n        numa=atof(s.c_str());\n        \n    }\n    else \n    {\n        if (a.type()==typeid(int)) numa=boost::any_cast<int>(a);\n        if (a.type()==typeid(double)) numa=boost::any_cast<double>(a);\n    }\n    if (b.type()==typeid(string))\n    {\n        string s;\n        s=boost::any_cast<string>(b);\n        if (find(s.begin(),s.end(),',')!=s.end())\n            for (int i=0;i<s.length();i++)\n                if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);\n        numb=atof(s.c_str());\n    }\n    else \n    {\n        if (b.type()==typeid(int)) numb=boost::any_cast<int>(b);\n        if (b.type()==typeid(double)) numb=boost::any_cast<double>(b);\n    }\n\n    if (numa==numb) return string(\"None\");\n    if (numa<numb) return b;\n    if (numa>numb) return a;\n}\n"}
{"input": "Convert this to C++:\n; ModuleID = '../../Human_xBenchmarks_164/CPP_138/CPP_138.cpp'\nsource_filename = \"../../Human_xBenchmarks_164/CPP_138/CPP_138.cpp\"\ntarget datalayout = \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\ntarget triple = \"x86_64-unknown-linux-gnu\"\n\n; Function Attrs: mustprogress nofree norecurse nosync nounwind readnone uwtable willreturn\ndefine dso_local zeroext i1 @_Z20is_equal_to_sum_eveni(i32 %0) local_unnamed_addr #0 {\n  %2 = and i32 %0, 1\n  %3 = icmp eq i32 %2, 0\n  %4 = icmp sgt i32 %0, 7\n  %5 = and i1 %4, %3\n  ret i1 %5\n}\n\nattributes #0 = { mustprogress nofree norecurse nosync nounwind readnone uwtable willreturn \"frame-pointer\"=\"none\" \"min-legal-vector-width\"=\"0\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\n\n!llvm.module.flags = !{!0, !1}\n!llvm.ident = !{!2}\n\n!0 = !{i32 1, !\"wchar_size\", i32 4}\n!1 = !{i32 7, !\"uwtable\", i32 1}\n!2 = !{!\"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)\"}\n", "target": "This is the targeted source code:\n/*\nEvaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\nExample\nis_equal_to_sum_even(4) == false\nis_equal_to_sum_even(6) == false\nis_equal_to_sum_even(8) == true\n*/\n#include<stdio.h>\nusing namespace std;\nbool is_equal_to_sum_even(int n){\n\n    if (n%2==0 and n>=8) return true;\n    return false;\n}\n"}
{"input": "Convert this to C++:\n; ModuleID = '../../Human_xBenchmarks_164/CPP_139/CPP_139.cpp'\nsource_filename = \"../../Human_xBenchmarks_164/CPP_139/CPP_139.cpp\"\ntarget datalayout = \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\ntarget triple = \"x86_64-unknown-linux-gnu\"\n\n; Function Attrs: mustprogress nofree norecurse nosync nounwind readnone uwtable willreturn\ndefine dso_local i64 @_Z17special_factoriali(i32 %0) local_unnamed_addr #0 {\n  %2 = icmp slt i32 %0, 1\n  br i1 %2, label %28, label %3\n\n3:                                                ; preds = %1\n  %4 = add nuw i32 %0, 1\n  %5 = zext i32 %4 to i64\n  %6 = add nsw i64 %5, -1\n  %7 = add nsw i64 %5, -2\n  %8 = and i64 %6, 7\n  %9 = icmp ult i64 %7, 7\n  br i1 %9, label %12, label %10\n\n10:                                               ; preds = %3\n  %11 = and i64 %6, -8\n  br label %30\n\n12:                                               ; preds = %30, %3\n  %13 = phi i64 [ undef, %3 ], [ %57, %30 ]\n  %14 = phi i64 [ 1, %3 ], [ %58, %30 ]\n  %15 = phi i64 [ 1, %3 ], [ %57, %30 ]\n  %16 = phi i64 [ 1, %3 ], [ %56, %30 ]\n  %17 = icmp eq i64 %8, 0\n  br i1 %17, label %28, label %18\n\n18:                                               ; preds = %12, %18\n  %19 = phi i64 [ %25, %18 ], [ %14, %12 ]\n  %20 = phi i64 [ %24, %18 ], [ %15, %12 ]\n  %21 = phi i64 [ %23, %18 ], [ %16, %12 ]\n  %22 = phi i64 [ %26, %18 ], [ %8, %12 ]\n  %23 = mul nsw i64 %21, %19\n  %24 = mul nsw i64 %23, %20\n  %25 = add nuw nsw i64 %19, 1\n  %26 = add i64 %22, -1\n  %27 = icmp eq i64 %26, 0\n  br i1 %27, label %28, label %18, !llvm.loop !3\n\n28:                                               ; preds = %12, %18, %1\n  %29 = phi i64 [ 1, %1 ], [ %13, %12 ], [ %24, %18 ]\n  ret i64 %29\n\n30:                                               ; preds = %30, %10\n  %31 = phi i64 [ 1, %10 ], [ %58, %30 ]\n  %32 = phi i64 [ 1, %10 ], [ %57, %30 ]\n  %33 = phi i64 [ 1, %10 ], [ %56, %30 ]\n  %34 = phi i64 [ %11, %10 ], [ %59, %30 ]\n  %35 = mul nsw i64 %33, %31\n  %36 = mul nsw i64 %35, %32\n  %37 = add nuw nsw i64 %31, 1\n  %38 = mul nsw i64 %35, %37\n  %39 = mul nsw i64 %38, %36\n  %40 = add nuw nsw i64 %31, 2\n  %41 = mul nsw i64 %38, %40\n  %42 = mul nsw i64 %41, %39\n  %43 = add nuw nsw i64 %31, 3\n  %44 = mul nsw i64 %41, %43\n  %45 = mul nsw i64 %44, %42\n  %46 = add nuw nsw i64 %31, 4\n  %47 = mul nsw i64 %44, %46\n  %48 = mul nsw i64 %47, %45\n  %49 = add nuw nsw i64 %31, 5\n  %50 = mul nsw i64 %47, %49\n  %51 = mul nsw i64 %50, %48\n  %52 = add nuw nsw i64 %31, 6\n  %53 = mul nsw i64 %50, %52\n  %54 = mul nsw i64 %53, %51\n  %55 = add nuw nsw i64 %31, 7\n  %56 = mul nsw i64 %53, %55\n  %57 = mul nsw i64 %56, %54\n  %58 = add nuw nsw i64 %31, 8\n  %59 = add i64 %34, -8\n  %60 = icmp eq i64 %59, 0\n  br i1 %60, label %12, label %30, !llvm.loop !5\n}\n\nattributes #0 = { mustprogress nofree norecurse nosync nounwind readnone uwtable willreturn \"frame-pointer\"=\"none\" \"min-legal-vector-width\"=\"0\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\n\n!llvm.module.flags = !{!0, !1}\n!llvm.ident = !{!2}\n\n!0 = !{i32 1, !\"wchar_size\", i32 4}\n!1 = !{i32 7, !\"uwtable\", i32 1}\n!2 = !{!\"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)\"}\n!3 = distinct !{!3, !4}\n!4 = !{!\"llvm.loop.unroll.disable\"}\n!5 = distinct !{!5, !6}\n!6 = !{!\"llvm.loop.mustprogress\"}\n", "target": "This is the targeted source code:\n/*\nThe Brazilian factorial is defined as:\nbrazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\nwhere n > 0\n\nFor example:\n>>> special_factorial(4)\n288\n\nThe function will receive an integer as input and should return the special\nfactorial of this integer.\n*/\n#include<stdio.h>\nusing namespace std;\nlong long special_factorial(int n){\n\n    long long fact=1,bfact=1;\n    for (int i=1;i<=n;i++)\n    {\n        fact=fact*i;\n        bfact=bfact*fact;\n    }\n    return bfact;\n}\n"}
{"input": "Convert this to C++:\n; ModuleID = '../../Human_xBenchmarks_164/CPP_140/CPP_140.cpp'\nsource_filename = \"../../Human_xBenchmarks_164/CPP_140/CPP_140.cpp\"\ntarget datalayout = \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\ntarget triple = \"x86_64-unknown-linux-gnu\"\n\n%\"class.std::__cxx11::basic_string\" = type { %\"struct.std::__cxx11::basic_string<char>::_Alloc_hider\", i64, %union.anon }\n%\"struct.std::__cxx11::basic_string<char>::_Alloc_hider\" = type { i8* }\n%union.anon = type { i64, [8 x i8] }\n\n@.str.1 = private unnamed_addr constant [3 x i8] c\"__\\00\", align 1\n@.str.3 = private unnamed_addr constant [21 x i8] c\"basic_string::append\\00\", align 1\n\n; Function Attrs: uwtable\ndefine dso_local void @_Z10fix_spacesNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE(%\"class.std::__cxx11::basic_string\"* noalias sret(%\"class.std::__cxx11::basic_string\") align 8 %0, %\"class.std::__cxx11::basic_string\"* nocapture readonly %1) local_unnamed_addr #0 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {\n  %3 = alloca i64, align 8\n  %4 = alloca i64, align 8\n  %5 = alloca i64, align 8\n  %6 = alloca i64, align 8\n  %7 = alloca i64, align 8\n  %8 = alloca i64, align 8\n  %9 = alloca i64, align 8\n  %10 = alloca %\"class.std::__cxx11::basic_string\", align 8\n  %11 = alloca %\"class.std::__cxx11::basic_string\", align 8\n  %12 = alloca %\"class.std::__cxx11::basic_string\", align 8\n  %13 = alloca %\"class.std::__cxx11::basic_string\", align 8\n  %14 = alloca %\"class.std::__cxx11::basic_string\", align 8\n  %15 = alloca %\"class.std::__cxx11::basic_string\", align 8\n  %16 = alloca %\"class.std::__cxx11::basic_string\", align 8\n  %17 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 2\n  %18 = bitcast %\"class.std::__cxx11::basic_string\"* %0 to %union.anon**\n  store %union.anon* %17, %union.anon** %18, align 8, !tbaa !3\n  %19 = bitcast %union.anon* %17 to i8*\n  %20 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 0, i32 0\n  %21 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 1\n  store i64 0, i64* %21, align 8, !tbaa !8\n  store i8 0, i8* %19, align 8, !tbaa !11\n  %22 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %1, i64 0, i32 1\n  %23 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %1, i64 0, i32 0, i32 0\n  %24 = bitcast %\"class.std::__cxx11::basic_string\"* %11 to i8*\n  %25 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %11, i64 0, i32 2\n  %26 = bitcast %\"class.std::__cxx11::basic_string\"* %11 to %union.anon**\n  %27 = bitcast i64* %8 to i8*\n  %28 = bitcast %union.anon* %25 to i8*\n  %29 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %11, i64 0, i32 0, i32 0\n  %30 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %11, i64 0, i32 2, i32 0\n  %31 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %11, i64 0, i32 1\n  %32 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 2, i32 0\n  %33 = bitcast %\"class.std::__cxx11::basic_string\"* %10 to i8*\n  %34 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %10, i64 0, i32 2\n  %35 = bitcast %\"class.std::__cxx11::basic_string\"* %10 to %union.anon**\n  %36 = bitcast i64* %9 to i8*\n  %37 = bitcast %union.anon* %34 to i8*\n  %38 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %10, i64 0, i32 0, i32 0\n  %39 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %10, i64 0, i32 2, i32 0\n  %40 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %10, i64 0, i32 1\n  %41 = bitcast %\"class.std::__cxx11::basic_string\"* %12 to i8*\n  %42 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %12, i64 0, i32 2\n  %43 = bitcast %\"class.std::__cxx11::basic_string\"* %12 to %union.anon**\n  %44 = bitcast i64* %7 to i8*\n  %45 = bitcast %union.anon* %42 to i8*\n  %46 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %12, i64 0, i32 0, i32 0\n  %47 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %12, i64 0, i32 2, i32 0\n  %48 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %12, i64 0, i32 1\n  %49 = bitcast %\"class.std::__cxx11::basic_string\"* %13 to i8*\n  %50 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %13, i64 0, i32 2\n  %51 = bitcast %\"class.std::__cxx11::basic_string\"* %13 to %union.anon**\n  %52 = bitcast i64* %6 to i8*\n  %53 = bitcast %union.anon* %50 to i8*\n  %54 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %13, i64 0, i32 0, i32 0\n  %55 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %13, i64 0, i32 2, i32 0\n  %56 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %13, i64 0, i32 1\n  %57 = load i64, i64* %22, align 8, !tbaa !8\n  %58 = icmp eq i64 %57, 0\n  br i1 %58, label %577, label %59\n\n59:                                               ; preds = %2\n  %60 = bitcast i64* %31 to <2 x i64>*\n  %61 = bitcast i64* %21 to <2 x i64>*\n  %62 = bitcast i64* %40 to <2 x i64>*\n  %63 = bitcast i64* %21 to <2 x i64>*\n  %64 = bitcast i64* %48 to <2 x i64>*\n  %65 = bitcast i64* %21 to <2 x i64>*\n  %66 = bitcast i64* %56 to <2 x i64>*\n  %67 = bitcast i64* %21 to <2 x i64>*\n  br label %69\n\n68:                                               ; preds = %335\n  switch i32 %337, label %495 [\n    i32 1, label %340\n    i32 2, label %415\n  ]\n\n69:                                               ; preds = %59, %335\n  %70 = phi i64 [ %336, %335 ], [ %57, %59 ]\n  %71 = phi i64 [ %338, %335 ], [ 0, %59 ]\n  %72 = phi i32 [ %337, %335 ], [ 0, %59 ]\n  %73 = load i8*, i8** %23, align 8, !tbaa !12\n  %74 = getelementptr inbounds i8, i8* %73, i64 %71\n  %75 = load i8, i8* %74, align 1, !tbaa !11\n  %76 = icmp eq i8 %75, 32\n  br i1 %76, label %77, label %79\n\n77:                                               ; preds = %69\n  %78 = add nsw i32 %72, 1\n  br label %335\n\n79:                                               ; preds = %69\n  switch i32 %72, label %209 [\n    i32 1, label %80\n    i32 2, label %140\n  ]\n\n80:                                               ; preds = %79\n  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %33) #7\n  call void @llvm.experimental.noalias.scope.decl(metadata !13)\n  store %union.anon* %34, %union.anon** %35, align 8, !tbaa !3, !alias.scope !13\n  %81 = load i8*, i8** %20, align 8, !tbaa !12, !noalias !13\n  %82 = load i64, i64* %21, align 8, !tbaa !8, !noalias !13\n  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %36) #7, !noalias !13\n  store i64 %82, i64* %9, align 8, !tbaa !16, !noalias !13\n  %83 = icmp ugt i64 %82, 15\n  br i1 %83, label %84, label %88\n\n84:                                               ; preds = %80\n  %85 = invoke i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %10, i64* nonnull align 8 dereferenceable(8) %9, i64 0)\n          to label %86 unwind label %136\n\n86:                                               ; preds = %84\n  store i8* %85, i8** %38, align 8, !tbaa !12, !alias.scope !13\n  %87 = load i64, i64* %9, align 8, !tbaa !16, !noalias !13\n  store i64 %87, i64* %39, align 8, !tbaa !11, !alias.scope !13\n  br label %88\n\n88:                                               ; preds = %80, %86\n  %89 = phi i8* [ %85, %86 ], [ %37, %80 ]\n  switch i64 %82, label %92 [\n    i64 1, label %90\n    i64 0, label %93\n  ]\n\n90:                                               ; preds = %88\n  %91 = load i8, i8* %81, align 1, !tbaa !11\n  store i8 %91, i8* %89, align 1, !tbaa !11\n  br label %93\n\n92:                                               ; preds = %88\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %89, i8* align 1 %81, i64 %82, i1 false) #7\n  br label %93\n\n93:                                               ; preds = %92, %90, %88\n  %94 = load i64, i64* %9, align 8, !tbaa !16, !noalias !13\n  store i64 %94, i64* %40, align 8, !tbaa !8, !alias.scope !13\n  %95 = load i8*, i8** %38, align 8, !tbaa !12, !alias.scope !13\n  %96 = getelementptr inbounds i8, i8* %95, i64 %94\n  store i8 0, i8* %96, align 1, !tbaa !11\n  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %36) #7, !noalias !13\n  %97 = load i64, i64* %40, align 8, !tbaa !8, !alias.scope !13\n  %98 = invoke nonnull align 8 dereferenceable(32) %\"class.std::__cxx11::basic_string\"* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEmmmc(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %10, i64 %97, i64 0, i64 1, i8 signext 95)\n          to label %104 unwind label %99\n\n99:                                               ; preds = %93\n  %100 = landingpad { i8*, i32 }\n          cleanup\n  %101 = load i8*, i8** %38, align 8, !tbaa !12, !alias.scope !13\n  %102 = icmp eq i8* %101, %37\n  br i1 %102, label %138, label %103\n\n103:                                              ; preds = %99\n  call void @_ZdlPv(i8* %101) #7\n  br label %138\n\n104:                                              ; preds = %93\n  %105 = load i8*, i8** %38, align 8, !tbaa !12\n  %106 = icmp eq i8* %105, %37\n  br i1 %106, label %107, label %121\n\n107:                                              ; preds = %104\n  %108 = load i64, i64* %40, align 8, !tbaa !8\n  %109 = icmp eq i64 %108, 0\n  br i1 %109, label %116, label %110\n\n110:                                              ; preds = %107\n  %111 = load i8*, i8** %20, align 8, !tbaa !12\n  %112 = icmp eq i64 %108, 1\n  br i1 %112, label %113, label %115\n\n113:                                              ; preds = %110\n  %114 = load i8, i8* %37, align 8, !tbaa !11\n  store i8 %114, i8* %111, align 1, !tbaa !11\n  br label %116\n\n115:                                              ; preds = %110\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %111, i8* nonnull align 8 %37, i64 %108, i1 false) #7\n  br label %116\n\n116:                                              ; preds = %115, %113, %107\n  %117 = load i64, i64* %40, align 8, !tbaa !8\n  store i64 %117, i64* %21, align 8, !tbaa !8\n  %118 = load i8*, i8** %20, align 8, !tbaa !12\n  %119 = getelementptr inbounds i8, i8* %118, i64 %117\n  store i8 0, i8* %119, align 1, !tbaa !11\n  %120 = load i8*, i8** %38, align 8, !tbaa !12\n  br label %130\n\n121:                                              ; preds = %104\n  %122 = load i8*, i8** %20, align 8, !tbaa !12\n  %123 = icmp eq i8* %122, %19\n  %124 = load i64, i64* %32, align 8\n  store i8* %105, i8** %20, align 8, !tbaa !12\n  %125 = load <2 x i64>, <2 x i64>* %62, align 8, !tbaa !11\n  store <2 x i64> %125, <2 x i64>* %63, align 8, !tbaa !11\n  %126 = icmp eq i8* %122, null\n  %127 = or i1 %123, %126\n  br i1 %127, label %129, label %128\n\n128:                                              ; preds = %121\n  store i8* %122, i8** %38, align 8, !tbaa !12\n  store i64 %124, i64* %39, align 8, !tbaa !11\n  br label %130\n\n129:                                              ; preds = %121\n  store %union.anon* %34, %union.anon** %35, align 8, !tbaa !12\n  br label %130\n\n130:                                              ; preds = %116, %128, %129\n  %131 = phi i8* [ %120, %116 ], [ %122, %128 ], [ %37, %129 ]\n  store i64 0, i64* %40, align 8, !tbaa !8\n  store i8 0, i8* %131, align 1, !tbaa !11\n  %132 = load i8*, i8** %38, align 8, !tbaa !12\n  %133 = icmp eq i8* %132, %37\n  br i1 %133, label %135, label %134\n\n134:                                              ; preds = %130\n  call void @_ZdlPv(i8* %132) #7\n  br label %135\n\n135:                                              ; preds = %130, %134\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %33) #7\n  br label %271\n\n136:                                              ; preds = %84\n  %137 = landingpad { i8*, i32 }\n          cleanup\n  br label %138\n\n138:                                              ; preds = %99, %103, %136\n  %139 = phi { i8*, i32 } [ %137, %136 ], [ %100, %103 ], [ %100, %99 ]\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %33) #7\n  br label %572\n\n140:                                              ; preds = %79\n  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %24) #7\n  call void @llvm.experimental.noalias.scope.decl(metadata !17)\n  store %union.anon* %25, %union.anon** %26, align 8, !tbaa !3, !alias.scope !17\n  %141 = load i8*, i8** %20, align 8, !tbaa !12, !noalias !17\n  %142 = load i64, i64* %21, align 8, !tbaa !8, !noalias !17\n  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %27) #7, !noalias !17\n  store i64 %142, i64* %8, align 8, !tbaa !16, !noalias !17\n  %143 = icmp ugt i64 %142, 15\n  br i1 %143, label %144, label %148\n\n144:                                              ; preds = %140\n  %145 = invoke i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %11, i64* nonnull align 8 dereferenceable(8) %8, i64 0)\n          to label %146 unwind label %205\n\n146:                                              ; preds = %144\n  store i8* %145, i8** %29, align 8, !tbaa !12, !alias.scope !17\n  %147 = load i64, i64* %8, align 8, !tbaa !16, !noalias !17\n  store i64 %147, i64* %30, align 8, !tbaa !11, !alias.scope !17\n  br label %148\n\n148:                                              ; preds = %140, %146\n  %149 = phi i8* [ %145, %146 ], [ %28, %140 ]\n  switch i64 %142, label %152 [\n    i64 1, label %150\n    i64 0, label %153\n  ]\n\n150:                                              ; preds = %148\n  %151 = load i8, i8* %141, align 1, !tbaa !11\n  store i8 %151, i8* %149, align 1, !tbaa !11\n  br label %153\n\n152:                                              ; preds = %148\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %149, i8* align 1 %141, i64 %142, i1 false) #7\n  br label %153\n\n153:                                              ; preds = %152, %150, %148\n  %154 = load i64, i64* %8, align 8, !tbaa !16, !noalias !17\n  store i64 %154, i64* %31, align 8, !tbaa !8, !alias.scope !17\n  %155 = load i8*, i8** %29, align 8, !tbaa !12, !alias.scope !17\n  %156 = getelementptr inbounds i8, i8* %155, i64 %154\n  store i8 0, i8* %156, align 1, !tbaa !11\n  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %27) #7, !noalias !17\n  %157 = load i64, i64* %31, align 8, !tbaa !8, !alias.scope !17\n  %158 = and i64 %157, -2\n  %159 = icmp eq i64 %158, 4611686018427387902\n  br i1 %159, label %160, label %162\n\n160:                                              ; preds = %153\n  invoke void @_ZSt20__throw_length_errorPKc(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.3, i64 0, i64 0)) #8\n          to label %161 unwind label %166\n\n161:                                              ; preds = %160\n  unreachable\n\n162:                                              ; preds = %153\n  %163 = invoke nonnull align 8 dereferenceable(32) %\"class.std::__cxx11::basic_string\"* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %11, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i64 2)\n          to label %173 unwind label %164\n\n164:                                              ; preds = %162\n  %165 = landingpad { i8*, i32 }\n          cleanup\n  br label %168\n\n166:                                              ; preds = %160\n  %167 = landingpad { i8*, i32 }\n          cleanup\n  br label %168\n\n168:                                              ; preds = %166, %164\n  %169 = phi { i8*, i32 } [ %165, %164 ], [ %167, %166 ]\n  %170 = load i8*, i8** %29, align 8, !tbaa !12, !alias.scope !17\n  %171 = icmp eq i8* %170, %28\n  br i1 %171, label %207, label %172\n\n172:                                              ; preds = %168\n  call void @_ZdlPv(i8* %170) #7\n  br label %207\n\n173:                                              ; preds = %162\n  %174 = load i8*, i8** %29, align 8, !tbaa !12\n  %175 = icmp eq i8* %174, %28\n  br i1 %175, label %176, label %190\n\n176:                                              ; preds = %173\n  %177 = load i64, i64* %31, align 8, !tbaa !8\n  %178 = icmp eq i64 %177, 0\n  br i1 %178, label %185, label %179\n\n179:                                              ; preds = %176\n  %180 = load i8*, i8** %20, align 8, !tbaa !12\n  %181 = icmp eq i64 %177, 1\n  br i1 %181, label %182, label %184\n\n182:                                              ; preds = %179\n  %183 = load i8, i8* %28, align 8, !tbaa !11\n  store i8 %183, i8* %180, align 1, !tbaa !11\n  br label %185\n\n184:                                              ; preds = %179\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %180, i8* nonnull align 8 %28, i64 %177, i1 false) #7\n  br label %185\n\n185:                                              ; preds = %184, %182, %176\n  %186 = load i64, i64* %31, align 8, !tbaa !8\n  store i64 %186, i64* %21, align 8, !tbaa !8\n  %187 = load i8*, i8** %20, align 8, !tbaa !12\n  %188 = getelementptr inbounds i8, i8* %187, i64 %186\n  store i8 0, i8* %188, align 1, !tbaa !11\n  %189 = load i8*, i8** %29, align 8, !tbaa !12\n  br label %199\n\n190:                                              ; preds = %173\n  %191 = load i8*, i8** %20, align 8, !tbaa !12\n  %192 = icmp eq i8* %191, %19\n  %193 = load i64, i64* %32, align 8\n  store i8* %174, i8** %20, align 8, !tbaa !12\n  %194 = load <2 x i64>, <2 x i64>* %60, align 8, !tbaa !11\n  store <2 x i64> %194, <2 x i64>* %61, align 8, !tbaa !11\n  %195 = icmp eq i8* %191, null\n  %196 = or i1 %192, %195\n  br i1 %196, label %198, label %197\n\n197:                                              ; preds = %190\n  store i8* %191, i8** %29, align 8, !tbaa !12\n  store i64 %193, i64* %30, align 8, !tbaa !11\n  br label %199\n\n198:                                              ; preds = %190\n  store %union.anon* %25, %union.anon** %26, align 8, !tbaa !12\n  br label %199\n\n199:                                              ; preds = %185, %197, %198\n  %200 = phi i8* [ %189, %185 ], [ %191, %197 ], [ %28, %198 ]\n  store i64 0, i64* %31, align 8, !tbaa !8\n  store i8 0, i8* %200, align 1, !tbaa !11\n  %201 = load i8*, i8** %29, align 8, !tbaa !12\n  %202 = icmp eq i8* %201, %28\n  br i1 %202, label %204, label %203\n\n203:                                              ; preds = %199\n  call void @_ZdlPv(i8* %201) #7\n  br label %204\n\n204:                                              ; preds = %199, %203\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %24) #7\n  br label %271\n\n205:                                              ; preds = %144\n  %206 = landingpad { i8*, i32 }\n          cleanup\n  br label %207\n\n207:                                              ; preds = %168, %172, %205\n  %208 = phi { i8*, i32 } [ %206, %205 ], [ %169, %172 ], [ %169, %168 ]\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %24) #7\n  br label %572\n\n209:                                              ; preds = %79\n  %210 = icmp sgt i32 %72, 2\n  br i1 %210, label %211, label %271\n\n211:                                              ; preds = %209\n  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %41) #7\n  call void @llvm.experimental.noalias.scope.decl(metadata !20)\n  store %union.anon* %42, %union.anon** %43, align 8, !tbaa !3, !alias.scope !20\n  %212 = load i8*, i8** %20, align 8, !tbaa !12, !noalias !20\n  %213 = load i64, i64* %21, align 8, !tbaa !8, !noalias !20\n  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %44) #7, !noalias !20\n  store i64 %213, i64* %7, align 8, !tbaa !16, !noalias !20\n  %214 = icmp ugt i64 %213, 15\n  br i1 %214, label %215, label %219\n\n215:                                              ; preds = %211\n  %216 = invoke i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %12, i64* nonnull align 8 dereferenceable(8) %7, i64 0)\n          to label %217 unwind label %267\n\n217:                                              ; preds = %215\n  store i8* %216, i8** %46, align 8, !tbaa !12, !alias.scope !20\n  %218 = load i64, i64* %7, align 8, !tbaa !16, !noalias !20\n  store i64 %218, i64* %47, align 8, !tbaa !11, !alias.scope !20\n  br label %219\n\n219:                                              ; preds = %211, %217\n  %220 = phi i8* [ %216, %217 ], [ %45, %211 ]\n  switch i64 %213, label %223 [\n    i64 1, label %221\n    i64 0, label %224\n  ]\n\n221:                                              ; preds = %219\n  %222 = load i8, i8* %212, align 1, !tbaa !11\n  store i8 %222, i8* %220, align 1, !tbaa !11\n  br label %224\n\n223:                                              ; preds = %219\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %220, i8* align 1 %212, i64 %213, i1 false) #7\n  br label %224\n\n224:                                              ; preds = %223, %221, %219\n  %225 = load i64, i64* %7, align 8, !tbaa !16, !noalias !20\n  store i64 %225, i64* %48, align 8, !tbaa !8, !alias.scope !20\n  %226 = load i8*, i8** %46, align 8, !tbaa !12, !alias.scope !20\n  %227 = getelementptr inbounds i8, i8* %226, i64 %225\n  store i8 0, i8* %227, align 1, !tbaa !11\n  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %44) #7, !noalias !20\n  %228 = load i64, i64* %48, align 8, !tbaa !8, !alias.scope !20\n  %229 = invoke nonnull align 8 dereferenceable(32) %\"class.std::__cxx11::basic_string\"* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEmmmc(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %12, i64 %228, i64 0, i64 1, i8 signext 45)\n          to label %235 unwind label %230\n\n230:                                              ; preds = %224\n  %231 = landingpad { i8*, i32 }\n          cleanup\n  %232 = load i8*, i8** %46, align 8, !tbaa !12, !alias.scope !20\n  %233 = icmp eq i8* %232, %45\n  br i1 %233, label %269, label %234\n\n234:                                              ; preds = %230\n  call void @_ZdlPv(i8* %232) #7\n  br label %269\n\n235:                                              ; preds = %224\n  %236 = load i8*, i8** %46, align 8, !tbaa !12\n  %237 = icmp eq i8* %236, %45\n  br i1 %237, label %238, label %252\n\n238:                                              ; preds = %235\n  %239 = load i64, i64* %48, align 8, !tbaa !8\n  %240 = icmp eq i64 %239, 0\n  br i1 %240, label %247, label %241\n\n241:                                              ; preds = %238\n  %242 = load i8*, i8** %20, align 8, !tbaa !12\n  %243 = icmp eq i64 %239, 1\n  br i1 %243, label %244, label %246\n\n244:                                              ; preds = %241\n  %245 = load i8, i8* %45, align 8, !tbaa !11\n  store i8 %245, i8* %242, align 1, !tbaa !11\n  br label %247\n\n246:                                              ; preds = %241\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %242, i8* nonnull align 8 %45, i64 %239, i1 false) #7\n  br label %247\n\n247:                                              ; preds = %246, %244, %238\n  %248 = load i64, i64* %48, align 8, !tbaa !8\n  store i64 %248, i64* %21, align 8, !tbaa !8\n  %249 = load i8*, i8** %20, align 8, !tbaa !12\n  %250 = getelementptr inbounds i8, i8* %249, i64 %248\n  store i8 0, i8* %250, align 1, !tbaa !11\n  %251 = load i8*, i8** %46, align 8, !tbaa !12\n  br label %261\n\n252:                                              ; preds = %235\n  %253 = load i8*, i8** %20, align 8, !tbaa !12\n  %254 = icmp eq i8* %253, %19\n  %255 = load i64, i64* %32, align 8\n  store i8* %236, i8** %20, align 8, !tbaa !12\n  %256 = load <2 x i64>, <2 x i64>* %64, align 8, !tbaa !11\n  store <2 x i64> %256, <2 x i64>* %65, align 8, !tbaa !11\n  %257 = icmp eq i8* %253, null\n  %258 = or i1 %254, %257\n  br i1 %258, label %260, label %259\n\n259:                                              ; preds = %252\n  store i8* %253, i8** %46, align 8, !tbaa !12\n  store i64 %255, i64* %47, align 8, !tbaa !11\n  br label %261\n\n260:                                              ; preds = %252\n  store %union.anon* %42, %union.anon** %43, align 8, !tbaa !12\n  br label %261\n\n261:                                              ; preds = %247, %259, %260\n  %262 = phi i8* [ %251, %247 ], [ %253, %259 ], [ %45, %260 ]\n  store i64 0, i64* %48, align 8, !tbaa !8\n  store i8 0, i8* %262, align 1, !tbaa !11\n  %263 = load i8*, i8** %46, align 8, !tbaa !12\n  %264 = icmp eq i8* %263, %45\n  br i1 %264, label %266, label %265\n\n265:                                              ; preds = %261\n  call void @_ZdlPv(i8* %263) #7\n  br label %266\n\n266:                                              ; preds = %261, %265\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %41) #7\n  br label %271\n\n267:                                              ; preds = %215\n  %268 = landingpad { i8*, i32 }\n          cleanup\n  br label %269\n\n269:                                              ; preds = %230, %234, %267\n  %270 = phi { i8*, i32 } [ %268, %267 ], [ %231, %234 ], [ %231, %230 ]\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %41) #7\n  br label %572\n\n271:                                              ; preds = %204, %135, %266, %209\n  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %49) #7\n  %272 = load i8*, i8** %23, align 8, !tbaa !12\n  %273 = getelementptr inbounds i8, i8* %272, i64 %71\n  %274 = load i8, i8* %273, align 1, !tbaa !11\n  call void @llvm.experimental.noalias.scope.decl(metadata !23)\n  store %union.anon* %50, %union.anon** %51, align 8, !tbaa !3, !alias.scope !23\n  %275 = load i8*, i8** %20, align 8, !tbaa !12, !noalias !23\n  %276 = load i64, i64* %21, align 8, !tbaa !8, !noalias !23\n  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %52) #7, !noalias !23\n  store i64 %276, i64* %6, align 8, !tbaa !16, !noalias !23\n  %277 = icmp ugt i64 %276, 15\n  br i1 %277, label %278, label %282\n\n278:                                              ; preds = %271\n  %279 = invoke i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %13, i64* nonnull align 8 dereferenceable(8) %6, i64 0)\n          to label %280 unwind label %331\n\n280:                                              ; preds = %278\n  store i8* %279, i8** %54, align 8, !tbaa !12, !alias.scope !23\n  %281 = load i64, i64* %6, align 8, !tbaa !16, !noalias !23\n  store i64 %281, i64* %55, align 8, !tbaa !11, !alias.scope !23\n  br label %282\n\n282:                                              ; preds = %271, %280\n  %283 = phi i8* [ %279, %280 ], [ %53, %271 ]\n  switch i64 %276, label %286 [\n    i64 1, label %284\n    i64 0, label %287\n  ]\n\n284:                                              ; preds = %282\n  %285 = load i8, i8* %275, align 1, !tbaa !11\n  store i8 %285, i8* %283, align 1, !tbaa !11\n  br label %287\n\n286:                                              ; preds = %282\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %283, i8* align 1 %275, i64 %276, i1 false) #7\n  br label %287\n\n287:                                              ; preds = %286, %284, %282\n  %288 = load i64, i64* %6, align 8, !tbaa !16, !noalias !23\n  store i64 %288, i64* %56, align 8, !tbaa !8, !alias.scope !23\n  %289 = load i8*, i8** %54, align 8, !tbaa !12, !alias.scope !23\n  %290 = getelementptr inbounds i8, i8* %289, i64 %288\n  store i8 0, i8* %290, align 1, !tbaa !11\n  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %52) #7, !noalias !23\n  %291 = load i64, i64* %56, align 8, !tbaa !8, !alias.scope !23\n  %292 = invoke nonnull align 8 dereferenceable(32) %\"class.std::__cxx11::basic_string\"* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEmmmc(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %13, i64 %291, i64 0, i64 1, i8 signext %274)\n          to label %298 unwind label %293\n\n293:                                              ; preds = %287\n  %294 = landingpad { i8*, i32 }\n          cleanup\n  %295 = load i8*, i8** %54, align 8, !tbaa !12, !alias.scope !23\n  %296 = icmp eq i8* %295, %53\n  br i1 %296, label %333, label %297\n\n297:                                              ; preds = %293\n  call void @_ZdlPv(i8* %295) #7\n  br label %333\n\n298:                                              ; preds = %287\n  %299 = load i8*, i8** %54, align 8, !tbaa !12\n  %300 = icmp eq i8* %299, %53\n  br i1 %300, label %301, label %315\n\n301:                                              ; preds = %298\n  %302 = load i64, i64* %56, align 8, !tbaa !8\n  %303 = icmp eq i64 %302, 0\n  br i1 %303, label %310, label %304\n\n304:                                              ; preds = %301\n  %305 = load i8*, i8** %20, align 8, !tbaa !12\n  %306 = icmp eq i64 %302, 1\n  br i1 %306, label %307, label %309\n\n307:                                              ; preds = %304\n  %308 = load i8, i8* %53, align 8, !tbaa !11\n  store i8 %308, i8* %305, align 1, !tbaa !11\n  br label %310\n\n309:                                              ; preds = %304\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %305, i8* nonnull align 8 %53, i64 %302, i1 false) #7\n  br label %310\n\n310:                                              ; preds = %309, %307, %301\n  %311 = load i64, i64* %56, align 8, !tbaa !8\n  store i64 %311, i64* %21, align 8, !tbaa !8\n  %312 = load i8*, i8** %20, align 8, !tbaa !12\n  %313 = getelementptr inbounds i8, i8* %312, i64 %311\n  store i8 0, i8* %313, align 1, !tbaa !11\n  %314 = load i8*, i8** %54, align 8, !tbaa !12\n  br label %324\n\n315:                                              ; preds = %298\n  %316 = load i8*, i8** %20, align 8, !tbaa !12\n  %317 = icmp eq i8* %316, %19\n  %318 = load i64, i64* %32, align 8\n  store i8* %299, i8** %20, align 8, !tbaa !12\n  %319 = load <2 x i64>, <2 x i64>* %66, align 8, !tbaa !11\n  store <2 x i64> %319, <2 x i64>* %67, align 8, !tbaa !11\n  %320 = icmp eq i8* %316, null\n  %321 = or i1 %317, %320\n  br i1 %321, label %323, label %322\n\n322:                                              ; preds = %315\n  store i8* %316, i8** %54, align 8, !tbaa !12\n  store i64 %318, i64* %55, align 8, !tbaa !11\n  br label %324\n\n323:                                              ; preds = %315\n  store %union.anon* %50, %union.anon** %51, align 8, !tbaa !12\n  br label %324\n\n324:                                              ; preds = %310, %322, %323\n  %325 = phi i8* [ %314, %310 ], [ %316, %322 ], [ %53, %323 ]\n  store i64 0, i64* %56, align 8, !tbaa !8\n  store i8 0, i8* %325, align 1, !tbaa !11\n  %326 = load i8*, i8** %54, align 8, !tbaa !12\n  %327 = icmp eq i8* %326, %53\n  br i1 %327, label %329, label %328\n\n328:                                              ; preds = %324\n  call void @_ZdlPv(i8* %326) #7\n  br label %329\n\n329:                                              ; preds = %324, %328\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %49) #7\n  %330 = load i64, i64* %22, align 8, !tbaa !8\n  br label %335\n\n331:                                              ; preds = %278\n  %332 = landingpad { i8*, i32 }\n          cleanup\n  br label %333\n\n333:                                              ; preds = %293, %297, %331\n  %334 = phi { i8*, i32 } [ %332, %331 ], [ %294, %297 ], [ %294, %293 ]\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %49) #7\n  br label %572\n\n335:                                              ; preds = %77, %329\n  %336 = phi i64 [ %70, %77 ], [ %330, %329 ]\n  %337 = phi i32 [ %78, %77 ], [ 0, %329 ]\n  %338 = add nuw i64 %71, 1\n  %339 = icmp ugt i64 %336, %338\n  br i1 %339, label %69, label %68, !llvm.loop !26\n\n340:                                              ; preds = %68\n  %341 = bitcast %\"class.std::__cxx11::basic_string\"* %14 to i8*\n  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %341) #7\n  call void @llvm.experimental.noalias.scope.decl(metadata !28)\n  %342 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %14, i64 0, i32 2\n  %343 = bitcast %\"class.std::__cxx11::basic_string\"* %14 to %union.anon**\n  store %union.anon* %342, %union.anon** %343, align 8, !tbaa !3, !alias.scope !28\n  %344 = load i8*, i8** %20, align 8, !tbaa !12, !noalias !28\n  %345 = load i64, i64* %21, align 8, !tbaa !8, !noalias !28\n  %346 = bitcast i64* %5 to i8*\n  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %346) #7, !noalias !28\n  store i64 %345, i64* %5, align 8, !tbaa !16, !noalias !28\n  %347 = icmp ugt i64 %345, 15\n  br i1 %347, label %350, label %348\n\n348:                                              ; preds = %340\n  %349 = bitcast %union.anon* %342 to i8*\n  br label %356\n\n350:                                              ; preds = %340\n  %351 = invoke i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %14, i64* nonnull align 8 dereferenceable(8) %5, i64 0)\n          to label %352 unwind label %411\n\n352:                                              ; preds = %350\n  %353 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %14, i64 0, i32 0, i32 0\n  store i8* %351, i8** %353, align 8, !tbaa !12, !alias.scope !28\n  %354 = load i64, i64* %5, align 8, !tbaa !16, !noalias !28\n  %355 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %14, i64 0, i32 2, i32 0\n  store i64 %354, i64* %355, align 8, !tbaa !11, !alias.scope !28\n  br label %356\n\n356:                                              ; preds = %352, %348\n  %357 = phi i8* [ %349, %348 ], [ %351, %352 ]\n  switch i64 %345, label %360 [\n    i64 1, label %358\n    i64 0, label %361\n  ]\n\n358:                                              ; preds = %356\n  %359 = load i8, i8* %344, align 1, !tbaa !11\n  store i8 %359, i8* %357, align 1, !tbaa !11\n  br label %361\n\n360:                                              ; preds = %356\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %357, i8* align 1 %344, i64 %345, i1 false) #7\n  br label %361\n\n361:                                              ; preds = %360, %358, %356\n  %362 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %14, i64 0, i32 0, i32 0\n  %363 = load i64, i64* %5, align 8, !tbaa !16, !noalias !28\n  %364 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %14, i64 0, i32 1\n  store i64 %363, i64* %364, align 8, !tbaa !8, !alias.scope !28\n  %365 = load i8*, i8** %362, align 8, !tbaa !12, !alias.scope !28\n  %366 = getelementptr inbounds i8, i8* %365, i64 %363\n  store i8 0, i8* %366, align 1, !tbaa !11\n  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %346) #7, !noalias !28\n  %367 = load i64, i64* %364, align 8, !tbaa !8, !alias.scope !28\n  %368 = invoke nonnull align 8 dereferenceable(32) %\"class.std::__cxx11::basic_string\"* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEmmmc(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %14, i64 %367, i64 0, i64 1, i8 signext 95)\n          to label %375 unwind label %369\n\n369:                                              ; preds = %361\n  %370 = landingpad { i8*, i32 }\n          cleanup\n  %371 = load i8*, i8** %362, align 8, !tbaa !12, !alias.scope !28\n  %372 = bitcast %union.anon* %342 to i8*\n  %373 = icmp eq i8* %371, %372\n  br i1 %373, label %413, label %374\n\n374:                                              ; preds = %369\n  call void @_ZdlPv(i8* %371) #7\n  br label %413\n\n375:                                              ; preds = %361\n  %376 = load i8*, i8** %362, align 8, !tbaa !12\n  %377 = bitcast %union.anon* %342 to i8*\n  %378 = icmp eq i8* %376, %377\n  br i1 %378, label %379, label %393\n\n379:                                              ; preds = %375\n  %380 = load i64, i64* %364, align 8, !tbaa !8\n  %381 = icmp eq i64 %380, 0\n  br i1 %381, label %388, label %382\n\n382:                                              ; preds = %379\n  %383 = load i8*, i8** %20, align 8, !tbaa !12\n  %384 = icmp eq i64 %380, 1\n  br i1 %384, label %385, label %387\n\n385:                                              ; preds = %382\n  %386 = load i8, i8* %377, align 8, !tbaa !11\n  store i8 %386, i8* %383, align 1, !tbaa !11\n  br label %388\n\n387:                                              ; preds = %382\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %383, i8* nonnull align 8 %377, i64 %380, i1 false) #7\n  br label %388\n\n388:                                              ; preds = %387, %385, %379\n  %389 = load i64, i64* %364, align 8, !tbaa !8\n  store i64 %389, i64* %21, align 8, !tbaa !8\n  %390 = load i8*, i8** %20, align 8, !tbaa !12\n  %391 = getelementptr inbounds i8, i8* %390, i64 %389\n  store i8 0, i8* %391, align 1, !tbaa !11\n  %392 = load i8*, i8** %362, align 8, !tbaa !12\n  br label %405\n\n393:                                              ; preds = %375\n  %394 = load i8*, i8** %20, align 8, !tbaa !12\n  %395 = icmp eq i8* %394, %19\n  %396 = load i64, i64* %32, align 8\n  store i8* %376, i8** %20, align 8, !tbaa !12\n  %397 = bitcast i64* %364 to <2 x i64>*\n  %398 = load <2 x i64>, <2 x i64>* %397, align 8, !tbaa !11\n  %399 = bitcast i64* %21 to <2 x i64>*\n  store <2 x i64> %398, <2 x i64>* %399, align 8, !tbaa !11\n  %400 = icmp eq i8* %394, null\n  %401 = or i1 %395, %400\n  br i1 %401, label %404, label %402\n\n402:                                              ; preds = %393\n  store i8* %394, i8** %362, align 8, !tbaa !12\n  %403 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %14, i64 0, i32 2, i32 0\n  store i64 %396, i64* %403, align 8, !tbaa !11\n  br label %405\n\n404:                                              ; preds = %393\n  store %union.anon* %342, %union.anon** %343, align 8, !tbaa !12\n  br label %405\n\n405:                                              ; preds = %388, %402, %404\n  %406 = phi i8* [ %392, %388 ], [ %394, %402 ], [ %377, %404 ]\n  store i64 0, i64* %364, align 8, !tbaa !8\n  store i8 0, i8* %406, align 1, !tbaa !11\n  %407 = load i8*, i8** %362, align 8, !tbaa !12\n  %408 = icmp eq i8* %407, %377\n  br i1 %408, label %410, label %409\n\n409:                                              ; preds = %405\n  call void @_ZdlPv(i8* %407) #7\n  br label %410\n\n410:                                              ; preds = %405, %409\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %341) #7\n  br label %577\n\n411:                                              ; preds = %350\n  %412 = landingpad { i8*, i32 }\n          cleanup\n  br label %413\n\n413:                                              ; preds = %369, %374, %411\n  %414 = phi { i8*, i32 } [ %412, %411 ], [ %370, %374 ], [ %370, %369 ]\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %341) #7\n  br label %572\n\n415:                                              ; preds = %68\n  %416 = bitcast %\"class.std::__cxx11::basic_string\"* %15 to i8*\n  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %416) #7\n  call void @llvm.experimental.noalias.scope.decl(metadata !31)\n  %417 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %15, i64 0, i32 2\n  %418 = bitcast %\"class.std::__cxx11::basic_string\"* %15 to %union.anon**\n  store %union.anon* %417, %union.anon** %418, align 8, !tbaa !3, !alias.scope !31\n  %419 = load i8*, i8** %20, align 8, !tbaa !12, !noalias !31\n  %420 = load i64, i64* %21, align 8, !tbaa !8, !noalias !31\n  %421 = bitcast i64* %4 to i8*\n  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %421) #7, !noalias !31\n  store i64 %420, i64* %4, align 8, !tbaa !16, !noalias !31\n  %422 = icmp ugt i64 %420, 15\n  br i1 %422, label %425, label %423\n\n423:                                              ; preds = %415\n  %424 = bitcast %union.anon* %417 to i8*\n  br label %431\n\n425:                                              ; preds = %415\n  %426 = invoke i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %15, i64* nonnull align 8 dereferenceable(8) %4, i64 0)\n          to label %427 unwind label %491\n\n427:                                              ; preds = %425\n  %428 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %15, i64 0, i32 0, i32 0\n  store i8* %426, i8** %428, align 8, !tbaa !12, !alias.scope !31\n  %429 = load i64, i64* %4, align 8, !tbaa !16, !noalias !31\n  %430 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %15, i64 0, i32 2, i32 0\n  store i64 %429, i64* %430, align 8, !tbaa !11, !alias.scope !31\n  br label %431\n\n431:                                              ; preds = %427, %423\n  %432 = phi i8* [ %424, %423 ], [ %426, %427 ]\n  switch i64 %420, label %435 [\n    i64 1, label %433\n    i64 0, label %436\n  ]\n\n433:                                              ; preds = %431\n  %434 = load i8, i8* %419, align 1, !tbaa !11\n  store i8 %434, i8* %432, align 1, !tbaa !11\n  br label %436\n\n435:                                              ; preds = %431\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %432, i8* align 1 %419, i64 %420, i1 false) #7\n  br label %436\n\n436:                                              ; preds = %435, %433, %431\n  %437 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %15, i64 0, i32 0, i32 0\n  %438 = load i64, i64* %4, align 8, !tbaa !16, !noalias !31\n  %439 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %15, i64 0, i32 1\n  store i64 %438, i64* %439, align 8, !tbaa !8, !alias.scope !31\n  %440 = load i8*, i8** %437, align 8, !tbaa !12, !alias.scope !31\n  %441 = getelementptr inbounds i8, i8* %440, i64 %438\n  store i8 0, i8* %441, align 1, !tbaa !11\n  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %421) #7, !noalias !31\n  %442 = load i64, i64* %439, align 8, !tbaa !8, !alias.scope !31\n  %443 = and i64 %442, -2\n  %444 = icmp eq i64 %443, 4611686018427387902\n  br i1 %444, label %445, label %447\n\n445:                                              ; preds = %436\n  invoke void @_ZSt20__throw_length_errorPKc(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.3, i64 0, i64 0)) #8\n          to label %446 unwind label %449\n\n446:                                              ; preds = %445\n  unreachable\n\n447:                                              ; preds = %436\n  %448 = invoke nonnull align 8 dereferenceable(32) %\"class.std::__cxx11::basic_string\"* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %15, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i64 2)\n          to label %455 unwind label %449\n\n449:                                              ; preds = %447, %445\n  %450 = landingpad { i8*, i32 }\n          cleanup\n  %451 = load i8*, i8** %437, align 8, !tbaa !12, !alias.scope !31\n  %452 = bitcast %union.anon* %417 to i8*\n  %453 = icmp eq i8* %451, %452\n  br i1 %453, label %493, label %454\n\n454:                                              ; preds = %449\n  call void @_ZdlPv(i8* %451) #7\n  br label %493\n\n455:                                              ; preds = %447\n  %456 = load i8*, i8** %437, align 8, !tbaa !12\n  %457 = bitcast %union.anon* %417 to i8*\n  %458 = icmp eq i8* %456, %457\n  br i1 %458, label %459, label %473\n\n459:                                              ; preds = %455\n  %460 = load i64, i64* %439, align 8, !tbaa !8\n  %461 = icmp eq i64 %460, 0\n  br i1 %461, label %468, label %462\n\n462:                                              ; preds = %459\n  %463 = load i8*, i8** %20, align 8, !tbaa !12\n  %464 = icmp eq i64 %460, 1\n  br i1 %464, label %465, label %467\n\n465:                                              ; preds = %462\n  %466 = load i8, i8* %457, align 8, !tbaa !11\n  store i8 %466, i8* %463, align 1, !tbaa !11\n  br label %468\n\n467:                                              ; preds = %462\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %463, i8* nonnull align 8 %457, i64 %460, i1 false) #7\n  br label %468\n\n468:                                              ; preds = %467, %465, %459\n  %469 = load i64, i64* %439, align 8, !tbaa !8\n  store i64 %469, i64* %21, align 8, !tbaa !8\n  %470 = load i8*, i8** %20, align 8, !tbaa !12\n  %471 = getelementptr inbounds i8, i8* %470, i64 %469\n  store i8 0, i8* %471, align 1, !tbaa !11\n  %472 = load i8*, i8** %437, align 8, !tbaa !12\n  br label %485\n\n473:                                              ; preds = %455\n  %474 = load i8*, i8** %20, align 8, !tbaa !12\n  %475 = icmp eq i8* %474, %19\n  %476 = load i64, i64* %32, align 8\n  store i8* %456, i8** %20, align 8, !tbaa !12\n  %477 = bitcast i64* %439 to <2 x i64>*\n  %478 = load <2 x i64>, <2 x i64>* %477, align 8, !tbaa !11\n  %479 = bitcast i64* %21 to <2 x i64>*\n  store <2 x i64> %478, <2 x i64>* %479, align 8, !tbaa !11\n  %480 = icmp eq i8* %474, null\n  %481 = or i1 %475, %480\n  br i1 %481, label %484, label %482\n\n482:                                              ; preds = %473\n  store i8* %474, i8** %437, align 8, !tbaa !12\n  %483 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %15, i64 0, i32 2, i32 0\n  store i64 %476, i64* %483, align 8, !tbaa !11\n  br label %485\n\n484:                                              ; preds = %473\n  store %union.anon* %417, %union.anon** %418, align 8, !tbaa !12\n  br label %485\n\n485:                                              ; preds = %468, %482, %484\n  %486 = phi i8* [ %472, %468 ], [ %474, %482 ], [ %457, %484 ]\n  store i64 0, i64* %439, align 8, !tbaa !8\n  store i8 0, i8* %486, align 1, !tbaa !11\n  %487 = load i8*, i8** %437, align 8, !tbaa !12\n  %488 = icmp eq i8* %487, %457\n  br i1 %488, label %490, label %489\n\n489:                                              ; preds = %485\n  call void @_ZdlPv(i8* %487) #7\n  br label %490\n\n490:                                              ; preds = %485, %489\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %416) #7\n  br label %577\n\n491:                                              ; preds = %425\n  %492 = landingpad { i8*, i32 }\n          cleanup\n  br label %493\n\n493:                                              ; preds = %449, %454, %491\n  %494 = phi { i8*, i32 } [ %492, %491 ], [ %450, %454 ], [ %450, %449 ]\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %416) #7\n  br label %572\n\n495:                                              ; preds = %68\n  %496 = icmp sgt i32 %337, 2\n  br i1 %496, label %497, label %577\n\n497:                                              ; preds = %495\n  %498 = bitcast %\"class.std::__cxx11::basic_string\"* %16 to i8*\n  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %498) #7\n  call void @llvm.experimental.noalias.scope.decl(metadata !34)\n  %499 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %16, i64 0, i32 2\n  %500 = bitcast %\"class.std::__cxx11::basic_string\"* %16 to %union.anon**\n  store %union.anon* %499, %union.anon** %500, align 8, !tbaa !3, !alias.scope !34\n  %501 = load i8*, i8** %20, align 8, !tbaa !12, !noalias !34\n  %502 = load i64, i64* %21, align 8, !tbaa !8, !noalias !34\n  %503 = bitcast i64* %3 to i8*\n  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %503) #7, !noalias !34\n  store i64 %502, i64* %3, align 8, !tbaa !16, !noalias !34\n  %504 = icmp ugt i64 %502, 15\n  br i1 %504, label %507, label %505\n\n505:                                              ; preds = %497\n  %506 = bitcast %union.anon* %499 to i8*\n  br label %513\n\n507:                                              ; preds = %497\n  %508 = invoke i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %16, i64* nonnull align 8 dereferenceable(8) %3, i64 0)\n          to label %509 unwind label %568\n\n509:                                              ; preds = %507\n  %510 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %16, i64 0, i32 0, i32 0\n  store i8* %508, i8** %510, align 8, !tbaa !12, !alias.scope !34\n  %511 = load i64, i64* %3, align 8, !tbaa !16, !noalias !34\n  %512 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %16, i64 0, i32 2, i32 0\n  store i64 %511, i64* %512, align 8, !tbaa !11, !alias.scope !34\n  br label %513\n\n513:                                              ; preds = %509, %505\n  %514 = phi i8* [ %506, %505 ], [ %508, %509 ]\n  switch i64 %502, label %517 [\n    i64 1, label %515\n    i64 0, label %518\n  ]\n\n515:                                              ; preds = %513\n  %516 = load i8, i8* %501, align 1, !tbaa !11\n  store i8 %516, i8* %514, align 1, !tbaa !11\n  br label %518\n\n517:                                              ; preds = %513\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %514, i8* align 1 %501, i64 %502, i1 false) #7\n  br label %518\n\n518:                                              ; preds = %517, %515, %513\n  %519 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %16, i64 0, i32 0, i32 0\n  %520 = load i64, i64* %3, align 8, !tbaa !16, !noalias !34\n  %521 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %16, i64 0, i32 1\n  store i64 %520, i64* %521, align 8, !tbaa !8, !alias.scope !34\n  %522 = load i8*, i8** %519, align 8, !tbaa !12, !alias.scope !34\n  %523 = getelementptr inbounds i8, i8* %522, i64 %520\n  store i8 0, i8* %523, align 1, !tbaa !11\n  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %503) #7, !noalias !34\n  %524 = load i64, i64* %521, align 8, !tbaa !8, !alias.scope !34\n  %525 = invoke nonnull align 8 dereferenceable(32) %\"class.std::__cxx11::basic_string\"* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEmmmc(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %16, i64 %524, i64 0, i64 1, i8 signext 45)\n          to label %532 unwind label %526\n\n526:                                              ; preds = %518\n  %527 = landingpad { i8*, i32 }\n          cleanup\n  %528 = load i8*, i8** %519, align 8, !tbaa !12, !alias.scope !34\n  %529 = bitcast %union.anon* %499 to i8*\n  %530 = icmp eq i8* %528, %529\n  br i1 %530, label %570, label %531\n\n531:                                              ; preds = %526\n  call void @_ZdlPv(i8* %528) #7\n  br label %570\n\n532:                                              ; preds = %518\n  %533 = load i8*, i8** %519, align 8, !tbaa !12\n  %534 = bitcast %union.anon* %499 to i8*\n  %535 = icmp eq i8* %533, %534\n  br i1 %535, label %536, label %550\n\n536:                                              ; preds = %532\n  %537 = load i64, i64* %521, align 8, !tbaa !8\n  %538 = icmp eq i64 %537, 0\n  br i1 %538, label %545, label %539\n\n539:                                              ; preds = %536\n  %540 = load i8*, i8** %20, align 8, !tbaa !12\n  %541 = icmp eq i64 %537, 1\n  br i1 %541, label %542, label %544\n\n542:                                              ; preds = %539\n  %543 = load i8, i8* %534, align 8, !tbaa !11\n  store i8 %543, i8* %540, align 1, !tbaa !11\n  br label %545\n\n544:                                              ; preds = %539\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %540, i8* nonnull align 8 %534, i64 %537, i1 false) #7\n  br label %545\n\n545:                                              ; preds = %544, %542, %536\n  %546 = load i64, i64* %521, align 8, !tbaa !8\n  store i64 %546, i64* %21, align 8, !tbaa !8\n  %547 = load i8*, i8** %20, align 8, !tbaa !12\n  %548 = getelementptr inbounds i8, i8* %547, i64 %546\n  store i8 0, i8* %548, align 1, !tbaa !11\n  %549 = load i8*, i8** %519, align 8, !tbaa !12\n  br label %562\n\n550:                                              ; preds = %532\n  %551 = load i8*, i8** %20, align 8, !tbaa !12\n  %552 = icmp eq i8* %551, %19\n  %553 = load i64, i64* %32, align 8\n  store i8* %533, i8** %20, align 8, !tbaa !12\n  %554 = bitcast i64* %521 to <2 x i64>*\n  %555 = load <2 x i64>, <2 x i64>* %554, align 8, !tbaa !11\n  %556 = bitcast i64* %21 to <2 x i64>*\n  store <2 x i64> %555, <2 x i64>* %556, align 8, !tbaa !11\n  %557 = icmp eq i8* %551, null\n  %558 = or i1 %552, %557\n  br i1 %558, label %561, label %559\n\n559:                                              ; preds = %550\n  store i8* %551, i8** %519, align 8, !tbaa !12\n  %560 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %16, i64 0, i32 2, i32 0\n  store i64 %553, i64* %560, align 8, !tbaa !11\n  br label %562\n\n561:                                              ; preds = %550\n  store %union.anon* %499, %union.anon** %500, align 8, !tbaa !12\n  br label %562\n\n562:                                              ; preds = %545, %559, %561\n  %563 = phi i8* [ %549, %545 ], [ %551, %559 ], [ %534, %561 ]\n  store i64 0, i64* %521, align 8, !tbaa !8\n  store i8 0, i8* %563, align 1, !tbaa !11\n  %564 = load i8*, i8** %519, align 8, !tbaa !12\n  %565 = icmp eq i8* %564, %534\n  br i1 %565, label %567, label %566\n\n566:                                              ; preds = %562\n  call void @_ZdlPv(i8* %564) #7\n  br label %567\n\n567:                                              ; preds = %562, %566\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %498) #7\n  br label %577\n\n568:                                              ; preds = %507\n  %569 = landingpad { i8*, i32 }\n          cleanup\n  br label %570\n\n570:                                              ; preds = %526, %531, %568\n  %571 = phi { i8*, i32 } [ %569, %568 ], [ %527, %531 ], [ %527, %526 ]\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %498) #7\n  br label %572\n\n572:                                              ; preds = %138, %207, %269, %333, %570, %493, %413\n  %573 = phi { i8*, i32 } [ %571, %570 ], [ %494, %493 ], [ %414, %413 ], [ %334, %333 ], [ %270, %269 ], [ %208, %207 ], [ %139, %138 ]\n  %574 = load i8*, i8** %20, align 8, !tbaa !12\n  %575 = icmp eq i8* %574, %19\n  br i1 %575, label %578, label %576\n\n576:                                              ; preds = %572\n  call void @_ZdlPv(i8* %574) #7\n  br label %578\n\n577:                                              ; preds = %2, %490, %410, %495, %567\n  ret void\n\n578:                                              ; preds = %576, %572\n  resume { i8*, i32 } %573\n}\n\n; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn\ndeclare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1\n\ndeclare dso_local i32 @__gxx_personality_v0(...)\n\n; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn\ndeclare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1\n\n; Function Attrs: nobuiltin nounwind\ndeclare dso_local void @_ZdlPv(i8*) local_unnamed_addr #2\n\ndeclare dso_local i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32), i64* nonnull align 8 dereferenceable(8), i64) local_unnamed_addr #3\n\n; Function Attrs: argmemonly mustprogress nofree nounwind willreturn\ndeclare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #4\n\ndeclare dso_local nonnull align 8 dereferenceable(32) %\"class.std::__cxx11::basic_string\"* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEmmmc(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32), i64, i64, i64, i8 signext) local_unnamed_addr #3\n\ndeclare dso_local nonnull align 8 dereferenceable(32) %\"class.std::__cxx11::basic_string\"* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32), i8*, i64) local_unnamed_addr #3\n\n; Function Attrs: noreturn\ndeclare dso_local void @_ZSt20__throw_length_errorPKc(i8*) local_unnamed_addr #5\n\n; Function Attrs: inaccessiblememonly nofree nosync nounwind willreturn\ndeclare void @llvm.experimental.noalias.scope.decl(metadata) #6\n\nattributes #0 = { uwtable \"frame-pointer\"=\"none\" \"min-legal-vector-width\"=\"0\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #1 = { argmemonly mustprogress nofree nosync nounwind willreturn }\nattributes #2 = { nobuiltin nounwind \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #3 = { \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #4 = { argmemonly mustprogress nofree nounwind willreturn }\nattributes #5 = { noreturn \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #6 = { inaccessiblememonly nofree nosync nounwind willreturn }\nattributes #7 = { nounwind }\nattributes #8 = { noreturn }\n\n!llvm.module.flags = !{!0, !1}\n!llvm.ident = !{!2}\n\n!0 = !{i32 1, !\"wchar_size\", i32 4}\n!1 = !{i32 7, !\"uwtable\", i32 1}\n!2 = !{!\"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)\"}\n!3 = !{!4, !5, i64 0}\n!4 = !{!\"_ZTSNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderE\", !5, i64 0}\n!5 = !{!\"any pointer\", !6, i64 0}\n!6 = !{!\"omnipotent char\", !7, i64 0}\n!7 = !{!\"Simple C++ TBAA\"}\n!8 = !{!9, !10, i64 8}\n!9 = !{!\"_ZTSNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE\", !4, i64 0, !10, i64 8, !6, i64 16}\n!10 = !{!\"long\", !6, i64 0}\n!11 = !{!6, !6, i64 0}\n!12 = !{!9, !5, i64 0}\n!13 = !{!14}\n!14 = distinct !{!14, !15, !\"_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_S5_: argument 0\"}\n!15 = distinct !{!15, !\"_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_S5_\"}\n!16 = !{!10, !10, i64 0}\n!17 = !{!18}\n!18 = distinct !{!18, !19, !\"_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_: argument 0\"}\n!19 = distinct !{!19, !\"_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_\"}\n!20 = !{!21}\n!21 = distinct !{!21, !22, !\"_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_S5_: argument 0\"}\n!22 = distinct !{!22, !\"_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_S5_\"}\n!23 = !{!24}\n!24 = distinct !{!24, !25, !\"_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_S5_: argument 0\"}\n!25 = distinct !{!25, !\"_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_S5_\"}\n!26 = distinct !{!26, !27}\n!27 = !{!\"llvm.loop.mustprogress\"}\n!28 = !{!29}\n!29 = distinct !{!29, !30, !\"_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_S5_: argument 0\"}\n!30 = distinct !{!30, !\"_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_S5_\"}\n!31 = !{!32}\n!32 = distinct !{!32, !33, !\"_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_: argument 0\"}\n!33 = distinct !{!33, !\"_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_\"}\n!34 = !{!35}\n!35 = distinct !{!35, !36, !\"_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_S5_: argument 0\"}\n!36 = distinct !{!36, !\"_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_S5_\"}\n", "target": "This is the targeted source code:\n/*\nGiven a string text, replace all spaces in it with underscores, \nand if a string has more than 2 consecutive spaces, \nthen replace all consecutive spaces with - \n\nfix_spaces(\"Example\") == \"Example\"\nfix_spaces(\"Example 1\") == \"Example_1\"\nfix_spaces(\" Example 2\") == \"_Example_2\"\nfix_spaces(\" Example   3\") == \"_Example-3\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring fix_spaces(string text){\n\n    string out=\"\";\n    int spacelen=0;\n    for (int i=0;i<text.length();i++)\n    if (text[i]==' ') spacelen+=1;\n    else\n    {\n        if (spacelen==1) out=out+'_';\n        if (spacelen==2) out=out+\"__\";\n        if (spacelen>2) out=out+'-';\n        spacelen=0;\n        out=out+text[i];\n    }\n    if (spacelen==1) out=out+'_';\n    if (spacelen==2) out=out+\"__\";\n    if (spacelen>2) out=out+'-';\n    return out;\n}\n"}
{"input": "Convert this to C++:\n; ModuleID = '../../Human_xBenchmarks_164/CPP_141/CPP_141.cpp'\nsource_filename = \"../../Human_xBenchmarks_164/CPP_141/CPP_141.cpp\"\ntarget datalayout = \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\ntarget triple = \"x86_64-unknown-linux-gnu\"\n\n%\"class.std::__cxx11::basic_string\" = type { %\"struct.std::__cxx11::basic_string<char>::_Alloc_hider\", i64, %union.anon }\n%\"struct.std::__cxx11::basic_string<char>::_Alloc_hider\" = type { i8* }\n%union.anon = type { i64, [8 x i8] }\n%\"class.std::allocator\" = type { i8 }\n\n@.str = private unnamed_addr constant [3 x i8] c\"No\\00\", align 1\n@.str.1 = private unnamed_addr constant [5 x i8] c\".txt\\00\", align 1\n@.str.2 = private unnamed_addr constant [5 x i8] c\".exe\\00\", align 1\n@.str.3 = private unnamed_addr constant [5 x i8] c\".dll\\00\", align 1\n@.str.4 = private unnamed_addr constant [4 x i8] c\"Yes\\00\", align 1\n\n; Function Attrs: uwtable\ndefine dso_local void @_Z15file_name_checkNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE(%\"class.std::__cxx11::basic_string\"* noalias sret(%\"class.std::__cxx11::basic_string\") align 8 %0, %\"class.std::__cxx11::basic_string\"* nocapture readonly %1) local_unnamed_addr #0 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {\n  %3 = alloca %\"class.std::__cxx11::basic_string\", align 8\n  %4 = alloca %\"class.std::allocator\", align 1\n  %5 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %1, i64 0, i32 1\n  %6 = load i64, i64* %5, align 8, !tbaa !3\n  %7 = icmp ult i64 %6, 5\n  br i1 %7, label %8, label %15\n\n8:                                                ; preds = %2\n  %9 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 2\n  %10 = bitcast %\"class.std::__cxx11::basic_string\"* %0 to %union.anon**\n  store %union.anon* %9, %union.anon** %10, align 8, !tbaa !10\n  %11 = bitcast %union.anon* %9 to i16*\n  store i16 28494, i16* %11, align 8\n  %12 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 1\n  store i64 2, i64* %12, align 8, !tbaa !3\n  %13 = bitcast %union.anon* %9 to i8*\n  %14 = getelementptr inbounds i8, i8* %13, i64 2\n  store i8 0, i8* %14, align 2, !tbaa !11\n  br label %143\n\n15:                                               ; preds = %2\n  %16 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %1, i64 0, i32 0, i32 0\n  %17 = load i8*, i8** %16, align 8, !tbaa !12\n  %18 = load i8, i8* %17, align 1, !tbaa !11\n  %19 = icmp slt i8 %18, 65\n  br i1 %19, label %21, label %20\n\n20:                                               ; preds = %15\n  switch i8 %18, label %28 [\n    i8 127, label %21\n    i8 126, label %21\n    i8 125, label %21\n    i8 124, label %21\n    i8 123, label %21\n    i8 96, label %21\n    i8 95, label %21\n    i8 94, label %21\n    i8 93, label %21\n    i8 92, label %21\n    i8 91, label %21\n  ]\n\n21:                                               ; preds = %20, %20, %20, %20, %20, %20, %20, %20, %20, %20, %20, %15\n  %22 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 2\n  %23 = bitcast %\"class.std::__cxx11::basic_string\"* %0 to %union.anon**\n  store %union.anon* %22, %union.anon** %23, align 8, !tbaa !10\n  %24 = bitcast %union.anon* %22 to i16*\n  store i16 28494, i16* %24, align 8\n  %25 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 1\n  store i64 2, i64* %25, align 8, !tbaa !3\n  %26 = bitcast %union.anon* %22 to i8*\n  %27 = getelementptr inbounds i8, i8* %26, i64 2\n  store i8 0, i8* %27, align 2, !tbaa !11\n  br label %143\n\n28:                                               ; preds = %20\n  %29 = bitcast %\"class.std::__cxx11::basic_string\"* %3 to i8*\n  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %29) #6\n  %30 = add i64 %6, -4\n  %31 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %3, i64 0, i32 2\n  %32 = bitcast %\"class.std::__cxx11::basic_string\"* %3 to %union.anon**\n  store %union.anon* %31, %union.anon** %32, align 8, !tbaa !10, !alias.scope !13\n  %33 = bitcast %union.anon* %31 to i8*\n  %34 = getelementptr inbounds i8, i8* %17, i64 %30\n  %35 = bitcast i8* %34 to i32*\n  %36 = bitcast %union.anon* %31 to i32*\n  %37 = load i32, i32* %35, align 1\n  store i32 %37, i32* %36, align 8\n  %38 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %3, i64 0, i32 0, i32 0\n  %39 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %3, i64 0, i32 1\n  store i64 4, i64* %39, align 8, !tbaa !3, !alias.scope !13\n  %40 = getelementptr inbounds i8, i8* %33, i64 4\n  store i8 0, i8* %40, align 4, !tbaa !11\n  %41 = call i32 @_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %3, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i64 0, i64 0)) #6\n  %42 = icmp eq i32 %41, 0\n  br i1 %42, label %56, label %43\n\n43:                                               ; preds = %28\n  %44 = call i32 @_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %3, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.2, i64 0, i64 0)) #6\n  %45 = icmp eq i32 %44, 0\n  br i1 %45, label %56, label %46\n\n46:                                               ; preds = %43\n  %47 = call i32 @_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %3, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.3, i64 0, i64 0)) #6\n  %48 = icmp eq i32 %47, 0\n  br i1 %48, label %56, label %49\n\n49:                                               ; preds = %46\n  %50 = getelementptr inbounds %\"class.std::allocator\", %\"class.std::allocator\"* %4, i64 0, i32 0\n  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %50) #6\n  invoke void @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), %\"class.std::allocator\"* nonnull align 1 dereferenceable(1) %4)\n          to label %51 unwind label %52\n\n51:                                               ; preds = %49\n  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %50) #6\n  br label %136\n\n52:                                               ; preds = %49\n  %53 = landingpad { i8*, i32 }\n          cleanup\n  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %50) #6\n  %54 = load i8*, i8** %38, align 8, !tbaa !12\n  %55 = icmp eq i8* %54, %33\n  br i1 %55, label %142, label %141\n\n56:                                               ; preds = %46, %43, %28\n  %57 = load i64, i64* %5, align 8, !tbaa !3\n  %58 = icmp eq i64 %57, 0\n  br i1 %58, label %123, label %59\n\n59:                                               ; preds = %56\n  %60 = load i8*, i8** %16, align 8, !tbaa !12\n  %61 = icmp ult i64 %57, 8\n  br i1 %61, label %98, label %62\n\n62:                                               ; preds = %59\n  %63 = and i64 %57, -8\n  br label %64\n\n64:                                               ; preds = %64, %62\n  %65 = phi i64 [ 0, %62 ], [ %90, %64 ]\n  %66 = phi <4 x i32> [ zeroinitializer, %62 ], [ %82, %64 ]\n  %67 = phi <4 x i32> [ zeroinitializer, %62 ], [ %83, %64 ]\n  %68 = phi <4 x i32> [ zeroinitializer, %62 ], [ %88, %64 ]\n  %69 = phi <4 x i32> [ zeroinitializer, %62 ], [ %89, %64 ]\n  %70 = getelementptr inbounds i8, i8* %60, i64 %65\n  %71 = bitcast i8* %70 to <4 x i8>*\n  %72 = load <4 x i8>, <4 x i8>* %71, align 1, !tbaa !11\n  %73 = getelementptr inbounds i8, i8* %70, i64 4\n  %74 = bitcast i8* %73 to <4 x i8>*\n  %75 = load <4 x i8>, <4 x i8>* %74, align 1, !tbaa !11\n  %76 = add <4 x i8> %72, <i8 -48, i8 -48, i8 -48, i8 -48>\n  %77 = add <4 x i8> %75, <i8 -48, i8 -48, i8 -48, i8 -48>\n  %78 = icmp ult <4 x i8> %76, <i8 10, i8 10, i8 10, i8 10>\n  %79 = icmp ult <4 x i8> %77, <i8 10, i8 10, i8 10, i8 10>\n  %80 = zext <4 x i1> %78 to <4 x i32>\n  %81 = zext <4 x i1> %79 to <4 x i32>\n  %82 = add <4 x i32> %66, %80\n  %83 = add <4 x i32> %67, %81\n  %84 = icmp eq <4 x i8> %72, <i8 46, i8 46, i8 46, i8 46>\n  %85 = icmp eq <4 x i8> %75, <i8 46, i8 46, i8 46, i8 46>\n  %86 = zext <4 x i1> %84 to <4 x i32>\n  %87 = zext <4 x i1> %85 to <4 x i32>\n  %88 = add <4 x i32> %68, %86\n  %89 = add <4 x i32> %69, %87\n  %90 = add nuw i64 %65, 8\n  %91 = icmp eq i64 %90, %63\n  br i1 %91, label %92, label %64, !llvm.loop !16\n\n92:                                               ; preds = %64\n  %93 = add <4 x i32> %89, %88\n  %94 = call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %93)\n  %95 = add <4 x i32> %83, %82\n  %96 = call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %95)\n  %97 = icmp eq i64 %57, %63\n  br i1 %97, label %102, label %98\n\n98:                                               ; preds = %59, %92\n  %99 = phi i64 [ 0, %59 ], [ %63, %92 ]\n  %100 = phi i32 [ 0, %59 ], [ %96, %92 ]\n  %101 = phi i32 [ 0, %59 ], [ %94, %92 ]\n  br label %108\n\n102:                                              ; preds = %108, %92\n  %103 = phi i32 [ %96, %92 ], [ %117, %108 ]\n  %104 = phi i32 [ %94, %92 ], [ %120, %108 ]\n  %105 = icmp ugt i32 %103, 3\n  %106 = icmp ne i32 %104, 1\n  %107 = select i1 %105, i1 true, i1 %106\n  br i1 %107, label %123, label %130\n\n108:                                              ; preds = %98, %108\n  %109 = phi i64 [ %121, %108 ], [ %99, %98 ]\n  %110 = phi i32 [ %117, %108 ], [ %100, %98 ]\n  %111 = phi i32 [ %120, %108 ], [ %101, %98 ]\n  %112 = getelementptr inbounds i8, i8* %60, i64 %109\n  %113 = load i8, i8* %112, align 1, !tbaa !11\n  %114 = add i8 %113, -48\n  %115 = icmp ult i8 %114, 10\n  %116 = zext i1 %115 to i32\n  %117 = add nuw nsw i32 %110, %116\n  %118 = icmp eq i8 %113, 46\n  %119 = zext i1 %118 to i32\n  %120 = add nuw nsw i32 %111, %119\n  %121 = add nuw nsw i64 %109, 1\n  %122 = icmp eq i64 %121, %57\n  br i1 %122, label %102, label %108, !llvm.loop !19\n\n123:                                              ; preds = %56, %102\n  %124 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 2\n  %125 = bitcast %\"class.std::__cxx11::basic_string\"* %0 to %union.anon**\n  store %union.anon* %124, %union.anon** %125, align 8, !tbaa !10\n  %126 = bitcast %union.anon* %124 to i16*\n  store i16 28494, i16* %126, align 8\n  %127 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 1\n  store i64 2, i64* %127, align 8, !tbaa !3\n  %128 = bitcast %union.anon* %124 to i8*\n  %129 = getelementptr inbounds i8, i8* %128, i64 2\n  store i8 0, i8* %129, align 2, !tbaa !11\n  br label %136\n\n130:                                              ; preds = %102\n  %131 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 2\n  %132 = bitcast %\"class.std::__cxx11::basic_string\"* %0 to %union.anon**\n  store %union.anon* %131, %union.anon** %132, align 8, !tbaa !10\n  %133 = bitcast %union.anon* %131 to i8*\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(3) %133, i8* noundef nonnull align 1 dereferenceable(3) getelementptr inbounds ([4 x i8], [4 x i8]* @.str.4, i64 0, i64 0), i64 3, i1 false) #6\n  %134 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 1\n  store i64 3, i64* %134, align 8, !tbaa !3\n  %135 = getelementptr inbounds i8, i8* %133, i64 3\n  store i8 0, i8* %135, align 1, !tbaa !11\n  br label %136\n\n136:                                              ; preds = %130, %123, %51\n  %137 = load i8*, i8** %38, align 8, !tbaa !12\n  %138 = icmp eq i8* %137, %33\n  br i1 %138, label %140, label %139\n\n139:                                              ; preds = %136\n  call void @_ZdlPv(i8* %137) #6\n  br label %140\n\n140:                                              ; preds = %136, %139\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %29) #6\n  br label %143\n\n141:                                              ; preds = %52\n  call void @_ZdlPv(i8* %54) #6\n  br label %142\n\n142:                                              ; preds = %52, %141\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %29) #6\n  resume { i8*, i32 } %53\n\n143:                                              ; preds = %21, %140, %8\n  ret void\n}\n\n; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn\ndeclare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1\n\n; Function Attrs: uwtable\ndeclare dso_local void @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32), i8*, %\"class.std::allocator\"* nonnull align 1 dereferenceable(1)) unnamed_addr #0 align 2\n\ndeclare dso_local i32 @__gxx_personality_v0(...)\n\n; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn\ndeclare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1\n\n; Function Attrs: nobuiltin nounwind\ndeclare dso_local void @_ZdlPv(i8*) local_unnamed_addr #2\n\n; Function Attrs: argmemonly mustprogress nofree nounwind willreturn\ndeclare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #3\n\n; Function Attrs: nounwind\ndeclare dso_local i32 @_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32), i8*) local_unnamed_addr #4\n\n; Function Attrs: nofree nosync nounwind readnone willreturn\ndeclare i32 @llvm.vector.reduce.add.v4i32(<4 x i32>) #5\n\nattributes #0 = { uwtable \"frame-pointer\"=\"none\" \"min-legal-vector-width\"=\"0\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #1 = { argmemonly mustprogress nofree nosync nounwind willreturn }\nattributes #2 = { nobuiltin nounwind \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #3 = { argmemonly mustprogress nofree nounwind willreturn }\nattributes #4 = { nounwind \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #5 = { nofree nosync nounwind readnone willreturn }\nattributes #6 = { nounwind }\n\n!llvm.module.flags = !{!0, !1}\n!llvm.ident = !{!2}\n\n!0 = !{i32 1, !\"wchar_size\", i32 4}\n!1 = !{i32 7, !\"uwtable\", i32 1}\n!2 = !{!\"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)\"}\n!3 = !{!4, !9, i64 8}\n!4 = !{!\"_ZTSNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE\", !5, i64 0, !9, i64 8, !7, i64 16}\n!5 = !{!\"_ZTSNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderE\", !6, i64 0}\n!6 = !{!\"any pointer\", !7, i64 0}\n!7 = !{!\"omnipotent char\", !8, i64 0}\n!8 = !{!\"Simple C++ TBAA\"}\n!9 = !{!\"long\", !7, i64 0}\n!10 = !{!5, !6, i64 0}\n!11 = !{!7, !7, i64 0}\n!12 = !{!4, !6, i64 0}\n!13 = !{!14}\n!14 = distinct !{!14, !15, !\"_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEmm: argument 0\"}\n!15 = distinct !{!15, !\"_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEmm\"}\n!16 = distinct !{!16, !17, !18}\n!17 = !{!\"llvm.loop.mustprogress\"}\n!18 = !{!\"llvm.loop.isvectorized\", i32 1}\n!19 = distinct !{!19, !17, !20, !18}\n!20 = !{!\"llvm.loop.unroll.runtime.disable\"}\n", "target": "This is the targeted source code:\n/*\nCreate a function which takes a string representing a file's name, and returns\n\"Yes\" if the the file's name is valid, and returns \"No\" otherwise.\nA file's name is considered to be valid if and only if all the following conditions \nare met:\n- There should not be more than three digits ('0'-'9') in the file's name.\n- The file's name contains exactly one dot \".\"\n- The substring before the dot should not be empty, and it starts with a letter from \nthe latin alphapet ('a'-'z' and 'A'-'Z').\n- The substring after the dot should be one of these: {'txt\", \"exe\", \"dll\"}\nExamples:\nfile_name_check(\"example.txt\") => \"Yes\"\nfile_name_check(\"1example.dll\")  => \"No\" // (the name should start with a latin alphapet letter)\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring file_name_check(string file_name){\n\n    int numdigit=0,numdot=0;\n    if (file_name.length()<5) return \"No\";\n    char w=file_name[0];\n    if (w<65 or (w>90 and w<97) or w>122) return \"No\";\n    string last=file_name.substr(file_name.length()-4,4);\n    if (last!=\".txt\" and last!=\".exe\" and last!=\".dll\") return \"No\";\n    for (int i=0;i<file_name.length();i++)\n    {\n        if (file_name[i]>=48 and file_name[i]<=57) numdigit+=1;\n        if (file_name[i]=='.') numdot+=1;\n    }\n    if (numdigit>3 or numdot!=1) return \"No\";\n    return \"Yes\"; \n}\n"}
{"input": "Convert this to C++:\n; ModuleID = '../../Human_xBenchmarks_164/CPP_142/CPP_142.cpp'\nsource_filename = \"../../Human_xBenchmarks_164/CPP_142/CPP_142.cpp\"\ntarget datalayout = \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\ntarget triple = \"x86_64-unknown-linux-gnu\"\n\n%\"class.std::vector\" = type { %\"struct.std::_Vector_base\" }\n%\"struct.std::_Vector_base\" = type { %\"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl\" }\n%\"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl\" = type { %\"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl_data\" }\n%\"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl_data\" = type { i32*, i32*, i32* }\n\n; Function Attrs: mustprogress nofree norecurse nosync nounwind readonly uwtable willreturn\ndefine dso_local i32 @_Z11sum_squaresSt6vectorIiSaIiEE(%\"class.std::vector\"* nocapture readonly %0) local_unnamed_addr #0 {\n  %2 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0, i64 0, i32 0, i32 0, i32 0, i32 1\n  %3 = load i32*, i32** %2, align 8, !tbaa !3\n  %4 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0, i64 0, i32 0, i32 0, i32 0, i32 0\n  %5 = load i32*, i32** %4, align 8, !tbaa !8\n  %6 = ptrtoint i32* %3 to i64\n  %7 = ptrtoint i32* %5 to i64\n  %8 = sub i64 %6, %7\n  %9 = icmp eq i64 %8, 0\n  br i1 %9, label %13, label %10\n\n10:                                               ; preds = %1\n  %11 = ashr exact i64 %8, 2\n  %12 = call i64 @llvm.umax.i64(i64 %11, i64 1)\n  br label %15\n\n13:                                               ; preds = %33, %1\n  %14 = phi i32 [ 0, %1 ], [ %35, %33 ]\n  ret i32 %14\n\n15:                                               ; preds = %10, %33\n  %16 = phi i64 [ 0, %10 ], [ %36, %33 ]\n  %17 = phi i32 [ 0, %10 ], [ %35, %33 ]\n  %18 = trunc i64 %16 to i32\n  %19 = urem i32 %18, 3\n  %20 = icmp eq i32 %19, 0\n  br i1 %20, label %21, label %25\n\n21:                                               ; preds = %15\n  %22 = getelementptr inbounds i32, i32* %5, i64 %16\n  %23 = load i32, i32* %22, align 4, !tbaa !9\n  %24 = mul nsw i32 %23, %23\n  br label %33\n\n25:                                               ; preds = %15\n  %26 = and i32 %18, 3\n  %27 = icmp eq i32 %26, 0\n  %28 = getelementptr inbounds i32, i32* %5, i64 %16\n  %29 = load i32, i32* %28, align 4, !tbaa !9\n  br i1 %27, label %30, label %33\n\n30:                                               ; preds = %25\n  %31 = mul nsw i32 %29, %29\n  %32 = mul nsw i32 %31, %29\n  br label %33\n\n33:                                               ; preds = %25, %21, %30\n  %34 = phi i32 [ %24, %21 ], [ %32, %30 ], [ %29, %25 ]\n  %35 = add nsw i32 %34, %17\n  %36 = add nuw nsw i64 %16, 1\n  %37 = icmp eq i64 %36, %12\n  br i1 %37, label %13, label %15, !llvm.loop !11\n}\n\n; Function Attrs: nofree nosync nounwind readnone speculatable willreturn\ndeclare i64 @llvm.umax.i64(i64, i64) #1\n\nattributes #0 = { mustprogress nofree norecurse nosync nounwind readonly uwtable willreturn \"frame-pointer\"=\"none\" \"min-legal-vector-width\"=\"0\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #1 = { nofree nosync nounwind readnone speculatable willreturn }\n\n!llvm.module.flags = !{!0, !1}\n!llvm.ident = !{!2}\n\n!0 = !{i32 1, !\"wchar_size\", i32 4}\n!1 = !{i32 7, !\"uwtable\", i32 1}\n!2 = !{!\"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)\"}\n!3 = !{!4, !5, i64 8}\n!4 = !{!\"_ZTSNSt12_Vector_baseIiSaIiEE17_Vector_impl_dataE\", !5, i64 0, !5, i64 8, !5, i64 16}\n!5 = !{!\"any pointer\", !6, i64 0}\n!6 = !{!\"omnipotent char\", !7, i64 0}\n!7 = !{!\"Simple C++ TBAA\"}\n!8 = !{!4, !5, i64 0}\n!9 = !{!10, !10, i64 0}\n!10 = !{!\"int\", !6, i64 0}\n!11 = distinct !{!11, !12}\n!12 = !{!\"llvm.loop.mustprogress\"}\n", "target": "This is the targeted source code:\n/*\n\"\nThis function will take a vector of integers. For all entries in the vector, the function shall square the integer entry if its index is a \nmultiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \nchange the entries in the vector whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n\nExamples:\nFor lst = {1,2,3} the output should be 6\nFor lst = {}  the output should be 0\nFor lst = {-1,-5,2,-1,-5}  the output should be -126\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint sum_squares(vector<int> lst){\n\n    int sum=0;\n    for (int i=0;i<lst.size();i++)\n        if (i%3==0) sum+=lst[i]*lst[i];\n        else if (i%4==0) sum+=lst[i]*lst[i]*lst[i];\n        else sum+=lst[i];\n    return sum;\n}\n"}
{"input": "Convert this to C++:\n; ModuleID = '../../Human_xBenchmarks_164/CPP_143/CPP_143.cpp'\nsource_filename = \"../../Human_xBenchmarks_164/CPP_143/CPP_143.cpp\"\ntarget datalayout = \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\ntarget triple = \"x86_64-unknown-linux-gnu\"\n\n%\"class.std::__cxx11::basic_string\" = type { %\"struct.std::__cxx11::basic_string<char>::_Alloc_hider\", i64, %union.anon }\n%\"struct.std::__cxx11::basic_string<char>::_Alloc_hider\" = type { i8* }\n%union.anon = type { i64, [8 x i8] }\n\n$__clang_call_terminate = comdat any\n\n@.str = private unnamed_addr constant [1 x i8] zeroinitializer, align 1\n\n; Function Attrs: uwtable\ndefine dso_local void @_Z17words_in_sentenceNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE(%\"class.std::__cxx11::basic_string\"* noalias sret(%\"class.std::__cxx11::basic_string\") align 8 %0, %\"class.std::__cxx11::basic_string\"* %1) local_unnamed_addr #0 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {\n  %3 = alloca i64, align 8\n  %4 = alloca i64, align 8\n  %5 = alloca i64, align 8\n  %6 = alloca %\"class.std::__cxx11::basic_string\", align 8\n  %7 = alloca %\"class.std::__cxx11::basic_string\", align 8\n  %8 = alloca %\"class.std::__cxx11::basic_string\", align 8\n  %9 = alloca %\"class.std::__cxx11::basic_string\", align 8\n  %10 = alloca %\"class.std::__cxx11::basic_string\", align 8\n  %11 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 2\n  %12 = bitcast %\"class.std::__cxx11::basic_string\"* %0 to %union.anon**\n  store %union.anon* %11, %union.anon** %12, align 8, !tbaa !3\n  %13 = bitcast %union.anon* %11 to i8*\n  %14 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 0, i32 0\n  %15 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 1\n  store i64 0, i64* %15, align 8, !tbaa !8\n  store i8 0, i8* %13, align 8, !tbaa !11\n  %16 = bitcast %\"class.std::__cxx11::basic_string\"* %6 to i8*\n  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %16) #7\n  %17 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %6, i64 0, i32 2\n  %18 = bitcast %\"class.std::__cxx11::basic_string\"* %6 to %union.anon**\n  store %union.anon* %17, %union.anon** %18, align 8, !tbaa !3\n  %19 = bitcast %union.anon* %17 to i8*\n  %20 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %6, i64 0, i32 0, i32 0\n  %21 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %6, i64 0, i32 1\n  store i64 0, i64* %21, align 8, !tbaa !8\n  store i8 0, i8* %19, align 8, !tbaa !11\n  %22 = bitcast %\"class.std::__cxx11::basic_string\"* %7 to i8*\n  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %22) #7\n  call void @llvm.experimental.noalias.scope.decl(metadata !12)\n  %23 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %7, i64 0, i32 2\n  %24 = bitcast %\"class.std::__cxx11::basic_string\"* %7 to %union.anon**\n  store %union.anon* %23, %union.anon** %24, align 8, !tbaa !3, !alias.scope !12\n  %25 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %1, i64 0, i32 0, i32 0\n  %26 = load i8*, i8** %25, align 8, !tbaa !15, !noalias !12\n  %27 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %1, i64 0, i32 1\n  %28 = load i64, i64* %27, align 8, !tbaa !8, !noalias !12\n  %29 = bitcast i64* %5 to i8*\n  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %29) #7, !noalias !12\n  store i64 %28, i64* %5, align 8, !tbaa !16, !noalias !12\n  %30 = icmp ugt i64 %28, 15\n  br i1 %30, label %33, label %31\n\n31:                                               ; preds = %2\n  %32 = bitcast %union.anon* %23 to i8*\n  br label %39\n\n33:                                               ; preds = %2\n  %34 = invoke i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %7, i64* nonnull align 8 dereferenceable(8) %5, i64 0)\n          to label %35 unwind label %132\n\n35:                                               ; preds = %33\n  %36 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %7, i64 0, i32 0, i32 0\n  store i8* %34, i8** %36, align 8, !tbaa !15, !alias.scope !12\n  %37 = load i64, i64* %5, align 8, !tbaa !16, !noalias !12\n  %38 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %7, i64 0, i32 2, i32 0\n  store i64 %37, i64* %38, align 8, !tbaa !11, !alias.scope !12\n  br label %39\n\n39:                                               ; preds = %35, %31\n  %40 = phi i8* [ %32, %31 ], [ %34, %35 ]\n  switch i64 %28, label %43 [\n    i64 1, label %41\n    i64 0, label %44\n  ]\n\n41:                                               ; preds = %39\n  %42 = load i8, i8* %26, align 1, !tbaa !11\n  store i8 %42, i8* %40, align 1, !tbaa !11\n  br label %44\n\n43:                                               ; preds = %39\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %40, i8* align 1 %26, i64 %28, i1 false) #7\n  br label %44\n\n44:                                               ; preds = %43, %41, %39\n  %45 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %7, i64 0, i32 0, i32 0\n  %46 = load i64, i64* %5, align 8, !tbaa !16, !noalias !12\n  %47 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %7, i64 0, i32 1\n  store i64 %46, i64* %47, align 8, !tbaa !8, !alias.scope !12\n  %48 = load i8*, i8** %45, align 8, !tbaa !15, !alias.scope !12\n  %49 = getelementptr inbounds i8, i8* %48, i64 %46\n  store i8 0, i8* %49, align 1, !tbaa !11\n  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %29) #7, !noalias !12\n  %50 = load i64, i64* %47, align 8, !tbaa !8, !alias.scope !12\n  %51 = invoke nonnull align 8 dereferenceable(32) %\"class.std::__cxx11::basic_string\"* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEmmmc(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %7, i64 %50, i64 0, i64 1, i8 signext 32)\n          to label %58 unwind label %52\n\n52:                                               ; preds = %44\n  %53 = landingpad { i8*, i32 }\n          cleanup\n  %54 = load i8*, i8** %45, align 8, !tbaa !15, !alias.scope !12\n  %55 = bitcast %union.anon* %23 to i8*\n  %56 = icmp eq i8* %54, %55\n  br i1 %56, label %134, label %57\n\n57:                                               ; preds = %52\n  call void @_ZdlPv(i8* %54) #7\n  br label %134\n\n58:                                               ; preds = %44\n  %59 = load i8*, i8** %45, align 8, !tbaa !15\n  %60 = bitcast %union.anon* %23 to i8*\n  %61 = icmp eq i8* %59, %60\n  br i1 %61, label %62, label %76\n\n62:                                               ; preds = %58\n  %63 = load i64, i64* %47, align 8, !tbaa !8\n  %64 = icmp eq i64 %63, 0\n  br i1 %64, label %71, label %65\n\n65:                                               ; preds = %62\n  %66 = load i8*, i8** %25, align 8, !tbaa !15\n  %67 = icmp eq i64 %63, 1\n  br i1 %67, label %68, label %70\n\n68:                                               ; preds = %65\n  %69 = load i8, i8* %60, align 8, !tbaa !11\n  store i8 %69, i8* %66, align 1, !tbaa !11\n  br label %71\n\n70:                                               ; preds = %65\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %66, i8* nonnull align 8 %60, i64 %63, i1 false) #7\n  br label %71\n\n71:                                               ; preds = %70, %68, %62\n  %72 = load i64, i64* %47, align 8, !tbaa !8\n  store i64 %72, i64* %27, align 8, !tbaa !8\n  %73 = load i8*, i8** %25, align 8, !tbaa !15\n  %74 = getelementptr inbounds i8, i8* %73, i64 %72\n  store i8 0, i8* %74, align 1, !tbaa !11\n  %75 = load i8*, i8** %45, align 8, !tbaa !15\n  br label %91\n\n76:                                               ; preds = %58\n  %77 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %1, i64 0, i32 2\n  %78 = bitcast %union.anon* %77 to i8*\n  %79 = load i8*, i8** %25, align 8, !tbaa !15\n  %80 = icmp eq i8* %79, %78\n  %81 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %1, i64 0, i32 2, i32 0\n  %82 = load i64, i64* %81, align 8\n  store i8* %59, i8** %25, align 8, !tbaa !15\n  %83 = bitcast i64* %47 to <2 x i64>*\n  %84 = load <2 x i64>, <2 x i64>* %83, align 8, !tbaa !11\n  %85 = bitcast i64* %27 to <2 x i64>*\n  store <2 x i64> %84, <2 x i64>* %85, align 8, !tbaa !11\n  %86 = icmp eq i8* %79, null\n  %87 = or i1 %80, %86\n  br i1 %87, label %90, label %88\n\n88:                                               ; preds = %76\n  store i8* %79, i8** %45, align 8, !tbaa !15\n  %89 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %7, i64 0, i32 2, i32 0\n  store i64 %82, i64* %89, align 8, !tbaa !11\n  br label %91\n\n90:                                               ; preds = %76\n  store %union.anon* %23, %union.anon** %24, align 8, !tbaa !15\n  br label %91\n\n91:                                               ; preds = %71, %88, %90\n  %92 = phi i8* [ %75, %71 ], [ %79, %88 ], [ %60, %90 ]\n  store i64 0, i64* %47, align 8, !tbaa !8\n  store i8 0, i8* %92, align 1, !tbaa !11\n  %93 = load i8*, i8** %45, align 8, !tbaa !15\n  %94 = icmp eq i8* %93, %60\n  br i1 %94, label %96, label %95\n\n95:                                               ; preds = %91\n  call void @_ZdlPv(i8* %93) #7\n  br label %96\n\n96:                                               ; preds = %91, %95\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %22) #7\n  %97 = bitcast %\"class.std::__cxx11::basic_string\"* %8 to i8*\n  %98 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %8, i64 0, i32 2\n  %99 = bitcast %\"class.std::__cxx11::basic_string\"* %8 to %union.anon**\n  %100 = bitcast i64* %4 to i8*\n  %101 = bitcast %union.anon* %98 to i8*\n  %102 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %8, i64 0, i32 0, i32 0\n  %103 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %8, i64 0, i32 2, i32 0\n  %104 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %8, i64 0, i32 1\n  %105 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %6, i64 0, i32 2, i32 0\n  %106 = bitcast %\"class.std::__cxx11::basic_string\"* %9 to i8*\n  %107 = bitcast %\"class.std::__cxx11::basic_string\"* %10 to i8*\n  %108 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %10, i64 0, i32 2\n  %109 = bitcast %\"class.std::__cxx11::basic_string\"* %10 to %union.anon**\n  %110 = bitcast i64* %3 to i8*\n  %111 = bitcast %union.anon* %108 to i8*\n  %112 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %10, i64 0, i32 0, i32 0\n  %113 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %10, i64 0, i32 2, i32 0\n  %114 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %10, i64 0, i32 1\n  %115 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %9, i64 0, i32 2\n  %116 = bitcast %\"class.std::__cxx11::basic_string\"* %9 to %union.anon**\n  %117 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %9, i64 0, i32 0, i32 0\n  %118 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %9, i64 0, i32 2, i32 0\n  %119 = bitcast %union.anon* %115 to i8*\n  %120 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %9, i64 0, i32 1\n  %121 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 2, i32 0\n  %122 = load i64, i64* %27, align 8, !tbaa !8\n  %123 = icmp eq i64 %122, 0\n  br i1 %123, label %129, label %124\n\n124:                                              ; preds = %96\n  %125 = bitcast i64* %104 to <2 x i64>*\n  %126 = bitcast i64* %21 to <2 x i64>*\n  %127 = bitcast i64* %120 to <2 x i64>*\n  %128 = bitcast i64* %15 to <2 x i64>*\n  br label %136\n\n129:                                              ; preds = %313, %96\n  %130 = load i64, i64* %15, align 8, !tbaa !8\n  %131 = icmp eq i64 %130, 0\n  br i1 %131, label %322, label %317\n\n132:                                              ; preds = %33\n  %133 = landingpad { i8*, i32 }\n          cleanup\n  br label %134\n\n134:                                              ; preds = %52, %57, %132\n  %135 = phi { i8*, i32 } [ %133, %132 ], [ %53, %57 ], [ %53, %52 ]\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %22) #7\n  br label %327\n\n136:                                              ; preds = %124, %313\n  %137 = phi i64 [ %314, %313 ], [ 0, %124 ]\n  %138 = load i8*, i8** %25, align 8, !tbaa !15\n  %139 = getelementptr inbounds i8, i8* %138, i64 %137\n  %140 = load i8, i8* %139, align 1, !tbaa !11\n  %141 = icmp eq i8 %140, 32\n  br i1 %141, label %202, label %142\n\n142:                                              ; preds = %136\n  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %97) #7\n  call void @llvm.experimental.noalias.scope.decl(metadata !17)\n  store %union.anon* %98, %union.anon** %99, align 8, !tbaa !3, !alias.scope !17\n  %143 = load i8*, i8** %20, align 8, !tbaa !15, !noalias !17\n  %144 = load i64, i64* %21, align 8, !tbaa !8, !noalias !17\n  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %100) #7, !noalias !17\n  store i64 %144, i64* %4, align 8, !tbaa !16, !noalias !17\n  %145 = icmp ugt i64 %144, 15\n  br i1 %145, label %146, label %150\n\n146:                                              ; preds = %142\n  %147 = invoke i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %8, i64* nonnull align 8 dereferenceable(8) %4, i64 0)\n          to label %148 unwind label %198\n\n148:                                              ; preds = %146\n  store i8* %147, i8** %102, align 8, !tbaa !15, !alias.scope !17\n  %149 = load i64, i64* %4, align 8, !tbaa !16, !noalias !17\n  store i64 %149, i64* %103, align 8, !tbaa !11, !alias.scope !17\n  br label %150\n\n150:                                              ; preds = %142, %148\n  %151 = phi i8* [ %147, %148 ], [ %101, %142 ]\n  switch i64 %144, label %154 [\n    i64 1, label %152\n    i64 0, label %155\n  ]\n\n152:                                              ; preds = %150\n  %153 = load i8, i8* %143, align 1, !tbaa !11\n  store i8 %153, i8* %151, align 1, !tbaa !11\n  br label %155\n\n154:                                              ; preds = %150\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %151, i8* align 1 %143, i64 %144, i1 false) #7\n  br label %155\n\n155:                                              ; preds = %154, %152, %150\n  %156 = load i64, i64* %4, align 8, !tbaa !16, !noalias !17\n  store i64 %156, i64* %104, align 8, !tbaa !8, !alias.scope !17\n  %157 = load i8*, i8** %102, align 8, !tbaa !15, !alias.scope !17\n  %158 = getelementptr inbounds i8, i8* %157, i64 %156\n  store i8 0, i8* %158, align 1, !tbaa !11\n  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %100) #7, !noalias !17\n  %159 = load i64, i64* %104, align 8, !tbaa !8, !alias.scope !17\n  %160 = invoke nonnull align 8 dereferenceable(32) %\"class.std::__cxx11::basic_string\"* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEmmmc(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %8, i64 %159, i64 0, i64 1, i8 signext %140)\n          to label %166 unwind label %161\n\n161:                                              ; preds = %155\n  %162 = landingpad { i8*, i32 }\n          cleanup\n  %163 = load i8*, i8** %102, align 8, !tbaa !15, !alias.scope !17\n  %164 = icmp eq i8* %163, %101\n  br i1 %164, label %200, label %165\n\n165:                                              ; preds = %161\n  call void @_ZdlPv(i8* %163) #7\n  br label %200\n\n166:                                              ; preds = %155\n  %167 = load i8*, i8** %102, align 8, !tbaa !15\n  %168 = icmp eq i8* %167, %101\n  br i1 %168, label %169, label %183\n\n169:                                              ; preds = %166\n  %170 = load i64, i64* %104, align 8, !tbaa !8\n  %171 = icmp eq i64 %170, 0\n  br i1 %171, label %178, label %172\n\n172:                                              ; preds = %169\n  %173 = load i8*, i8** %20, align 8, !tbaa !15\n  %174 = icmp eq i64 %170, 1\n  br i1 %174, label %175, label %177\n\n175:                                              ; preds = %172\n  %176 = load i8, i8* %101, align 8, !tbaa !11\n  store i8 %176, i8* %173, align 1, !tbaa !11\n  br label %178\n\n177:                                              ; preds = %172\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %173, i8* nonnull align 8 %101, i64 %170, i1 false) #7\n  br label %178\n\n178:                                              ; preds = %177, %175, %169\n  %179 = load i64, i64* %104, align 8, !tbaa !8\n  store i64 %179, i64* %21, align 8, !tbaa !8\n  %180 = load i8*, i8** %20, align 8, !tbaa !15\n  %181 = getelementptr inbounds i8, i8* %180, i64 %179\n  store i8 0, i8* %181, align 1, !tbaa !11\n  %182 = load i8*, i8** %102, align 8, !tbaa !15\n  br label %192\n\n183:                                              ; preds = %166\n  %184 = load i8*, i8** %20, align 8, !tbaa !15\n  %185 = icmp eq i8* %184, %19\n  %186 = load i64, i64* %105, align 8\n  store i8* %167, i8** %20, align 8, !tbaa !15\n  %187 = load <2 x i64>, <2 x i64>* %125, align 8, !tbaa !11\n  store <2 x i64> %187, <2 x i64>* %126, align 8, !tbaa !11\n  %188 = icmp eq i8* %184, null\n  %189 = or i1 %185, %188\n  br i1 %189, label %191, label %190\n\n190:                                              ; preds = %183\n  store i8* %184, i8** %102, align 8, !tbaa !15\n  store i64 %186, i64* %103, align 8, !tbaa !11\n  br label %192\n\n191:                                              ; preds = %183\n  store %union.anon* %98, %union.anon** %99, align 8, !tbaa !15\n  br label %192\n\n192:                                              ; preds = %178, %190, %191\n  %193 = phi i8* [ %182, %178 ], [ %184, %190 ], [ %101, %191 ]\n  store i64 0, i64* %104, align 8, !tbaa !8\n  store i8 0, i8* %193, align 1, !tbaa !11\n  %194 = load i8*, i8** %102, align 8, !tbaa !15\n  %195 = icmp eq i8* %194, %101\n  br i1 %195, label %197, label %196\n\n196:                                              ; preds = %192\n  call void @_ZdlPv(i8* %194) #7\n  br label %197\n\n197:                                              ; preds = %192, %196\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %97) #7\n  br label %313\n\n198:                                              ; preds = %146\n  %199 = landingpad { i8*, i32 }\n          cleanup\n  br label %200\n\n200:                                              ; preds = %161, %165, %198\n  %201 = phi { i8*, i32 } [ %199, %198 ], [ %162, %165 ], [ %162, %161 ]\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %97) #7\n  br label %327\n\n202:                                              ; preds = %136\n  %203 = load i64, i64* %21, align 8, !tbaa !8\n  %204 = trunc i64 %203 to i32\n  %205 = icmp sgt i32 %204, 1\n  %206 = zext i1 %205 to i8\n  %207 = icmp slt i32 %204, 4\n  br i1 %207, label %208, label %212\n\n208:                                              ; preds = %212, %202\n  %209 = phi i8 [ %206, %202 ], [ %217, %212 ]\n  %210 = and i8 %209, 1\n  %211 = icmp eq i8 %210, 0\n  br i1 %211, label %308, label %221\n\n212:                                              ; preds = %202, %212\n  %213 = phi i32 [ %218, %212 ], [ 2, %202 ]\n  %214 = phi i8 [ %217, %212 ], [ %206, %202 ]\n  %215 = srem i32 %204, %213\n  %216 = icmp eq i32 %215, 0\n  %217 = select i1 %216, i8 0, i8 %214\n  %218 = add nuw nsw i32 %213, 1\n  %219 = mul nsw i32 %218, %218\n  %220 = icmp sgt i32 %219, %204\n  br i1 %220, label %208, label %212, !llvm.loop !20\n\n221:                                              ; preds = %208\n  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %106) #7\n  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %107) #7\n  call void @llvm.experimental.noalias.scope.decl(metadata !22)\n  store %union.anon* %108, %union.anon** %109, align 8, !tbaa !3, !alias.scope !22\n  %222 = load i8*, i8** %14, align 8, !tbaa !15, !noalias !22\n  %223 = load i64, i64* %15, align 8, !tbaa !8, !noalias !22\n  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %110) #7, !noalias !22\n  store i64 %223, i64* %3, align 8, !tbaa !16, !noalias !22\n  %224 = icmp ugt i64 %223, 15\n  br i1 %224, label %225, label %229\n\n225:                                              ; preds = %221\n  %226 = invoke i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %10, i64* nonnull align 8 dereferenceable(8) %3, i64 0)\n          to label %227 unwind label %299\n\n227:                                              ; preds = %225\n  store i8* %226, i8** %112, align 8, !tbaa !15, !alias.scope !22\n  %228 = load i64, i64* %3, align 8, !tbaa !16, !noalias !22\n  store i64 %228, i64* %113, align 8, !tbaa !11, !alias.scope !22\n  br label %229\n\n229:                                              ; preds = %221, %227\n  %230 = phi i8* [ %226, %227 ], [ %111, %221 ]\n  switch i64 %223, label %233 [\n    i64 1, label %231\n    i64 0, label %234\n  ]\n\n231:                                              ; preds = %229\n  %232 = load i8, i8* %222, align 1, !tbaa !11\n  store i8 %232, i8* %230, align 1, !tbaa !11\n  br label %234\n\n233:                                              ; preds = %229\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %230, i8* align 1 %222, i64 %223, i1 false) #7\n  br label %234\n\n234:                                              ; preds = %233, %231, %229\n  %235 = load i64, i64* %3, align 8, !tbaa !16, !noalias !22\n  store i64 %235, i64* %114, align 8, !tbaa !8, !alias.scope !22\n  %236 = load i8*, i8** %112, align 8, !tbaa !15, !alias.scope !22\n  %237 = getelementptr inbounds i8, i8* %236, i64 %235\n  store i8 0, i8* %237, align 1, !tbaa !11\n  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %110) #7, !noalias !22\n  %238 = load i8*, i8** %20, align 8, !tbaa !15, !noalias !22\n  %239 = load i64, i64* %21, align 8, !tbaa !8, !noalias !22\n  %240 = invoke nonnull align 8 dereferenceable(32) %\"class.std::__cxx11::basic_string\"* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %10, i8* %238, i64 %239)\n          to label %246 unwind label %241\n\n241:                                              ; preds = %234\n  %242 = landingpad { i8*, i32 }\n          cleanup\n  %243 = load i8*, i8** %112, align 8, !tbaa !15, !alias.scope !22\n  %244 = icmp eq i8* %243, %111\n  br i1 %244, label %306, label %245\n\n245:                                              ; preds = %241\n  call void @_ZdlPv(i8* %243) #7\n  br label %306\n\n246:                                              ; preds = %234\n  call void @llvm.experimental.noalias.scope.decl(metadata !25)\n  %247 = load i64, i64* %114, align 8, !tbaa !8, !noalias !25\n  %248 = invoke nonnull align 8 dereferenceable(32) %\"class.std::__cxx11::basic_string\"* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEmmmc(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %10, i64 %247, i64 0, i64 1, i8 signext 32)\n          to label %249 unwind label %301\n\n249:                                              ; preds = %246\n  store %union.anon* %115, %union.anon** %116, align 8, !tbaa !3, !alias.scope !25\n  %250 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %248, i64 0, i32 0, i32 0\n  %251 = load i8*, i8** %250, align 8, !tbaa !15\n  %252 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %248, i64 0, i32 2\n  %253 = bitcast %union.anon* %252 to i8*\n  %254 = icmp eq i8* %251, %253\n  br i1 %254, label %255, label %256\n\n255:                                              ; preds = %249\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(16) %119, i8* noundef nonnull align 8 dereferenceable(16) %251, i64 16, i1 false) #7\n  br label %259\n\n256:                                              ; preds = %249\n  store i8* %251, i8** %117, align 8, !tbaa !15, !alias.scope !25\n  %257 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %248, i64 0, i32 2, i32 0\n  %258 = load i64, i64* %257, align 8, !tbaa !11\n  store i64 %258, i64* %118, align 8, !tbaa !11, !alias.scope !25\n  br label %259\n\n259:                                              ; preds = %256, %255\n  %260 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %248, i64 0, i32 1\n  %261 = load i64, i64* %260, align 8, !tbaa !8\n  store i64 %261, i64* %120, align 8, !tbaa !8, !alias.scope !25\n  %262 = bitcast %\"class.std::__cxx11::basic_string\"* %248 to %union.anon**\n  store %union.anon* %252, %union.anon** %262, align 8, !tbaa !15\n  store i64 0, i64* %260, align 8, !tbaa !8\n  store i8 0, i8* %253, align 8, !tbaa !11\n  %263 = load i8*, i8** %117, align 8, !tbaa !15\n  %264 = icmp eq i8* %263, %119\n  br i1 %264, label %265, label %279\n\n265:                                              ; preds = %259\n  %266 = load i64, i64* %120, align 8, !tbaa !8\n  %267 = icmp eq i64 %266, 0\n  br i1 %267, label %274, label %268\n\n268:                                              ; preds = %265\n  %269 = load i8*, i8** %14, align 8, !tbaa !15\n  %270 = icmp eq i64 %266, 1\n  br i1 %270, label %271, label %273\n\n271:                                              ; preds = %268\n  %272 = load i8, i8* %119, align 8, !tbaa !11\n  store i8 %272, i8* %269, align 1, !tbaa !11\n  br label %274\n\n273:                                              ; preds = %268\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %269, i8* nonnull align 8 %119, i64 %266, i1 false) #7\n  br label %274\n\n274:                                              ; preds = %273, %271, %265\n  %275 = load i64, i64* %120, align 8, !tbaa !8\n  store i64 %275, i64* %15, align 8, !tbaa !8\n  %276 = load i8*, i8** %14, align 8, !tbaa !15\n  %277 = getelementptr inbounds i8, i8* %276, i64 %275\n  store i8 0, i8* %277, align 1, !tbaa !11\n  %278 = load i8*, i8** %117, align 8, !tbaa !15\n  br label %288\n\n279:                                              ; preds = %259\n  %280 = load i8*, i8** %14, align 8, !tbaa !15\n  %281 = icmp eq i8* %280, %13\n  %282 = load i64, i64* %121, align 8\n  store i8* %263, i8** %14, align 8, !tbaa !15\n  %283 = load <2 x i64>, <2 x i64>* %127, align 8, !tbaa !11\n  store <2 x i64> %283, <2 x i64>* %128, align 8, !tbaa !11\n  %284 = icmp eq i8* %280, null\n  %285 = or i1 %281, %284\n  br i1 %285, label %287, label %286\n\n286:                                              ; preds = %279\n  store i8* %280, i8** %117, align 8, !tbaa !15\n  store i64 %282, i64* %118, align 8, !tbaa !11\n  br label %288\n\n287:                                              ; preds = %279\n  store %union.anon* %115, %union.anon** %116, align 8, !tbaa !15\n  br label %288\n\n288:                                              ; preds = %274, %286, %287\n  %289 = phi i8* [ %278, %274 ], [ %280, %286 ], [ %119, %287 ]\n  store i64 0, i64* %120, align 8, !tbaa !8\n  store i8 0, i8* %289, align 1, !tbaa !11\n  %290 = load i8*, i8** %117, align 8, !tbaa !15\n  %291 = icmp eq i8* %290, %119\n  br i1 %291, label %293, label %292\n\n292:                                              ; preds = %288\n  call void @_ZdlPv(i8* %290) #7\n  br label %293\n\n293:                                              ; preds = %288, %292\n  %294 = load i8*, i8** %112, align 8, !tbaa !15\n  %295 = icmp eq i8* %294, %111\n  br i1 %295, label %297, label %296\n\n296:                                              ; preds = %293\n  call void @_ZdlPv(i8* %294) #7\n  br label %297\n\n297:                                              ; preds = %293, %296\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %107) #7\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %106) #7\n  %298 = load i64, i64* %21, align 8, !tbaa !8\n  br label %308\n\n299:                                              ; preds = %225\n  %300 = landingpad { i8*, i32 }\n          cleanup\n  br label %306\n\n301:                                              ; preds = %246\n  %302 = landingpad { i8*, i32 }\n          cleanup\n  %303 = load i8*, i8** %112, align 8, !tbaa !15\n  %304 = icmp eq i8* %303, %111\n  br i1 %304, label %306, label %305\n\n305:                                              ; preds = %301\n  call void @_ZdlPv(i8* %303) #7\n  br label %306\n\n306:                                              ; preds = %305, %301, %299, %245, %241\n  %307 = phi { i8*, i32 } [ %300, %299 ], [ %242, %245 ], [ %242, %241 ], [ %302, %301 ], [ %302, %305 ]\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %107) #7\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %106) #7\n  br label %327\n\n308:                                              ; preds = %297, %208\n  %309 = phi i64 [ %298, %297 ], [ %203, %208 ]\n  %310 = invoke nonnull align 8 dereferenceable(32) %\"class.std::__cxx11::basic_string\"* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %6, i64 0, i64 %309, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str, i64 0, i64 0), i64 0)\n          to label %313 unwind label %311\n\n311:                                              ; preds = %308\n  %312 = landingpad { i8*, i32 }\n          cleanup\n  br label %327\n\n313:                                              ; preds = %308, %197\n  %314 = add nuw i64 %137, 1\n  %315 = load i64, i64* %27, align 8, !tbaa !8\n  %316 = icmp ugt i64 %315, %314\n  br i1 %316, label %136, label %129, !llvm.loop !28\n\n317:                                              ; preds = %129\n  %318 = add i64 %130, -1\n  invoke void @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_eraseEmm(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %0, i64 %318, i64 1)\n          to label %322 unwind label %319\n\n319:                                              ; preds = %317\n  %320 = landingpad { i8*, i32 }\n          catch i8* null\n  %321 = extractvalue { i8*, i32 } %320, 0\n  call void @__clang_call_terminate(i8* %321) #8\n  unreachable\n\n322:                                              ; preds = %317, %129\n  %323 = load i8*, i8** %20, align 8, !tbaa !15\n  %324 = icmp eq i8* %323, %19\n  br i1 %324, label %326, label %325\n\n325:                                              ; preds = %322\n  call void @_ZdlPv(i8* %323) #7\n  br label %326\n\n326:                                              ; preds = %322, %325\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %16) #7\n  ret void\n\n327:                                              ; preds = %200, %311, %306, %134\n  %328 = phi { i8*, i32 } [ %135, %134 ], [ %201, %200 ], [ %312, %311 ], [ %307, %306 ]\n  %329 = load i8*, i8** %20, align 8, !tbaa !15\n  %330 = icmp eq i8* %329, %19\n  br i1 %330, label %332, label %331\n\n331:                                              ; preds = %327\n  call void @_ZdlPv(i8* %329) #7\n  br label %332\n\n332:                                              ; preds = %331, %327\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %16) #7\n  %333 = load i8*, i8** %14, align 8, !tbaa !15\n  %334 = icmp eq i8* %333, %13\n  br i1 %334, label %336, label %335\n\n335:                                              ; preds = %332\n  call void @_ZdlPv(i8* %333) #7\n  br label %336\n\n336:                                              ; preds = %335, %332\n  resume { i8*, i32 } %328\n}\n\n; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn\ndeclare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1\n\ndeclare dso_local i32 @__gxx_personality_v0(...)\n\n; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn\ndeclare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1\n\n; Function Attrs: noinline noreturn nounwind\ndefine linkonce_odr hidden void @__clang_call_terminate(i8* %0) local_unnamed_addr #2 comdat {\n  %2 = tail call i8* @__cxa_begin_catch(i8* %0) #7\n  tail call void @_ZSt9terminatev() #8\n  unreachable\n}\n\ndeclare dso_local i8* @__cxa_begin_catch(i8*) local_unnamed_addr\n\ndeclare dso_local void @_ZSt9terminatev() local_unnamed_addr\n\n; Function Attrs: nobuiltin nounwind\ndeclare dso_local void @_ZdlPv(i8*) local_unnamed_addr #3\n\ndeclare dso_local i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32), i64* nonnull align 8 dereferenceable(8), i64) local_unnamed_addr #4\n\n; Function Attrs: argmemonly mustprogress nofree nounwind willreturn\ndeclare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #5\n\ndeclare dso_local nonnull align 8 dereferenceable(32) %\"class.std::__cxx11::basic_string\"* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEmmmc(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32), i64, i64, i64, i8 signext) local_unnamed_addr #4\n\ndeclare dso_local nonnull align 8 dereferenceable(32) %\"class.std::__cxx11::basic_string\"* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32), i8*, i64) local_unnamed_addr #4\n\ndeclare dso_local nonnull align 8 dereferenceable(32) %\"class.std::__cxx11::basic_string\"* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32), i64, i64, i8*, i64) local_unnamed_addr #4\n\ndeclare dso_local void @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_eraseEmm(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32), i64, i64) local_unnamed_addr #4\n\n; Function Attrs: inaccessiblememonly nofree nosync nounwind willreturn\ndeclare void @llvm.experimental.noalias.scope.decl(metadata) #6\n\nattributes #0 = { uwtable \"frame-pointer\"=\"none\" \"min-legal-vector-width\"=\"0\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #1 = { argmemonly mustprogress nofree nosync nounwind willreturn }\nattributes #2 = { noinline noreturn nounwind }\nattributes #3 = { nobuiltin nounwind \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #4 = { \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #5 = { argmemonly mustprogress nofree nounwind willreturn }\nattributes #6 = { inaccessiblememonly nofree nosync nounwind willreturn }\nattributes #7 = { nounwind }\nattributes #8 = { noreturn nounwind }\n\n!llvm.module.flags = !{!0, !1}\n!llvm.ident = !{!2}\n\n!0 = !{i32 1, !\"wchar_size\", i32 4}\n!1 = !{i32 7, !\"uwtable\", i32 1}\n!2 = !{!\"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)\"}\n!3 = !{!4, !5, i64 0}\n!4 = !{!\"_ZTSNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderE\", !5, i64 0}\n!5 = !{!\"any pointer\", !6, i64 0}\n!6 = !{!\"omnipotent char\", !7, i64 0}\n!7 = !{!\"Simple C++ TBAA\"}\n!8 = !{!9, !10, i64 8}\n!9 = !{!\"_ZTSNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE\", !4, i64 0, !10, i64 8, !6, i64 16}\n!10 = !{!\"long\", !6, i64 0}\n!11 = !{!6, !6, i64 0}\n!12 = !{!13}\n!13 = distinct !{!13, !14, !\"_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_S5_: argument 0\"}\n!14 = distinct !{!14, !\"_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_S5_\"}\n!15 = !{!9, !5, i64 0}\n!16 = !{!10, !10, i64 0}\n!17 = !{!18}\n!18 = distinct !{!18, !19, !\"_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_S5_: argument 0\"}\n!19 = distinct !{!19, !\"_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_S5_\"}\n!20 = distinct !{!20, !21}\n!21 = !{!\"llvm.loop.mustprogress\"}\n!22 = !{!23}\n!23 = distinct !{!23, !24, !\"_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_SA_: argument 0\"}\n!24 = distinct !{!24, !\"_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_SA_\"}\n!25 = !{!26}\n!26 = distinct !{!26, !27, !\"_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_S5_: argument 0\"}\n!27 = distinct !{!27, !\"_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_S5_\"}\n!28 = distinct !{!28, !21}\n", "target": "This is the targeted source code:\n/*\nYou are given a string representing a sentence,\nthe sentence contains some words separated by a space,\nand you have to return a string that contains the words from the original sentence,\nwhose lengths are prime numbers,\nthe order of the words in the new string should be the same as the original one.\n\nExample 1:\n    Input: sentence = \"This is a test\"\n    Output: \"is\"\n\nExample 2:\n    Input: sentence = \"lets go for swimming\"\n    Output: \"go for\"\n\nConstraints:\n    * 1 <= len(sentence) <= 100\n    * sentence contains only letters\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring words_in_sentence(string sentence){\n\n    string out=\"\";\n    string current=\"\";\n    sentence=sentence+' ';\n\n    for (int i=0;i<sentence.size();i++)\n    if (sentence[i]!=' ') current=current+sentence[i];\n    else\n    {\n        bool isp=true;\n        int l=current.length();\n        if (l<2) isp=false;\n        for (int j=2;j*j<=l;j++)\n            if (l%j==0) isp=false;\n        if (isp) out=out+current+' ';\n        current=\"\";        \n    }\n    if (out.length()>0)\n        out.pop_back();\n    return out;\n}\n"}
{"input": "Convert this to C++:\n; ModuleID = '../../Human_xBenchmarks_164/CPP_144/CPP_144.cpp'\nsource_filename = \"../../Human_xBenchmarks_164/CPP_144/CPP_144.cpp\"\ntarget datalayout = \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\ntarget triple = \"x86_64-unknown-linux-gnu\"\n\n%\"class.std::__cxx11::basic_string\" = type { %\"struct.std::__cxx11::basic_string<char>::_Alloc_hider\", i64, %union.anon }\n%\"struct.std::__cxx11::basic_string<char>::_Alloc_hider\" = type { i8* }\n%union.anon = type { i64, [8 x i8] }\n\n@.str = private unnamed_addr constant [21 x i8] c\"basic_string::substr\\00\", align 1\n@.str.1 = private unnamed_addr constant [55 x i8] c\"%s: __pos (which is %zu) > this->size() (which is %zu)\\00\", align 1\n\n; Function Attrs: uwtable\ndefine dso_local zeroext i1 @_Z8simplifyNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES4_(%\"class.std::__cxx11::basic_string\"* nocapture readonly %0, %\"class.std::__cxx11::basic_string\"* nocapture readonly %1) local_unnamed_addr #0 personality i32 (...)* @__gxx_personality_v0 {\n  %3 = alloca i64, align 8\n  %4 = alloca i64, align 8\n  %5 = alloca i64, align 8\n  %6 = alloca i64, align 8\n  %7 = alloca %\"class.std::__cxx11::basic_string\", align 8\n  %8 = alloca %\"class.std::__cxx11::basic_string\", align 8\n  %9 = alloca %\"class.std::__cxx11::basic_string\", align 8\n  %10 = alloca %\"class.std::__cxx11::basic_string\", align 8\n  %11 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 1\n  %12 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 0, i32 0\n  %13 = bitcast %\"class.std::__cxx11::basic_string\"* %7 to i8*\n  %14 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %7, i64 0, i32 2\n  %15 = bitcast %\"class.std::__cxx11::basic_string\"* %7 to %union.anon**\n  %16 = bitcast %union.anon* %14 to i8*\n  %17 = bitcast i64* %6 to i8*\n  %18 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %7, i64 0, i32 0, i32 0\n  %19 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %7, i64 0, i32 2, i32 0\n  %20 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %7, i64 0, i32 1\n  %21 = bitcast %\"class.std::__cxx11::basic_string\"* %8 to i8*\n  %22 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %8, i64 0, i32 2\n  %23 = bitcast %\"class.std::__cxx11::basic_string\"* %8 to %union.anon**\n  %24 = bitcast %union.anon* %22 to i8*\n  %25 = bitcast i64* %5 to i8*\n  %26 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %8, i64 0, i32 0, i32 0\n  %27 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %8, i64 0, i32 2, i32 0\n  %28 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %8, i64 0, i32 1\n  %29 = load i64, i64* %11, align 8, !tbaa !3\n  %30 = icmp eq i64 %29, 0\n  br i1 %30, label %31, label %54\n\n31:                                               ; preds = %117, %2\n  %32 = phi i32 [ undef, %2 ], [ %120, %117 ]\n  %33 = phi i32 [ undef, %2 ], [ %121, %117 ]\n  %34 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %1, i64 0, i32 1\n  %35 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %1, i64 0, i32 0, i32 0\n  %36 = bitcast %\"class.std::__cxx11::basic_string\"* %9 to i8*\n  %37 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %9, i64 0, i32 2\n  %38 = bitcast %\"class.std::__cxx11::basic_string\"* %9 to %union.anon**\n  %39 = bitcast %union.anon* %37 to i8*\n  %40 = bitcast i64* %4 to i8*\n  %41 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %9, i64 0, i32 0, i32 0\n  %42 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %9, i64 0, i32 2, i32 0\n  %43 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %9, i64 0, i32 1\n  %44 = bitcast %\"class.std::__cxx11::basic_string\"* %10 to i8*\n  %45 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %10, i64 0, i32 2\n  %46 = bitcast %\"class.std::__cxx11::basic_string\"* %10 to %union.anon**\n  %47 = bitcast %union.anon* %45 to i8*\n  %48 = bitcast i64* %3 to i8*\n  %49 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %10, i64 0, i32 0, i32 0\n  %50 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %10, i64 0, i32 2, i32 0\n  %51 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %10, i64 0, i32 1\n  %52 = load i64, i64* %34, align 8, !tbaa !3\n  %53 = icmp eq i64 %52, 0\n  br i1 %53, label %192, label %123\n\n54:                                               ; preds = %2, %117\n  %55 = phi i64 [ %119, %117 ], [ %29, %2 ]\n  %56 = phi i64 [ %118, %117 ], [ 0, %2 ]\n  %57 = phi i32 [ %121, %117 ], [ undef, %2 ]\n  %58 = phi i32 [ %120, %117 ], [ undef, %2 ]\n  %59 = load i8*, i8** %12, align 8, !tbaa !10\n  %60 = getelementptr inbounds i8, i8* %59, i64 %56\n  %61 = load i8, i8* %60, align 1, !tbaa !11\n  %62 = icmp eq i8 %61, 47\n  br i1 %62, label %65, label %63\n\n63:                                               ; preds = %54\n  %64 = add nuw i64 %56, 1\n  br label %117\n\n65:                                               ; preds = %54\n  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %13) #8\n  call void @llvm.experimental.noalias.scope.decl(metadata !12)\n  store %union.anon* %14, %union.anon** %15, align 8, !tbaa !15, !alias.scope !12\n  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %17) #8, !noalias !12\n  store i64 %56, i64* %6, align 8, !tbaa !16, !noalias !12\n  %66 = icmp ugt i64 %56, 15\n  br i1 %66, label %67, label %70\n\n67:                                               ; preds = %65\n  %68 = call i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %7, i64* nonnull align 8 dereferenceable(8) %6, i64 0)\n  store i8* %68, i8** %18, align 8, !tbaa !10, !alias.scope !12\n  %69 = load i64, i64* %6, align 8, !tbaa !16, !noalias !12\n  store i64 %69, i64* %19, align 8, !tbaa !11, !alias.scope !12\n  br label %70\n\n70:                                               ; preds = %67, %65\n  %71 = phi i8* [ %68, %67 ], [ %16, %65 ]\n  %72 = trunc i64 %56 to i32\n  switch i32 %72, label %75 [\n    i32 1, label %73\n    i32 0, label %76\n  ]\n\n73:                                               ; preds = %70\n  %74 = load i8, i8* %59, align 1, !tbaa !11\n  store i8 %74, i8* %71, align 1, !tbaa !11\n  br label %76\n\n75:                                               ; preds = %70\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %71, i8* nonnull align 1 %59, i64 %56, i1 false) #8\n  br label %76\n\n76:                                               ; preds = %70, %73, %75\n  %77 = load i64, i64* %6, align 8, !tbaa !16, !noalias !12\n  store i64 %77, i64* %20, align 8, !tbaa !3, !alias.scope !12\n  %78 = load i8*, i8** %18, align 8, !tbaa !10, !alias.scope !12\n  %79 = getelementptr inbounds i8, i8* %78, i64 %77\n  store i8 0, i8* %79, align 1, !tbaa !11\n  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %17) #8, !noalias !12\n  %80 = load i8*, i8** %18, align 8, !tbaa !10\n  %81 = call i64 @strtol(i8* nocapture nonnull %80, i8** null, i32 10) #8\n  %82 = trunc i64 %81 to i32\n  %83 = load i8*, i8** %18, align 8, !tbaa !10\n  %84 = icmp eq i8* %83, %16\n  br i1 %84, label %86, label %85\n\n85:                                               ; preds = %76\n  call void @_ZdlPv(i8* %83) #8\n  br label %86\n\n86:                                               ; preds = %76, %85\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %13) #8\n  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %21) #8\n  %87 = add nuw i64 %56, 1\n  call void @llvm.experimental.noalias.scope.decl(metadata !17)\n  %88 = load i64, i64* %11, align 8, !tbaa !3, !noalias !17\n  %89 = icmp ugt i64 %88, %56\n  br i1 %89, label %92, label %90\n\n90:                                               ; preds = %86\n  %91 = and i64 %87, 4294967295\n  call void (i8*, ...) @_ZSt24__throw_out_of_range_fmtPKcz(i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str, i64 0, i64 0), i64 %91, i64 %88) #9, !noalias !17\n  unreachable\n\n92:                                               ; preds = %86\n  store %union.anon* %22, %union.anon** %23, align 8, !tbaa !15, !alias.scope !17\n  %93 = load i8*, i8** %12, align 8, !tbaa !10, !noalias !17\n  %94 = getelementptr inbounds i8, i8* %93, i64 %87\n  %95 = sub i64 %88, %87\n  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %25) #8, !noalias !17\n  store i64 %95, i64* %5, align 8, !tbaa !16, !noalias !17\n  %96 = icmp ugt i64 %95, 15\n  br i1 %96, label %97, label %100\n\n97:                                               ; preds = %92\n  %98 = call i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %8, i64* nonnull align 8 dereferenceable(8) %5, i64 0)\n  store i8* %98, i8** %26, align 8, !tbaa !10, !alias.scope !17\n  %99 = load i64, i64* %5, align 8, !tbaa !16, !noalias !17\n  store i64 %99, i64* %27, align 8, !tbaa !11, !alias.scope !17\n  br label %100\n\n100:                                              ; preds = %97, %92\n  %101 = phi i8* [ %98, %97 ], [ %24, %92 ]\n  switch i64 %95, label %104 [\n    i64 1, label %102\n    i64 0, label %105\n  ]\n\n102:                                              ; preds = %100\n  %103 = load i8, i8* %94, align 1, !tbaa !11\n  store i8 %103, i8* %101, align 1, !tbaa !11\n  br label %105\n\n104:                                              ; preds = %100\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %101, i8* nonnull align 1 %94, i64 %95, i1 false) #8\n  br label %105\n\n105:                                              ; preds = %100, %102, %104\n  %106 = load i64, i64* %5, align 8, !tbaa !16, !noalias !17\n  store i64 %106, i64* %28, align 8, !tbaa !3, !alias.scope !17\n  %107 = load i8*, i8** %26, align 8, !tbaa !10, !alias.scope !17\n  %108 = getelementptr inbounds i8, i8* %107, i64 %106\n  store i8 0, i8* %108, align 1, !tbaa !11\n  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %25) #8, !noalias !17\n  %109 = load i8*, i8** %26, align 8, !tbaa !10\n  %110 = call i64 @strtol(i8* nocapture nonnull %109, i8** null, i32 10) #8\n  %111 = trunc i64 %110 to i32\n  %112 = load i8*, i8** %26, align 8, !tbaa !10\n  %113 = icmp eq i8* %112, %24\n  br i1 %113, label %115, label %114\n\n114:                                              ; preds = %105\n  call void @_ZdlPv(i8* %112) #8\n  br label %115\n\n115:                                              ; preds = %105, %114\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %21) #8\n  %116 = load i64, i64* %11, align 8, !tbaa !3\n  br label %117\n\n117:                                              ; preds = %63, %115\n  %118 = phi i64 [ %64, %63 ], [ %87, %115 ]\n  %119 = phi i64 [ %55, %63 ], [ %116, %115 ]\n  %120 = phi i32 [ %58, %63 ], [ %82, %115 ]\n  %121 = phi i32 [ %57, %63 ], [ %111, %115 ]\n  %122 = icmp ugt i64 %119, %118\n  br i1 %122, label %54, label %31, !llvm.loop !20\n\n123:                                              ; preds = %31, %186\n  %124 = phi i64 [ %188, %186 ], [ %52, %31 ]\n  %125 = phi i64 [ %187, %186 ], [ 0, %31 ]\n  %126 = phi i32 [ %190, %186 ], [ undef, %31 ]\n  %127 = phi i32 [ %189, %186 ], [ undef, %31 ]\n  %128 = load i8*, i8** %35, align 8, !tbaa !10\n  %129 = getelementptr inbounds i8, i8* %128, i64 %125\n  %130 = load i8, i8* %129, align 1, !tbaa !11\n  %131 = icmp eq i8 %130, 47\n  br i1 %131, label %134, label %132\n\n132:                                              ; preds = %123\n  %133 = add nuw i64 %125, 1\n  br label %186\n\n134:                                              ; preds = %123\n  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %36) #8\n  call void @llvm.experimental.noalias.scope.decl(metadata !22)\n  store %union.anon* %37, %union.anon** %38, align 8, !tbaa !15, !alias.scope !22\n  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %40) #8, !noalias !22\n  store i64 %125, i64* %4, align 8, !tbaa !16, !noalias !22\n  %135 = icmp ugt i64 %125, 15\n  br i1 %135, label %136, label %139\n\n136:                                              ; preds = %134\n  %137 = call i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %9, i64* nonnull align 8 dereferenceable(8) %4, i64 0)\n  store i8* %137, i8** %41, align 8, !tbaa !10, !alias.scope !22\n  %138 = load i64, i64* %4, align 8, !tbaa !16, !noalias !22\n  store i64 %138, i64* %42, align 8, !tbaa !11, !alias.scope !22\n  br label %139\n\n139:                                              ; preds = %136, %134\n  %140 = phi i8* [ %137, %136 ], [ %39, %134 ]\n  %141 = trunc i64 %125 to i32\n  switch i32 %141, label %144 [\n    i32 1, label %142\n    i32 0, label %145\n  ]\n\n142:                                              ; preds = %139\n  %143 = load i8, i8* %128, align 1, !tbaa !11\n  store i8 %143, i8* %140, align 1, !tbaa !11\n  br label %145\n\n144:                                              ; preds = %139\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %140, i8* nonnull align 1 %128, i64 %125, i1 false) #8\n  br label %145\n\n145:                                              ; preds = %139, %142, %144\n  %146 = load i64, i64* %4, align 8, !tbaa !16, !noalias !22\n  store i64 %146, i64* %43, align 8, !tbaa !3, !alias.scope !22\n  %147 = load i8*, i8** %41, align 8, !tbaa !10, !alias.scope !22\n  %148 = getelementptr inbounds i8, i8* %147, i64 %146\n  store i8 0, i8* %148, align 1, !tbaa !11\n  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %40) #8, !noalias !22\n  %149 = load i8*, i8** %41, align 8, !tbaa !10\n  %150 = call i64 @strtol(i8* nocapture nonnull %149, i8** null, i32 10) #8\n  %151 = trunc i64 %150 to i32\n  %152 = load i8*, i8** %41, align 8, !tbaa !10\n  %153 = icmp eq i8* %152, %39\n  br i1 %153, label %155, label %154\n\n154:                                              ; preds = %145\n  call void @_ZdlPv(i8* %152) #8\n  br label %155\n\n155:                                              ; preds = %145, %154\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %36) #8\n  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %44) #8\n  %156 = add nuw i64 %125, 1\n  call void @llvm.experimental.noalias.scope.decl(metadata !25)\n  %157 = load i64, i64* %34, align 8, !tbaa !3, !noalias !25\n  %158 = icmp ugt i64 %157, %125\n  br i1 %158, label %161, label %159\n\n159:                                              ; preds = %155\n  %160 = and i64 %156, 4294967295\n  call void (i8*, ...) @_ZSt24__throw_out_of_range_fmtPKcz(i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str, i64 0, i64 0), i64 %160, i64 %157) #9, !noalias !25\n  unreachable\n\n161:                                              ; preds = %155\n  store %union.anon* %45, %union.anon** %46, align 8, !tbaa !15, !alias.scope !25\n  %162 = load i8*, i8** %35, align 8, !tbaa !10, !noalias !25\n  %163 = getelementptr inbounds i8, i8* %162, i64 %156\n  %164 = sub i64 %157, %156\n  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %48) #8, !noalias !25\n  store i64 %164, i64* %3, align 8, !tbaa !16, !noalias !25\n  %165 = icmp ugt i64 %164, 15\n  br i1 %165, label %166, label %169\n\n166:                                              ; preds = %161\n  %167 = call i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %10, i64* nonnull align 8 dereferenceable(8) %3, i64 0)\n  store i8* %167, i8** %49, align 8, !tbaa !10, !alias.scope !25\n  %168 = load i64, i64* %3, align 8, !tbaa !16, !noalias !25\n  store i64 %168, i64* %50, align 8, !tbaa !11, !alias.scope !25\n  br label %169\n\n169:                                              ; preds = %166, %161\n  %170 = phi i8* [ %167, %166 ], [ %47, %161 ]\n  switch i64 %164, label %173 [\n    i64 1, label %171\n    i64 0, label %174\n  ]\n\n171:                                              ; preds = %169\n  %172 = load i8, i8* %163, align 1, !tbaa !11\n  store i8 %172, i8* %170, align 1, !tbaa !11\n  br label %174\n\n173:                                              ; preds = %169\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %170, i8* nonnull align 1 %163, i64 %164, i1 false) #8\n  br label %174\n\n174:                                              ; preds = %169, %171, %173\n  %175 = load i64, i64* %3, align 8, !tbaa !16, !noalias !25\n  store i64 %175, i64* %51, align 8, !tbaa !3, !alias.scope !25\n  %176 = load i8*, i8** %49, align 8, !tbaa !10, !alias.scope !25\n  %177 = getelementptr inbounds i8, i8* %176, i64 %175\n  store i8 0, i8* %177, align 1, !tbaa !11\n  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %48) #8, !noalias !25\n  %178 = load i8*, i8** %49, align 8, !tbaa !10\n  %179 = call i64 @strtol(i8* nocapture nonnull %178, i8** null, i32 10) #8\n  %180 = trunc i64 %179 to i32\n  %181 = load i8*, i8** %49, align 8, !tbaa !10\n  %182 = icmp eq i8* %181, %47\n  br i1 %182, label %184, label %183\n\n183:                                              ; preds = %174\n  call void @_ZdlPv(i8* %181) #8\n  br label %184\n\n184:                                              ; preds = %174, %183\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %44) #8\n  %185 = load i64, i64* %34, align 8, !tbaa !3\n  br label %186\n\n186:                                              ; preds = %132, %184\n  %187 = phi i64 [ %133, %132 ], [ %156, %184 ]\n  %188 = phi i64 [ %124, %132 ], [ %185, %184 ]\n  %189 = phi i32 [ %127, %132 ], [ %151, %184 ]\n  %190 = phi i32 [ %126, %132 ], [ %180, %184 ]\n  %191 = icmp ugt i64 %188, %187\n  br i1 %191, label %123, label %192, !llvm.loop !28\n\n192:                                              ; preds = %186, %31\n  %193 = phi i32 [ undef, %31 ], [ %189, %186 ]\n  %194 = phi i32 [ undef, %31 ], [ %190, %186 ]\n  %195 = mul nsw i32 %193, %32\n  %196 = mul nsw i32 %194, %33\n  %197 = srem i32 %195, %196\n  %198 = icmp eq i32 %197, 0\n  ret i1 %198\n}\n\n; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn\ndeclare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1\n\n; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn\ndeclare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1\n\n; Function Attrs: mustprogress nofree nounwind willreturn\ndeclare dso_local i64 @strtol(i8* readonly, i8** nocapture, i32) local_unnamed_addr #2\n\ndeclare dso_local i32 @__gxx_personality_v0(...)\n\n; Function Attrs: nobuiltin nounwind\ndeclare dso_local void @_ZdlPv(i8*) local_unnamed_addr #3\n\n; Function Attrs: noreturn\ndeclare dso_local void @_ZSt24__throw_out_of_range_fmtPKcz(i8*, ...) local_unnamed_addr #4\n\ndeclare dso_local i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32), i64* nonnull align 8 dereferenceable(8), i64) local_unnamed_addr #5\n\n; Function Attrs: argmemonly mustprogress nofree nounwind willreturn\ndeclare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #6\n\n; Function Attrs: inaccessiblememonly nofree nosync nounwind willreturn\ndeclare void @llvm.experimental.noalias.scope.decl(metadata) #7\n\nattributes #0 = { uwtable \"frame-pointer\"=\"none\" \"min-legal-vector-width\"=\"0\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #1 = { argmemonly mustprogress nofree nosync nounwind willreturn }\nattributes #2 = { mustprogress nofree nounwind willreturn \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #3 = { nobuiltin nounwind \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #4 = { noreturn \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #5 = { \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #6 = { argmemonly mustprogress nofree nounwind willreturn }\nattributes #7 = { inaccessiblememonly nofree nosync nounwind willreturn }\nattributes #8 = { nounwind }\nattributes #9 = { noreturn }\n\n!llvm.module.flags = !{!0, !1}\n!llvm.ident = !{!2}\n\n!0 = !{i32 1, !\"wchar_size\", i32 4}\n!1 = !{i32 7, !\"uwtable\", i32 1}\n!2 = !{!\"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)\"}\n!3 = !{!4, !9, i64 8}\n!4 = !{!\"_ZTSNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE\", !5, i64 0, !9, i64 8, !7, i64 16}\n!5 = !{!\"_ZTSNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderE\", !6, i64 0}\n!6 = !{!\"any pointer\", !7, i64 0}\n!7 = !{!\"omnipotent char\", !8, i64 0}\n!8 = !{!\"Simple C++ TBAA\"}\n!9 = !{!\"long\", !7, i64 0}\n!10 = !{!4, !6, i64 0}\n!11 = !{!7, !7, i64 0}\n!12 = !{!13}\n!13 = distinct !{!13, !14, !\"_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEmm: argument 0\"}\n!14 = distinct !{!14, !\"_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEmm\"}\n!15 = !{!5, !6, i64 0}\n!16 = !{!9, !9, i64 0}\n!17 = !{!18}\n!18 = distinct !{!18, !19, !\"_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEmm: argument 0\"}\n!19 = distinct !{!19, !\"_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEmm\"}\n!20 = distinct !{!20, !21}\n!21 = !{!\"llvm.loop.mustprogress\"}\n!22 = !{!23}\n!23 = distinct !{!23, !24, !\"_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEmm: argument 0\"}\n!24 = distinct !{!24, !\"_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEmm\"}\n!25 = !{!26}\n!26 = distinct !{!26, !27, !\"_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEmm: argument 0\"}\n!27 = distinct !{!27, !\"_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEmm\"}\n!28 = distinct !{!28, !21}\n", "target": "This is the targeted source code:\n/*\nYour task is to implement a function that will simplify the expression\nx * n. The function returns true if x * n evaluates to a whole number and false\notherwise. Both x and n, are string representation of a fraction, and have the following format,\n<numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\nYou can assume that x, and n are valid fractions, and do not have zero as denominator.\n\nsimplify(\"1/5\", \"5/1\") = true\nsimplify(\"1/6\", \"2/1\") = false\nsimplify(\"7/10\", \"10/2\") = false\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool simplify(string x,string n){\n\n    int a,b,c,d,i;\n    for (i=0;i<x.size();i++)\n        if (x[i]=='/') \n        {\n            a=atoi(x.substr(0,i).c_str());\n            b=atoi(x.substr(i+1).c_str());\n        }\n    for (i=0;i<n.size();i++)\n        if (n[i]=='/') \n        {\n            c=atoi(n.substr(0,i).c_str());\n            d=atoi(n.substr(i+1).c_str());\n        }\n    if ((a*c)%(b*d)==0) return true;\n    return false;\n}\n"}
{"input": "Convert this to C++:\n; ModuleID = '../../Human_xBenchmarks_164/CPP_145/CPP_145.cpp'\nsource_filename = \"../../Human_xBenchmarks_164/CPP_145/CPP_145.cpp\"\ntarget datalayout = \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\ntarget triple = \"x86_64-unknown-linux-gnu\"\n\n%\"class.std::vector\" = type { %\"struct.std::_Vector_base\" }\n%\"struct.std::_Vector_base\" = type { %\"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl\" }\n%\"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl\" = type { %\"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl_data\" }\n%\"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl_data\" = type { i32*, i32*, i32* }\n%\"class.std::__cxx11::basic_string\" = type { %\"struct.std::__cxx11::basic_string<char>::_Alloc_hider\", i64, %union.anon }\n%\"struct.std::__cxx11::basic_string<char>::_Alloc_hider\" = type { i8* }\n%union.anon = type { i64, [8 x i8] }\n%struct.__va_list_tag = type { i32, i32, i8*, i8* }\n\n$_ZN9__gnu_cxx12__to_xstringINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcEET_PFiPT0_mPKS8_P13__va_list_tagEmSB_z = comdat any\n\n@.str = private unnamed_addr constant [3 x i8] c\"%d\\00\", align 1\n@.str.2 = private unnamed_addr constant [26 x i8] c\"vector::_M_realloc_insert\\00\", align 1\n\n; Function Attrs: uwtable\ndefine dso_local void @_Z15order_by_pointsSt6vectorIiSaIiEE(%\"class.std::vector\"* noalias nocapture sret(%\"class.std::vector\") align 8 %0, %\"class.std::vector\"* nocapture %1) local_unnamed_addr #0 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {\n  %3 = alloca %\"class.std::__cxx11::basic_string\", align 8\n  %4 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %1, i64 0, i32 0, i32 0, i32 0, i32 1\n  %5 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %1, i64 0, i32 0, i32 0, i32 0, i32 0\n  %6 = bitcast %\"class.std::__cxx11::basic_string\"* %3 to i8*\n  %7 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %3, i64 0, i32 1\n  %8 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %3, i64 0, i32 0, i32 0\n  %9 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %3, i64 0, i32 2\n  %10 = bitcast %union.anon* %9 to i8*\n  %11 = load i32*, i32** %4, align 8, !tbaa !3\n  %12 = load i32*, i32** %5, align 8, !tbaa !8\n  %13 = icmp eq i32* %11, %12\n  br i1 %13, label %221, label %37\n\n14:                                               ; preds = %206\n  %15 = icmp ult i64 %213, 2\n  br i1 %15, label %221, label %16\n\n16:                                               ; preds = %14, %34\n  %17 = phi i64 [ %35, %34 ], [ 0, %14 ]\n  br label %18\n\n18:                                               ; preds = %16, %31\n  %19 = phi i64 [ 1, %16 ], [ %32, %31 ]\n  %20 = add nsw i64 %19, -1\n  %21 = getelementptr inbounds i32, i32* %199, i64 %20\n  %22 = load i32, i32* %21, align 4, !tbaa !9\n  %23 = getelementptr inbounds i32, i32* %199, i64 %19\n  %24 = load i32, i32* %23, align 4, !tbaa !9\n  %25 = icmp sgt i32 %22, %24\n  br i1 %25, label %26, label %31\n\n26:                                               ; preds = %18\n  store i32 %22, i32* %23, align 4, !tbaa !9\n  store i32 %24, i32* %21, align 4, !tbaa !9\n  %27 = getelementptr inbounds i32, i32* %209, i64 %19\n  %28 = load i32, i32* %27, align 4, !tbaa !9\n  %29 = getelementptr inbounds i32, i32* %209, i64 %20\n  %30 = load i32, i32* %29, align 4, !tbaa !9\n  store i32 %30, i32* %27, align 4, !tbaa !9\n  store i32 %28, i32* %29, align 4, !tbaa !9\n  br label %31\n\n31:                                               ; preds = %26, %18\n  %32 = add nuw nsw i64 %19, 1\n  %33 = icmp eq i64 %32, %213\n  br i1 %33, label %34, label %18, !llvm.loop !11\n\n34:                                               ; preds = %31\n  %35 = add nuw nsw i64 %17, 1\n  %36 = icmp eq i64 %35, %213\n  br i1 %36, label %221, label %16, !llvm.loop !13\n\n37:                                               ; preds = %2, %206\n  %38 = phi i64 [ %207, %206 ], [ 0, %2 ]\n  %39 = phi i32* [ %209, %206 ], [ %12, %2 ]\n  %40 = phi i32* [ %201, %206 ], [ null, %2 ]\n  %41 = phi i32* [ %202, %206 ], [ null, %2 ]\n  %42 = phi i32* [ %199, %206 ], [ null, %2 ]\n  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %6) #12\n  %43 = getelementptr inbounds i32, i32* %39, i64 %38\n  %44 = load i32, i32* %43, align 4, !tbaa !9\n  %45 = call i32 @llvm.abs.i32(i32 %44, i1 true)\n  invoke void (%\"class.std::__cxx11::basic_string\"*, i32 (i8*, i64, i8*, %struct.__va_list_tag*)*, i64, i8*, ...) @_ZN9__gnu_cxx12__to_xstringINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcEET_PFiPT0_mPKS8_P13__va_list_tagEmSB_z(%\"class.std::__cxx11::basic_string\"* nonnull sret(%\"class.std::__cxx11::basic_string\") align 8 %3, i32 (i8*, i64, i8*, %struct.__va_list_tag*)* nonnull @vsnprintf, i64 16, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %45)\n          to label %46 unwind label %141\n\n46:                                               ; preds = %37\n  %47 = load i64, i64* %7, align 8, !tbaa !14\n  %48 = load i8*, i8** %8, align 8\n  %49 = icmp ugt i64 %47, 1\n  br i1 %49, label %50, label %127\n\n50:                                               ; preds = %46\n  %51 = add i64 %47, -1\n  %52 = icmp ult i64 %51, 8\n  br i1 %52, label %124, label %53\n\n53:                                               ; preds = %50\n  %54 = and i64 %51, -8\n  %55 = or i64 %54, 1\n  %56 = add i64 %54, -8\n  %57 = lshr exact i64 %56, 3\n  %58 = add nuw nsw i64 %57, 1\n  %59 = and i64 %58, 1\n  %60 = icmp eq i64 %56, 0\n  br i1 %60, label %97, label %61\n\n61:                                               ; preds = %53\n  %62 = and i64 %58, 4611686018427387902\n  br label %63\n\n63:                                               ; preds = %63, %61\n  %64 = phi i64 [ 0, %61 ], [ %94, %63 ]\n  %65 = phi <4 x i32> [ zeroinitializer, %61 ], [ %92, %63 ]\n  %66 = phi <4 x i32> [ zeroinitializer, %61 ], [ %93, %63 ]\n  %67 = phi i64 [ %62, %61 ], [ %95, %63 ]\n  %68 = or i64 %64, 1\n  %69 = getelementptr inbounds i8, i8* %48, i64 %68\n  %70 = bitcast i8* %69 to <4 x i8>*\n  %71 = load <4 x i8>, <4 x i8>* %70, align 1, !tbaa !18\n  %72 = getelementptr inbounds i8, i8* %69, i64 4\n  %73 = bitcast i8* %72 to <4 x i8>*\n  %74 = load <4 x i8>, <4 x i8>* %73, align 1, !tbaa !18\n  %75 = sext <4 x i8> %71 to <4 x i32>\n  %76 = sext <4 x i8> %74 to <4 x i32>\n  %77 = add <4 x i32> %65, <i32 -48, i32 -48, i32 -48, i32 -48>\n  %78 = add <4 x i32> %66, <i32 -48, i32 -48, i32 -48, i32 -48>\n  %79 = add <4 x i32> %77, %75\n  %80 = add <4 x i32> %78, %76\n  %81 = or i64 %64, 9\n  %82 = getelementptr inbounds i8, i8* %48, i64 %81\n  %83 = bitcast i8* %82 to <4 x i8>*\n  %84 = load <4 x i8>, <4 x i8>* %83, align 1, !tbaa !18\n  %85 = getelementptr inbounds i8, i8* %82, i64 4\n  %86 = bitcast i8* %85 to <4 x i8>*\n  %87 = load <4 x i8>, <4 x i8>* %86, align 1, !tbaa !18\n  %88 = sext <4 x i8> %84 to <4 x i32>\n  %89 = sext <4 x i8> %87 to <4 x i32>\n  %90 = add <4 x i32> %79, <i32 -48, i32 -48, i32 -48, i32 -48>\n  %91 = add <4 x i32> %80, <i32 -48, i32 -48, i32 -48, i32 -48>\n  %92 = add <4 x i32> %90, %88\n  %93 = add <4 x i32> %91, %89\n  %94 = add nuw i64 %64, 16\n  %95 = add i64 %67, -2\n  %96 = icmp eq i64 %95, 0\n  br i1 %96, label %97, label %63, !llvm.loop !19\n\n97:                                               ; preds = %63, %53\n  %98 = phi <4 x i32> [ undef, %53 ], [ %92, %63 ]\n  %99 = phi <4 x i32> [ undef, %53 ], [ %93, %63 ]\n  %100 = phi i64 [ 0, %53 ], [ %94, %63 ]\n  %101 = phi <4 x i32> [ zeroinitializer, %53 ], [ %92, %63 ]\n  %102 = phi <4 x i32> [ zeroinitializer, %53 ], [ %93, %63 ]\n  %103 = icmp eq i64 %59, 0\n  br i1 %103, label %118, label %104\n\n104:                                              ; preds = %97\n  %105 = or i64 %100, 1\n  %106 = getelementptr inbounds i8, i8* %48, i64 %105\n  %107 = add <4 x i32> %102, <i32 -48, i32 -48, i32 -48, i32 -48>\n  %108 = getelementptr inbounds i8, i8* %106, i64 4\n  %109 = bitcast i8* %108 to <4 x i8>*\n  %110 = load <4 x i8>, <4 x i8>* %109, align 1, !tbaa !18\n  %111 = sext <4 x i8> %110 to <4 x i32>\n  %112 = add <4 x i32> %107, %111\n  %113 = add <4 x i32> %101, <i32 -48, i32 -48, i32 -48, i32 -48>\n  %114 = bitcast i8* %106 to <4 x i8>*\n  %115 = load <4 x i8>, <4 x i8>* %114, align 1, !tbaa !18\n  %116 = sext <4 x i8> %115 to <4 x i32>\n  %117 = add <4 x i32> %113, %116\n  br label %118\n\n118:                                              ; preds = %97, %104\n  %119 = phi <4 x i32> [ %98, %97 ], [ %117, %104 ]\n  %120 = phi <4 x i32> [ %99, %97 ], [ %112, %104 ]\n  %121 = add <4 x i32> %120, %119\n  %122 = call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %121)\n  %123 = icmp eq i64 %51, %54\n  br i1 %123, label %127, label %124\n\n124:                                              ; preds = %50, %118\n  %125 = phi i64 [ 1, %50 ], [ %55, %118 ]\n  %126 = phi i32 [ 0, %50 ], [ %122, %118 ]\n  br label %143\n\n127:                                              ; preds = %143, %118, %46\n  %128 = phi i32 [ 0, %46 ], [ %122, %118 ], [ %150, %143 ]\n  %129 = load i32*, i32** %5, align 8, !tbaa !8\n  %130 = getelementptr inbounds i32, i32* %129, i64 %38\n  %131 = load i32, i32* %130, align 4, !tbaa !9\n  %132 = icmp sgt i32 %131, 0\n  %133 = load i8, i8* %48, align 1, !tbaa !18\n  %134 = sext i8 %133 to i32\n  %135 = add i32 %128, 48\n  %136 = sub i32 %135, %134\n  %137 = add i32 %128, -48\n  %138 = add i32 %137, %134\n  %139 = select i1 %132, i32 %138, i32 %136\n  %140 = icmp eq i32* %41, %40\n  br i1 %140, label %163, label %162\n\n141:                                              ; preds = %37\n  %142 = landingpad { i8*, i32 }\n          cleanup\n  br label %215\n\n143:                                              ; preds = %124, %143\n  %144 = phi i64 [ %151, %143 ], [ %125, %124 ]\n  %145 = phi i32 [ %150, %143 ], [ %126, %124 ]\n  %146 = getelementptr inbounds i8, i8* %48, i64 %144\n  %147 = load i8, i8* %146, align 1, !tbaa !18\n  %148 = sext i8 %147 to i32\n  %149 = add i32 %145, -48\n  %150 = add i32 %149, %148\n  %151 = add nuw nsw i64 %144, 1\n  %152 = icmp eq i64 %151, %47\n  br i1 %152, label %127, label %143, !llvm.loop !21\n\n153:                                              ; preds = %180\n  %154 = landingpad { i8*, i32 }\n          cleanup\n  br label %157\n\n155:                                              ; preds = %169\n  %156 = landingpad { i8*, i32 }\n          cleanup\n  br label %157\n\n157:                                              ; preds = %155, %153\n  %158 = phi { i8*, i32 } [ %154, %153 ], [ %156, %155 ]\n  %159 = load i8*, i8** %8, align 8, !tbaa !23\n  %160 = icmp eq i8* %159, %10\n  br i1 %160, label %215, label %161\n\n161:                                              ; preds = %157\n  call void @_ZdlPv(i8* %159) #12\n  br label %215\n\n162:                                              ; preds = %127\n  store i32 %139, i32* %41, align 4, !tbaa !9\n  br label %198\n\n163:                                              ; preds = %127\n  %164 = ptrtoint i32* %40 to i64\n  %165 = ptrtoint i32* %42 to i64\n  %166 = sub i64 %164, %165\n  %167 = ashr exact i64 %166, 2\n  %168 = icmp eq i64 %166, 9223372036854775804\n  br i1 %168, label %169, label %171\n\n169:                                              ; preds = %163\n  invoke void @_ZSt20__throw_length_errorPKc(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.2, i64 0, i64 0)) #13\n          to label %170 unwind label %155\n\n170:                                              ; preds = %169\n  unreachable\n\n171:                                              ; preds = %163\n  %172 = icmp eq i64 %166, 0\n  %173 = select i1 %172, i64 1, i64 %167\n  %174 = add nsw i64 %173, %167\n  %175 = icmp ult i64 %174, %167\n  %176 = icmp ugt i64 %174, 2305843009213693951\n  %177 = or i1 %175, %176\n  %178 = select i1 %177, i64 2305843009213693951, i64 %174\n  %179 = icmp eq i64 %178, 0\n  br i1 %179, label %185, label %180\n\n180:                                              ; preds = %171\n  %181 = shl nuw nsw i64 %178, 2\n  %182 = invoke noalias nonnull i8* @_Znwm(i64 %181) #14\n          to label %183 unwind label %153\n\n183:                                              ; preds = %180\n  %184 = bitcast i8* %182 to i32*\n  br label %185\n\n185:                                              ; preds = %183, %171\n  %186 = phi i32* [ %184, %183 ], [ null, %171 ]\n  %187 = getelementptr inbounds i32, i32* %186, i64 %167\n  store i32 %139, i32* %187, align 4, !tbaa !9\n  %188 = icmp sgt i64 %166, 0\n  br i1 %188, label %189, label %192\n\n189:                                              ; preds = %185\n  %190 = bitcast i32* %186 to i8*\n  %191 = bitcast i32* %42 to i8*\n  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %190, i8* align 4 %191, i64 %166, i1 false) #12\n  br label %192\n\n192:                                              ; preds = %185, %189\n  %193 = icmp eq i32* %42, null\n  br i1 %193, label %196, label %194\n\n194:                                              ; preds = %192\n  %195 = bitcast i32* %42 to i8*\n  call void @_ZdlPv(i8* nonnull %195) #12\n  br label %196\n\n196:                                              ; preds = %194, %192\n  %197 = getelementptr inbounds i32, i32* %186, i64 %178\n  br label %198\n\n198:                                              ; preds = %196, %162\n  %199 = phi i32* [ %186, %196 ], [ %42, %162 ]\n  %200 = phi i32* [ %187, %196 ], [ %41, %162 ]\n  %201 = phi i32* [ %197, %196 ], [ %40, %162 ]\n  %202 = getelementptr inbounds i32, i32* %200, i64 1\n  %203 = load i8*, i8** %8, align 8, !tbaa !23\n  %204 = icmp eq i8* %203, %10\n  br i1 %204, label %206, label %205\n\n205:                                              ; preds = %198\n  call void @_ZdlPv(i8* %203) #12\n  br label %206\n\n206:                                              ; preds = %198, %205\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %6) #12\n  %207 = add nuw i64 %38, 1\n  %208 = load i32*, i32** %4, align 8, !tbaa !3\n  %209 = load i32*, i32** %5, align 8, !tbaa !8\n  %210 = ptrtoint i32* %208 to i64\n  %211 = ptrtoint i32* %209 to i64\n  %212 = sub i64 %210, %211\n  %213 = ashr exact i64 %212, 2\n  %214 = icmp ugt i64 %213, %207\n  br i1 %214, label %37, label %14, !llvm.loop !24\n\n215:                                              ; preds = %161, %157, %141\n  %216 = phi { i8*, i32 } [ %142, %141 ], [ %158, %157 ], [ %158, %161 ]\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %6) #12\n  %217 = icmp eq i32* %42, null\n  br i1 %217, label %220, label %218\n\n218:                                              ; preds = %215\n  %219 = bitcast i32* %42 to i8*\n  call void @_ZdlPv(i8* nonnull %219) #12\n  br label %220\n\n220:                                              ; preds = %215, %218\n  resume { i8*, i32 } %216\n\n221:                                              ; preds = %34, %14, %2\n  %222 = phi i32* [ %12, %2 ], [ %209, %14 ], [ %209, %34 ]\n  %223 = phi i32* [ %11, %2 ], [ %208, %14 ], [ %208, %34 ]\n  %224 = phi i32* [ null, %2 ], [ %199, %14 ], [ %199, %34 ]\n  %225 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0, i64 0, i32 0, i32 0, i32 0, i32 0\n  store i32* %222, i32** %225, align 8, !tbaa !8\n  %226 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0, i64 0, i32 0, i32 0, i32 0, i32 1\n  store i32* %223, i32** %226, align 8, !tbaa !3\n  %227 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0, i64 0, i32 0, i32 0, i32 0, i32 2\n  %228 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %1, i64 0, i32 0, i32 0, i32 0, i32 2\n  %229 = load i32*, i32** %228, align 8, !tbaa !25\n  store i32* %229, i32** %227, align 8, !tbaa !25\n  %230 = bitcast %\"class.std::vector\"* %1 to i8*\n  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(24) %230, i8 0, i64 24, i1 false) #12\n  %231 = icmp eq i32* %224, null\n  br i1 %231, label %234, label %232\n\n232:                                              ; preds = %221\n  %233 = bitcast i32* %224 to i8*\n  call void @_ZdlPv(i8* nonnull %233) #12\n  br label %234\n\n234:                                              ; preds = %221, %232\n  ret void\n}\n\n; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn\ndeclare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1\n\n; Function Attrs: argmemonly mustprogress nofree nounwind willreturn writeonly\ndeclare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2\n\ndeclare dso_local i32 @__gxx_personality_v0(...)\n\n; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn\ndeclare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1\n\n; Function Attrs: uwtable\ndefine linkonce_odr dso_local void @_ZN9__gnu_cxx12__to_xstringINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcEET_PFiPT0_mPKS8_P13__va_list_tagEmSB_z(%\"class.std::__cxx11::basic_string\"* noalias sret(%\"class.std::__cxx11::basic_string\") align 8 %0, i32 (i8*, i64, i8*, %struct.__va_list_tag*)* %1, i64 %2, i8* %3, ...) local_unnamed_addr #0 comdat personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {\n  %5 = alloca i64, align 8\n  %6 = alloca [1 x %struct.__va_list_tag], align 16\n  %7 = alloca i8, i64 %2, align 16\n  %8 = bitcast [1 x %struct.__va_list_tag]* %6 to i8*\n  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %8) #12\n  %9 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %6, i64 0, i64 0\n  call void @llvm.va_start(i8* nonnull %8)\n  %10 = call i32 %1(i8* nonnull %7, i64 %2, i8* %3, %struct.__va_list_tag* nonnull %9)\n  call void @llvm.va_end(i8* nonnull %8)\n  %11 = sext i32 %10 to i64\n  %12 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 2\n  %13 = bitcast %\"class.std::__cxx11::basic_string\"* %0 to %union.anon**\n  store %union.anon* %12, %union.anon** %13, align 8, !tbaa !26\n  %14 = bitcast %union.anon* %12 to i8*\n  %15 = bitcast i64* %5 to i8*\n  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %15) #12\n  store i64 %11, i64* %5, align 8, !tbaa !27\n  %16 = icmp ugt i32 %10, 15\n  br i1 %16, label %17, label %22\n\n17:                                               ; preds = %4\n  %18 = call i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %0, i64* nonnull align 8 dereferenceable(8) %5, i64 0)\n  %19 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 0, i32 0\n  store i8* %18, i8** %19, align 8, !tbaa !23\n  %20 = load i64, i64* %5, align 8, !tbaa !27\n  %21 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 2, i32 0\n  store i64 %20, i64* %21, align 8, !tbaa !18\n  br label %22\n\n22:                                               ; preds = %17, %4\n  %23 = phi i8* [ %18, %17 ], [ %14, %4 ]\n  switch i64 %11, label %26 [\n    i64 1, label %24\n    i64 0, label %27\n  ]\n\n24:                                               ; preds = %22\n  %25 = load i8, i8* %7, align 16, !tbaa !18\n  store i8 %25, i8* %23, align 1, !tbaa !18\n  br label %27\n\n26:                                               ; preds = %22\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %23, i8* nonnull align 16 %7, i64 %11, i1 false) #12\n  br label %27\n\n27:                                               ; preds = %26, %24, %22\n  %28 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 0, i32 0\n  %29 = load i64, i64* %5, align 8, !tbaa !27\n  %30 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 1\n  store i64 %29, i64* %30, align 8, !tbaa !14\n  %31 = load i8*, i8** %28, align 8, !tbaa !23\n  %32 = getelementptr inbounds i8, i8* %31, i64 %29\n  store i8 0, i8* %32, align 1, !tbaa !18\n  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %15) #12\n  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %8) #12\n  ret void\n}\n\n; Function Attrs: nofree nounwind\ndeclare dso_local noundef i32 @vsnprintf(i8* nocapture noundef, i64 noundef, i8* nocapture noundef readonly, %struct.__va_list_tag* noundef) #3\n\n; Function Attrs: mustprogress nofree nosync nounwind willreturn\ndeclare void @llvm.va_start(i8*) #4\n\n; Function Attrs: mustprogress nofree nosync nounwind willreturn\ndeclare void @llvm.va_end(i8*) #4\n\ndeclare dso_local i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32), i64* nonnull align 8 dereferenceable(8), i64) local_unnamed_addr #5\n\n; Function Attrs: argmemonly mustprogress nofree nounwind willreturn\ndeclare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #6\n\n; Function Attrs: nobuiltin nounwind\ndeclare dso_local void @_ZdlPv(i8*) local_unnamed_addr #7\n\n; Function Attrs: noreturn\ndeclare dso_local void @_ZSt20__throw_length_errorPKc(i8*) local_unnamed_addr #8\n\n; Function Attrs: nobuiltin allocsize(0)\ndeclare dso_local nonnull i8* @_Znwm(i64) local_unnamed_addr #9\n\n; Function Attrs: argmemonly mustprogress nofree nounwind willreturn\ndeclare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #6\n\n; Function Attrs: nofree nosync nounwind readnone speculatable willreturn\ndeclare i32 @llvm.abs.i32(i32, i1 immarg) #10\n\n; Function Attrs: nofree nosync nounwind readnone willreturn\ndeclare i32 @llvm.vector.reduce.add.v4i32(<4 x i32>) #11\n\nattributes #0 = { uwtable \"frame-pointer\"=\"none\" \"min-legal-vector-width\"=\"0\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #1 = { argmemonly mustprogress nofree nosync nounwind willreturn }\nattributes #2 = { argmemonly mustprogress nofree nounwind willreturn writeonly }\nattributes #3 = { nofree nounwind \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #4 = { mustprogress nofree nosync nounwind willreturn }\nattributes #5 = { \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #6 = { argmemonly mustprogress nofree nounwind willreturn }\nattributes #7 = { nobuiltin nounwind \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #8 = { noreturn \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #9 = { nobuiltin allocsize(0) \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #10 = { nofree nosync nounwind readnone speculatable willreturn }\nattributes #11 = { nofree nosync nounwind readnone willreturn }\nattributes #12 = { nounwind }\nattributes #13 = { noreturn }\nattributes #14 = { allocsize(0) }\n\n!llvm.module.flags = !{!0, !1}\n!llvm.ident = !{!2}\n\n!0 = !{i32 1, !\"wchar_size\", i32 4}\n!1 = !{i32 7, !\"uwtable\", i32 1}\n!2 = !{!\"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)\"}\n!3 = !{!4, !5, i64 8}\n!4 = !{!\"_ZTSNSt12_Vector_baseIiSaIiEE17_Vector_impl_dataE\", !5, i64 0, !5, i64 8, !5, i64 16}\n!5 = !{!\"any pointer\", !6, i64 0}\n!6 = !{!\"omnipotent char\", !7, i64 0}\n!7 = !{!\"Simple C++ TBAA\"}\n!8 = !{!4, !5, i64 0}\n!9 = !{!10, !10, i64 0}\n!10 = !{!\"int\", !6, i64 0}\n!11 = distinct !{!11, !12}\n!12 = !{!\"llvm.loop.mustprogress\"}\n!13 = distinct !{!13, !12}\n!14 = !{!15, !17, i64 8}\n!15 = !{!\"_ZTSNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE\", !16, i64 0, !17, i64 8, !6, i64 16}\n!16 = !{!\"_ZTSNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderE\", !5, i64 0}\n!17 = !{!\"long\", !6, i64 0}\n!18 = !{!6, !6, i64 0}\n!19 = distinct !{!19, !12, !20}\n!20 = !{!\"llvm.loop.isvectorized\", i32 1}\n!21 = distinct !{!21, !12, !22, !20}\n!22 = !{!\"llvm.loop.unroll.runtime.disable\"}\n!23 = !{!15, !5, i64 0}\n!24 = distinct !{!24, !12}\n!25 = !{!4, !5, i64 16}\n!26 = !{!16, !5, i64 0}\n!27 = !{!17, !17, i64 0}\n", "target": "This is the targeted source code:\n/*\nWrite a function which sorts the given vector of integers\nin ascending order according to the sum of their digits.\nNote: if there are several items with similar sum of their digits,\norder them based on their index in original vector.\n\nFor example:\n>>> order_by_points({1, 11, -1, -11, -12}) == {-1, -11, 1, -12, 11}\n>>> order_by_points({}) == {}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<int> order_by_points(vector<int> nums){\n\n    vector<int> sumdigit={};\n    for (int i=0;i<nums.size();i++)\n    {\n        string w=to_string(abs(nums[i]));\n        int sum=0;\n        for (int j=1;j<w.length();j++)\n            sum+=w[j]-48;\n        if (nums[i]>0) sum+=w[0]-48;\n        else sum-=w[0]-48;\n        sumdigit.push_back(sum);\n    }\n    int m;\n    for (int i=0;i<nums.size();i++)\n    for (int j=1;j<nums.size();j++)\n    if (sumdigit[j-1]>sumdigit[j])\n    {\n        m=sumdigit[j];sumdigit[j]=sumdigit[j-1];sumdigit[j-1]=m;\n        m=nums[j];nums[j]=nums[j-1];nums[j-1]=m;\n    }\n     \n    return nums;\n}\n"}
{"input": "Convert this to C++:\n; ModuleID = '../../Human_xBenchmarks_164/CPP_146/CPP_146.cpp'\nsource_filename = \"../../Human_xBenchmarks_164/CPP_146/CPP_146.cpp\"\ntarget datalayout = \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\ntarget triple = \"x86_64-unknown-linux-gnu\"\n\n%\"class.std::vector\" = type { %\"struct.std::_Vector_base\" }\n%\"struct.std::_Vector_base\" = type { %\"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl\" }\n%\"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl\" = type { %\"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl_data\" }\n%\"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl_data\" = type { i32*, i32*, i32* }\n%\"class.std::__cxx11::basic_string\" = type { %\"struct.std::__cxx11::basic_string<char>::_Alloc_hider\", i64, %union.anon }\n%\"struct.std::__cxx11::basic_string<char>::_Alloc_hider\" = type { i8* }\n%union.anon = type { i64, [8 x i8] }\n%struct.__va_list_tag = type { i32, i32, i8*, i8* }\n\n$_ZN9__gnu_cxx12__to_xstringINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcEET_PFiPT0_mPKS8_P13__va_list_tagEmSB_z = comdat any\n\n@.str = private unnamed_addr constant [3 x i8] c\"%d\\00\", align 1\n\n; Function Attrs: uwtable\ndefine dso_local i32 @_Z13specialFilterSt6vectorIiSaIiEE(%\"class.std::vector\"* nocapture readonly %0) local_unnamed_addr #0 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {\n  %2 = alloca %\"class.std::__cxx11::basic_string\", align 8\n  %3 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0, i64 0, i32 0, i32 0, i32 0, i32 1\n  %4 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0, i64 0, i32 0, i32 0, i32 0, i32 0\n  %5 = bitcast %\"class.std::__cxx11::basic_string\"* %2 to i8*\n  %6 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %2, i64 0, i32 0, i32 0\n  %7 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %2, i64 0, i32 1\n  %8 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %2, i64 0, i32 2\n  %9 = bitcast %union.anon* %8 to i8*\n  %10 = load i32*, i32** %3, align 8, !tbaa !3\n  %11 = load i32*, i32** %4, align 8, !tbaa !8\n  %12 = icmp eq i32* %10, %11\n  br i1 %12, label %13, label %15\n\n13:                                               ; preds = %44, %1\n  %14 = phi i32 [ 0, %1 ], [ %47, %44 ]\n  ret i32 %14\n\n15:                                               ; preds = %1, %44\n  %16 = phi i32* [ %45, %44 ], [ %11, %1 ]\n  %17 = phi i32* [ %46, %44 ], [ %10, %1 ]\n  %18 = phi i64 [ %48, %44 ], [ 0, %1 ]\n  %19 = phi i32 [ %47, %44 ], [ 0, %1 ]\n  %20 = getelementptr inbounds i32, i32* %16, i64 %18\n  %21 = load i32, i32* %20, align 4, !tbaa !9\n  %22 = icmp sgt i32 %21, 10\n  br i1 %22, label %23, label %44\n\n23:                                               ; preds = %15\n  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %5) #7\n  call void (%\"class.std::__cxx11::basic_string\"*, i32 (i8*, i64, i8*, %struct.__va_list_tag*)*, i64, i8*, ...) @_ZN9__gnu_cxx12__to_xstringINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcEET_PFiPT0_mPKS8_P13__va_list_tagEmSB_z(%\"class.std::__cxx11::basic_string\"* nonnull sret(%\"class.std::__cxx11::basic_string\") align 8 %2, i32 (i8*, i64, i8*, %struct.__va_list_tag*)* nonnull @vsnprintf, i64 16, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %21)\n  %24 = load i8*, i8** %6, align 8, !tbaa !11\n  %25 = load i8, i8* %24, align 1, !tbaa !15\n  %26 = srem i8 %25, 2\n  %27 = icmp eq i8 %26, 1\n  br i1 %27, label %28, label %37\n\n28:                                               ; preds = %23\n  %29 = load i64, i64* %7, align 8, !tbaa !16\n  %30 = add i64 %29, -1\n  %31 = getelementptr inbounds i8, i8* %24, i64 %30\n  %32 = load i8, i8* %31, align 1, !tbaa !15\n  %33 = srem i8 %32, 2\n  %34 = icmp eq i8 %33, 1\n  %35 = zext i1 %34 to i32\n  %36 = add nsw i32 %19, %35\n  br label %37\n\n37:                                               ; preds = %28, %23\n  %38 = phi i32 [ %19, %23 ], [ %36, %28 ]\n  %39 = icmp eq i8* %24, %9\n  br i1 %39, label %41, label %40\n\n40:                                               ; preds = %37\n  call void @_ZdlPv(i8* nonnull %24) #7\n  br label %41\n\n41:                                               ; preds = %37, %40\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %5) #7\n  %42 = load i32*, i32** %3, align 8, !tbaa !3\n  %43 = load i32*, i32** %4, align 8, !tbaa !8\n  br label %44\n\n44:                                               ; preds = %15, %41\n  %45 = phi i32* [ %43, %41 ], [ %16, %15 ]\n  %46 = phi i32* [ %42, %41 ], [ %17, %15 ]\n  %47 = phi i32 [ %38, %41 ], [ %19, %15 ]\n  %48 = add nuw i64 %18, 1\n  %49 = ptrtoint i32* %46 to i64\n  %50 = ptrtoint i32* %45 to i64\n  %51 = sub i64 %49, %50\n  %52 = ashr exact i64 %51, 2\n  %53 = icmp ugt i64 %52, %48\n  br i1 %53, label %15, label %13, !llvm.loop !17\n}\n\n; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn\ndeclare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1\n\ndeclare dso_local i32 @__gxx_personality_v0(...)\n\n; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn\ndeclare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1\n\n; Function Attrs: uwtable\ndefine linkonce_odr dso_local void @_ZN9__gnu_cxx12__to_xstringINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcEET_PFiPT0_mPKS8_P13__va_list_tagEmSB_z(%\"class.std::__cxx11::basic_string\"* noalias sret(%\"class.std::__cxx11::basic_string\") align 8 %0, i32 (i8*, i64, i8*, %struct.__va_list_tag*)* %1, i64 %2, i8* %3, ...) local_unnamed_addr #0 comdat personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {\n  %5 = alloca i64, align 8\n  %6 = alloca [1 x %struct.__va_list_tag], align 16\n  %7 = alloca i8, i64 %2, align 16\n  %8 = bitcast [1 x %struct.__va_list_tag]* %6 to i8*\n  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %8) #7\n  %9 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %6, i64 0, i64 0\n  call void @llvm.va_start(i8* nonnull %8)\n  %10 = call i32 %1(i8* nonnull %7, i64 %2, i8* %3, %struct.__va_list_tag* nonnull %9)\n  call void @llvm.va_end(i8* nonnull %8)\n  %11 = sext i32 %10 to i64\n  %12 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 2\n  %13 = bitcast %\"class.std::__cxx11::basic_string\"* %0 to %union.anon**\n  store %union.anon* %12, %union.anon** %13, align 8, !tbaa !19\n  %14 = bitcast %union.anon* %12 to i8*\n  %15 = bitcast i64* %5 to i8*\n  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %15) #7\n  store i64 %11, i64* %5, align 8, !tbaa !20\n  %16 = icmp ugt i32 %10, 15\n  br i1 %16, label %17, label %22\n\n17:                                               ; preds = %4\n  %18 = call i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %0, i64* nonnull align 8 dereferenceable(8) %5, i64 0)\n  %19 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 0, i32 0\n  store i8* %18, i8** %19, align 8, !tbaa !11\n  %20 = load i64, i64* %5, align 8, !tbaa !20\n  %21 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 2, i32 0\n  store i64 %20, i64* %21, align 8, !tbaa !15\n  br label %22\n\n22:                                               ; preds = %17, %4\n  %23 = phi i8* [ %18, %17 ], [ %14, %4 ]\n  switch i64 %11, label %26 [\n    i64 1, label %24\n    i64 0, label %27\n  ]\n\n24:                                               ; preds = %22\n  %25 = load i8, i8* %7, align 16, !tbaa !15\n  store i8 %25, i8* %23, align 1, !tbaa !15\n  br label %27\n\n26:                                               ; preds = %22\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %23, i8* nonnull align 16 %7, i64 %11, i1 false) #7\n  br label %27\n\n27:                                               ; preds = %26, %24, %22\n  %28 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 0, i32 0\n  %29 = load i64, i64* %5, align 8, !tbaa !20\n  %30 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 1\n  store i64 %29, i64* %30, align 8, !tbaa !16\n  %31 = load i8*, i8** %28, align 8, !tbaa !11\n  %32 = getelementptr inbounds i8, i8* %31, i64 %29\n  store i8 0, i8* %32, align 1, !tbaa !15\n  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %15) #7\n  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %8) #7\n  ret void\n}\n\n; Function Attrs: nofree nounwind\ndeclare dso_local noundef i32 @vsnprintf(i8* nocapture noundef, i64 noundef, i8* nocapture noundef readonly, %struct.__va_list_tag* noundef) #2\n\n; Function Attrs: mustprogress nofree nosync nounwind willreturn\ndeclare void @llvm.va_start(i8*) #3\n\n; Function Attrs: mustprogress nofree nosync nounwind willreturn\ndeclare void @llvm.va_end(i8*) #3\n\ndeclare dso_local i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32), i64* nonnull align 8 dereferenceable(8), i64) local_unnamed_addr #4\n\n; Function Attrs: argmemonly mustprogress nofree nounwind willreturn\ndeclare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #5\n\n; Function Attrs: nobuiltin nounwind\ndeclare dso_local void @_ZdlPv(i8*) local_unnamed_addr #6\n\nattributes #0 = { uwtable \"frame-pointer\"=\"none\" \"min-legal-vector-width\"=\"0\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #1 = { argmemonly mustprogress nofree nosync nounwind willreturn }\nattributes #2 = { nofree nounwind \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #3 = { mustprogress nofree nosync nounwind willreturn }\nattributes #4 = { \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #5 = { argmemonly mustprogress nofree nounwind willreturn }\nattributes #6 = { nobuiltin nounwind \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #7 = { nounwind }\n\n!llvm.module.flags = !{!0, !1}\n!llvm.ident = !{!2}\n\n!0 = !{i32 1, !\"wchar_size\", i32 4}\n!1 = !{i32 7, !\"uwtable\", i32 1}\n!2 = !{!\"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)\"}\n!3 = !{!4, !5, i64 8}\n!4 = !{!\"_ZTSNSt12_Vector_baseIiSaIiEE17_Vector_impl_dataE\", !5, i64 0, !5, i64 8, !5, i64 16}\n!5 = !{!\"any pointer\", !6, i64 0}\n!6 = !{!\"omnipotent char\", !7, i64 0}\n!7 = !{!\"Simple C++ TBAA\"}\n!8 = !{!4, !5, i64 0}\n!9 = !{!10, !10, i64 0}\n!10 = !{!\"int\", !6, i64 0}\n!11 = !{!12, !5, i64 0}\n!12 = !{!\"_ZTSNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE\", !13, i64 0, !14, i64 8, !6, i64 16}\n!13 = !{!\"_ZTSNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderE\", !5, i64 0}\n!14 = !{!\"long\", !6, i64 0}\n!15 = !{!6, !6, i64 0}\n!16 = !{!12, !14, i64 8}\n!17 = distinct !{!17, !18}\n!18 = !{!\"llvm.loop.mustprogress\"}\n!19 = !{!13, !5, i64 0}\n!20 = !{!14, !14, i64 0}\n", "target": "This is the targeted source code:\n/*\nWrite a function that takes a vector of numbers as input and returns \nthe number of elements in the vector that are greater than 10 and both \nfirst and last digits of a number are odd (1, 3, 5, 7, 9).\nFor example:\nspecialFilter({15, -73, 14, -15}) => 1 \nspecialFilter({33, -2, -3, 45, 21, 109}) => 2\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nint specialFilter(vector<int> nums){\n\n    int num=0;\n    for (int i=0;i<nums.size();i++)\n    if (nums[i]>10)\n    {\n        string w=to_string(nums[i]);\n        if (w[0]%2==1 and w[w.length()-1]%2==1) num+=1;\n    }\n    return num;\n}\n"}
{"input": "Convert this to C++:\n; ModuleID = '../../Human_xBenchmarks_164/CPP_147/CPP_147.cpp'\nsource_filename = \"../../Human_xBenchmarks_164/CPP_147/CPP_147.cpp\"\ntarget datalayout = \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\ntarget triple = \"x86_64-unknown-linux-gnu\"\n\n%\"class.std::vector.0\" = type { %\"struct.std::_Vector_base.1\" }\n%\"struct.std::_Vector_base.1\" = type { %\"struct.std::_Vector_base<std::vector<int>, std::allocator<std::vector<int>>>::_Vector_impl\" }\n%\"struct.std::_Vector_base<std::vector<int>, std::allocator<std::vector<int>>>::_Vector_impl\" = type { %\"struct.std::_Vector_base<std::vector<int>, std::allocator<std::vector<int>>>::_Vector_impl_data\" }\n%\"struct.std::_Vector_base<std::vector<int>, std::allocator<std::vector<int>>>::_Vector_impl_data\" = type { %\"class.std::vector\"*, %\"class.std::vector\"*, %\"class.std::vector\"* }\n%\"class.std::vector\" = type { %\"struct.std::_Vector_base\" }\n%\"struct.std::_Vector_base\" = type { %\"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl\" }\n%\"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl\" = type { %\"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl_data\" }\n%\"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl_data\" = type { i32*, i32*, i32* }\n\n$_ZNSt6vectorIS_IiSaIiEESaIS1_EEaSERKS3_ = comdat any\n\n$_ZNSt6vectorIS_IiSaIiEESaIS1_EED2Ev = comdat any\n\n$__clang_call_terminate = comdat any\n\n$_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPKSt6vectorIiSaIiEEPS4_EET0_T_S9_S8_ = comdat any\n\n$_ZNSt6vectorIS_IiSaIiEESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_ = comdat any\n\n$_ZNSt6vectorIS_IiSaIiEESaIS1_EE20_M_allocate_and_copyIN9__gnu_cxx17__normal_iteratorIPKS1_S3_EEEEPS1_mT_SB_ = comdat any\n\n$_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKSt6vectorIiSaIiEES4_IS6_SaIS6_EEEEPS6_EET0_T_SE_SD_ = comdat any\n\n$_ZNSt6vectorIiSaIiEEaSERKS1_ = comdat any\n\n$_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPSt6vectorIiSaIiEES5_EET0_T_S7_S6_ = comdat any\n\n$_ZNSt6vectorIS_IiSaIiEESaIS1_EE13_M_assign_auxIPKS1_EEvT_S7_St20forward_iterator_tag = comdat any\n\n$_ZNSt6vectorIS_IiSaIiEESaIS1_EE20_M_allocate_and_copyIPKS1_EEPS1_mT_S8_ = comdat any\n\n@.str = private unnamed_addr constant [49 x i8] c\"cannot create std::vector larger than max_size()\\00\", align 1\n@.str.1 = private unnamed_addr constant [26 x i8] c\"vector::_M_realloc_insert\\00\", align 1\n\n; Function Attrs: uwtable\ndefine dso_local i32 @_Z18get_matrix_triplesi(i32 %0) local_unnamed_addr #0 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {\n  %2 = alloca %\"class.std::vector.0\", align 8\n  %3 = alloca [1 x %\"class.std::vector\"], align 8\n  %4 = alloca %\"class.std::vector.0\", align 8\n  %5 = alloca [1 x %\"class.std::vector\"], align 8\n  %6 = alloca [1 x %\"class.std::vector\"], align 8\n  %7 = bitcast %\"class.std::vector.0\"* %2 to i8*\n  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %7) #11\n  %8 = bitcast [1 x %\"class.std::vector\"]* %3 to i8*\n  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %8) #11\n  %9 = getelementptr inbounds [1 x %\"class.std::vector\"], [1 x %\"class.std::vector\"]* %3, i64 0, i64 0\n  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(24) %8, i8 0, i64 24, i1 false) #11\n  %10 = invoke noalias nonnull i8* @_Znwm(i64 12) #12\n          to label %13 unwind label %11\n\n11:                                               ; preds = %1\n  %12 = landingpad { i8*, i32 }\n          cleanup\n  br label %114\n\n13:                                               ; preds = %1\n  %14 = bitcast i8* %10 to i32*\n  %15 = bitcast [1 x %\"class.std::vector\"]* %3 to i8**\n  store i8* %10, i8** %15, align 8, !tbaa !3\n  %16 = getelementptr inbounds i8, i8* %10, i64 12\n  %17 = getelementptr inbounds [1 x %\"class.std::vector\"], [1 x %\"class.std::vector\"]* %3, i64 0, i64 0, i32 0, i32 0, i32 0, i32 2\n  %18 = bitcast i32** %17 to i8**\n  store i8* %16, i8** %18, align 8, !tbaa !8\n  store i32 0, i32* %14, align 4\n  %19 = getelementptr inbounds i8, i8* %10, i64 4\n  %20 = bitcast i8* %19 to i32*\n  store i32 0, i32* %20, align 4\n  %21 = getelementptr inbounds i8, i8* %10, i64 8\n  %22 = bitcast i8* %21 to i32*\n  store i32 0, i32* %22, align 4\n  %23 = getelementptr inbounds [1 x %\"class.std::vector\"], [1 x %\"class.std::vector\"]* %3, i64 0, i64 0, i32 0, i32 0, i32 0, i32 1\n  %24 = bitcast i32** %23 to i8**\n  store i8* %16, i8** %24, align 8, !tbaa !9\n  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(24) %7, i8 0, i64 24, i1 false) #11\n  %25 = invoke noalias nonnull i8* @_Znwm(i64 24) #12\n          to label %26 unwind label %35\n\n26:                                               ; preds = %13\n  %27 = getelementptr inbounds [1 x %\"class.std::vector\"], [1 x %\"class.std::vector\"]* %3, i64 0, i64 1\n  %28 = bitcast i8* %25 to %\"class.std::vector\"*\n  %29 = getelementptr inbounds %\"class.std::vector.0\", %\"class.std::vector.0\"* %2, i64 0, i32 0, i32 0, i32 0, i32 0\n  %30 = bitcast %\"class.std::vector.0\"* %2 to i8**\n  store i8* %25, i8** %30, align 8, !tbaa !10\n  %31 = getelementptr inbounds i8, i8* %25, i64 24\n  %32 = getelementptr inbounds %\"class.std::vector.0\", %\"class.std::vector.0\"* %2, i64 0, i32 0, i32 0, i32 0, i32 2\n  %33 = bitcast %\"class.std::vector\"** %32 to i8**\n  store i8* %31, i8** %33, align 8, !tbaa !12\n  %34 = invoke %\"class.std::vector\"* @_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPKSt6vectorIiSaIiEEPS4_EET0_T_S9_S8_(%\"class.std::vector\"* nonnull %9, %\"class.std::vector\"* nonnull %27, %\"class.std::vector\"* nonnull %28)\n          to label %42 unwind label %35\n\n35:                                               ; preds = %26, %13\n  %36 = landingpad { i8*, i32 }\n          cleanup\n  %37 = getelementptr inbounds %\"class.std::vector.0\", %\"class.std::vector.0\"* %2, i64 0, i32 0, i32 0, i32 0, i32 0\n  %38 = load %\"class.std::vector\"*, %\"class.std::vector\"** %37, align 8, !tbaa !10\n  %39 = icmp eq %\"class.std::vector\"* %38, null\n  br i1 %39, label %108, label %40\n\n40:                                               ; preds = %35\n  %41 = bitcast %\"class.std::vector\"* %38 to i8*\n  call void @_ZdlPv(i8* nonnull %41) #11\n  br label %108\n\n42:                                               ; preds = %26\n  %43 = getelementptr inbounds %\"class.std::vector.0\", %\"class.std::vector.0\"* %2, i64 0, i32 0, i32 0, i32 0, i32 1\n  store %\"class.std::vector\"* %34, %\"class.std::vector\"** %43, align 8, !tbaa !13\n  %44 = getelementptr inbounds [1 x %\"class.std::vector\"], [1 x %\"class.std::vector\"]* %3, i64 0, i64 0, i32 0, i32 0, i32 0, i32 0\n  %45 = load i32*, i32** %44, align 8, !tbaa !3\n  %46 = icmp eq i32* %45, null\n  br i1 %46, label %49, label %47\n\n47:                                               ; preds = %42\n  %48 = bitcast i32* %45 to i8*\n  call void @_ZdlPv(i8* nonnull %48) #11\n  br label %49\n\n49:                                               ; preds = %47, %42\n  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %8) #11\n  %50 = bitcast %\"class.std::vector.0\"* %4 to i8*\n  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %50) #11\n  %51 = bitcast [1 x %\"class.std::vector\"]* %5 to i8*\n  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %51) #11\n  %52 = getelementptr inbounds [1 x %\"class.std::vector\"], [1 x %\"class.std::vector\"]* %5, i64 0, i64 0\n  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(24) %51, i8 0, i64 24, i1 false) #11\n  %53 = invoke noalias nonnull i8* @_Znwm(i64 12) #12\n          to label %59 unwind label %54\n\n54:                                               ; preds = %49\n  %55 = landingpad { i8*, i32 }\n          cleanup\n  %56 = getelementptr inbounds [1 x %\"class.std::vector\"], [1 x %\"class.std::vector\"]* %5, i64 0, i64 0, i32 0, i32 0, i32 0, i32 0\n  %57 = load i32*, i32** %56, align 8, !tbaa !3\n  %58 = icmp eq i32* %57, null\n  br i1 %58, label %124, label %120\n\n59:                                               ; preds = %49\n  %60 = bitcast i8* %53 to i32*\n  %61 = bitcast [1 x %\"class.std::vector\"]* %5 to i8**\n  store i8* %53, i8** %61, align 8, !tbaa !3\n  %62 = getelementptr inbounds i8, i8* %53, i64 12\n  %63 = getelementptr inbounds [1 x %\"class.std::vector\"], [1 x %\"class.std::vector\"]* %5, i64 0, i64 0, i32 0, i32 0, i32 0, i32 2\n  %64 = bitcast i32** %63 to i8**\n  store i8* %62, i8** %64, align 8, !tbaa !8\n  store i32 0, i32* %60, align 4\n  %65 = getelementptr inbounds i8, i8* %53, i64 4\n  %66 = bitcast i8* %65 to i32*\n  store i32 0, i32* %66, align 4\n  %67 = getelementptr inbounds i8, i8* %53, i64 8\n  %68 = bitcast i8* %67 to i32*\n  store i32 0, i32* %68, align 4\n  %69 = getelementptr inbounds [1 x %\"class.std::vector\"], [1 x %\"class.std::vector\"]* %5, i64 0, i64 0, i32 0, i32 0, i32 0, i32 1\n  %70 = bitcast i32** %69 to i8**\n  store i8* %62, i8** %70, align 8, !tbaa !9\n  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(24) %50, i8 0, i64 24, i1 false) #11\n  %71 = invoke noalias nonnull i8* @_Znwm(i64 24) #12\n          to label %72 unwind label %81\n\n72:                                               ; preds = %59\n  %73 = getelementptr inbounds [1 x %\"class.std::vector\"], [1 x %\"class.std::vector\"]* %5, i64 0, i64 1\n  %74 = bitcast i8* %71 to %\"class.std::vector\"*\n  %75 = getelementptr inbounds %\"class.std::vector.0\", %\"class.std::vector.0\"* %4, i64 0, i32 0, i32 0, i32 0, i32 0\n  %76 = bitcast %\"class.std::vector.0\"* %4 to i8**\n  store i8* %71, i8** %76, align 8, !tbaa !10\n  %77 = getelementptr inbounds i8, i8* %71, i64 24\n  %78 = getelementptr inbounds %\"class.std::vector.0\", %\"class.std::vector.0\"* %4, i64 0, i32 0, i32 0, i32 0, i32 2\n  %79 = bitcast %\"class.std::vector\"** %78 to i8**\n  store i8* %77, i8** %79, align 8, !tbaa !12\n  %80 = invoke %\"class.std::vector\"* @_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPKSt6vectorIiSaIiEEPS4_EET0_T_S9_S8_(%\"class.std::vector\"* nonnull %52, %\"class.std::vector\"* nonnull %73, %\"class.std::vector\"* nonnull %74)\n          to label %88 unwind label %81\n\n81:                                               ; preds = %72, %59\n  %82 = landingpad { i8*, i32 }\n          cleanup\n  %83 = getelementptr inbounds %\"class.std::vector.0\", %\"class.std::vector.0\"* %4, i64 0, i32 0, i32 0, i32 0, i32 0\n  %84 = load %\"class.std::vector\"*, %\"class.std::vector\"** %83, align 8, !tbaa !10\n  %85 = icmp eq %\"class.std::vector\"* %84, null\n  br i1 %85, label %116, label %86\n\n86:                                               ; preds = %81\n  %87 = bitcast %\"class.std::vector\"* %84 to i8*\n  call void @_ZdlPv(i8* nonnull %87) #11\n  br label %116\n\n88:                                               ; preds = %72\n  %89 = getelementptr inbounds %\"class.std::vector.0\", %\"class.std::vector.0\"* %4, i64 0, i32 0, i32 0, i32 0, i32 1\n  store %\"class.std::vector\"* %80, %\"class.std::vector\"** %89, align 8, !tbaa !13\n  %90 = getelementptr inbounds [1 x %\"class.std::vector\"], [1 x %\"class.std::vector\"]* %5, i64 0, i64 0, i32 0, i32 0, i32 0, i32 0\n  %91 = load i32*, i32** %90, align 8, !tbaa !3\n  %92 = icmp eq i32* %91, null\n  br i1 %92, label %95, label %93\n\n93:                                               ; preds = %88\n  %94 = bitcast i32* %91 to i8*\n  call void @_ZdlPv(i8* nonnull %94) #11\n  br label %95\n\n95:                                               ; preds = %93, %88\n  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %51) #11\n  %96 = icmp slt i32 %0, 1\n  %97 = add i32 %0, 1\n  br i1 %96, label %98, label %102\n\n98:                                               ; preds = %95\n  %99 = getelementptr inbounds [1 x %\"class.std::vector\"], [1 x %\"class.std::vector\"]* %6, i64 0, i64 0, i32 0, i32 0, i32 0, i32 2\n  %100 = getelementptr inbounds [1 x %\"class.std::vector\"], [1 x %\"class.std::vector\"]* %6, i64 0, i64 0, i32 0, i32 0, i32 0, i32 1\n  %101 = getelementptr inbounds [1 x %\"class.std::vector\"], [1 x %\"class.std::vector\"]* %6, i64 0, i64 1\n  br label %297\n\n102:                                              ; preds = %95\n  %103 = zext i32 %97 to i64\n  br label %126\n\n104:                                              ; preds = %229\n  %105 = getelementptr inbounds [1 x %\"class.std::vector\"], [1 x %\"class.std::vector\"]* %6, i64 0, i64 0, i32 0, i32 0, i32 0, i32 2\n  %106 = getelementptr inbounds [1 x %\"class.std::vector\"], [1 x %\"class.std::vector\"]* %6, i64 0, i64 0, i32 0, i32 0, i32 0, i32 1\n  %107 = getelementptr inbounds [1 x %\"class.std::vector\"], [1 x %\"class.std::vector\"]* %6, i64 0, i64 1\n  br i1 %96, label %297, label %251\n\n108:                                              ; preds = %35, %40\n  %109 = getelementptr inbounds [1 x %\"class.std::vector\"], [1 x %\"class.std::vector\"]* %3, i64 0, i64 0, i32 0, i32 0, i32 0, i32 0\n  %110 = load i32*, i32** %109, align 8, !tbaa !3\n  %111 = icmp eq i32* %110, null\n  br i1 %111, label %114, label %112\n\n112:                                              ; preds = %108\n  %113 = bitcast i32* %110 to i8*\n  call void @_ZdlPv(i8* nonnull %113) #11\n  br label %114\n\n114:                                              ; preds = %108, %112, %11\n  %115 = phi { i8*, i32 } [ %12, %11 ], [ %36, %112 ], [ %36, %108 ]\n  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %8) #11\n  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %7) #11\n  br label %446\n\n116:                                              ; preds = %81, %86\n  %117 = getelementptr inbounds [1 x %\"class.std::vector\"], [1 x %\"class.std::vector\"]* %5, i64 0, i64 0, i32 0, i32 0, i32 0, i32 0\n  %118 = load i32*, i32** %117, align 8, !tbaa !3\n  %119 = icmp eq i32* %118, null\n  br i1 %119, label %124, label %120\n\n120:                                              ; preds = %116, %54\n  %121 = phi i32* [ %57, %54 ], [ %118, %116 ]\n  %122 = phi { i8*, i32 } [ %55, %54 ], [ %82, %116 ]\n  %123 = bitcast i32* %121 to i8*\n  call void @_ZdlPv(i8* nonnull %123) #11\n  br label %124\n\n124:                                              ; preds = %120, %116, %54\n  %125 = phi { i8*, i32 } [ %55, %54 ], [ %82, %116 ], [ %122, %120 ]\n  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %51) #11\n  br label %440\n\n126:                                              ; preds = %102, %229\n  %127 = phi i64 [ 1, %102 ], [ %240, %229 ]\n  %128 = phi i32 [ 1, %102 ], [ %241, %229 ]\n  %129 = phi i32* [ null, %102 ], [ %177, %229 ]\n  %130 = phi i32* [ null, %102 ], [ %178, %229 ]\n  %131 = phi i32* [ null, %102 ], [ %175, %229 ]\n  %132 = mul nsw i64 %127, %127\n  %133 = sub nsw i32 1, %128\n  %134 = trunc i64 %132 to i32\n  %135 = add i32 %133, %134\n  %136 = srem i32 %135, 3\n  %137 = icmp eq i32* %130, %131\n  br i1 %137, label %139, label %138\n\n138:                                              ; preds = %126\n  store i32 %136, i32* %130, align 4, !tbaa !14\n  br label %174\n\n139:                                              ; preds = %126\n  %140 = ptrtoint i32* %130 to i64\n  %141 = ptrtoint i32* %129 to i64\n  %142 = sub i64 %140, %141\n  %143 = ashr exact i64 %142, 2\n  %144 = icmp eq i64 %142, 9223372036854775804\n  br i1 %144, label %145, label %147\n\n145:                                              ; preds = %139\n  invoke void @_ZSt20__throw_length_errorPKc(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.1, i64 0, i64 0)) #13\n          to label %146 unwind label %245\n\n146:                                              ; preds = %145\n  unreachable\n\n147:                                              ; preds = %139\n  %148 = icmp eq i64 %142, 0\n  %149 = select i1 %148, i64 1, i64 %143\n  %150 = add nsw i64 %149, %143\n  %151 = icmp ult i64 %150, %143\n  %152 = icmp ugt i64 %150, 2305843009213693951\n  %153 = or i1 %151, %152\n  %154 = select i1 %153, i64 2305843009213693951, i64 %150\n  %155 = icmp eq i64 %154, 0\n  br i1 %155, label %161, label %156\n\n156:                                              ; preds = %147\n  %157 = shl nuw nsw i64 %154, 2\n  %158 = invoke noalias nonnull i8* @_Znwm(i64 %157) #12\n          to label %159 unwind label %243\n\n159:                                              ; preds = %156\n  %160 = bitcast i8* %158 to i32*\n  br label %161\n\n161:                                              ; preds = %159, %147\n  %162 = phi i32* [ %160, %159 ], [ null, %147 ]\n  %163 = getelementptr inbounds i32, i32* %162, i64 %143\n  store i32 %136, i32* %163, align 4, !tbaa !14\n  %164 = icmp sgt i64 %142, 0\n  br i1 %164, label %165, label %168\n\n165:                                              ; preds = %161\n  %166 = bitcast i32* %162 to i8*\n  %167 = bitcast i32* %129 to i8*\n  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %166, i8* align 4 %167, i64 %142, i1 false) #11\n  br label %168\n\n168:                                              ; preds = %161, %165\n  %169 = icmp eq i32* %129, null\n  br i1 %169, label %172, label %170\n\n170:                                              ; preds = %168\n  %171 = bitcast i32* %129 to i8*\n  call void @_ZdlPv(i8* nonnull %171) #11\n  br label %172\n\n172:                                              ; preds = %170, %168\n  %173 = getelementptr inbounds i32, i32* %162, i64 %154\n  br label %174\n\n174:                                              ; preds = %172, %138\n  %175 = phi i32* [ %173, %172 ], [ %131, %138 ]\n  %176 = phi i32* [ %163, %172 ], [ %130, %138 ]\n  %177 = phi i32* [ %162, %172 ], [ %129, %138 ]\n  %178 = getelementptr inbounds i32, i32* %176, i64 1\n  %179 = load %\"class.std::vector\"*, %\"class.std::vector\"** %43, align 8, !tbaa !13\n  %180 = load %\"class.std::vector\"*, %\"class.std::vector\"** %29, align 8, !tbaa !10\n  %181 = ptrtoint %\"class.std::vector\"* %179 to i64\n  %182 = ptrtoint %\"class.std::vector\"* %180 to i64\n  %183 = sub i64 %181, %182\n  %184 = sdiv exact i64 %183, 24\n  %185 = add nsw i64 %184, -1\n  %186 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %180, i64 %185\n  %187 = load %\"class.std::vector\"*, %\"class.std::vector\"** %32, align 8, !tbaa !12\n  %188 = icmp eq %\"class.std::vector\"* %179, %187\n  br i1 %188, label %228, label %189\n\n189:                                              ; preds = %174\n  %190 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %180, i64 %185, i32 0, i32 0, i32 0, i32 1\n  %191 = load i32*, i32** %190, align 8, !tbaa !9\n  %192 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %186, i64 0, i32 0, i32 0, i32 0, i32 0\n  %193 = load i32*, i32** %192, align 8, !tbaa !3\n  %194 = ptrtoint i32* %191 to i64\n  %195 = ptrtoint i32* %193 to i64\n  %196 = sub i64 %194, %195\n  %197 = ashr exact i64 %196, 2\n  %198 = bitcast %\"class.std::vector\"* %179 to i8*\n  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(24) %198, i8 0, i64 24, i1 false) #11\n  %199 = icmp eq i64 %196, 0\n  br i1 %199, label %208, label %200\n\n200:                                              ; preds = %189\n  %201 = icmp ugt i64 %197, 2305843009213693951\n  br i1 %201, label %202, label %204\n\n202:                                              ; preds = %200\n  invoke void @_ZSt17__throw_bad_allocv() #13\n          to label %203 unwind label %249\n\n203:                                              ; preds = %202\n  unreachable\n\n204:                                              ; preds = %200\n  %205 = invoke noalias nonnull i8* @_Znwm(i64 %196) #12\n          to label %206 unwind label %247\n\n206:                                              ; preds = %204\n  %207 = bitcast i8* %205 to i32*\n  br label %208\n\n208:                                              ; preds = %206, %189\n  %209 = phi i32* [ %207, %206 ], [ null, %189 ]\n  %210 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %179, i64 0, i32 0, i32 0, i32 0, i32 0\n  store i32* %209, i32** %210, align 8, !tbaa !3\n  %211 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %179, i64 0, i32 0, i32 0, i32 0, i32 1\n  store i32* %209, i32** %211, align 8, !tbaa !9\n  %212 = getelementptr inbounds i32, i32* %209, i64 %197\n  %213 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %179, i64 0, i32 0, i32 0, i32 0, i32 2\n  store i32* %212, i32** %213, align 8, !tbaa !8\n  %214 = load i32*, i32** %192, align 8, !tbaa !16\n  %215 = load i32*, i32** %190, align 8, !tbaa !16\n  %216 = ptrtoint i32* %215 to i64\n  %217 = ptrtoint i32* %214 to i64\n  %218 = sub i64 %216, %217\n  %219 = icmp eq i64 %218, 0\n  br i1 %219, label %223, label %220\n\n220:                                              ; preds = %208\n  %221 = bitcast i32* %209 to i8*\n  %222 = bitcast i32* %214 to i8*\n  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %221, i8* align 4 %222, i64 %218, i1 false) #11\n  br label %223\n\n223:                                              ; preds = %220, %208\n  %224 = ashr exact i64 %218, 2\n  %225 = getelementptr inbounds i32, i32* %209, i64 %224\n  store i32* %225, i32** %211, align 8, !tbaa !9\n  %226 = load %\"class.std::vector\"*, %\"class.std::vector\"** %43, align 8, !tbaa !13\n  %227 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %226, i64 1\n  store %\"class.std::vector\"* %227, %\"class.std::vector\"** %43, align 8, !tbaa !13\n  br label %229\n\n228:                                              ; preds = %174\n  invoke void @_ZNSt6vectorIS_IiSaIiEESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_(%\"class.std::vector.0\"* nonnull align 8 dereferenceable(24) %2, %\"class.std::vector\"* %179, %\"class.std::vector\"* nonnull align 8 dereferenceable(24) %186)\n          to label %229 unwind label %247\n\n229:                                              ; preds = %223, %228\n  %230 = load %\"class.std::vector\"*, %\"class.std::vector\"** %29, align 8, !tbaa !10\n  %231 = add nsw i64 %127, -1\n  %232 = getelementptr inbounds i32, i32* %177, i64 %231\n  %233 = load i32, i32* %232, align 4, !tbaa !14\n  %234 = sext i32 %233 to i64\n  %235 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %230, i64 %127, i32 0, i32 0, i32 0, i32 0\n  %236 = load i32*, i32** %235, align 8, !tbaa !3\n  %237 = getelementptr inbounds i32, i32* %236, i64 %234\n  %238 = load i32, i32* %237, align 4, !tbaa !14\n  %239 = add nsw i32 %238, 1\n  store i32 %239, i32* %237, align 4, !tbaa !14\n  %240 = add nuw nsw i64 %127, 1\n  %241 = add nuw nsw i32 %128, 1\n  %242 = icmp eq i64 %240, %103\n  br i1 %242, label %104, label %126, !llvm.loop !17\n\n243:                                              ; preds = %156\n  %244 = landingpad { i8*, i32 }\n          cleanup\n  br label %437\n\n245:                                              ; preds = %145\n  %246 = landingpad { i8*, i32 }\n          cleanup\n  br label %437\n\n247:                                              ; preds = %204, %228\n  %248 = landingpad { i8*, i32 }\n          cleanup\n  br label %437\n\n249:                                              ; preds = %202\n  %250 = landingpad { i8*, i32 }\n          cleanup\n  br label %437\n\n251:                                              ; preds = %104\n  %252 = zext i32 %97 to i64\n  %253 = load %\"class.std::vector\"*, %\"class.std::vector\"** %75, align 8, !tbaa !10\n  br label %308\n\n254:                                              ; preds = %553, %261\n  %255 = phi %\"class.std::vector\"* [ %262, %261 ], [ %559, %553 ]\n  %256 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %255, i64 0, i32 0, i32 0, i32 0, i32 0\n  %257 = load i32*, i32** %256, align 8, !tbaa !3\n  %258 = icmp eq i32* %257, null\n  br i1 %258, label %261, label %259\n\n259:                                              ; preds = %254\n  %260 = bitcast i32* %257 to i8*\n  call void @_ZdlPv(i8* nonnull %260) #11\n  br label %261\n\n261:                                              ; preds = %259, %254\n  %262 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %255, i64 1\n  %263 = icmp eq %\"class.std::vector\"* %262, %560\n  br i1 %263, label %264, label %254, !llvm.loop !19\n\n264:                                              ; preds = %261\n  %265 = load %\"class.std::vector\"*, %\"class.std::vector\"** %75, align 8, !tbaa !10\n  br label %266\n\n266:                                              ; preds = %264, %553\n  %267 = phi %\"class.std::vector\"* [ %265, %264 ], [ %559, %553 ]\n  %268 = icmp eq %\"class.std::vector\"* %267, null\n  br i1 %268, label %271, label %269\n\n269:                                              ; preds = %266\n  %270 = bitcast %\"class.std::vector\"* %267 to i8*\n  call void @_ZdlPv(i8* nonnull %270) #11\n  br label %271\n\n271:                                              ; preds = %266, %269\n  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %50) #11\n  %272 = load %\"class.std::vector\"*, %\"class.std::vector\"** %29, align 8, !tbaa !10\n  %273 = load %\"class.std::vector\"*, %\"class.std::vector\"** %43, align 8, !tbaa !13\n  %274 = icmp eq %\"class.std::vector\"* %272, %273\n  br i1 %274, label %287, label %275\n\n275:                                              ; preds = %271, %282\n  %276 = phi %\"class.std::vector\"* [ %283, %282 ], [ %272, %271 ]\n  %277 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %276, i64 0, i32 0, i32 0, i32 0, i32 0\n  %278 = load i32*, i32** %277, align 8, !tbaa !3\n  %279 = icmp eq i32* %278, null\n  br i1 %279, label %282, label %280\n\n280:                                              ; preds = %275\n  %281 = bitcast i32* %278 to i8*\n  call void @_ZdlPv(i8* nonnull %281) #11\n  br label %282\n\n282:                                              ; preds = %280, %275\n  %283 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %276, i64 1\n  %284 = icmp eq %\"class.std::vector\"* %283, %273\n  br i1 %284, label %285, label %275, !llvm.loop !19\n\n285:                                              ; preds = %282\n  %286 = load %\"class.std::vector\"*, %\"class.std::vector\"** %29, align 8, !tbaa !10\n  br label %287\n\n287:                                              ; preds = %285, %271\n  %288 = phi %\"class.std::vector\"* [ %286, %285 ], [ %272, %271 ]\n  %289 = icmp eq %\"class.std::vector\"* %288, null\n  br i1 %289, label %292, label %290\n\n290:                                              ; preds = %287\n  %291 = bitcast %\"class.std::vector\"* %288 to i8*\n  call void @_ZdlPv(i8* nonnull %291) #11\n  br label %292\n\n292:                                              ; preds = %287, %290\n  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %7) #11\n  %293 = icmp eq i32* %301, null\n  br i1 %293, label %296, label %294\n\n294:                                              ; preds = %292\n  %295 = bitcast i32* %301 to i8*\n  call void @_ZdlPv(i8* nonnull %295) #11\n  br label %296\n\n296:                                              ; preds = %292, %294\n  ret i32 %558\n\n297:                                              ; preds = %361, %98, %104\n  %298 = phi %\"class.std::vector\"* [ %101, %98 ], [ %107, %104 ], [ %107, %361 ]\n  %299 = phi i32** [ %100, %98 ], [ %106, %104 ], [ %106, %361 ]\n  %300 = phi i32** [ %99, %98 ], [ %105, %104 ], [ %105, %361 ]\n  %301 = phi i32* [ null, %98 ], [ %177, %104 ], [ %177, %361 ]\n  %302 = bitcast [1 x %\"class.std::vector\"]* %6 to i8*\n  %303 = getelementptr inbounds [1 x %\"class.std::vector\"], [1 x %\"class.std::vector\"]* %6, i64 0, i64 0\n  %304 = bitcast [1 x %\"class.std::vector\"]* %6 to i8**\n  %305 = bitcast i32** %300 to i8**\n  %306 = bitcast i32** %299 to i8**\n  %307 = invoke nonnull align 8 dereferenceable(24) %\"class.std::vector.0\"* @_ZNSt6vectorIS_IiSaIiEESaIS1_EEaSERKS3_(%\"class.std::vector.0\"* nonnull align 8 dereferenceable(24) %2, %\"class.std::vector.0\"* nonnull align 8 dereferenceable(24) %4)\n          to label %403 unwind label %424\n\n308:                                              ; preds = %251, %361\n  %309 = phi %\"class.std::vector\"* [ %253, %251 ], [ %366, %361 ]\n  %310 = phi i64 [ 1, %251 ], [ %395, %361 ]\n  %311 = load %\"class.std::vector\"*, %\"class.std::vector\"** %89, align 8, !tbaa !13\n  %312 = ptrtoint %\"class.std::vector\"* %311 to i64\n  %313 = ptrtoint %\"class.std::vector\"* %309 to i64\n  %314 = sub i64 %312, %313\n  %315 = sdiv exact i64 %314, 24\n  %316 = add nsw i64 %315, -1\n  %317 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %309, i64 %316\n  %318 = load %\"class.std::vector\"*, %\"class.std::vector\"** %78, align 8, !tbaa !12\n  %319 = icmp eq %\"class.std::vector\"* %311, %318\n  br i1 %319, label %360, label %320\n\n320:                                              ; preds = %308\n  %321 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %309, i64 %316, i32 0, i32 0, i32 0, i32 1\n  %322 = load i32*, i32** %321, align 8, !tbaa !9\n  %323 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %317, i64 0, i32 0, i32 0, i32 0, i32 0\n  %324 = load i32*, i32** %323, align 8, !tbaa !3\n  %325 = ptrtoint i32* %322 to i64\n  %326 = ptrtoint i32* %324 to i64\n  %327 = sub i64 %325, %326\n  %328 = ashr exact i64 %327, 2\n  %329 = bitcast %\"class.std::vector\"* %311 to i8*\n  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(24) %329, i8 0, i64 24, i1 false) #11\n  %330 = icmp eq i64 %327, 0\n  br i1 %330, label %340, label %331\n\n331:                                              ; preds = %320\n  %332 = icmp ugt i64 %328, 2305843009213693951\n  br i1 %332, label %333, label %336\n\n333:                                              ; preds = %331, %474\n  %334 = phi i32* [ %301, %474 ], [ %177, %331 ]\n  invoke void @_ZSt17__throw_bad_allocv() #13\n          to label %335 unwind label %401\n\n335:                                              ; preds = %333\n  unreachable\n\n336:                                              ; preds = %331\n  %337 = invoke noalias nonnull i8* @_Znwm(i64 %327) #12\n          to label %338 unwind label %397\n\n338:                                              ; preds = %336\n  %339 = bitcast i8* %337 to i32*\n  br label %340\n\n340:                                              ; preds = %338, %320\n  %341 = phi i32* [ %339, %338 ], [ null, %320 ]\n  %342 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %311, i64 0, i32 0, i32 0, i32 0, i32 0\n  store i32* %341, i32** %342, align 8, !tbaa !3\n  %343 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %311, i64 0, i32 0, i32 0, i32 0, i32 1\n  store i32* %341, i32** %343, align 8, !tbaa !9\n  %344 = getelementptr inbounds i32, i32* %341, i64 %328\n  %345 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %311, i64 0, i32 0, i32 0, i32 0, i32 2\n  store i32* %344, i32** %345, align 8, !tbaa !8\n  %346 = load i32*, i32** %323, align 8, !tbaa !16\n  %347 = load i32*, i32** %321, align 8, !tbaa !16\n  %348 = ptrtoint i32* %347 to i64\n  %349 = ptrtoint i32* %346 to i64\n  %350 = sub i64 %348, %349\n  %351 = icmp eq i64 %350, 0\n  br i1 %351, label %355, label %352\n\n352:                                              ; preds = %340\n  %353 = bitcast i32* %341 to i8*\n  %354 = bitcast i32* %346 to i8*\n  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %353, i8* align 4 %354, i64 %350, i1 false) #11\n  br label %355\n\n355:                                              ; preds = %352, %340\n  %356 = ashr exact i64 %350, 2\n  %357 = getelementptr inbounds i32, i32* %341, i64 %356\n  store i32* %357, i32** %343, align 8, !tbaa !9\n  %358 = load %\"class.std::vector\"*, %\"class.std::vector\"** %89, align 8, !tbaa !13\n  %359 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %358, i64 1\n  store %\"class.std::vector\"* %359, %\"class.std::vector\"** %89, align 8, !tbaa !13\n  br label %361\n\n360:                                              ; preds = %308\n  invoke void @_ZNSt6vectorIS_IiSaIiEESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_(%\"class.std::vector.0\"* nonnull align 8 dereferenceable(24) %4, %\"class.std::vector\"* %311, %\"class.std::vector\"* nonnull align 8 dereferenceable(24) %317)\n          to label %361 unwind label %397\n\n361:                                              ; preds = %360, %355\n  %362 = add nsw i64 %310, -1\n  %363 = load %\"class.std::vector\"*, %\"class.std::vector\"** %29, align 8, !tbaa !10\n  %364 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %363, i64 %362, i32 0, i32 0, i32 0, i32 0\n  %365 = load i32*, i32** %364, align 8, !tbaa !3\n  %366 = load %\"class.std::vector\"*, %\"class.std::vector\"** %75, align 8, !tbaa !10\n  %367 = getelementptr inbounds i32, i32* %177, i64 %362\n  %368 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %366, i64 %310, i32 0, i32 0, i32 0, i32 0\n  %369 = load i32*, i32** %368, align 8, !tbaa !3\n  %370 = load i32, i32* %365, align 4, !tbaa !14\n  %371 = load i32, i32* %367, align 4, !tbaa !14\n  %372 = srem i32 %371, 3\n  %373 = sext i32 %372 to i64\n  %374 = getelementptr inbounds i32, i32* %369, i64 %373\n  %375 = load i32, i32* %374, align 4, !tbaa !14\n  %376 = add nsw i32 %375, %370\n  store i32 %376, i32* %374, align 4, !tbaa !14\n  %377 = getelementptr inbounds i32, i32* %365, i64 1\n  %378 = load i32, i32* %377, align 4, !tbaa !14\n  %379 = load i32, i32* %367, align 4, !tbaa !14\n  %380 = add nsw i32 %379, 1\n  %381 = srem i32 %380, 3\n  %382 = sext i32 %381 to i64\n  %383 = getelementptr inbounds i32, i32* %369, i64 %382\n  %384 = load i32, i32* %383, align 4, !tbaa !14\n  %385 = add nsw i32 %384, %378\n  store i32 %385, i32* %383, align 4, !tbaa !14\n  %386 = getelementptr inbounds i32, i32* %365, i64 2\n  %387 = load i32, i32* %386, align 4, !tbaa !14\n  %388 = load i32, i32* %367, align 4, !tbaa !14\n  %389 = add nsw i32 %388, 2\n  %390 = srem i32 %389, 3\n  %391 = sext i32 %390 to i64\n  %392 = getelementptr inbounds i32, i32* %369, i64 %391\n  %393 = load i32, i32* %392, align 4, !tbaa !14\n  %394 = add nsw i32 %393, %387\n  store i32 %394, i32* %392, align 4, !tbaa !14\n  %395 = add nuw nsw i64 %310, 1\n  %396 = icmp eq i64 %395, %252\n  br i1 %396, label %297, label %308, !llvm.loop !20\n\n397:                                              ; preds = %360, %336\n  %398 = landingpad { i8*, i32 }\n          cleanup\n  br label %437\n\n399:                                              ; preds = %476, %500\n  %400 = landingpad { i8*, i32 }\n          cleanup\n  br label %437\n\n401:                                              ; preds = %333\n  %402 = landingpad { i8*, i32 }\n          cleanup\n  br label %437\n\n403:                                              ; preds = %297\n  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %302) #11\n  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(24) %302, i8 0, i64 24, i1 false) #11\n  %404 = invoke noalias nonnull i8* @_Znwm(i64 12) #12\n          to label %410 unwind label %405\n\n405:                                              ; preds = %539, %403\n  %406 = landingpad { i8*, i32 }\n          cleanup\n  %407 = getelementptr inbounds [1 x %\"class.std::vector\"], [1 x %\"class.std::vector\"]* %6, i64 0, i64 0, i32 0, i32 0, i32 0, i32 0\n  %408 = load i32*, i32** %407, align 8, !tbaa !3\n  %409 = icmp eq i32* %408, null\n  br i1 %409, label %435, label %431\n\n410:                                              ; preds = %403\n  %411 = bitcast i8* %404 to i32*\n  store i8* %404, i8** %304, align 8, !tbaa !3\n  %412 = getelementptr inbounds i8, i8* %404, i64 12\n  store i8* %412, i8** %305, align 8, !tbaa !8\n  store i32 0, i32* %411, align 4\n  %413 = getelementptr inbounds i8, i8* %404, i64 4\n  %414 = bitcast i8* %413 to i32*\n  store i32 0, i32* %414, align 4\n  %415 = getelementptr inbounds i8, i8* %404, i64 8\n  %416 = bitcast i8* %415 to i32*\n  store i32 0, i32* %416, align 4\n  store i8* %412, i8** %306, align 8, !tbaa !9\n  invoke void @_ZNSt6vectorIS_IiSaIiEESaIS1_EE13_M_assign_auxIPKS1_EEvT_S7_St20forward_iterator_tag(%\"class.std::vector.0\"* nonnull align 8 dereferenceable(24) %4, %\"class.std::vector\"* nonnull %303, %\"class.std::vector\"* nonnull %298)\n          to label %417 unwind label %426\n\n417:                                              ; preds = %410\n  %418 = getelementptr inbounds [1 x %\"class.std::vector\"], [1 x %\"class.std::vector\"]* %6, i64 0, i64 0, i32 0, i32 0, i32 0, i32 0\n  %419 = load i32*, i32** %418, align 8, !tbaa !3\n  %420 = icmp eq i32* %419, null\n  br i1 %420, label %423, label %421\n\n421:                                              ; preds = %417\n  %422 = bitcast i32* %419 to i8*\n  call void @_ZdlPv(i8* nonnull %422) #11\n  br label %423\n\n423:                                              ; preds = %421, %417\n  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %302) #11\n  br i1 %96, label %537, label %448\n\n424:                                              ; preds = %537, %297\n  %425 = landingpad { i8*, i32 }\n          cleanup\n  br label %437\n\n426:                                              ; preds = %541, %410\n  %427 = landingpad { i8*, i32 }\n          cleanup\n  %428 = getelementptr inbounds [1 x %\"class.std::vector\"], [1 x %\"class.std::vector\"]* %6, i64 0, i64 0, i32 0, i32 0, i32 0, i32 0\n  %429 = load i32*, i32** %428, align 8, !tbaa !3\n  %430 = icmp eq i32* %429, null\n  br i1 %430, label %435, label %431\n\n431:                                              ; preds = %426, %405\n  %432 = phi i32* [ %408, %405 ], [ %429, %426 ]\n  %433 = phi { i8*, i32 } [ %406, %405 ], [ %427, %426 ]\n  %434 = bitcast i32* %432 to i8*\n  call void @_ZdlPv(i8* nonnull %434) #11\n  br label %435\n\n435:                                              ; preds = %431, %426, %405\n  %436 = phi { i8*, i32 } [ %406, %405 ], [ %427, %426 ], [ %433, %431 ]\n  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %302) #11\n  br label %437\n\n437:                                              ; preds = %397, %399, %401, %247, %249, %243, %245, %424, %435\n  %438 = phi i32* [ %301, %435 ], [ %301, %424 ], [ %129, %243 ], [ %129, %245 ], [ %177, %247 ], [ %177, %249 ], [ %334, %401 ], [ %177, %397 ], [ %301, %399 ]\n  %439 = phi { i8*, i32 } [ %436, %435 ], [ %425, %424 ], [ %244, %243 ], [ %246, %245 ], [ %248, %247 ], [ %250, %249 ], [ %402, %401 ], [ %398, %397 ], [ %400, %399 ]\n  call void @_ZNSt6vectorIS_IiSaIiEESaIS1_EED2Ev(%\"class.std::vector.0\"* nonnull align 8 dereferenceable(24) %4) #11\n  br label %440\n\n440:                                              ; preds = %124, %437\n  %441 = phi i32* [ %438, %437 ], [ null, %124 ]\n  %442 = phi { i8*, i32 } [ %439, %437 ], [ %125, %124 ]\n  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %50) #11\n  call void @_ZNSt6vectorIS_IiSaIiEESaIS1_EED2Ev(%\"class.std::vector.0\"* nonnull align 8 dereferenceable(24) %2) #11\n  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %7) #11\n  %443 = icmp eq i32* %441, null\n  br i1 %443, label %446, label %444\n\n444:                                              ; preds = %440\n  %445 = bitcast i32* %441 to i8*\n  call void @_ZdlPv(i8* nonnull %445) #11\n  br label %446\n\n446:                                              ; preds = %114, %440, %444\n  %447 = phi { i8*, i32 } [ %115, %114 ], [ %442, %440 ], [ %442, %444 ]\n  resume { i8*, i32 } %447\n\n448:                                              ; preds = %423\n  %449 = zext i32 %97 to i64\n  %450 = load %\"class.std::vector\"*, %\"class.std::vector\"** %75, align 8, !tbaa !10\n  br label %451\n\n451:                                              ; preds = %501, %448\n  %452 = phi %\"class.std::vector\"* [ %450, %448 ], [ %506, %501 ]\n  %453 = phi i64 [ 1, %448 ], [ %535, %501 ]\n  %454 = load %\"class.std::vector\"*, %\"class.std::vector\"** %89, align 8, !tbaa !13\n  %455 = ptrtoint %\"class.std::vector\"* %454 to i64\n  %456 = ptrtoint %\"class.std::vector\"* %452 to i64\n  %457 = sub i64 %455, %456\n  %458 = sdiv exact i64 %457, 24\n  %459 = add nsw i64 %458, -1\n  %460 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %452, i64 %459\n  %461 = load %\"class.std::vector\"*, %\"class.std::vector\"** %78, align 8, !tbaa !12\n  %462 = icmp eq %\"class.std::vector\"* %454, %461\n  br i1 %462, label %500, label %463\n\n463:                                              ; preds = %451\n  %464 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %452, i64 %459, i32 0, i32 0, i32 0, i32 1\n  %465 = load i32*, i32** %464, align 8, !tbaa !9\n  %466 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %460, i64 0, i32 0, i32 0, i32 0, i32 0\n  %467 = load i32*, i32** %466, align 8, !tbaa !3\n  %468 = ptrtoint i32* %465 to i64\n  %469 = ptrtoint i32* %467 to i64\n  %470 = sub i64 %468, %469\n  %471 = ashr exact i64 %470, 2\n  %472 = bitcast %\"class.std::vector\"* %454 to i8*\n  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(24) %472, i8 0, i64 24, i1 false) #11\n  %473 = icmp eq i64 %470, 0\n  br i1 %473, label %480, label %474\n\n474:                                              ; preds = %463\n  %475 = icmp ugt i64 %471, 2305843009213693951\n  br i1 %475, label %333, label %476\n\n476:                                              ; preds = %474\n  %477 = invoke noalias nonnull i8* @_Znwm(i64 %470) #12\n          to label %478 unwind label %399\n\n478:                                              ; preds = %476\n  %479 = bitcast i8* %477 to i32*\n  br label %480\n\n480:                                              ; preds = %478, %463\n  %481 = phi i32* [ %479, %478 ], [ null, %463 ]\n  %482 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %454, i64 0, i32 0, i32 0, i32 0, i32 0\n  store i32* %481, i32** %482, align 8, !tbaa !3\n  %483 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %454, i64 0, i32 0, i32 0, i32 0, i32 1\n  store i32* %481, i32** %483, align 8, !tbaa !9\n  %484 = getelementptr inbounds i32, i32* %481, i64 %471\n  %485 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %454, i64 0, i32 0, i32 0, i32 0, i32 2\n  store i32* %484, i32** %485, align 8, !tbaa !8\n  %486 = load i32*, i32** %466, align 8, !tbaa !16\n  %487 = load i32*, i32** %464, align 8, !tbaa !16\n  %488 = ptrtoint i32* %487 to i64\n  %489 = ptrtoint i32* %486 to i64\n  %490 = sub i64 %488, %489\n  %491 = icmp eq i64 %490, 0\n  br i1 %491, label %495, label %492\n\n492:                                              ; preds = %480\n  %493 = bitcast i32* %481 to i8*\n  %494 = bitcast i32* %486 to i8*\n  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %493, i8* align 4 %494, i64 %490, i1 false) #11\n  br label %495\n\n495:                                              ; preds = %492, %480\n  %496 = ashr exact i64 %490, 2\n  %497 = getelementptr inbounds i32, i32* %481, i64 %496\n  store i32* %497, i32** %483, align 8, !tbaa !9\n  %498 = load %\"class.std::vector\"*, %\"class.std::vector\"** %89, align 8, !tbaa !13\n  %499 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %498, i64 1\n  store %\"class.std::vector\"* %499, %\"class.std::vector\"** %89, align 8, !tbaa !13\n  br label %501\n\n500:                                              ; preds = %451\n  invoke void @_ZNSt6vectorIS_IiSaIiEESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_(%\"class.std::vector.0\"* nonnull align 8 dereferenceable(24) %4, %\"class.std::vector\"* %454, %\"class.std::vector\"* nonnull align 8 dereferenceable(24) %460)\n          to label %501 unwind label %399\n\n501:                                              ; preds = %500, %495\n  %502 = add nsw i64 %453, -1\n  %503 = load %\"class.std::vector\"*, %\"class.std::vector\"** %29, align 8, !tbaa !10\n  %504 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %503, i64 %502, i32 0, i32 0, i32 0, i32 0\n  %505 = load i32*, i32** %504, align 8, !tbaa !3\n  %506 = load %\"class.std::vector\"*, %\"class.std::vector\"** %75, align 8, !tbaa !10\n  %507 = getelementptr inbounds i32, i32* %301, i64 %502\n  %508 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %506, i64 %453, i32 0, i32 0, i32 0, i32 0\n  %509 = load i32*, i32** %508, align 8, !tbaa !3\n  %510 = load i32, i32* %505, align 4, !tbaa !14\n  %511 = load i32, i32* %507, align 4, !tbaa !14\n  %512 = srem i32 %511, 3\n  %513 = sext i32 %512 to i64\n  %514 = getelementptr inbounds i32, i32* %509, i64 %513\n  %515 = load i32, i32* %514, align 4, !tbaa !14\n  %516 = add nsw i32 %515, %510\n  store i32 %516, i32* %514, align 4, !tbaa !14\n  %517 = getelementptr inbounds i32, i32* %505, i64 1\n  %518 = load i32, i32* %517, align 4, !tbaa !14\n  %519 = load i32, i32* %507, align 4, !tbaa !14\n  %520 = add nsw i32 %519, 1\n  %521 = srem i32 %520, 3\n  %522 = sext i32 %521 to i64\n  %523 = getelementptr inbounds i32, i32* %509, i64 %522\n  %524 = load i32, i32* %523, align 4, !tbaa !14\n  %525 = add nsw i32 %524, %518\n  store i32 %525, i32* %523, align 4, !tbaa !14\n  %526 = getelementptr inbounds i32, i32* %505, i64 2\n  %527 = load i32, i32* %526, align 4, !tbaa !14\n  %528 = load i32, i32* %507, align 4, !tbaa !14\n  %529 = add nsw i32 %528, 2\n  %530 = srem i32 %529, 3\n  %531 = sext i32 %530 to i64\n  %532 = getelementptr inbounds i32, i32* %509, i64 %531\n  %533 = load i32, i32* %532, align 4, !tbaa !14\n  %534 = add nsw i32 %533, %527\n  store i32 %534, i32* %532, align 4, !tbaa !14\n  %535 = add nuw nsw i64 %453, 1\n  %536 = icmp eq i64 %535, %449\n  br i1 %536, label %537, label %451, !llvm.loop !20\n\n537:                                              ; preds = %501, %423\n  %538 = invoke nonnull align 8 dereferenceable(24) %\"class.std::vector.0\"* @_ZNSt6vectorIS_IiSaIiEESaIS1_EEaSERKS3_(%\"class.std::vector.0\"* nonnull align 8 dereferenceable(24) %2, %\"class.std::vector.0\"* nonnull align 8 dereferenceable(24) %4)\n          to label %539 unwind label %424\n\n539:                                              ; preds = %537\n  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %302) #11\n  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(24) %302, i8 0, i64 24, i1 false) #11\n  %540 = invoke noalias nonnull i8* @_Znwm(i64 12) #12\n          to label %541 unwind label %405\n\n541:                                              ; preds = %539\n  %542 = bitcast i8* %540 to i32*\n  store i8* %540, i8** %304, align 8, !tbaa !3\n  %543 = getelementptr inbounds i8, i8* %540, i64 12\n  store i8* %543, i8** %305, align 8, !tbaa !8\n  store i32 0, i32* %542, align 4\n  %544 = getelementptr inbounds i8, i8* %540, i64 4\n  %545 = bitcast i8* %544 to i32*\n  store i32 0, i32* %545, align 4\n  %546 = getelementptr inbounds i8, i8* %540, i64 8\n  %547 = bitcast i8* %546 to i32*\n  store i32 0, i32* %547, align 4\n  store i8* %543, i8** %306, align 8, !tbaa !9\n  invoke void @_ZNSt6vectorIS_IiSaIiEESaIS1_EE13_M_assign_auxIPKS1_EEvT_S7_St20forward_iterator_tag(%\"class.std::vector.0\"* nonnull align 8 dereferenceable(24) %4, %\"class.std::vector\"* nonnull %303, %\"class.std::vector\"* nonnull %298)\n          to label %548 unwind label %426\n\n548:                                              ; preds = %541\n  %549 = load i32*, i32** %418, align 8, !tbaa !3\n  %550 = icmp eq i32* %549, null\n  br i1 %550, label %553, label %551\n\n551:                                              ; preds = %548\n  %552 = bitcast i32* %549 to i8*\n  call void @_ZdlPv(i8* nonnull %552) #11\n  br label %553\n\n553:                                              ; preds = %548, %551\n  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %302) #11\n  %554 = sext i32 %0 to i64\n  %555 = load %\"class.std::vector\"*, %\"class.std::vector\"** %29, align 8, !tbaa !10\n  %556 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %555, i64 %554, i32 0, i32 0, i32 0, i32 0\n  %557 = load i32*, i32** %556, align 8, !tbaa !3\n  %558 = load i32, i32* %557, align 4, !tbaa !14\n  %559 = load %\"class.std::vector\"*, %\"class.std::vector\"** %75, align 8, !tbaa !10\n  %560 = load %\"class.std::vector\"*, %\"class.std::vector\"** %89, align 8, !tbaa !13\n  %561 = icmp eq %\"class.std::vector\"* %559, %560\n  br i1 %561, label %266, label %254\n}\n\n; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn\ndeclare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1\n\ndeclare dso_local i32 @__gxx_personality_v0(...)\n\n; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn\ndeclare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1\n\n; Function Attrs: uwtable\ndefine linkonce_odr dso_local nonnull align 8 dereferenceable(24) %\"class.std::vector.0\"* @_ZNSt6vectorIS_IiSaIiEESaIS1_EEaSERKS3_(%\"class.std::vector.0\"* nonnull align 8 dereferenceable(24) %0, %\"class.std::vector.0\"* nonnull align 8 dereferenceable(24) %1) local_unnamed_addr #0 comdat align 2 personality i32 (...)* @__gxx_personality_v0 {\n  %3 = icmp eq %\"class.std::vector.0\"* %1, %0\n  br i1 %3, label %120, label %4\n\n4:                                                ; preds = %2\n  %5 = getelementptr inbounds %\"class.std::vector.0\", %\"class.std::vector.0\"* %1, i64 0, i32 0, i32 0, i32 0, i32 1\n  %6 = load %\"class.std::vector\"*, %\"class.std::vector\"** %5, align 8, !tbaa !13\n  %7 = getelementptr inbounds %\"class.std::vector.0\", %\"class.std::vector.0\"* %1, i64 0, i32 0, i32 0, i32 0, i32 0\n  %8 = load %\"class.std::vector\"*, %\"class.std::vector\"** %7, align 8, !tbaa !10\n  %9 = ptrtoint %\"class.std::vector\"* %6 to i64\n  %10 = ptrtoint %\"class.std::vector\"* %8 to i64\n  %11 = sub i64 %9, %10\n  %12 = sdiv exact i64 %11, 24\n  %13 = getelementptr inbounds %\"class.std::vector.0\", %\"class.std::vector.0\"* %0, i64 0, i32 0, i32 0, i32 0, i32 2\n  %14 = load %\"class.std::vector\"*, %\"class.std::vector\"** %13, align 8, !tbaa !12\n  %15 = getelementptr inbounds %\"class.std::vector.0\", %\"class.std::vector.0\"* %0, i64 0, i32 0, i32 0, i32 0, i32 0\n  %16 = load %\"class.std::vector\"*, %\"class.std::vector\"** %15, align 8, !tbaa !10\n  %17 = ptrtoint %\"class.std::vector\"* %14 to i64\n  %18 = ptrtoint %\"class.std::vector\"* %16 to i64\n  %19 = sub i64 %17, %18\n  %20 = sdiv exact i64 %19, 24\n  %21 = icmp ugt i64 %12, %20\n  br i1 %21, label %22, label %47\n\n22:                                               ; preds = %4\n  %23 = tail call %\"class.std::vector\"* @_ZNSt6vectorIS_IiSaIiEESaIS1_EE20_M_allocate_and_copyIN9__gnu_cxx17__normal_iteratorIPKS1_S3_EEEEPS1_mT_SB_(%\"class.std::vector.0\"* nonnull align 8 dereferenceable(24) %0, i64 %12, %\"class.std::vector\"* %8, %\"class.std::vector\"* %6)\n  %24 = load %\"class.std::vector\"*, %\"class.std::vector\"** %15, align 8, !tbaa !10\n  %25 = getelementptr inbounds %\"class.std::vector.0\", %\"class.std::vector.0\"* %0, i64 0, i32 0, i32 0, i32 0, i32 1\n  %26 = load %\"class.std::vector\"*, %\"class.std::vector\"** %25, align 8, !tbaa !13\n  %27 = icmp eq %\"class.std::vector\"* %24, %26\n  br i1 %27, label %40, label %28\n\n28:                                               ; preds = %22, %35\n  %29 = phi %\"class.std::vector\"* [ %36, %35 ], [ %24, %22 ]\n  %30 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %29, i64 0, i32 0, i32 0, i32 0, i32 0\n  %31 = load i32*, i32** %30, align 8, !tbaa !3\n  %32 = icmp eq i32* %31, null\n  br i1 %32, label %35, label %33\n\n33:                                               ; preds = %28\n  %34 = bitcast i32* %31 to i8*\n  tail call void @_ZdlPv(i8* nonnull %34) #11\n  br label %35\n\n35:                                               ; preds = %33, %28\n  %36 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %29, i64 1\n  %37 = icmp eq %\"class.std::vector\"* %36, %26\n  br i1 %37, label %38, label %28, !llvm.loop !19\n\n38:                                               ; preds = %35\n  %39 = load %\"class.std::vector\"*, %\"class.std::vector\"** %15, align 8, !tbaa !10\n  br label %40\n\n40:                                               ; preds = %38, %22\n  %41 = phi %\"class.std::vector\"* [ %39, %38 ], [ %24, %22 ]\n  %42 = icmp eq %\"class.std::vector\"* %41, null\n  br i1 %42, label %45, label %43\n\n43:                                               ; preds = %40\n  %44 = bitcast %\"class.std::vector\"* %41 to i8*\n  tail call void @_ZdlPv(i8* nonnull %44) #11\n  br label %45\n\n45:                                               ; preds = %40, %43\n  store %\"class.std::vector\"* %23, %\"class.std::vector\"** %15, align 8, !tbaa !10\n  %46 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %23, i64 %12\n  store %\"class.std::vector\"* %46, %\"class.std::vector\"** %13, align 8, !tbaa !12\n  br label %116\n\n47:                                               ; preds = %4\n  %48 = getelementptr inbounds %\"class.std::vector.0\", %\"class.std::vector.0\"* %0, i64 0, i32 0, i32 0, i32 0, i32 1\n  %49 = load %\"class.std::vector\"*, %\"class.std::vector\"** %48, align 8, !tbaa !13\n  %50 = ptrtoint %\"class.std::vector\"* %49 to i64\n  %51 = sub i64 %50, %18\n  %52 = sdiv exact i64 %51, 24\n  %53 = icmp ult i64 %52, %12\n  br i1 %53, label %87, label %54\n\n54:                                               ; preds = %47\n  %55 = icmp sgt i64 %11, 0\n  br i1 %55, label %56, label %70\n\n56:                                               ; preds = %54\n  %57 = udiv exact i64 %11, 24\n  br label %58\n\n58:                                               ; preds = %58, %56\n  %59 = phi i64 [ %65, %58 ], [ %57, %56 ]\n  %60 = phi %\"class.std::vector\"* [ %64, %58 ], [ %16, %56 ]\n  %61 = phi %\"class.std::vector\"* [ %63, %58 ], [ %8, %56 ]\n  %62 = tail call nonnull align 8 dereferenceable(24) %\"class.std::vector\"* @_ZNSt6vectorIiSaIiEEaSERKS1_(%\"class.std::vector\"* nonnull align 8 dereferenceable(24) %60, %\"class.std::vector\"* nonnull align 8 dereferenceable(24) %61)\n  %63 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %61, i64 1\n  %64 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %60, i64 1\n  %65 = add nsw i64 %59, -1\n  %66 = icmp sgt i64 %59, 1\n  br i1 %66, label %58, label %67, !llvm.loop !21\n\n67:                                               ; preds = %58\n  %68 = load %\"class.std::vector\"*, %\"class.std::vector\"** %48, align 8, !tbaa !16\n  %69 = ptrtoint %\"class.std::vector\"* %64 to i64\n  br label %70\n\n70:                                               ; preds = %67, %54\n  %71 = phi i64 [ %69, %67 ], [ %18, %54 ]\n  %72 = phi %\"class.std::vector\"* [ %68, %67 ], [ %49, %54 ]\n  %73 = sub i64 %71, %18\n  %74 = sdiv exact i64 %73, 24\n  %75 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %16, i64 %74\n  %76 = icmp eq %\"class.std::vector\"* %75, %72\n  br i1 %76, label %116, label %77\n\n77:                                               ; preds = %70, %84\n  %78 = phi %\"class.std::vector\"* [ %85, %84 ], [ %75, %70 ]\n  %79 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %78, i64 0, i32 0, i32 0, i32 0, i32 0\n  %80 = load i32*, i32** %79, align 8, !tbaa !3\n  %81 = icmp eq i32* %80, null\n  br i1 %81, label %84, label %82\n\n82:                                               ; preds = %77\n  %83 = bitcast i32* %80 to i8*\n  tail call void @_ZdlPv(i8* nonnull %83) #11\n  br label %84\n\n84:                                               ; preds = %82, %77\n  %85 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %78, i64 1\n  %86 = icmp eq %\"class.std::vector\"* %85, %72\n  br i1 %86, label %116, label %77, !llvm.loop !22\n\n87:                                               ; preds = %47\n  %88 = icmp sgt i64 %51, 0\n  br i1 %88, label %89, label %109\n\n89:                                               ; preds = %87\n  %90 = udiv exact i64 %51, 24\n  br label %91\n\n91:                                               ; preds = %91, %89\n  %92 = phi i64 [ %98, %91 ], [ %90, %89 ]\n  %93 = phi %\"class.std::vector\"* [ %97, %91 ], [ %16, %89 ]\n  %94 = phi %\"class.std::vector\"* [ %96, %91 ], [ %8, %89 ]\n  %95 = tail call nonnull align 8 dereferenceable(24) %\"class.std::vector\"* @_ZNSt6vectorIiSaIiEEaSERKS1_(%\"class.std::vector\"* nonnull align 8 dereferenceable(24) %93, %\"class.std::vector\"* nonnull align 8 dereferenceable(24) %94)\n  %96 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %94, i64 1\n  %97 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %93, i64 1\n  %98 = add nsw i64 %92, -1\n  %99 = icmp sgt i64 %92, 1\n  br i1 %99, label %91, label %100, !llvm.loop !23\n\n100:                                              ; preds = %91\n  %101 = load %\"class.std::vector\"*, %\"class.std::vector\"** %7, align 8, !tbaa !10\n  %102 = load %\"class.std::vector\"*, %\"class.std::vector\"** %48, align 8, !tbaa !13\n  %103 = load %\"class.std::vector\"*, %\"class.std::vector\"** %15, align 8, !tbaa !10\n  %104 = load %\"class.std::vector\"*, %\"class.std::vector\"** %5, align 8, !tbaa !13\n  %105 = ptrtoint %\"class.std::vector\"* %102 to i64\n  %106 = ptrtoint %\"class.std::vector\"* %103 to i64\n  %107 = sub i64 %105, %106\n  %108 = sdiv exact i64 %107, 24\n  br label %109\n\n109:                                              ; preds = %100, %87\n  %110 = phi i64 [ %108, %100 ], [ %52, %87 ]\n  %111 = phi %\"class.std::vector\"* [ %104, %100 ], [ %6, %87 ]\n  %112 = phi %\"class.std::vector\"* [ %102, %100 ], [ %49, %87 ]\n  %113 = phi %\"class.std::vector\"* [ %101, %100 ], [ %8, %87 ]\n  %114 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %113, i64 %110\n  %115 = tail call %\"class.std::vector\"* @_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPSt6vectorIiSaIiEES5_EET0_T_S7_S6_(%\"class.std::vector\"* %114, %\"class.std::vector\"* %111, %\"class.std::vector\"* %112)\n  br label %116\n\n116:                                              ; preds = %84, %70, %109, %45\n  %117 = load %\"class.std::vector\"*, %\"class.std::vector\"** %15, align 8, !tbaa !10\n  %118 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %117, i64 %12\n  %119 = getelementptr inbounds %\"class.std::vector.0\", %\"class.std::vector.0\"* %0, i64 0, i32 0, i32 0, i32 0, i32 1\n  store %\"class.std::vector\"* %118, %\"class.std::vector\"** %119, align 8, !tbaa !13\n  br label %120\n\n120:                                              ; preds = %116, %2\n  ret %\"class.std::vector.0\"* %0\n}\n\n; Function Attrs: nounwind uwtable\ndefine linkonce_odr dso_local void @_ZNSt6vectorIS_IiSaIiEESaIS1_EED2Ev(%\"class.std::vector.0\"* nonnull align 8 dereferenceable(24) %0) unnamed_addr #2 comdat align 2 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {\n  %2 = getelementptr inbounds %\"class.std::vector.0\", %\"class.std::vector.0\"* %0, i64 0, i32 0, i32 0, i32 0, i32 0\n  %3 = load %\"class.std::vector\"*, %\"class.std::vector\"** %2, align 8, !tbaa !10\n  %4 = getelementptr inbounds %\"class.std::vector.0\", %\"class.std::vector.0\"* %0, i64 0, i32 0, i32 0, i32 0, i32 1\n  %5 = load %\"class.std::vector\"*, %\"class.std::vector\"** %4, align 8, !tbaa !13\n  %6 = icmp eq %\"class.std::vector\"* %3, %5\n  br i1 %6, label %19, label %7\n\n7:                                                ; preds = %1, %14\n  %8 = phi %\"class.std::vector\"* [ %15, %14 ], [ %3, %1 ]\n  %9 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %8, i64 0, i32 0, i32 0, i32 0, i32 0\n  %10 = load i32*, i32** %9, align 8, !tbaa !3\n  %11 = icmp eq i32* %10, null\n  br i1 %11, label %14, label %12\n\n12:                                               ; preds = %7\n  %13 = bitcast i32* %10 to i8*\n  tail call void @_ZdlPv(i8* nonnull %13) #11\n  br label %14\n\n14:                                               ; preds = %12, %7\n  %15 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %8, i64 1\n  %16 = icmp eq %\"class.std::vector\"* %15, %5\n  br i1 %16, label %17, label %7, !llvm.loop !19\n\n17:                                               ; preds = %14\n  %18 = load %\"class.std::vector\"*, %\"class.std::vector\"** %2, align 8, !tbaa !10\n  br label %19\n\n19:                                               ; preds = %17, %1\n  %20 = phi %\"class.std::vector\"* [ %18, %17 ], [ %3, %1 ]\n  %21 = icmp eq %\"class.std::vector\"* %20, null\n  br i1 %21, label %24, label %22\n\n22:                                               ; preds = %19\n  %23 = bitcast %\"class.std::vector\"* %20 to i8*\n  tail call void @_ZdlPv(i8* nonnull %23) #11\n  br label %24\n\n24:                                               ; preds = %19, %22\n  ret void\n}\n\n; Function Attrs: noinline noreturn nounwind\ndefine linkonce_odr hidden void @__clang_call_terminate(i8* %0) local_unnamed_addr #3 comdat {\n  %2 = tail call i8* @__cxa_begin_catch(i8* %0) #11\n  tail call void @_ZSt9terminatev() #14\n  unreachable\n}\n\ndeclare dso_local i8* @__cxa_begin_catch(i8*) local_unnamed_addr\n\ndeclare dso_local void @_ZSt9terminatev() local_unnamed_addr\n\n; Function Attrs: nobuiltin nounwind\ndeclare dso_local void @_ZdlPv(i8*) local_unnamed_addr #4\n\n; Function Attrs: noreturn\ndeclare dso_local void @_ZSt17__throw_bad_allocv() local_unnamed_addr #5\n\n; Function Attrs: nobuiltin allocsize(0)\ndeclare dso_local nonnull i8* @_Znwm(i64) local_unnamed_addr #6\n\n; Function Attrs: noreturn\ndeclare dso_local void @_ZSt20__throw_length_errorPKc(i8*) local_unnamed_addr #5\n\n; Function Attrs: argmemonly mustprogress nofree nounwind willreturn\ndeclare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #7\n\n; Function Attrs: uwtable\ndefine linkonce_odr dso_local %\"class.std::vector\"* @_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPKSt6vectorIiSaIiEEPS4_EET0_T_S9_S8_(%\"class.std::vector\"* %0, %\"class.std::vector\"* %1, %\"class.std::vector\"* %2) local_unnamed_addr #0 comdat align 2 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {\n  %4 = icmp eq %\"class.std::vector\"* %0, %1\n  br i1 %4, label %67, label %5\n\n5:                                                ; preds = %3, %41\n  %6 = phi %\"class.std::vector\"* [ %45, %41 ], [ %2, %3 ]\n  %7 = phi %\"class.std::vector\"* [ %44, %41 ], [ %0, %3 ]\n  %8 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %7, i64 0, i32 0, i32 0, i32 0, i32 1\n  %9 = load i32*, i32** %8, align 8, !tbaa !9\n  %10 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %7, i64 0, i32 0, i32 0, i32 0, i32 0\n  %11 = load i32*, i32** %10, align 8, !tbaa !3\n  %12 = ptrtoint i32* %9 to i64\n  %13 = ptrtoint i32* %11 to i64\n  %14 = sub i64 %12, %13\n  %15 = ashr exact i64 %14, 2\n  %16 = bitcast %\"class.std::vector\"* %6 to i8*\n  tail call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(24) %16, i8 0, i64 24, i1 false) #11\n  %17 = icmp eq i64 %14, 0\n  br i1 %17, label %26, label %18\n\n18:                                               ; preds = %5\n  %19 = icmp ugt i64 %15, 2305843009213693951\n  br i1 %19, label %20, label %22\n\n20:                                               ; preds = %18\n  invoke void @_ZSt17__throw_bad_allocv() #13\n          to label %21 unwind label %49\n\n21:                                               ; preds = %20\n  unreachable\n\n22:                                               ; preds = %18\n  %23 = invoke noalias nonnull i8* @_Znwm(i64 %14) #12\n          to label %24 unwind label %47\n\n24:                                               ; preds = %22\n  %25 = bitcast i8* %23 to i32*\n  br label %26\n\n26:                                               ; preds = %24, %5\n  %27 = phi i32* [ %25, %24 ], [ null, %5 ]\n  %28 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %6, i64 0, i32 0, i32 0, i32 0, i32 0\n  store i32* %27, i32** %28, align 8, !tbaa !3\n  %29 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %6, i64 0, i32 0, i32 0, i32 0, i32 1\n  store i32* %27, i32** %29, align 8, !tbaa !9\n  %30 = getelementptr inbounds i32, i32* %27, i64 %15\n  %31 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %6, i64 0, i32 0, i32 0, i32 0, i32 2\n  store i32* %30, i32** %31, align 8, !tbaa !8\n  %32 = load i32*, i32** %10, align 8, !tbaa !16\n  %33 = load i32*, i32** %8, align 8, !tbaa !16\n  %34 = ptrtoint i32* %33 to i64\n  %35 = ptrtoint i32* %32 to i64\n  %36 = sub i64 %34, %35\n  %37 = icmp eq i64 %36, 0\n  br i1 %37, label %41, label %38\n\n38:                                               ; preds = %26\n  %39 = bitcast i32* %27 to i8*\n  %40 = bitcast i32* %32 to i8*\n  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %39, i8* align 4 %40, i64 %36, i1 false) #11\n  br label %41\n\n41:                                               ; preds = %38, %26\n  %42 = ashr exact i64 %36, 2\n  %43 = getelementptr inbounds i32, i32* %27, i64 %42\n  store i32* %43, i32** %29, align 8, !tbaa !9\n  %44 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %7, i64 1\n  %45 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %6, i64 1\n  %46 = icmp eq %\"class.std::vector\"* %44, %1\n  br i1 %46, label %67, label %5, !llvm.loop !24\n\n47:                                               ; preds = %22\n  %48 = landingpad { i8*, i32 }\n          catch i8* null\n  br label %51\n\n49:                                               ; preds = %20\n  %50 = landingpad { i8*, i32 }\n          catch i8* null\n  br label %51\n\n51:                                               ; preds = %49, %47\n  %52 = phi { i8*, i32 } [ %48, %47 ], [ %50, %49 ]\n  %53 = extractvalue { i8*, i32 } %52, 0\n  %54 = tail call i8* @__cxa_begin_catch(i8* %53) #11\n  %55 = icmp eq %\"class.std::vector\"* %6, %2\n  br i1 %55, label %66, label %56\n\n56:                                               ; preds = %51, %63\n  %57 = phi %\"class.std::vector\"* [ %64, %63 ], [ %2, %51 ]\n  %58 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %57, i64 0, i32 0, i32 0, i32 0, i32 0\n  %59 = load i32*, i32** %58, align 8, !tbaa !3\n  %60 = icmp eq i32* %59, null\n  br i1 %60, label %63, label %61\n\n61:                                               ; preds = %56\n  %62 = bitcast i32* %59 to i8*\n  tail call void @_ZdlPv(i8* nonnull %62) #11\n  br label %63\n\n63:                                               ; preds = %61, %56\n  %64 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %57, i64 1\n  %65 = icmp eq %\"class.std::vector\"* %64, %6\n  br i1 %65, label %66, label %56, !llvm.loop !19\n\n66:                                               ; preds = %63, %51\n  invoke void @__cxa_rethrow() #13\n          to label %75 unwind label %69\n\n67:                                               ; preds = %41, %3\n  %68 = phi %\"class.std::vector\"* [ %2, %3 ], [ %45, %41 ]\n  ret %\"class.std::vector\"* %68\n\n69:                                               ; preds = %66\n  %70 = landingpad { i8*, i32 }\n          cleanup\n  invoke void @__cxa_end_catch()\n          to label %71 unwind label %72\n\n71:                                               ; preds = %69\n  resume { i8*, i32 } %70\n\n72:                                               ; preds = %69\n  %73 = landingpad { i8*, i32 }\n          catch i8* null\n  %74 = extractvalue { i8*, i32 } %73, 0\n  tail call void @__clang_call_terminate(i8* %74) #14\n  unreachable\n\n75:                                               ; preds = %66\n  unreachable\n}\n\ndeclare dso_local void @__cxa_rethrow() local_unnamed_addr\n\ndeclare dso_local void @__cxa_end_catch() local_unnamed_addr\n\n; Function Attrs: uwtable\ndefine linkonce_odr dso_local void @_ZNSt6vectorIS_IiSaIiEESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_(%\"class.std::vector.0\"* nonnull align 8 dereferenceable(24) %0, %\"class.std::vector\"* %1, %\"class.std::vector\"* nonnull align 8 dereferenceable(24) %2) local_unnamed_addr #0 comdat align 2 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {\n  %4 = getelementptr inbounds %\"class.std::vector.0\", %\"class.std::vector.0\"* %0, i64 0, i32 0, i32 0, i32 0, i32 1\n  %5 = load %\"class.std::vector\"*, %\"class.std::vector\"** %4, align 8, !tbaa !13\n  %6 = getelementptr inbounds %\"class.std::vector.0\", %\"class.std::vector.0\"* %0, i64 0, i32 0, i32 0, i32 0, i32 0\n  %7 = load %\"class.std::vector\"*, %\"class.std::vector\"** %6, align 8, !tbaa !10\n  %8 = ptrtoint %\"class.std::vector\"* %5 to i64\n  %9 = ptrtoint %\"class.std::vector\"* %7 to i64\n  %10 = sub i64 %8, %9\n  %11 = sdiv exact i64 %10, 24\n  %12 = icmp eq i64 %10, 9223372036854775800\n  br i1 %12, label %13, label %14\n\n13:                                               ; preds = %3\n  tail call void @_ZSt20__throw_length_errorPKc(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.1, i64 0, i64 0)) #13\n  unreachable\n\n14:                                               ; preds = %3\n  %15 = icmp eq i64 %10, 0\n  %16 = select i1 %15, i64 1, i64 %11\n  %17 = add nsw i64 %16, %11\n  %18 = icmp ult i64 %17, %11\n  %19 = icmp ugt i64 %17, 384307168202282325\n  %20 = or i1 %18, %19\n  %21 = select i1 %20, i64 384307168202282325, i64 %17\n  %22 = ptrtoint %\"class.std::vector\"* %1 to i64\n  %23 = sub i64 %22, %9\n  %24 = sdiv exact i64 %23, 24\n  %25 = icmp eq i64 %21, 0\n  br i1 %25, label %30, label %26\n\n26:                                               ; preds = %14\n  %27 = mul nuw nsw i64 %21, 24\n  %28 = tail call noalias nonnull i8* @_Znwm(i64 %27) #12\n  %29 = bitcast i8* %28 to %\"class.std::vector\"*\n  br label %30\n\n30:                                               ; preds = %14, %26\n  %31 = phi %\"class.std::vector\"* [ %29, %26 ], [ null, %14 ]\n  %32 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %31, i64 %24\n  %33 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %2, i64 0, i32 0, i32 0, i32 0, i32 1\n  %34 = load i32*, i32** %33, align 8, !tbaa !9\n  %35 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %2, i64 0, i32 0, i32 0, i32 0, i32 0\n  %36 = load i32*, i32** %35, align 8, !tbaa !3\n  %37 = ptrtoint i32* %34 to i64\n  %38 = ptrtoint i32* %36 to i64\n  %39 = sub i64 %37, %38\n  %40 = ashr exact i64 %39, 2\n  %41 = bitcast %\"class.std::vector\"* %32 to i8*\n  tail call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(24) %41, i8 0, i64 24, i1 false) #11\n  %42 = icmp eq i64 %39, 0\n  br i1 %42, label %56, label %43\n\n43:                                               ; preds = %30\n  %44 = icmp ugt i64 %40, 2305843009213693951\n  br i1 %44, label %45, label %47\n\n45:                                               ; preds = %43\n  invoke void @_ZSt17__throw_bad_allocv() #13\n          to label %46 unwind label %112\n\n46:                                               ; preds = %45\n  unreachable\n\n47:                                               ; preds = %43\n  %48 = invoke noalias nonnull i8* @_Znwm(i64 %39) #12\n          to label %49 unwind label %112\n\n49:                                               ; preds = %47\n  %50 = bitcast i8* %48 to i32*\n  %51 = load i32*, i32** %35, align 8, !tbaa !16\n  %52 = load i32*, i32** %33, align 8, !tbaa !16\n  %53 = ptrtoint i32* %52 to i64\n  %54 = ptrtoint i32* %51 to i64\n  %55 = sub i64 %53, %54\n  br label %56\n\n56:                                               ; preds = %49, %30\n  %57 = phi i64 [ %55, %49 ], [ 0, %30 ]\n  %58 = phi i32* [ %51, %49 ], [ %36, %30 ]\n  %59 = phi i32* [ %50, %49 ], [ null, %30 ]\n  %60 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %32, i64 0, i32 0, i32 0, i32 0, i32 0\n  store i32* %59, i32** %60, align 8, !tbaa !3\n  %61 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %31, i64 %24, i32 0, i32 0, i32 0, i32 1\n  store i32* %59, i32** %61, align 8, !tbaa !9\n  %62 = getelementptr inbounds i32, i32* %59, i64 %40\n  %63 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %31, i64 %24, i32 0, i32 0, i32 0, i32 2\n  store i32* %62, i32** %63, align 8, !tbaa !8\n  %64 = icmp eq i64 %57, 0\n  br i1 %64, label %68, label %65\n\n65:                                               ; preds = %56\n  %66 = bitcast i32* %59 to i8*\n  %67 = bitcast i32* %58 to i8*\n  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %66, i8* align 4 %67, i64 %57, i1 false) #11\n  br label %68\n\n68:                                               ; preds = %65, %56\n  %69 = ashr exact i64 %57, 2\n  %70 = getelementptr inbounds i32, i32* %59, i64 %69\n  store i32* %70, i32** %61, align 8, !tbaa !9\n  %71 = icmp eq %\"class.std::vector\"* %7, %1\n  br i1 %71, label %85, label %72\n\n72:                                               ; preds = %68, %72\n  %73 = phi %\"class.std::vector\"* [ %83, %72 ], [ %31, %68 ]\n  %74 = phi %\"class.std::vector\"* [ %82, %72 ], [ %7, %68 ]\n  %75 = bitcast %\"class.std::vector\"* %74 to <2 x i32*>*\n  %76 = load <2 x i32*>, <2 x i32*>* %75, align 8, !tbaa !16\n  %77 = bitcast %\"class.std::vector\"* %73 to <2 x i32*>*\n  store <2 x i32*> %76, <2 x i32*>* %77, align 8, !tbaa !16\n  %78 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %73, i64 0, i32 0, i32 0, i32 0, i32 2\n  %79 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %74, i64 0, i32 0, i32 0, i32 0, i32 2\n  %80 = load i32*, i32** %79, align 8, !tbaa !8\n  store i32* %80, i32** %78, align 8, !tbaa !8\n  %81 = bitcast %\"class.std::vector\"* %74 to i8*\n  tail call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(24) %81, i8 0, i64 24, i1 false) #11\n  %82 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %74, i64 1\n  %83 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %73, i64 1\n  %84 = icmp eq %\"class.std::vector\"* %82, %1\n  br i1 %84, label %85, label %72, !llvm.loop !25\n\n85:                                               ; preds = %72, %68\n  %86 = phi %\"class.std::vector\"* [ %31, %68 ], [ %83, %72 ]\n  %87 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %86, i64 1\n  %88 = icmp eq %\"class.std::vector\"* %5, %1\n  br i1 %88, label %102, label %89\n\n89:                                               ; preds = %85, %89\n  %90 = phi %\"class.std::vector\"* [ %100, %89 ], [ %87, %85 ]\n  %91 = phi %\"class.std::vector\"* [ %99, %89 ], [ %1, %85 ]\n  %92 = bitcast %\"class.std::vector\"* %91 to <2 x i32*>*\n  %93 = load <2 x i32*>, <2 x i32*>* %92, align 8, !tbaa !16\n  %94 = bitcast %\"class.std::vector\"* %90 to <2 x i32*>*\n  store <2 x i32*> %93, <2 x i32*>* %94, align 8, !tbaa !16\n  %95 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %90, i64 0, i32 0, i32 0, i32 0, i32 2\n  %96 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %91, i64 0, i32 0, i32 0, i32 0, i32 2\n  %97 = load i32*, i32** %96, align 8, !tbaa !8\n  store i32* %97, i32** %95, align 8, !tbaa !8\n  %98 = bitcast %\"class.std::vector\"* %91 to i8*\n  tail call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(24) %98, i8 0, i64 24, i1 false) #11\n  %99 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %91, i64 1\n  %100 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %90, i64 1\n  %101 = icmp eq %\"class.std::vector\"* %99, %5\n  br i1 %101, label %102, label %89, !llvm.loop !25\n\n102:                                              ; preds = %89, %85\n  %103 = phi %\"class.std::vector\"* [ %87, %85 ], [ %100, %89 ]\n  %104 = icmp eq %\"class.std::vector\"* %7, null\n  br i1 %104, label %107, label %105\n\n105:                                              ; preds = %102\n  %106 = bitcast %\"class.std::vector\"* %7 to i8*\n  tail call void @_ZdlPv(i8* nonnull %106) #11\n  br label %107\n\n107:                                              ; preds = %102, %105\n  %108 = getelementptr inbounds %\"class.std::vector.0\", %\"class.std::vector.0\"* %0, i64 0, i32 0, i32 0, i32 0, i32 2\n  store %\"class.std::vector\"* %31, %\"class.std::vector\"** %6, align 8, !tbaa !10\n  store %\"class.std::vector\"* %103, %\"class.std::vector\"** %4, align 8, !tbaa !13\n  %109 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %31, i64 %21\n  store %\"class.std::vector\"* %109, %\"class.std::vector\"** %108, align 8, !tbaa !12\n  ret void\n\n110:                                              ; preds = %112\n  %111 = landingpad { i8*, i32 }\n          cleanup\n  invoke void @__cxa_end_catch()\n          to label %117 unwind label %118\n\n112:                                              ; preds = %45, %47\n  %113 = landingpad { i8*, i32 }\n          catch i8* null\n  %114 = extractvalue { i8*, i32 } %113, 0\n  %115 = tail call i8* @__cxa_begin_catch(i8* %114) #11\n  %116 = bitcast %\"class.std::vector\"* %31 to i8*\n  tail call void @_ZdlPv(i8* nonnull %116) #11\n  invoke void @__cxa_rethrow() #13\n          to label %121 unwind label %110\n\n117:                                              ; preds = %110\n  resume { i8*, i32 } %111\n\n118:                                              ; preds = %110\n  %119 = landingpad { i8*, i32 }\n          catch i8* null\n  %120 = extractvalue { i8*, i32 } %119, 0\n  tail call void @__clang_call_terminate(i8* %120) #14\n  unreachable\n\n121:                                              ; preds = %112\n  unreachable\n}\n\n; Function Attrs: mustprogress uwtable\ndefine linkonce_odr dso_local %\"class.std::vector\"* @_ZNSt6vectorIS_IiSaIiEESaIS1_EE20_M_allocate_and_copyIN9__gnu_cxx17__normal_iteratorIPKS1_S3_EEEEPS1_mT_SB_(%\"class.std::vector.0\"* nonnull align 8 dereferenceable(24) %0, i64 %1, %\"class.std::vector\"* %2, %\"class.std::vector\"* %3) local_unnamed_addr #8 comdat align 2 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {\n  %5 = icmp eq i64 %1, 0\n  br i1 %5, label %13, label %6\n\n6:                                                ; preds = %4\n  %7 = icmp ugt i64 %1, 384307168202282325\n  br i1 %7, label %8, label %9\n\n8:                                                ; preds = %6\n  tail call void @_ZSt17__throw_bad_allocv() #13\n  unreachable\n\n9:                                                ; preds = %6\n  %10 = mul nuw nsw i64 %1, 24\n  %11 = tail call noalias nonnull i8* @_Znwm(i64 %10) #12\n  %12 = bitcast i8* %11 to %\"class.std::vector\"*\n  br label %13\n\n13:                                               ; preds = %4, %9\n  %14 = phi %\"class.std::vector\"* [ %12, %9 ], [ null, %4 ]\n  %15 = invoke %\"class.std::vector\"* @_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKSt6vectorIiSaIiEES4_IS6_SaIS6_EEEEPS6_EET0_T_SE_SD_(%\"class.std::vector\"* %2, %\"class.std::vector\"* %3, %\"class.std::vector\"* %14)\n          to label %16 unwind label %17\n\n16:                                               ; preds = %13\n  ret %\"class.std::vector\"* %14\n\n17:                                               ; preds = %13\n  %18 = landingpad { i8*, i32 }\n          catch i8* null\n  %19 = extractvalue { i8*, i32 } %18, 0\n  %20 = tail call i8* @__cxa_begin_catch(i8* %19) #11\n  %21 = icmp eq %\"class.std::vector\"* %14, null\n  br i1 %21, label %24, label %22\n\n22:                                               ; preds = %17\n  %23 = bitcast %\"class.std::vector\"* %14 to i8*\n  tail call void @_ZdlPv(i8* nonnull %23) #11\n  br label %24\n\n24:                                               ; preds = %22, %17\n  invoke void @__cxa_rethrow() #13\n          to label %31 unwind label %25\n\n25:                                               ; preds = %24\n  %26 = landingpad { i8*, i32 }\n          cleanup\n  invoke void @__cxa_end_catch()\n          to label %27 unwind label %28\n\n27:                                               ; preds = %25\n  resume { i8*, i32 } %26\n\n28:                                               ; preds = %25\n  %29 = landingpad { i8*, i32 }\n          catch i8* null\n  %30 = extractvalue { i8*, i32 } %29, 0\n  tail call void @__clang_call_terminate(i8* %30) #14\n  unreachable\n\n31:                                               ; preds = %24\n  unreachable\n}\n\n; Function Attrs: uwtable\ndefine linkonce_odr dso_local %\"class.std::vector\"* @_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKSt6vectorIiSaIiEES4_IS6_SaIS6_EEEEPS6_EET0_T_SE_SD_(%\"class.std::vector\"* %0, %\"class.std::vector\"* %1, %\"class.std::vector\"* %2) local_unnamed_addr #0 comdat align 2 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {\n  %4 = icmp eq %\"class.std::vector\"* %0, %1\n  br i1 %4, label %67, label %5\n\n5:                                                ; preds = %3, %41\n  %6 = phi %\"class.std::vector\"* [ %45, %41 ], [ %2, %3 ]\n  %7 = phi %\"class.std::vector\"* [ %44, %41 ], [ %0, %3 ]\n  %8 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %7, i64 0, i32 0, i32 0, i32 0, i32 1\n  %9 = load i32*, i32** %8, align 8, !tbaa !9\n  %10 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %7, i64 0, i32 0, i32 0, i32 0, i32 0\n  %11 = load i32*, i32** %10, align 8, !tbaa !3\n  %12 = ptrtoint i32* %9 to i64\n  %13 = ptrtoint i32* %11 to i64\n  %14 = sub i64 %12, %13\n  %15 = ashr exact i64 %14, 2\n  %16 = bitcast %\"class.std::vector\"* %6 to i8*\n  tail call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(24) %16, i8 0, i64 24, i1 false) #11\n  %17 = icmp eq i64 %14, 0\n  br i1 %17, label %26, label %18\n\n18:                                               ; preds = %5\n  %19 = icmp ugt i64 %15, 2305843009213693951\n  br i1 %19, label %20, label %22\n\n20:                                               ; preds = %18\n  invoke void @_ZSt17__throw_bad_allocv() #13\n          to label %21 unwind label %49\n\n21:                                               ; preds = %20\n  unreachable\n\n22:                                               ; preds = %18\n  %23 = invoke noalias nonnull i8* @_Znwm(i64 %14) #12\n          to label %24 unwind label %47\n\n24:                                               ; preds = %22\n  %25 = bitcast i8* %23 to i32*\n  br label %26\n\n26:                                               ; preds = %24, %5\n  %27 = phi i32* [ %25, %24 ], [ null, %5 ]\n  %28 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %6, i64 0, i32 0, i32 0, i32 0, i32 0\n  store i32* %27, i32** %28, align 8, !tbaa !3\n  %29 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %6, i64 0, i32 0, i32 0, i32 0, i32 1\n  store i32* %27, i32** %29, align 8, !tbaa !9\n  %30 = getelementptr inbounds i32, i32* %27, i64 %15\n  %31 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %6, i64 0, i32 0, i32 0, i32 0, i32 2\n  store i32* %30, i32** %31, align 8, !tbaa !8\n  %32 = load i32*, i32** %10, align 8, !tbaa !16\n  %33 = load i32*, i32** %8, align 8, !tbaa !16\n  %34 = ptrtoint i32* %33 to i64\n  %35 = ptrtoint i32* %32 to i64\n  %36 = sub i64 %34, %35\n  %37 = icmp eq i64 %36, 0\n  br i1 %37, label %41, label %38\n\n38:                                               ; preds = %26\n  %39 = bitcast i32* %27 to i8*\n  %40 = bitcast i32* %32 to i8*\n  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %39, i8* align 4 %40, i64 %36, i1 false) #11\n  br label %41\n\n41:                                               ; preds = %38, %26\n  %42 = ashr exact i64 %36, 2\n  %43 = getelementptr inbounds i32, i32* %27, i64 %42\n  store i32* %43, i32** %29, align 8, !tbaa !9\n  %44 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %7, i64 1\n  %45 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %6, i64 1\n  %46 = icmp eq %\"class.std::vector\"* %44, %1\n  br i1 %46, label %67, label %5, !llvm.loop !26\n\n47:                                               ; preds = %22\n  %48 = landingpad { i8*, i32 }\n          catch i8* null\n  br label %51\n\n49:                                               ; preds = %20\n  %50 = landingpad { i8*, i32 }\n          catch i8* null\n  br label %51\n\n51:                                               ; preds = %49, %47\n  %52 = phi { i8*, i32 } [ %48, %47 ], [ %50, %49 ]\n  %53 = extractvalue { i8*, i32 } %52, 0\n  %54 = tail call i8* @__cxa_begin_catch(i8* %53) #11\n  %55 = icmp eq %\"class.std::vector\"* %6, %2\n  br i1 %55, label %66, label %56\n\n56:                                               ; preds = %51, %63\n  %57 = phi %\"class.std::vector\"* [ %64, %63 ], [ %2, %51 ]\n  %58 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %57, i64 0, i32 0, i32 0, i32 0, i32 0\n  %59 = load i32*, i32** %58, align 8, !tbaa !3\n  %60 = icmp eq i32* %59, null\n  br i1 %60, label %63, label %61\n\n61:                                               ; preds = %56\n  %62 = bitcast i32* %59 to i8*\n  tail call void @_ZdlPv(i8* nonnull %62) #11\n  br label %63\n\n63:                                               ; preds = %61, %56\n  %64 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %57, i64 1\n  %65 = icmp eq %\"class.std::vector\"* %64, %6\n  br i1 %65, label %66, label %56, !llvm.loop !19\n\n66:                                               ; preds = %63, %51\n  invoke void @__cxa_rethrow() #13\n          to label %75 unwind label %69\n\n67:                                               ; preds = %41, %3\n  %68 = phi %\"class.std::vector\"* [ %2, %3 ], [ %45, %41 ]\n  ret %\"class.std::vector\"* %68\n\n69:                                               ; preds = %66\n  %70 = landingpad { i8*, i32 }\n          cleanup\n  invoke void @__cxa_end_catch()\n          to label %71 unwind label %72\n\n71:                                               ; preds = %69\n  resume { i8*, i32 } %70\n\n72:                                               ; preds = %69\n  %73 = landingpad { i8*, i32 }\n          catch i8* null\n  %74 = extractvalue { i8*, i32 } %73, 0\n  tail call void @__clang_call_terminate(i8* %74) #14\n  unreachable\n\n75:                                               ; preds = %66\n  unreachable\n}\n\n; Function Attrs: uwtable\ndefine linkonce_odr dso_local nonnull align 8 dereferenceable(24) %\"class.std::vector\"* @_ZNSt6vectorIiSaIiEEaSERKS1_(%\"class.std::vector\"* nonnull align 8 dereferenceable(24) %0, %\"class.std::vector\"* nonnull align 8 dereferenceable(24) %1) local_unnamed_addr #0 comdat align 2 personality i32 (...)* @__gxx_personality_v0 {\n  %3 = icmp eq %\"class.std::vector\"* %1, %0\n  br i1 %3, label %81, label %4\n\n4:                                                ; preds = %2\n  %5 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %1, i64 0, i32 0, i32 0, i32 0, i32 1\n  %6 = load i32*, i32** %5, align 8, !tbaa !9\n  %7 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %1, i64 0, i32 0, i32 0, i32 0, i32 0\n  %8 = load i32*, i32** %7, align 8, !tbaa !3\n  %9 = ptrtoint i32* %6 to i64\n  %10 = ptrtoint i32* %8 to i64\n  %11 = sub i64 %9, %10\n  %12 = ashr exact i64 %11, 2\n  %13 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0, i64 0, i32 0, i32 0, i32 0, i32 2\n  %14 = load i32*, i32** %13, align 8, !tbaa !8\n  %15 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0, i64 0, i32 0, i32 0, i32 0, i32 0\n  %16 = load i32*, i32** %15, align 8, !tbaa !3\n  %17 = ptrtoint i32* %14 to i64\n  %18 = ptrtoint i32* %16 to i64\n  %19 = sub i64 %17, %18\n  %20 = ashr exact i64 %19, 2\n  %21 = icmp ugt i64 %12, %20\n  br i1 %21, label %22, label %39\n\n22:                                               ; preds = %4\n  %23 = icmp ugt i64 %12, 2305843009213693951\n  br i1 %23, label %24, label %25\n\n24:                                               ; preds = %22\n  tail call void @_ZSt17__throw_bad_allocv() #13\n  unreachable\n\n25:                                               ; preds = %22\n  %26 = tail call noalias nonnull i8* @_Znwm(i64 %11) #12\n  %27 = bitcast i8* %26 to i32*\n  %28 = icmp eq i64 %11, 0\n  br i1 %28, label %31, label %29\n\n29:                                               ; preds = %25\n  %30 = bitcast i32* %8 to i8*\n  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %26, i8* align 4 %30, i64 %11, i1 false) #11\n  br label %31\n\n31:                                               ; preds = %25, %29\n  %32 = load i32*, i32** %15, align 8, !tbaa !3\n  %33 = icmp eq i32* %32, null\n  br i1 %33, label %36, label %34\n\n34:                                               ; preds = %31\n  %35 = bitcast i32* %32 to i8*\n  tail call void @_ZdlPv(i8* nonnull %35) #11\n  br label %36\n\n36:                                               ; preds = %31, %34\n  %37 = bitcast %\"class.std::vector\"* %0 to i8**\n  store i8* %26, i8** %37, align 8, !tbaa !3\n  %38 = getelementptr inbounds i32, i32* %27, i64 %12\n  store i32* %38, i32** %13, align 8, !tbaa !8\n  br label %77\n\n39:                                               ; preds = %4\n  %40 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0, i64 0, i32 0, i32 0, i32 0, i32 1\n  %41 = load i32*, i32** %40, align 8, !tbaa !9\n  %42 = ptrtoint i32* %41 to i64\n  %43 = sub i64 %42, %18\n  %44 = ashr exact i64 %43, 2\n  %45 = icmp ult i64 %44, %12\n  br i1 %45, label %51, label %46\n\n46:                                               ; preds = %39\n  %47 = icmp eq i64 %11, 0\n  br i1 %47, label %77, label %48\n\n48:                                               ; preds = %46\n  %49 = bitcast i32* %16 to i8*\n  %50 = bitcast i32* %8 to i8*\n  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %49, i8* align 4 %50, i64 %11, i1 false) #11\n  br label %77\n\n51:                                               ; preds = %39\n  %52 = icmp eq i64 %43, 0\n  br i1 %52, label %65, label %53\n\n53:                                               ; preds = %51\n  %54 = bitcast i32* %16 to i8*\n  %55 = bitcast i32* %8 to i8*\n  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %54, i8* align 4 %55, i64 %43, i1 false) #11\n  %56 = load i32*, i32** %7, align 8, !tbaa !3\n  %57 = load i32*, i32** %40, align 8, !tbaa !9\n  %58 = load i32*, i32** %15, align 8, !tbaa !3\n  %59 = load i32*, i32** %5, align 8, !tbaa !9\n  %60 = ptrtoint i32* %57 to i64\n  %61 = ptrtoint i32* %58 to i64\n  %62 = sub i64 %60, %61\n  %63 = ashr exact i64 %62, 2\n  %64 = ptrtoint i32* %59 to i64\n  br label %65\n\n65:                                               ; preds = %51, %53\n  %66 = phi i64 [ %9, %51 ], [ %64, %53 ]\n  %67 = phi i64 [ 0, %51 ], [ %63, %53 ]\n  %68 = phi i32* [ %41, %51 ], [ %57, %53 ]\n  %69 = phi i32* [ %8, %51 ], [ %56, %53 ]\n  %70 = getelementptr inbounds i32, i32* %69, i64 %67\n  %71 = ptrtoint i32* %70 to i64\n  %72 = sub i64 %66, %71\n  %73 = icmp eq i64 %72, 0\n  br i1 %73, label %77, label %74\n\n74:                                               ; preds = %65\n  %75 = bitcast i32* %68 to i8*\n  %76 = bitcast i32* %70 to i8*\n  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %75, i8* align 4 %76, i64 %72, i1 false) #11\n  br label %77\n\n77:                                               ; preds = %74, %65, %48, %46, %36\n  %78 = load i32*, i32** %15, align 8, !tbaa !3\n  %79 = getelementptr inbounds i32, i32* %78, i64 %12\n  %80 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0, i64 0, i32 0, i32 0, i32 0, i32 1\n  store i32* %79, i32** %80, align 8, !tbaa !9\n  br label %81\n\n81:                                               ; preds = %77, %2\n  ret %\"class.std::vector\"* %0\n}\n\n; Function Attrs: uwtable\ndefine linkonce_odr dso_local %\"class.std::vector\"* @_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPSt6vectorIiSaIiEES5_EET0_T_S7_S6_(%\"class.std::vector\"* %0, %\"class.std::vector\"* %1, %\"class.std::vector\"* %2) local_unnamed_addr #0 comdat align 2 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {\n  %4 = icmp eq %\"class.std::vector\"* %0, %1\n  br i1 %4, label %67, label %5\n\n5:                                                ; preds = %3, %41\n  %6 = phi %\"class.std::vector\"* [ %45, %41 ], [ %2, %3 ]\n  %7 = phi %\"class.std::vector\"* [ %44, %41 ], [ %0, %3 ]\n  %8 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %7, i64 0, i32 0, i32 0, i32 0, i32 1\n  %9 = load i32*, i32** %8, align 8, !tbaa !9\n  %10 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %7, i64 0, i32 0, i32 0, i32 0, i32 0\n  %11 = load i32*, i32** %10, align 8, !tbaa !3\n  %12 = ptrtoint i32* %9 to i64\n  %13 = ptrtoint i32* %11 to i64\n  %14 = sub i64 %12, %13\n  %15 = ashr exact i64 %14, 2\n  %16 = bitcast %\"class.std::vector\"* %6 to i8*\n  tail call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(24) %16, i8 0, i64 24, i1 false) #11\n  %17 = icmp eq i64 %14, 0\n  br i1 %17, label %26, label %18\n\n18:                                               ; preds = %5\n  %19 = icmp ugt i64 %15, 2305843009213693951\n  br i1 %19, label %20, label %22\n\n20:                                               ; preds = %18\n  invoke void @_ZSt17__throw_bad_allocv() #13\n          to label %21 unwind label %49\n\n21:                                               ; preds = %20\n  unreachable\n\n22:                                               ; preds = %18\n  %23 = invoke noalias nonnull i8* @_Znwm(i64 %14) #12\n          to label %24 unwind label %47\n\n24:                                               ; preds = %22\n  %25 = bitcast i8* %23 to i32*\n  br label %26\n\n26:                                               ; preds = %24, %5\n  %27 = phi i32* [ %25, %24 ], [ null, %5 ]\n  %28 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %6, i64 0, i32 0, i32 0, i32 0, i32 0\n  store i32* %27, i32** %28, align 8, !tbaa !3\n  %29 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %6, i64 0, i32 0, i32 0, i32 0, i32 1\n  store i32* %27, i32** %29, align 8, !tbaa !9\n  %30 = getelementptr inbounds i32, i32* %27, i64 %15\n  %31 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %6, i64 0, i32 0, i32 0, i32 0, i32 2\n  store i32* %30, i32** %31, align 8, !tbaa !8\n  %32 = load i32*, i32** %10, align 8, !tbaa !16\n  %33 = load i32*, i32** %8, align 8, !tbaa !16\n  %34 = ptrtoint i32* %33 to i64\n  %35 = ptrtoint i32* %32 to i64\n  %36 = sub i64 %34, %35\n  %37 = icmp eq i64 %36, 0\n  br i1 %37, label %41, label %38\n\n38:                                               ; preds = %26\n  %39 = bitcast i32* %27 to i8*\n  %40 = bitcast i32* %32 to i8*\n  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %39, i8* align 4 %40, i64 %36, i1 false) #11\n  br label %41\n\n41:                                               ; preds = %38, %26\n  %42 = ashr exact i64 %36, 2\n  %43 = getelementptr inbounds i32, i32* %27, i64 %42\n  store i32* %43, i32** %29, align 8, !tbaa !9\n  %44 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %7, i64 1\n  %45 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %6, i64 1\n  %46 = icmp eq %\"class.std::vector\"* %44, %1\n  br i1 %46, label %67, label %5, !llvm.loop !27\n\n47:                                               ; preds = %22\n  %48 = landingpad { i8*, i32 }\n          catch i8* null\n  br label %51\n\n49:                                               ; preds = %20\n  %50 = landingpad { i8*, i32 }\n          catch i8* null\n  br label %51\n\n51:                                               ; preds = %49, %47\n  %52 = phi { i8*, i32 } [ %48, %47 ], [ %50, %49 ]\n  %53 = extractvalue { i8*, i32 } %52, 0\n  %54 = tail call i8* @__cxa_begin_catch(i8* %53) #11\n  %55 = icmp eq %\"class.std::vector\"* %6, %2\n  br i1 %55, label %66, label %56\n\n56:                                               ; preds = %51, %63\n  %57 = phi %\"class.std::vector\"* [ %64, %63 ], [ %2, %51 ]\n  %58 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %57, i64 0, i32 0, i32 0, i32 0, i32 0\n  %59 = load i32*, i32** %58, align 8, !tbaa !3\n  %60 = icmp eq i32* %59, null\n  br i1 %60, label %63, label %61\n\n61:                                               ; preds = %56\n  %62 = bitcast i32* %59 to i8*\n  tail call void @_ZdlPv(i8* nonnull %62) #11\n  br label %63\n\n63:                                               ; preds = %61, %56\n  %64 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %57, i64 1\n  %65 = icmp eq %\"class.std::vector\"* %64, %6\n  br i1 %65, label %66, label %56, !llvm.loop !19\n\n66:                                               ; preds = %63, %51\n  invoke void @__cxa_rethrow() #13\n          to label %75 unwind label %69\n\n67:                                               ; preds = %41, %3\n  %68 = phi %\"class.std::vector\"* [ %2, %3 ], [ %45, %41 ]\n  ret %\"class.std::vector\"* %68\n\n69:                                               ; preds = %66\n  %70 = landingpad { i8*, i32 }\n          cleanup\n  invoke void @__cxa_end_catch()\n          to label %71 unwind label %72\n\n71:                                               ; preds = %69\n  resume { i8*, i32 } %70\n\n72:                                               ; preds = %69\n  %73 = landingpad { i8*, i32 }\n          catch i8* null\n  %74 = extractvalue { i8*, i32 } %73, 0\n  tail call void @__clang_call_terminate(i8* %74) #14\n  unreachable\n\n75:                                               ; preds = %66\n  unreachable\n}\n\n; Function Attrs: uwtable\ndefine linkonce_odr dso_local void @_ZNSt6vectorIS_IiSaIiEESaIS1_EE13_M_assign_auxIPKS1_EEvT_S7_St20forward_iterator_tag(%\"class.std::vector.0\"* nonnull align 8 dereferenceable(24) %0, %\"class.std::vector\"* %1, %\"class.std::vector\"* %2) local_unnamed_addr #0 comdat align 2 personality i32 (...)* @__gxx_personality_v0 {\n  %4 = ptrtoint %\"class.std::vector\"* %2 to i64\n  %5 = ptrtoint %\"class.std::vector\"* %1 to i64\n  %6 = sub i64 %4, %5\n  %7 = sdiv exact i64 %6, 24\n  %8 = getelementptr inbounds %\"class.std::vector.0\", %\"class.std::vector.0\"* %0, i64 0, i32 0, i32 0, i32 0, i32 2\n  %9 = load %\"class.std::vector\"*, %\"class.std::vector\"** %8, align 8, !tbaa !12\n  %10 = getelementptr inbounds %\"class.std::vector.0\", %\"class.std::vector.0\"* %0, i64 0, i32 0, i32 0, i32 0, i32 0\n  %11 = load %\"class.std::vector\"*, %\"class.std::vector\"** %10, align 8, !tbaa !10\n  %12 = ptrtoint %\"class.std::vector\"* %9 to i64\n  %13 = ptrtoint %\"class.std::vector\"* %11 to i64\n  %14 = sub i64 %12, %13\n  %15 = sdiv exact i64 %14, 24\n  %16 = icmp ugt i64 %7, %15\n  br i1 %16, label %17, label %45\n\n17:                                               ; preds = %3\n  %18 = icmp ugt i64 %7, 384307168202282325\n  br i1 %18, label %19, label %20\n\n19:                                               ; preds = %17\n  tail call void @_ZSt20__throw_length_errorPKc(i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str, i64 0, i64 0)) #13\n  unreachable\n\n20:                                               ; preds = %17\n  %21 = tail call %\"class.std::vector\"* @_ZNSt6vectorIS_IiSaIiEESaIS1_EE20_M_allocate_and_copyIPKS1_EEPS1_mT_S8_(%\"class.std::vector.0\"* nonnull align 8 dereferenceable(24) %0, i64 %7, %\"class.std::vector\"* %1, %\"class.std::vector\"* %2)\n  %22 = load %\"class.std::vector\"*, %\"class.std::vector\"** %10, align 8, !tbaa !10\n  %23 = getelementptr inbounds %\"class.std::vector.0\", %\"class.std::vector.0\"* %0, i64 0, i32 0, i32 0, i32 0, i32 1\n  %24 = load %\"class.std::vector\"*, %\"class.std::vector\"** %23, align 8, !tbaa !13\n  %25 = icmp eq %\"class.std::vector\"* %22, %24\n  br i1 %25, label %38, label %26\n\n26:                                               ; preds = %20, %33\n  %27 = phi %\"class.std::vector\"* [ %34, %33 ], [ %22, %20 ]\n  %28 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %27, i64 0, i32 0, i32 0, i32 0, i32 0\n  %29 = load i32*, i32** %28, align 8, !tbaa !3\n  %30 = icmp eq i32* %29, null\n  br i1 %30, label %33, label %31\n\n31:                                               ; preds = %26\n  %32 = bitcast i32* %29 to i8*\n  tail call void @_ZdlPv(i8* nonnull %32) #11\n  br label %33\n\n33:                                               ; preds = %31, %26\n  %34 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %27, i64 1\n  %35 = icmp eq %\"class.std::vector\"* %34, %24\n  br i1 %35, label %36, label %26, !llvm.loop !19\n\n36:                                               ; preds = %33\n  %37 = load %\"class.std::vector\"*, %\"class.std::vector\"** %10, align 8, !tbaa !10\n  br label %38\n\n38:                                               ; preds = %36, %20\n  %39 = phi %\"class.std::vector\"* [ %37, %36 ], [ %22, %20 ]\n  %40 = icmp eq %\"class.std::vector\"* %39, null\n  br i1 %40, label %43, label %41\n\n41:                                               ; preds = %38\n  %42 = bitcast %\"class.std::vector\"* %39 to i8*\n  tail call void @_ZdlPv(i8* nonnull %42) #11\n  br label %43\n\n43:                                               ; preds = %38, %41\n  store %\"class.std::vector\"* %21, %\"class.std::vector\"** %10, align 8, !tbaa !10\n  %44 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %21, i64 %7\n  store %\"class.std::vector\"* %44, %\"class.std::vector\"** %23, align 8, !tbaa !13\n  store %\"class.std::vector\"* %44, %\"class.std::vector\"** %8, align 8, !tbaa !12\n  br label %101\n\n45:                                               ; preds = %3\n  %46 = getelementptr inbounds %\"class.std::vector.0\", %\"class.std::vector.0\"* %0, i64 0, i32 0, i32 0, i32 0, i32 1\n  %47 = load %\"class.std::vector\"*, %\"class.std::vector\"** %46, align 8, !tbaa !13\n  %48 = ptrtoint %\"class.std::vector\"* %47 to i64\n  %49 = sub i64 %48, %13\n  %50 = sdiv exact i64 %49, 24\n  %51 = icmp ult i64 %50, %7\n  br i1 %51, label %82, label %52\n\n52:                                               ; preds = %45\n  %53 = icmp sgt i64 %6, 0\n  br i1 %53, label %54, label %67\n\n54:                                               ; preds = %52\n  %55 = udiv exact i64 %6, 24\n  br label %56\n\n56:                                               ; preds = %56, %54\n  %57 = phi i64 [ %63, %56 ], [ %55, %54 ]\n  %58 = phi %\"class.std::vector\"* [ %62, %56 ], [ %11, %54 ]\n  %59 = phi %\"class.std::vector\"* [ %61, %56 ], [ %1, %54 ]\n  %60 = tail call nonnull align 8 dereferenceable(24) %\"class.std::vector\"* @_ZNSt6vectorIiSaIiEEaSERKS1_(%\"class.std::vector\"* nonnull align 8 dereferenceable(24) %58, %\"class.std::vector\"* nonnull align 8 dereferenceable(24) %59)\n  %61 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %59, i64 1\n  %62 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %58, i64 1\n  %63 = add nsw i64 %57, -1\n  %64 = icmp sgt i64 %57, 1\n  br i1 %64, label %56, label %65, !llvm.loop !21\n\n65:                                               ; preds = %56\n  %66 = load %\"class.std::vector\"*, %\"class.std::vector\"** %46, align 8, !tbaa !13\n  br label %67\n\n67:                                               ; preds = %65, %52\n  %68 = phi %\"class.std::vector\"* [ %47, %52 ], [ %66, %65 ]\n  %69 = phi %\"class.std::vector\"* [ %11, %52 ], [ %62, %65 ]\n  %70 = icmp eq %\"class.std::vector\"* %68, %69\n  br i1 %70, label %101, label %71\n\n71:                                               ; preds = %67, %78\n  %72 = phi %\"class.std::vector\"* [ %79, %78 ], [ %69, %67 ]\n  %73 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %72, i64 0, i32 0, i32 0, i32 0, i32 0\n  %74 = load i32*, i32** %73, align 8, !tbaa !3\n  %75 = icmp eq i32* %74, null\n  br i1 %75, label %78, label %76\n\n76:                                               ; preds = %71\n  %77 = bitcast i32* %74 to i8*\n  tail call void @_ZdlPv(i8* nonnull %77) #11\n  br label %78\n\n78:                                               ; preds = %76, %71\n  %79 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %72, i64 1\n  %80 = icmp eq %\"class.std::vector\"* %79, %68\n  br i1 %80, label %81, label %71, !llvm.loop !19\n\n81:                                               ; preds = %78\n  store %\"class.std::vector\"* %69, %\"class.std::vector\"** %46, align 8, !tbaa !13\n  br label %101\n\n82:                                               ; preds = %45\n  %83 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %1, i64 %50\n  %84 = icmp sgt i64 %49, 0\n  br i1 %84, label %85, label %98\n\n85:                                               ; preds = %82\n  %86 = udiv exact i64 %49, 24\n  br label %87\n\n87:                                               ; preds = %87, %85\n  %88 = phi i64 [ %94, %87 ], [ %86, %85 ]\n  %89 = phi %\"class.std::vector\"* [ %93, %87 ], [ %11, %85 ]\n  %90 = phi %\"class.std::vector\"* [ %92, %87 ], [ %1, %85 ]\n  %91 = tail call nonnull align 8 dereferenceable(24) %\"class.std::vector\"* @_ZNSt6vectorIiSaIiEEaSERKS1_(%\"class.std::vector\"* nonnull align 8 dereferenceable(24) %89, %\"class.std::vector\"* nonnull align 8 dereferenceable(24) %90)\n  %92 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %90, i64 1\n  %93 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %89, i64 1\n  %94 = add nsw i64 %88, -1\n  %95 = icmp sgt i64 %88, 1\n  br i1 %95, label %87, label %96, !llvm.loop !21\n\n96:                                               ; preds = %87\n  %97 = load %\"class.std::vector\"*, %\"class.std::vector\"** %46, align 8, !tbaa !13\n  br label %98\n\n98:                                               ; preds = %96, %82\n  %99 = phi %\"class.std::vector\"* [ %97, %96 ], [ %47, %82 ]\n  %100 = tail call %\"class.std::vector\"* @_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPKSt6vectorIiSaIiEEPS4_EET0_T_S9_S8_(%\"class.std::vector\"* %83, %\"class.std::vector\"* %2, %\"class.std::vector\"* %99)\n  store %\"class.std::vector\"* %100, %\"class.std::vector\"** %46, align 8, !tbaa !13\n  br label %101\n\n101:                                              ; preds = %81, %67, %98, %43\n  ret void\n}\n\n; Function Attrs: mustprogress uwtable\ndefine linkonce_odr dso_local %\"class.std::vector\"* @_ZNSt6vectorIS_IiSaIiEESaIS1_EE20_M_allocate_and_copyIPKS1_EEPS1_mT_S8_(%\"class.std::vector.0\"* nonnull align 8 dereferenceable(24) %0, i64 %1, %\"class.std::vector\"* %2, %\"class.std::vector\"* %3) local_unnamed_addr #8 comdat align 2 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {\n  %5 = icmp eq i64 %1, 0\n  br i1 %5, label %13, label %6\n\n6:                                                ; preds = %4\n  %7 = icmp ugt i64 %1, 384307168202282325\n  br i1 %7, label %8, label %9\n\n8:                                                ; preds = %6\n  tail call void @_ZSt17__throw_bad_allocv() #13\n  unreachable\n\n9:                                                ; preds = %6\n  %10 = mul nuw nsw i64 %1, 24\n  %11 = tail call noalias nonnull i8* @_Znwm(i64 %10) #12\n  %12 = bitcast i8* %11 to %\"class.std::vector\"*\n  br label %13\n\n13:                                               ; preds = %4, %9\n  %14 = phi %\"class.std::vector\"* [ %12, %9 ], [ null, %4 ]\n  %15 = invoke %\"class.std::vector\"* @_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPKSt6vectorIiSaIiEEPS4_EET0_T_S9_S8_(%\"class.std::vector\"* %2, %\"class.std::vector\"* %3, %\"class.std::vector\"* %14)\n          to label %16 unwind label %17\n\n16:                                               ; preds = %13\n  ret %\"class.std::vector\"* %14\n\n17:                                               ; preds = %13\n  %18 = landingpad { i8*, i32 }\n          catch i8* null\n  %19 = extractvalue { i8*, i32 } %18, 0\n  %20 = tail call i8* @__cxa_begin_catch(i8* %19) #11\n  %21 = icmp eq %\"class.std::vector\"* %14, null\n  br i1 %21, label %24, label %22\n\n22:                                               ; preds = %17\n  %23 = bitcast %\"class.std::vector\"* %14 to i8*\n  tail call void @_ZdlPv(i8* nonnull %23) #11\n  br label %24\n\n24:                                               ; preds = %22, %17\n  invoke void @__cxa_rethrow() #13\n          to label %31 unwind label %25\n\n25:                                               ; preds = %24\n  %26 = landingpad { i8*, i32 }\n          cleanup\n  invoke void @__cxa_end_catch()\n          to label %27 unwind label %28\n\n27:                                               ; preds = %25\n  resume { i8*, i32 } %26\n\n28:                                               ; preds = %25\n  %29 = landingpad { i8*, i32 }\n          catch i8* null\n  %30 = extractvalue { i8*, i32 } %29, 0\n  tail call void @__clang_call_terminate(i8* %30) #14\n  unreachable\n\n31:                                               ; preds = %24\n  unreachable\n}\n\n; Function Attrs: argmemonly nofree nounwind willreturn writeonly\ndeclare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #9\n\n; Function Attrs: argmemonly nofree nounwind willreturn\ndeclare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #10\n\nattributes #0 = { uwtable \"frame-pointer\"=\"none\" \"min-legal-vector-width\"=\"0\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #1 = { argmemonly mustprogress nofree nosync nounwind willreturn }\nattributes #2 = { nounwind uwtable \"frame-pointer\"=\"none\" \"min-legal-vector-width\"=\"0\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #3 = { noinline noreturn nounwind }\nattributes #4 = { nobuiltin nounwind \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #5 = { noreturn \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #6 = { nobuiltin allocsize(0) \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #7 = { argmemonly mustprogress nofree nounwind willreturn }\nattributes #8 = { mustprogress uwtable \"frame-pointer\"=\"none\" \"min-legal-vector-width\"=\"0\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #9 = { argmemonly nofree nounwind willreturn writeonly }\nattributes #10 = { argmemonly nofree nounwind willreturn }\nattributes #11 = { nounwind }\nattributes #12 = { allocsize(0) }\nattributes #13 = { noreturn }\nattributes #14 = { noreturn nounwind }\n\n!llvm.module.flags = !{!0, !1}\n!llvm.ident = !{!2}\n\n!0 = !{i32 1, !\"wchar_size\", i32 4}\n!1 = !{i32 7, !\"uwtable\", i32 1}\n!2 = !{!\"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)\"}\n!3 = !{!4, !5, i64 0}\n!4 = !{!\"_ZTSNSt12_Vector_baseIiSaIiEE17_Vector_impl_dataE\", !5, i64 0, !5, i64 8, !5, i64 16}\n!5 = !{!\"any pointer\", !6, i64 0}\n!6 = !{!\"omnipotent char\", !7, i64 0}\n!7 = !{!\"Simple C++ TBAA\"}\n!8 = !{!4, !5, i64 16}\n!9 = !{!4, !5, i64 8}\n!10 = !{!11, !5, i64 0}\n!11 = !{!\"_ZTSNSt12_Vector_baseISt6vectorIiSaIiEESaIS2_EE17_Vector_impl_dataE\", !5, i64 0, !5, i64 8, !5, i64 16}\n!12 = !{!11, !5, i64 16}\n!13 = !{!11, !5, i64 8}\n!14 = !{!15, !15, i64 0}\n!15 = !{!\"int\", !6, i64 0}\n!16 = !{!5, !5, i64 0}\n!17 = distinct !{!17, !18}\n!18 = !{!\"llvm.loop.mustprogress\"}\n!19 = distinct !{!19, !18}\n!20 = distinct !{!20, !18}\n!21 = distinct !{!21, !18}\n!22 = distinct !{!22, !18}\n!23 = distinct !{!23, !18}\n!24 = distinct !{!24, !18}\n!25 = distinct !{!25, !18}\n!26 = distinct !{!26, !18}\n!27 = distinct !{!27, !18}\n", "target": "This is the targeted source code:\n/*\nYou are given a positive integer n. You have to create an integer vector a of length n.\n    For each i (1 \u2264 i \u2264 n), the value of a{i} = i * i - i + 1.\n    Return the number of triples (a{i}, a{j}, a{k}) of a where i < j < k, \nand a[i] + a[j] + a[k] is a multiple of 3.\n\nExample :\n    Input: n = 5\n    Output: 1\n    Explanation: \n    a = {1, 3, 7, 13, 21}\n    The only valid triple is (1, 7, 13).\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint get_matrix_triples(int n){\n\n    vector<int> a;\n    vector<vector<int>> sum={{0,0,0}};\n    vector<vector<int>> sum2={{0,0,0}};\n    for (int i=1;i<=n;i++)\n    {\n        a.push_back((i*i-i+1)%3);\n        sum.push_back(sum[sum.size()-1]);\n        sum[i][a[i-1]]+=1;\n    }\n    for (int times=1;times<3;times++)\n    {\n    for (int i=1;i<=n;i++)\n    {\n        sum2.push_back(sum2[sum2.size()-1]);\n        if (i>=1)\n        for (int j=0;j<=2;j++)\n            sum2[i][(a[i-1]+j)%3]+=sum[i-1][j];\n    }\n    sum=sum2;\n    sum2={{0,0,0}};\n    }\n\n    return sum[n][0];\n}\n"}
{"input": "Convert this to C++:\n; ModuleID = '../../Human_xBenchmarks_164/CPP_148/CPP_148.cpp'\nsource_filename = \"../../Human_xBenchmarks_164/CPP_148/CPP_148.cpp\"\ntarget datalayout = \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\ntarget triple = \"x86_64-unknown-linux-gnu\"\n\n%\"class.std::vector\" = type { %\"struct.std::_Vector_base\" }\n%\"struct.std::_Vector_base\" = type { %\"struct.std::_Vector_base<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char>>>::_Vector_impl\" }\n%\"struct.std::_Vector_base<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char>>>::_Vector_impl\" = type { %\"struct.std::_Vector_base<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char>>>::_Vector_impl_data\" }\n%\"struct.std::_Vector_base<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char>>>::_Vector_impl_data\" = type { %\"class.std::__cxx11::basic_string\"*, %\"class.std::__cxx11::basic_string\"*, %\"class.std::__cxx11::basic_string\"* }\n%\"class.std::__cxx11::basic_string\" = type { %\"struct.std::__cxx11::basic_string<char>::_Alloc_hider\", i64, %union.anon }\n%\"struct.std::__cxx11::basic_string<char>::_Alloc_hider\" = type { i8* }\n%union.anon = type { i64, [8 x i8] }\n\n$_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED2Ev = comdat any\n\n$__clang_call_terminate = comdat any\n\n$_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPS7_EET0_T_SC_SB_ = comdat any\n\n$_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_realloc_insertIJRKS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_ = comdat any\n\n@.str = private unnamed_addr constant [8 x i8] c\"Mercury\\00\", align 1\n@.str.1 = private unnamed_addr constant [6 x i8] c\"Venus\\00\", align 1\n@.str.2 = private unnamed_addr constant [6 x i8] c\"Earth\\00\", align 1\n@.str.4 = private unnamed_addr constant [8 x i8] c\"Jupiter\\00\", align 1\n@.str.5 = private unnamed_addr constant [7 x i8] c\"Saturn\\00\", align 1\n@.str.6 = private unnamed_addr constant [7 x i8] c\"Uranus\\00\", align 1\n@.str.7 = private unnamed_addr constant [8 x i8] c\"Neptune\\00\", align 1\n@.str.10 = private unnamed_addr constant [26 x i8] c\"vector::_M_realloc_insert\\00\", align 1\n\n; Function Attrs: uwtable\ndefine dso_local void @_Z2bfNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES4_(%\"class.std::vector\"* noalias nocapture sret(%\"class.std::vector\") align 8 %0, %\"class.std::__cxx11::basic_string\"* nocapture readonly %1, %\"class.std::__cxx11::basic_string\"* nocapture readonly %2) local_unnamed_addr #0 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {\n  %4 = alloca i64, align 8\n  %5 = alloca %\"class.std::vector\", align 8\n  %6 = alloca [8 x %\"class.std::__cxx11::basic_string\"], align 8\n  %7 = alloca %\"class.std::vector\", align 16\n  %8 = bitcast %\"class.std::vector\"* %5 to i8*\n  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %8) #12\n  %9 = bitcast [8 x %\"class.std::__cxx11::basic_string\"]* %6 to i8*\n  call void @llvm.lifetime.start.p0i8(i64 256, i8* nonnull %9) #12\n  %10 = getelementptr inbounds [8 x %\"class.std::__cxx11::basic_string\"], [8 x %\"class.std::__cxx11::basic_string\"]* %6, i64 0, i64 0, i32 2\n  %11 = bitcast [8 x %\"class.std::__cxx11::basic_string\"]* %6 to %union.anon**\n  store %union.anon* %10, %union.anon** %11, align 8, !tbaa !3\n  %12 = bitcast %union.anon* %10 to i8*\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(7) %12, i8* noundef nonnull align 1 dereferenceable(7) getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i64 0, i64 0), i64 7, i1 false) #12\n  %13 = getelementptr inbounds [8 x %\"class.std::__cxx11::basic_string\"], [8 x %\"class.std::__cxx11::basic_string\"]* %6, i64 0, i64 0, i32 1\n  store i64 7, i64* %13, align 8, !tbaa !8\n  %14 = getelementptr inbounds i8, i8* %12, i64 7\n  store i8 0, i8* %14, align 1, !tbaa !11\n  %15 = getelementptr inbounds [8 x %\"class.std::__cxx11::basic_string\"], [8 x %\"class.std::__cxx11::basic_string\"]* %6, i64 0, i64 1\n  %16 = getelementptr inbounds [8 x %\"class.std::__cxx11::basic_string\"], [8 x %\"class.std::__cxx11::basic_string\"]* %6, i64 0, i64 1, i32 2\n  %17 = bitcast %\"class.std::__cxx11::basic_string\"* %15 to %union.anon**\n  store %union.anon* %16, %union.anon** %17, align 8, !tbaa !3\n  %18 = bitcast %union.anon* %16 to i8*\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(5) %18, i8* noundef nonnull align 1 dereferenceable(5) getelementptr inbounds ([6 x i8], [6 x i8]* @.str.1, i64 0, i64 0), i64 5, i1 false) #12\n  %19 = getelementptr inbounds [8 x %\"class.std::__cxx11::basic_string\"], [8 x %\"class.std::__cxx11::basic_string\"]* %6, i64 0, i64 1, i32 1\n  store i64 5, i64* %19, align 8, !tbaa !8\n  %20 = getelementptr inbounds i8, i8* %18, i64 5\n  store i8 0, i8* %20, align 1, !tbaa !11\n  %21 = getelementptr inbounds [8 x %\"class.std::__cxx11::basic_string\"], [8 x %\"class.std::__cxx11::basic_string\"]* %6, i64 0, i64 2\n  %22 = getelementptr inbounds [8 x %\"class.std::__cxx11::basic_string\"], [8 x %\"class.std::__cxx11::basic_string\"]* %6, i64 0, i64 2, i32 2\n  %23 = bitcast %\"class.std::__cxx11::basic_string\"* %21 to %union.anon**\n  store %union.anon* %22, %union.anon** %23, align 8, !tbaa !3\n  %24 = bitcast %union.anon* %22 to i8*\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(5) %24, i8* noundef nonnull align 1 dereferenceable(5) getelementptr inbounds ([6 x i8], [6 x i8]* @.str.2, i64 0, i64 0), i64 5, i1 false) #12\n  %25 = getelementptr inbounds [8 x %\"class.std::__cxx11::basic_string\"], [8 x %\"class.std::__cxx11::basic_string\"]* %6, i64 0, i64 2, i32 1\n  store i64 5, i64* %25, align 8, !tbaa !8\n  %26 = getelementptr inbounds i8, i8* %24, i64 5\n  store i8 0, i8* %26, align 1, !tbaa !11\n  %27 = getelementptr inbounds [8 x %\"class.std::__cxx11::basic_string\"], [8 x %\"class.std::__cxx11::basic_string\"]* %6, i64 0, i64 3\n  %28 = getelementptr inbounds [8 x %\"class.std::__cxx11::basic_string\"], [8 x %\"class.std::__cxx11::basic_string\"]* %6, i64 0, i64 3, i32 2\n  %29 = bitcast %\"class.std::__cxx11::basic_string\"* %27 to %union.anon**\n  store %union.anon* %28, %union.anon** %29, align 8, !tbaa !3\n  %30 = bitcast %union.anon* %28 to i32*\n  store i32 1936875853, i32* %30, align 8\n  %31 = getelementptr inbounds [8 x %\"class.std::__cxx11::basic_string\"], [8 x %\"class.std::__cxx11::basic_string\"]* %6, i64 0, i64 3, i32 1\n  store i64 4, i64* %31, align 8, !tbaa !8\n  %32 = bitcast %union.anon* %28 to i8*\n  %33 = getelementptr inbounds i8, i8* %32, i64 4\n  store i8 0, i8* %33, align 4, !tbaa !11\n  %34 = getelementptr inbounds [8 x %\"class.std::__cxx11::basic_string\"], [8 x %\"class.std::__cxx11::basic_string\"]* %6, i64 0, i64 4\n  %35 = getelementptr inbounds [8 x %\"class.std::__cxx11::basic_string\"], [8 x %\"class.std::__cxx11::basic_string\"]* %6, i64 0, i64 4, i32 2\n  %36 = bitcast %\"class.std::__cxx11::basic_string\"* %34 to %union.anon**\n  store %union.anon* %35, %union.anon** %36, align 8, !tbaa !3\n  %37 = bitcast %union.anon* %35 to i8*\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(7) %37, i8* noundef nonnull align 1 dereferenceable(7) getelementptr inbounds ([8 x i8], [8 x i8]* @.str.4, i64 0, i64 0), i64 7, i1 false) #12\n  %38 = getelementptr inbounds [8 x %\"class.std::__cxx11::basic_string\"], [8 x %\"class.std::__cxx11::basic_string\"]* %6, i64 0, i64 4, i32 1\n  store i64 7, i64* %38, align 8, !tbaa !8\n  %39 = getelementptr inbounds i8, i8* %37, i64 7\n  store i8 0, i8* %39, align 1, !tbaa !11\n  %40 = getelementptr inbounds [8 x %\"class.std::__cxx11::basic_string\"], [8 x %\"class.std::__cxx11::basic_string\"]* %6, i64 0, i64 5\n  %41 = getelementptr inbounds [8 x %\"class.std::__cxx11::basic_string\"], [8 x %\"class.std::__cxx11::basic_string\"]* %6, i64 0, i64 5, i32 2\n  %42 = bitcast %\"class.std::__cxx11::basic_string\"* %40 to %union.anon**\n  store %union.anon* %41, %union.anon** %42, align 8, !tbaa !3\n  %43 = bitcast %union.anon* %41 to i8*\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(6) %43, i8* noundef nonnull align 1 dereferenceable(6) getelementptr inbounds ([7 x i8], [7 x i8]* @.str.5, i64 0, i64 0), i64 6, i1 false) #12\n  %44 = getelementptr inbounds [8 x %\"class.std::__cxx11::basic_string\"], [8 x %\"class.std::__cxx11::basic_string\"]* %6, i64 0, i64 5, i32 1\n  store i64 6, i64* %44, align 8, !tbaa !8\n  %45 = getelementptr inbounds i8, i8* %43, i64 6\n  store i8 0, i8* %45, align 2, !tbaa !11\n  %46 = getelementptr inbounds [8 x %\"class.std::__cxx11::basic_string\"], [8 x %\"class.std::__cxx11::basic_string\"]* %6, i64 0, i64 6\n  %47 = getelementptr inbounds [8 x %\"class.std::__cxx11::basic_string\"], [8 x %\"class.std::__cxx11::basic_string\"]* %6, i64 0, i64 6, i32 2\n  %48 = bitcast %\"class.std::__cxx11::basic_string\"* %46 to %union.anon**\n  store %union.anon* %47, %union.anon** %48, align 8, !tbaa !3\n  %49 = bitcast %union.anon* %47 to i8*\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(6) %49, i8* noundef nonnull align 1 dereferenceable(6) getelementptr inbounds ([7 x i8], [7 x i8]* @.str.6, i64 0, i64 0), i64 6, i1 false) #12\n  %50 = getelementptr inbounds [8 x %\"class.std::__cxx11::basic_string\"], [8 x %\"class.std::__cxx11::basic_string\"]* %6, i64 0, i64 6, i32 1\n  store i64 6, i64* %50, align 8, !tbaa !8\n  %51 = getelementptr inbounds i8, i8* %49, i64 6\n  store i8 0, i8* %51, align 2, !tbaa !11\n  %52 = getelementptr inbounds [8 x %\"class.std::__cxx11::basic_string\"], [8 x %\"class.std::__cxx11::basic_string\"]* %6, i64 0, i64 7\n  %53 = getelementptr inbounds [8 x %\"class.std::__cxx11::basic_string\"], [8 x %\"class.std::__cxx11::basic_string\"]* %6, i64 0, i64 7, i32 2\n  %54 = bitcast %\"class.std::__cxx11::basic_string\"* %52 to %union.anon**\n  store %union.anon* %53, %union.anon** %54, align 8, !tbaa !3\n  %55 = bitcast %union.anon* %53 to i8*\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(7) %55, i8* noundef nonnull align 1 dereferenceable(7) getelementptr inbounds ([8 x i8], [8 x i8]* @.str.7, i64 0, i64 0), i64 7, i1 false) #12\n  %56 = getelementptr inbounds [8 x %\"class.std::__cxx11::basic_string\"], [8 x %\"class.std::__cxx11::basic_string\"]* %6, i64 0, i64 7, i32 1\n  store i64 7, i64* %56, align 8, !tbaa !8\n  %57 = getelementptr inbounds i8, i8* %55, i64 7\n  store i8 0, i8* %57, align 1, !tbaa !11\n  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(24) %8, i8 0, i64 24, i1 false) #12\n  %58 = invoke noalias nonnull i8* @_Znwm(i64 256) #13\n          to label %61 unwind label %59\n\n59:                                               ; preds = %3\n  %60 = landingpad { i8*, i32 }\n          cleanup\n  br label %129\n\n61:                                               ; preds = %3\n  %62 = getelementptr inbounds [8 x %\"class.std::__cxx11::basic_string\"], [8 x %\"class.std::__cxx11::basic_string\"]* %6, i64 0, i64 0\n  %63 = getelementptr inbounds [8 x %\"class.std::__cxx11::basic_string\"], [8 x %\"class.std::__cxx11::basic_string\"]* %6, i64 0, i64 8\n  %64 = bitcast i8* %58 to %\"class.std::__cxx11::basic_string\"*\n  %65 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %5, i64 0, i32 0, i32 0, i32 0, i32 0\n  %66 = bitcast %\"class.std::vector\"* %5 to i8**\n  store i8* %58, i8** %66, align 8, !tbaa !12\n  %67 = getelementptr inbounds i8, i8* %58, i64 256\n  %68 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %5, i64 0, i32 0, i32 0, i32 0, i32 2\n  %69 = bitcast %\"class.std::__cxx11::basic_string\"** %68 to i8**\n  store i8* %67, i8** %69, align 8, !tbaa !14\n  %70 = invoke %\"class.std::__cxx11::basic_string\"* @_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPS7_EET0_T_SC_SB_(%\"class.std::__cxx11::basic_string\"* nonnull %62, %\"class.std::__cxx11::basic_string\"* nonnull %63, %\"class.std::__cxx11::basic_string\"* nonnull %64)\n          to label %73 unwind label %71\n\n71:                                               ; preds = %61\n  %72 = landingpad { i8*, i32 }\n          cleanup\n  call void @_ZdlPv(i8* nonnull %58) #12\n  br label %129\n\n73:                                               ; preds = %61\n  %74 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %5, i64 0, i32 0, i32 0, i32 0, i32 1\n  store %\"class.std::__cxx11::basic_string\"* %70, %\"class.std::__cxx11::basic_string\"** %74, align 8, !tbaa !15\n  %75 = getelementptr inbounds [8 x %\"class.std::__cxx11::basic_string\"], [8 x %\"class.std::__cxx11::basic_string\"]* %6, i64 0, i64 7, i32 0, i32 0\n  %76 = load i8*, i8** %75, align 8, !tbaa !16\n  %77 = getelementptr inbounds [8 x %\"class.std::__cxx11::basic_string\"], [8 x %\"class.std::__cxx11::basic_string\"]* %6, i64 0, i64 7, i32 2\n  %78 = bitcast %union.anon* %77 to i8*\n  %79 = icmp eq i8* %76, %78\n  br i1 %79, label %81, label %80\n\n80:                                               ; preds = %73\n  call void @_ZdlPv(i8* %76) #12\n  br label %81\n\n81:                                               ; preds = %73, %80\n  %82 = getelementptr inbounds [8 x %\"class.std::__cxx11::basic_string\"], [8 x %\"class.std::__cxx11::basic_string\"]* %6, i64 0, i64 6, i32 0, i32 0\n  %83 = load i8*, i8** %82, align 8, !tbaa !16\n  %84 = getelementptr inbounds [8 x %\"class.std::__cxx11::basic_string\"], [8 x %\"class.std::__cxx11::basic_string\"]* %6, i64 0, i64 6, i32 2\n  %85 = bitcast %union.anon* %84 to i8*\n  %86 = icmp eq i8* %83, %85\n  br i1 %86, label %287, label %286\n\n87:                                               ; preds = %329\n  %88 = ashr exact i64 %332, 5\n  %89 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %2, i64 0, i32 1\n  %90 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %1, i64 0, i32 1\n  %91 = load i64, i64* %90, align 8, !tbaa !8\n  %92 = load i64, i64* %89, align 8, !tbaa !8\n  %93 = call i64 @llvm.umax.i64(i64 %88, i64 1)\n  %94 = icmp eq i64 %91, 0\n  %95 = icmp eq i64 %92, 0\n  br label %96\n\n96:                                               ; preds = %87, %125\n  %97 = phi i64 [ 0, %87 ], [ %127, %125 ]\n  %98 = phi i32 [ -1, %87 ], [ %126, %125 ]\n  %99 = phi i32 [ -1, %87 ], [ %114, %125 ]\n  %100 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %64, i64 %97\n  %101 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %64, i64 %97, i32 1\n  %102 = load i64, i64* %101, align 8, !tbaa !8\n  %103 = icmp eq i64 %102, %91\n  br i1 %103, label %104, label %113\n\n104:                                              ; preds = %96\n  br i1 %94, label %111, label %105\n\n105:                                              ; preds = %104\n  %106 = load i8*, i8** %333, align 8, !tbaa !16\n  %107 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %100, i64 0, i32 0, i32 0\n  %108 = load i8*, i8** %107, align 8, !tbaa !16\n  %109 = call i32 @bcmp(i8* %108, i8* %106, i64 %91) #12\n  %110 = icmp eq i32 %109, 0\n  br i1 %110, label %111, label %113\n\n111:                                              ; preds = %104, %105\n  %112 = trunc i64 %97 to i32\n  br label %113\n\n113:                                              ; preds = %96, %105, %111\n  %114 = phi i32 [ %112, %111 ], [ %99, %105 ], [ %99, %96 ]\n  %115 = icmp eq i64 %102, %92\n  br i1 %115, label %116, label %125\n\n116:                                              ; preds = %113\n  br i1 %95, label %123, label %117\n\n117:                                              ; preds = %116\n  %118 = load i8*, i8** %334, align 8, !tbaa !16\n  %119 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %100, i64 0, i32 0, i32 0\n  %120 = load i8*, i8** %119, align 8, !tbaa !16\n  %121 = call i32 @bcmp(i8* %120, i8* %118, i64 %92) #12\n  %122 = icmp eq i32 %121, 0\n  br i1 %122, label %123, label %125\n\n123:                                              ; preds = %116, %117\n  %124 = trunc i64 %97 to i32\n  br label %125\n\n125:                                              ; preds = %113, %117, %123\n  %126 = phi i32 [ %124, %123 ], [ %98, %117 ], [ %98, %113 ]\n  %127 = add nuw nsw i64 %97, 1\n  %128 = icmp eq i64 %127, %93\n  br i1 %128, label %143, label %96, !llvm.loop !17\n\n129:                                              ; preds = %59, %71\n  %130 = phi { i8*, i32 } [ %60, %59 ], [ %72, %71 ]\n  %131 = getelementptr inbounds [8 x %\"class.std::__cxx11::basic_string\"], [8 x %\"class.std::__cxx11::basic_string\"]* %6, i64 0, i64 7, i32 0, i32 0\n  %132 = load i8*, i8** %131, align 8, !tbaa !16\n  %133 = getelementptr inbounds [8 x %\"class.std::__cxx11::basic_string\"], [8 x %\"class.std::__cxx11::basic_string\"]* %6, i64 0, i64 7, i32 2\n  %134 = bitcast %union.anon* %133 to i8*\n  %135 = icmp eq i8* %132, %134\n  br i1 %135, label %137, label %136\n\n136:                                              ; preds = %129\n  call void @_ZdlPv(i8* %132) #12\n  br label %137\n\n137:                                              ; preds = %129, %136\n  %138 = getelementptr inbounds [8 x %\"class.std::__cxx11::basic_string\"], [8 x %\"class.std::__cxx11::basic_string\"]* %6, i64 0, i64 6, i32 0, i32 0\n  %139 = load i8*, i8** %138, align 8, !tbaa !16\n  %140 = getelementptr inbounds [8 x %\"class.std::__cxx11::basic_string\"], [8 x %\"class.std::__cxx11::basic_string\"]* %6, i64 0, i64 6, i32 2\n  %141 = bitcast %union.anon* %140 to i8*\n  %142 = icmp eq i8* %139, %141\n  br i1 %142, label %243, label %242\n\n143:                                              ; preds = %125\n  %144 = icmp eq i32 %114, -1\n  %145 = icmp eq i32 %126, -1\n  %146 = select i1 %144, i1 true, i1 %145\n  br i1 %146, label %147, label %149\n\n147:                                              ; preds = %329, %143\n  %148 = bitcast %\"class.std::vector\"* %0 to i8*\n  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(24) %148, i8 0, i64 24, i1 false)\n  br label %220\n\n149:                                              ; preds = %143\n  %150 = icmp sgt i32 %114, %126\n  %151 = select i1 %150, i32 %126, i32 %114\n  %152 = select i1 %150, i32 %114, i32 %126\n  %153 = bitcast %\"class.std::vector\"* %7 to i8*\n  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %153) #12\n  %154 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %7, i64 0, i32 0, i32 0, i32 0, i32 1\n  %155 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %7, i64 0, i32 0, i32 0, i32 0, i32 2\n  %156 = bitcast i64* %4 to i8*\n  %157 = add nuw i32 %151, 1\n  %158 = icmp slt i32 %157, %152\n  %159 = bitcast %\"class.std::vector\"* %7 to i8*\n  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 16 dereferenceable(24) %159, i8 0, i64 24, i1 false)\n  br i1 %158, label %160, label %213\n\n160:                                              ; preds = %149\n  %161 = sext i32 %157 to i64\n  br label %162\n\n162:                                              ; preds = %203, %160\n  %163 = phi %\"class.std::__cxx11::basic_string\"* [ null, %160 ], [ %206, %203 ]\n  %164 = phi %\"class.std::__cxx11::basic_string\"* [ null, %160 ], [ %205, %203 ]\n  %165 = phi %\"class.std::__cxx11::basic_string\"* [ %64, %160 ], [ %204, %203 ]\n  %166 = phi i64 [ %161, %160 ], [ %200, %203 ]\n  %167 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %165, i64 %166\n  %168 = icmp eq %\"class.std::__cxx11::basic_string\"* %164, %163\n  br i1 %168, label %198, label %169\n\n169:                                              ; preds = %162\n  %170 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %164, i64 0, i32 2\n  %171 = bitcast %\"class.std::__cxx11::basic_string\"* %164 to %union.anon**\n  store %union.anon* %170, %union.anon** %171, align 8, !tbaa !3\n  %172 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %167, i64 0, i32 0, i32 0\n  %173 = load i8*, i8** %172, align 8, !tbaa !16\n  %174 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %165, i64 %166, i32 1\n  %175 = load i64, i64* %174, align 8, !tbaa !8\n  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %156) #12\n  store i64 %175, i64* %4, align 8, !tbaa !19\n  %176 = icmp ugt i64 %175, 15\n  br i1 %176, label %179, label %177\n\n177:                                              ; preds = %169\n  %178 = bitcast %union.anon* %170 to i8*\n  br label %185\n\n179:                                              ; preds = %169\n  %180 = invoke i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %164, i64* nonnull align 8 dereferenceable(8) %4, i64 0)\n          to label %181 unwind label %207\n\n181:                                              ; preds = %179\n  %182 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %164, i64 0, i32 0, i32 0\n  store i8* %180, i8** %182, align 8, !tbaa !16\n  %183 = load i64, i64* %4, align 8, !tbaa !19\n  %184 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %164, i64 0, i32 2, i32 0\n  store i64 %183, i64* %184, align 8, !tbaa !11\n  br label %185\n\n185:                                              ; preds = %181, %177\n  %186 = phi i8* [ %178, %177 ], [ %180, %181 ]\n  switch i64 %175, label %189 [\n    i64 1, label %187\n    i64 0, label %190\n  ]\n\n187:                                              ; preds = %185\n  %188 = load i8, i8* %173, align 1, !tbaa !11\n  store i8 %188, i8* %186, align 1, !tbaa !11\n  br label %190\n\n189:                                              ; preds = %185\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %186, i8* align 1 %173, i64 %175, i1 false) #12\n  br label %190\n\n190:                                              ; preds = %189, %187, %185\n  %191 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %164, i64 0, i32 0, i32 0\n  %192 = load i64, i64* %4, align 8, !tbaa !19\n  %193 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %164, i64 0, i32 1\n  store i64 %192, i64* %193, align 8, !tbaa !8\n  %194 = load i8*, i8** %191, align 8, !tbaa !16\n  %195 = getelementptr inbounds i8, i8* %194, i64 %192\n  store i8 0, i8* %195, align 1, !tbaa !11\n  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %156) #12\n  %196 = load %\"class.std::__cxx11::basic_string\"*, %\"class.std::__cxx11::basic_string\"** %154, align 8, !tbaa !15\n  %197 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %196, i64 1\n  store %\"class.std::__cxx11::basic_string\"* %197, %\"class.std::__cxx11::basic_string\"** %154, align 8, !tbaa !15\n  br label %199\n\n198:                                              ; preds = %162\n  invoke void @_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_realloc_insertIJRKS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_(%\"class.std::vector\"* nonnull align 8 dereferenceable(24) %7, %\"class.std::__cxx11::basic_string\"* %163, %\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %167)\n          to label %199 unwind label %207\n\n199:                                              ; preds = %198, %190\n  %200 = add nsw i64 %166, 1\n  %201 = trunc i64 %200 to i32\n  %202 = icmp eq i32 %152, %201\n  br i1 %202, label %209, label %203\n\n203:                                              ; preds = %199\n  %204 = load %\"class.std::__cxx11::basic_string\"*, %\"class.std::__cxx11::basic_string\"** %65, align 8, !tbaa !12\n  %205 = load %\"class.std::__cxx11::basic_string\"*, %\"class.std::__cxx11::basic_string\"** %154, align 8, !tbaa !15\n  %206 = load %\"class.std::__cxx11::basic_string\"*, %\"class.std::__cxx11::basic_string\"** %155, align 16, !tbaa !14\n  br label %162\n\n207:                                              ; preds = %198, %179\n  %208 = landingpad { i8*, i32 }\n          cleanup\n  call void @_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED2Ev(%\"class.std::vector\"* nonnull align 8 dereferenceable(24) %7) #12\n  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %153) #12\n  call void @_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED2Ev(%\"class.std::vector\"* nonnull align 8 dereferenceable(24) %5) #12\n  br label %240\n\n209:                                              ; preds = %199\n  %210 = bitcast %\"class.std::vector\"* %7 to <2 x %\"class.std::__cxx11::basic_string\"*>*\n  %211 = load <2 x %\"class.std::__cxx11::basic_string\"*>, <2 x %\"class.std::__cxx11::basic_string\"*>* %210, align 16, !tbaa !20\n  %212 = load %\"class.std::__cxx11::basic_string\"*, %\"class.std::__cxx11::basic_string\"** %155, align 16, !tbaa !14\n  br label %213\n\n213:                                              ; preds = %209, %149\n  %214 = phi %\"class.std::__cxx11::basic_string\"* [ %212, %209 ], [ null, %149 ]\n  %215 = phi <2 x %\"class.std::__cxx11::basic_string\"*> [ %211, %209 ], [ zeroinitializer, %149 ]\n  %216 = bitcast %\"class.std::vector\"* %0 to <2 x %\"class.std::__cxx11::basic_string\"*>*\n  store <2 x %\"class.std::__cxx11::basic_string\"*> %215, <2 x %\"class.std::__cxx11::basic_string\"*>* %216, align 8, !tbaa !20\n  %217 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0, i64 0, i32 0, i32 0, i32 0, i32 2\n  store %\"class.std::__cxx11::basic_string\"* %214, %\"class.std::__cxx11::basic_string\"** %217, align 8, !tbaa !14\n  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %153) #12\n  %218 = load %\"class.std::__cxx11::basic_string\"*, %\"class.std::__cxx11::basic_string\"** %65, align 8, !tbaa !12\n  %219 = load %\"class.std::__cxx11::basic_string\"*, %\"class.std::__cxx11::basic_string\"** %74, align 8, !tbaa !15\n  br label %220\n\n220:                                              ; preds = %213, %147\n  %221 = phi %\"class.std::__cxx11::basic_string\"* [ %218, %213 ], [ %64, %147 ]\n  %222 = phi %\"class.std::__cxx11::basic_string\"* [ %219, %213 ], [ %70, %147 ]\n  %223 = icmp eq %\"class.std::__cxx11::basic_string\"* %221, %222\n  br i1 %223, label %235, label %224\n\n224:                                              ; preds = %220, %232\n  %225 = phi %\"class.std::__cxx11::basic_string\"* [ %233, %232 ], [ %221, %220 ]\n  %226 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %225, i64 0, i32 0, i32 0\n  %227 = load i8*, i8** %226, align 8, !tbaa !16\n  %228 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %225, i64 0, i32 2\n  %229 = bitcast %union.anon* %228 to i8*\n  %230 = icmp eq i8* %227, %229\n  br i1 %230, label %232, label %231\n\n231:                                              ; preds = %224\n  call void @_ZdlPv(i8* %227) #12\n  br label %232\n\n232:                                              ; preds = %231, %224\n  %233 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %225, i64 1\n  %234 = icmp eq %\"class.std::__cxx11::basic_string\"* %233, %222\n  br i1 %234, label %235, label %224, !llvm.loop !21\n\n235:                                              ; preds = %232, %220\n  %236 = icmp eq %\"class.std::__cxx11::basic_string\"* %221, null\n  br i1 %236, label %239, label %237\n\n237:                                              ; preds = %235\n  %238 = bitcast %\"class.std::__cxx11::basic_string\"* %221 to i8*\n  call void @_ZdlPv(i8* nonnull %238) #12\n  br label %239\n\n239:                                              ; preds = %235, %237\n  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %8) #12\n  ret void\n\n240:                                              ; preds = %207, %285\n  %241 = phi { i8*, i32 } [ %208, %207 ], [ %130, %285 ]\n  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %8) #12\n  resume { i8*, i32 } %241\n\n242:                                              ; preds = %137\n  call void @_ZdlPv(i8* %139) #12\n  br label %243\n\n243:                                              ; preds = %242, %137\n  %244 = getelementptr inbounds [8 x %\"class.std::__cxx11::basic_string\"], [8 x %\"class.std::__cxx11::basic_string\"]* %6, i64 0, i64 5, i32 0, i32 0\n  %245 = load i8*, i8** %244, align 8, !tbaa !16\n  %246 = getelementptr inbounds [8 x %\"class.std::__cxx11::basic_string\"], [8 x %\"class.std::__cxx11::basic_string\"]* %6, i64 0, i64 5, i32 2\n  %247 = bitcast %union.anon* %246 to i8*\n  %248 = icmp eq i8* %245, %247\n  br i1 %248, label %250, label %249\n\n249:                                              ; preds = %243\n  call void @_ZdlPv(i8* %245) #12\n  br label %250\n\n250:                                              ; preds = %249, %243\n  %251 = getelementptr inbounds [8 x %\"class.std::__cxx11::basic_string\"], [8 x %\"class.std::__cxx11::basic_string\"]* %6, i64 0, i64 4, i32 0, i32 0\n  %252 = load i8*, i8** %251, align 8, !tbaa !16\n  %253 = getelementptr inbounds [8 x %\"class.std::__cxx11::basic_string\"], [8 x %\"class.std::__cxx11::basic_string\"]* %6, i64 0, i64 4, i32 2\n  %254 = bitcast %union.anon* %253 to i8*\n  %255 = icmp eq i8* %252, %254\n  br i1 %255, label %257, label %256\n\n256:                                              ; preds = %250\n  call void @_ZdlPv(i8* %252) #12\n  br label %257\n\n257:                                              ; preds = %256, %250\n  %258 = getelementptr inbounds [8 x %\"class.std::__cxx11::basic_string\"], [8 x %\"class.std::__cxx11::basic_string\"]* %6, i64 0, i64 3, i32 0, i32 0\n  %259 = load i8*, i8** %258, align 8, !tbaa !16\n  %260 = getelementptr inbounds [8 x %\"class.std::__cxx11::basic_string\"], [8 x %\"class.std::__cxx11::basic_string\"]* %6, i64 0, i64 3, i32 2\n  %261 = bitcast %union.anon* %260 to i8*\n  %262 = icmp eq i8* %259, %261\n  br i1 %262, label %264, label %263\n\n263:                                              ; preds = %257\n  call void @_ZdlPv(i8* %259) #12\n  br label %264\n\n264:                                              ; preds = %263, %257\n  %265 = getelementptr inbounds [8 x %\"class.std::__cxx11::basic_string\"], [8 x %\"class.std::__cxx11::basic_string\"]* %6, i64 0, i64 2, i32 0, i32 0\n  %266 = load i8*, i8** %265, align 8, !tbaa !16\n  %267 = getelementptr inbounds [8 x %\"class.std::__cxx11::basic_string\"], [8 x %\"class.std::__cxx11::basic_string\"]* %6, i64 0, i64 2, i32 2\n  %268 = bitcast %union.anon* %267 to i8*\n  %269 = icmp eq i8* %266, %268\n  br i1 %269, label %271, label %270\n\n270:                                              ; preds = %264\n  call void @_ZdlPv(i8* %266) #12\n  br label %271\n\n271:                                              ; preds = %270, %264\n  %272 = getelementptr inbounds [8 x %\"class.std::__cxx11::basic_string\"], [8 x %\"class.std::__cxx11::basic_string\"]* %6, i64 0, i64 1, i32 0, i32 0\n  %273 = load i8*, i8** %272, align 8, !tbaa !16\n  %274 = getelementptr inbounds [8 x %\"class.std::__cxx11::basic_string\"], [8 x %\"class.std::__cxx11::basic_string\"]* %6, i64 0, i64 1, i32 2\n  %275 = bitcast %union.anon* %274 to i8*\n  %276 = icmp eq i8* %273, %275\n  br i1 %276, label %278, label %277\n\n277:                                              ; preds = %271\n  call void @_ZdlPv(i8* %273) #12\n  br label %278\n\n278:                                              ; preds = %277, %271\n  %279 = getelementptr inbounds [8 x %\"class.std::__cxx11::basic_string\"], [8 x %\"class.std::__cxx11::basic_string\"]* %6, i64 0, i64 0, i32 0, i32 0\n  %280 = load i8*, i8** %279, align 8, !tbaa !16\n  %281 = getelementptr inbounds [8 x %\"class.std::__cxx11::basic_string\"], [8 x %\"class.std::__cxx11::basic_string\"]* %6, i64 0, i64 0, i32 2\n  %282 = bitcast %union.anon* %281 to i8*\n  %283 = icmp eq i8* %280, %282\n  br i1 %283, label %285, label %284\n\n284:                                              ; preds = %278\n  call void @_ZdlPv(i8* %280) #12\n  br label %285\n\n285:                                              ; preds = %284, %278\n  call void @llvm.lifetime.end.p0i8(i64 256, i8* nonnull %9) #12\n  br label %240\n\n286:                                              ; preds = %81\n  call void @_ZdlPv(i8* %83) #12\n  br label %287\n\n287:                                              ; preds = %286, %81\n  %288 = getelementptr inbounds [8 x %\"class.std::__cxx11::basic_string\"], [8 x %\"class.std::__cxx11::basic_string\"]* %6, i64 0, i64 5, i32 0, i32 0\n  %289 = load i8*, i8** %288, align 8, !tbaa !16\n  %290 = getelementptr inbounds [8 x %\"class.std::__cxx11::basic_string\"], [8 x %\"class.std::__cxx11::basic_string\"]* %6, i64 0, i64 5, i32 2\n  %291 = bitcast %union.anon* %290 to i8*\n  %292 = icmp eq i8* %289, %291\n  br i1 %292, label %294, label %293\n\n293:                                              ; preds = %287\n  call void @_ZdlPv(i8* %289) #12\n  br label %294\n\n294:                                              ; preds = %293, %287\n  %295 = getelementptr inbounds [8 x %\"class.std::__cxx11::basic_string\"], [8 x %\"class.std::__cxx11::basic_string\"]* %6, i64 0, i64 4, i32 0, i32 0\n  %296 = load i8*, i8** %295, align 8, !tbaa !16\n  %297 = getelementptr inbounds [8 x %\"class.std::__cxx11::basic_string\"], [8 x %\"class.std::__cxx11::basic_string\"]* %6, i64 0, i64 4, i32 2\n  %298 = bitcast %union.anon* %297 to i8*\n  %299 = icmp eq i8* %296, %298\n  br i1 %299, label %301, label %300\n\n300:                                              ; preds = %294\n  call void @_ZdlPv(i8* %296) #12\n  br label %301\n\n301:                                              ; preds = %300, %294\n  %302 = getelementptr inbounds [8 x %\"class.std::__cxx11::basic_string\"], [8 x %\"class.std::__cxx11::basic_string\"]* %6, i64 0, i64 3, i32 0, i32 0\n  %303 = load i8*, i8** %302, align 8, !tbaa !16\n  %304 = getelementptr inbounds [8 x %\"class.std::__cxx11::basic_string\"], [8 x %\"class.std::__cxx11::basic_string\"]* %6, i64 0, i64 3, i32 2\n  %305 = bitcast %union.anon* %304 to i8*\n  %306 = icmp eq i8* %303, %305\n  br i1 %306, label %308, label %307\n\n307:                                              ; preds = %301\n  call void @_ZdlPv(i8* %303) #12\n  br label %308\n\n308:                                              ; preds = %307, %301\n  %309 = getelementptr inbounds [8 x %\"class.std::__cxx11::basic_string\"], [8 x %\"class.std::__cxx11::basic_string\"]* %6, i64 0, i64 2, i32 0, i32 0\n  %310 = load i8*, i8** %309, align 8, !tbaa !16\n  %311 = getelementptr inbounds [8 x %\"class.std::__cxx11::basic_string\"], [8 x %\"class.std::__cxx11::basic_string\"]* %6, i64 0, i64 2, i32 2\n  %312 = bitcast %union.anon* %311 to i8*\n  %313 = icmp eq i8* %310, %312\n  br i1 %313, label %315, label %314\n\n314:                                              ; preds = %308\n  call void @_ZdlPv(i8* %310) #12\n  br label %315\n\n315:                                              ; preds = %314, %308\n  %316 = getelementptr inbounds [8 x %\"class.std::__cxx11::basic_string\"], [8 x %\"class.std::__cxx11::basic_string\"]* %6, i64 0, i64 1, i32 0, i32 0\n  %317 = load i8*, i8** %316, align 8, !tbaa !16\n  %318 = getelementptr inbounds [8 x %\"class.std::__cxx11::basic_string\"], [8 x %\"class.std::__cxx11::basic_string\"]* %6, i64 0, i64 1, i32 2\n  %319 = bitcast %union.anon* %318 to i8*\n  %320 = icmp eq i8* %317, %319\n  br i1 %320, label %322, label %321\n\n321:                                              ; preds = %315\n  call void @_ZdlPv(i8* %317) #12\n  br label %322\n\n322:                                              ; preds = %321, %315\n  %323 = getelementptr inbounds [8 x %\"class.std::__cxx11::basic_string\"], [8 x %\"class.std::__cxx11::basic_string\"]* %6, i64 0, i64 0, i32 0, i32 0\n  %324 = load i8*, i8** %323, align 8, !tbaa !16\n  %325 = getelementptr inbounds [8 x %\"class.std::__cxx11::basic_string\"], [8 x %\"class.std::__cxx11::basic_string\"]* %6, i64 0, i64 0, i32 2\n  %326 = bitcast %union.anon* %325 to i8*\n  %327 = icmp eq i8* %324, %326\n  br i1 %327, label %329, label %328\n\n328:                                              ; preds = %322\n  call void @_ZdlPv(i8* %324) #12\n  br label %329\n\n329:                                              ; preds = %328, %322\n  call void @llvm.lifetime.end.p0i8(i64 256, i8* nonnull %9) #12\n  %330 = ptrtoint %\"class.std::__cxx11::basic_string\"* %70 to i64\n  %331 = ptrtoint i8* %58 to i64\n  %332 = sub i64 %330, %331\n  %333 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %1, i64 0, i32 0, i32 0\n  %334 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %2, i64 0, i32 0, i32 0\n  %335 = icmp eq i64 %332, 0\n  br i1 %335, label %147, label %87\n}\n\n; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn\ndeclare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1\n\ndeclare dso_local i32 @__gxx_personality_v0(...)\n\n; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn\ndeclare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1\n\n; Function Attrs: argmemonly mustprogress nofree nounwind willreturn writeonly\ndeclare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2\n\n; Function Attrs: nounwind uwtable\ndefine linkonce_odr dso_local void @_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED2Ev(%\"class.std::vector\"* nonnull align 8 dereferenceable(24) %0) unnamed_addr #3 comdat align 2 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {\n  %2 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0, i64 0, i32 0, i32 0, i32 0, i32 0\n  %3 = load %\"class.std::__cxx11::basic_string\"*, %\"class.std::__cxx11::basic_string\"** %2, align 8, !tbaa !12\n  %4 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0, i64 0, i32 0, i32 0, i32 0, i32 1\n  %5 = load %\"class.std::__cxx11::basic_string\"*, %\"class.std::__cxx11::basic_string\"** %4, align 8, !tbaa !15\n  %6 = icmp eq %\"class.std::__cxx11::basic_string\"* %3, %5\n  br i1 %6, label %20, label %7\n\n7:                                                ; preds = %1, %15\n  %8 = phi %\"class.std::__cxx11::basic_string\"* [ %16, %15 ], [ %3, %1 ]\n  %9 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %8, i64 0, i32 0, i32 0\n  %10 = load i8*, i8** %9, align 8, !tbaa !16\n  %11 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %8, i64 0, i32 2\n  %12 = bitcast %union.anon* %11 to i8*\n  %13 = icmp eq i8* %10, %12\n  br i1 %13, label %15, label %14\n\n14:                                               ; preds = %7\n  tail call void @_ZdlPv(i8* %10) #12\n  br label %15\n\n15:                                               ; preds = %14, %7\n  %16 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %8, i64 1\n  %17 = icmp eq %\"class.std::__cxx11::basic_string\"* %16, %5\n  br i1 %17, label %18, label %7, !llvm.loop !21\n\n18:                                               ; preds = %15\n  %19 = load %\"class.std::__cxx11::basic_string\"*, %\"class.std::__cxx11::basic_string\"** %2, align 8, !tbaa !12\n  br label %20\n\n20:                                               ; preds = %18, %1\n  %21 = phi %\"class.std::__cxx11::basic_string\"* [ %19, %18 ], [ %3, %1 ]\n  %22 = icmp eq %\"class.std::__cxx11::basic_string\"* %21, null\n  br i1 %22, label %25, label %23\n\n23:                                               ; preds = %20\n  %24 = bitcast %\"class.std::__cxx11::basic_string\"* %21 to i8*\n  tail call void @_ZdlPv(i8* nonnull %24) #12\n  br label %25\n\n25:                                               ; preds = %20, %23\n  ret void\n}\n\n; Function Attrs: noinline noreturn nounwind\ndefine linkonce_odr hidden void @__clang_call_terminate(i8* %0) local_unnamed_addr #4 comdat {\n  %2 = tail call i8* @__cxa_begin_catch(i8* %0) #12\n  tail call void @_ZSt9terminatev() #14\n  unreachable\n}\n\ndeclare dso_local i8* @__cxa_begin_catch(i8*) local_unnamed_addr\n\ndeclare dso_local void @_ZSt9terminatev() local_unnamed_addr\n\n; Function Attrs: nobuiltin nounwind\ndeclare dso_local void @_ZdlPv(i8*) local_unnamed_addr #5\n\ndeclare dso_local i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32), i64* nonnull align 8 dereferenceable(8), i64) local_unnamed_addr #6\n\n; Function Attrs: argmemonly mustprogress nofree nounwind willreturn\ndeclare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #7\n\n; Function Attrs: nobuiltin allocsize(0)\ndeclare dso_local nonnull i8* @_Znwm(i64) local_unnamed_addr #8\n\n; Function Attrs: noreturn\ndeclare dso_local void @_ZSt20__throw_length_errorPKc(i8*) local_unnamed_addr #9\n\n; Function Attrs: uwtable\ndefine linkonce_odr dso_local %\"class.std::__cxx11::basic_string\"* @_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPS7_EET0_T_SC_SB_(%\"class.std::__cxx11::basic_string\"* %0, %\"class.std::__cxx11::basic_string\"* %1, %\"class.std::__cxx11::basic_string\"* %2) local_unnamed_addr #0 comdat align 2 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {\n  %4 = alloca i64, align 8\n  %5 = bitcast i64* %4 to i8*\n  %6 = icmp eq %\"class.std::__cxx11::basic_string\"* %0, %1\n  br i1 %6, label %56, label %7\n\n7:                                                ; preds = %3, %30\n  %8 = phi %\"class.std::__cxx11::basic_string\"* [ %37, %30 ], [ %2, %3 ]\n  %9 = phi %\"class.std::__cxx11::basic_string\"* [ %36, %30 ], [ %0, %3 ]\n  %10 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %8, i64 0, i32 2\n  %11 = bitcast %\"class.std::__cxx11::basic_string\"* %8 to %union.anon**\n  store %union.anon* %10, %union.anon** %11, align 8, !tbaa !3\n  %12 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %9, i64 0, i32 0, i32 0\n  %13 = load i8*, i8** %12, align 8, !tbaa !16\n  %14 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %9, i64 0, i32 1\n  %15 = load i64, i64* %14, align 8, !tbaa !8\n  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #12\n  store i64 %15, i64* %4, align 8, !tbaa !19\n  %16 = icmp ugt i64 %15, 15\n  br i1 %16, label %19, label %17\n\n17:                                               ; preds = %7\n  %18 = bitcast %union.anon* %10 to i8*\n  br label %25\n\n19:                                               ; preds = %7\n  %20 = invoke i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %8, i64* nonnull align 8 dereferenceable(8) %4, i64 0)\n          to label %21 unwind label %39\n\n21:                                               ; preds = %19\n  %22 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %8, i64 0, i32 0, i32 0\n  store i8* %20, i8** %22, align 8, !tbaa !16\n  %23 = load i64, i64* %4, align 8, !tbaa !19\n  %24 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %8, i64 0, i32 2, i32 0\n  store i64 %23, i64* %24, align 8, !tbaa !11\n  br label %25\n\n25:                                               ; preds = %21, %17\n  %26 = phi i8* [ %18, %17 ], [ %20, %21 ]\n  switch i64 %15, label %29 [\n    i64 1, label %27\n    i64 0, label %30\n  ]\n\n27:                                               ; preds = %25\n  %28 = load i8, i8* %13, align 1, !tbaa !11\n  store i8 %28, i8* %26, align 1, !tbaa !11\n  br label %30\n\n29:                                               ; preds = %25\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %26, i8* align 1 %13, i64 %15, i1 false) #12\n  br label %30\n\n30:                                               ; preds = %29, %27, %25\n  %31 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %8, i64 0, i32 0, i32 0\n  %32 = load i64, i64* %4, align 8, !tbaa !19\n  %33 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %8, i64 0, i32 1\n  store i64 %32, i64* %33, align 8, !tbaa !8\n  %34 = load i8*, i8** %31, align 8, !tbaa !16\n  %35 = getelementptr inbounds i8, i8* %34, i64 %32\n  store i8 0, i8* %35, align 1, !tbaa !11\n  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5) #12\n  %36 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %9, i64 1\n  %37 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %8, i64 1\n  %38 = icmp eq %\"class.std::__cxx11::basic_string\"* %36, %1\n  br i1 %38, label %56, label %7, !llvm.loop !22\n\n39:                                               ; preds = %19\n  %40 = landingpad { i8*, i32 }\n          catch i8* null\n  %41 = extractvalue { i8*, i32 } %40, 0\n  %42 = call i8* @__cxa_begin_catch(i8* %41) #12\n  %43 = icmp eq %\"class.std::__cxx11::basic_string\"* %8, %2\n  br i1 %43, label %55, label %44\n\n44:                                               ; preds = %39, %52\n  %45 = phi %\"class.std::__cxx11::basic_string\"* [ %53, %52 ], [ %2, %39 ]\n  %46 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %45, i64 0, i32 0, i32 0\n  %47 = load i8*, i8** %46, align 8, !tbaa !16\n  %48 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %45, i64 0, i32 2\n  %49 = bitcast %union.anon* %48 to i8*\n  %50 = icmp eq i8* %47, %49\n  br i1 %50, label %52, label %51\n\n51:                                               ; preds = %44\n  call void @_ZdlPv(i8* %47) #12\n  br label %52\n\n52:                                               ; preds = %51, %44\n  %53 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %45, i64 1\n  %54 = icmp eq %\"class.std::__cxx11::basic_string\"* %53, %8\n  br i1 %54, label %55, label %44, !llvm.loop !21\n\n55:                                               ; preds = %52, %39\n  invoke void @__cxa_rethrow() #15\n          to label %64 unwind label %58\n\n56:                                               ; preds = %30, %3\n  %57 = phi %\"class.std::__cxx11::basic_string\"* [ %2, %3 ], [ %37, %30 ]\n  ret %\"class.std::__cxx11::basic_string\"* %57\n\n58:                                               ; preds = %55\n  %59 = landingpad { i8*, i32 }\n          cleanup\n  invoke void @__cxa_end_catch()\n          to label %60 unwind label %61\n\n60:                                               ; preds = %58\n  resume { i8*, i32 } %59\n\n61:                                               ; preds = %58\n  %62 = landingpad { i8*, i32 }\n          catch i8* null\n  %63 = extractvalue { i8*, i32 } %62, 0\n  call void @__clang_call_terminate(i8* %63) #14\n  unreachable\n\n64:                                               ; preds = %55\n  unreachable\n}\n\ndeclare dso_local void @__cxa_rethrow() local_unnamed_addr\n\ndeclare dso_local void @__cxa_end_catch() local_unnamed_addr\n\n; Function Attrs: uwtable\ndefine linkonce_odr dso_local void @_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_realloc_insertIJRKS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_(%\"class.std::vector\"* nonnull align 8 dereferenceable(24) %0, %\"class.std::__cxx11::basic_string\"* %1, %\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %2) local_unnamed_addr #0 comdat align 2 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {\n  %4 = alloca i64, align 8\n  %5 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0, i64 0, i32 0, i32 0, i32 0, i32 1\n  %6 = load %\"class.std::__cxx11::basic_string\"*, %\"class.std::__cxx11::basic_string\"** %5, align 8, !tbaa !15\n  %7 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0, i64 0, i32 0, i32 0, i32 0, i32 0\n  %8 = load %\"class.std::__cxx11::basic_string\"*, %\"class.std::__cxx11::basic_string\"** %7, align 8, !tbaa !12\n  %9 = ptrtoint %\"class.std::__cxx11::basic_string\"* %6 to i64\n  %10 = ptrtoint %\"class.std::__cxx11::basic_string\"* %8 to i64\n  %11 = sub i64 %9, %10\n  %12 = ashr exact i64 %11, 5\n  %13 = icmp eq i64 %11, 9223372036854775776\n  br i1 %13, label %14, label %15\n\n14:                                               ; preds = %3\n  tail call void @_ZSt20__throw_length_errorPKc(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.10, i64 0, i64 0)) #15\n  unreachable\n\n15:                                               ; preds = %3\n  %16 = icmp eq i64 %11, 0\n  %17 = select i1 %16, i64 1, i64 %12\n  %18 = add nsw i64 %17, %12\n  %19 = icmp ult i64 %18, %12\n  %20 = icmp ugt i64 %18, 288230376151711743\n  %21 = or i1 %19, %20\n  %22 = select i1 %21, i64 288230376151711743, i64 %18\n  %23 = ptrtoint %\"class.std::__cxx11::basic_string\"* %1 to i64\n  %24 = sub i64 %23, %10\n  %25 = ashr exact i64 %24, 5\n  %26 = icmp eq i64 %22, 0\n  br i1 %26, label %31, label %27\n\n27:                                               ; preds = %15\n  %28 = shl nuw nsw i64 %22, 5\n  %29 = tail call noalias nonnull i8* @_Znwm(i64 %28) #13\n  %30 = bitcast i8* %29 to %\"class.std::__cxx11::basic_string\"*\n  br label %31\n\n31:                                               ; preds = %15, %27\n  %32 = phi %\"class.std::__cxx11::basic_string\"* [ %30, %27 ], [ null, %15 ]\n  %33 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %32, i64 %25\n  %34 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %32, i64 %25, i32 2\n  %35 = bitcast %\"class.std::__cxx11::basic_string\"* %33 to %union.anon**\n  store %union.anon* %34, %union.anon** %35, align 8, !tbaa !3\n  %36 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %2, i64 0, i32 0, i32 0\n  %37 = load i8*, i8** %36, align 8, !tbaa !16\n  %38 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %2, i64 0, i32 1\n  %39 = load i64, i64* %38, align 8, !tbaa !8\n  %40 = bitcast i64* %4 to i8*\n  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %40) #12\n  store i64 %39, i64* %4, align 8, !tbaa !19\n  %41 = icmp ugt i64 %39, 15\n  br i1 %41, label %44, label %42\n\n42:                                               ; preds = %31\n  %43 = bitcast %union.anon* %34 to i8*\n  br label %50\n\n44:                                               ; preds = %31\n  %45 = invoke i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %33, i64* nonnull align 8 dereferenceable(8) %4, i64 0)\n          to label %46 unwind label %126\n\n46:                                               ; preds = %44\n  %47 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %33, i64 0, i32 0, i32 0\n  store i8* %45, i8** %47, align 8, !tbaa !16\n  %48 = load i64, i64* %4, align 8, !tbaa !19\n  %49 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %32, i64 %25, i32 2, i32 0\n  store i64 %48, i64* %49, align 8, !tbaa !11\n  br label %50\n\n50:                                               ; preds = %46, %42\n  %51 = phi i8* [ %43, %42 ], [ %45, %46 ]\n  switch i64 %39, label %54 [\n    i64 1, label %52\n    i64 0, label %55\n  ]\n\n52:                                               ; preds = %50\n  %53 = load i8, i8* %37, align 1, !tbaa !11\n  store i8 %53, i8* %51, align 1, !tbaa !11\n  br label %55\n\n54:                                               ; preds = %50\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %51, i8* align 1 %37, i64 %39, i1 false) #12\n  br label %55\n\n55:                                               ; preds = %54, %52, %50\n  %56 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %33, i64 0, i32 0, i32 0\n  %57 = load i64, i64* %4, align 8, !tbaa !19\n  %58 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %32, i64 %25, i32 1\n  store i64 %57, i64* %58, align 8, !tbaa !8\n  %59 = load i8*, i8** %56, align 8, !tbaa !16\n  %60 = getelementptr inbounds i8, i8* %59, i64 %57\n  store i8 0, i8* %60, align 1, !tbaa !11\n  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %40) #12\n  %61 = icmp eq %\"class.std::__cxx11::basic_string\"* %8, %1\n  br i1 %61, label %87, label %62\n\n62:                                               ; preds = %55, %79\n  %63 = phi %\"class.std::__cxx11::basic_string\"* [ %85, %79 ], [ %32, %55 ]\n  %64 = phi %\"class.std::__cxx11::basic_string\"* [ %84, %79 ], [ %8, %55 ]\n  %65 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %63, i64 0, i32 2\n  %66 = bitcast %\"class.std::__cxx11::basic_string\"* %63 to %union.anon**\n  store %union.anon* %65, %union.anon** %66, align 8, !tbaa !3\n  %67 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %64, i64 0, i32 0, i32 0\n  %68 = load i8*, i8** %67, align 8, !tbaa !16\n  %69 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %64, i64 0, i32 2\n  %70 = bitcast %union.anon* %69 to i8*\n  %71 = icmp eq i8* %68, %70\n  br i1 %71, label %72, label %74\n\n72:                                               ; preds = %62\n  %73 = bitcast %union.anon* %65 to i8*\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(16) %73, i8* noundef nonnull align 8 dereferenceable(16) %68, i64 16, i1 false) #12\n  br label %79\n\n74:                                               ; preds = %62\n  %75 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %63, i64 0, i32 0, i32 0\n  store i8* %68, i8** %75, align 8, !tbaa !16\n  %76 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %64, i64 0, i32 2, i32 0\n  %77 = load i64, i64* %76, align 8, !tbaa !11\n  %78 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %63, i64 0, i32 2, i32 0\n  store i64 %77, i64* %78, align 8, !tbaa !11\n  br label %79\n\n79:                                               ; preds = %74, %72\n  %80 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %64, i64 0, i32 1\n  %81 = load i64, i64* %80, align 8, !tbaa !8\n  %82 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %63, i64 0, i32 1\n  store i64 %81, i64* %82, align 8, !tbaa !8\n  %83 = bitcast %\"class.std::__cxx11::basic_string\"* %64 to %union.anon**\n  store %union.anon* %69, %union.anon** %83, align 8, !tbaa !16\n  store i64 0, i64* %80, align 8, !tbaa !8\n  store i8 0, i8* %70, align 8, !tbaa !11\n  %84 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %64, i64 1\n  %85 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %63, i64 1\n  %86 = icmp eq %\"class.std::__cxx11::basic_string\"* %84, %1\n  br i1 %86, label %87, label %62, !llvm.loop !23\n\n87:                                               ; preds = %79, %55\n  %88 = phi %\"class.std::__cxx11::basic_string\"* [ %32, %55 ], [ %85, %79 ]\n  %89 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %88, i64 1\n  %90 = icmp eq %\"class.std::__cxx11::basic_string\"* %6, %1\n  br i1 %90, label %116, label %91\n\n91:                                               ; preds = %87, %108\n  %92 = phi %\"class.std::__cxx11::basic_string\"* [ %114, %108 ], [ %89, %87 ]\n  %93 = phi %\"class.std::__cxx11::basic_string\"* [ %113, %108 ], [ %1, %87 ]\n  %94 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %92, i64 0, i32 2\n  %95 = bitcast %\"class.std::__cxx11::basic_string\"* %92 to %union.anon**\n  store %union.anon* %94, %union.anon** %95, align 8, !tbaa !3\n  %96 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %93, i64 0, i32 0, i32 0\n  %97 = load i8*, i8** %96, align 8, !tbaa !16\n  %98 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %93, i64 0, i32 2\n  %99 = bitcast %union.anon* %98 to i8*\n  %100 = icmp eq i8* %97, %99\n  br i1 %100, label %101, label %103\n\n101:                                              ; preds = %91\n  %102 = bitcast %union.anon* %94 to i8*\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(16) %102, i8* noundef nonnull align 8 dereferenceable(16) %97, i64 16, i1 false) #12\n  br label %108\n\n103:                                              ; preds = %91\n  %104 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %92, i64 0, i32 0, i32 0\n  store i8* %97, i8** %104, align 8, !tbaa !16\n  %105 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %93, i64 0, i32 2, i32 0\n  %106 = load i64, i64* %105, align 8, !tbaa !11\n  %107 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %92, i64 0, i32 2, i32 0\n  store i64 %106, i64* %107, align 8, !tbaa !11\n  br label %108\n\n108:                                              ; preds = %103, %101\n  %109 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %93, i64 0, i32 1\n  %110 = load i64, i64* %109, align 8, !tbaa !8\n  %111 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %92, i64 0, i32 1\n  store i64 %110, i64* %111, align 8, !tbaa !8\n  %112 = bitcast %\"class.std::__cxx11::basic_string\"* %93 to %union.anon**\n  store %union.anon* %98, %union.anon** %112, align 8, !tbaa !16\n  store i64 0, i64* %109, align 8, !tbaa !8\n  store i8 0, i8* %99, align 8, !tbaa !11\n  %113 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %93, i64 1\n  %114 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %92, i64 1\n  %115 = icmp eq %\"class.std::__cxx11::basic_string\"* %113, %6\n  br i1 %115, label %116, label %91, !llvm.loop !23\n\n116:                                              ; preds = %108, %87\n  %117 = phi %\"class.std::__cxx11::basic_string\"* [ %89, %87 ], [ %114, %108 ]\n  %118 = icmp eq %\"class.std::__cxx11::basic_string\"* %8, null\n  br i1 %118, label %121, label %119\n\n119:                                              ; preds = %116\n  %120 = bitcast %\"class.std::__cxx11::basic_string\"* %8 to i8*\n  call void @_ZdlPv(i8* nonnull %120) #12\n  br label %121\n\n121:                                              ; preds = %116, %119\n  %122 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0, i64 0, i32 0, i32 0, i32 0, i32 2\n  store %\"class.std::__cxx11::basic_string\"* %32, %\"class.std::__cxx11::basic_string\"** %7, align 8, !tbaa !12\n  store %\"class.std::__cxx11::basic_string\"* %117, %\"class.std::__cxx11::basic_string\"** %5, align 8, !tbaa !15\n  %123 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %32, i64 %22\n  store %\"class.std::__cxx11::basic_string\"* %123, %\"class.std::__cxx11::basic_string\"** %122, align 8, !tbaa !14\n  ret void\n\n124:                                              ; preds = %126\n  %125 = landingpad { i8*, i32 }\n          cleanup\n  invoke void @__cxa_end_catch()\n          to label %131 unwind label %132\n\n126:                                              ; preds = %44\n  %127 = landingpad { i8*, i32 }\n          catch i8* null\n  %128 = extractvalue { i8*, i32 } %127, 0\n  %129 = call i8* @__cxa_begin_catch(i8* %128) #12\n  %130 = bitcast %\"class.std::__cxx11::basic_string\"* %32 to i8*\n  call void @_ZdlPv(i8* nonnull %130) #12\n  invoke void @__cxa_rethrow() #15\n          to label %135 unwind label %124\n\n131:                                              ; preds = %124\n  resume { i8*, i32 } %125\n\n132:                                              ; preds = %124\n  %133 = landingpad { i8*, i32 }\n          catch i8* null\n  %134 = extractvalue { i8*, i32 } %133, 0\n  call void @__clang_call_terminate(i8* %134) #14\n  unreachable\n\n135:                                              ; preds = %126\n  unreachable\n}\n\n; Function Attrs: argmemonly nofree nounwind readonly willreturn\ndeclare i32 @bcmp(i8* nocapture, i8* nocapture, i64) local_unnamed_addr #10\n\n; Function Attrs: nofree nosync nounwind readnone speculatable willreturn\ndeclare i64 @llvm.umax.i64(i64, i64) #11\n\nattributes #0 = { uwtable \"frame-pointer\"=\"none\" \"min-legal-vector-width\"=\"0\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #1 = { argmemonly mustprogress nofree nosync nounwind willreturn }\nattributes #2 = { argmemonly mustprogress nofree nounwind willreturn writeonly }\nattributes #3 = { nounwind uwtable \"frame-pointer\"=\"none\" \"min-legal-vector-width\"=\"0\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #4 = { noinline noreturn nounwind }\nattributes #5 = { nobuiltin nounwind \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #6 = { \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #7 = { argmemonly mustprogress nofree nounwind willreturn }\nattributes #8 = { nobuiltin allocsize(0) \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #9 = { noreturn \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #10 = { argmemonly nofree nounwind readonly willreturn }\nattributes #11 = { nofree nosync nounwind readnone speculatable willreturn }\nattributes #12 = { nounwind }\nattributes #13 = { allocsize(0) }\nattributes #14 = { noreturn nounwind }\nattributes #15 = { noreturn }\n\n!llvm.module.flags = !{!0, !1}\n!llvm.ident = !{!2}\n\n!0 = !{i32 1, !\"wchar_size\", i32 4}\n!1 = !{i32 7, !\"uwtable\", i32 1}\n!2 = !{!\"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)\"}\n!3 = !{!4, !5, i64 0}\n!4 = !{!\"_ZTSNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderE\", !5, i64 0}\n!5 = !{!\"any pointer\", !6, i64 0}\n!6 = !{!\"omnipotent char\", !7, i64 0}\n!7 = !{!\"Simple C++ TBAA\"}\n!8 = !{!9, !10, i64 8}\n!9 = !{!\"_ZTSNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE\", !4, i64 0, !10, i64 8, !6, i64 16}\n!10 = !{!\"long\", !6, i64 0}\n!11 = !{!6, !6, i64 0}\n!12 = !{!13, !5, i64 0}\n!13 = !{!\"_ZTSNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_Vector_impl_dataE\", !5, i64 0, !5, i64 8, !5, i64 16}\n!14 = !{!13, !5, i64 16}\n!15 = !{!13, !5, i64 8}\n!16 = !{!9, !5, i64 0}\n!17 = distinct !{!17, !18}\n!18 = !{!\"llvm.loop.mustprogress\"}\n!19 = !{!10, !10, i64 0}\n!20 = !{!5, !5, i64 0}\n!21 = distinct !{!21, !18}\n!22 = distinct !{!22, !18}\n!23 = distinct !{!23, !18}\n", "target": "This is the targeted source code:\n/*\nThere are eight planets in our solar system: the closerst to the Sun \nis Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \nUranus, Neptune.\nWrite a function that takes two planet names as strings planet1 and planet2. \nThe function should return a vector containing all planets whose orbits are \nlocated between the orbit of planet1 and the orbit of planet2, sorted by \nthe proximity to the sun. \nThe function should return an empty vector if planet1 or planet2\nare not correct planet names. \nExamples\nbf(\"Jupiter\", \"Neptune\") ==> {\"Saturn\", \"Uranus\"}\nbf(\"Earth\", \"Mercury\") ==> {\"Venus\"}\nbf(\"Mercury\", \"Uranus\") ==> {\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> bf(string planet1,string planet2){\n\n    vector<string> planets={\"Mercury\",\"Venus\",\"Earth\",\"Mars\",\"Jupiter\",\"Saturn\",\"Uranus\",\"Neptune\"};\n    int pos1=-1,pos2=-1,m;\n    for (m=0;m<planets.size();m++)\n    {\n    if (planets[m]==planet1) pos1=m;\n    if (planets[m]==planet2) pos2=m;\n    }\n    if (pos1==-1 or pos2==-1) return {};\n    if (pos1>pos2) {m=pos1;pos1=pos2;pos2=m;}\n    vector<string> out={};\n    for (m=pos1+1;m<pos2;m++)\n    out.push_back(planets[m]);\n    return out;\n}\n"}
{"input": "Convert this to C++:\n; ModuleID = '../../Human_xBenchmarks_164/CPP_149/CPP_149.cpp'\nsource_filename = \"../../Human_xBenchmarks_164/CPP_149/CPP_149.cpp\"\ntarget datalayout = \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\ntarget triple = \"x86_64-unknown-linux-gnu\"\n\n%\"class.std::vector\" = type { %\"struct.std::_Vector_base\" }\n%\"struct.std::_Vector_base\" = type { %\"struct.std::_Vector_base<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char>>>::_Vector_impl\" }\n%\"struct.std::_Vector_base<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char>>>::_Vector_impl\" = type { %\"struct.std::_Vector_base<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char>>>::_Vector_impl_data\" }\n%\"struct.std::_Vector_base<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char>>>::_Vector_impl_data\" = type { %\"class.std::__cxx11::basic_string\"*, %\"class.std::__cxx11::basic_string\"*, %\"class.std::__cxx11::basic_string\"* }\n%\"class.std::__cxx11::basic_string\" = type { %\"struct.std::__cxx11::basic_string<char>::_Alloc_hider\", i64, %union.anon }\n%\"struct.std::__cxx11::basic_string<char>::_Alloc_hider\" = type { i8* }\n%union.anon = type { i64, [8 x i8] }\n%\"struct.__gnu_cxx::__ops::_Iter_less_iter\" = type { i8 }\n%\"struct.__gnu_cxx::__ops::_Iter_less_val\" = type { i8 }\n\n$_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED2Ev = comdat any\n\n$__clang_call_terminate = comdat any\n\n$_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_realloc_insertIJRKS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_ = comdat any\n\n$_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS7_SaIS7_EEEElNS0_5__ops15_Iter_less_iterEEvT_SF_T0_T1_ = comdat any\n\n$_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS7_SaIS7_EEEENS0_5__ops15_Iter_less_iterEEvT_SF_RT0_ = comdat any\n\n$_ZSt10__pop_heapIN9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS7_SaIS7_EEEENS0_5__ops15_Iter_less_iterEEvT_SF_SF_RT0_ = comdat any\n\n$_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS7_SaIS7_EEEElS7_NS0_5__ops15_Iter_less_iterEEvT_T0_SG_T1_T2_ = comdat any\n\n$_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS7_SaIS7_EEEElS7_NS0_5__ops14_Iter_less_valEEvT_T0_SG_T1_RT2_ = comdat any\n\n$_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS7_SaIS7_EEEENS0_5__ops15_Iter_less_iterEEvT_SF_SF_SF_T0_ = comdat any\n\n$_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS7_SaIS7_EEEENS0_5__ops15_Iter_less_iterEET_SF_SF_SF_T0_ = comdat any\n\n$_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS7_SaIS7_EEEENS0_5__ops15_Iter_less_iterEEvT_SF_T0_ = comdat any\n\n$_ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS7_SaIS7_EEEENS0_5__ops14_Val_less_iterEEvT_T0_ = comdat any\n\n@.str.1 = private unnamed_addr constant [26 x i8] c\"vector::_M_realloc_insert\\00\", align 1\n\n; Function Attrs: uwtable\ndefine dso_local void @_Z15sorted_list_sumSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE(%\"class.std::vector\"* noalias sret(%\"class.std::vector\") align 8 %0, %\"class.std::vector\"* nocapture readonly %1) local_unnamed_addr #0 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {\n  %3 = alloca i64, align 8\n  %4 = alloca %\"class.std::__cxx11::basic_string\", align 8\n  %5 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %1, i64 0, i32 0, i32 0, i32 0, i32 1\n  %6 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %1, i64 0, i32 0, i32 0, i32 0, i32 0\n  %7 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0, i64 0, i32 0, i32 0, i32 0, i32 1\n  %8 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0, i64 0, i32 0, i32 0, i32 0, i32 2\n  %9 = bitcast i64* %3 to i8*\n  %10 = bitcast %\"class.std::vector\"* %0 to i8*\n  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(24) %10, i8 0, i64 24, i1 false)\n  %11 = load %\"class.std::__cxx11::basic_string\"*, %\"class.std::__cxx11::basic_string\"** %5, align 8, !tbaa !3\n  %12 = load %\"class.std::__cxx11::basic_string\"*, %\"class.std::__cxx11::basic_string\"** %6, align 8, !tbaa !8\n  %13 = icmp eq %\"class.std::__cxx11::basic_string\"* %11, %12\n  br i1 %13, label %18, label %52\n\n14:                                               ; preds = %94\n  %15 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0, i64 0, i32 0, i32 0, i32 0, i32 0\n  %16 = load %\"class.std::__cxx11::basic_string\"*, %\"class.std::__cxx11::basic_string\"** %15, align 8, !tbaa !9\n  %17 = load %\"class.std::__cxx11::basic_string\"*, %\"class.std::__cxx11::basic_string\"** %7, align 8, !tbaa !9\n  br label %18\n\n18:                                               ; preds = %14, %2\n  %19 = phi %\"class.std::__cxx11::basic_string\"* [ %17, %14 ], [ null, %2 ]\n  %20 = phi %\"class.std::__cxx11::basic_string\"* [ %16, %14 ], [ null, %2 ]\n  %21 = bitcast %\"class.std::__cxx11::basic_string\"* %4 to i8*\n  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %21) #16\n  %22 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %4, i64 0, i32 2\n  %23 = bitcast %\"class.std::__cxx11::basic_string\"* %4 to %union.anon**\n  store %union.anon* %22, %union.anon** %23, align 8, !tbaa !10\n  %24 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %4, i64 0, i32 1\n  store i64 0, i64* %24, align 8, !tbaa !12\n  %25 = bitcast %union.anon* %22 to i8*\n  store i8 0, i8* %25, align 8, !tbaa !15\n  %26 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0, i64 0, i32 0, i32 0, i32 0, i32 0\n  %27 = icmp eq %\"class.std::__cxx11::basic_string\"* %20, %19\n  br i1 %27, label %48, label %28\n\n28:                                               ; preds = %18\n  %29 = ptrtoint %\"class.std::__cxx11::basic_string\"* %19 to i64\n  %30 = ptrtoint %\"class.std::__cxx11::basic_string\"* %20 to i64\n  %31 = sub i64 %29, %30\n  %32 = ashr exact i64 %31, 5\n  %33 = call i64 @llvm.ctlz.i64(i64 %32, i1 true) #16, !range !16\n  %34 = shl nuw nsw i64 %33, 1\n  %35 = xor i64 %34, 126\n  invoke void @_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS7_SaIS7_EEEElNS0_5__ops15_Iter_less_iterEEvT_SF_T0_T1_(%\"class.std::__cxx11::basic_string\"* %20, %\"class.std::__cxx11::basic_string\"* %19, i64 %35)\n          to label %36 unwind label %120\n\n36:                                               ; preds = %28\n  %37 = icmp sgt i64 %31, 512\n  br i1 %37, label %38, label %47\n\n38:                                               ; preds = %36\n  %39 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %20, i64 16\n  invoke void @_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS7_SaIS7_EEEENS0_5__ops15_Iter_less_iterEEvT_SF_T0_(%\"class.std::__cxx11::basic_string\"* %20, %\"class.std::__cxx11::basic_string\"* nonnull %39)\n          to label %40 unwind label %120\n\n40:                                               ; preds = %38\n  %41 = icmp eq %\"class.std::__cxx11::basic_string\"* %39, %19\n  br i1 %41, label %48, label %42\n\n42:                                               ; preds = %40, %44\n  %43 = phi %\"class.std::__cxx11::basic_string\"* [ %45, %44 ], [ %39, %40 ]\n  invoke void @_ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS7_SaIS7_EEEENS0_5__ops14_Val_less_iterEEvT_T0_(%\"class.std::__cxx11::basic_string\"* nonnull %43)\n          to label %44 unwind label %118\n\n44:                                               ; preds = %42\n  %45 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %43, i64 1\n  %46 = icmp eq %\"class.std::__cxx11::basic_string\"* %45, %19\n  br i1 %46, label %48, label %42, !llvm.loop !17\n\n47:                                               ; preds = %36\n  invoke void @_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS7_SaIS7_EEEENS0_5__ops15_Iter_less_iterEEvT_SF_T0_(%\"class.std::__cxx11::basic_string\"* %20, %\"class.std::__cxx11::basic_string\"* %19)\n          to label %48 unwind label %120\n\n48:                                               ; preds = %44, %47, %18, %40\n  %49 = load %\"class.std::__cxx11::basic_string\"*, %\"class.std::__cxx11::basic_string\"** %7, align 8, !tbaa !3\n  %50 = load %\"class.std::__cxx11::basic_string\"*, %\"class.std::__cxx11::basic_string\"** %26, align 8, !tbaa !8\n  %51 = icmp eq %\"class.std::__cxx11::basic_string\"* %49, %50\n  br i1 %51, label %112, label %103\n\n52:                                               ; preds = %2, %94\n  %53 = phi i64 [ %95, %94 ], [ 0, %2 ]\n  %54 = phi %\"class.std::__cxx11::basic_string\"* [ %97, %94 ], [ %12, %2 ]\n  %55 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %54, i64 %53\n  %56 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %54, i64 %53, i32 1\n  %57 = load i64, i64* %56, align 8, !tbaa !12\n  %58 = and i64 %57, 1\n  %59 = icmp eq i64 %58, 0\n  br i1 %59, label %60, label %94\n\n60:                                               ; preds = %52\n  %61 = load %\"class.std::__cxx11::basic_string\"*, %\"class.std::__cxx11::basic_string\"** %7, align 8, !tbaa !3\n  %62 = load %\"class.std::__cxx11::basic_string\"*, %\"class.std::__cxx11::basic_string\"** %8, align 8, !tbaa !19\n  %63 = icmp eq %\"class.std::__cxx11::basic_string\"* %61, %62\n  br i1 %63, label %91, label %64\n\n64:                                               ; preds = %60\n  %65 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %61, i64 0, i32 2\n  %66 = bitcast %\"class.std::__cxx11::basic_string\"* %61 to %union.anon**\n  store %union.anon* %65, %union.anon** %66, align 8, !tbaa !10\n  %67 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %55, i64 0, i32 0, i32 0\n  %68 = load i8*, i8** %67, align 8, !tbaa !20\n  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %9) #16\n  store i64 %57, i64* %3, align 8, !tbaa !21\n  %69 = icmp ugt i64 %57, 15\n  br i1 %69, label %72, label %70\n\n70:                                               ; preds = %64\n  %71 = bitcast %union.anon* %65 to i8*\n  br label %78\n\n72:                                               ; preds = %64\n  %73 = invoke i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %61, i64* nonnull align 8 dereferenceable(8) %3, i64 0)\n          to label %74 unwind label %92\n\n74:                                               ; preds = %72\n  %75 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %61, i64 0, i32 0, i32 0\n  store i8* %73, i8** %75, align 8, !tbaa !20\n  %76 = load i64, i64* %3, align 8, !tbaa !21\n  %77 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %61, i64 0, i32 2, i32 0\n  store i64 %76, i64* %77, align 8, !tbaa !15\n  br label %78\n\n78:                                               ; preds = %74, %70\n  %79 = phi i8* [ %71, %70 ], [ %73, %74 ]\n  switch i64 %57, label %82 [\n    i64 1, label %80\n    i64 0, label %83\n  ]\n\n80:                                               ; preds = %78\n  %81 = load i8, i8* %68, align 1, !tbaa !15\n  store i8 %81, i8* %79, align 1, !tbaa !15\n  br label %83\n\n82:                                               ; preds = %78\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %79, i8* align 1 %68, i64 %57, i1 false) #16\n  br label %83\n\n83:                                               ; preds = %82, %80, %78\n  %84 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %61, i64 0, i32 0, i32 0\n  %85 = load i64, i64* %3, align 8, !tbaa !21\n  %86 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %61, i64 0, i32 1\n  store i64 %85, i64* %86, align 8, !tbaa !12\n  %87 = load i8*, i8** %84, align 8, !tbaa !20\n  %88 = getelementptr inbounds i8, i8* %87, i64 %85\n  store i8 0, i8* %88, align 1, !tbaa !15\n  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %9) #16\n  %89 = load %\"class.std::__cxx11::basic_string\"*, %\"class.std::__cxx11::basic_string\"** %7, align 8, !tbaa !3\n  %90 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %89, i64 1\n  store %\"class.std::__cxx11::basic_string\"* %90, %\"class.std::__cxx11::basic_string\"** %7, align 8, !tbaa !3\n  br label %94\n\n91:                                               ; preds = %60\n  invoke void @_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_realloc_insertIJRKS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_(%\"class.std::vector\"* nonnull align 8 dereferenceable(24) %0, %\"class.std::__cxx11::basic_string\"* %61, %\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %55)\n          to label %94 unwind label %92\n\n92:                                               ; preds = %91, %72\n  %93 = landingpad { i8*, i32 }\n          cleanup\n  br label %177\n\n94:                                               ; preds = %83, %91, %52\n  %95 = add nuw i64 %53, 1\n  %96 = load %\"class.std::__cxx11::basic_string\"*, %\"class.std::__cxx11::basic_string\"** %5, align 8, !tbaa !3\n  %97 = load %\"class.std::__cxx11::basic_string\"*, %\"class.std::__cxx11::basic_string\"** %6, align 8, !tbaa !8\n  %98 = ptrtoint %\"class.std::__cxx11::basic_string\"* %96 to i64\n  %99 = ptrtoint %\"class.std::__cxx11::basic_string\"* %97 to i64\n  %100 = sub i64 %98, %99\n  %101 = ashr exact i64 %100, 5\n  %102 = icmp ugt i64 %101, %95\n  br i1 %102, label %52, label %14, !llvm.loop !22\n\n103:                                              ; preds = %48, %127\n  %104 = phi %\"class.std::__cxx11::basic_string\"* [ %129, %127 ], [ %50, %48 ]\n  %105 = phi %\"class.std::__cxx11::basic_string\"* [ %130, %127 ], [ %49, %48 ]\n  %106 = phi i64 [ %131, %127 ], [ 0, %48 ]\n  %107 = ptrtoint %\"class.std::__cxx11::basic_string\"* %105 to i64\n  %108 = ptrtoint %\"class.std::__cxx11::basic_string\"* %104 to i64\n  %109 = sub i64 %107, %108\n  %110 = ashr exact i64 %109, 5\n  %111 = icmp ugt i64 %110, 1\n  br i1 %111, label %133, label %127\n\n112:                                              ; preds = %127, %48\n  %113 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %4, i64 0, i32 0, i32 0\n  %114 = load i8*, i8** %113, align 8, !tbaa !20\n  %115 = icmp eq i8* %114, %25\n  br i1 %115, label %117, label %116\n\n116:                                              ; preds = %112\n  call void @_ZdlPv(i8* %114) #16\n  br label %117\n\n117:                                              ; preds = %112, %116\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %21) #16\n  ret void\n\n118:                                              ; preds = %42\n  %119 = landingpad { i8*, i32 }\n          cleanup\n  br label %170\n\n120:                                              ; preds = %28, %38, %47\n  %121 = landingpad { i8*, i32 }\n          cleanup\n  br label %170\n\n122:                                              ; preds = %159\n  %123 = ptrtoint %\"class.std::__cxx11::basic_string\"* %161 to i64\n  %124 = ptrtoint %\"class.std::__cxx11::basic_string\"* %160 to i64\n  %125 = sub i64 %123, %124\n  %126 = ashr exact i64 %125, 5\n  br label %127\n\n127:                                              ; preds = %122, %103\n  %128 = phi i64 [ %126, %122 ], [ %110, %103 ]\n  %129 = phi %\"class.std::__cxx11::basic_string\"* [ %160, %122 ], [ %104, %103 ]\n  %130 = phi %\"class.std::__cxx11::basic_string\"* [ %161, %122 ], [ %105, %103 ]\n  %131 = add nuw i64 %106, 1\n  %132 = icmp ugt i64 %128, %131\n  br i1 %132, label %103, label %112, !llvm.loop !23\n\n133:                                              ; preds = %103, %159\n  %134 = phi %\"class.std::__cxx11::basic_string\"* [ %160, %159 ], [ %104, %103 ]\n  %135 = phi %\"class.std::__cxx11::basic_string\"* [ %161, %159 ], [ %105, %103 ]\n  %136 = phi %\"class.std::__cxx11::basic_string\"* [ %162, %159 ], [ %104, %103 ]\n  %137 = phi %\"class.std::__cxx11::basic_string\"* [ %163, %159 ], [ %105, %103 ]\n  %138 = phi i64 [ %164, %159 ], [ 1, %103 ]\n  %139 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %136, i64 %138, i32 1\n  %140 = load i64, i64* %139, align 8, !tbaa !12\n  %141 = add nsw i64 %138, -1\n  %142 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %136, i64 %141, i32 1\n  %143 = load i64, i64* %142, align 8, !tbaa !12\n  %144 = icmp ult i64 %140, %143\n  br i1 %144, label %145, label %159\n\n145:                                              ; preds = %133\n  %146 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %136, i64 %138\n  invoke void @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %4, %\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %146)\n          to label %147 unwind label %157\n\n147:                                              ; preds = %145\n  %148 = load %\"class.std::__cxx11::basic_string\"*, %\"class.std::__cxx11::basic_string\"** %26, align 8, !tbaa !8\n  %149 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %148, i64 %141\n  %150 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %148, i64 %138\n  invoke void @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %150, %\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %149)\n          to label %151 unwind label %157\n\n151:                                              ; preds = %147\n  %152 = load %\"class.std::__cxx11::basic_string\"*, %\"class.std::__cxx11::basic_string\"** %26, align 8, !tbaa !8\n  %153 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %152, i64 %141\n  invoke void @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %153, %\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %4)\n          to label %154 unwind label %157\n\n154:                                              ; preds = %151\n  %155 = load %\"class.std::__cxx11::basic_string\"*, %\"class.std::__cxx11::basic_string\"** %7, align 8, !tbaa !3\n  %156 = load %\"class.std::__cxx11::basic_string\"*, %\"class.std::__cxx11::basic_string\"** %26, align 8, !tbaa !8\n  br label %159\n\n157:                                              ; preds = %151, %147, %145\n  %158 = landingpad { i8*, i32 }\n          cleanup\n  br label %170\n\n159:                                              ; preds = %154, %133\n  %160 = phi %\"class.std::__cxx11::basic_string\"* [ %156, %154 ], [ %134, %133 ]\n  %161 = phi %\"class.std::__cxx11::basic_string\"* [ %155, %154 ], [ %135, %133 ]\n  %162 = phi %\"class.std::__cxx11::basic_string\"* [ %156, %154 ], [ %136, %133 ]\n  %163 = phi %\"class.std::__cxx11::basic_string\"* [ %155, %154 ], [ %137, %133 ]\n  %164 = add nuw i64 %138, 1\n  %165 = ptrtoint %\"class.std::__cxx11::basic_string\"* %163 to i64\n  %166 = ptrtoint %\"class.std::__cxx11::basic_string\"* %162 to i64\n  %167 = sub i64 %165, %166\n  %168 = ashr exact i64 %167, 5\n  %169 = icmp ugt i64 %168, %164\n  br i1 %169, label %133, label %122, !llvm.loop !24\n\n170:                                              ; preds = %118, %120, %157\n  %171 = phi { i8*, i32 } [ %158, %157 ], [ %119, %118 ], [ %121, %120 ]\n  %172 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %4, i64 0, i32 0, i32 0\n  %173 = load i8*, i8** %172, align 8, !tbaa !20\n  %174 = icmp eq i8* %173, %25\n  br i1 %174, label %176, label %175\n\n175:                                              ; preds = %170\n  call void @_ZdlPv(i8* %173) #16\n  br label %176\n\n176:                                              ; preds = %170, %175\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %21) #16\n  br label %177\n\n177:                                              ; preds = %176, %92\n  %178 = phi { i8*, i32 } [ %93, %92 ], [ %171, %176 ]\n  call void @_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED2Ev(%\"class.std::vector\"* nonnull align 8 dereferenceable(24) %0) #16\n  resume { i8*, i32 } %178\n}\n\n; Function Attrs: argmemonly mustprogress nofree nounwind willreturn writeonly\ndeclare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1\n\n; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn\ndeclare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2\n\ndeclare dso_local i32 @__gxx_personality_v0(...)\n\n; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn\ndeclare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2\n\n; Function Attrs: nounwind uwtable\ndefine linkonce_odr dso_local void @_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED2Ev(%\"class.std::vector\"* nonnull align 8 dereferenceable(24) %0) unnamed_addr #3 comdat align 2 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {\n  %2 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0, i64 0, i32 0, i32 0, i32 0, i32 0\n  %3 = load %\"class.std::__cxx11::basic_string\"*, %\"class.std::__cxx11::basic_string\"** %2, align 8, !tbaa !8\n  %4 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0, i64 0, i32 0, i32 0, i32 0, i32 1\n  %5 = load %\"class.std::__cxx11::basic_string\"*, %\"class.std::__cxx11::basic_string\"** %4, align 8, !tbaa !3\n  %6 = icmp eq %\"class.std::__cxx11::basic_string\"* %3, %5\n  br i1 %6, label %20, label %7\n\n7:                                                ; preds = %1, %15\n  %8 = phi %\"class.std::__cxx11::basic_string\"* [ %16, %15 ], [ %3, %1 ]\n  %9 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %8, i64 0, i32 0, i32 0\n  %10 = load i8*, i8** %9, align 8, !tbaa !20\n  %11 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %8, i64 0, i32 2\n  %12 = bitcast %union.anon* %11 to i8*\n  %13 = icmp eq i8* %10, %12\n  br i1 %13, label %15, label %14\n\n14:                                               ; preds = %7\n  tail call void @_ZdlPv(i8* %10) #16\n  br label %15\n\n15:                                               ; preds = %14, %7\n  %16 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %8, i64 1\n  %17 = icmp eq %\"class.std::__cxx11::basic_string\"* %16, %5\n  br i1 %17, label %18, label %7, !llvm.loop !25\n\n18:                                               ; preds = %15\n  %19 = load %\"class.std::__cxx11::basic_string\"*, %\"class.std::__cxx11::basic_string\"** %2, align 8, !tbaa !8\n  br label %20\n\n20:                                               ; preds = %18, %1\n  %21 = phi %\"class.std::__cxx11::basic_string\"* [ %19, %18 ], [ %3, %1 ]\n  %22 = icmp eq %\"class.std::__cxx11::basic_string\"* %21, null\n  br i1 %22, label %25, label %23\n\n23:                                               ; preds = %20\n  %24 = bitcast %\"class.std::__cxx11::basic_string\"* %21 to i8*\n  tail call void @_ZdlPv(i8* nonnull %24) #16\n  br label %25\n\n25:                                               ; preds = %20, %23\n  ret void\n}\n\n; Function Attrs: noinline noreturn nounwind\ndefine linkonce_odr hidden void @__clang_call_terminate(i8* %0) local_unnamed_addr #4 comdat {\n  %2 = tail call i8* @__cxa_begin_catch(i8* %0) #16\n  tail call void @_ZSt9terminatev() #17\n  unreachable\n}\n\ndeclare dso_local i8* @__cxa_begin_catch(i8*) local_unnamed_addr\n\ndeclare dso_local void @_ZSt9terminatev() local_unnamed_addr\n\n; Function Attrs: nobuiltin nounwind\ndeclare dso_local void @_ZdlPv(i8*) local_unnamed_addr #5\n\n; Function Attrs: uwtable\ndefine linkonce_odr dso_local void @_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_realloc_insertIJRKS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_(%\"class.std::vector\"* nonnull align 8 dereferenceable(24) %0, %\"class.std::__cxx11::basic_string\"* %1, %\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %2) local_unnamed_addr #0 comdat align 2 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {\n  %4 = alloca i64, align 8\n  %5 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0, i64 0, i32 0, i32 0, i32 0, i32 1\n  %6 = load %\"class.std::__cxx11::basic_string\"*, %\"class.std::__cxx11::basic_string\"** %5, align 8, !tbaa !3\n  %7 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0, i64 0, i32 0, i32 0, i32 0, i32 0\n  %8 = load %\"class.std::__cxx11::basic_string\"*, %\"class.std::__cxx11::basic_string\"** %7, align 8, !tbaa !8\n  %9 = ptrtoint %\"class.std::__cxx11::basic_string\"* %6 to i64\n  %10 = ptrtoint %\"class.std::__cxx11::basic_string\"* %8 to i64\n  %11 = sub i64 %9, %10\n  %12 = ashr exact i64 %11, 5\n  %13 = icmp eq i64 %11, 9223372036854775776\n  br i1 %13, label %14, label %15\n\n14:                                               ; preds = %3\n  tail call void @_ZSt20__throw_length_errorPKc(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.1, i64 0, i64 0)) #18\n  unreachable\n\n15:                                               ; preds = %3\n  %16 = icmp eq i64 %11, 0\n  %17 = select i1 %16, i64 1, i64 %12\n  %18 = add nsw i64 %17, %12\n  %19 = icmp ult i64 %18, %12\n  %20 = icmp ugt i64 %18, 288230376151711743\n  %21 = or i1 %19, %20\n  %22 = select i1 %21, i64 288230376151711743, i64 %18\n  %23 = ptrtoint %\"class.std::__cxx11::basic_string\"* %1 to i64\n  %24 = sub i64 %23, %10\n  %25 = ashr exact i64 %24, 5\n  %26 = icmp eq i64 %22, 0\n  br i1 %26, label %31, label %27\n\n27:                                               ; preds = %15\n  %28 = shl nuw nsw i64 %22, 5\n  %29 = tail call noalias nonnull i8* @_Znwm(i64 %28) #19\n  %30 = bitcast i8* %29 to %\"class.std::__cxx11::basic_string\"*\n  br label %31\n\n31:                                               ; preds = %15, %27\n  %32 = phi %\"class.std::__cxx11::basic_string\"* [ %30, %27 ], [ null, %15 ]\n  %33 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %32, i64 %25\n  %34 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %32, i64 %25, i32 2\n  %35 = bitcast %\"class.std::__cxx11::basic_string\"* %33 to %union.anon**\n  store %union.anon* %34, %union.anon** %35, align 8, !tbaa !10\n  %36 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %2, i64 0, i32 0, i32 0\n  %37 = load i8*, i8** %36, align 8, !tbaa !20\n  %38 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %2, i64 0, i32 1\n  %39 = load i64, i64* %38, align 8, !tbaa !12\n  %40 = bitcast i64* %4 to i8*\n  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %40) #16\n  store i64 %39, i64* %4, align 8, !tbaa !21\n  %41 = icmp ugt i64 %39, 15\n  br i1 %41, label %44, label %42\n\n42:                                               ; preds = %31\n  %43 = bitcast %union.anon* %34 to i8*\n  br label %50\n\n44:                                               ; preds = %31\n  %45 = invoke i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %33, i64* nonnull align 8 dereferenceable(8) %4, i64 0)\n          to label %46 unwind label %126\n\n46:                                               ; preds = %44\n  %47 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %33, i64 0, i32 0, i32 0\n  store i8* %45, i8** %47, align 8, !tbaa !20\n  %48 = load i64, i64* %4, align 8, !tbaa !21\n  %49 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %32, i64 %25, i32 2, i32 0\n  store i64 %48, i64* %49, align 8, !tbaa !15\n  br label %50\n\n50:                                               ; preds = %46, %42\n  %51 = phi i8* [ %43, %42 ], [ %45, %46 ]\n  switch i64 %39, label %54 [\n    i64 1, label %52\n    i64 0, label %55\n  ]\n\n52:                                               ; preds = %50\n  %53 = load i8, i8* %37, align 1, !tbaa !15\n  store i8 %53, i8* %51, align 1, !tbaa !15\n  br label %55\n\n54:                                               ; preds = %50\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %51, i8* align 1 %37, i64 %39, i1 false) #16\n  br label %55\n\n55:                                               ; preds = %54, %52, %50\n  %56 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %33, i64 0, i32 0, i32 0\n  %57 = load i64, i64* %4, align 8, !tbaa !21\n  %58 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %32, i64 %25, i32 1\n  store i64 %57, i64* %58, align 8, !tbaa !12\n  %59 = load i8*, i8** %56, align 8, !tbaa !20\n  %60 = getelementptr inbounds i8, i8* %59, i64 %57\n  store i8 0, i8* %60, align 1, !tbaa !15\n  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %40) #16\n  %61 = icmp eq %\"class.std::__cxx11::basic_string\"* %8, %1\n  br i1 %61, label %87, label %62\n\n62:                                               ; preds = %55, %79\n  %63 = phi %\"class.std::__cxx11::basic_string\"* [ %85, %79 ], [ %32, %55 ]\n  %64 = phi %\"class.std::__cxx11::basic_string\"* [ %84, %79 ], [ %8, %55 ]\n  %65 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %63, i64 0, i32 2\n  %66 = bitcast %\"class.std::__cxx11::basic_string\"* %63 to %union.anon**\n  store %union.anon* %65, %union.anon** %66, align 8, !tbaa !10\n  %67 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %64, i64 0, i32 0, i32 0\n  %68 = load i8*, i8** %67, align 8, !tbaa !20\n  %69 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %64, i64 0, i32 2\n  %70 = bitcast %union.anon* %69 to i8*\n  %71 = icmp eq i8* %68, %70\n  br i1 %71, label %72, label %74\n\n72:                                               ; preds = %62\n  %73 = bitcast %union.anon* %65 to i8*\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(16) %73, i8* noundef nonnull align 8 dereferenceable(16) %68, i64 16, i1 false) #16\n  br label %79\n\n74:                                               ; preds = %62\n  %75 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %63, i64 0, i32 0, i32 0\n  store i8* %68, i8** %75, align 8, !tbaa !20\n  %76 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %64, i64 0, i32 2, i32 0\n  %77 = load i64, i64* %76, align 8, !tbaa !15\n  %78 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %63, i64 0, i32 2, i32 0\n  store i64 %77, i64* %78, align 8, !tbaa !15\n  br label %79\n\n79:                                               ; preds = %74, %72\n  %80 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %64, i64 0, i32 1\n  %81 = load i64, i64* %80, align 8, !tbaa !12\n  %82 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %63, i64 0, i32 1\n  store i64 %81, i64* %82, align 8, !tbaa !12\n  %83 = bitcast %\"class.std::__cxx11::basic_string\"* %64 to %union.anon**\n  store %union.anon* %69, %union.anon** %83, align 8, !tbaa !20\n  store i64 0, i64* %80, align 8, !tbaa !12\n  store i8 0, i8* %70, align 8, !tbaa !15\n  %84 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %64, i64 1\n  %85 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %63, i64 1\n  %86 = icmp eq %\"class.std::__cxx11::basic_string\"* %84, %1\n  br i1 %86, label %87, label %62, !llvm.loop !26\n\n87:                                               ; preds = %79, %55\n  %88 = phi %\"class.std::__cxx11::basic_string\"* [ %32, %55 ], [ %85, %79 ]\n  %89 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %88, i64 1\n  %90 = icmp eq %\"class.std::__cxx11::basic_string\"* %6, %1\n  br i1 %90, label %116, label %91\n\n91:                                               ; preds = %87, %108\n  %92 = phi %\"class.std::__cxx11::basic_string\"* [ %114, %108 ], [ %89, %87 ]\n  %93 = phi %\"class.std::__cxx11::basic_string\"* [ %113, %108 ], [ %1, %87 ]\n  %94 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %92, i64 0, i32 2\n  %95 = bitcast %\"class.std::__cxx11::basic_string\"* %92 to %union.anon**\n  store %union.anon* %94, %union.anon** %95, align 8, !tbaa !10\n  %96 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %93, i64 0, i32 0, i32 0\n  %97 = load i8*, i8** %96, align 8, !tbaa !20\n  %98 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %93, i64 0, i32 2\n  %99 = bitcast %union.anon* %98 to i8*\n  %100 = icmp eq i8* %97, %99\n  br i1 %100, label %101, label %103\n\n101:                                              ; preds = %91\n  %102 = bitcast %union.anon* %94 to i8*\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(16) %102, i8* noundef nonnull align 8 dereferenceable(16) %97, i64 16, i1 false) #16\n  br label %108\n\n103:                                              ; preds = %91\n  %104 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %92, i64 0, i32 0, i32 0\n  store i8* %97, i8** %104, align 8, !tbaa !20\n  %105 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %93, i64 0, i32 2, i32 0\n  %106 = load i64, i64* %105, align 8, !tbaa !15\n  %107 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %92, i64 0, i32 2, i32 0\n  store i64 %106, i64* %107, align 8, !tbaa !15\n  br label %108\n\n108:                                              ; preds = %103, %101\n  %109 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %93, i64 0, i32 1\n  %110 = load i64, i64* %109, align 8, !tbaa !12\n  %111 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %92, i64 0, i32 1\n  store i64 %110, i64* %111, align 8, !tbaa !12\n  %112 = bitcast %\"class.std::__cxx11::basic_string\"* %93 to %union.anon**\n  store %union.anon* %98, %union.anon** %112, align 8, !tbaa !20\n  store i64 0, i64* %109, align 8, !tbaa !12\n  store i8 0, i8* %99, align 8, !tbaa !15\n  %113 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %93, i64 1\n  %114 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %92, i64 1\n  %115 = icmp eq %\"class.std::__cxx11::basic_string\"* %113, %6\n  br i1 %115, label %116, label %91, !llvm.loop !26\n\n116:                                              ; preds = %108, %87\n  %117 = phi %\"class.std::__cxx11::basic_string\"* [ %89, %87 ], [ %114, %108 ]\n  %118 = icmp eq %\"class.std::__cxx11::basic_string\"* %8, null\n  br i1 %118, label %121, label %119\n\n119:                                              ; preds = %116\n  %120 = bitcast %\"class.std::__cxx11::basic_string\"* %8 to i8*\n  call void @_ZdlPv(i8* nonnull %120) #16\n  br label %121\n\n121:                                              ; preds = %116, %119\n  %122 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0, i64 0, i32 0, i32 0, i32 0, i32 2\n  store %\"class.std::__cxx11::basic_string\"* %32, %\"class.std::__cxx11::basic_string\"** %7, align 8, !tbaa !8\n  store %\"class.std::__cxx11::basic_string\"* %117, %\"class.std::__cxx11::basic_string\"** %5, align 8, !tbaa !3\n  %123 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %32, i64 %22\n  store %\"class.std::__cxx11::basic_string\"* %123, %\"class.std::__cxx11::basic_string\"** %122, align 8, !tbaa !19\n  ret void\n\n124:                                              ; preds = %126\n  %125 = landingpad { i8*, i32 }\n          cleanup\n  invoke void @__cxa_end_catch()\n          to label %131 unwind label %132\n\n126:                                              ; preds = %44\n  %127 = landingpad { i8*, i32 }\n          catch i8* null\n  %128 = extractvalue { i8*, i32 } %127, 0\n  %129 = call i8* @__cxa_begin_catch(i8* %128) #16\n  %130 = bitcast %\"class.std::__cxx11::basic_string\"* %32 to i8*\n  call void @_ZdlPv(i8* nonnull %130) #16\n  invoke void @__cxa_rethrow() #18\n          to label %135 unwind label %124\n\n131:                                              ; preds = %124\n  resume { i8*, i32 } %125\n\n132:                                              ; preds = %124\n  %133 = landingpad { i8*, i32 }\n          catch i8* null\n  %134 = extractvalue { i8*, i32 } %133, 0\n  call void @__clang_call_terminate(i8* %134) #17\n  unreachable\n\n135:                                              ; preds = %126\n  unreachable\n}\n\ndeclare dso_local i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32), i64* nonnull align 8 dereferenceable(8), i64) local_unnamed_addr #6\n\n; Function Attrs: argmemonly mustprogress nofree nounwind willreturn\ndeclare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #7\n\ndeclare dso_local void @__cxa_rethrow() local_unnamed_addr\n\ndeclare dso_local void @__cxa_end_catch() local_unnamed_addr\n\n; Function Attrs: noreturn\ndeclare dso_local void @_ZSt20__throw_length_errorPKc(i8*) local_unnamed_addr #8\n\n; Function Attrs: nobuiltin allocsize(0)\ndeclare dso_local nonnull i8* @_Znwm(i64) local_unnamed_addr #9\n\n; Function Attrs: uwtable\ndefine linkonce_odr dso_local void @_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS7_SaIS7_EEEElNS0_5__ops15_Iter_less_iterEEvT_SF_T0_T1_(%\"class.std::__cxx11::basic_string\"* %0, %\"class.std::__cxx11::basic_string\"* %1, i64 %2) local_unnamed_addr #0 comdat personality i32 (...)* @__gxx_personality_v0 {\n  %4 = alloca %\"struct.__gnu_cxx::__ops::_Iter_less_iter\", align 1\n  %5 = alloca %\"struct.__gnu_cxx::__ops::_Iter_less_iter\", align 1\n  %6 = ptrtoint %\"class.std::__cxx11::basic_string\"* %0 to i64\n  %7 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 1\n  %8 = ptrtoint %\"class.std::__cxx11::basic_string\"* %1 to i64\n  %9 = sub i64 %8, %6\n  %10 = icmp sgt i64 %9, 512\n  br i1 %10, label %11, label %35\n\n11:                                               ; preds = %3, %26\n  %12 = phi i64 [ %33, %26 ], [ %9, %3 ]\n  %13 = phi i64 [ %28, %26 ], [ %2, %3 ]\n  %14 = phi %\"class.std::__cxx11::basic_string\"* [ %31, %26 ], [ %1, %3 ]\n  %15 = icmp eq i64 %13, 0\n  br i1 %15, label %16, label %26\n\n16:                                               ; preds = %11\n  %17 = getelementptr inbounds %\"struct.__gnu_cxx::__ops::_Iter_less_iter\", %\"struct.__gnu_cxx::__ops::_Iter_less_iter\"* %5, i64 0, i32 0\n  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %17)\n  %18 = getelementptr inbounds %\"struct.__gnu_cxx::__ops::_Iter_less_iter\", %\"struct.__gnu_cxx::__ops::_Iter_less_iter\"* %4, i64 0, i32 0\n  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %18)\n  call void @_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS7_SaIS7_EEEENS0_5__ops15_Iter_less_iterEEvT_SF_RT0_(%\"class.std::__cxx11::basic_string\"* %0, %\"class.std::__cxx11::basic_string\"* %14, %\"struct.__gnu_cxx::__ops::_Iter_less_iter\"* nonnull align 1 dereferenceable(1) %4)\n  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %18)\n  br label %19\n\n19:                                               ; preds = %16, %19\n  %20 = phi %\"class.std::__cxx11::basic_string\"* [ %21, %19 ], [ %14, %16 ]\n  %21 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %20, i64 -1\n  call void @_ZSt10__pop_heapIN9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS7_SaIS7_EEEENS0_5__ops15_Iter_less_iterEEvT_SF_SF_RT0_(%\"class.std::__cxx11::basic_string\"* %0, %\"class.std::__cxx11::basic_string\"* nonnull %21, %\"class.std::__cxx11::basic_string\"* nonnull %21, %\"struct.__gnu_cxx::__ops::_Iter_less_iter\"* nonnull align 1 dereferenceable(1) %5)\n  %22 = ptrtoint %\"class.std::__cxx11::basic_string\"* %21 to i64\n  %23 = sub i64 %22, %6\n  %24 = icmp sgt i64 %23, 32\n  br i1 %24, label %19, label %25, !llvm.loop !27\n\n25:                                               ; preds = %19\n  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %17)\n  br label %35\n\n26:                                               ; preds = %11\n  %27 = lshr i64 %12, 6\n  %28 = add nsw i64 %13, -1\n  %29 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 %27\n  %30 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %14, i64 -1\n  tail call void @_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS7_SaIS7_EEEENS0_5__ops15_Iter_less_iterEEvT_SF_SF_SF_T0_(%\"class.std::__cxx11::basic_string\"* %0, %\"class.std::__cxx11::basic_string\"* nonnull %7, %\"class.std::__cxx11::basic_string\"* %29, %\"class.std::__cxx11::basic_string\"* nonnull %30)\n  %31 = tail call %\"class.std::__cxx11::basic_string\"* @_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS7_SaIS7_EEEENS0_5__ops15_Iter_less_iterEET_SF_SF_SF_T0_(%\"class.std::__cxx11::basic_string\"* nonnull %7, %\"class.std::__cxx11::basic_string\"* %14, %\"class.std::__cxx11::basic_string\"* %0)\n  tail call void @_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS7_SaIS7_EEEElNS0_5__ops15_Iter_less_iterEEvT_SF_T0_T1_(%\"class.std::__cxx11::basic_string\"* %31, %\"class.std::__cxx11::basic_string\"* %14, i64 %28)\n  %32 = ptrtoint %\"class.std::__cxx11::basic_string\"* %31 to i64\n  %33 = sub i64 %32, %6\n  %34 = icmp sgt i64 %33, 512\n  br i1 %34, label %11, label %35, !llvm.loop !28\n\n35:                                               ; preds = %26, %3, %25\n  ret void\n}\n\n; Function Attrs: uwtable\ndefine linkonce_odr dso_local void @_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS7_SaIS7_EEEENS0_5__ops15_Iter_less_iterEEvT_SF_RT0_(%\"class.std::__cxx11::basic_string\"* %0, %\"class.std::__cxx11::basic_string\"* %1, %\"struct.__gnu_cxx::__ops::_Iter_less_iter\"* nonnull align 1 dereferenceable(1) %2) local_unnamed_addr #0 comdat personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {\n  %4 = alloca %\"class.std::__cxx11::basic_string\", align 8\n  %5 = alloca %\"class.std::__cxx11::basic_string\", align 8\n  %6 = ptrtoint %\"class.std::__cxx11::basic_string\"* %1 to i64\n  %7 = ptrtoint %\"class.std::__cxx11::basic_string\"* %0 to i64\n  %8 = sub i64 %6, %7\n  %9 = ashr exact i64 %8, 5\n  %10 = icmp slt i64 %8, 64\n  br i1 %10, label %70, label %11\n\n11:                                               ; preds = %3\n  %12 = add nsw i64 %9, -2\n  %13 = lshr i64 %12, 1\n  %14 = bitcast %\"class.std::__cxx11::basic_string\"* %4 to i8*\n  %15 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %4, i64 0, i32 2\n  %16 = bitcast %\"class.std::__cxx11::basic_string\"* %4 to %union.anon**\n  %17 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %4, i64 0, i32 0, i32 0\n  %18 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %4, i64 0, i32 2, i32 0\n  %19 = bitcast %union.anon* %15 to i8*\n  %20 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %4, i64 0, i32 1\n  %21 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %5, i64 0, i32 2\n  %22 = bitcast %\"class.std::__cxx11::basic_string\"* %5 to %union.anon**\n  %23 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %5, i64 0, i32 0, i32 0\n  %24 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %5, i64 0, i32 2, i32 0\n  %25 = bitcast %union.anon* %21 to i8*\n  %26 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %5, i64 0, i32 1\n  br label %27\n\n27:                                               ; preds = %59, %11\n  %28 = phi i64 [ %13, %11 ], [ %55, %59 ]\n  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %14) #16\n  %29 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 %28\n  store %union.anon* %15, %union.anon** %16, align 8, !tbaa !10\n  %30 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %29, i64 0, i32 0, i32 0\n  %31 = load i8*, i8** %30, align 8, !tbaa !20\n  %32 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 %28, i32 2\n  %33 = bitcast %union.anon* %32 to i8*\n  %34 = icmp eq i8* %31, %33\n  br i1 %34, label %35, label %36\n\n35:                                               ; preds = %27\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(16) %19, i8* noundef nonnull align 8 dereferenceable(16) %31, i64 16, i1 false) #16\n  br label %39\n\n36:                                               ; preds = %27\n  store i8* %31, i8** %17, align 8, !tbaa !20\n  %37 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 %28, i32 2, i32 0\n  %38 = load i64, i64* %37, align 8, !tbaa !15\n  store i64 %38, i64* %18, align 8, !tbaa !15\n  br label %39\n\n39:                                               ; preds = %35, %36\n  %40 = phi i8* [ %19, %35 ], [ %31, %36 ]\n  %41 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 %28, i32 1\n  %42 = load i64, i64* %41, align 8, !tbaa !12\n  %43 = bitcast %\"class.std::__cxx11::basic_string\"* %29 to %union.anon**\n  store %union.anon* %32, %union.anon** %43, align 8, !tbaa !20\n  store i64 0, i64* %41, align 8, !tbaa !12\n  store i8 0, i8* %33, align 8, !tbaa !15\n  store %union.anon* %21, %union.anon** %22, align 8, !tbaa !10\n  %44 = icmp eq i8* %40, %19\n  br i1 %44, label %45, label %46\n\n45:                                               ; preds = %39\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(16) %25, i8* noundef nonnull align 8 dereferenceable(16) %19, i64 16, i1 false) #16\n  br label %48\n\n46:                                               ; preds = %39\n  store i8* %40, i8** %23, align 8, !tbaa !20\n  %47 = load i64, i64* %18, align 8, !tbaa !15\n  store i64 %47, i64* %24, align 8, !tbaa !15\n  br label %48\n\n48:                                               ; preds = %45, %46\n  store i64 %42, i64* %26, align 8, !tbaa !12\n  store %union.anon* %15, %union.anon** %16, align 8, !tbaa !20\n  store i64 0, i64* %20, align 8, !tbaa !12\n  store i8 0, i8* %19, align 8, !tbaa !15\n  invoke void @_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS7_SaIS7_EEEElS7_NS0_5__ops15_Iter_less_iterEEvT_T0_SG_T1_T2_(%\"class.std::__cxx11::basic_string\"* nonnull %0, i64 %28, i64 %9, %\"class.std::__cxx11::basic_string\"* nonnull %5)\n          to label %49 unwind label %60\n\n49:                                               ; preds = %48\n  %50 = load i8*, i8** %23, align 8, !tbaa !20\n  %51 = icmp eq i8* %50, %25\n  br i1 %51, label %53, label %52\n\n52:                                               ; preds = %49\n  call void @_ZdlPv(i8* %50) #16\n  br label %53\n\n53:                                               ; preds = %49, %52\n  %54 = icmp eq i64 %28, 0\n  %55 = add nsw i64 %28, -1\n  %56 = load i8*, i8** %17, align 8, !tbaa !20\n  %57 = icmp eq i8* %56, %19\n  br i1 %57, label %59, label %58\n\n58:                                               ; preds = %53\n  call void @_ZdlPv(i8* %56) #16\n  br label %59\n\n59:                                               ; preds = %53, %58\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %14) #16\n  br i1 %54, label %70, label %27, !llvm.loop !29\n\n60:                                               ; preds = %48\n  %61 = landingpad { i8*, i32 }\n          cleanup\n  %62 = load i8*, i8** %23, align 8, !tbaa !20\n  %63 = icmp eq i8* %62, %25\n  br i1 %63, label %65, label %64\n\n64:                                               ; preds = %60\n  call void @_ZdlPv(i8* %62) #16\n  br label %65\n\n65:                                               ; preds = %60, %64\n  %66 = load i8*, i8** %17, align 8, !tbaa !20\n  %67 = icmp eq i8* %66, %19\n  br i1 %67, label %69, label %68\n\n68:                                               ; preds = %65\n  call void @_ZdlPv(i8* %66) #16\n  br label %69\n\n69:                                               ; preds = %65, %68\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %14) #16\n  resume { i8*, i32 } %61\n\n70:                                               ; preds = %59, %3\n  ret void\n}\n\n; Function Attrs: inlinehint uwtable\ndefine linkonce_odr dso_local void @_ZSt10__pop_heapIN9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS7_SaIS7_EEEENS0_5__ops15_Iter_less_iterEEvT_SF_SF_RT0_(%\"class.std::__cxx11::basic_string\"* %0, %\"class.std::__cxx11::basic_string\"* %1, %\"class.std::__cxx11::basic_string\"* %2, %\"struct.__gnu_cxx::__ops::_Iter_less_iter\"* nonnull align 1 dereferenceable(1) %3) local_unnamed_addr #10 comdat personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {\n  %5 = alloca %\"class.std::__cxx11::basic_string\", align 8\n  %6 = alloca %\"class.std::__cxx11::basic_string\", align 8\n  %7 = bitcast %\"class.std::__cxx11::basic_string\"* %5 to i8*\n  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %7) #16\n  %8 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %5, i64 0, i32 2\n  %9 = bitcast %\"class.std::__cxx11::basic_string\"* %5 to %union.anon**\n  store %union.anon* %8, %union.anon** %9, align 8, !tbaa !10\n  %10 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %2, i64 0, i32 0, i32 0\n  %11 = load i8*, i8** %10, align 8, !tbaa !20\n  %12 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %2, i64 0, i32 2\n  %13 = bitcast %union.anon* %12 to i8*\n  %14 = icmp eq i8* %11, %13\n  br i1 %14, label %15, label %17\n\n15:                                               ; preds = %4\n  %16 = bitcast %union.anon* %8 to i8*\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(16) %16, i8* noundef nonnull align 8 dereferenceable(16) %11, i64 16, i1 false) #16\n  br label %22\n\n17:                                               ; preds = %4\n  %18 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %5, i64 0, i32 0, i32 0\n  store i8* %11, i8** %18, align 8, !tbaa !20\n  %19 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %2, i64 0, i32 2, i32 0\n  %20 = load i64, i64* %19, align 8, !tbaa !15\n  %21 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %5, i64 0, i32 2, i32 0\n  store i64 %20, i64* %21, align 8, !tbaa !15\n  br label %22\n\n22:                                               ; preds = %15, %17\n  %23 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %2, i64 0, i32 1\n  %24 = load i64, i64* %23, align 8, !tbaa !12\n  %25 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %5, i64 0, i32 1\n  store i64 %24, i64* %25, align 8, !tbaa !12\n  %26 = bitcast %\"class.std::__cxx11::basic_string\"* %2 to %union.anon**\n  store %union.anon* %12, %union.anon** %26, align 8, !tbaa !20\n  store i64 0, i64* %23, align 8, !tbaa !12\n  store i8 0, i8* %13, align 8, !tbaa !15\n  %27 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 0, i32 0\n  %28 = load i8*, i8** %27, align 8, !tbaa !20\n  %29 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 2\n  %30 = bitcast %union.anon* %29 to i8*\n  %31 = icmp eq i8* %28, %30\n  br i1 %31, label %32, label %42\n\n32:                                               ; preds = %22\n  %33 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 1\n  %34 = load i64, i64* %33, align 8, !tbaa !12\n  switch i64 %34, label %37 [\n    i64 0, label %38\n    i64 1, label %35\n  ]\n\n35:                                               ; preds = %32\n  %36 = load i8, i8* %28, align 1, !tbaa !15\n  store i8 %36, i8* %13, align 1, !tbaa !15\n  br label %38\n\n37:                                               ; preds = %32\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %13, i8* align 1 %28, i64 %34, i1 false) #16\n  br label %38\n\n38:                                               ; preds = %32, %37, %35\n  %39 = load i64, i64* %33, align 8, !tbaa !12\n  store i64 %39, i64* %23, align 8, !tbaa !12\n  %40 = getelementptr inbounds i8, i8* %13, i64 %39\n  store i8 0, i8* %40, align 1, !tbaa !15\n  %41 = load i8*, i8** %27, align 8, !tbaa !20\n  br label %49\n\n42:                                               ; preds = %22\n  %43 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %2, i64 0, i32 2, i32 0\n  store i8* %28, i8** %10, align 8, !tbaa !20\n  %44 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 1\n  %45 = load i64, i64* %44, align 8, !tbaa !12\n  store i64 %45, i64* %23, align 8, !tbaa !12\n  %46 = getelementptr %union.anon, %union.anon* %29, i64 0, i32 0\n  %47 = load i64, i64* %46, align 8, !tbaa !15\n  store i64 %47, i64* %43, align 8, !tbaa !15\n  %48 = bitcast %\"class.std::__cxx11::basic_string\"* %0 to %union.anon**\n  store %union.anon* %29, %union.anon** %48, align 8, !tbaa !20\n  br label %49\n\n49:                                               ; preds = %38, %42\n  %50 = phi i8* [ %41, %38 ], [ %30, %42 ]\n  %51 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 1\n  store i64 0, i64* %51, align 8, !tbaa !12\n  store i8 0, i8* %50, align 1, !tbaa !15\n  %52 = ptrtoint %\"class.std::__cxx11::basic_string\"* %1 to i64\n  %53 = ptrtoint %\"class.std::__cxx11::basic_string\"* %0 to i64\n  %54 = sub i64 %52, %53\n  %55 = ashr exact i64 %54, 5\n  %56 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %6, i64 0, i32 2\n  %57 = bitcast %\"class.std::__cxx11::basic_string\"* %6 to %union.anon**\n  store %union.anon* %56, %union.anon** %57, align 8, !tbaa !10\n  %58 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %5, i64 0, i32 0, i32 0\n  %59 = load i8*, i8** %58, align 8, !tbaa !20\n  %60 = bitcast %union.anon* %8 to i8*\n  %61 = icmp eq i8* %59, %60\n  br i1 %61, label %62, label %64\n\n62:                                               ; preds = %49\n  %63 = bitcast %union.anon* %56 to i8*\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(16) %63, i8* noundef nonnull align 8 dereferenceable(16) %60, i64 16, i1 false) #16\n  br label %69\n\n64:                                               ; preds = %49\n  %65 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %6, i64 0, i32 0, i32 0\n  store i8* %59, i8** %65, align 8, !tbaa !20\n  %66 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %5, i64 0, i32 2, i32 0\n  %67 = load i64, i64* %66, align 8, !tbaa !15\n  %68 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %6, i64 0, i32 2, i32 0\n  store i64 %67, i64* %68, align 8, !tbaa !15\n  br label %69\n\n69:                                               ; preds = %62, %64\n  %70 = load i64, i64* %25, align 8, !tbaa !12\n  %71 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %6, i64 0, i32 1\n  store i64 %70, i64* %71, align 8, !tbaa !12\n  store %union.anon* %8, %union.anon** %9, align 8, !tbaa !20\n  store i64 0, i64* %25, align 8, !tbaa !12\n  store i8 0, i8* %60, align 8, !tbaa !15\n  invoke void @_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS7_SaIS7_EEEElS7_NS0_5__ops15_Iter_less_iterEEvT_T0_SG_T1_T2_(%\"class.std::__cxx11::basic_string\"* nonnull %0, i64 0, i64 %55, %\"class.std::__cxx11::basic_string\"* nonnull %6)\n          to label %72 unwind label %83\n\n72:                                               ; preds = %69\n  %73 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %6, i64 0, i32 0, i32 0\n  %74 = load i8*, i8** %73, align 8, !tbaa !20\n  %75 = bitcast %union.anon* %56 to i8*\n  %76 = icmp eq i8* %74, %75\n  br i1 %76, label %78, label %77\n\n77:                                               ; preds = %72\n  call void @_ZdlPv(i8* %74) #16\n  br label %78\n\n78:                                               ; preds = %72, %77\n  %79 = load i8*, i8** %58, align 8, !tbaa !20\n  %80 = icmp eq i8* %79, %60\n  br i1 %80, label %82, label %81\n\n81:                                               ; preds = %78\n  call void @_ZdlPv(i8* %79) #16\n  br label %82\n\n82:                                               ; preds = %78, %81\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %7) #16\n  ret void\n\n83:                                               ; preds = %69\n  %84 = landingpad { i8*, i32 }\n          cleanup\n  %85 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %6, i64 0, i32 0, i32 0\n  %86 = load i8*, i8** %85, align 8, !tbaa !20\n  %87 = bitcast %union.anon* %56 to i8*\n  %88 = icmp eq i8* %86, %87\n  br i1 %88, label %90, label %89\n\n89:                                               ; preds = %83\n  call void @_ZdlPv(i8* %86) #16\n  br label %90\n\n90:                                               ; preds = %83, %89\n  %91 = load i8*, i8** %58, align 8, !tbaa !20\n  %92 = icmp eq i8* %91, %60\n  br i1 %92, label %94, label %93\n\n93:                                               ; preds = %90\n  call void @_ZdlPv(i8* %91) #16\n  br label %94\n\n94:                                               ; preds = %90, %93\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %7) #16\n  resume { i8*, i32 } %84\n}\n\n; Function Attrs: uwtable\ndefine linkonce_odr dso_local void @_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS7_SaIS7_EEEElS7_NS0_5__ops15_Iter_less_iterEEvT_T0_SG_T1_T2_(%\"class.std::__cxx11::basic_string\"* %0, i64 %1, i64 %2, %\"class.std::__cxx11::basic_string\"* %3) local_unnamed_addr #0 comdat personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {\n  %5 = alloca %\"struct.__gnu_cxx::__ops::_Iter_less_val\", align 1\n  %6 = alloca %\"class.std::__cxx11::basic_string\", align 8\n  %7 = add nsw i64 %2, -1\n  %8 = sdiv i64 %7, 2\n  %9 = icmp sgt i64 %8, %1\n  br i1 %9, label %10, label %85\n\n10:                                               ; preds = %4, %81\n  %11 = phi i64 [ %39, %81 ], [ %1, %4 ]\n  %12 = shl i64 %11, 1\n  %13 = add i64 %12, 2\n  %14 = or i64 %12, 1\n  %15 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 %13, i32 1\n  %16 = load i64, i64* %15, align 8, !tbaa !12\n  %17 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 %14, i32 1\n  %18 = load i64, i64* %17, align 8, !tbaa !12\n  %19 = icmp ugt i64 %16, %18\n  %20 = select i1 %19, i64 %18, i64 %16\n  %21 = icmp eq i64 %20, 0\n  br i1 %21, label %29, label %22\n\n22:                                               ; preds = %10\n  %23 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 %14, i32 0, i32 0\n  %24 = load i8*, i8** %23, align 8, !tbaa !20\n  %25 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 %13, i32 0, i32 0\n  %26 = load i8*, i8** %25, align 8, !tbaa !20\n  %27 = tail call i32 @memcmp(i8* %26, i8* %24, i64 %20) #16\n  %28 = icmp eq i32 %27, 0\n  br i1 %28, label %29, label %36\n\n29:                                               ; preds = %22, %10\n  %30 = sub i64 %16, %18\n  %31 = icmp sgt i64 %30, -2147483648\n  %32 = select i1 %31, i64 %30, i64 -2147483648\n  %33 = icmp slt i64 %32, 2147483647\n  %34 = select i1 %33, i64 %32, i64 2147483647\n  %35 = trunc i64 %34 to i32\n  br label %36\n\n36:                                               ; preds = %22, %29\n  %37 = phi i32 [ %27, %22 ], [ %35, %29 ]\n  %38 = icmp slt i32 %37, 0\n  %39 = select i1 %38, i64 %14, i64 %13\n  %40 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 %39\n  %41 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 %11, i32 0, i32 0\n  %42 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %40, i64 0, i32 0, i32 0\n  %43 = load i8*, i8** %42, align 8, !tbaa !20\n  %44 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 %39, i32 2\n  %45 = bitcast %union.anon* %44 to i8*\n  %46 = icmp eq i8* %43, %45\n  br i1 %46, label %47, label %63\n\n47:                                               ; preds = %36\n  %48 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 %39, i32 1\n  %49 = load i64, i64* %48, align 8, !tbaa !12\n  %50 = icmp eq i64 %49, 0\n  br i1 %50, label %57, label %51\n\n51:                                               ; preds = %47\n  %52 = load i8*, i8** %41, align 8, !tbaa !20\n  %53 = icmp eq i64 %49, 1\n  br i1 %53, label %54, label %56\n\n54:                                               ; preds = %51\n  %55 = load i8, i8* %43, align 1, !tbaa !15\n  store i8 %55, i8* %52, align 1, !tbaa !15\n  br label %57\n\n56:                                               ; preds = %51\n  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %52, i8* align 1 %43, i64 %49, i1 false) #16\n  br label %57\n\n57:                                               ; preds = %56, %54, %47\n  %58 = load i64, i64* %48, align 8, !tbaa !12\n  %59 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 %11, i32 1\n  store i64 %58, i64* %59, align 8, !tbaa !12\n  %60 = load i8*, i8** %41, align 8, !tbaa !20\n  %61 = getelementptr inbounds i8, i8* %60, i64 %58\n  store i8 0, i8* %61, align 1, !tbaa !15\n  %62 = load i8*, i8** %42, align 8, !tbaa !20\n  br label %81\n\n63:                                               ; preds = %36\n  %64 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 %11, i32 2\n  %65 = bitcast %union.anon* %64 to i8*\n  %66 = load i8*, i8** %41, align 8, !tbaa !20\n  %67 = icmp eq i8* %66, %65\n  %68 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 %11, i32 2, i32 0\n  %69 = load i64, i64* %68, align 8\n  store i8* %43, i8** %41, align 8, !tbaa !20\n  %70 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 %39, i32 1\n  %71 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 %11, i32 1\n  %72 = bitcast i64* %70 to <2 x i64>*\n  %73 = load <2 x i64>, <2 x i64>* %72, align 8, !tbaa !15\n  %74 = bitcast i64* %71 to <2 x i64>*\n  store <2 x i64> %73, <2 x i64>* %74, align 8, !tbaa !15\n  %75 = icmp eq i8* %66, null\n  %76 = or i1 %67, %75\n  br i1 %76, label %79, label %77\n\n77:                                               ; preds = %63\n  store i8* %66, i8** %42, align 8, !tbaa !20\n  %78 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 %39, i32 2, i32 0\n  store i64 %69, i64* %78, align 8, !tbaa !15\n  br label %81\n\n79:                                               ; preds = %63\n  %80 = bitcast %\"class.std::__cxx11::basic_string\"* %40 to %union.anon**\n  store %union.anon* %44, %union.anon** %80, align 8, !tbaa !20\n  br label %81\n\n81:                                               ; preds = %57, %77, %79\n  %82 = phi i8* [ %62, %57 ], [ %66, %77 ], [ %45, %79 ]\n  %83 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 %39, i32 1\n  store i64 0, i64* %83, align 8, !tbaa !12\n  store i8 0, i8* %82, align 1, !tbaa !15\n  %84 = icmp slt i64 %39, %8\n  br i1 %84, label %10, label %85, !llvm.loop !30\n\n85:                                               ; preds = %81, %4\n  %86 = phi i64 [ %1, %4 ], [ %39, %81 ]\n  %87 = and i64 %2, 1\n  %88 = icmp eq i64 %87, 0\n  br i1 %88, label %89, label %140\n\n89:                                               ; preds = %85\n  %90 = add nsw i64 %2, -2\n  %91 = sdiv i64 %90, 2\n  %92 = icmp eq i64 %86, %91\n  br i1 %92, label %93, label %140\n\n93:                                               ; preds = %89\n  %94 = shl i64 %86, 1\n  %95 = or i64 %94, 1\n  %96 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 %95\n  %97 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 %86, i32 0, i32 0\n  %98 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %96, i64 0, i32 0, i32 0\n  %99 = load i8*, i8** %98, align 8, !tbaa !20\n  %100 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 %95, i32 2\n  %101 = bitcast %union.anon* %100 to i8*\n  %102 = icmp eq i8* %99, %101\n  br i1 %102, label %103, label %119\n\n103:                                              ; preds = %93\n  %104 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 %95, i32 1\n  %105 = load i64, i64* %104, align 8, !tbaa !12\n  %106 = icmp eq i64 %105, 0\n  br i1 %106, label %113, label %107\n\n107:                                              ; preds = %103\n  %108 = load i8*, i8** %97, align 8, !tbaa !20\n  %109 = icmp eq i64 %105, 1\n  br i1 %109, label %110, label %112\n\n110:                                              ; preds = %107\n  %111 = load i8, i8* %99, align 1, !tbaa !15\n  store i8 %111, i8* %108, align 1, !tbaa !15\n  br label %113\n\n112:                                              ; preds = %107\n  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %108, i8* align 1 %99, i64 %105, i1 false) #16\n  br label %113\n\n113:                                              ; preds = %112, %110, %103\n  %114 = load i64, i64* %104, align 8, !tbaa !12\n  %115 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 %86, i32 1\n  store i64 %114, i64* %115, align 8, !tbaa !12\n  %116 = load i8*, i8** %97, align 8, !tbaa !20\n  %117 = getelementptr inbounds i8, i8* %116, i64 %114\n  store i8 0, i8* %117, align 1, !tbaa !15\n  %118 = load i8*, i8** %98, align 8, !tbaa !20\n  br label %137\n\n119:                                              ; preds = %93\n  %120 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 %86, i32 2\n  %121 = bitcast %union.anon* %120 to i8*\n  %122 = load i8*, i8** %97, align 8, !tbaa !20\n  %123 = icmp eq i8* %122, %121\n  %124 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 %86, i32 2, i32 0\n  %125 = load i64, i64* %124, align 8\n  store i8* %99, i8** %97, align 8, !tbaa !20\n  %126 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 %95, i32 1\n  %127 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 %86, i32 1\n  %128 = bitcast i64* %126 to <2 x i64>*\n  %129 = load <2 x i64>, <2 x i64>* %128, align 8, !tbaa !15\n  %130 = bitcast i64* %127 to <2 x i64>*\n  store <2 x i64> %129, <2 x i64>* %130, align 8, !tbaa !15\n  %131 = icmp eq i8* %122, null\n  %132 = or i1 %123, %131\n  br i1 %132, label %135, label %133\n\n133:                                              ; preds = %119\n  store i8* %122, i8** %98, align 8, !tbaa !20\n  %134 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 %95, i32 2, i32 0\n  store i64 %125, i64* %134, align 8, !tbaa !15\n  br label %137\n\n135:                                              ; preds = %119\n  %136 = bitcast %\"class.std::__cxx11::basic_string\"* %96 to %union.anon**\n  store %union.anon* %100, %union.anon** %136, align 8, !tbaa !20\n  br label %137\n\n137:                                              ; preds = %113, %133, %135\n  %138 = phi i8* [ %118, %113 ], [ %122, %133 ], [ %101, %135 ]\n  %139 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 %95, i32 1\n  store i64 0, i64* %139, align 8, !tbaa !12\n  store i8 0, i8* %138, align 1, !tbaa !15\n  br label %140\n\n140:                                              ; preds = %137, %89, %85\n  %141 = phi i64 [ %95, %137 ], [ %86, %89 ], [ %86, %85 ]\n  %142 = getelementptr inbounds %\"struct.__gnu_cxx::__ops::_Iter_less_val\", %\"struct.__gnu_cxx::__ops::_Iter_less_val\"* %5, i64 0, i32 0\n  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %142) #16\n  %143 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %6, i64 0, i32 2\n  %144 = bitcast %\"class.std::__cxx11::basic_string\"* %6 to %union.anon**\n  store %union.anon* %143, %union.anon** %144, align 8, !tbaa !10\n  %145 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %3, i64 0, i32 0, i32 0\n  %146 = load i8*, i8** %145, align 8, !tbaa !20\n  %147 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %3, i64 0, i32 2\n  %148 = bitcast %union.anon* %147 to i8*\n  %149 = icmp eq i8* %146, %148\n  br i1 %149, label %150, label %152\n\n150:                                              ; preds = %140\n  %151 = bitcast %union.anon* %143 to i8*\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(16) %151, i8* noundef nonnull align 8 dereferenceable(16) %146, i64 16, i1 false) #16\n  br label %157\n\n152:                                              ; preds = %140\n  %153 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %6, i64 0, i32 0, i32 0\n  store i8* %146, i8** %153, align 8, !tbaa !20\n  %154 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %3, i64 0, i32 2, i32 0\n  %155 = load i64, i64* %154, align 8, !tbaa !15\n  %156 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %6, i64 0, i32 2, i32 0\n  store i64 %155, i64* %156, align 8, !tbaa !15\n  br label %157\n\n157:                                              ; preds = %150, %152\n  %158 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %3, i64 0, i32 1\n  %159 = load i64, i64* %158, align 8, !tbaa !12\n  %160 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %6, i64 0, i32 1\n  store i64 %159, i64* %160, align 8, !tbaa !12\n  %161 = bitcast %\"class.std::__cxx11::basic_string\"* %3 to %union.anon**\n  store %union.anon* %147, %union.anon** %161, align 8, !tbaa !20\n  store i64 0, i64* %158, align 8, !tbaa !12\n  store i8 0, i8* %148, align 8, !tbaa !15\n  invoke void @_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS7_SaIS7_EEEElS7_NS0_5__ops14_Iter_less_valEEvT_T0_SG_T1_RT2_(%\"class.std::__cxx11::basic_string\"* %0, i64 %141, i64 %1, %\"class.std::__cxx11::basic_string\"* nonnull %6, %\"struct.__gnu_cxx::__ops::_Iter_less_val\"* nonnull align 1 dereferenceable(1) %5)\n          to label %162 unwind label %169\n\n162:                                              ; preds = %157\n  %163 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %6, i64 0, i32 0, i32 0\n  %164 = load i8*, i8** %163, align 8, !tbaa !20\n  %165 = bitcast %union.anon* %143 to i8*\n  %166 = icmp eq i8* %164, %165\n  br i1 %166, label %168, label %167\n\n167:                                              ; preds = %162\n  call void @_ZdlPv(i8* %164) #16\n  br label %168\n\n168:                                              ; preds = %162, %167\n  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %142) #16\n  ret void\n\n169:                                              ; preds = %157\n  %170 = landingpad { i8*, i32 }\n          cleanup\n  %171 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %6, i64 0, i32 0, i32 0\n  %172 = load i8*, i8** %171, align 8, !tbaa !20\n  %173 = bitcast %union.anon* %143 to i8*\n  %174 = icmp eq i8* %172, %173\n  br i1 %174, label %176, label %175\n\n175:                                              ; preds = %169\n  call void @_ZdlPv(i8* %172) #16\n  br label %176\n\n176:                                              ; preds = %169, %175\n  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %142) #16\n  resume { i8*, i32 } %170\n}\n\n; Function Attrs: uwtable\ndefine linkonce_odr dso_local void @_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS7_SaIS7_EEEElS7_NS0_5__ops14_Iter_less_valEEvT_T0_SG_T1_RT2_(%\"class.std::__cxx11::basic_string\"* %0, i64 %1, i64 %2, %\"class.std::__cxx11::basic_string\"* %3, %\"struct.__gnu_cxx::__ops::_Iter_less_val\"* nonnull align 1 dereferenceable(1) %4) local_unnamed_addr #0 comdat personality i32 (...)* @__gxx_personality_v0 {\n  %6 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %3, i64 0, i32 1\n  %7 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %3, i64 0, i32 0, i32 0\n  %8 = icmp sgt i64 %1, %2\n  br i1 %8, label %9, label %76\n\n9:                                                ; preds = %5, %73\n  %10 = phi i64 [ %12, %73 ], [ %1, %5 ]\n  %11 = add nsw i64 %10, -1\n  %12 = sdiv i64 %11, 2\n  %13 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 %12\n  %14 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 %12, i32 1\n  %15 = load i64, i64* %14, align 8, !tbaa !12\n  %16 = load i64, i64* %6, align 8, !tbaa !12\n  %17 = icmp ugt i64 %15, %16\n  %18 = select i1 %17, i64 %16, i64 %15\n  %19 = icmp eq i64 %18, 0\n  br i1 %19, label %26, label %20\n\n20:                                               ; preds = %9\n  %21 = load i8*, i8** %7, align 8, !tbaa !20\n  %22 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %13, i64 0, i32 0, i32 0\n  %23 = load i8*, i8** %22, align 8, !tbaa !20\n  %24 = tail call i32 @memcmp(i8* %23, i8* %21, i64 %18) #16\n  %25 = icmp eq i32 %24, 0\n  br i1 %25, label %26, label %33\n\n26:                                               ; preds = %20, %9\n  %27 = sub i64 %15, %16\n  %28 = icmp sgt i64 %27, -2147483648\n  %29 = select i1 %28, i64 %27, i64 -2147483648\n  %30 = icmp slt i64 %29, 2147483647\n  %31 = select i1 %30, i64 %29, i64 2147483647\n  %32 = trunc i64 %31 to i32\n  br label %33\n\n33:                                               ; preds = %20, %26\n  %34 = phi i32 [ %24, %20 ], [ %32, %26 ]\n  %35 = icmp slt i32 %34, 0\n  br i1 %35, label %36, label %76\n\n36:                                               ; preds = %33\n  %37 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 %10, i32 0, i32 0\n  %38 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %13, i64 0, i32 0, i32 0\n  %39 = load i8*, i8** %38, align 8, !tbaa !20\n  %40 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 %12, i32 2\n  %41 = bitcast %union.anon* %40 to i8*\n  %42 = icmp eq i8* %39, %41\n  br i1 %42, label %43, label %57\n\n43:                                               ; preds = %36\n  %44 = icmp eq i64 %15, 0\n  br i1 %44, label %51, label %45\n\n45:                                               ; preds = %43\n  %46 = load i8*, i8** %37, align 8, !tbaa !20\n  %47 = icmp eq i64 %15, 1\n  br i1 %47, label %48, label %50\n\n48:                                               ; preds = %45\n  %49 = load i8, i8* %39, align 1, !tbaa !15\n  store i8 %49, i8* %46, align 1, !tbaa !15\n  br label %51\n\n50:                                               ; preds = %45\n  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %46, i8* align 1 %39, i64 %15, i1 false) #16\n  br label %51\n\n51:                                               ; preds = %50, %48, %43\n  %52 = load i64, i64* %14, align 8, !tbaa !12\n  %53 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 %10, i32 1\n  store i64 %52, i64* %53, align 8, !tbaa !12\n  %54 = load i8*, i8** %37, align 8, !tbaa !20\n  %55 = getelementptr inbounds i8, i8* %54, i64 %52\n  store i8 0, i8* %55, align 1, !tbaa !15\n  %56 = load i8*, i8** %38, align 8, !tbaa !20\n  br label %73\n\n57:                                               ; preds = %36\n  %58 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 %10, i32 2\n  %59 = bitcast %union.anon* %58 to i8*\n  %60 = load i8*, i8** %37, align 8, !tbaa !20\n  %61 = icmp eq i8* %60, %59\n  %62 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 %10, i32 2, i32 0\n  %63 = load i64, i64* %62, align 8\n  store i8* %39, i8** %37, align 8, !tbaa !20\n  %64 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 %10, i32 1\n  store i64 %15, i64* %64, align 8, !tbaa !12\n  %65 = getelementptr %union.anon, %union.anon* %40, i64 0, i32 0\n  %66 = load i64, i64* %65, align 8, !tbaa !15\n  store i64 %66, i64* %62, align 8, !tbaa !15\n  %67 = icmp eq i8* %60, null\n  %68 = or i1 %61, %67\n  br i1 %68, label %71, label %69\n\n69:                                               ; preds = %57\n  store i8* %60, i8** %38, align 8, !tbaa !20\n  %70 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 %12, i32 2, i32 0\n  store i64 %63, i64* %70, align 8, !tbaa !15\n  br label %73\n\n71:                                               ; preds = %57\n  %72 = bitcast %\"class.std::__cxx11::basic_string\"* %13 to %union.anon**\n  store %union.anon* %40, %union.anon** %72, align 8, !tbaa !20\n  br label %73\n\n73:                                               ; preds = %51, %69, %71\n  %74 = phi i8* [ %56, %51 ], [ %60, %69 ], [ %41, %71 ]\n  store i64 0, i64* %14, align 8, !tbaa !12\n  store i8 0, i8* %74, align 1, !tbaa !15\n  %75 = icmp sgt i64 %12, %2\n  br i1 %75, label %9, label %76, !llvm.loop !31\n\n76:                                               ; preds = %33, %73, %5\n  %77 = phi i64 [ %1, %5 ], [ %12, %73 ], [ %10, %33 ]\n  %78 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 %77, i32 0, i32 0\n  %79 = load i8*, i8** %7, align 8, !tbaa !20\n  %80 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %3, i64 0, i32 2\n  %81 = bitcast %union.anon* %80 to i8*\n  %82 = icmp eq i8* %79, %81\n  br i1 %82, label %83, label %98\n\n83:                                               ; preds = %76\n  %84 = load i64, i64* %6, align 8, !tbaa !12\n  %85 = icmp eq i64 %84, 0\n  br i1 %85, label %92, label %86\n\n86:                                               ; preds = %83\n  %87 = load i8*, i8** %78, align 8, !tbaa !20\n  %88 = icmp eq i64 %84, 1\n  br i1 %88, label %89, label %91\n\n89:                                               ; preds = %86\n  %90 = load i8, i8* %79, align 1, !tbaa !15\n  store i8 %90, i8* %87, align 1, !tbaa !15\n  br label %92\n\n91:                                               ; preds = %86\n  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %87, i8* align 1 %79, i64 %84, i1 false) #16\n  br label %92\n\n92:                                               ; preds = %91, %89, %83\n  %93 = load i64, i64* %6, align 8, !tbaa !12\n  %94 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 %77, i32 1\n  store i64 %93, i64* %94, align 8, !tbaa !12\n  %95 = load i8*, i8** %78, align 8, !tbaa !20\n  %96 = getelementptr inbounds i8, i8* %95, i64 %93\n  store i8 0, i8* %96, align 1, !tbaa !15\n  %97 = load i8*, i8** %7, align 8, !tbaa !20\n  br label %115\n\n98:                                               ; preds = %76\n  %99 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 %77, i32 2\n  %100 = bitcast %union.anon* %99 to i8*\n  %101 = load i8*, i8** %78, align 8, !tbaa !20\n  %102 = icmp eq i8* %101, %100\n  %103 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 %77, i32 2, i32 0\n  %104 = load i64, i64* %103, align 8\n  store i8* %79, i8** %78, align 8, !tbaa !20\n  %105 = load i64, i64* %6, align 8, !tbaa !12\n  %106 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 %77, i32 1\n  store i64 %105, i64* %106, align 8, !tbaa !12\n  %107 = getelementptr %union.anon, %union.anon* %80, i64 0, i32 0\n  %108 = load i64, i64* %107, align 8, !tbaa !15\n  store i64 %108, i64* %103, align 8, !tbaa !15\n  %109 = icmp eq i8* %101, null\n  %110 = or i1 %102, %109\n  br i1 %110, label %113, label %111\n\n111:                                              ; preds = %98\n  store i8* %101, i8** %7, align 8, !tbaa !20\n  %112 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %3, i64 0, i32 2, i32 0\n  store i64 %104, i64* %112, align 8, !tbaa !15\n  br label %115\n\n113:                                              ; preds = %98\n  %114 = bitcast %\"class.std::__cxx11::basic_string\"* %3 to %union.anon**\n  store %union.anon* %80, %union.anon** %114, align 8, !tbaa !20\n  br label %115\n\n115:                                              ; preds = %92, %111, %113\n  %116 = phi i8* [ %97, %92 ], [ %101, %111 ], [ %81, %113 ]\n  store i64 0, i64* %6, align 8, !tbaa !12\n  store i8 0, i8* %116, align 1, !tbaa !15\n  ret void\n}\n\n; Function Attrs: argmemonly mustprogress nofree nounwind readonly willreturn\ndeclare dso_local i32 @memcmp(i8* nocapture, i8* nocapture, i64) local_unnamed_addr #11\n\n; Function Attrs: mustprogress uwtable\ndefine linkonce_odr dso_local void @_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS7_SaIS7_EEEENS0_5__ops15_Iter_less_iterEEvT_SF_SF_SF_T0_(%\"class.std::__cxx11::basic_string\"* %0, %\"class.std::__cxx11::basic_string\"* %1, %\"class.std::__cxx11::basic_string\"* %2, %\"class.std::__cxx11::basic_string\"* %3) local_unnamed_addr #12 comdat personality i32 (...)* @__gxx_personality_v0 {\n  %5 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %1, i64 0, i32 1\n  %6 = load i64, i64* %5, align 8, !tbaa !12\n  %7 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %2, i64 0, i32 1\n  %8 = load i64, i64* %7, align 8, !tbaa !12\n  %9 = icmp ugt i64 %6, %8\n  %10 = select i1 %9, i64 %8, i64 %6\n  %11 = icmp eq i64 %10, 0\n  br i1 %11, label %19, label %12\n\n12:                                               ; preds = %4\n  %13 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %2, i64 0, i32 0, i32 0\n  %14 = load i8*, i8** %13, align 8, !tbaa !20\n  %15 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %1, i64 0, i32 0, i32 0\n  %16 = load i8*, i8** %15, align 8, !tbaa !20\n  %17 = tail call i32 @memcmp(i8* %16, i8* %14, i64 %10) #16\n  %18 = icmp eq i32 %17, 0\n  br i1 %18, label %19, label %26\n\n19:                                               ; preds = %12, %4\n  %20 = sub i64 %6, %8\n  %21 = icmp sgt i64 %20, -2147483648\n  %22 = select i1 %21, i64 %20, i64 -2147483648\n  %23 = icmp slt i64 %22, 2147483647\n  %24 = select i1 %23, i64 %22, i64 2147483647\n  %25 = trunc i64 %24 to i32\n  br label %26\n\n26:                                               ; preds = %12, %19\n  %27 = phi i32 [ %17, %12 ], [ %25, %19 ]\n  %28 = icmp slt i32 %27, 0\n  %29 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %3, i64 0, i32 1\n  %30 = load i64, i64* %29, align 8, !tbaa !12\n  br i1 %28, label %31, label %74\n\n31:                                               ; preds = %26\n  %32 = icmp ugt i64 %8, %30\n  %33 = select i1 %32, i64 %30, i64 %8\n  %34 = icmp eq i64 %33, 0\n  br i1 %34, label %42, label %35\n\n35:                                               ; preds = %31\n  %36 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %3, i64 0, i32 0, i32 0\n  %37 = load i8*, i8** %36, align 8, !tbaa !20\n  %38 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %2, i64 0, i32 0, i32 0\n  %39 = load i8*, i8** %38, align 8, !tbaa !20\n  %40 = tail call i32 @memcmp(i8* %39, i8* %37, i64 %33) #16\n  %41 = icmp eq i32 %40, 0\n  br i1 %41, label %42, label %49\n\n42:                                               ; preds = %35, %31\n  %43 = sub i64 %8, %30\n  %44 = icmp sgt i64 %43, -2147483648\n  %45 = select i1 %44, i64 %43, i64 -2147483648\n  %46 = icmp slt i64 %45, 2147483647\n  %47 = select i1 %46, i64 %45, i64 2147483647\n  %48 = trunc i64 %47 to i32\n  br label %49\n\n49:                                               ; preds = %35, %42\n  %50 = phi i32 [ %40, %35 ], [ %48, %42 ]\n  %51 = icmp slt i32 %50, 0\n  br i1 %51, label %117, label %52\n\n52:                                               ; preds = %49\n  %53 = icmp ugt i64 %6, %30\n  %54 = select i1 %53, i64 %30, i64 %6\n  %55 = icmp eq i64 %54, 0\n  br i1 %55, label %63, label %56\n\n56:                                               ; preds = %52\n  %57 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %3, i64 0, i32 0, i32 0\n  %58 = load i8*, i8** %57, align 8, !tbaa !20\n  %59 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %1, i64 0, i32 0, i32 0\n  %60 = load i8*, i8** %59, align 8, !tbaa !20\n  %61 = tail call i32 @memcmp(i8* %60, i8* %58, i64 %54) #16\n  %62 = icmp eq i32 %61, 0\n  br i1 %62, label %63, label %70\n\n63:                                               ; preds = %56, %52\n  %64 = sub i64 %6, %30\n  %65 = icmp sgt i64 %64, -2147483648\n  %66 = select i1 %65, i64 %64, i64 -2147483648\n  %67 = icmp slt i64 %66, 2147483647\n  %68 = select i1 %67, i64 %66, i64 2147483647\n  %69 = trunc i64 %68 to i32\n  br label %70\n\n70:                                               ; preds = %56, %63\n  %71 = phi i32 [ %61, %56 ], [ %69, %63 ]\n  %72 = icmp slt i32 %71, 0\n  %73 = select i1 %72, %\"class.std::__cxx11::basic_string\"* %3, %\"class.std::__cxx11::basic_string\"* %1\n  br label %117\n\n74:                                               ; preds = %26\n  %75 = icmp ugt i64 %6, %30\n  %76 = select i1 %75, i64 %30, i64 %6\n  %77 = icmp eq i64 %76, 0\n  br i1 %77, label %85, label %78\n\n78:                                               ; preds = %74\n  %79 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %3, i64 0, i32 0, i32 0\n  %80 = load i8*, i8** %79, align 8, !tbaa !20\n  %81 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %1, i64 0, i32 0, i32 0\n  %82 = load i8*, i8** %81, align 8, !tbaa !20\n  %83 = tail call i32 @memcmp(i8* %82, i8* %80, i64 %76) #16\n  %84 = icmp eq i32 %83, 0\n  br i1 %84, label %85, label %92\n\n85:                                               ; preds = %78, %74\n  %86 = sub i64 %6, %30\n  %87 = icmp sgt i64 %86, -2147483648\n  %88 = select i1 %87, i64 %86, i64 -2147483648\n  %89 = icmp slt i64 %88, 2147483647\n  %90 = select i1 %89, i64 %88, i64 2147483647\n  %91 = trunc i64 %90 to i32\n  br label %92\n\n92:                                               ; preds = %78, %85\n  %93 = phi i32 [ %83, %78 ], [ %91, %85 ]\n  %94 = icmp slt i32 %93, 0\n  br i1 %94, label %117, label %95\n\n95:                                               ; preds = %92\n  %96 = icmp ugt i64 %8, %30\n  %97 = select i1 %96, i64 %30, i64 %8\n  %98 = icmp eq i64 %97, 0\n  br i1 %98, label %106, label %99\n\n99:                                               ; preds = %95\n  %100 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %3, i64 0, i32 0, i32 0\n  %101 = load i8*, i8** %100, align 8, !tbaa !20\n  %102 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %2, i64 0, i32 0, i32 0\n  %103 = load i8*, i8** %102, align 8, !tbaa !20\n  %104 = tail call i32 @memcmp(i8* %103, i8* %101, i64 %97) #16\n  %105 = icmp eq i32 %104, 0\n  br i1 %105, label %106, label %113\n\n106:                                              ; preds = %99, %95\n  %107 = sub i64 %8, %30\n  %108 = icmp sgt i64 %107, -2147483648\n  %109 = select i1 %108, i64 %107, i64 -2147483648\n  %110 = icmp slt i64 %109, 2147483647\n  %111 = select i1 %110, i64 %109, i64 2147483647\n  %112 = trunc i64 %111 to i32\n  br label %113\n\n113:                                              ; preds = %99, %106\n  %114 = phi i32 [ %104, %99 ], [ %112, %106 ]\n  %115 = icmp slt i32 %114, 0\n  %116 = select i1 %115, %\"class.std::__cxx11::basic_string\"* %3, %\"class.std::__cxx11::basic_string\"* %2\n  br label %117\n\n117:                                              ; preds = %113, %92, %70, %49\n  %118 = phi %\"class.std::__cxx11::basic_string\"* [ %2, %49 ], [ %73, %70 ], [ %1, %92 ], [ %116, %113 ]\n  tail call void @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4swapERS4_(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %0, %\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %118) #16\n  ret void\n}\n\n; Function Attrs: mustprogress nounwind uwtable\ndefine linkonce_odr dso_local %\"class.std::__cxx11::basic_string\"* @_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS7_SaIS7_EEEENS0_5__ops15_Iter_less_iterEET_SF_SF_SF_T0_(%\"class.std::__cxx11::basic_string\"* %0, %\"class.std::__cxx11::basic_string\"* %1, %\"class.std::__cxx11::basic_string\"* %2) local_unnamed_addr #13 comdat personality i32 (...)* @__gxx_personality_v0 {\n  %4 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %2, i64 0, i32 1\n  %5 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %2, i64 0, i32 0, i32 0\n  br label %6\n\n6:                                                ; preds = %3, %61\n  %7 = phi %\"class.std::__cxx11::basic_string\"* [ %0, %3 ], [ %33, %61 ]\n  %8 = phi %\"class.std::__cxx11::basic_string\"* [ %1, %3 ], [ %36, %61 ]\n  %9 = load i64, i64* %4, align 8, !tbaa !12\n  br label %10\n\n10:                                               ; preds = %30, %6\n  %11 = phi %\"class.std::__cxx11::basic_string\"* [ %7, %6 ], [ %33, %30 ]\n  %12 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %11, i64 0, i32 1\n  %13 = load i64, i64* %12, align 8, !tbaa !12\n  %14 = icmp ugt i64 %13, %9\n  %15 = select i1 %14, i64 %9, i64 %13\n  %16 = icmp eq i64 %15, 0\n  br i1 %16, label %23, label %17\n\n17:                                               ; preds = %10\n  %18 = load i8*, i8** %5, align 8, !tbaa !20\n  %19 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %11, i64 0, i32 0, i32 0\n  %20 = load i8*, i8** %19, align 8, !tbaa !20\n  %21 = tail call i32 @memcmp(i8* %20, i8* %18, i64 %15) #16\n  %22 = icmp eq i32 %21, 0\n  br i1 %22, label %23, label %30\n\n23:                                               ; preds = %17, %10\n  %24 = sub i64 %13, %9\n  %25 = icmp sgt i64 %24, -2147483648\n  %26 = select i1 %25, i64 %24, i64 -2147483648\n  %27 = icmp slt i64 %26, 2147483647\n  %28 = select i1 %27, i64 %26, i64 2147483647\n  %29 = trunc i64 %28 to i32\n  br label %30\n\n30:                                               ; preds = %17, %23\n  %31 = phi i32 [ %21, %17 ], [ %29, %23 ]\n  %32 = icmp slt i32 %31, 0\n  %33 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %11, i64 1\n  br i1 %32, label %10, label %34, !llvm.loop !32\n\n34:                                               ; preds = %30, %55\n  %35 = phi %\"class.std::__cxx11::basic_string\"* [ %36, %55 ], [ %8, %30 ]\n  %36 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %35, i64 -1\n  %37 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %35, i64 -1, i32 1\n  %38 = load i64, i64* %37, align 8, !tbaa !12\n  %39 = icmp ugt i64 %9, %38\n  %40 = select i1 %39, i64 %38, i64 %9\n  %41 = icmp eq i64 %40, 0\n  br i1 %41, label %48, label %42\n\n42:                                               ; preds = %34\n  %43 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %36, i64 0, i32 0, i32 0\n  %44 = load i8*, i8** %43, align 8, !tbaa !20\n  %45 = load i8*, i8** %5, align 8, !tbaa !20\n  %46 = tail call i32 @memcmp(i8* %45, i8* %44, i64 %40) #16\n  %47 = icmp eq i32 %46, 0\n  br i1 %47, label %48, label %55\n\n48:                                               ; preds = %42, %34\n  %49 = sub i64 %9, %38\n  %50 = icmp sgt i64 %49, -2147483648\n  %51 = select i1 %50, i64 %49, i64 -2147483648\n  %52 = icmp slt i64 %51, 2147483647\n  %53 = select i1 %52, i64 %51, i64 2147483647\n  %54 = trunc i64 %53 to i32\n  br label %55\n\n55:                                               ; preds = %42, %48\n  %56 = phi i32 [ %46, %42 ], [ %54, %48 ]\n  %57 = icmp slt i32 %56, 0\n  br i1 %57, label %34, label %58, !llvm.loop !33\n\n58:                                               ; preds = %55\n  %59 = icmp ult %\"class.std::__cxx11::basic_string\"* %11, %36\n  br i1 %59, label %61, label %60\n\n60:                                               ; preds = %58\n  ret %\"class.std::__cxx11::basic_string\"* %11\n\n61:                                               ; preds = %58\n  tail call void @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4swapERS4_(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %11, %\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %36) #16\n  br label %6, !llvm.loop !34\n}\n\n; Function Attrs: nounwind\ndeclare dso_local void @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4swapERS4_(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32), %\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32)) local_unnamed_addr #14\n\n; Function Attrs: mustprogress nofree nosync nounwind readnone speculatable willreturn\ndeclare i64 @llvm.ctlz.i64(i64, i1 immarg) #15\n\n; Function Attrs: uwtable\ndefine linkonce_odr dso_local void @_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS7_SaIS7_EEEENS0_5__ops15_Iter_less_iterEEvT_SF_T0_(%\"class.std::__cxx11::basic_string\"* %0, %\"class.std::__cxx11::basic_string\"* %1) local_unnamed_addr #0 comdat personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {\n  %3 = alloca %\"class.std::__cxx11::basic_string\", align 8\n  %4 = icmp eq %\"class.std::__cxx11::basic_string\"* %0, %1\n  br i1 %4, label %157, label %5\n\n5:                                                ; preds = %2\n  %6 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 1\n  %7 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 0, i32 0\n  %8 = bitcast %\"class.std::__cxx11::basic_string\"* %3 to i8*\n  %9 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %3, i64 0, i32 2\n  %10 = bitcast %\"class.std::__cxx11::basic_string\"* %3 to %union.anon**\n  %11 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %3, i64 0, i32 0, i32 0\n  %12 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %3, i64 0, i32 2, i32 0\n  %13 = bitcast %union.anon* %9 to i8*\n  %14 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %3, i64 0, i32 1\n  %15 = ptrtoint %\"class.std::__cxx11::basic_string\"* %0 to i64\n  %16 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 2\n  %17 = bitcast %union.anon* %16 to i8*\n  %18 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 2, i32 0\n  %19 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 1\n  %20 = icmp eq %\"class.std::__cxx11::basic_string\"* %19, %1\n  br i1 %20, label %157, label %21\n\n21:                                               ; preds = %5\n  %22 = bitcast i64* %14 to <2 x i64>*\n  %23 = bitcast i64* %6 to <2 x i64>*\n  br label %24\n\n24:                                               ; preds = %21, %154\n  %25 = phi %\"class.std::__cxx11::basic_string\"* [ %155, %154 ], [ %19, %21 ]\n  %26 = phi %\"class.std::__cxx11::basic_string\"* [ %25, %154 ], [ %0, %21 ]\n  %27 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %26, i64 1, i32 1\n  %28 = load i64, i64* %27, align 8, !tbaa !12\n  %29 = load i64, i64* %6, align 8, !tbaa !12\n  %30 = icmp ugt i64 %28, %29\n  %31 = select i1 %30, i64 %29, i64 %28\n  %32 = icmp eq i64 %31, 0\n  br i1 %32, label %39, label %33\n\n33:                                               ; preds = %24\n  %34 = load i8*, i8** %7, align 8, !tbaa !20\n  %35 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %25, i64 0, i32 0, i32 0\n  %36 = load i8*, i8** %35, align 8, !tbaa !20\n  %37 = call i32 @memcmp(i8* %36, i8* %34, i64 %31) #16\n  %38 = icmp eq i32 %37, 0\n  br i1 %38, label %39, label %46\n\n39:                                               ; preds = %33, %24\n  %40 = sub i64 %28, %29\n  %41 = icmp sgt i64 %40, -2147483648\n  %42 = select i1 %41, i64 %40, i64 -2147483648\n  %43 = icmp slt i64 %42, 2147483647\n  %44 = select i1 %43, i64 %42, i64 2147483647\n  %45 = trunc i64 %44 to i32\n  br label %46\n\n46:                                               ; preds = %33, %39\n  %47 = phi i32 [ %37, %33 ], [ %45, %39 ]\n  %48 = icmp slt i32 %47, 0\n  br i1 %48, label %49, label %153\n\n49:                                               ; preds = %46\n  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %8) #16\n  store %union.anon* %9, %union.anon** %10, align 8, !tbaa !10\n  %50 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %25, i64 0, i32 0, i32 0\n  %51 = load i8*, i8** %50, align 8, !tbaa !20\n  %52 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %26, i64 1, i32 2\n  %53 = bitcast %union.anon* %52 to i8*\n  %54 = icmp eq i8* %51, %53\n  br i1 %54, label %55, label %56\n\n55:                                               ; preds = %49\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(16) %13, i8* noundef nonnull align 8 dereferenceable(16) %51, i64 16, i1 false) #16\n  br label %59\n\n56:                                               ; preds = %49\n  store i8* %51, i8** %11, align 8, !tbaa !20\n  %57 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %26, i64 1, i32 2, i32 0\n  %58 = load i64, i64* %57, align 8, !tbaa !15\n  store i64 %58, i64* %12, align 8, !tbaa !15\n  br label %59\n\n59:                                               ; preds = %55, %56\n  %60 = phi i8* [ %13, %55 ], [ %51, %56 ]\n  store i64 %28, i64* %14, align 8, !tbaa !12\n  %61 = bitcast %\"class.std::__cxx11::basic_string\"* %25 to %union.anon**\n  store %union.anon* %52, %union.anon** %61, align 8, !tbaa !20\n  store i64 0, i64* %27, align 8, !tbaa !12\n  store i8 0, i8* %53, align 8, !tbaa !15\n  %62 = ptrtoint %\"class.std::__cxx11::basic_string\"* %25 to i64\n  %63 = sub i64 %62, %15\n  %64 = icmp sgt i64 %63, 0\n  br i1 %64, label %65, label %121\n\n65:                                               ; preds = %59\n  %66 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %26, i64 2\n  %67 = lshr exact i64 %63, 5\n  br label %68\n\n68:                                               ; preds = %114, %65\n  %69 = phi i64 [ %117, %114 ], [ %67, %65 ]\n  %70 = phi %\"class.std::__cxx11::basic_string\"* [ %73, %114 ], [ %66, %65 ]\n  %71 = phi %\"class.std::__cxx11::basic_string\"* [ %72, %114 ], [ %25, %65 ]\n  %72 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %71, i64 -1\n  %73 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %70, i64 -1\n  %74 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %73, i64 0, i32 0, i32 0\n  %75 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %72, i64 0, i32 0, i32 0\n  %76 = load i8*, i8** %75, align 8, !tbaa !20\n  %77 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %71, i64 -1, i32 2\n  %78 = bitcast %union.anon* %77 to i8*\n  %79 = icmp eq i8* %76, %78\n  br i1 %79, label %80, label %96\n\n80:                                               ; preds = %68\n  %81 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %71, i64 -1, i32 1\n  %82 = load i64, i64* %81, align 8, !tbaa !12\n  %83 = icmp eq i64 %82, 0\n  br i1 %83, label %90, label %84\n\n84:                                               ; preds = %80\n  %85 = load i8*, i8** %74, align 8, !tbaa !20\n  %86 = icmp eq i64 %82, 1\n  br i1 %86, label %87, label %89\n\n87:                                               ; preds = %84\n  %88 = load i8, i8* %76, align 1, !tbaa !15\n  store i8 %88, i8* %85, align 1, !tbaa !15\n  br label %90\n\n89:                                               ; preds = %84\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %85, i8* align 1 %76, i64 %82, i1 false) #16\n  br label %90\n\n90:                                               ; preds = %89, %87, %80\n  %91 = load i64, i64* %81, align 8, !tbaa !12\n  %92 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %70, i64 -1, i32 1\n  store i64 %91, i64* %92, align 8, !tbaa !12\n  %93 = load i8*, i8** %74, align 8, !tbaa !20\n  %94 = getelementptr inbounds i8, i8* %93, i64 %91\n  store i8 0, i8* %94, align 1, !tbaa !15\n  %95 = load i8*, i8** %75, align 8, !tbaa !20\n  br label %114\n\n96:                                               ; preds = %68\n  %97 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %70, i64 -1, i32 2\n  %98 = bitcast %union.anon* %97 to i8*\n  %99 = load i8*, i8** %74, align 8, !tbaa !20\n  %100 = icmp eq i8* %99, %98\n  %101 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %70, i64 -1, i32 2, i32 0\n  %102 = load i64, i64* %101, align 8\n  store i8* %76, i8** %74, align 8, !tbaa !20\n  %103 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %71, i64 -1, i32 1\n  %104 = load i64, i64* %103, align 8, !tbaa !12\n  %105 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %70, i64 -1, i32 1\n  store i64 %104, i64* %105, align 8, !tbaa !12\n  %106 = getelementptr %union.anon, %union.anon* %77, i64 0, i32 0\n  %107 = load i64, i64* %106, align 8, !tbaa !15\n  store i64 %107, i64* %101, align 8, !tbaa !15\n  %108 = icmp eq i8* %99, null\n  %109 = or i1 %100, %108\n  br i1 %109, label %112, label %110\n\n110:                                              ; preds = %96\n  store i8* %99, i8** %75, align 8, !tbaa !20\n  %111 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %71, i64 -1, i32 2, i32 0\n  store i64 %102, i64* %111, align 8, !tbaa !15\n  br label %114\n\n112:                                              ; preds = %96\n  %113 = bitcast %\"class.std::__cxx11::basic_string\"* %72 to %union.anon**\n  store %union.anon* %77, %union.anon** %113, align 8, !tbaa !20\n  br label %114\n\n114:                                              ; preds = %112, %110, %90\n  %115 = phi i8* [ %95, %90 ], [ %99, %110 ], [ %78, %112 ]\n  %116 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %71, i64 -1, i32 1\n  store i64 0, i64* %116, align 8, !tbaa !12\n  store i8 0, i8* %115, align 1, !tbaa !15\n  %117 = add nsw i64 %69, -1\n  %118 = icmp sgt i64 %69, 1\n  br i1 %118, label %68, label %119, !llvm.loop !35\n\n119:                                              ; preds = %114\n  %120 = load i8*, i8** %11, align 8, !tbaa !20\n  br label %121\n\n121:                                              ; preds = %119, %59\n  %122 = phi i8* [ %120, %119 ], [ %60, %59 ]\n  %123 = icmp eq i8* %122, %13\n  br i1 %123, label %124, label %138\n\n124:                                              ; preds = %121\n  %125 = load i64, i64* %14, align 8, !tbaa !12\n  %126 = icmp eq i64 %125, 0\n  br i1 %126, label %133, label %127\n\n127:                                              ; preds = %124\n  %128 = load i8*, i8** %7, align 8, !tbaa !20\n  %129 = icmp eq i64 %125, 1\n  br i1 %129, label %130, label %132\n\n130:                                              ; preds = %127\n  %131 = load i8, i8* %13, align 8, !tbaa !15\n  store i8 %131, i8* %128, align 1, !tbaa !15\n  br label %133\n\n132:                                              ; preds = %127\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %128, i8* nonnull align 8 %13, i64 %125, i1 false) #16\n  br label %133\n\n133:                                              ; preds = %132, %130, %124\n  %134 = load i64, i64* %14, align 8, !tbaa !12\n  store i64 %134, i64* %6, align 8, !tbaa !12\n  %135 = load i8*, i8** %7, align 8, !tbaa !20\n  %136 = getelementptr inbounds i8, i8* %135, i64 %134\n  store i8 0, i8* %136, align 1, !tbaa !15\n  %137 = load i8*, i8** %11, align 8, !tbaa !20\n  br label %147\n\n138:                                              ; preds = %121\n  %139 = load i8*, i8** %7, align 8, !tbaa !20\n  %140 = icmp eq i8* %139, %17\n  %141 = load i64, i64* %18, align 8\n  store i8* %122, i8** %7, align 8, !tbaa !20\n  %142 = load <2 x i64>, <2 x i64>* %22, align 8, !tbaa !15\n  store <2 x i64> %142, <2 x i64>* %23, align 8, !tbaa !15\n  %143 = icmp eq i8* %139, null\n  %144 = or i1 %140, %143\n  br i1 %144, label %146, label %145\n\n145:                                              ; preds = %138\n  store i8* %139, i8** %11, align 8, !tbaa !20\n  store i64 %141, i64* %12, align 8, !tbaa !15\n  br label %147\n\n146:                                              ; preds = %138\n  store %union.anon* %9, %union.anon** %10, align 8, !tbaa !20\n  br label %147\n\n147:                                              ; preds = %133, %145, %146\n  %148 = phi i8* [ %137, %133 ], [ %139, %145 ], [ %13, %146 ]\n  store i64 0, i64* %14, align 8, !tbaa !12\n  store i8 0, i8* %148, align 1, !tbaa !15\n  %149 = load i8*, i8** %11, align 8, !tbaa !20\n  %150 = icmp eq i8* %149, %13\n  br i1 %150, label %152, label %151\n\n151:                                              ; preds = %147\n  call void @_ZdlPv(i8* %149) #16\n  br label %152\n\n152:                                              ; preds = %147, %151\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %8) #16\n  br label %154\n\n153:                                              ; preds = %46\n  call void @_ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS7_SaIS7_EEEENS0_5__ops14_Val_less_iterEEvT_T0_(%\"class.std::__cxx11::basic_string\"* nonnull %25)\n  br label %154\n\n154:                                              ; preds = %152, %153\n  %155 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %25, i64 1\n  %156 = icmp eq %\"class.std::__cxx11::basic_string\"* %155, %1\n  br i1 %156, label %157, label %24, !llvm.loop !36\n\n157:                                              ; preds = %154, %5, %2\n  ret void\n}\n\n; Function Attrs: uwtable\ndefine linkonce_odr dso_local void @_ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS7_SaIS7_EEEENS0_5__ops14_Val_less_iterEEvT_T0_(%\"class.std::__cxx11::basic_string\"* %0) local_unnamed_addr #0 comdat personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {\n  %2 = alloca %\"class.std::__cxx11::basic_string\", align 8\n  %3 = bitcast %\"class.std::__cxx11::basic_string\"* %2 to i8*\n  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %3) #16\n  %4 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %2, i64 0, i32 2\n  %5 = bitcast %\"class.std::__cxx11::basic_string\"* %2 to %union.anon**\n  store %union.anon* %4, %union.anon** %5, align 8, !tbaa !10\n  %6 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 0, i32 0\n  %7 = load i8*, i8** %6, align 8, !tbaa !20\n  %8 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 2\n  %9 = bitcast %union.anon* %8 to i8*\n  %10 = icmp eq i8* %7, %9\n  br i1 %10, label %11, label %13\n\n11:                                               ; preds = %1\n  %12 = bitcast %union.anon* %4 to i8*\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(16) %12, i8* noundef nonnull align 8 dereferenceable(16) %7, i64 16, i1 false) #16\n  br label %18\n\n13:                                               ; preds = %1\n  %14 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %2, i64 0, i32 0, i32 0\n  store i8* %7, i8** %14, align 8, !tbaa !20\n  %15 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 2, i32 0\n  %16 = load i64, i64* %15, align 8, !tbaa !15\n  %17 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %2, i64 0, i32 2, i32 0\n  store i64 %16, i64* %17, align 8, !tbaa !15\n  br label %18\n\n18:                                               ; preds = %11, %13\n  %19 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 1\n  %20 = load i64, i64* %19, align 8, !tbaa !12\n  %21 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %2, i64 0, i32 1\n  store i64 %20, i64* %21, align 8, !tbaa !12\n  %22 = bitcast %\"class.std::__cxx11::basic_string\"* %0 to %union.anon**\n  store %union.anon* %8, %union.anon** %22, align 8, !tbaa !20\n  store i64 0, i64* %19, align 8, !tbaa !12\n  store i8 0, i8* %9, align 8, !tbaa !15\n  %23 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %2, i64 0, i32 0, i32 0\n  br label %24\n\n24:                                               ; preds = %86, %18\n  %25 = phi i64 [ %20, %18 ], [ %88, %86 ]\n  %26 = phi %\"class.std::__cxx11::basic_string\"* [ %0, %18 ], [ %27, %86 ]\n  %27 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %26, i64 -1\n  %28 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %26, i64 -1, i32 1\n  %29 = load i64, i64* %28, align 8, !tbaa !12\n  %30 = icmp ugt i64 %25, %29\n  %31 = select i1 %30, i64 %29, i64 %25\n  %32 = icmp eq i64 %31, 0\n  br i1 %32, label %39, label %33\n\n33:                                               ; preds = %24\n  %34 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %27, i64 0, i32 0, i32 0\n  %35 = load i8*, i8** %34, align 8, !tbaa !20\n  %36 = load i8*, i8** %23, align 8, !tbaa !20\n  %37 = call i32 @memcmp(i8* %36, i8* %35, i64 %31) #16\n  %38 = icmp eq i32 %37, 0\n  br i1 %38, label %39, label %46\n\n39:                                               ; preds = %33, %24\n  %40 = sub i64 %25, %29\n  %41 = icmp sgt i64 %40, -2147483648\n  %42 = select i1 %41, i64 %40, i64 -2147483648\n  %43 = icmp slt i64 %42, 2147483647\n  %44 = select i1 %43, i64 %42, i64 2147483647\n  %45 = trunc i64 %44 to i32\n  br label %46\n\n46:                                               ; preds = %33, %39\n  %47 = phi i32 [ %37, %33 ], [ %45, %39 ]\n  %48 = icmp slt i32 %47, 0\n  %49 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %26, i64 0, i32 0, i32 0\n  br i1 %48, label %50, label %89\n\n50:                                               ; preds = %46\n  %51 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %27, i64 0, i32 0, i32 0\n  %52 = load i8*, i8** %51, align 8, !tbaa !20\n  %53 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %26, i64 -1, i32 2\n  %54 = bitcast %union.anon* %53 to i8*\n  %55 = icmp eq i8* %52, %54\n  br i1 %55, label %56, label %70\n\n56:                                               ; preds = %50\n  %57 = icmp eq i64 %29, 0\n  br i1 %57, label %64, label %58\n\n58:                                               ; preds = %56\n  %59 = load i8*, i8** %49, align 8, !tbaa !20\n  %60 = icmp eq i64 %29, 1\n  br i1 %60, label %61, label %63\n\n61:                                               ; preds = %58\n  %62 = load i8, i8* %52, align 1, !tbaa !15\n  store i8 %62, i8* %59, align 1, !tbaa !15\n  br label %64\n\n63:                                               ; preds = %58\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %59, i8* align 1 %52, i64 %29, i1 false) #16\n  br label %64\n\n64:                                               ; preds = %63, %61, %56\n  %65 = load i64, i64* %28, align 8, !tbaa !12\n  %66 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %26, i64 0, i32 1\n  store i64 %65, i64* %66, align 8, !tbaa !12\n  %67 = load i8*, i8** %49, align 8, !tbaa !20\n  %68 = getelementptr inbounds i8, i8* %67, i64 %65\n  store i8 0, i8* %68, align 1, !tbaa !15\n  %69 = load i8*, i8** %51, align 8, !tbaa !20\n  br label %86\n\n70:                                               ; preds = %50\n  %71 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %26, i64 0, i32 2\n  %72 = bitcast %union.anon* %71 to i8*\n  %73 = load i8*, i8** %49, align 8, !tbaa !20\n  %74 = icmp eq i8* %73, %72\n  %75 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %26, i64 0, i32 2, i32 0\n  %76 = load i64, i64* %75, align 8\n  store i8* %52, i8** %49, align 8, !tbaa !20\n  %77 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %26, i64 0, i32 1\n  store i64 %29, i64* %77, align 8, !tbaa !12\n  %78 = getelementptr %union.anon, %union.anon* %53, i64 0, i32 0\n  %79 = load i64, i64* %78, align 8, !tbaa !15\n  store i64 %79, i64* %75, align 8, !tbaa !15\n  %80 = icmp eq i8* %73, null\n  %81 = or i1 %74, %80\n  br i1 %81, label %84, label %82\n\n82:                                               ; preds = %70\n  store i8* %73, i8** %51, align 8, !tbaa !20\n  %83 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %26, i64 -1, i32 2, i32 0\n  store i64 %76, i64* %83, align 8, !tbaa !15\n  br label %86\n\n84:                                               ; preds = %70\n  %85 = bitcast %\"class.std::__cxx11::basic_string\"* %27 to %union.anon**\n  store %union.anon* %53, %union.anon** %85, align 8, !tbaa !20\n  br label %86\n\n86:                                               ; preds = %64, %82, %84\n  %87 = phi i8* [ %69, %64 ], [ %73, %82 ], [ %54, %84 ]\n  store i64 0, i64* %28, align 8, !tbaa !12\n  store i8 0, i8* %87, align 1, !tbaa !15\n  %88 = load i64, i64* %21, align 8, !tbaa !12\n  br label %24, !llvm.loop !37\n\n89:                                               ; preds = %46\n  %90 = load i8*, i8** %23, align 8, !tbaa !20\n  %91 = bitcast %union.anon* %4 to i8*\n  %92 = icmp eq i8* %90, %91\n  br i1 %92, label %93, label %107\n\n93:                                               ; preds = %89\n  %94 = icmp eq i64 %25, 0\n  br i1 %94, label %101, label %95\n\n95:                                               ; preds = %93\n  %96 = load i8*, i8** %49, align 8, !tbaa !20\n  %97 = icmp eq i64 %25, 1\n  br i1 %97, label %98, label %100\n\n98:                                               ; preds = %95\n  %99 = load i8, i8* %91, align 8, !tbaa !15\n  store i8 %99, i8* %96, align 1, !tbaa !15\n  br label %101\n\n100:                                              ; preds = %95\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %96, i8* nonnull align 8 %91, i64 %25, i1 false) #16\n  br label %101\n\n101:                                              ; preds = %100, %98, %93\n  %102 = load i64, i64* %21, align 8, !tbaa !12\n  %103 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %26, i64 0, i32 1\n  store i64 %102, i64* %103, align 8, !tbaa !12\n  %104 = load i8*, i8** %49, align 8, !tbaa !20\n  %105 = getelementptr inbounds i8, i8* %104, i64 %102\n  store i8 0, i8* %105, align 1, !tbaa !15\n  %106 = load i8*, i8** %23, align 8, !tbaa !20\n  br label %122\n\n107:                                              ; preds = %89\n  %108 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %26, i64 0, i32 2\n  %109 = bitcast %union.anon* %108 to i8*\n  %110 = load i8*, i8** %49, align 8, !tbaa !20\n  %111 = icmp eq i8* %110, %109\n  %112 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %26, i64 0, i32 2, i32 0\n  %113 = load i64, i64* %112, align 8\n  store i8* %90, i8** %49, align 8, !tbaa !20\n  %114 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %26, i64 0, i32 1\n  store i64 %25, i64* %114, align 8, !tbaa !12\n  %115 = getelementptr %union.anon, %union.anon* %4, i64 0, i32 0\n  %116 = load i64, i64* %115, align 8, !tbaa !15\n  store i64 %116, i64* %112, align 8, !tbaa !15\n  %117 = icmp eq i8* %110, null\n  %118 = or i1 %111, %117\n  br i1 %118, label %121, label %119\n\n119:                                              ; preds = %107\n  store i8* %110, i8** %23, align 8, !tbaa !20\n  %120 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %2, i64 0, i32 2, i32 0\n  store i64 %113, i64* %120, align 8, !tbaa !15\n  br label %122\n\n121:                                              ; preds = %107\n  store %union.anon* %4, %union.anon** %5, align 8, !tbaa !20\n  br label %122\n\n122:                                              ; preds = %101, %119, %121\n  %123 = phi i8* [ %106, %101 ], [ %110, %119 ], [ %91, %121 ]\n  store i64 0, i64* %21, align 8, !tbaa !12\n  store i8 0, i8* %123, align 1, !tbaa !15\n  %124 = load i8*, i8** %23, align 8, !tbaa !20\n  %125 = icmp eq i8* %124, %91\n  br i1 %125, label %127, label %126\n\n126:                                              ; preds = %122\n  call void @_ZdlPv(i8* %124) #16\n  br label %127\n\n127:                                              ; preds = %122, %126\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %3) #16\n  ret void\n}\n\ndeclare dso_local void @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32), %\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32)) local_unnamed_addr #6\n\nattributes #0 = { uwtable \"frame-pointer\"=\"none\" \"min-legal-vector-width\"=\"0\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #1 = { argmemonly mustprogress nofree nounwind willreturn writeonly }\nattributes #2 = { argmemonly mustprogress nofree nosync nounwind willreturn }\nattributes #3 = { nounwind uwtable \"frame-pointer\"=\"none\" \"min-legal-vector-width\"=\"0\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #4 = { noinline noreturn nounwind }\nattributes #5 = { nobuiltin nounwind \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #6 = { \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #7 = { argmemonly mustprogress nofree nounwind willreturn }\nattributes #8 = { noreturn \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #9 = { nobuiltin allocsize(0) \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #10 = { inlinehint uwtable \"frame-pointer\"=\"none\" \"min-legal-vector-width\"=\"0\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #11 = { argmemonly mustprogress nofree nounwind readonly willreturn \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #12 = { mustprogress uwtable \"frame-pointer\"=\"none\" \"min-legal-vector-width\"=\"0\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #13 = { mustprogress nounwind uwtable \"frame-pointer\"=\"none\" \"min-legal-vector-width\"=\"0\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #14 = { nounwind \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #15 = { mustprogress nofree nosync nounwind readnone speculatable willreturn }\nattributes #16 = { nounwind }\nattributes #17 = { noreturn nounwind }\nattributes #18 = { noreturn }\nattributes #19 = { allocsize(0) }\n\n!llvm.module.flags = !{!0, !1}\n!llvm.ident = !{!2}\n\n!0 = !{i32 1, !\"wchar_size\", i32 4}\n!1 = !{i32 7, !\"uwtable\", i32 1}\n!2 = !{!\"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)\"}\n!3 = !{!4, !5, i64 8}\n!4 = !{!\"_ZTSNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_Vector_impl_dataE\", !5, i64 0, !5, i64 8, !5, i64 16}\n!5 = !{!\"any pointer\", !6, i64 0}\n!6 = !{!\"omnipotent char\", !7, i64 0}\n!7 = !{!\"Simple C++ TBAA\"}\n!8 = !{!4, !5, i64 0}\n!9 = !{!5, !5, i64 0}\n!10 = !{!11, !5, i64 0}\n!11 = !{!\"_ZTSNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderE\", !5, i64 0}\n!12 = !{!13, !14, i64 8}\n!13 = !{!\"_ZTSNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE\", !11, i64 0, !14, i64 8, !6, i64 16}\n!14 = !{!\"long\", !6, i64 0}\n!15 = !{!6, !6, i64 0}\n!16 = !{i64 0, i64 65}\n!17 = distinct !{!17, !18}\n!18 = !{!\"llvm.loop.mustprogress\"}\n!19 = !{!4, !5, i64 16}\n!20 = !{!13, !5, i64 0}\n!21 = !{!14, !14, i64 0}\n!22 = distinct !{!22, !18}\n!23 = distinct !{!23, !18}\n!24 = distinct !{!24, !18}\n!25 = distinct !{!25, !18}\n!26 = distinct !{!26, !18}\n!27 = distinct !{!27, !18}\n!28 = distinct !{!28, !18}\n!29 = distinct !{!29, !18}\n!30 = distinct !{!30, !18}\n!31 = distinct !{!31, !18}\n!32 = distinct !{!32, !18}\n!33 = distinct !{!33, !18}\n!34 = distinct !{!34, !18}\n!35 = distinct !{!35, !18}\n!36 = distinct !{!36, !18}\n!37 = distinct !{!37, !18}\n", "target": "This is the targeted source code:\n/*\nWrite a function that accepts a vector of strings as a parameter,\ndeletes the strings that have odd lengths from it,\nand returns the resulted vector with a sorted order,\nThe vector is always a vector of strings and never a vector of numbers,\nand it may contain duplicates.\nThe order of the vector should be ascending by length of each word, and you\nshould return the vector sorted by that rule.\nIf two words have the same length, sort the vector alphabetically.\nThe function should return a vector of strings in sorted order.\nYou may assume that all words will have the same length.\nFor example:\nassert vector_sort({\"aa\", \"a\", \"aaa\"}) => {\"aa\"}\nassert vector_sort({\"ab\", \"a\", \"aaa\", \"cd\"}) => {\"ab\", \"cd\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\nvector<string> sorted_list_sum(vector<string> lst){\n\n    vector<string> out={};\n    for (int i=0;i<lst.size();i++)\n    if (lst[i].length()%2==0) out.push_back(lst[i]);\n    string mid;\n    sort(out.begin(),out.end());\n    for (int i=0;i<out.size();i++)\n    for (int j=1;j<out.size();j++)\n    if (out[j].length()<out[j-1].length())\n    {\n        mid=out[j];out[j]=out[j-1];out[j-1]=mid;\n    }\n    return out;\n}\n"}
{"input": "Convert this to C++:\n; ModuleID = '../../Human_xBenchmarks_164/CPP_150/CPP_150.cpp'\nsource_filename = \"../../Human_xBenchmarks_164/CPP_150/CPP_150.cpp\"\ntarget datalayout = \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\ntarget triple = \"x86_64-unknown-linux-gnu\"\n\n; Function Attrs: mustprogress nofree norecurse nosync nounwind readnone uwtable willreturn\ndefine dso_local i32 @_Z6x_or_yiii(i32 %0, i32 %1, i32 %2) local_unnamed_addr #0 {\n  %4 = icmp sgt i32 %0, 1\n  %5 = zext i1 %4 to i8\n  %6 = icmp slt i32 %0, 4\n  br i1 %6, label %7, label %12\n\n7:                                                ; preds = %12, %3\n  %8 = phi i8 [ %5, %3 ], [ %17, %12 ]\n  %9 = and i8 %8, 1\n  %10 = icmp eq i8 %9, 0\n  %11 = select i1 %10, i32 %2, i32 %1\n  ret i32 %11\n\n12:                                               ; preds = %3, %12\n  %13 = phi i32 [ %18, %12 ], [ 2, %3 ]\n  %14 = phi i8 [ %17, %12 ], [ %5, %3 ]\n  %15 = srem i32 %0, %13\n  %16 = icmp eq i32 %15, 0\n  %17 = select i1 %16, i8 0, i8 %14\n  %18 = add nuw nsw i32 %13, 1\n  %19 = mul nsw i32 %18, %18\n  %20 = icmp sgt i32 %19, %0\n  br i1 %20, label %7, label %12, !llvm.loop !3\n}\n\nattributes #0 = { mustprogress nofree norecurse nosync nounwind readnone uwtable willreturn \"frame-pointer\"=\"none\" \"min-legal-vector-width\"=\"0\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\n\n!llvm.module.flags = !{!0, !1}\n!llvm.ident = !{!2}\n\n!0 = !{i32 1, !\"wchar_size\", i32 4}\n!1 = !{i32 7, !\"uwtable\", i32 1}\n!2 = !{!\"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)\"}\n!3 = distinct !{!3, !4}\n!4 = !{!\"llvm.loop.mustprogress\"}\n", "target": "This is the targeted source code:\n/*\nA simple program which should return the value of x if n is \na prime number and should return the value of y otherwise.\n\nExamples:\nfor x_or_y(7, 34, 12) == 34\nfor x_or_y(15, 8, 5) == 5\n\n*/\n#include<stdio.h>\nusing namespace std;\nint x_or_y(int n,int x,int y){\n\n    bool isp=true;\n    if (n<2) isp=false;\n    for (int i=2;i*i<=n;i++)\n    if (n%i==0) isp=false;\n    if (isp) return x;\n    return y;\n}\n"}
{"input": "Convert this to C++:\n; ModuleID = '../../Human_xBenchmarks_164/CPP_151/CPP_151.cpp'\nsource_filename = \"../../Human_xBenchmarks_164/CPP_151/CPP_151.cpp\"\ntarget datalayout = \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\ntarget triple = \"x86_64-unknown-linux-gnu\"\n\n%\"class.std::vector\" = type { %\"struct.std::_Vector_base\" }\n%\"struct.std::_Vector_base\" = type { %\"struct.std::_Vector_base<float, std::allocator<float>>::_Vector_impl\" }\n%\"struct.std::_Vector_base<float, std::allocator<float>>::_Vector_impl\" = type { %\"struct.std::_Vector_base<float, std::allocator<float>>::_Vector_impl_data\" }\n%\"struct.std::_Vector_base<float, std::allocator<float>>::_Vector_impl_data\" = type { float*, float*, float* }\n\n; Function Attrs: mustprogress nofree nosync nounwind readonly uwtable willreturn\ndefine dso_local i64 @_Z21double_the_differenceSt6vectorIfSaIfEE(%\"class.std::vector\"* nocapture readonly %0) local_unnamed_addr #0 {\n  %2 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0, i64 0, i32 0, i32 0, i32 0, i32 1\n  %3 = load float*, float** %2, align 8, !tbaa !3\n  %4 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0, i64 0, i32 0, i32 0, i32 0, i32 0\n  %5 = load float*, float** %4, align 8, !tbaa !8\n  %6 = ptrtoint float* %3 to i64\n  %7 = ptrtoint float* %5 to i64\n  %8 = sub i64 %6, %7\n  %9 = icmp eq i64 %8, 0\n  br i1 %9, label %13, label %10\n\n10:                                               ; preds = %1\n  %11 = ashr exact i64 %8, 2\n  %12 = call i64 @llvm.umax.i64(i64 %11, i64 1)\n  br label %15\n\n13:                                               ; preds = %34, %1\n  %14 = phi i64 [ 0, %1 ], [ %35, %34 ]\n  ret i64 %14\n\n15:                                               ; preds = %10, %34\n  %16 = phi i64 [ 0, %10 ], [ %36, %34 ]\n  %17 = phi i64 [ 0, %10 ], [ %35, %34 ]\n  %18 = getelementptr inbounds float, float* %5, i64 %16\n  %19 = load float, float* %18, align 4, !tbaa !9\n  %20 = tail call float @llvm.round.f32(float %19) #3\n  %21 = fsub float %19, %20\n  %22 = fpext float %21 to double\n  %23 = fcmp olt double %22, 1.000000e-04\n  %24 = fcmp ogt float %19, 0.000000e+00\n  %25 = select i1 %23, i1 %24, i1 false\n  br i1 %25, label %26, label %34\n\n26:                                               ; preds = %15\n  %27 = fptosi float %20 to i32\n  %28 = srem i32 %27, 2\n  %29 = icmp eq i32 %28, 1\n  br i1 %29, label %30, label %34\n\n30:                                               ; preds = %26\n  %31 = mul nsw i32 %27, %27\n  %32 = zext i32 %31 to i64\n  %33 = add nsw i64 %17, %32\n  br label %34\n\n34:                                               ; preds = %15, %30, %26\n  %35 = phi i64 [ %33, %30 ], [ %17, %26 ], [ %17, %15 ]\n  %36 = add nuw nsw i64 %16, 1\n  %37 = icmp eq i64 %36, %12\n  br i1 %37, label %13, label %15, !llvm.loop !11\n}\n\n; Function Attrs: mustprogress nofree nosync nounwind readnone speculatable willreturn\ndeclare float @llvm.round.f32(float) #1\n\n; Function Attrs: nofree nosync nounwind readnone speculatable willreturn\ndeclare i64 @llvm.umax.i64(i64, i64) #2\n\nattributes #0 = { mustprogress nofree nosync nounwind readonly uwtable willreturn \"frame-pointer\"=\"none\" \"min-legal-vector-width\"=\"0\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #1 = { mustprogress nofree nosync nounwind readnone speculatable willreturn }\nattributes #2 = { nofree nosync nounwind readnone speculatable willreturn }\nattributes #3 = { nounwind }\n\n!llvm.module.flags = !{!0, !1}\n!llvm.ident = !{!2}\n\n!0 = !{i32 1, !\"wchar_size\", i32 4}\n!1 = !{i32 7, !\"uwtable\", i32 1}\n!2 = !{!\"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)\"}\n!3 = !{!4, !5, i64 8}\n!4 = !{!\"_ZTSNSt12_Vector_baseIfSaIfEE17_Vector_impl_dataE\", !5, i64 0, !5, i64 8, !5, i64 16}\n!5 = !{!\"any pointer\", !6, i64 0}\n!6 = !{!\"omnipotent char\", !7, i64 0}\n!7 = !{!\"Simple C++ TBAA\"}\n!8 = !{!4, !5, i64 0}\n!9 = !{!10, !10, i64 0}\n!10 = !{!\"float\", !6, i64 0}\n!11 = distinct !{!11, !12}\n!12 = !{!\"llvm.loop.mustprogress\"}\n", "target": "This is the targeted source code:\n/*\nGiven a vector of numbers, return the sum of squares of the numbers\nin the vector that are odd. Ignore numbers that are negative or not integers.\n\ndouble_the_difference({1, 3, 2, 0}) == 1 + 9 + 0 + 0 = 10\ndouble_the_difference({-1, -2, 0}) == 0\ndouble_the_difference({9, -2}) == 81\ndouble_the_difference({0}) == 0  \n\nIf the input vector is empty, return 0.\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nlong long double_the_difference(vector<float> lst){\n\n    long long sum=0;\n    for (int i=0;i<lst.size();i++)\n    if (lst[i]-round(lst[i])<1e-4)\n    if (lst[i]>0 and (int)(round(lst[i]))%2==1) sum+=(int)(round(lst[i]))*(int)(round(lst[i]));\n    return sum;\n}\n"}
{"input": "Convert this to C++:\n; ModuleID = '../../Human_xBenchmarks_164/CPP_152/CPP_152.cpp'\nsource_filename = \"../../Human_xBenchmarks_164/CPP_152/CPP_152.cpp\"\ntarget datalayout = \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\ntarget triple = \"x86_64-unknown-linux-gnu\"\n\n%\"class.std::vector\" = type { %\"struct.std::_Vector_base\" }\n%\"struct.std::_Vector_base\" = type { %\"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl\" }\n%\"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl\" = type { %\"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl_data\" }\n%\"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl_data\" = type { i32*, i32*, i32* }\n\n@.str = private unnamed_addr constant [26 x i8] c\"vector::_M_realloc_insert\\00\", align 1\n\n; Function Attrs: uwtable\ndefine dso_local void @_Z7compareSt6vectorIiSaIiEES1_(%\"class.std::vector\"* noalias nocapture sret(%\"class.std::vector\") align 8 %0, %\"class.std::vector\"* nocapture readonly %1, %\"class.std::vector\"* nocapture readonly %2) local_unnamed_addr #0 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {\n  %4 = bitcast %\"class.std::vector\"* %0 to i8*\n  tail call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(24) %4, i8 0, i64 24, i1 false) #7\n  %5 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %1, i64 0, i32 0, i32 0, i32 0, i32 1\n  %6 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %1, i64 0, i32 0, i32 0, i32 0, i32 0\n  %7 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %2, i64 0, i32 0, i32 0, i32 0, i32 0\n  %8 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0, i64 0, i32 0, i32 0, i32 0, i32 1\n  %9 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0, i64 0, i32 0, i32 0, i32 0, i32 2\n  %10 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0, i64 0, i32 0, i32 0, i32 0, i32 0\n  %11 = load i32*, i32** %5, align 8, !tbaa !3\n  %12 = load i32*, i32** %6, align 8, !tbaa !8\n  %13 = icmp eq i32* %11, %12\n  br i1 %13, label %91, label %14\n\n14:                                               ; preds = %3, %69\n  %15 = phi i32* [ %70, %69 ], [ %12, %3 ]\n  %16 = phi i32* [ %71, %69 ], [ %11, %3 ]\n  %17 = phi i32* [ %72, %69 ], [ null, %3 ]\n  %18 = phi i32* [ %73, %69 ], [ null, %3 ]\n  %19 = phi i32* [ %74, %69 ], [ null, %3 ]\n  %20 = phi i64 [ %75, %69 ], [ 0, %3 ]\n  %21 = getelementptr inbounds i32, i32* %15, i64 %20\n  %22 = load i32, i32* %21, align 4, !tbaa !9\n  %23 = load i32*, i32** %7, align 8, !tbaa !8\n  %24 = getelementptr inbounds i32, i32* %23, i64 %20\n  %25 = load i32, i32* %24, align 4, !tbaa !9\n  %26 = sub nsw i32 %22, %25\n  %27 = tail call i32 @llvm.abs.i32(i32 %26, i1 true)\n  %28 = icmp eq i32* %19, %18\n  br i1 %28, label %31, label %29\n\n29:                                               ; preds = %14\n  store i32 %27, i32* %19, align 4, !tbaa !9\n  %30 = getelementptr inbounds i32, i32* %19, i64 1\n  store i32* %30, i32** %8, align 8, !tbaa !3\n  br label %69\n\n31:                                               ; preds = %14\n  %32 = ptrtoint i32* %18 to i64\n  %33 = ptrtoint i32* %17 to i64\n  %34 = sub i64 %32, %33\n  %35 = ashr exact i64 %34, 2\n  %36 = icmp eq i64 %34, 9223372036854775804\n  br i1 %36, label %37, label %39\n\n37:                                               ; preds = %31\n  invoke void @_ZSt20__throw_length_errorPKc(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str, i64 0, i64 0)) #8\n          to label %38 unwind label %83\n\n38:                                               ; preds = %37\n  unreachable\n\n39:                                               ; preds = %31\n  %40 = icmp eq i64 %34, 0\n  %41 = select i1 %40, i64 1, i64 %35\n  %42 = add nsw i64 %41, %35\n  %43 = icmp ult i64 %42, %35\n  %44 = icmp ugt i64 %42, 2305843009213693951\n  %45 = or i1 %43, %44\n  %46 = select i1 %45, i64 2305843009213693951, i64 %42\n  %47 = icmp eq i64 %46, 0\n  br i1 %47, label %53, label %48\n\n48:                                               ; preds = %39\n  %49 = shl nuw nsw i64 %46, 2\n  %50 = invoke noalias nonnull i8* @_Znwm(i64 %49) #9\n          to label %51 unwind label %81\n\n51:                                               ; preds = %48\n  %52 = bitcast i8* %50 to i32*\n  br label %53\n\n53:                                               ; preds = %51, %39\n  %54 = phi i32* [ %52, %51 ], [ null, %39 ]\n  %55 = getelementptr inbounds i32, i32* %54, i64 %35\n  store i32 %27, i32* %55, align 4, !tbaa !9\n  %56 = icmp sgt i64 %34, 0\n  br i1 %56, label %57, label %60\n\n57:                                               ; preds = %53\n  %58 = bitcast i32* %54 to i8*\n  %59 = bitcast i32* %17 to i8*\n  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %58, i8* align 4 %59, i64 %34, i1 false) #7\n  br label %60\n\n60:                                               ; preds = %53, %57\n  %61 = getelementptr inbounds i32, i32* %55, i64 1\n  %62 = icmp eq i32* %17, null\n  br i1 %62, label %65, label %63\n\n63:                                               ; preds = %60\n  %64 = bitcast i32* %17 to i8*\n  tail call void @_ZdlPv(i8* nonnull %64) #7\n  br label %65\n\n65:                                               ; preds = %63, %60\n  store i32* %54, i32** %10, align 8, !tbaa !8\n  store i32* %61, i32** %8, align 8, !tbaa !3\n  %66 = getelementptr inbounds i32, i32* %54, i64 %46\n  store i32* %66, i32** %9, align 8, !tbaa !11\n  %67 = load i32*, i32** %5, align 8, !tbaa !3\n  %68 = load i32*, i32** %6, align 8, !tbaa !8\n  br label %69\n\n69:                                               ; preds = %65, %29\n  %70 = phi i32* [ %68, %65 ], [ %15, %29 ]\n  %71 = phi i32* [ %67, %65 ], [ %16, %29 ]\n  %72 = phi i32* [ %54, %65 ], [ %17, %29 ]\n  %73 = phi i32* [ %66, %65 ], [ %18, %29 ]\n  %74 = phi i32* [ %61, %65 ], [ %30, %29 ]\n  %75 = add nuw i64 %20, 1\n  %76 = ptrtoint i32* %71 to i64\n  %77 = ptrtoint i32* %70 to i64\n  %78 = sub i64 %76, %77\n  %79 = ashr exact i64 %78, 2\n  %80 = icmp ugt i64 %79, %75\n  br i1 %80, label %14, label %91, !llvm.loop !12\n\n81:                                               ; preds = %48\n  %82 = landingpad { i8*, i32 }\n          cleanup\n  br label %85\n\n83:                                               ; preds = %37\n  %84 = landingpad { i8*, i32 }\n          cleanup\n  br label %85\n\n85:                                               ; preds = %83, %81\n  %86 = phi { i8*, i32 } [ %82, %81 ], [ %84, %83 ]\n  %87 = icmp eq i32* %17, null\n  br i1 %87, label %90, label %88\n\n88:                                               ; preds = %85\n  %89 = bitcast i32* %17 to i8*\n  tail call void @_ZdlPv(i8* nonnull %89) #7\n  br label %90\n\n90:                                               ; preds = %85, %88\n  resume { i8*, i32 } %86\n\n91:                                               ; preds = %69, %3\n  ret void\n}\n\ndeclare dso_local i32 @__gxx_personality_v0(...)\n\n; Function Attrs: nobuiltin nounwind\ndeclare dso_local void @_ZdlPv(i8*) local_unnamed_addr #1\n\n; Function Attrs: noreturn\ndeclare dso_local void @_ZSt20__throw_length_errorPKc(i8*) local_unnamed_addr #2\n\n; Function Attrs: nobuiltin allocsize(0)\ndeclare dso_local nonnull i8* @_Znwm(i64) local_unnamed_addr #3\n\n; Function Attrs: argmemonly mustprogress nofree nounwind willreturn\ndeclare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #4\n\n; Function Attrs: nofree nosync nounwind readnone speculatable willreturn\ndeclare i32 @llvm.abs.i32(i32, i1 immarg) #5\n\n; Function Attrs: argmemonly nofree nounwind willreturn writeonly\ndeclare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #6\n\nattributes #0 = { uwtable \"frame-pointer\"=\"none\" \"min-legal-vector-width\"=\"0\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #1 = { nobuiltin nounwind \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #2 = { noreturn \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #3 = { nobuiltin allocsize(0) \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #4 = { argmemonly mustprogress nofree nounwind willreturn }\nattributes #5 = { nofree nosync nounwind readnone speculatable willreturn }\nattributes #6 = { argmemonly nofree nounwind willreturn writeonly }\nattributes #7 = { nounwind }\nattributes #8 = { noreturn }\nattributes #9 = { allocsize(0) }\n\n!llvm.module.flags = !{!0, !1}\n!llvm.ident = !{!2}\n\n!0 = !{i32 1, !\"wchar_size\", i32 4}\n!1 = !{i32 7, !\"uwtable\", i32 1}\n!2 = !{!\"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)\"}\n!3 = !{!4, !5, i64 8}\n!4 = !{!\"_ZTSNSt12_Vector_baseIiSaIiEE17_Vector_impl_dataE\", !5, i64 0, !5, i64 8, !5, i64 16}\n!5 = !{!\"any pointer\", !6, i64 0}\n!6 = !{!\"omnipotent char\", !7, i64 0}\n!7 = !{!\"Simple C++ TBAA\"}\n!8 = !{!4, !5, i64 0}\n!9 = !{!10, !10, i64 0}\n!10 = !{!\"int\", !6, i64 0}\n!11 = !{!4, !5, i64 16}\n!12 = distinct !{!12, !13}\n!13 = !{!\"llvm.loop.mustprogress\"}\n", "target": "This is the targeted source code:\n/*\nI think we all remember that feeling when the result of some long-awaited\nevent is finally known. The feelings and thoughts you have at that moment are\ndefinitely worth noting down and comparing.\nYour task is to determine if a person correctly guessed the results of a number of matches.\nYou are given two vectors of scores and guesses of equal length, where each index shows a match. \nReturn a vector of the same length denoting how far off each guess was. If they have guessed correctly,\nthe value is 0, and if not, the value is the absolute difference between the guess and the score.\n\n\nexample:\n\ncompare({1,2,3,4,5,1},{1,2,3,4,2,-2}) -> {0,0,0,0,3,3}\ncompare({0,5,0,0,0,4},{4,1,1,0,0,-2}) -> {4,4,1,0,0,6}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nvector<int> compare(vector<int> game,vector<int> guess){\n\n    vector<int> out;\n    for (int i=0;i<game.size();i++)\n    out.push_back(abs(game[i]-guess[i]));\n    return out;\n}\n"}
{"input": "Convert this to C++:\n; ModuleID = '../../Human_xBenchmarks_164/CPP_153/CPP_153.cpp'\nsource_filename = \"../../Human_xBenchmarks_164/CPP_153/CPP_153.cpp\"\ntarget datalayout = \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\ntarget triple = \"x86_64-unknown-linux-gnu\"\n\n%\"class.std::__cxx11::basic_string\" = type { %\"struct.std::__cxx11::basic_string<char>::_Alloc_hider\", i64, %union.anon }\n%\"struct.std::__cxx11::basic_string<char>::_Alloc_hider\" = type { i8* }\n%union.anon = type { i64, [8 x i8] }\n%\"class.std::vector\" = type { %\"struct.std::_Vector_base\" }\n%\"struct.std::_Vector_base\" = type { %\"struct.std::_Vector_base<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char>>>::_Vector_impl\" }\n%\"struct.std::_Vector_base<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char>>>::_Vector_impl\" = type { %\"struct.std::_Vector_base<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char>>>::_Vector_impl_data\" }\n%\"struct.std::_Vector_base<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char>>>::_Vector_impl_data\" = type { %\"class.std::__cxx11::basic_string\"*, %\"class.std::__cxx11::basic_string\"*, %\"class.std::__cxx11::basic_string\"* }\n\n; Function Attrs: uwtable\ndefine dso_local void @_Z19Strongest_ExtensionNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS4_SaIS4_EE(%\"class.std::__cxx11::basic_string\"* noalias sret(%\"class.std::__cxx11::basic_string\") align 8 %0, %\"class.std::__cxx11::basic_string\"* nocapture readonly %1, %\"class.std::vector\"* nocapture readonly %2) local_unnamed_addr #0 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {\n  %4 = alloca i64, align 8\n  %5 = alloca %\"class.std::__cxx11::basic_string\", align 8\n  %6 = alloca %\"class.std::__cxx11::basic_string\", align 8\n  %7 = bitcast %\"class.std::__cxx11::basic_string\"* %5 to i8*\n  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %7) #7\n  %8 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %5, i64 0, i32 2\n  %9 = bitcast %\"class.std::__cxx11::basic_string\"* %5 to %union.anon**\n  store %union.anon* %8, %union.anon** %9, align 8, !tbaa !3\n  %10 = bitcast %union.anon* %8 to i8*\n  %11 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %5, i64 0, i32 0, i32 0\n  %12 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %5, i64 0, i32 1\n  store i64 0, i64* %12, align 8, !tbaa !8\n  store i8 0, i8* %10, align 8, !tbaa !11\n  %13 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %2, i64 0, i32 0, i32 0, i32 0, i32 1\n  %14 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %2, i64 0, i32 0, i32 0, i32 0, i32 0\n  %15 = load %\"class.std::__cxx11::basic_string\"*, %\"class.std::__cxx11::basic_string\"** %13, align 8, !tbaa !12\n  %16 = load %\"class.std::__cxx11::basic_string\"*, %\"class.std::__cxx11::basic_string\"** %14, align 8, !tbaa !14\n  %17 = icmp eq %\"class.std::__cxx11::basic_string\"* %15, %16\n  br i1 %17, label %68, label %18\n\n18:                                               ; preds = %3, %129\n  %19 = phi %\"class.std::__cxx11::basic_string\"* [ %130, %129 ], [ %16, %3 ]\n  %20 = phi %\"class.std::__cxx11::basic_string\"* [ %131, %129 ], [ %15, %3 ]\n  %21 = phi i64 [ %133, %129 ], [ 0, %3 ]\n  %22 = phi i32 [ %132, %129 ], [ -1000, %3 ]\n  %23 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %19, i64 %21\n  %24 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %19, i64 %21, i32 1\n  %25 = load i64, i64* %24, align 8, !tbaa !8\n  %26 = icmp eq i64 %25, 0\n  br i1 %26, label %105, label %27\n\n27:                                               ; preds = %18\n  %28 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %23, i64 0, i32 0, i32 0\n  %29 = load i8*, i8** %28, align 8, !tbaa !15\n  %30 = icmp ult i64 %25, 8\n  br i1 %30, label %65, label %31\n\n31:                                               ; preds = %27\n  %32 = and i64 %25, -8\n  br label %33\n\n33:                                               ; preds = %33, %31\n  %34 = phi i64 [ 0, %31 ], [ %59, %33 ]\n  %35 = phi <4 x i32> [ zeroinitializer, %31 ], [ %57, %33 ]\n  %36 = phi <4 x i32> [ zeroinitializer, %31 ], [ %58, %33 ]\n  %37 = getelementptr inbounds i8, i8* %29, i64 %34\n  %38 = bitcast i8* %37 to <4 x i8>*\n  %39 = load <4 x i8>, <4 x i8>* %38, align 1, !tbaa !11\n  %40 = getelementptr inbounds i8, i8* %37, i64 4\n  %41 = bitcast i8* %40 to <4 x i8>*\n  %42 = load <4 x i8>, <4 x i8>* %41, align 1, !tbaa !11\n  %43 = add <4 x i8> %39, <i8 -65, i8 -65, i8 -65, i8 -65>\n  %44 = add <4 x i8> %42, <i8 -65, i8 -65, i8 -65, i8 -65>\n  %45 = icmp ult <4 x i8> %43, <i8 26, i8 26, i8 26, i8 26>\n  %46 = icmp ult <4 x i8> %44, <i8 26, i8 26, i8 26, i8 26>\n  %47 = zext <4 x i1> %45 to <4 x i32>\n  %48 = zext <4 x i1> %46 to <4 x i32>\n  %49 = add <4 x i32> %35, %47\n  %50 = add <4 x i32> %36, %48\n  %51 = add <4 x i8> %39, <i8 -97, i8 -97, i8 -97, i8 -97>\n  %52 = add <4 x i8> %42, <i8 -97, i8 -97, i8 -97, i8 -97>\n  %53 = icmp ult <4 x i8> %51, <i8 26, i8 26, i8 26, i8 26>\n  %54 = icmp ult <4 x i8> %52, <i8 26, i8 26, i8 26, i8 26>\n  %55 = sext <4 x i1> %53 to <4 x i32>\n  %56 = sext <4 x i1> %54 to <4 x i32>\n  %57 = add <4 x i32> %49, %55\n  %58 = add <4 x i32> %50, %56\n  %59 = add nuw i64 %34, 8\n  %60 = icmp eq i64 %59, %32\n  br i1 %60, label %61, label %33, !llvm.loop !16\n\n61:                                               ; preds = %33\n  %62 = add <4 x i32> %58, %57\n  %63 = call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %62)\n  %64 = icmp eq i64 %25, %32\n  br i1 %64, label %105, label %65\n\n65:                                               ; preds = %27, %61\n  %66 = phi i64 [ 0, %27 ], [ %32, %61 ]\n  %67 = phi i32 [ 0, %27 ], [ %63, %61 ]\n  br label %108\n\n68:                                               ; preds = %129, %3\n  %69 = bitcast %\"class.std::__cxx11::basic_string\"* %6 to i8*\n  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %69) #7\n  call void @llvm.experimental.noalias.scope.decl(metadata !19)\n  %70 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %6, i64 0, i32 2\n  %71 = bitcast %\"class.std::__cxx11::basic_string\"* %6 to %union.anon**\n  store %union.anon* %70, %union.anon** %71, align 8, !tbaa !3, !alias.scope !19\n  %72 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %1, i64 0, i32 0, i32 0\n  %73 = load i8*, i8** %72, align 8, !tbaa !15, !noalias !19\n  %74 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %1, i64 0, i32 1\n  %75 = load i64, i64* %74, align 8, !tbaa !8, !noalias !19\n  %76 = bitcast i64* %4 to i8*\n  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %76) #7, !noalias !19\n  store i64 %75, i64* %4, align 8, !tbaa !22, !noalias !19\n  %77 = icmp ugt i64 %75, 15\n  br i1 %77, label %80, label %78\n\n78:                                               ; preds = %68\n  %79 = bitcast %union.anon* %70 to i8*\n  br label %86\n\n80:                                               ; preds = %68\n  %81 = invoke i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %6, i64* nonnull align 8 dereferenceable(8) %4, i64 0)\n          to label %82 unwind label %172\n\n82:                                               ; preds = %80\n  %83 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %6, i64 0, i32 0, i32 0\n  store i8* %81, i8** %83, align 8, !tbaa !15, !alias.scope !19\n  %84 = load i64, i64* %4, align 8, !tbaa !22, !noalias !19\n  %85 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %6, i64 0, i32 2, i32 0\n  store i64 %84, i64* %85, align 8, !tbaa !11, !alias.scope !19\n  br label %86\n\n86:                                               ; preds = %82, %78\n  %87 = phi i8* [ %79, %78 ], [ %81, %82 ]\n  switch i64 %75, label %90 [\n    i64 1, label %88\n    i64 0, label %91\n  ]\n\n88:                                               ; preds = %86\n  %89 = load i8, i8* %73, align 1, !tbaa !11\n  store i8 %89, i8* %87, align 1, !tbaa !11\n  br label %91\n\n90:                                               ; preds = %86\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %87, i8* align 1 %73, i64 %75, i1 false) #7\n  br label %91\n\n91:                                               ; preds = %90, %88, %86\n  %92 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %6, i64 0, i32 0, i32 0\n  %93 = load i64, i64* %4, align 8, !tbaa !22, !noalias !19\n  %94 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %6, i64 0, i32 1\n  store i64 %93, i64* %94, align 8, !tbaa !8, !alias.scope !19\n  %95 = load i8*, i8** %92, align 8, !tbaa !15, !alias.scope !19\n  %96 = getelementptr inbounds i8, i8* %95, i64 %93\n  store i8 0, i8* %96, align 1, !tbaa !11\n  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %76) #7, !noalias !19\n  %97 = load i64, i64* %94, align 8, !tbaa !8, !alias.scope !19\n  %98 = invoke nonnull align 8 dereferenceable(32) %\"class.std::__cxx11::basic_string\"* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEmmmc(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %6, i64 %97, i64 0, i64 1, i8 signext 46)\n          to label %139 unwind label %99\n\n99:                                               ; preds = %91\n  %100 = landingpad { i8*, i32 }\n          cleanup\n  %101 = load i8*, i8** %92, align 8, !tbaa !15, !alias.scope !19\n  %102 = bitcast %union.anon* %70 to i8*\n  %103 = icmp eq i8* %101, %102\n  br i1 %103, label %180, label %104\n\n104:                                              ; preds = %99\n  call void @_ZdlPv(i8* %101) #7\n  br label %180\n\n105:                                              ; preds = %108, %61, %18\n  %106 = phi i32 [ 0, %18 ], [ %63, %61 ], [ %120, %108 ]\n  %107 = icmp sgt i32 %106, %22\n  br i1 %107, label %123, label %129\n\n108:                                              ; preds = %65, %108\n  %109 = phi i64 [ %121, %108 ], [ %66, %65 ]\n  %110 = phi i32 [ %120, %108 ], [ %67, %65 ]\n  %111 = getelementptr inbounds i8, i8* %29, i64 %109\n  %112 = load i8, i8* %111, align 1, !tbaa !11\n  %113 = add i8 %112, -65\n  %114 = icmp ult i8 %113, 26\n  %115 = zext i1 %114 to i32\n  %116 = add nsw i32 %110, %115\n  %117 = add i8 %112, -97\n  %118 = icmp ult i8 %117, 26\n  %119 = sext i1 %118 to i32\n  %120 = add nsw i32 %116, %119\n  %121 = add nuw nsw i64 %109, 1\n  %122 = icmp eq i64 %121, %25\n  br i1 %122, label %105, label %108, !llvm.loop !23\n\n123:                                              ; preds = %105\n  invoke void @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %5, %\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %23)\n          to label %124 unwind label %127\n\n124:                                              ; preds = %123\n  %125 = load %\"class.std::__cxx11::basic_string\"*, %\"class.std::__cxx11::basic_string\"** %13, align 8, !tbaa !12\n  %126 = load %\"class.std::__cxx11::basic_string\"*, %\"class.std::__cxx11::basic_string\"** %14, align 8, !tbaa !14\n  br label %129\n\n127:                                              ; preds = %123\n  %128 = landingpad { i8*, i32 }\n          cleanup\n  br label %182\n\n129:                                              ; preds = %124, %105\n  %130 = phi %\"class.std::__cxx11::basic_string\"* [ %19, %105 ], [ %126, %124 ]\n  %131 = phi %\"class.std::__cxx11::basic_string\"* [ %20, %105 ], [ %125, %124 ]\n  %132 = phi i32 [ %22, %105 ], [ %106, %124 ]\n  %133 = add nuw i64 %21, 1\n  %134 = ptrtoint %\"class.std::__cxx11::basic_string\"* %131 to i64\n  %135 = ptrtoint %\"class.std::__cxx11::basic_string\"* %130 to i64\n  %136 = sub i64 %134, %135\n  %137 = ashr exact i64 %136, 5\n  %138 = icmp ugt i64 %137, %133\n  br i1 %138, label %18, label %68, !llvm.loop !25\n\n139:                                              ; preds = %91\n  call void @llvm.experimental.noalias.scope.decl(metadata !26)\n  %140 = load i8*, i8** %11, align 8, !tbaa !15, !noalias !26\n  %141 = load i64, i64* %12, align 8, !tbaa !8, !noalias !26\n  %142 = invoke nonnull align 8 dereferenceable(32) %\"class.std::__cxx11::basic_string\"* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %6, i8* %140, i64 %141)\n          to label %143 unwind label %174\n\n143:                                              ; preds = %139\n  %144 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 2\n  %145 = bitcast %\"class.std::__cxx11::basic_string\"* %0 to %union.anon**\n  store %union.anon* %144, %union.anon** %145, align 8, !tbaa !3, !alias.scope !26\n  %146 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %142, i64 0, i32 0, i32 0\n  %147 = load i8*, i8** %146, align 8, !tbaa !15\n  %148 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %142, i64 0, i32 2\n  %149 = bitcast %union.anon* %148 to i8*\n  %150 = icmp eq i8* %147, %149\n  br i1 %150, label %151, label %153\n\n151:                                              ; preds = %143\n  %152 = bitcast %union.anon* %144 to i8*\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(16) %152, i8* noundef nonnull align 8 dereferenceable(16) %147, i64 16, i1 false) #7\n  br label %158\n\n153:                                              ; preds = %143\n  %154 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 0, i32 0\n  store i8* %147, i8** %154, align 8, !tbaa !15, !alias.scope !26\n  %155 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %142, i64 0, i32 2, i32 0\n  %156 = load i64, i64* %155, align 8, !tbaa !11\n  %157 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 2, i32 0\n  store i64 %156, i64* %157, align 8, !tbaa !11, !alias.scope !26\n  br label %158\n\n158:                                              ; preds = %153, %151\n  %159 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %142, i64 0, i32 1\n  %160 = load i64, i64* %159, align 8, !tbaa !8\n  %161 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 1\n  store i64 %160, i64* %161, align 8, !tbaa !8, !alias.scope !26\n  %162 = bitcast %\"class.std::__cxx11::basic_string\"* %142 to %union.anon**\n  store %union.anon* %148, %union.anon** %162, align 8, !tbaa !15\n  store i64 0, i64* %159, align 8, !tbaa !8\n  store i8 0, i8* %149, align 8, !tbaa !11\n  %163 = load i8*, i8** %92, align 8, !tbaa !15\n  %164 = bitcast %union.anon* %70 to i8*\n  %165 = icmp eq i8* %163, %164\n  br i1 %165, label %167, label %166\n\n166:                                              ; preds = %158\n  call void @_ZdlPv(i8* %163) #7\n  br label %167\n\n167:                                              ; preds = %158, %166\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %69) #7\n  %168 = load i8*, i8** %11, align 8, !tbaa !15\n  %169 = icmp eq i8* %168, %10\n  br i1 %169, label %171, label %170\n\n170:                                              ; preds = %167\n  call void @_ZdlPv(i8* %168) #7\n  br label %171\n\n171:                                              ; preds = %167, %170\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %7) #7\n  ret void\n\n172:                                              ; preds = %80\n  %173 = landingpad { i8*, i32 }\n          cleanup\n  br label %180\n\n174:                                              ; preds = %139\n  %175 = landingpad { i8*, i32 }\n          cleanup\n  %176 = load i8*, i8** %92, align 8, !tbaa !15\n  %177 = bitcast %union.anon* %70 to i8*\n  %178 = icmp eq i8* %176, %177\n  br i1 %178, label %180, label %179\n\n179:                                              ; preds = %174\n  call void @_ZdlPv(i8* %176) #7\n  br label %180\n\n180:                                              ; preds = %179, %174, %172, %104, %99\n  %181 = phi { i8*, i32 } [ %173, %172 ], [ %100, %104 ], [ %100, %99 ], [ %175, %174 ], [ %175, %179 ]\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %69) #7\n  br label %182\n\n182:                                              ; preds = %180, %127\n  %183 = phi { i8*, i32 } [ %128, %127 ], [ %181, %180 ]\n  %184 = load i8*, i8** %11, align 8, !tbaa !15\n  %185 = icmp eq i8* %184, %10\n  br i1 %185, label %187, label %186\n\n186:                                              ; preds = %182\n  call void @_ZdlPv(i8* %184) #7\n  br label %187\n\n187:                                              ; preds = %186, %182\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %7) #7\n  resume { i8*, i32 } %183\n}\n\n; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn\ndeclare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1\n\ndeclare dso_local i32 @__gxx_personality_v0(...)\n\n; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn\ndeclare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1\n\n; Function Attrs: nobuiltin nounwind\ndeclare dso_local void @_ZdlPv(i8*) local_unnamed_addr #2\n\ndeclare dso_local i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32), i64* nonnull align 8 dereferenceable(8), i64) local_unnamed_addr #3\n\n; Function Attrs: argmemonly mustprogress nofree nounwind willreturn\ndeclare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #4\n\ndeclare dso_local void @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32), %\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32)) local_unnamed_addr #3\n\ndeclare dso_local nonnull align 8 dereferenceable(32) %\"class.std::__cxx11::basic_string\"* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEmmmc(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32), i64, i64, i64, i8 signext) local_unnamed_addr #3\n\ndeclare dso_local nonnull align 8 dereferenceable(32) %\"class.std::__cxx11::basic_string\"* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32), i8*, i64) local_unnamed_addr #3\n\n; Function Attrs: inaccessiblememonly nofree nosync nounwind willreturn\ndeclare void @llvm.experimental.noalias.scope.decl(metadata) #5\n\n; Function Attrs: nofree nosync nounwind readnone willreturn\ndeclare i32 @llvm.vector.reduce.add.v4i32(<4 x i32>) #6\n\nattributes #0 = { uwtable \"frame-pointer\"=\"none\" \"min-legal-vector-width\"=\"0\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #1 = { argmemonly mustprogress nofree nosync nounwind willreturn }\nattributes #2 = { nobuiltin nounwind \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #3 = { \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #4 = { argmemonly mustprogress nofree nounwind willreturn }\nattributes #5 = { inaccessiblememonly nofree nosync nounwind willreturn }\nattributes #6 = { nofree nosync nounwind readnone willreturn }\nattributes #7 = { nounwind }\n\n!llvm.module.flags = !{!0, !1}\n!llvm.ident = !{!2}\n\n!0 = !{i32 1, !\"wchar_size\", i32 4}\n!1 = !{i32 7, !\"uwtable\", i32 1}\n!2 = !{!\"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)\"}\n!3 = !{!4, !5, i64 0}\n!4 = !{!\"_ZTSNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderE\", !5, i64 0}\n!5 = !{!\"any pointer\", !6, i64 0}\n!6 = !{!\"omnipotent char\", !7, i64 0}\n!7 = !{!\"Simple C++ TBAA\"}\n!8 = !{!9, !10, i64 8}\n!9 = !{!\"_ZTSNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE\", !4, i64 0, !10, i64 8, !6, i64 16}\n!10 = !{!\"long\", !6, i64 0}\n!11 = !{!6, !6, i64 0}\n!12 = !{!13, !5, i64 8}\n!13 = !{!\"_ZTSNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_Vector_impl_dataE\", !5, i64 0, !5, i64 8, !5, i64 16}\n!14 = !{!13, !5, i64 0}\n!15 = !{!9, !5, i64 0}\n!16 = distinct !{!16, !17, !18}\n!17 = !{!\"llvm.loop.mustprogress\"}\n!18 = !{!\"llvm.loop.isvectorized\", i32 1}\n!19 = !{!20}\n!20 = distinct !{!20, !21, !\"_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_S5_: argument 0\"}\n!21 = distinct !{!21, !\"_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_S5_\"}\n!22 = !{!10, !10, i64 0}\n!23 = distinct !{!23, !17, !24, !18}\n!24 = !{!\"llvm.loop.unroll.runtime.disable\"}\n!25 = distinct !{!25, !17}\n!26 = !{!27}\n!27 = distinct !{!27, !28, !\"_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_: argument 0\"}\n!28 = distinct !{!28, !\"_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_\"}\n", "target": "This is the targeted source code:\n/*\nYou will be given the name of a class (a string) and a vector of extensions.\nThe extensions are to be used to load additional classes to the class. The\nstrength of the extension is as follows: Let CAP be the number of the uppercase\nletters in the extension's name, and let SM be the number of lowercase letters \nin the extension's name, the strength is given by the fraction CAP - SM. \nYou should find the strongest extension and return a string in this \nformat: ClassName.StrongestExtensionName.\nIf there are two or more extensions with the same strength, you should\nchoose the one that comes first in the vector.\nFor example, if you are given \"Slices\" as the class and a vector of the\nextensions: {\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"} then you should\nreturn \"Slices.SErviNGSliCes\" since \"SErviNGSliCes\" is the strongest extension \n(its strength is -1).\nExample:\nfor Strongest_Extension(\"my_class\", {\"AA\", \"Be\", \"CC\"}) == \"my_class.AA\"\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring Strongest_Extension(string class_name,vector<string> extensions){\n\n    string strongest=\"\";\n    int max=-1000;\n    for (int i=0;i<extensions.size();i++)\n    {\n        int strength=0;\n        for (int j=0;j<extensions[i].length();j++)\n        {\n            char chr=extensions[i][j];\n            if (chr>=65 and chr<=90) strength+=1;\n            if (chr>=97 and chr<=122) strength-=1;\n        }\n        if (strength>max) \n        {\n            max=strength;\n            strongest=extensions[i];\n        }\n    }\n    return class_name+'.'+strongest;\n}\n"}
{"input": "Convert this to C++:\n; ModuleID = '../../Human_xBenchmarks_164/CPP_154/CPP_154.cpp'\nsource_filename = \"../../Human_xBenchmarks_164/CPP_154/CPP_154.cpp\"\ntarget datalayout = \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\ntarget triple = \"x86_64-unknown-linux-gnu\"\n\n%\"class.std::__cxx11::basic_string\" = type { %\"struct.std::__cxx11::basic_string<char>::_Alloc_hider\", i64, %union.anon }\n%\"struct.std::__cxx11::basic_string<char>::_Alloc_hider\" = type { i8* }\n%union.anon = type { i64, [8 x i8] }\n\n; Function Attrs: uwtable\ndefine dso_local zeroext i1 @_Z16cycpattern_checkNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES4_(%\"class.std::__cxx11::basic_string\"* %0, %\"class.std::__cxx11::basic_string\"* nocapture readonly %1) local_unnamed_addr #0 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {\n  %3 = alloca i64, align 8\n  %4 = alloca i64, align 8\n  %5 = alloca %\"class.std::__cxx11::basic_string\", align 8\n  %6 = alloca %\"class.std::__cxx11::basic_string\", align 8\n  %7 = alloca %\"class.std::__cxx11::basic_string\", align 8\n  %8 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %1, i64 0, i32 1\n  %9 = bitcast %\"class.std::__cxx11::basic_string\"* %5 to i8*\n  %10 = bitcast %\"class.std::__cxx11::basic_string\"* %6 to i8*\n  %11 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %6, i64 0, i32 2\n  %12 = bitcast %\"class.std::__cxx11::basic_string\"* %6 to %union.anon**\n  %13 = bitcast %union.anon* %11 to i8*\n  %14 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %1, i64 0, i32 0, i32 0\n  %15 = bitcast i64* %4 to i8*\n  %16 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %6, i64 0, i32 0, i32 0\n  %17 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %6, i64 0, i32 2, i32 0\n  %18 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %6, i64 0, i32 1\n  %19 = bitcast %\"class.std::__cxx11::basic_string\"* %7 to i8*\n  %20 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %7, i64 0, i32 2\n  %21 = bitcast %\"class.std::__cxx11::basic_string\"* %7 to %union.anon**\n  %22 = bitcast %union.anon* %20 to i8*\n  %23 = bitcast i64* %3 to i8*\n  %24 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %7, i64 0, i32 0, i32 0\n  %25 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %7, i64 0, i32 2, i32 0\n  %26 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %7, i64 0, i32 1\n  %27 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %5, i64 0, i32 2\n  %28 = bitcast %\"class.std::__cxx11::basic_string\"* %5 to %union.anon**\n  %29 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %5, i64 0, i32 0, i32 0\n  %30 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %5, i64 0, i32 2, i32 0\n  %31 = bitcast %union.anon* %27 to i8*\n  %32 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %5, i64 0, i32 1\n  %33 = load i64, i64* %8, align 8, !tbaa !3\n  %34 = icmp eq i64 %33, 0\n  br i1 %34, label %141, label %38\n\n35:                                               ; preds = %124\n  %36 = load i64, i64* %8, align 8, !tbaa !3\n  %37 = icmp ugt i64 %36, %125\n  br i1 %37, label %38, label %139, !llvm.loop !10\n\n38:                                               ; preds = %2, %35\n  %39 = phi i64 [ %125, %35 ], [ 0, %2 ]\n  %40 = phi i64 [ %36, %35 ], [ %33, %2 ]\n  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %9) #7\n  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %10) #7\n  call void @llvm.experimental.noalias.scope.decl(metadata !12)\n  store %union.anon* %11, %union.anon** %12, align 8, !tbaa !15, !alias.scope !12\n  %41 = load i8*, i8** %14, align 8, !tbaa !16, !noalias !12\n  %42 = getelementptr inbounds i8, i8* %41, i64 %39\n  %43 = sub i64 %40, %39\n  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %15) #7, !noalias !12\n  store i64 %43, i64* %4, align 8, !tbaa !17, !noalias !12\n  %44 = icmp ugt i64 %43, 15\n  br i1 %44, label %45, label %48\n\n45:                                               ; preds = %38\n  %46 = call i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %6, i64* nonnull align 8 dereferenceable(8) %4, i64 0)\n  store i8* %46, i8** %16, align 8, !tbaa !16, !alias.scope !12\n  %47 = load i64, i64* %4, align 8, !tbaa !17, !noalias !12\n  store i64 %47, i64* %17, align 8, !tbaa !18, !alias.scope !12\n  br label %48\n\n48:                                               ; preds = %45, %38\n  %49 = phi i8* [ %46, %45 ], [ %13, %38 ]\n  switch i64 %43, label %52 [\n    i64 1, label %50\n    i64 0, label %53\n  ]\n\n50:                                               ; preds = %48\n  %51 = load i8, i8* %42, align 1, !tbaa !18\n  store i8 %51, i8* %49, align 1, !tbaa !18\n  br label %53\n\n52:                                               ; preds = %48\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %49, i8* align 1 %42, i64 %43, i1 false) #7\n  br label %53\n\n53:                                               ; preds = %48, %50, %52\n  %54 = load i64, i64* %4, align 8, !tbaa !17, !noalias !12\n  store i64 %54, i64* %18, align 8, !tbaa !3, !alias.scope !12\n  %55 = load i8*, i8** %16, align 8, !tbaa !16, !alias.scope !12\n  %56 = getelementptr inbounds i8, i8* %55, i64 %54\n  store i8 0, i8* %56, align 1, !tbaa !18\n  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %15) #7, !noalias !12\n  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %19) #7\n  call void @llvm.experimental.noalias.scope.decl(metadata !19)\n  %57 = load i64, i64* %8, align 8, !tbaa !3, !noalias !19\n  store %union.anon* %20, %union.anon** %21, align 8, !tbaa !15, !alias.scope !19\n  %58 = load i8*, i8** %14, align 8, !tbaa !16, !noalias !19\n  %59 = icmp ugt i64 %57, %39\n  %60 = select i1 %59, i64 %39, i64 %57\n  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %23) #7, !noalias !19\n  store i64 %60, i64* %3, align 8, !tbaa !17, !noalias !19\n  %61 = icmp ugt i64 %60, 15\n  br i1 %61, label %62, label %66\n\n62:                                               ; preds = %53\n  %63 = invoke i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %7, i64* nonnull align 8 dereferenceable(8) %3, i64 0)\n          to label %64 unwind label %126\n\n64:                                               ; preds = %62\n  store i8* %63, i8** %24, align 8, !tbaa !16, !alias.scope !19\n  %65 = load i64, i64* %3, align 8, !tbaa !17, !noalias !19\n  store i64 %65, i64* %25, align 8, !tbaa !18, !alias.scope !19\n  br label %66\n\n66:                                               ; preds = %64, %53\n  %67 = phi i8* [ %63, %64 ], [ %22, %53 ]\n  %68 = trunc i64 %60 to i32\n  switch i32 %68, label %71 [\n    i32 1, label %69\n    i32 0, label %72\n  ]\n\n69:                                               ; preds = %66\n  %70 = load i8, i8* %58, align 1, !tbaa !18\n  store i8 %70, i8* %67, align 1, !tbaa !18\n  br label %72\n\n71:                                               ; preds = %66\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %67, i8* align 1 %58, i64 %60, i1 false) #7\n  br label %72\n\n72:                                               ; preds = %71, %69, %66\n  %73 = load i64, i64* %3, align 8, !tbaa !17, !noalias !19\n  store i64 %73, i64* %26, align 8, !tbaa !3, !alias.scope !19\n  %74 = load i8*, i8** %24, align 8, !tbaa !16, !alias.scope !19\n  %75 = getelementptr inbounds i8, i8* %74, i64 %73\n  store i8 0, i8* %75, align 1, !tbaa !18\n  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %23) #7, !noalias !19\n  call void @llvm.experimental.noalias.scope.decl(metadata !22)\n  %76 = load i64, i64* %18, align 8, !tbaa !3, !noalias !22\n  %77 = load i64, i64* %26, align 8, !tbaa !3, !noalias !22\n  %78 = add i64 %77, %76\n  %79 = load i8*, i8** %16, align 8, !tbaa !16, !noalias !22\n  %80 = icmp eq i8* %79, %13\n  %81 = load i64, i64* %17, align 8, !noalias !22\n  %82 = select i1 %80, i64 15, i64 %81\n  %83 = icmp ugt i64 %78, %82\n  %84 = load i8*, i8** %24, align 8, !tbaa !16, !noalias !22\n  br i1 %83, label %85, label %92\n\n85:                                               ; preds = %72\n  %86 = icmp eq i8* %84, %22\n  %87 = load i64, i64* %25, align 8, !noalias !22\n  %88 = select i1 %86, i64 15, i64 %87\n  %89 = icmp ugt i64 %78, %88\n  br i1 %89, label %92, label %90\n\n90:                                               ; preds = %85\n  %91 = invoke nonnull align 8 dereferenceable(32) %\"class.std::__cxx11::basic_string\"* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %7, i64 0, i64 0, i8* %79, i64 %76)\n          to label %94 unwind label %128\n\n92:                                               ; preds = %85, %72\n  %93 = invoke nonnull align 8 dereferenceable(32) %\"class.std::__cxx11::basic_string\"* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %6, i8* %84, i64 %77)\n          to label %94 unwind label %128\n\n94:                                               ; preds = %92, %90\n  %95 = phi %\"class.std::__cxx11::basic_string\"* [ %91, %90 ], [ %93, %92 ]\n  store %union.anon* %27, %union.anon** %28, align 8, !tbaa !15, !alias.scope !22\n  %96 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %95, i64 0, i32 0, i32 0\n  %97 = load i8*, i8** %96, align 8, !tbaa !16\n  %98 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %95, i64 0, i32 2\n  %99 = bitcast %union.anon* %98 to i8*\n  %100 = icmp eq i8* %97, %99\n  br i1 %100, label %101, label %102\n\n101:                                              ; preds = %94\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(16) %31, i8* noundef nonnull align 8 dereferenceable(16) %97, i64 16, i1 false) #7\n  br label %105\n\n102:                                              ; preds = %94\n  store i8* %97, i8** %29, align 8, !tbaa !16, !alias.scope !22\n  %103 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %95, i64 0, i32 2, i32 0\n  %104 = load i64, i64* %103, align 8, !tbaa !18\n  store i64 %104, i64* %30, align 8, !tbaa !18, !alias.scope !22\n  br label %105\n\n105:                                              ; preds = %102, %101\n  %106 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %95, i64 0, i32 1\n  %107 = load i64, i64* %106, align 8, !tbaa !3\n  store i64 %107, i64* %32, align 8, !tbaa !3, !alias.scope !22\n  %108 = bitcast %\"class.std::__cxx11::basic_string\"* %95 to %union.anon**\n  store %union.anon* %98, %union.anon** %108, align 8, !tbaa !16\n  store i64 0, i64* %106, align 8, !tbaa !3\n  store i8 0, i8* %99, align 8, !tbaa !18\n  %109 = load i8*, i8** %24, align 8, !tbaa !16\n  %110 = icmp eq i8* %109, %22\n  br i1 %110, label %112, label %111\n\n111:                                              ; preds = %105\n  call void @_ZdlPv(i8* %109) #7\n  br label %112\n\n112:                                              ; preds = %105, %111\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %19) #7\n  %113 = load i8*, i8** %16, align 8, !tbaa !16\n  %114 = icmp eq i8* %113, %13\n  br i1 %114, label %116, label %115\n\n115:                                              ; preds = %112\n  call void @_ZdlPv(i8* %113) #7\n  br label %116\n\n116:                                              ; preds = %112, %115\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %10) #7\n  %117 = load i8*, i8** %29, align 8, !tbaa !16\n  %118 = load i64, i64* %32, align 8, !tbaa !3\n  %119 = call i64 @_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcmm(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %0, i8* %117, i64 0, i64 %118) #7\n  %120 = icmp eq i64 %119, -1\n  %121 = load i8*, i8** %29, align 8, !tbaa !16\n  %122 = icmp eq i8* %121, %31\n  br i1 %122, label %124, label %123\n\n123:                                              ; preds = %116\n  call void @_ZdlPv(i8* %121) #7\n  br label %124\n\n124:                                              ; preds = %116, %123\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %9) #7\n  %125 = add i64 %39, 1\n  br i1 %120, label %35, label %139\n\n126:                                              ; preds = %62\n  %127 = landingpad { i8*, i32 }\n          cleanup\n  br label %133\n\n128:                                              ; preds = %92, %90\n  %129 = landingpad { i8*, i32 }\n          cleanup\n  %130 = load i8*, i8** %24, align 8, !tbaa !16\n  %131 = icmp eq i8* %130, %22\n  br i1 %131, label %133, label %132\n\n132:                                              ; preds = %128\n  call void @_ZdlPv(i8* %130) #7\n  br label %133\n\n133:                                              ; preds = %132, %128, %126\n  %134 = phi { i8*, i32 } [ %127, %126 ], [ %129, %128 ], [ %129, %132 ]\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %19) #7\n  %135 = load i8*, i8** %16, align 8, !tbaa !16\n  %136 = icmp eq i8* %135, %13\n  br i1 %136, label %138, label %137\n\n137:                                              ; preds = %133\n  call void @_ZdlPv(i8* %135) #7\n  br label %138\n\n138:                                              ; preds = %133, %137\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %10) #7\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %9) #7\n  resume { i8*, i32 } %134\n\n139:                                              ; preds = %35, %124\n  %140 = xor i1 %120, true\n  br label %141\n\n141:                                              ; preds = %139, %2\n  %142 = phi i1 [ false, %2 ], [ %140, %139 ]\n  ret i1 %142\n}\n\n; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn\ndeclare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1\n\ndeclare dso_local i32 @__gxx_personality_v0(...)\n\n; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn\ndeclare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1\n\n; Function Attrs: nobuiltin nounwind\ndeclare dso_local void @_ZdlPv(i8*) local_unnamed_addr #2\n\ndeclare dso_local i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32), i64* nonnull align 8 dereferenceable(8), i64) local_unnamed_addr #3\n\n; Function Attrs: argmemonly mustprogress nofree nounwind willreturn\ndeclare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #4\n\ndeclare dso_local nonnull align 8 dereferenceable(32) %\"class.std::__cxx11::basic_string\"* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32), i64, i64, i8*, i64) local_unnamed_addr #3\n\ndeclare dso_local nonnull align 8 dereferenceable(32) %\"class.std::__cxx11::basic_string\"* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32), i8*, i64) local_unnamed_addr #3\n\n; Function Attrs: nounwind\ndeclare dso_local i64 @_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcmm(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32), i8*, i64, i64) local_unnamed_addr #5\n\n; Function Attrs: inaccessiblememonly nofree nosync nounwind willreturn\ndeclare void @llvm.experimental.noalias.scope.decl(metadata) #6\n\nattributes #0 = { uwtable \"frame-pointer\"=\"none\" \"min-legal-vector-width\"=\"0\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #1 = { argmemonly mustprogress nofree nosync nounwind willreturn }\nattributes #2 = { nobuiltin nounwind \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #3 = { \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #4 = { argmemonly mustprogress nofree nounwind willreturn }\nattributes #5 = { nounwind \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #6 = { inaccessiblememonly nofree nosync nounwind willreturn }\nattributes #7 = { nounwind }\n\n!llvm.module.flags = !{!0, !1}\n!llvm.ident = !{!2}\n\n!0 = !{i32 1, !\"wchar_size\", i32 4}\n!1 = !{i32 7, !\"uwtable\", i32 1}\n!2 = !{!\"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)\"}\n!3 = !{!4, !9, i64 8}\n!4 = !{!\"_ZTSNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE\", !5, i64 0, !9, i64 8, !7, i64 16}\n!5 = !{!\"_ZTSNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderE\", !6, i64 0}\n!6 = !{!\"any pointer\", !7, i64 0}\n!7 = !{!\"omnipotent char\", !8, i64 0}\n!8 = !{!\"Simple C++ TBAA\"}\n!9 = !{!\"long\", !7, i64 0}\n!10 = distinct !{!10, !11}\n!11 = !{!\"llvm.loop.mustprogress\"}\n!12 = !{!13}\n!13 = distinct !{!13, !14, !\"_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEmm: argument 0\"}\n!14 = distinct !{!14, !\"_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEmm\"}\n!15 = !{!5, !6, i64 0}\n!16 = !{!4, !6, i64 0}\n!17 = !{!9, !9, i64 0}\n!18 = !{!7, !7, i64 0}\n!19 = !{!20}\n!20 = distinct !{!20, !21, !\"_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEmm: argument 0\"}\n!21 = distinct !{!21, !\"_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEmm\"}\n!22 = !{!23}\n!23 = distinct !{!23, !24, !\"_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_S9_: argument 0\"}\n!24 = distinct !{!24, !\"_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_S9_\"}\n", "target": "This is the targeted source code:\n/*\nYou are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\ncycpattern_check(\"abcd\",\"abd\") => false\ncycpattern_check(\"hello\",\"ell\") => true\ncycpattern_check(\"whassup\",\"psus\") => false\ncycpattern_check(\"abab\",\"baa\") => true\ncycpattern_check(\"efef\",\"eeff\") => false\ncycpattern_check(\"himenss\",'simen\") => true\n\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool cycpattern_check(string a,string b){\n\n    for (int i=0;i<b.size();i++)\n    {\n        string rotate=b.substr(i)+b.substr(0,i);\n        if (a.find(rotate)!=string::npos) return true;\n    }\n    return false;\n\n}\n"}
{"input": "Convert this to C++:\n; ModuleID = '../../Human_xBenchmarks_164/CPP_155/CPP_155.cpp'\nsource_filename = \"../../Human_xBenchmarks_164/CPP_155/CPP_155.cpp\"\ntarget datalayout = \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\ntarget triple = \"x86_64-unknown-linux-gnu\"\n\n%\"class.std::vector\" = type { %\"struct.std::_Vector_base\" }\n%\"struct.std::_Vector_base\" = type { %\"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl\" }\n%\"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl\" = type { %\"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl_data\" }\n%\"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl_data\" = type { i32*, i32*, i32* }\n%\"class.std::__cxx11::basic_string\" = type { %\"struct.std::__cxx11::basic_string<char>::_Alloc_hider\", i64, %union.anon }\n%\"struct.std::__cxx11::basic_string<char>::_Alloc_hider\" = type { i8* }\n%union.anon = type { i64, [8 x i8] }\n%struct.__va_list_tag = type { i32, i32, i8*, i8* }\n\n$_ZN9__gnu_cxx12__to_xstringINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcEET_PFiPT0_mPKS8_P13__va_list_tagEmSB_z = comdat any\n\n@.str = private unnamed_addr constant [3 x i8] c\"%d\\00\", align 1\n\n; Function Attrs: uwtable\ndefine dso_local void @_Z14even_odd_counti(%\"class.std::vector\"* noalias nocapture sret(%\"class.std::vector\") align 8 %0, i32 %1) local_unnamed_addr #0 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {\n  %3 = alloca %\"class.std::__cxx11::basic_string\", align 8\n  %4 = bitcast %\"class.std::__cxx11::basic_string\"* %3 to i8*\n  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %4) #11\n  %5 = tail call i32 @llvm.abs.i32(i32 %1, i1 true)\n  call void (%\"class.std::__cxx11::basic_string\"*, i32 (i8*, i64, i8*, %struct.__va_list_tag*)*, i64, i8*, ...) @_ZN9__gnu_cxx12__to_xstringINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcEET_PFiPT0_mPKS8_P13__va_list_tagEmSB_z(%\"class.std::__cxx11::basic_string\"* nonnull sret(%\"class.std::__cxx11::basic_string\") align 8 %3, i32 (i8*, i64, i8*, %struct.__va_list_tag*)* nonnull @vsnprintf, i64 16, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %5)\n  %6 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %3, i64 0, i32 1\n  %7 = load i64, i64* %6, align 8, !tbaa !3\n  %8 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %3, i64 0, i32 0, i32 0\n  %9 = load i8*, i8** %8, align 8\n  %10 = icmp eq i64 %7, 0\n  br i1 %10, label %53, label %11\n\n11:                                               ; preds = %2\n  %12 = icmp ult i64 %7, 8\n  br i1 %12, label %49, label %13\n\n13:                                               ; preds = %11\n  %14 = and i64 %7, -8\n  br label %15\n\n15:                                               ; preds = %15, %13\n  %16 = phi i64 [ 0, %13 ], [ %41, %15 ]\n  %17 = phi <4 x i32> [ zeroinitializer, %13 ], [ %39, %15 ]\n  %18 = phi <4 x i32> [ zeroinitializer, %13 ], [ %40, %15 ]\n  %19 = phi <4 x i32> [ zeroinitializer, %13 ], [ %35, %15 ]\n  %20 = phi <4 x i32> [ zeroinitializer, %13 ], [ %36, %15 ]\n  %21 = getelementptr inbounds i8, i8* %9, i64 %16\n  %22 = bitcast i8* %21 to <4 x i8>*\n  %23 = load <4 x i8>, <4 x i8>* %22, align 1, !tbaa !10\n  %24 = getelementptr inbounds i8, i8* %21, i64 4\n  %25 = bitcast i8* %24 to <4 x i8>*\n  %26 = load <4 x i8>, <4 x i8>* %25, align 1, !tbaa !10\n  %27 = srem <4 x i8> %23, <i8 2, i8 2, i8 2, i8 2>\n  %28 = srem <4 x i8> %26, <i8 2, i8 2, i8 2, i8 2>\n  %29 = icmp eq <4 x i8> %27, <i8 1, i8 1, i8 1, i8 1>\n  %30 = icmp eq <4 x i8> %28, <i8 1, i8 1, i8 1, i8 1>\n  %31 = xor <4 x i1> %29, <i1 true, i1 true, i1 true, i1 true>\n  %32 = xor <4 x i1> %30, <i1 true, i1 true, i1 true, i1 true>\n  %33 = zext <4 x i1> %31 to <4 x i32>\n  %34 = zext <4 x i1> %32 to <4 x i32>\n  %35 = add <4 x i32> %19, %33\n  %36 = add <4 x i32> %20, %34\n  %37 = zext <4 x i1> %29 to <4 x i32>\n  %38 = zext <4 x i1> %30 to <4 x i32>\n  %39 = add <4 x i32> %17, %37\n  %40 = add <4 x i32> %18, %38\n  %41 = add nuw i64 %16, 8\n  %42 = icmp eq i64 %41, %14\n  br i1 %42, label %43, label %15, !llvm.loop !11\n\n43:                                               ; preds = %15\n  %44 = add <4 x i32> %36, %35\n  %45 = call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %44)\n  %46 = add <4 x i32> %40, %39\n  %47 = call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %46)\n  %48 = icmp eq i64 %7, %14\n  br i1 %48, label %53, label %49\n\n49:                                               ; preds = %11, %43\n  %50 = phi i64 [ 0, %11 ], [ %14, %43 ]\n  %51 = phi i32 [ 0, %11 ], [ %47, %43 ]\n  %52 = phi i32 [ 0, %11 ], [ %45, %43 ]\n  br label %58\n\n53:                                               ; preds = %58, %43, %2\n  %54 = phi i32 [ 0, %2 ], [ %45, %43 ], [ %68, %58 ]\n  %55 = phi i32 [ 0, %2 ], [ %47, %43 ], [ %70, %58 ]\n  %56 = bitcast %\"class.std::vector\"* %0 to i8*\n  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(24) %56, i8 0, i64 24, i1 false) #11\n  %57 = invoke noalias nonnull i8* @_Znwm(i64 8) #12\n          to label %73 unwind label %89\n\n58:                                               ; preds = %49, %58\n  %59 = phi i64 [ %71, %58 ], [ %50, %49 ]\n  %60 = phi i32 [ %70, %58 ], [ %51, %49 ]\n  %61 = phi i32 [ %68, %58 ], [ %52, %49 ]\n  %62 = getelementptr inbounds i8, i8* %9, i64 %59\n  %63 = load i8, i8* %62, align 1, !tbaa !10\n  %64 = srem i8 %63, 2\n  %65 = icmp eq i8 %64, 1\n  %66 = xor i1 %65, true\n  %67 = zext i1 %66 to i32\n  %68 = add nuw nsw i32 %61, %67\n  %69 = zext i1 %65 to i32\n  %70 = add nuw nsw i32 %60, %69\n  %71 = add nuw nsw i64 %59, 1\n  %72 = icmp eq i64 %71, %7\n  br i1 %72, label %53, label %58, !llvm.loop !14\n\n73:                                               ; preds = %53\n  %74 = bitcast i8* %57 to i32*\n  %75 = bitcast %\"class.std::vector\"* %0 to i8**\n  store i8* %57, i8** %75, align 8, !tbaa !16\n  %76 = getelementptr inbounds i8, i8* %57, i64 8\n  %77 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0, i64 0, i32 0, i32 0, i32 0, i32 2\n  %78 = bitcast i32** %77 to i8**\n  store i8* %76, i8** %78, align 8, !tbaa !18\n  store i32 %54, i32* %74, align 4\n  %79 = getelementptr inbounds i8, i8* %57, i64 4\n  %80 = bitcast i8* %79 to i32*\n  store i32 %55, i32* %80, align 4\n  %81 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0, i64 0, i32 0, i32 0, i32 0, i32 1\n  %82 = bitcast i32** %81 to i8**\n  store i8* %76, i8** %82, align 8, !tbaa !19\n  %83 = load i8*, i8** %8, align 8, !tbaa !20\n  %84 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %3, i64 0, i32 2\n  %85 = bitcast %union.anon* %84 to i8*\n  %86 = icmp eq i8* %83, %85\n  br i1 %86, label %88, label %87\n\n87:                                               ; preds = %73\n  call void @_ZdlPv(i8* %83) #11\n  br label %88\n\n88:                                               ; preds = %73, %87\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %4) #11\n  ret void\n\n89:                                               ; preds = %53\n  %90 = landingpad { i8*, i32 }\n          cleanup\n  %91 = load i8*, i8** %8, align 8, !tbaa !20\n  %92 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %3, i64 0, i32 2\n  %93 = bitcast %union.anon* %92 to i8*\n  %94 = icmp eq i8* %91, %93\n  br i1 %94, label %96, label %95\n\n95:                                               ; preds = %89\n  call void @_ZdlPv(i8* %91) #11\n  br label %96\n\n96:                                               ; preds = %89, %95\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %4) #11\n  resume { i8*, i32 } %90\n}\n\n; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn\ndeclare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1\n\ndeclare dso_local i32 @__gxx_personality_v0(...)\n\n; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn\ndeclare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1\n\n; Function Attrs: uwtable\ndefine linkonce_odr dso_local void @_ZN9__gnu_cxx12__to_xstringINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcEET_PFiPT0_mPKS8_P13__va_list_tagEmSB_z(%\"class.std::__cxx11::basic_string\"* noalias sret(%\"class.std::__cxx11::basic_string\") align 8 %0, i32 (i8*, i64, i8*, %struct.__va_list_tag*)* %1, i64 %2, i8* %3, ...) local_unnamed_addr #0 comdat personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {\n  %5 = alloca i64, align 8\n  %6 = alloca [1 x %struct.__va_list_tag], align 16\n  %7 = alloca i8, i64 %2, align 16\n  %8 = bitcast [1 x %struct.__va_list_tag]* %6 to i8*\n  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %8) #11\n  %9 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %6, i64 0, i64 0\n  call void @llvm.va_start(i8* nonnull %8)\n  %10 = call i32 %1(i8* nonnull %7, i64 %2, i8* %3, %struct.__va_list_tag* nonnull %9)\n  call void @llvm.va_end(i8* nonnull %8)\n  %11 = sext i32 %10 to i64\n  %12 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 2\n  %13 = bitcast %\"class.std::__cxx11::basic_string\"* %0 to %union.anon**\n  store %union.anon* %12, %union.anon** %13, align 8, !tbaa !21\n  %14 = bitcast %union.anon* %12 to i8*\n  %15 = bitcast i64* %5 to i8*\n  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %15) #11\n  store i64 %11, i64* %5, align 8, !tbaa !22\n  %16 = icmp ugt i32 %10, 15\n  br i1 %16, label %17, label %22\n\n17:                                               ; preds = %4\n  %18 = call i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %0, i64* nonnull align 8 dereferenceable(8) %5, i64 0)\n  %19 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 0, i32 0\n  store i8* %18, i8** %19, align 8, !tbaa !20\n  %20 = load i64, i64* %5, align 8, !tbaa !22\n  %21 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 2, i32 0\n  store i64 %20, i64* %21, align 8, !tbaa !10\n  br label %22\n\n22:                                               ; preds = %17, %4\n  %23 = phi i8* [ %18, %17 ], [ %14, %4 ]\n  switch i64 %11, label %26 [\n    i64 1, label %24\n    i64 0, label %27\n  ]\n\n24:                                               ; preds = %22\n  %25 = load i8, i8* %7, align 16, !tbaa !10\n  store i8 %25, i8* %23, align 1, !tbaa !10\n  br label %27\n\n26:                                               ; preds = %22\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %23, i8* nonnull align 16 %7, i64 %11, i1 false) #11\n  br label %27\n\n27:                                               ; preds = %26, %24, %22\n  %28 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 0, i32 0\n  %29 = load i64, i64* %5, align 8, !tbaa !22\n  %30 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 1\n  store i64 %29, i64* %30, align 8, !tbaa !3\n  %31 = load i8*, i8** %28, align 8, !tbaa !20\n  %32 = getelementptr inbounds i8, i8* %31, i64 %29\n  store i8 0, i8* %32, align 1, !tbaa !10\n  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %15) #11\n  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %8) #11\n  ret void\n}\n\n; Function Attrs: nofree nounwind\ndeclare dso_local noundef i32 @vsnprintf(i8* nocapture noundef, i64 noundef, i8* nocapture noundef readonly, %struct.__va_list_tag* noundef) #2\n\n; Function Attrs: mustprogress nofree nosync nounwind willreturn\ndeclare void @llvm.va_start(i8*) #3\n\n; Function Attrs: mustprogress nofree nosync nounwind willreturn\ndeclare void @llvm.va_end(i8*) #3\n\ndeclare dso_local i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32), i64* nonnull align 8 dereferenceable(8), i64) local_unnamed_addr #4\n\n; Function Attrs: argmemonly mustprogress nofree nounwind willreturn\ndeclare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #5\n\n; Function Attrs: nobuiltin nounwind\ndeclare dso_local void @_ZdlPv(i8*) local_unnamed_addr #6\n\n; Function Attrs: nobuiltin allocsize(0)\ndeclare dso_local nonnull i8* @_Znwm(i64) local_unnamed_addr #7\n\n; Function Attrs: nofree nosync nounwind readnone speculatable willreturn\ndeclare i32 @llvm.abs.i32(i32, i1 immarg) #8\n\n; Function Attrs: argmemonly nofree nounwind willreturn writeonly\ndeclare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #9\n\n; Function Attrs: nofree nosync nounwind readnone willreturn\ndeclare i32 @llvm.vector.reduce.add.v4i32(<4 x i32>) #10\n\nattributes #0 = { uwtable \"frame-pointer\"=\"none\" \"min-legal-vector-width\"=\"0\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #1 = { argmemonly mustprogress nofree nosync nounwind willreturn }\nattributes #2 = { nofree nounwind \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #3 = { mustprogress nofree nosync nounwind willreturn }\nattributes #4 = { \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #5 = { argmemonly mustprogress nofree nounwind willreturn }\nattributes #6 = { nobuiltin nounwind \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #7 = { nobuiltin allocsize(0) \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #8 = { nofree nosync nounwind readnone speculatable willreturn }\nattributes #9 = { argmemonly nofree nounwind willreturn writeonly }\nattributes #10 = { nofree nosync nounwind readnone willreturn }\nattributes #11 = { nounwind }\nattributes #12 = { allocsize(0) }\n\n!llvm.module.flags = !{!0, !1}\n!llvm.ident = !{!2}\n\n!0 = !{i32 1, !\"wchar_size\", i32 4}\n!1 = !{i32 7, !\"uwtable\", i32 1}\n!2 = !{!\"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)\"}\n!3 = !{!4, !9, i64 8}\n!4 = !{!\"_ZTSNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE\", !5, i64 0, !9, i64 8, !7, i64 16}\n!5 = !{!\"_ZTSNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderE\", !6, i64 0}\n!6 = !{!\"any pointer\", !7, i64 0}\n!7 = !{!\"omnipotent char\", !8, i64 0}\n!8 = !{!\"Simple C++ TBAA\"}\n!9 = !{!\"long\", !7, i64 0}\n!10 = !{!7, !7, i64 0}\n!11 = distinct !{!11, !12, !13}\n!12 = !{!\"llvm.loop.mustprogress\"}\n!13 = !{!\"llvm.loop.isvectorized\", i32 1}\n!14 = distinct !{!14, !12, !15, !13}\n!15 = !{!\"llvm.loop.unroll.runtime.disable\"}\n!16 = !{!17, !6, i64 0}\n!17 = !{!\"_ZTSNSt12_Vector_baseIiSaIiEE17_Vector_impl_dataE\", !6, i64 0, !6, i64 8, !6, i64 16}\n!18 = !{!17, !6, i64 16}\n!19 = !{!17, !6, i64 8}\n!20 = !{!4, !6, i64 0}\n!21 = !{!5, !6, i64 0}\n!22 = !{!9, !9, i64 0}\n", "target": "This is the targeted source code:\n/*\nGiven an integer. return a vector that has the number of even and odd digits respectively.\n\n Example:\n    even_odd_count(-12) ==> {1, 1}\n    even_odd_count(123) ==> {1, 2}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<vector>\nusing namespace std;\nvector<int> even_odd_count(int num){\n\n    string w=to_string(abs(num));\n    int n1=0,n2=0;\n    for (int i=0;i<w.length();i++)\n    if (w[i]%2==1) n1+=1;\n    else n2+=1;\n    return {n2,n1};\n}\n"}
{"input": "Convert this to C++:\n; ModuleID = '../../Human_xBenchmarks_164/CPP_156/CPP_156.cpp'\nsource_filename = \"../../Human_xBenchmarks_164/CPP_156/CPP_156.cpp\"\ntarget datalayout = \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\ntarget triple = \"x86_64-unknown-linux-gnu\"\n\n%\"class.std::__cxx11::basic_string\" = type { %\"struct.std::__cxx11::basic_string<char>::_Alloc_hider\", i64, %union.anon }\n%\"struct.std::__cxx11::basic_string<char>::_Alloc_hider\" = type { i8* }\n%union.anon = type { i64, [8 x i8] }\n%\"class.std::vector\" = type { %\"struct.std::_Vector_base\" }\n%\"struct.std::_Vector_base\" = type { %\"struct.std::_Vector_base<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char>>>::_Vector_impl\" }\n%\"struct.std::_Vector_base<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char>>>::_Vector_impl\" = type { %\"struct.std::_Vector_base<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char>>>::_Vector_impl_data\" }\n%\"struct.std::_Vector_base<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char>>>::_Vector_impl_data\" = type { %\"class.std::__cxx11::basic_string\"*, %\"class.std::__cxx11::basic_string\"*, %\"class.std::__cxx11::basic_string\"* }\n\n$_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED2Ev = comdat any\n\n$__clang_call_terminate = comdat any\n\n$_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPS7_EET0_T_SC_SB_ = comdat any\n\n@constinit = private unnamed_addr constant [13 x i32] [i32 1000, i32 900, i32 500, i32 400, i32 100, i32 90, i32 50, i32 40, i32 10, i32 9, i32 5, i32 4, i32 1], align 4\n\n; Function Attrs: uwtable\ndefine dso_local void @_Z18int_to_mini_romankB5cxx11i(%\"class.std::__cxx11::basic_string\"* noalias sret(%\"class.std::__cxx11::basic_string\") align 8 %0, i32 %1) local_unnamed_addr #0 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {\n  %3 = alloca i64, align 8\n  %4 = alloca %\"class.std::vector\", align 8\n  %5 = alloca [13 x %\"class.std::__cxx11::basic_string\"], align 8\n  %6 = alloca %\"class.std::__cxx11::basic_string\", align 8\n  %7 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 2\n  %8 = bitcast %\"class.std::__cxx11::basic_string\"* %0 to %union.anon**\n  store %union.anon* %7, %union.anon** %8, align 8, !tbaa !3\n  %9 = bitcast %union.anon* %7 to i8*\n  %10 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 0, i32 0\n  %11 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 1\n  store i64 0, i64* %11, align 8, !tbaa !8\n  store i8 0, i8* %9, align 8, !tbaa !11\n  %12 = bitcast %\"class.std::vector\"* %4 to i8*\n  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %12) #10\n  %13 = bitcast [13 x %\"class.std::__cxx11::basic_string\"]* %5 to i8*\n  call void @llvm.lifetime.start.p0i8(i64 416, i8* nonnull %13) #10\n  %14 = getelementptr inbounds [13 x %\"class.std::__cxx11::basic_string\"], [13 x %\"class.std::__cxx11::basic_string\"]* %5, i64 0, i64 0, i32 2\n  %15 = bitcast [13 x %\"class.std::__cxx11::basic_string\"]* %5 to %union.anon**\n  store %union.anon* %14, %union.anon** %15, align 8, !tbaa !3\n  %16 = bitcast %union.anon* %14 to i8*\n  store i8 109, i8* %16, align 8, !tbaa !11\n  %17 = getelementptr inbounds [13 x %\"class.std::__cxx11::basic_string\"], [13 x %\"class.std::__cxx11::basic_string\"]* %5, i64 0, i64 0, i32 1\n  store i64 1, i64* %17, align 8, !tbaa !8\n  %18 = getelementptr inbounds i8, i8* %16, i64 1\n  store i8 0, i8* %18, align 1, !tbaa !11\n  %19 = getelementptr inbounds [13 x %\"class.std::__cxx11::basic_string\"], [13 x %\"class.std::__cxx11::basic_string\"]* %5, i64 0, i64 1\n  %20 = getelementptr inbounds [13 x %\"class.std::__cxx11::basic_string\"], [13 x %\"class.std::__cxx11::basic_string\"]* %5, i64 0, i64 1, i32 2\n  %21 = bitcast %\"class.std::__cxx11::basic_string\"* %19 to %union.anon**\n  store %union.anon* %20, %union.anon** %21, align 8, !tbaa !3\n  %22 = bitcast %union.anon* %20 to i16*\n  store i16 28003, i16* %22, align 8\n  %23 = getelementptr inbounds [13 x %\"class.std::__cxx11::basic_string\"], [13 x %\"class.std::__cxx11::basic_string\"]* %5, i64 0, i64 1, i32 1\n  store i64 2, i64* %23, align 8, !tbaa !8\n  %24 = bitcast %union.anon* %20 to i8*\n  %25 = getelementptr inbounds i8, i8* %24, i64 2\n  store i8 0, i8* %25, align 2, !tbaa !11\n  %26 = getelementptr inbounds [13 x %\"class.std::__cxx11::basic_string\"], [13 x %\"class.std::__cxx11::basic_string\"]* %5, i64 0, i64 2\n  %27 = getelementptr inbounds [13 x %\"class.std::__cxx11::basic_string\"], [13 x %\"class.std::__cxx11::basic_string\"]* %5, i64 0, i64 2, i32 2\n  %28 = bitcast %\"class.std::__cxx11::basic_string\"* %26 to %union.anon**\n  store %union.anon* %27, %union.anon** %28, align 8, !tbaa !3\n  %29 = bitcast %union.anon* %27 to i8*\n  store i8 100, i8* %29, align 8, !tbaa !11\n  %30 = getelementptr inbounds [13 x %\"class.std::__cxx11::basic_string\"], [13 x %\"class.std::__cxx11::basic_string\"]* %5, i64 0, i64 2, i32 1\n  store i64 1, i64* %30, align 8, !tbaa !8\n  %31 = getelementptr inbounds i8, i8* %29, i64 1\n  store i8 0, i8* %31, align 1, !tbaa !11\n  %32 = getelementptr inbounds [13 x %\"class.std::__cxx11::basic_string\"], [13 x %\"class.std::__cxx11::basic_string\"]* %5, i64 0, i64 3\n  %33 = getelementptr inbounds [13 x %\"class.std::__cxx11::basic_string\"], [13 x %\"class.std::__cxx11::basic_string\"]* %5, i64 0, i64 3, i32 2\n  %34 = bitcast %\"class.std::__cxx11::basic_string\"* %32 to %union.anon**\n  store %union.anon* %33, %union.anon** %34, align 8, !tbaa !3\n  %35 = bitcast %union.anon* %33 to i16*\n  store i16 25699, i16* %35, align 8\n  %36 = getelementptr inbounds [13 x %\"class.std::__cxx11::basic_string\"], [13 x %\"class.std::__cxx11::basic_string\"]* %5, i64 0, i64 3, i32 1\n  store i64 2, i64* %36, align 8, !tbaa !8\n  %37 = bitcast %union.anon* %33 to i8*\n  %38 = getelementptr inbounds i8, i8* %37, i64 2\n  store i8 0, i8* %38, align 2, !tbaa !11\n  %39 = getelementptr inbounds [13 x %\"class.std::__cxx11::basic_string\"], [13 x %\"class.std::__cxx11::basic_string\"]* %5, i64 0, i64 4\n  %40 = getelementptr inbounds [13 x %\"class.std::__cxx11::basic_string\"], [13 x %\"class.std::__cxx11::basic_string\"]* %5, i64 0, i64 4, i32 2\n  %41 = bitcast %\"class.std::__cxx11::basic_string\"* %39 to %union.anon**\n  store %union.anon* %40, %union.anon** %41, align 8, !tbaa !3\n  %42 = bitcast %union.anon* %40 to i8*\n  store i8 99, i8* %42, align 8, !tbaa !11\n  %43 = getelementptr inbounds [13 x %\"class.std::__cxx11::basic_string\"], [13 x %\"class.std::__cxx11::basic_string\"]* %5, i64 0, i64 4, i32 1\n  store i64 1, i64* %43, align 8, !tbaa !8\n  %44 = getelementptr inbounds i8, i8* %42, i64 1\n  store i8 0, i8* %44, align 1, !tbaa !11\n  %45 = getelementptr inbounds [13 x %\"class.std::__cxx11::basic_string\"], [13 x %\"class.std::__cxx11::basic_string\"]* %5, i64 0, i64 5\n  %46 = getelementptr inbounds [13 x %\"class.std::__cxx11::basic_string\"], [13 x %\"class.std::__cxx11::basic_string\"]* %5, i64 0, i64 5, i32 2\n  %47 = bitcast %\"class.std::__cxx11::basic_string\"* %45 to %union.anon**\n  store %union.anon* %46, %union.anon** %47, align 8, !tbaa !3\n  %48 = bitcast %union.anon* %46 to i16*\n  store i16 25464, i16* %48, align 8\n  %49 = getelementptr inbounds [13 x %\"class.std::__cxx11::basic_string\"], [13 x %\"class.std::__cxx11::basic_string\"]* %5, i64 0, i64 5, i32 1\n  store i64 2, i64* %49, align 8, !tbaa !8\n  %50 = bitcast %union.anon* %46 to i8*\n  %51 = getelementptr inbounds i8, i8* %50, i64 2\n  store i8 0, i8* %51, align 2, !tbaa !11\n  %52 = getelementptr inbounds [13 x %\"class.std::__cxx11::basic_string\"], [13 x %\"class.std::__cxx11::basic_string\"]* %5, i64 0, i64 6\n  %53 = getelementptr inbounds [13 x %\"class.std::__cxx11::basic_string\"], [13 x %\"class.std::__cxx11::basic_string\"]* %5, i64 0, i64 6, i32 2\n  %54 = bitcast %\"class.std::__cxx11::basic_string\"* %52 to %union.anon**\n  store %union.anon* %53, %union.anon** %54, align 8, !tbaa !3\n  %55 = bitcast %union.anon* %53 to i8*\n  store i8 108, i8* %55, align 8, !tbaa !11\n  %56 = getelementptr inbounds [13 x %\"class.std::__cxx11::basic_string\"], [13 x %\"class.std::__cxx11::basic_string\"]* %5, i64 0, i64 6, i32 1\n  store i64 1, i64* %56, align 8, !tbaa !8\n  %57 = getelementptr inbounds i8, i8* %55, i64 1\n  store i8 0, i8* %57, align 1, !tbaa !11\n  %58 = getelementptr inbounds [13 x %\"class.std::__cxx11::basic_string\"], [13 x %\"class.std::__cxx11::basic_string\"]* %5, i64 0, i64 7\n  %59 = getelementptr inbounds [13 x %\"class.std::__cxx11::basic_string\"], [13 x %\"class.std::__cxx11::basic_string\"]* %5, i64 0, i64 7, i32 2\n  %60 = bitcast %\"class.std::__cxx11::basic_string\"* %58 to %union.anon**\n  store %union.anon* %59, %union.anon** %60, align 8, !tbaa !3\n  %61 = bitcast %union.anon* %59 to i16*\n  store i16 27768, i16* %61, align 8\n  %62 = getelementptr inbounds [13 x %\"class.std::__cxx11::basic_string\"], [13 x %\"class.std::__cxx11::basic_string\"]* %5, i64 0, i64 7, i32 1\n  store i64 2, i64* %62, align 8, !tbaa !8\n  %63 = bitcast %union.anon* %59 to i8*\n  %64 = getelementptr inbounds i8, i8* %63, i64 2\n  store i8 0, i8* %64, align 2, !tbaa !11\n  %65 = getelementptr inbounds [13 x %\"class.std::__cxx11::basic_string\"], [13 x %\"class.std::__cxx11::basic_string\"]* %5, i64 0, i64 8\n  %66 = getelementptr inbounds [13 x %\"class.std::__cxx11::basic_string\"], [13 x %\"class.std::__cxx11::basic_string\"]* %5, i64 0, i64 8, i32 2\n  %67 = bitcast %\"class.std::__cxx11::basic_string\"* %65 to %union.anon**\n  store %union.anon* %66, %union.anon** %67, align 8, !tbaa !3\n  %68 = bitcast %union.anon* %66 to i8*\n  store i8 120, i8* %68, align 8, !tbaa !11\n  %69 = getelementptr inbounds [13 x %\"class.std::__cxx11::basic_string\"], [13 x %\"class.std::__cxx11::basic_string\"]* %5, i64 0, i64 8, i32 1\n  store i64 1, i64* %69, align 8, !tbaa !8\n  %70 = getelementptr inbounds i8, i8* %68, i64 1\n  store i8 0, i8* %70, align 1, !tbaa !11\n  %71 = getelementptr inbounds [13 x %\"class.std::__cxx11::basic_string\"], [13 x %\"class.std::__cxx11::basic_string\"]* %5, i64 0, i64 9\n  %72 = getelementptr inbounds [13 x %\"class.std::__cxx11::basic_string\"], [13 x %\"class.std::__cxx11::basic_string\"]* %5, i64 0, i64 9, i32 2\n  %73 = bitcast %\"class.std::__cxx11::basic_string\"* %71 to %union.anon**\n  store %union.anon* %72, %union.anon** %73, align 8, !tbaa !3\n  %74 = bitcast %union.anon* %72 to i16*\n  store i16 30825, i16* %74, align 8\n  %75 = getelementptr inbounds [13 x %\"class.std::__cxx11::basic_string\"], [13 x %\"class.std::__cxx11::basic_string\"]* %5, i64 0, i64 9, i32 1\n  store i64 2, i64* %75, align 8, !tbaa !8\n  %76 = bitcast %union.anon* %72 to i8*\n  %77 = getelementptr inbounds i8, i8* %76, i64 2\n  store i8 0, i8* %77, align 2, !tbaa !11\n  %78 = getelementptr inbounds [13 x %\"class.std::__cxx11::basic_string\"], [13 x %\"class.std::__cxx11::basic_string\"]* %5, i64 0, i64 10\n  %79 = getelementptr inbounds [13 x %\"class.std::__cxx11::basic_string\"], [13 x %\"class.std::__cxx11::basic_string\"]* %5, i64 0, i64 10, i32 2\n  %80 = bitcast %\"class.std::__cxx11::basic_string\"* %78 to %union.anon**\n  store %union.anon* %79, %union.anon** %80, align 8, !tbaa !3\n  %81 = bitcast %union.anon* %79 to i8*\n  store i8 118, i8* %81, align 8, !tbaa !11\n  %82 = getelementptr inbounds [13 x %\"class.std::__cxx11::basic_string\"], [13 x %\"class.std::__cxx11::basic_string\"]* %5, i64 0, i64 10, i32 1\n  store i64 1, i64* %82, align 8, !tbaa !8\n  %83 = getelementptr inbounds i8, i8* %81, i64 1\n  store i8 0, i8* %83, align 1, !tbaa !11\n  %84 = getelementptr inbounds [13 x %\"class.std::__cxx11::basic_string\"], [13 x %\"class.std::__cxx11::basic_string\"]* %5, i64 0, i64 11\n  %85 = getelementptr inbounds [13 x %\"class.std::__cxx11::basic_string\"], [13 x %\"class.std::__cxx11::basic_string\"]* %5, i64 0, i64 11, i32 2\n  %86 = bitcast %\"class.std::__cxx11::basic_string\"* %84 to %union.anon**\n  store %union.anon* %85, %union.anon** %86, align 8, !tbaa !3\n  %87 = bitcast %union.anon* %85 to i16*\n  store i16 30313, i16* %87, align 8\n  %88 = getelementptr inbounds [13 x %\"class.std::__cxx11::basic_string\"], [13 x %\"class.std::__cxx11::basic_string\"]* %5, i64 0, i64 11, i32 1\n  store i64 2, i64* %88, align 8, !tbaa !8\n  %89 = bitcast %union.anon* %85 to i8*\n  %90 = getelementptr inbounds i8, i8* %89, i64 2\n  store i8 0, i8* %90, align 2, !tbaa !11\n  %91 = getelementptr inbounds [13 x %\"class.std::__cxx11::basic_string\"], [13 x %\"class.std::__cxx11::basic_string\"]* %5, i64 0, i64 12\n  %92 = getelementptr inbounds [13 x %\"class.std::__cxx11::basic_string\"], [13 x %\"class.std::__cxx11::basic_string\"]* %5, i64 0, i64 12, i32 2\n  %93 = bitcast %\"class.std::__cxx11::basic_string\"* %91 to %union.anon**\n  store %union.anon* %92, %union.anon** %93, align 8, !tbaa !3\n  %94 = bitcast %union.anon* %92 to i8*\n  store i8 105, i8* %94, align 8, !tbaa !11\n  %95 = getelementptr inbounds [13 x %\"class.std::__cxx11::basic_string\"], [13 x %\"class.std::__cxx11::basic_string\"]* %5, i64 0, i64 12, i32 1\n  store i64 1, i64* %95, align 8, !tbaa !8\n  %96 = getelementptr inbounds i8, i8* %94, i64 1\n  store i8 0, i8* %96, align 1, !tbaa !11\n  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(24) %12, i8 0, i64 24, i1 false) #10\n  %97 = invoke noalias nonnull i8* @_Znwm(i64 416) #11\n          to label %100 unwind label %98\n\n98:                                               ; preds = %2\n  %99 = landingpad { i8*, i32 }\n          cleanup\n  br label %216\n\n100:                                              ; preds = %2\n  %101 = getelementptr inbounds [13 x %\"class.std::__cxx11::basic_string\"], [13 x %\"class.std::__cxx11::basic_string\"]* %5, i64 0, i64 0\n  %102 = getelementptr inbounds [13 x %\"class.std::__cxx11::basic_string\"], [13 x %\"class.std::__cxx11::basic_string\"]* %5, i64 0, i64 13\n  %103 = bitcast i8* %97 to %\"class.std::__cxx11::basic_string\"*\n  %104 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %4, i64 0, i32 0, i32 0, i32 0, i32 0\n  %105 = bitcast %\"class.std::vector\"* %4 to i8**\n  store i8* %97, i8** %105, align 8, !tbaa !12\n  %106 = getelementptr inbounds i8, i8* %97, i64 416\n  %107 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %4, i64 0, i32 0, i32 0, i32 0, i32 2\n  %108 = bitcast %\"class.std::__cxx11::basic_string\"** %107 to i8**\n  store i8* %106, i8** %108, align 8, !tbaa !14\n  %109 = invoke %\"class.std::__cxx11::basic_string\"* @_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPS7_EET0_T_SC_SB_(%\"class.std::__cxx11::basic_string\"* nonnull %101, %\"class.std::__cxx11::basic_string\"* nonnull %102, %\"class.std::__cxx11::basic_string\"* nonnull %103)\n          to label %112 unwind label %110\n\n110:                                              ; preds = %100\n  %111 = landingpad { i8*, i32 }\n          cleanup\n  call void @_ZdlPv(i8* nonnull %97) #10\n  br label %216\n\n112:                                              ; preds = %100\n  %113 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %4, i64 0, i32 0, i32 0, i32 0, i32 1\n  store %\"class.std::__cxx11::basic_string\"* %109, %\"class.std::__cxx11::basic_string\"** %113, align 8, !tbaa !15\n  %114 = getelementptr inbounds [13 x %\"class.std::__cxx11::basic_string\"], [13 x %\"class.std::__cxx11::basic_string\"]* %5, i64 0, i64 12, i32 0, i32 0\n  %115 = load i8*, i8** %114, align 8, !tbaa !16\n  %116 = getelementptr inbounds [13 x %\"class.std::__cxx11::basic_string\"], [13 x %\"class.std::__cxx11::basic_string\"]* %5, i64 0, i64 12, i32 2\n  %117 = bitcast %union.anon* %116 to i8*\n  %118 = icmp eq i8* %115, %117\n  br i1 %118, label %120, label %119\n\n119:                                              ; preds = %112\n  call void @_ZdlPv(i8* %115) #10\n  br label %120\n\n120:                                              ; preds = %112, %119\n  %121 = getelementptr inbounds [13 x %\"class.std::__cxx11::basic_string\"], [13 x %\"class.std::__cxx11::basic_string\"]* %5, i64 0, i64 11, i32 0, i32 0\n  %122 = load i8*, i8** %121, align 8, !tbaa !16\n  %123 = getelementptr inbounds [13 x %\"class.std::__cxx11::basic_string\"], [13 x %\"class.std::__cxx11::basic_string\"]* %5, i64 0, i64 11, i32 2\n  %124 = bitcast %union.anon* %123 to i8*\n  %125 = icmp eq i8* %122, %124\n  br i1 %125, label %355, label %354\n\n126:                                              ; preds = %432\n  %127 = landingpad { i8*, i32 }\n          cleanup\n  br label %267\n\n128:                                              ; preds = %432\n  %129 = bitcast i8* %433 to i32*\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef nonnull align 4 dereferenceable(52) %433, i8* noundef nonnull align 4 dereferenceable(52) bitcast ([13 x i32]* @constinit to i8*), i64 52, i1 false) #10\n  %130 = bitcast %\"class.std::__cxx11::basic_string\"* %6 to i8*\n  %131 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %6, i64 0, i32 2\n  %132 = bitcast %\"class.std::__cxx11::basic_string\"* %6 to %union.anon**\n  %133 = bitcast i64* %3 to i8*\n  %134 = bitcast %union.anon* %131 to i8*\n  %135 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %6, i64 0, i32 0, i32 0\n  %136 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %6, i64 0, i32 2, i32 0\n  %137 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %6, i64 0, i32 1\n  %138 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 2, i32 0\n  %139 = icmp sgt i32 %1, 0\n  br i1 %139, label %140, label %247\n\n140:                                              ; preds = %128\n  %141 = bitcast i64* %137 to <2 x i64>*\n  %142 = bitcast i64* %11 to <2 x i64>*\n  br label %143\n\n143:                                              ; preds = %140, %238\n  %144 = phi i32 [ %243, %238 ], [ 1000, %140 ]\n  %145 = phi i32 [ %239, %238 ], [ 0, %140 ]\n  %146 = phi i32 [ %240, %238 ], [ %1, %140 ]\n  %147 = zext i32 %145 to i64\n  %148 = getelementptr inbounds i32, i32* %129, i64 %147\n  %149 = icmp slt i32 %146, %144\n  br i1 %149, label %150, label %152\n\n150:                                              ; preds = %143\n  %151 = add nuw nsw i32 %145, 1\n  br label %238\n\n152:                                              ; preds = %143, %212\n  %153 = phi i32 [ %214, %212 ], [ %146, %143 ]\n  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %130) #10\n  %154 = load %\"class.std::__cxx11::basic_string\"*, %\"class.std::__cxx11::basic_string\"** %104, align 8, !tbaa !12\n  call void @llvm.experimental.noalias.scope.decl(metadata !17)\n  store %union.anon* %131, %union.anon** %132, align 8, !tbaa !3, !alias.scope !17\n  %155 = load i8*, i8** %10, align 8, !tbaa !16, !noalias !17\n  %156 = load i64, i64* %11, align 8, !tbaa !8, !noalias !17\n  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %133) #10, !noalias !17\n  store i64 %156, i64* %3, align 8, !tbaa !20, !noalias !17\n  %157 = icmp ugt i64 %156, 15\n  br i1 %157, label %158, label %162\n\n158:                                              ; preds = %152\n  %159 = invoke i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %6, i64* nonnull align 8 dereferenceable(8) %3, i64 0)\n          to label %160 unwind label %230\n\n160:                                              ; preds = %158\n  store i8* %159, i8** %135, align 8, !tbaa !16, !alias.scope !17\n  %161 = load i64, i64* %3, align 8, !tbaa !20, !noalias !17\n  store i64 %161, i64* %136, align 8, !tbaa !11, !alias.scope !17\n  br label %162\n\n162:                                              ; preds = %152, %160\n  %163 = phi i8* [ %159, %160 ], [ %134, %152 ]\n  switch i64 %156, label %166 [\n    i64 1, label %164\n    i64 0, label %167\n  ]\n\n164:                                              ; preds = %162\n  %165 = load i8, i8* %155, align 1, !tbaa !11\n  store i8 %165, i8* %163, align 1, !tbaa !11\n  br label %167\n\n166:                                              ; preds = %162\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %163, i8* align 1 %155, i64 %156, i1 false) #10\n  br label %167\n\n167:                                              ; preds = %166, %164, %162\n  %168 = load i64, i64* %3, align 8, !tbaa !20, !noalias !17\n  store i64 %168, i64* %137, align 8, !tbaa !8, !alias.scope !17\n  %169 = load i8*, i8** %135, align 8, !tbaa !16, !alias.scope !17\n  %170 = getelementptr inbounds i8, i8* %169, i64 %168\n  store i8 0, i8* %170, align 1, !tbaa !11\n  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %133) #10, !noalias !17\n  %171 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %154, i64 %147, i32 0, i32 0\n  %172 = load i8*, i8** %171, align 8, !tbaa !16, !noalias !17\n  %173 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %154, i64 %147, i32 1\n  %174 = load i64, i64* %173, align 8, !tbaa !8, !noalias !17\n  %175 = invoke nonnull align 8 dereferenceable(32) %\"class.std::__cxx11::basic_string\"* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %6, i8* %172, i64 %174)\n          to label %181 unwind label %176\n\n176:                                              ; preds = %167\n  %177 = landingpad { i8*, i32 }\n          cleanup\n  %178 = load i8*, i8** %135, align 8, !tbaa !16, !alias.scope !17\n  %179 = icmp eq i8* %178, %134\n  br i1 %179, label %232, label %180\n\n180:                                              ; preds = %176\n  call void @_ZdlPv(i8* %178) #10\n  br label %232\n\n181:                                              ; preds = %167\n  %182 = load i8*, i8** %135, align 8, !tbaa !16\n  %183 = icmp eq i8* %182, %134\n  br i1 %183, label %184, label %198\n\n184:                                              ; preds = %181\n  %185 = load i64, i64* %137, align 8, !tbaa !8\n  %186 = icmp eq i64 %185, 0\n  br i1 %186, label %193, label %187\n\n187:                                              ; preds = %184\n  %188 = load i8*, i8** %10, align 8, !tbaa !16\n  %189 = icmp eq i64 %185, 1\n  br i1 %189, label %190, label %192\n\n190:                                              ; preds = %187\n  %191 = load i8, i8* %134, align 8, !tbaa !11\n  store i8 %191, i8* %188, align 1, !tbaa !11\n  br label %193\n\n192:                                              ; preds = %187\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %188, i8* nonnull align 8 %134, i64 %185, i1 false) #10\n  br label %193\n\n193:                                              ; preds = %192, %190, %184\n  %194 = load i64, i64* %137, align 8, !tbaa !8\n  store i64 %194, i64* %11, align 8, !tbaa !8\n  %195 = load i8*, i8** %10, align 8, !tbaa !16\n  %196 = getelementptr inbounds i8, i8* %195, i64 %194\n  store i8 0, i8* %196, align 1, !tbaa !11\n  %197 = load i8*, i8** %135, align 8, !tbaa !16\n  br label %207\n\n198:                                              ; preds = %181\n  %199 = load i8*, i8** %10, align 8, !tbaa !16\n  %200 = icmp eq i8* %199, %9\n  %201 = load i64, i64* %138, align 8\n  store i8* %182, i8** %10, align 8, !tbaa !16\n  %202 = load <2 x i64>, <2 x i64>* %141, align 8, !tbaa !11\n  store <2 x i64> %202, <2 x i64>* %142, align 8, !tbaa !11\n  %203 = icmp eq i8* %199, null\n  %204 = or i1 %200, %203\n  br i1 %204, label %206, label %205\n\n205:                                              ; preds = %198\n  store i8* %199, i8** %135, align 8, !tbaa !16\n  store i64 %201, i64* %136, align 8, !tbaa !11\n  br label %207\n\n206:                                              ; preds = %198\n  store %union.anon* %131, %union.anon** %132, align 8, !tbaa !16\n  br label %207\n\n207:                                              ; preds = %193, %205, %206\n  %208 = phi i8* [ %197, %193 ], [ %199, %205 ], [ %134, %206 ]\n  store i64 0, i64* %137, align 8, !tbaa !8\n  store i8 0, i8* %208, align 1, !tbaa !11\n  %209 = load i8*, i8** %135, align 8, !tbaa !16\n  %210 = icmp eq i8* %209, %134\n  br i1 %210, label %212, label %211\n\n211:                                              ; preds = %207\n  call void @_ZdlPv(i8* %209) #10\n  br label %212\n\n212:                                              ; preds = %207, %211\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %130) #10\n  %213 = load i32, i32* %148, align 4, !tbaa !21\n  %214 = sub nsw i32 %153, %213\n  %215 = icmp slt i32 %214, %213\n  br i1 %215, label %234, label %152, !llvm.loop !23\n\n216:                                              ; preds = %98, %110\n  %217 = phi { i8*, i32 } [ %99, %98 ], [ %111, %110 ]\n  %218 = getelementptr inbounds [13 x %\"class.std::__cxx11::basic_string\"], [13 x %\"class.std::__cxx11::basic_string\"]* %5, i64 0, i64 12, i32 0, i32 0\n  %219 = load i8*, i8** %218, align 8, !tbaa !16\n  %220 = getelementptr inbounds [13 x %\"class.std::__cxx11::basic_string\"], [13 x %\"class.std::__cxx11::basic_string\"]* %5, i64 0, i64 12, i32 2\n  %221 = bitcast %union.anon* %220 to i8*\n  %222 = icmp eq i8* %219, %221\n  br i1 %222, label %224, label %223\n\n223:                                              ; preds = %216\n  call void @_ZdlPv(i8* %219) #10\n  br label %224\n\n224:                                              ; preds = %216, %223\n  %225 = getelementptr inbounds [13 x %\"class.std::__cxx11::basic_string\"], [13 x %\"class.std::__cxx11::basic_string\"]* %5, i64 0, i64 11, i32 0, i32 0\n  %226 = load i8*, i8** %225, align 8, !tbaa !16\n  %227 = getelementptr inbounds [13 x %\"class.std::__cxx11::basic_string\"], [13 x %\"class.std::__cxx11::basic_string\"]* %5, i64 0, i64 11, i32 2\n  %228 = bitcast %union.anon* %227 to i8*\n  %229 = icmp eq i8* %226, %228\n  br i1 %229, label %276, label %275\n\n230:                                              ; preds = %158\n  %231 = landingpad { i8*, i32 }\n          cleanup\n  br label %232\n\n232:                                              ; preds = %176, %180, %230\n  %233 = phi { i8*, i32 } [ %231, %230 ], [ %177, %180 ], [ %177, %176 ]\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %130) #10\n  call void @_ZdlPv(i8* nonnull %433) #10\n  br label %267\n\n234:                                              ; preds = %212\n  %235 = icmp sgt i32 %214, 0\n  %236 = zext i1 %235 to i32\n  %237 = add nuw nsw i32 %145, %236\n  br i1 %235, label %238, label %244, !llvm.loop !25\n\n238:                                              ; preds = %150, %234\n  %239 = phi i32 [ %151, %150 ], [ %237, %234 ]\n  %240 = phi i32 [ %146, %150 ], [ %214, %234 ]\n  %241 = zext i32 %239 to i64\n  %242 = getelementptr inbounds i32, i32* %129, i64 %241\n  %243 = load i32, i32* %242, align 4, !tbaa !21\n  br label %143\n\n244:                                              ; preds = %234\n  %245 = load %\"class.std::__cxx11::basic_string\"*, %\"class.std::__cxx11::basic_string\"** %104, align 8, !tbaa !12\n  %246 = load %\"class.std::__cxx11::basic_string\"*, %\"class.std::__cxx11::basic_string\"** %113, align 8, !tbaa !15\n  br label %247\n\n247:                                              ; preds = %244, %128\n  %248 = phi %\"class.std::__cxx11::basic_string\"* [ %245, %244 ], [ %103, %128 ]\n  %249 = phi %\"class.std::__cxx11::basic_string\"* [ %246, %244 ], [ %109, %128 ]\n  call void @_ZdlPv(i8* nonnull %433) #10\n  %250 = icmp eq %\"class.std::__cxx11::basic_string\"* %248, %249\n  br i1 %250, label %262, label %251\n\n251:                                              ; preds = %247, %259\n  %252 = phi %\"class.std::__cxx11::basic_string\"* [ %260, %259 ], [ %248, %247 ]\n  %253 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %252, i64 0, i32 0, i32 0\n  %254 = load i8*, i8** %253, align 8, !tbaa !16\n  %255 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %252, i64 0, i32 2\n  %256 = bitcast %union.anon* %255 to i8*\n  %257 = icmp eq i8* %254, %256\n  br i1 %257, label %259, label %258\n\n258:                                              ; preds = %251\n  call void @_ZdlPv(i8* %254) #10\n  br label %259\n\n259:                                              ; preds = %258, %251\n  %260 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %252, i64 1\n  %261 = icmp eq %\"class.std::__cxx11::basic_string\"* %260, %249\n  br i1 %261, label %262, label %251, !llvm.loop !26\n\n262:                                              ; preds = %259, %247\n  %263 = icmp eq %\"class.std::__cxx11::basic_string\"* %248, null\n  br i1 %263, label %266, label %264\n\n264:                                              ; preds = %262\n  %265 = bitcast %\"class.std::__cxx11::basic_string\"* %248 to i8*\n  call void @_ZdlPv(i8* nonnull %265) #10\n  br label %266\n\n266:                                              ; preds = %262, %264\n  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %12) #10\n  ret void\n\n267:                                              ; preds = %232, %126\n  %268 = phi { i8*, i32 } [ %233, %232 ], [ %127, %126 ]\n  call void @_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED2Ev(%\"class.std::vector\"* nonnull align 8 dereferenceable(24) %4) #10\n  br label %269\n\n269:                                              ; preds = %267, %353\n  %270 = phi { i8*, i32 } [ %268, %267 ], [ %217, %353 ]\n  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %12) #10\n  %271 = load i8*, i8** %10, align 8, !tbaa !16\n  %272 = icmp eq i8* %271, %9\n  br i1 %272, label %274, label %273\n\n273:                                              ; preds = %269\n  call void @_ZdlPv(i8* %271) #10\n  br label %274\n\n274:                                              ; preds = %273, %269\n  resume { i8*, i32 } %270\n\n275:                                              ; preds = %224\n  call void @_ZdlPv(i8* %226) #10\n  br label %276\n\n276:                                              ; preds = %275, %224\n  %277 = getelementptr inbounds [13 x %\"class.std::__cxx11::basic_string\"], [13 x %\"class.std::__cxx11::basic_string\"]* %5, i64 0, i64 10, i32 0, i32 0\n  %278 = load i8*, i8** %277, align 8, !tbaa !16\n  %279 = getelementptr inbounds [13 x %\"class.std::__cxx11::basic_string\"], [13 x %\"class.std::__cxx11::basic_string\"]* %5, i64 0, i64 10, i32 2\n  %280 = bitcast %union.anon* %279 to i8*\n  %281 = icmp eq i8* %278, %280\n  br i1 %281, label %283, label %282\n\n282:                                              ; preds = %276\n  call void @_ZdlPv(i8* %278) #10\n  br label %283\n\n283:                                              ; preds = %282, %276\n  %284 = getelementptr inbounds [13 x %\"class.std::__cxx11::basic_string\"], [13 x %\"class.std::__cxx11::basic_string\"]* %5, i64 0, i64 9, i32 0, i32 0\n  %285 = load i8*, i8** %284, align 8, !tbaa !16\n  %286 = getelementptr inbounds [13 x %\"class.std::__cxx11::basic_string\"], [13 x %\"class.std::__cxx11::basic_string\"]* %5, i64 0, i64 9, i32 2\n  %287 = bitcast %union.anon* %286 to i8*\n  %288 = icmp eq i8* %285, %287\n  br i1 %288, label %290, label %289\n\n289:                                              ; preds = %283\n  call void @_ZdlPv(i8* %285) #10\n  br label %290\n\n290:                                              ; preds = %289, %283\n  %291 = getelementptr inbounds [13 x %\"class.std::__cxx11::basic_string\"], [13 x %\"class.std::__cxx11::basic_string\"]* %5, i64 0, i64 8, i32 0, i32 0\n  %292 = load i8*, i8** %291, align 8, !tbaa !16\n  %293 = getelementptr inbounds [13 x %\"class.std::__cxx11::basic_string\"], [13 x %\"class.std::__cxx11::basic_string\"]* %5, i64 0, i64 8, i32 2\n  %294 = bitcast %union.anon* %293 to i8*\n  %295 = icmp eq i8* %292, %294\n  br i1 %295, label %297, label %296\n\n296:                                              ; preds = %290\n  call void @_ZdlPv(i8* %292) #10\n  br label %297\n\n297:                                              ; preds = %296, %290\n  %298 = getelementptr inbounds [13 x %\"class.std::__cxx11::basic_string\"], [13 x %\"class.std::__cxx11::basic_string\"]* %5, i64 0, i64 7, i32 0, i32 0\n  %299 = load i8*, i8** %298, align 8, !tbaa !16\n  %300 = getelementptr inbounds [13 x %\"class.std::__cxx11::basic_string\"], [13 x %\"class.std::__cxx11::basic_string\"]* %5, i64 0, i64 7, i32 2\n  %301 = bitcast %union.anon* %300 to i8*\n  %302 = icmp eq i8* %299, %301\n  br i1 %302, label %304, label %303\n\n303:                                              ; preds = %297\n  call void @_ZdlPv(i8* %299) #10\n  br label %304\n\n304:                                              ; preds = %303, %297\n  %305 = getelementptr inbounds [13 x %\"class.std::__cxx11::basic_string\"], [13 x %\"class.std::__cxx11::basic_string\"]* %5, i64 0, i64 6, i32 0, i32 0\n  %306 = load i8*, i8** %305, align 8, !tbaa !16\n  %307 = getelementptr inbounds [13 x %\"class.std::__cxx11::basic_string\"], [13 x %\"class.std::__cxx11::basic_string\"]* %5, i64 0, i64 6, i32 2\n  %308 = bitcast %union.anon* %307 to i8*\n  %309 = icmp eq i8* %306, %308\n  br i1 %309, label %311, label %310\n\n310:                                              ; preds = %304\n  call void @_ZdlPv(i8* %306) #10\n  br label %311\n\n311:                                              ; preds = %310, %304\n  %312 = getelementptr inbounds [13 x %\"class.std::__cxx11::basic_string\"], [13 x %\"class.std::__cxx11::basic_string\"]* %5, i64 0, i64 5, i32 0, i32 0\n  %313 = load i8*, i8** %312, align 8, !tbaa !16\n  %314 = getelementptr inbounds [13 x %\"class.std::__cxx11::basic_string\"], [13 x %\"class.std::__cxx11::basic_string\"]* %5, i64 0, i64 5, i32 2\n  %315 = bitcast %union.anon* %314 to i8*\n  %316 = icmp eq i8* %313, %315\n  br i1 %316, label %318, label %317\n\n317:                                              ; preds = %311\n  call void @_ZdlPv(i8* %313) #10\n  br label %318\n\n318:                                              ; preds = %317, %311\n  %319 = getelementptr inbounds [13 x %\"class.std::__cxx11::basic_string\"], [13 x %\"class.std::__cxx11::basic_string\"]* %5, i64 0, i64 4, i32 0, i32 0\n  %320 = load i8*, i8** %319, align 8, !tbaa !16\n  %321 = getelementptr inbounds [13 x %\"class.std::__cxx11::basic_string\"], [13 x %\"class.std::__cxx11::basic_string\"]* %5, i64 0, i64 4, i32 2\n  %322 = bitcast %union.anon* %321 to i8*\n  %323 = icmp eq i8* %320, %322\n  br i1 %323, label %325, label %324\n\n324:                                              ; preds = %318\n  call void @_ZdlPv(i8* %320) #10\n  br label %325\n\n325:                                              ; preds = %324, %318\n  %326 = getelementptr inbounds [13 x %\"class.std::__cxx11::basic_string\"], [13 x %\"class.std::__cxx11::basic_string\"]* %5, i64 0, i64 3, i32 0, i32 0\n  %327 = load i8*, i8** %326, align 8, !tbaa !16\n  %328 = getelementptr inbounds [13 x %\"class.std::__cxx11::basic_string\"], [13 x %\"class.std::__cxx11::basic_string\"]* %5, i64 0, i64 3, i32 2\n  %329 = bitcast %union.anon* %328 to i8*\n  %330 = icmp eq i8* %327, %329\n  br i1 %330, label %332, label %331\n\n331:                                              ; preds = %325\n  call void @_ZdlPv(i8* %327) #10\n  br label %332\n\n332:                                              ; preds = %331, %325\n  %333 = getelementptr inbounds [13 x %\"class.std::__cxx11::basic_string\"], [13 x %\"class.std::__cxx11::basic_string\"]* %5, i64 0, i64 2, i32 0, i32 0\n  %334 = load i8*, i8** %333, align 8, !tbaa !16\n  %335 = getelementptr inbounds [13 x %\"class.std::__cxx11::basic_string\"], [13 x %\"class.std::__cxx11::basic_string\"]* %5, i64 0, i64 2, i32 2\n  %336 = bitcast %union.anon* %335 to i8*\n  %337 = icmp eq i8* %334, %336\n  br i1 %337, label %339, label %338\n\n338:                                              ; preds = %332\n  call void @_ZdlPv(i8* %334) #10\n  br label %339\n\n339:                                              ; preds = %338, %332\n  %340 = getelementptr inbounds [13 x %\"class.std::__cxx11::basic_string\"], [13 x %\"class.std::__cxx11::basic_string\"]* %5, i64 0, i64 1, i32 0, i32 0\n  %341 = load i8*, i8** %340, align 8, !tbaa !16\n  %342 = getelementptr inbounds [13 x %\"class.std::__cxx11::basic_string\"], [13 x %\"class.std::__cxx11::basic_string\"]* %5, i64 0, i64 1, i32 2\n  %343 = bitcast %union.anon* %342 to i8*\n  %344 = icmp eq i8* %341, %343\n  br i1 %344, label %346, label %345\n\n345:                                              ; preds = %339\n  call void @_ZdlPv(i8* %341) #10\n  br label %346\n\n346:                                              ; preds = %345, %339\n  %347 = getelementptr inbounds [13 x %\"class.std::__cxx11::basic_string\"], [13 x %\"class.std::__cxx11::basic_string\"]* %5, i64 0, i64 0, i32 0, i32 0\n  %348 = load i8*, i8** %347, align 8, !tbaa !16\n  %349 = getelementptr inbounds [13 x %\"class.std::__cxx11::basic_string\"], [13 x %\"class.std::__cxx11::basic_string\"]* %5, i64 0, i64 0, i32 2\n  %350 = bitcast %union.anon* %349 to i8*\n  %351 = icmp eq i8* %348, %350\n  br i1 %351, label %353, label %352\n\n352:                                              ; preds = %346\n  call void @_ZdlPv(i8* %348) #10\n  br label %353\n\n353:                                              ; preds = %352, %346\n  call void @llvm.lifetime.end.p0i8(i64 416, i8* nonnull %13) #10\n  br label %269\n\n354:                                              ; preds = %120\n  call void @_ZdlPv(i8* %122) #10\n  br label %355\n\n355:                                              ; preds = %354, %120\n  %356 = getelementptr inbounds [13 x %\"class.std::__cxx11::basic_string\"], [13 x %\"class.std::__cxx11::basic_string\"]* %5, i64 0, i64 10, i32 0, i32 0\n  %357 = load i8*, i8** %356, align 8, !tbaa !16\n  %358 = getelementptr inbounds [13 x %\"class.std::__cxx11::basic_string\"], [13 x %\"class.std::__cxx11::basic_string\"]* %5, i64 0, i64 10, i32 2\n  %359 = bitcast %union.anon* %358 to i8*\n  %360 = icmp eq i8* %357, %359\n  br i1 %360, label %362, label %361\n\n361:                                              ; preds = %355\n  call void @_ZdlPv(i8* %357) #10\n  br label %362\n\n362:                                              ; preds = %361, %355\n  %363 = getelementptr inbounds [13 x %\"class.std::__cxx11::basic_string\"], [13 x %\"class.std::__cxx11::basic_string\"]* %5, i64 0, i64 9, i32 0, i32 0\n  %364 = load i8*, i8** %363, align 8, !tbaa !16\n  %365 = getelementptr inbounds [13 x %\"class.std::__cxx11::basic_string\"], [13 x %\"class.std::__cxx11::basic_string\"]* %5, i64 0, i64 9, i32 2\n  %366 = bitcast %union.anon* %365 to i8*\n  %367 = icmp eq i8* %364, %366\n  br i1 %367, label %369, label %368\n\n368:                                              ; preds = %362\n  call void @_ZdlPv(i8* %364) #10\n  br label %369\n\n369:                                              ; preds = %368, %362\n  %370 = getelementptr inbounds [13 x %\"class.std::__cxx11::basic_string\"], [13 x %\"class.std::__cxx11::basic_string\"]* %5, i64 0, i64 8, i32 0, i32 0\n  %371 = load i8*, i8** %370, align 8, !tbaa !16\n  %372 = getelementptr inbounds [13 x %\"class.std::__cxx11::basic_string\"], [13 x %\"class.std::__cxx11::basic_string\"]* %5, i64 0, i64 8, i32 2\n  %373 = bitcast %union.anon* %372 to i8*\n  %374 = icmp eq i8* %371, %373\n  br i1 %374, label %376, label %375\n\n375:                                              ; preds = %369\n  call void @_ZdlPv(i8* %371) #10\n  br label %376\n\n376:                                              ; preds = %375, %369\n  %377 = getelementptr inbounds [13 x %\"class.std::__cxx11::basic_string\"], [13 x %\"class.std::__cxx11::basic_string\"]* %5, i64 0, i64 7, i32 0, i32 0\n  %378 = load i8*, i8** %377, align 8, !tbaa !16\n  %379 = getelementptr inbounds [13 x %\"class.std::__cxx11::basic_string\"], [13 x %\"class.std::__cxx11::basic_string\"]* %5, i64 0, i64 7, i32 2\n  %380 = bitcast %union.anon* %379 to i8*\n  %381 = icmp eq i8* %378, %380\n  br i1 %381, label %383, label %382\n\n382:                                              ; preds = %376\n  call void @_ZdlPv(i8* %378) #10\n  br label %383\n\n383:                                              ; preds = %382, %376\n  %384 = getelementptr inbounds [13 x %\"class.std::__cxx11::basic_string\"], [13 x %\"class.std::__cxx11::basic_string\"]* %5, i64 0, i64 6, i32 0, i32 0\n  %385 = load i8*, i8** %384, align 8, !tbaa !16\n  %386 = getelementptr inbounds [13 x %\"class.std::__cxx11::basic_string\"], [13 x %\"class.std::__cxx11::basic_string\"]* %5, i64 0, i64 6, i32 2\n  %387 = bitcast %union.anon* %386 to i8*\n  %388 = icmp eq i8* %385, %387\n  br i1 %388, label %390, label %389\n\n389:                                              ; preds = %383\n  call void @_ZdlPv(i8* %385) #10\n  br label %390\n\n390:                                              ; preds = %389, %383\n  %391 = getelementptr inbounds [13 x %\"class.std::__cxx11::basic_string\"], [13 x %\"class.std::__cxx11::basic_string\"]* %5, i64 0, i64 5, i32 0, i32 0\n  %392 = load i8*, i8** %391, align 8, !tbaa !16\n  %393 = getelementptr inbounds [13 x %\"class.std::__cxx11::basic_string\"], [13 x %\"class.std::__cxx11::basic_string\"]* %5, i64 0, i64 5, i32 2\n  %394 = bitcast %union.anon* %393 to i8*\n  %395 = icmp eq i8* %392, %394\n  br i1 %395, label %397, label %396\n\n396:                                              ; preds = %390\n  call void @_ZdlPv(i8* %392) #10\n  br label %397\n\n397:                                              ; preds = %396, %390\n  %398 = getelementptr inbounds [13 x %\"class.std::__cxx11::basic_string\"], [13 x %\"class.std::__cxx11::basic_string\"]* %5, i64 0, i64 4, i32 0, i32 0\n  %399 = load i8*, i8** %398, align 8, !tbaa !16\n  %400 = getelementptr inbounds [13 x %\"class.std::__cxx11::basic_string\"], [13 x %\"class.std::__cxx11::basic_string\"]* %5, i64 0, i64 4, i32 2\n  %401 = bitcast %union.anon* %400 to i8*\n  %402 = icmp eq i8* %399, %401\n  br i1 %402, label %404, label %403\n\n403:                                              ; preds = %397\n  call void @_ZdlPv(i8* %399) #10\n  br label %404\n\n404:                                              ; preds = %403, %397\n  %405 = getelementptr inbounds [13 x %\"class.std::__cxx11::basic_string\"], [13 x %\"class.std::__cxx11::basic_string\"]* %5, i64 0, i64 3, i32 0, i32 0\n  %406 = load i8*, i8** %405, align 8, !tbaa !16\n  %407 = getelementptr inbounds [13 x %\"class.std::__cxx11::basic_string\"], [13 x %\"class.std::__cxx11::basic_string\"]* %5, i64 0, i64 3, i32 2\n  %408 = bitcast %union.anon* %407 to i8*\n  %409 = icmp eq i8* %406, %408\n  br i1 %409, label %411, label %410\n\n410:                                              ; preds = %404\n  call void @_ZdlPv(i8* %406) #10\n  br label %411\n\n411:                                              ; preds = %410, %404\n  %412 = getelementptr inbounds [13 x %\"class.std::__cxx11::basic_string\"], [13 x %\"class.std::__cxx11::basic_string\"]* %5, i64 0, i64 2, i32 0, i32 0\n  %413 = load i8*, i8** %412, align 8, !tbaa !16\n  %414 = getelementptr inbounds [13 x %\"class.std::__cxx11::basic_string\"], [13 x %\"class.std::__cxx11::basic_string\"]* %5, i64 0, i64 2, i32 2\n  %415 = bitcast %union.anon* %414 to i8*\n  %416 = icmp eq i8* %413, %415\n  br i1 %416, label %418, label %417\n\n417:                                              ; preds = %411\n  call void @_ZdlPv(i8* %413) #10\n  br label %418\n\n418:                                              ; preds = %417, %411\n  %419 = getelementptr inbounds [13 x %\"class.std::__cxx11::basic_string\"], [13 x %\"class.std::__cxx11::basic_string\"]* %5, i64 0, i64 1, i32 0, i32 0\n  %420 = load i8*, i8** %419, align 8, !tbaa !16\n  %421 = getelementptr inbounds [13 x %\"class.std::__cxx11::basic_string\"], [13 x %\"class.std::__cxx11::basic_string\"]* %5, i64 0, i64 1, i32 2\n  %422 = bitcast %union.anon* %421 to i8*\n  %423 = icmp eq i8* %420, %422\n  br i1 %423, label %425, label %424\n\n424:                                              ; preds = %418\n  call void @_ZdlPv(i8* %420) #10\n  br label %425\n\n425:                                              ; preds = %424, %418\n  %426 = getelementptr inbounds [13 x %\"class.std::__cxx11::basic_string\"], [13 x %\"class.std::__cxx11::basic_string\"]* %5, i64 0, i64 0, i32 0, i32 0\n  %427 = load i8*, i8** %426, align 8, !tbaa !16\n  %428 = getelementptr inbounds [13 x %\"class.std::__cxx11::basic_string\"], [13 x %\"class.std::__cxx11::basic_string\"]* %5, i64 0, i64 0, i32 2\n  %429 = bitcast %union.anon* %428 to i8*\n  %430 = icmp eq i8* %427, %429\n  br i1 %430, label %432, label %431\n\n431:                                              ; preds = %425\n  call void @_ZdlPv(i8* %427) #10\n  br label %432\n\n432:                                              ; preds = %431, %425\n  call void @llvm.lifetime.end.p0i8(i64 416, i8* nonnull %13) #10\n  %433 = invoke noalias nonnull i8* @_Znwm(i64 52) #11\n          to label %128 unwind label %126\n}\n\n; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn\ndeclare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1\n\ndeclare dso_local i32 @__gxx_personality_v0(...)\n\n; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn\ndeclare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1\n\n; Function Attrs: argmemonly mustprogress nofree nounwind willreturn\ndeclare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #2\n\n; Function Attrs: nounwind uwtable\ndefine linkonce_odr dso_local void @_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED2Ev(%\"class.std::vector\"* nonnull align 8 dereferenceable(24) %0) unnamed_addr #3 comdat align 2 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {\n  %2 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0, i64 0, i32 0, i32 0, i32 0, i32 0\n  %3 = load %\"class.std::__cxx11::basic_string\"*, %\"class.std::__cxx11::basic_string\"** %2, align 8, !tbaa !12\n  %4 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0, i64 0, i32 0, i32 0, i32 0, i32 1\n  %5 = load %\"class.std::__cxx11::basic_string\"*, %\"class.std::__cxx11::basic_string\"** %4, align 8, !tbaa !15\n  %6 = icmp eq %\"class.std::__cxx11::basic_string\"* %3, %5\n  br i1 %6, label %20, label %7\n\n7:                                                ; preds = %1, %15\n  %8 = phi %\"class.std::__cxx11::basic_string\"* [ %16, %15 ], [ %3, %1 ]\n  %9 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %8, i64 0, i32 0, i32 0\n  %10 = load i8*, i8** %9, align 8, !tbaa !16\n  %11 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %8, i64 0, i32 2\n  %12 = bitcast %union.anon* %11 to i8*\n  %13 = icmp eq i8* %10, %12\n  br i1 %13, label %15, label %14\n\n14:                                               ; preds = %7\n  tail call void @_ZdlPv(i8* %10) #10\n  br label %15\n\n15:                                               ; preds = %14, %7\n  %16 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %8, i64 1\n  %17 = icmp eq %\"class.std::__cxx11::basic_string\"* %16, %5\n  br i1 %17, label %18, label %7, !llvm.loop !26\n\n18:                                               ; preds = %15\n  %19 = load %\"class.std::__cxx11::basic_string\"*, %\"class.std::__cxx11::basic_string\"** %2, align 8, !tbaa !12\n  br label %20\n\n20:                                               ; preds = %18, %1\n  %21 = phi %\"class.std::__cxx11::basic_string\"* [ %19, %18 ], [ %3, %1 ]\n  %22 = icmp eq %\"class.std::__cxx11::basic_string\"* %21, null\n  br i1 %22, label %25, label %23\n\n23:                                               ; preds = %20\n  %24 = bitcast %\"class.std::__cxx11::basic_string\"* %21 to i8*\n  tail call void @_ZdlPv(i8* nonnull %24) #10\n  br label %25\n\n25:                                               ; preds = %20, %23\n  ret void\n}\n\n; Function Attrs: noinline noreturn nounwind\ndefine linkonce_odr hidden void @__clang_call_terminate(i8* %0) local_unnamed_addr #4 comdat {\n  %2 = tail call i8* @__cxa_begin_catch(i8* %0) #10\n  tail call void @_ZSt9terminatev() #12\n  unreachable\n}\n\ndeclare dso_local i8* @__cxa_begin_catch(i8*) local_unnamed_addr\n\ndeclare dso_local void @_ZSt9terminatev() local_unnamed_addr\n\n; Function Attrs: nobuiltin nounwind\ndeclare dso_local void @_ZdlPv(i8*) local_unnamed_addr #5\n\ndeclare dso_local i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32), i64* nonnull align 8 dereferenceable(8), i64) local_unnamed_addr #6\n\n; Function Attrs: nobuiltin allocsize(0)\ndeclare dso_local nonnull i8* @_Znwm(i64) local_unnamed_addr #7\n\n; Function Attrs: uwtable\ndefine linkonce_odr dso_local %\"class.std::__cxx11::basic_string\"* @_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPS7_EET0_T_SC_SB_(%\"class.std::__cxx11::basic_string\"* %0, %\"class.std::__cxx11::basic_string\"* %1, %\"class.std::__cxx11::basic_string\"* %2) local_unnamed_addr #0 comdat align 2 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {\n  %4 = alloca i64, align 8\n  %5 = bitcast i64* %4 to i8*\n  %6 = icmp eq %\"class.std::__cxx11::basic_string\"* %0, %1\n  br i1 %6, label %56, label %7\n\n7:                                                ; preds = %3, %30\n  %8 = phi %\"class.std::__cxx11::basic_string\"* [ %37, %30 ], [ %2, %3 ]\n  %9 = phi %\"class.std::__cxx11::basic_string\"* [ %36, %30 ], [ %0, %3 ]\n  %10 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %8, i64 0, i32 2\n  %11 = bitcast %\"class.std::__cxx11::basic_string\"* %8 to %union.anon**\n  store %union.anon* %10, %union.anon** %11, align 8, !tbaa !3\n  %12 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %9, i64 0, i32 0, i32 0\n  %13 = load i8*, i8** %12, align 8, !tbaa !16\n  %14 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %9, i64 0, i32 1\n  %15 = load i64, i64* %14, align 8, !tbaa !8\n  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #10\n  store i64 %15, i64* %4, align 8, !tbaa !20\n  %16 = icmp ugt i64 %15, 15\n  br i1 %16, label %19, label %17\n\n17:                                               ; preds = %7\n  %18 = bitcast %union.anon* %10 to i8*\n  br label %25\n\n19:                                               ; preds = %7\n  %20 = invoke i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %8, i64* nonnull align 8 dereferenceable(8) %4, i64 0)\n          to label %21 unwind label %39\n\n21:                                               ; preds = %19\n  %22 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %8, i64 0, i32 0, i32 0\n  store i8* %20, i8** %22, align 8, !tbaa !16\n  %23 = load i64, i64* %4, align 8, !tbaa !20\n  %24 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %8, i64 0, i32 2, i32 0\n  store i64 %23, i64* %24, align 8, !tbaa !11\n  br label %25\n\n25:                                               ; preds = %21, %17\n  %26 = phi i8* [ %18, %17 ], [ %20, %21 ]\n  switch i64 %15, label %29 [\n    i64 1, label %27\n    i64 0, label %30\n  ]\n\n27:                                               ; preds = %25\n  %28 = load i8, i8* %13, align 1, !tbaa !11\n  store i8 %28, i8* %26, align 1, !tbaa !11\n  br label %30\n\n29:                                               ; preds = %25\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %26, i8* align 1 %13, i64 %15, i1 false) #10\n  br label %30\n\n30:                                               ; preds = %29, %27, %25\n  %31 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %8, i64 0, i32 0, i32 0\n  %32 = load i64, i64* %4, align 8, !tbaa !20\n  %33 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %8, i64 0, i32 1\n  store i64 %32, i64* %33, align 8, !tbaa !8\n  %34 = load i8*, i8** %31, align 8, !tbaa !16\n  %35 = getelementptr inbounds i8, i8* %34, i64 %32\n  store i8 0, i8* %35, align 1, !tbaa !11\n  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5) #10\n  %36 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %9, i64 1\n  %37 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %8, i64 1\n  %38 = icmp eq %\"class.std::__cxx11::basic_string\"* %36, %1\n  br i1 %38, label %56, label %7, !llvm.loop !27\n\n39:                                               ; preds = %19\n  %40 = landingpad { i8*, i32 }\n          catch i8* null\n  %41 = extractvalue { i8*, i32 } %40, 0\n  %42 = call i8* @__cxa_begin_catch(i8* %41) #10\n  %43 = icmp eq %\"class.std::__cxx11::basic_string\"* %8, %2\n  br i1 %43, label %55, label %44\n\n44:                                               ; preds = %39, %52\n  %45 = phi %\"class.std::__cxx11::basic_string\"* [ %53, %52 ], [ %2, %39 ]\n  %46 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %45, i64 0, i32 0, i32 0\n  %47 = load i8*, i8** %46, align 8, !tbaa !16\n  %48 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %45, i64 0, i32 2\n  %49 = bitcast %union.anon* %48 to i8*\n  %50 = icmp eq i8* %47, %49\n  br i1 %50, label %52, label %51\n\n51:                                               ; preds = %44\n  call void @_ZdlPv(i8* %47) #10\n  br label %52\n\n52:                                               ; preds = %51, %44\n  %53 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %45, i64 1\n  %54 = icmp eq %\"class.std::__cxx11::basic_string\"* %53, %8\n  br i1 %54, label %55, label %44, !llvm.loop !26\n\n55:                                               ; preds = %52, %39\n  invoke void @__cxa_rethrow() #13\n          to label %64 unwind label %58\n\n56:                                               ; preds = %30, %3\n  %57 = phi %\"class.std::__cxx11::basic_string\"* [ %2, %3 ], [ %37, %30 ]\n  ret %\"class.std::__cxx11::basic_string\"* %57\n\n58:                                               ; preds = %55\n  %59 = landingpad { i8*, i32 }\n          cleanup\n  invoke void @__cxa_end_catch()\n          to label %60 unwind label %61\n\n60:                                               ; preds = %58\n  resume { i8*, i32 } %59\n\n61:                                               ; preds = %58\n  %62 = landingpad { i8*, i32 }\n          catch i8* null\n  %63 = extractvalue { i8*, i32 } %62, 0\n  call void @__clang_call_terminate(i8* %63) #12\n  unreachable\n\n64:                                               ; preds = %55\n  unreachable\n}\n\ndeclare dso_local void @__cxa_rethrow() local_unnamed_addr\n\ndeclare dso_local void @__cxa_end_catch() local_unnamed_addr\n\ndeclare dso_local nonnull align 8 dereferenceable(32) %\"class.std::__cxx11::basic_string\"* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32), i8*, i64) local_unnamed_addr #6\n\n; Function Attrs: argmemonly nofree nounwind willreturn writeonly\ndeclare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #8\n\n; Function Attrs: inaccessiblememonly nofree nosync nounwind willreturn\ndeclare void @llvm.experimental.noalias.scope.decl(metadata) #9\n\nattributes #0 = { uwtable \"frame-pointer\"=\"none\" \"min-legal-vector-width\"=\"0\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #1 = { argmemonly mustprogress nofree nosync nounwind willreturn }\nattributes #2 = { argmemonly mustprogress nofree nounwind willreturn }\nattributes #3 = { nounwind uwtable \"frame-pointer\"=\"none\" \"min-legal-vector-width\"=\"0\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #4 = { noinline noreturn nounwind }\nattributes #5 = { nobuiltin nounwind \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #6 = { \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #7 = { nobuiltin allocsize(0) \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #8 = { argmemonly nofree nounwind willreturn writeonly }\nattributes #9 = { inaccessiblememonly nofree nosync nounwind willreturn }\nattributes #10 = { nounwind }\nattributes #11 = { allocsize(0) }\nattributes #12 = { noreturn nounwind }\nattributes #13 = { noreturn }\n\n!llvm.module.flags = !{!0, !1}\n!llvm.ident = !{!2}\n\n!0 = !{i32 1, !\"wchar_size\", i32 4}\n!1 = !{i32 7, !\"uwtable\", i32 1}\n!2 = !{!\"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)\"}\n!3 = !{!4, !5, i64 0}\n!4 = !{!\"_ZTSNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderE\", !5, i64 0}\n!5 = !{!\"any pointer\", !6, i64 0}\n!6 = !{!\"omnipotent char\", !7, i64 0}\n!7 = !{!\"Simple C++ TBAA\"}\n!8 = !{!9, !10, i64 8}\n!9 = !{!\"_ZTSNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE\", !4, i64 0, !10, i64 8, !6, i64 16}\n!10 = !{!\"long\", !6, i64 0}\n!11 = !{!6, !6, i64 0}\n!12 = !{!13, !5, i64 0}\n!13 = !{!\"_ZTSNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_Vector_impl_dataE\", !5, i64 0, !5, i64 8, !5, i64 16}\n!14 = !{!13, !5, i64 16}\n!15 = !{!13, !5, i64 8}\n!16 = !{!9, !5, i64 0}\n!17 = !{!18}\n!18 = distinct !{!18, !19, !\"_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_SA_: argument 0\"}\n!19 = distinct !{!19, !\"_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_SA_\"}\n!20 = !{!10, !10, i64 0}\n!21 = !{!22, !22, i64 0}\n!22 = !{!\"int\", !6, i64 0}\n!23 = distinct !{!23, !24}\n!24 = !{!\"llvm.loop.mustprogress\"}\n!25 = distinct !{!25, !24}\n!26 = distinct !{!26, !24}\n!27 = distinct !{!27, !24}\n", "target": "This is the targeted source code:\n/*\nGiven a positive integer, obtain its roman numeral equivalent as a string,\nand return it in lowercase.\nRestrictions: 1 <= num <= 1000\n\nExamples:\n>>> int_to_mini_roman(19) == \"xix\"\n>>> int_to_mini_roman(152) == \"clii\"\n>>> int_to_mini_roman(426) == \"cdxxvi\"\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring int_to_mini_romank(int number){\n\n    string current=\"\";\n    vector<string> rep={\"m\",\"cm\",\"d\",\"cd\",\"c\",\"xc\",\"l\",\"xl\",\"x\",\"ix\",\"v\",\"iv\",\"i\"};\n    vector<int> num={1000,900,500,400,100,90,50,40,10,9,5,4,1};\n    int pos=0;\n    while(number>0)\n    {\n        while (number>=num[pos])\n        {\n            current=current+rep[pos];\n            number-=num[pos];\n        }\n        if (number>0) pos+=1;\n    }\n    return current;\n}\n"}
{"input": "Convert this to C++:\n; ModuleID = '../../Human_xBenchmarks_164/CPP_157/CPP_157.cpp'\nsource_filename = \"../../Human_xBenchmarks_164/CPP_157/CPP_157.cpp\"\ntarget datalayout = \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\ntarget triple = \"x86_64-unknown-linux-gnu\"\n\n; Function Attrs: mustprogress nofree nosync nounwind readnone uwtable willreturn\ndefine dso_local zeroext i1 @_Z20right_angle_trianglefff(float %0, float %1, float %2) local_unnamed_addr #0 {\n  %4 = fmul float %0, %0\n  %5 = fmul float %1, %1\n  %6 = fadd float %4, %5\n  %7 = fmul float %2, %2\n  %8 = fsub float %6, %7\n  %9 = tail call float @llvm.fabs.f32(float %8) #2\n  %10 = fpext float %9 to double\n  %11 = fcmp olt double %10, 1.000000e-04\n  br i1 %11, label %25, label %12\n\n12:                                               ; preds = %3\n  %13 = fadd float %4, %7\n  %14 = fsub float %13, %5\n  %15 = tail call float @llvm.fabs.f32(float %14) #2\n  %16 = fpext float %15 to double\n  %17 = fcmp olt double %16, 1.000000e-04\n  br i1 %17, label %25, label %18\n\n18:                                               ; preds = %12\n  %19 = fadd float %5, %7\n  %20 = fsub float %19, %4\n  %21 = tail call float @llvm.fabs.f32(float %20) #2\n  %22 = fpext float %21 to double\n  %23 = fcmp olt double %22, 1.000000e-04\n  br i1 %23, label %25, label %24\n\n24:                                               ; preds = %18\n  br label %25\n\n25:                                               ; preds = %3, %12, %18, %24\n  %26 = phi i1 [ false, %24 ], [ true, %18 ], [ true, %12 ], [ true, %3 ]\n  ret i1 %26\n}\n\n; Function Attrs: mustprogress nofree nosync nounwind readnone speculatable willreturn\ndeclare float @llvm.fabs.f32(float) #1\n\nattributes #0 = { mustprogress nofree nosync nounwind readnone uwtable willreturn \"frame-pointer\"=\"none\" \"min-legal-vector-width\"=\"0\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #1 = { mustprogress nofree nosync nounwind readnone speculatable willreturn }\nattributes #2 = { nounwind }\n\n!llvm.module.flags = !{!0, !1}\n!llvm.ident = !{!2}\n\n!0 = !{i32 1, !\"wchar_size\", i32 4}\n!1 = !{i32 7, !\"uwtable\", i32 1}\n!2 = !{!\"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)\"}\n", "target": "This is the targeted source code:\n/*\nGiven the lengths of the three sides of a triangle. Return true if the three\nsides form a right-angled triangle, false otherwise.\nA right-angled triangle is a triangle in which one angle is right angle or \n90 degree.\nExample:\nright_angle_triangle(3, 4, 5) == true\nright_angle_triangle(1, 2, 3) == false\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nbool right_angle_triangle(float a,float b,float c){\n\n    if (abs(a*a+b*b-c*c)<1e-4 or abs(a*a+c*c-b*b)<1e-4 or abs(b*b+c*c-a*a)<1e-4) return true;\n    return false;\n}\n"}
{"input": "Convert this to C++:\n; ModuleID = '../../Human_xBenchmarks_164/CPP_158/CPP_158.cpp'\nsource_filename = \"../../Human_xBenchmarks_164/CPP_158/CPP_158.cpp\"\ntarget datalayout = \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\ntarget triple = \"x86_64-unknown-linux-gnu\"\n\n%\"class.std::__cxx11::basic_string\" = type { %\"struct.std::__cxx11::basic_string<char>::_Alloc_hider\", i64, %union.anon }\n%\"struct.std::__cxx11::basic_string<char>::_Alloc_hider\" = type { i8* }\n%union.anon = type { i64, [8 x i8] }\n%\"class.std::vector\" = type { %\"struct.std::_Vector_base\" }\n%\"struct.std::_Vector_base\" = type { %\"struct.std::_Vector_base<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char>>>::_Vector_impl\" }\n%\"struct.std::_Vector_base<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char>>>::_Vector_impl\" = type { %\"struct.std::_Vector_base<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char>>>::_Vector_impl_data\" }\n%\"struct.std::_Vector_base<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char>>>::_Vector_impl_data\" = type { %\"class.std::__cxx11::basic_string\"*, %\"class.std::__cxx11::basic_string\"*, %\"class.std::__cxx11::basic_string\"* }\n\n; Function Attrs: uwtable\ndefine dso_local void @_Z8find_maxSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE(%\"class.std::__cxx11::basic_string\"* noalias sret(%\"class.std::__cxx11::basic_string\") align 8 %0, %\"class.std::vector\"* nocapture readonly %1) local_unnamed_addr #0 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {\n  %3 = alloca i64, align 8\n  %4 = alloca %\"class.std::__cxx11::basic_string\", align 8\n  %5 = alloca %\"class.std::__cxx11::basic_string\", align 8\n  %6 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 2\n  %7 = bitcast %\"class.std::__cxx11::basic_string\"* %0 to %union.anon**\n  store %union.anon* %6, %union.anon** %7, align 8, !tbaa !3\n  %8 = bitcast %union.anon* %6 to i8*\n  %9 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 0, i32 0\n  %10 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 1\n  store i64 0, i64* %10, align 8, !tbaa !8\n  store i8 0, i8* %8, align 8, !tbaa !11\n  %11 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %1, i64 0, i32 0, i32 0, i32 0, i32 1\n  %12 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %1, i64 0, i32 0, i32 0, i32 0, i32 0\n  %13 = bitcast %\"class.std::__cxx11::basic_string\"* %4 to i8*\n  %14 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %4, i64 0, i32 2\n  %15 = bitcast %\"class.std::__cxx11::basic_string\"* %4 to %union.anon**\n  %16 = bitcast %union.anon* %14 to i8*\n  %17 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %4, i64 0, i32 0, i32 0\n  %18 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %4, i64 0, i32 1\n  %19 = bitcast %\"class.std::__cxx11::basic_string\"* %5 to i8*\n  %20 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %5, i64 0, i32 2\n  %21 = bitcast %\"class.std::__cxx11::basic_string\"* %5 to %union.anon**\n  %22 = bitcast i64* %3 to i8*\n  %23 = bitcast %union.anon* %20 to i8*\n  %24 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %5, i64 0, i32 0, i32 0\n  %25 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %5, i64 0, i32 2, i32 0\n  %26 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %5, i64 0, i32 1\n  %27 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %4, i64 0, i32 2, i32 0\n  %28 = load %\"class.std::__cxx11::basic_string\"*, %\"class.std::__cxx11::basic_string\"** %11, align 8, !tbaa !12\n  %29 = load %\"class.std::__cxx11::basic_string\"*, %\"class.std::__cxx11::basic_string\"** %12, align 8, !tbaa !14\n  %30 = icmp eq %\"class.std::__cxx11::basic_string\"* %28, %29\n  br i1 %30, label %248, label %31\n\n31:                                               ; preds = %2\n  %32 = bitcast i64* %26 to <2 x i64>*\n  %33 = bitcast i64* %18 to <2 x i64>*\n  br label %34\n\n34:                                               ; preds = %31, %230\n  %35 = phi %\"class.std::__cxx11::basic_string\"* [ %233, %230 ], [ %29, %31 ]\n  %36 = phi i64 [ %231, %230 ], [ 0, %31 ]\n  %37 = phi i32 [ %226, %230 ], [ 0, %31 ]\n  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %13) #7\n  store %union.anon* %14, %union.anon** %15, align 8, !tbaa !3\n  store i64 0, i64* %18, align 8, !tbaa !8\n  store i8 0, i8* %16, align 8, !tbaa !11\n  %38 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %35, i64 %36, i32 1\n  %39 = load i64, i64* %38, align 8, !tbaa !8\n  %40 = icmp eq i64 %39, 0\n  br i1 %40, label %41, label %49\n\n41:                                               ; preds = %34\n  %42 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %35, i64 %36\n  %43 = sext i32 %37 to i64\n  br label %191\n\n44:                                               ; preds = %182\n  %45 = load i64, i64* %18, align 8, !tbaa !8\n  %46 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %183, i64 %36\n  %47 = sext i32 %37 to i64\n  %48 = icmp ugt i64 %45, %47\n  br i1 %48, label %218, label %191\n\n49:                                               ; preds = %34, %188\n  %50 = phi %\"class.std::__cxx11::basic_string\"* [ %183, %188 ], [ %35, %34 ]\n  %51 = phi i64 [ %190, %188 ], [ 0, %34 ]\n  %52 = phi i8* [ %189, %188 ], [ %16, %34 ]\n  %53 = phi i64 [ %184, %188 ], [ 0, %34 ]\n  %54 = getelementptr inbounds i8, i8* %52, i64 %51\n  %55 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %50, i64 %36, i32 0, i32 0\n  %56 = load i8*, i8** %55, align 8, !tbaa !15\n  %57 = getelementptr inbounds i8, i8* %56, i64 %53\n  %58 = ptrtoint i8* %54 to i64\n  %59 = icmp sgt i64 %51, 3\n  br i1 %59, label %60, label %84\n\n60:                                               ; preds = %49\n  %61 = lshr i64 %51, 2\n  %62 = load i8, i8* %57, align 1, !tbaa !11\n  br label %63\n\n63:                                               ; preds = %80, %60\n  %64 = phi i64 [ %61, %60 ], [ %82, %80 ]\n  %65 = phi i8* [ %52, %60 ], [ %81, %80 ]\n  %66 = load i8, i8* %65, align 1, !tbaa !11\n  %67 = icmp eq i8 %66, %62\n  br i1 %67, label %118, label %68\n\n68:                                               ; preds = %63\n  %69 = getelementptr inbounds i8, i8* %65, i64 1\n  %70 = load i8, i8* %69, align 1, !tbaa !11\n  %71 = icmp eq i8 %70, %62\n  br i1 %71, label %116, label %72\n\n72:                                               ; preds = %68\n  %73 = getelementptr inbounds i8, i8* %65, i64 2\n  %74 = load i8, i8* %73, align 1, !tbaa !11\n  %75 = icmp eq i8 %74, %62\n  br i1 %75, label %114, label %76\n\n76:                                               ; preds = %72\n  %77 = getelementptr inbounds i8, i8* %65, i64 3\n  %78 = load i8, i8* %77, align 1, !tbaa !11\n  %79 = icmp eq i8 %78, %62\n  br i1 %79, label %112, label %80\n\n80:                                               ; preds = %76\n  %81 = getelementptr inbounds i8, i8* %65, i64 4\n  %82 = add nsw i64 %64, -1\n  %83 = icmp sgt i64 %64, 1\n  br i1 %83, label %63, label %84, !llvm.loop !16\n\n84:                                               ; preds = %80, %49\n  %85 = phi i8* [ %52, %49 ], [ %81, %80 ]\n  %86 = ptrtoint i8* %85 to i64\n  %87 = sub i64 %58, %86\n  switch i64 %87, label %88 [\n    i64 3, label %94\n    i64 2, label %92\n    i64 1, label %90\n  ]\n\n88:                                               ; preds = %84\n  %89 = load i8, i8* %57, align 1, !tbaa !11\n  br label %122\n\n90:                                               ; preds = %84\n  %91 = load i8, i8* %57, align 1, !tbaa !11\n  br label %107\n\n92:                                               ; preds = %84\n  %93 = load i8, i8* %57, align 1, !tbaa !11\n  br label %100\n\n94:                                               ; preds = %84\n  %95 = load i8, i8* %85, align 1, !tbaa !11\n  %96 = load i8, i8* %57, align 1, !tbaa !11\n  %97 = icmp eq i8 %95, %96\n  br i1 %97, label %118, label %98\n\n98:                                               ; preds = %94\n  %99 = getelementptr inbounds i8, i8* %85, i64 1\n  br label %100\n\n100:                                              ; preds = %98, %92\n  %101 = phi i8 [ %93, %92 ], [ %96, %98 ]\n  %102 = phi i8* [ %85, %92 ], [ %99, %98 ]\n  %103 = load i8, i8* %102, align 1, !tbaa !11\n  %104 = icmp eq i8 %103, %101\n  br i1 %104, label %118, label %105\n\n105:                                              ; preds = %100\n  %106 = getelementptr inbounds i8, i8* %102, i64 1\n  br label %107\n\n107:                                              ; preds = %105, %90\n  %108 = phi i8 [ %91, %90 ], [ %101, %105 ]\n  %109 = phi i8* [ %85, %90 ], [ %106, %105 ]\n  %110 = load i8, i8* %109, align 1, !tbaa !11\n  %111 = icmp eq i8 %110, %108\n  br i1 %111, label %118, label %122\n\n112:                                              ; preds = %76\n  %113 = getelementptr inbounds i8, i8* %65, i64 3\n  br label %118\n\n114:                                              ; preds = %72\n  %115 = getelementptr inbounds i8, i8* %65, i64 2\n  br label %118\n\n116:                                              ; preds = %68\n  %117 = getelementptr inbounds i8, i8* %65, i64 1\n  br label %118\n\n118:                                              ; preds = %63, %112, %114, %116, %107, %100, %94\n  %119 = phi i8 [ %95, %94 ], [ %101, %100 ], [ %108, %107 ], [ %62, %116 ], [ %62, %114 ], [ %62, %112 ], [ %62, %63 ]\n  %120 = phi i8* [ %85, %94 ], [ %102, %100 ], [ %109, %107 ], [ %117, %116 ], [ %115, %114 ], [ %113, %112 ], [ %65, %63 ]\n  %121 = icmp eq i8* %120, %54\n  br i1 %121, label %122, label %182\n\n122:                                              ; preds = %88, %107, %118\n  %123 = phi i8 [ %89, %88 ], [ %108, %107 ], [ %119, %118 ]\n  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %19) #7\n  call void @llvm.experimental.noalias.scope.decl(metadata !18)\n  store %union.anon* %20, %union.anon** %21, align 8, !tbaa !3, !alias.scope !18\n  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %22) #7, !noalias !18\n  store i64 %51, i64* %3, align 8, !tbaa !21, !noalias !18\n  %124 = icmp ugt i64 %51, 15\n  br i1 %124, label %125, label %129\n\n125:                                              ; preds = %122\n  %126 = invoke i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %5, i64* nonnull align 8 dereferenceable(8) %3, i64 0)\n          to label %127 unwind label %178\n\n127:                                              ; preds = %125\n  store i8* %126, i8** %24, align 8, !tbaa !15, !alias.scope !18\n  %128 = load i64, i64* %3, align 8, !tbaa !21, !noalias !18\n  store i64 %128, i64* %25, align 8, !tbaa !11, !alias.scope !18\n  br label %129\n\n129:                                              ; preds = %122, %127\n  %130 = phi i8* [ %126, %127 ], [ %23, %122 ]\n  switch i64 %51, label %133 [\n    i64 1, label %131\n    i64 0, label %134\n  ]\n\n131:                                              ; preds = %129\n  %132 = load i8, i8* %52, align 1, !tbaa !11\n  store i8 %132, i8* %130, align 1, !tbaa !11\n  br label %134\n\n133:                                              ; preds = %129\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %130, i8* align 1 %52, i64 %51, i1 false) #7\n  br label %134\n\n134:                                              ; preds = %133, %131, %129\n  %135 = load i64, i64* %3, align 8, !tbaa !21, !noalias !18\n  store i64 %135, i64* %26, align 8, !tbaa !8, !alias.scope !18\n  %136 = load i8*, i8** %24, align 8, !tbaa !15, !alias.scope !18\n  %137 = getelementptr inbounds i8, i8* %136, i64 %135\n  store i8 0, i8* %137, align 1, !tbaa !11\n  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %22) #7, !noalias !18\n  %138 = load i64, i64* %26, align 8, !tbaa !8, !alias.scope !18\n  %139 = invoke nonnull align 8 dereferenceable(32) %\"class.std::__cxx11::basic_string\"* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEmmmc(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %5, i64 %138, i64 0, i64 1, i8 signext %123)\n          to label %145 unwind label %140\n\n140:                                              ; preds = %134\n  %141 = landingpad { i8*, i32 }\n          cleanup\n  %142 = load i8*, i8** %24, align 8, !tbaa !15, !alias.scope !18\n  %143 = icmp eq i8* %142, %23\n  br i1 %143, label %180, label %144\n\n144:                                              ; preds = %140\n  call void @_ZdlPv(i8* %142) #7\n  br label %180\n\n145:                                              ; preds = %134\n  %146 = load i8*, i8** %24, align 8, !tbaa !15\n  %147 = icmp eq i8* %146, %23\n  br i1 %147, label %148, label %162\n\n148:                                              ; preds = %145\n  %149 = load i64, i64* %26, align 8, !tbaa !8\n  %150 = icmp eq i64 %149, 0\n  br i1 %150, label %157, label %151\n\n151:                                              ; preds = %148\n  %152 = load i8*, i8** %17, align 8, !tbaa !15\n  %153 = icmp eq i64 %149, 1\n  br i1 %153, label %154, label %156\n\n154:                                              ; preds = %151\n  %155 = load i8, i8* %23, align 8, !tbaa !11\n  store i8 %155, i8* %152, align 1, !tbaa !11\n  br label %157\n\n156:                                              ; preds = %151\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %152, i8* nonnull align 8 %23, i64 %149, i1 false) #7\n  br label %157\n\n157:                                              ; preds = %156, %154, %148\n  %158 = load i64, i64* %26, align 8, !tbaa !8\n  store i64 %158, i64* %18, align 8, !tbaa !8\n  %159 = load i8*, i8** %17, align 8, !tbaa !15\n  %160 = getelementptr inbounds i8, i8* %159, i64 %158\n  store i8 0, i8* %160, align 1, !tbaa !11\n  %161 = load i8*, i8** %24, align 8, !tbaa !15\n  br label %171\n\n162:                                              ; preds = %145\n  %163 = load i8*, i8** %17, align 8, !tbaa !15\n  %164 = icmp eq i8* %163, %16\n  %165 = load i64, i64* %27, align 8\n  store i8* %146, i8** %17, align 8, !tbaa !15\n  %166 = load <2 x i64>, <2 x i64>* %32, align 8, !tbaa !11\n  store <2 x i64> %166, <2 x i64>* %33, align 8, !tbaa !11\n  %167 = icmp eq i8* %163, null\n  %168 = or i1 %164, %167\n  br i1 %168, label %170, label %169\n\n169:                                              ; preds = %162\n  store i8* %163, i8** %24, align 8, !tbaa !15\n  store i64 %165, i64* %25, align 8, !tbaa !11\n  br label %171\n\n170:                                              ; preds = %162\n  store %union.anon* %20, %union.anon** %21, align 8, !tbaa !15\n  br label %171\n\n171:                                              ; preds = %157, %169, %170\n  %172 = phi i8* [ %161, %157 ], [ %163, %169 ], [ %23, %170 ]\n  store i64 0, i64* %26, align 8, !tbaa !8\n  store i8 0, i8* %172, align 1, !tbaa !11\n  %173 = load i8*, i8** %24, align 8, !tbaa !15\n  %174 = icmp eq i8* %173, %23\n  br i1 %174, label %176, label %175\n\n175:                                              ; preds = %171\n  call void @_ZdlPv(i8* %173) #7\n  br label %176\n\n176:                                              ; preds = %171, %175\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %19) #7\n  %177 = load %\"class.std::__cxx11::basic_string\"*, %\"class.std::__cxx11::basic_string\"** %12, align 8, !tbaa !14\n  br label %182\n\n178:                                              ; preds = %125\n  %179 = landingpad { i8*, i32 }\n          cleanup\n  br label %180\n\n180:                                              ; preds = %140, %144, %178\n  %181 = phi { i8*, i32 } [ %179, %178 ], [ %141, %144 ], [ %141, %140 ]\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %19) #7\n  br label %239\n\n182:                                              ; preds = %118, %176\n  %183 = phi %\"class.std::__cxx11::basic_string\"* [ %50, %118 ], [ %177, %176 ]\n  %184 = add nuw i64 %53, 1\n  %185 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %183, i64 %36, i32 1\n  %186 = load i64, i64* %185, align 8, !tbaa !8\n  %187 = icmp ugt i64 %186, %184\n  br i1 %187, label %188, label %44, !llvm.loop !22\n\n188:                                              ; preds = %182\n  %189 = load i8*, i8** %17, align 8, !tbaa !15\n  %190 = load i64, i64* %18, align 8, !tbaa !8\n  br label %49\n\n191:                                              ; preds = %41, %44\n  %192 = phi i64 [ %43, %41 ], [ %47, %44 ]\n  %193 = phi %\"class.std::__cxx11::basic_string\"* [ %42, %41 ], [ %46, %44 ]\n  %194 = phi i64 [ 0, %41 ], [ %186, %44 ]\n  %195 = phi i64 [ 0, %41 ], [ %45, %44 ]\n  %196 = icmp eq i64 %195, %192\n  br i1 %196, label %197, label %225\n\n197:                                              ; preds = %191\n  %198 = load i64, i64* %10, align 8, !tbaa !8\n  %199 = icmp ugt i64 %194, %198\n  %200 = select i1 %199, i64 %198, i64 %194\n  %201 = icmp eq i64 %200, 0\n  br i1 %201, label %208, label %202\n\n202:                                              ; preds = %197\n  %203 = load i8*, i8** %9, align 8, !tbaa !15\n  %204 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %193, i64 0, i32 0, i32 0\n  %205 = load i8*, i8** %204, align 8, !tbaa !15\n  %206 = call i32 @memcmp(i8* %205, i8* %203, i64 %200) #7\n  %207 = icmp eq i32 %206, 0\n  br i1 %207, label %208, label %215\n\n208:                                              ; preds = %202, %197\n  %209 = sub i64 %194, %198\n  %210 = icmp sgt i64 %209, -2147483648\n  %211 = select i1 %210, i64 %209, i64 -2147483648\n  %212 = icmp slt i64 %211, 2147483647\n  %213 = select i1 %212, i64 %211, i64 2147483647\n  %214 = trunc i64 %213 to i32\n  br label %215\n\n215:                                              ; preds = %202, %208\n  %216 = phi i32 [ %206, %202 ], [ %214, %208 ]\n  %217 = icmp slt i32 %216, 0\n  br i1 %217, label %218, label %225\n\n218:                                              ; preds = %215, %44\n  %219 = phi %\"class.std::__cxx11::basic_string\"* [ %193, %215 ], [ %46, %44 ]\n  invoke void @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %0, %\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %219)\n          to label %220 unwind label %223\n\n220:                                              ; preds = %218\n  %221 = load i64, i64* %18, align 8, !tbaa !8\n  %222 = trunc i64 %221 to i32\n  br label %225\n\n223:                                              ; preds = %218\n  %224 = landingpad { i8*, i32 }\n          cleanup\n  br label %239\n\n225:                                              ; preds = %220, %215, %191\n  %226 = phi i32 [ %222, %220 ], [ %37, %215 ], [ %37, %191 ]\n  %227 = load i8*, i8** %17, align 8, !tbaa !15\n  %228 = icmp eq i8* %227, %16\n  br i1 %228, label %230, label %229\n\n229:                                              ; preds = %225\n  call void @_ZdlPv(i8* %227) #7\n  br label %230\n\n230:                                              ; preds = %225, %229\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %13) #7\n  %231 = add nuw i64 %36, 1\n  %232 = load %\"class.std::__cxx11::basic_string\"*, %\"class.std::__cxx11::basic_string\"** %11, align 8, !tbaa !12\n  %233 = load %\"class.std::__cxx11::basic_string\"*, %\"class.std::__cxx11::basic_string\"** %12, align 8, !tbaa !14\n  %234 = ptrtoint %\"class.std::__cxx11::basic_string\"* %232 to i64\n  %235 = ptrtoint %\"class.std::__cxx11::basic_string\"* %233 to i64\n  %236 = sub i64 %234, %235\n  %237 = ashr exact i64 %236, 5\n  %238 = icmp ugt i64 %237, %231\n  br i1 %238, label %34, label %248, !llvm.loop !23\n\n239:                                              ; preds = %180, %223\n  %240 = phi { i8*, i32 } [ %224, %223 ], [ %181, %180 ]\n  %241 = load i8*, i8** %17, align 8, !tbaa !15\n  %242 = icmp eq i8* %241, %16\n  br i1 %242, label %244, label %243\n\n243:                                              ; preds = %239\n  call void @_ZdlPv(i8* %241) #7\n  br label %244\n\n244:                                              ; preds = %243, %239\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %13) #7\n  %245 = load i8*, i8** %9, align 8, !tbaa !15\n  %246 = icmp eq i8* %245, %8\n  br i1 %246, label %249, label %247\n\n247:                                              ; preds = %244\n  call void @_ZdlPv(i8* %245) #7\n  br label %249\n\n248:                                              ; preds = %230, %2\n  ret void\n\n249:                                              ; preds = %247, %244\n  resume { i8*, i32 } %240\n}\n\n; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn\ndeclare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1\n\ndeclare dso_local i32 @__gxx_personality_v0(...)\n\n; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn\ndeclare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1\n\n; Function Attrs: nobuiltin nounwind\ndeclare dso_local void @_ZdlPv(i8*) local_unnamed_addr #2\n\ndeclare dso_local i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32), i64* nonnull align 8 dereferenceable(8), i64) local_unnamed_addr #3\n\n; Function Attrs: argmemonly mustprogress nofree nounwind willreturn\ndeclare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #4\n\ndeclare dso_local nonnull align 8 dereferenceable(32) %\"class.std::__cxx11::basic_string\"* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEmmmc(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32), i64, i64, i64, i8 signext) local_unnamed_addr #3\n\n; Function Attrs: argmemonly mustprogress nofree nounwind readonly willreturn\ndeclare dso_local i32 @memcmp(i8* nocapture, i8* nocapture, i64) local_unnamed_addr #5\n\ndeclare dso_local void @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32), %\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32)) local_unnamed_addr #3\n\n; Function Attrs: inaccessiblememonly nofree nosync nounwind willreturn\ndeclare void @llvm.experimental.noalias.scope.decl(metadata) #6\n\nattributes #0 = { uwtable \"frame-pointer\"=\"none\" \"min-legal-vector-width\"=\"0\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #1 = { argmemonly mustprogress nofree nosync nounwind willreturn }\nattributes #2 = { nobuiltin nounwind \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #3 = { \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #4 = { argmemonly mustprogress nofree nounwind willreturn }\nattributes #5 = { argmemonly mustprogress nofree nounwind readonly willreturn \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #6 = { inaccessiblememonly nofree nosync nounwind willreturn }\nattributes #7 = { nounwind }\n\n!llvm.module.flags = !{!0, !1}\n!llvm.ident = !{!2}\n\n!0 = !{i32 1, !\"wchar_size\", i32 4}\n!1 = !{i32 7, !\"uwtable\", i32 1}\n!2 = !{!\"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)\"}\n!3 = !{!4, !5, i64 0}\n!4 = !{!\"_ZTSNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderE\", !5, i64 0}\n!5 = !{!\"any pointer\", !6, i64 0}\n!6 = !{!\"omnipotent char\", !7, i64 0}\n!7 = !{!\"Simple C++ TBAA\"}\n!8 = !{!9, !10, i64 8}\n!9 = !{!\"_ZTSNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE\", !4, i64 0, !10, i64 8, !6, i64 16}\n!10 = !{!\"long\", !6, i64 0}\n!11 = !{!6, !6, i64 0}\n!12 = !{!13, !5, i64 8}\n!13 = !{!\"_ZTSNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_Vector_impl_dataE\", !5, i64 0, !5, i64 8, !5, i64 16}\n!14 = !{!13, !5, i64 0}\n!15 = !{!9, !5, i64 0}\n!16 = distinct !{!16, !17}\n!17 = !{!\"llvm.loop.mustprogress\"}\n!18 = !{!19}\n!19 = distinct !{!19, !20, !\"_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_S5_: argument 0\"}\n!20 = distinct !{!20, !\"_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_S5_\"}\n!21 = !{!10, !10, i64 0}\n!22 = distinct !{!22, !17}\n!23 = distinct !{!23, !17}\n", "target": "This is the targeted source code:\n/*\nWrite a function that accepts a vector of strings.\nThe vector contains different words. Return the word with maximum number\nof unique characters. If multiple strings have maximum number of unique\ncharacters, return the one which comes first in lexicographical order.\n\nfind_max({\"name\", \"of\", 'string\"}) == 'string\"\nfind_max({\"name\", \"enam\", \"game\"}) == \"enam\"\nfind_max({\"aaaaaaa\", \"bb\" ,\"cc\"}) == \"aaaaaaa\"\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\nstring find_max(vector<string> words){\n\n    string max=\"\";\n    int maxu=0;\n    for (int i=0;i<words.size();i++)\n    {\n        string unique=\"\";\n        for (int j=0;j<words[i].length();j++)\n            if (find(unique.begin(),unique.end(),words[i][j])==unique.end())\n                unique=unique+words[i][j];\n        if (unique.length()>maxu or (unique.length()==maxu and words[i]<max))\n        {\n            max=words[i];\n            maxu=unique.length();\n        }\n    }\n    return max;\n}\n"}
{"input": "Convert this to C++:\n; ModuleID = '../../Human_xBenchmarks_164/CPP_159/CPP_159.cpp'\nsource_filename = \"../../Human_xBenchmarks_164/CPP_159/CPP_159.cpp\"\ntarget datalayout = \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\ntarget triple = \"x86_64-unknown-linux-gnu\"\n\n%\"class.std::vector\" = type { %\"struct.std::_Vector_base\" }\n%\"struct.std::_Vector_base\" = type { %\"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl\" }\n%\"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl\" = type { %\"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl_data\" }\n%\"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl_data\" = type { i32*, i32*, i32* }\n\n; Function Attrs: uwtable\ndefine dso_local void @_Z3eatiii(%\"class.std::vector\"* noalias nocapture sret(%\"class.std::vector\") align 8 %0, i32 %1, i32 %2, i32 %3) local_unnamed_addr #0 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {\n  %5 = icmp slt i32 %3, %2\n  %6 = bitcast %\"class.std::vector\"* %0 to i8*\n  tail call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(24) %6, i8 0, i64 24, i1 false) #3\n  %7 = call noalias nonnull i8* @_Znwm(i64 8) #4\n  br i1 %5, label %8, label %15\n\n8:                                                ; preds = %4\n  %9 = add nsw i32 %3, %1\n  %10 = bitcast i8* %7 to i32*\n  %11 = bitcast %\"class.std::vector\"* %0 to i8**\n  store i8* %7, i8** %11, align 8, !tbaa !3\n  %12 = getelementptr inbounds i8, i8* %7, i64 8\n  %13 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0, i64 0, i32 0, i32 0, i32 0, i32 2\n  %14 = bitcast i32** %13 to i8**\n  store i8* %12, i8** %14, align 8, !tbaa !8\n  store i32 %9, i32* %10, align 4\n  br label %23\n\n15:                                               ; preds = %4\n  %16 = sub nsw i32 %3, %2\n  %17 = add nsw i32 %2, %1\n  %18 = bitcast i8* %7 to i32*\n  %19 = bitcast %\"class.std::vector\"* %0 to i8**\n  store i8* %7, i8** %19, align 8, !tbaa !3\n  %20 = getelementptr inbounds i8, i8* %7, i64 8\n  %21 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0, i64 0, i32 0, i32 0, i32 0, i32 2\n  %22 = bitcast i32** %21 to i8**\n  store i8* %20, i8** %22, align 8, !tbaa !8\n  store i32 %17, i32* %18, align 4\n  br label %23\n\n23:                                               ; preds = %15, %8\n  %24 = phi i32 [ %16, %15 ], [ 0, %8 ]\n  %25 = phi i8* [ %20, %15 ], [ %12, %8 ]\n  %26 = getelementptr inbounds i8, i8* %7, i64 4\n  %27 = bitcast i8* %26 to i32*\n  store i32 %24, i32* %27, align 4\n  %28 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0, i64 0, i32 0, i32 0, i32 0, i32 1\n  %29 = bitcast i32** %28 to i8**\n  store i8* %25, i8** %29, align 8, !tbaa !9\n  ret void\n}\n\ndeclare dso_local i32 @__gxx_personality_v0(...)\n\n; Function Attrs: nobuiltin allocsize(0)\ndeclare dso_local nonnull i8* @_Znwm(i64) local_unnamed_addr #1\n\n; Function Attrs: argmemonly nofree nounwind willreturn writeonly\ndeclare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2\n\nattributes #0 = { uwtable \"frame-pointer\"=\"none\" \"min-legal-vector-width\"=\"0\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #1 = { nobuiltin allocsize(0) \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #2 = { argmemonly nofree nounwind willreturn writeonly }\nattributes #3 = { nounwind }\nattributes #4 = { allocsize(0) }\n\n!llvm.module.flags = !{!0, !1}\n!llvm.ident = !{!2}\n\n!0 = !{i32 1, !\"wchar_size\", i32 4}\n!1 = !{i32 7, !\"uwtable\", i32 1}\n!2 = !{!\"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)\"}\n!3 = !{!4, !5, i64 0}\n!4 = !{!\"_ZTSNSt12_Vector_baseIiSaIiEE17_Vector_impl_dataE\", !5, i64 0, !5, i64 8, !5, i64 16}\n!5 = !{!\"any pointer\", !6, i64 0}\n!6 = !{!\"omnipotent char\", !7, i64 0}\n!7 = !{!\"Simple C++ TBAA\"}\n!8 = !{!4, !5, i64 16}\n!9 = !{!4, !5, i64 8}\n", "target": "This is the targeted source code:\n/*\nYou\"re a hungry rabbit, and you already have eaten a certain number of carrots,\nbut now you need to eat more carrots to complete the day's meals.\nyou should return a vector of { total number of eaten carrots after your meals,\n                                the number of carrots left after your meals }\nif there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n\nExample:\n* eat(5, 6, 10) -> {11, 4}\n* eat(4, 8, 9) -> {12, 1}\n* eat(1, 10, 10) -> {11, 0}\n* eat(2, 11, 5) -> {7, 0}\n\nVariables:\n@number : integer\n    the number of carrots that you have eaten.\n@need : integer\n    the number of carrots that you need to eat.\n@remaining : integer\n    the number of remaining carrots thet exist in stock\n\nConstrain:\n* 0 <= number <= 1000\n* 0 <= need <= 1000\n* 0 <= remaining <= 1000\n\nHave fun :)\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> eat(int number,int need,int remaining){\n\n    if (need>remaining) return {number+remaining, 0};\n    return {number+need,remaining-need};\n}\n"}
{"input": "Convert this to C++:\n; ModuleID = '../../Human_xBenchmarks_164/CPP_160/CPP_160.cpp'\nsource_filename = \"../../Human_xBenchmarks_164/CPP_160/CPP_160.cpp\"\ntarget datalayout = \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\ntarget triple = \"x86_64-unknown-linux-gnu\"\n\n%\"class.std::vector\" = type { %\"struct.std::_Vector_base\" }\n%\"struct.std::_Vector_base\" = type { %\"struct.std::_Vector_base<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char>>>::_Vector_impl\" }\n%\"struct.std::_Vector_base<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char>>>::_Vector_impl\" = type { %\"struct.std::_Vector_base<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char>>>::_Vector_impl_data\" }\n%\"struct.std::_Vector_base<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char>>>::_Vector_impl_data\" = type { %\"class.std::__cxx11::basic_string\"*, %\"class.std::__cxx11::basic_string\"*, %\"class.std::__cxx11::basic_string\"* }\n%\"class.std::__cxx11::basic_string\" = type { %\"struct.std::__cxx11::basic_string<char>::_Alloc_hider\", i64, %union.anon }\n%\"struct.std::__cxx11::basic_string<char>::_Alloc_hider\" = type { i8* }\n%union.anon = type { i64, [8 x i8] }\n%\"class.std::vector.3\" = type { %\"struct.std::_Vector_base.4\" }\n%\"struct.std::_Vector_base.4\" = type { %\"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl\" }\n%\"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl\" = type { %\"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl_data\" }\n%\"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl_data\" = type { i32*, i32*, i32* }\n\n@.str = private unnamed_addr constant [3 x i8] c\"**\\00\", align 1\n@.str.1 = private unnamed_addr constant [2 x i8] c\"*\\00\", align 1\n@.str.2 = private unnamed_addr constant [3 x i8] c\"//\\00\", align 1\n@.str.3 = private unnamed_addr constant [2 x i8] c\"+\\00\", align 1\n@.str.4 = private unnamed_addr constant [2 x i8] c\"-\\00\", align 1\n@.str.5 = private unnamed_addr constant [26 x i8] c\"vector::_M_realloc_insert\\00\", align 1\n\n; Function Attrs: uwtable\ndefine dso_local i32 @_Z10do_algebraSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EES_IiSaIiEE(%\"class.std::vector\"* nocapture readonly %0, %\"class.std::vector.3\"* nocapture readonly %1) local_unnamed_addr #0 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {\n  %3 = getelementptr inbounds %\"class.std::vector.3\", %\"class.std::vector.3\"* %1, i64 0, i32 0, i32 0, i32 0, i32 1\n  %4 = getelementptr inbounds %\"class.std::vector.3\", %\"class.std::vector.3\"* %1, i64 0, i32 0, i32 0, i32 0, i32 0\n  %5 = load i32*, i32** %3, align 8, !tbaa !3\n  %6 = load i32*, i32** %4, align 8, !tbaa !8\n  %7 = icmp eq i32* %5, %6\n  br i1 %7, label %8, label %15\n\n8:                                                ; preds = %63, %2\n  %9 = phi i32* [ null, %2 ], [ %66, %63 ]\n  %10 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0, i64 0, i32 0, i32 0, i32 0, i32 1\n  %11 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0, i64 0, i32 0, i32 0, i32 0, i32 0\n  %12 = load %\"class.std::__cxx11::basic_string\"*, %\"class.std::__cxx11::basic_string\"** %10, align 8, !tbaa !9\n  %13 = load %\"class.std::__cxx11::basic_string\"*, %\"class.std::__cxx11::basic_string\"** %11, align 8, !tbaa !11\n  %14 = icmp eq %\"class.std::__cxx11::basic_string\"* %12, %13\n  br i1 %14, label %222, label %88\n\n15:                                               ; preds = %2, %63\n  %16 = phi i32* [ %64, %63 ], [ %6, %2 ]\n  %17 = phi i32* [ %65, %63 ], [ %5, %2 ]\n  %18 = phi i64 [ %70, %63 ], [ 0, %2 ]\n  %19 = phi i32* [ %68, %63 ], [ null, %2 ]\n  %20 = phi i32* [ %69, %63 ], [ null, %2 ]\n  %21 = phi i32* [ %66, %63 ], [ null, %2 ]\n  %22 = icmp eq i32* %20, %19\n  br i1 %22, label %25, label %23\n\n23:                                               ; preds = %15\n  %24 = trunc i64 %18 to i32\n  store i32 %24, i32* %20, align 4, !tbaa !12\n  br label %63\n\n25:                                               ; preds = %15\n  %26 = ptrtoint i32* %19 to i64\n  %27 = ptrtoint i32* %21 to i64\n  %28 = sub i64 %26, %27\n  %29 = ashr exact i64 %28, 2\n  %30 = icmp eq i64 %28, 9223372036854775804\n  br i1 %30, label %31, label %33\n\n31:                                               ; preds = %25\n  invoke void @_ZSt20__throw_length_errorPKc(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.5, i64 0, i64 0)) #7\n          to label %32 unwind label %78\n\n32:                                               ; preds = %31\n  unreachable\n\n33:                                               ; preds = %25\n  %34 = icmp eq i64 %28, 0\n  %35 = select i1 %34, i64 1, i64 %29\n  %36 = add nsw i64 %35, %29\n  %37 = icmp ult i64 %36, %29\n  %38 = icmp ugt i64 %36, 2305843009213693951\n  %39 = or i1 %37, %38\n  %40 = select i1 %39, i64 2305843009213693951, i64 %36\n  %41 = icmp eq i64 %40, 0\n  br i1 %41, label %47, label %42\n\n42:                                               ; preds = %33\n  %43 = shl nuw nsw i64 %40, 2\n  %44 = invoke noalias nonnull i8* @_Znwm(i64 %43) #8\n          to label %45 unwind label %76\n\n45:                                               ; preds = %42\n  %46 = bitcast i8* %44 to i32*\n  br label %47\n\n47:                                               ; preds = %45, %33\n  %48 = phi i32* [ %46, %45 ], [ null, %33 ]\n  %49 = getelementptr inbounds i32, i32* %48, i64 %29\n  %50 = trunc i64 %18 to i32\n  store i32 %50, i32* %49, align 4, !tbaa !12\n  %51 = icmp sgt i64 %28, 0\n  br i1 %51, label %52, label %55\n\n52:                                               ; preds = %47\n  %53 = bitcast i32* %48 to i8*\n  %54 = bitcast i32* %21 to i8*\n  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %53, i8* align 4 %54, i64 %28, i1 false) #9\n  br label %55\n\n55:                                               ; preds = %47, %52\n  %56 = icmp eq i32* %21, null\n  br i1 %56, label %59, label %57\n\n57:                                               ; preds = %55\n  %58 = bitcast i32* %21 to i8*\n  tail call void @_ZdlPv(i8* nonnull %58) #9\n  br label %59\n\n59:                                               ; preds = %57, %55\n  %60 = getelementptr inbounds i32, i32* %48, i64 %40\n  %61 = load i32*, i32** %3, align 8, !tbaa !3\n  %62 = load i32*, i32** %4, align 8, !tbaa !8\n  br label %63\n\n63:                                               ; preds = %59, %23\n  %64 = phi i32* [ %62, %59 ], [ %16, %23 ]\n  %65 = phi i32* [ %61, %59 ], [ %17, %23 ]\n  %66 = phi i32* [ %48, %59 ], [ %21, %23 ]\n  %67 = phi i32* [ %49, %59 ], [ %20, %23 ]\n  %68 = phi i32* [ %60, %59 ], [ %19, %23 ]\n  %69 = getelementptr inbounds i32, i32* %67, i64 1\n  %70 = add nuw i64 %18, 1\n  %71 = ptrtoint i32* %65 to i64\n  %72 = ptrtoint i32* %64 to i64\n  %73 = sub i64 %71, %72\n  %74 = ashr exact i64 %73, 2\n  %75 = icmp ugt i64 %74, %70\n  br i1 %75, label %15, label %8, !llvm.loop !14\n\n76:                                               ; preds = %42\n  %77 = landingpad { i8*, i32 }\n          cleanup\n  br label %80\n\n78:                                               ; preds = %31\n  %79 = landingpad { i8*, i32 }\n          cleanup\n  br label %80\n\n80:                                               ; preds = %78, %76\n  %81 = phi { i8*, i32 } [ %77, %76 ], [ %79, %78 ]\n  %82 = icmp eq i32* %21, null\n  br i1 %82, label %85, label %83\n\n83:                                               ; preds = %80\n  %84 = bitcast i32* %21 to i8*\n  tail call void @_ZdlPv(i8* nonnull %84) #9\n  br label %85\n\n85:                                               ; preds = %83, %80\n  resume { i8*, i32 } %81\n\n86:                                               ; preds = %141\n  %87 = icmp eq %\"class.std::__cxx11::basic_string\"* %143, %144\n  br i1 %87, label %222, label %152\n\n88:                                               ; preds = %8, %141\n  %89 = phi i64 [ %142, %141 ], [ 0, %8 ]\n  %90 = phi %\"class.std::__cxx11::basic_string\"* [ %144, %141 ], [ %13, %8 ]\n  %91 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %90, i64 %89\n  %92 = tail call i32 @_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %91, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0)) #9\n  %93 = icmp eq i32 %92, 0\n  br i1 %93, label %96, label %94\n\n94:                                               ; preds = %88\n  %95 = add nuw i64 %89, 1\n  br label %141\n\n96:                                               ; preds = %88\n  %97 = getelementptr inbounds i32, i32* %9, i64 %89\n  %98 = load i32, i32* %97, align 4, !tbaa !12\n  %99 = sext i32 %98 to i64\n  %100 = getelementptr inbounds i32, i32* %9, i64 %99\n  %101 = load i32, i32* %100, align 4, !tbaa !12\n  %102 = icmp eq i32 %101, %98\n  br i1 %102, label %103, label %112\n\n103:                                              ; preds = %112, %96\n  %104 = phi i32 [ %98, %96 ], [ %113, %112 ]\n  %105 = add nuw i64 %89, 1\n  %106 = getelementptr inbounds i32, i32* %9, i64 %105\n  %107 = load i32, i32* %106, align 4, !tbaa !12\n  %108 = sext i32 %107 to i64\n  %109 = getelementptr inbounds i32, i32* %9, i64 %108\n  %110 = load i32, i32* %109, align 4, !tbaa !12\n  %111 = icmp eq i32 %110, %107\n  br i1 %111, label %124, label %118\n\n112:                                              ; preds = %96, %112\n  %113 = phi i32 [ %116, %112 ], [ %101, %96 ]\n  store i32 %113, i32* %97, align 4, !tbaa !12\n  %114 = sext i32 %113 to i64\n  %115 = getelementptr inbounds i32, i32* %9, i64 %114\n  %116 = load i32, i32* %115, align 4, !tbaa !12\n  %117 = icmp eq i32 %116, %113\n  br i1 %117, label %103, label %112, !llvm.loop !16\n\n118:                                              ; preds = %103, %118\n  %119 = phi i32 [ %122, %118 ], [ %110, %103 ]\n  store i32 %119, i32* %106, align 4, !tbaa !12\n  %120 = sext i32 %119 to i64\n  %121 = getelementptr inbounds i32, i32* %9, i64 %120\n  %122 = load i32, i32* %121, align 4, !tbaa !12\n  %123 = icmp eq i32 %122, %119\n  br i1 %123, label %124, label %118, !llvm.loop !17\n\n124:                                              ; preds = %118, %103\n  %125 = phi i64 [ %108, %103 ], [ %120, %118 ]\n  %126 = sext i32 %104 to i64\n  %127 = load i32*, i32** %4, align 8, !tbaa !8\n  %128 = getelementptr inbounds i32, i32* %127, i64 %126\n  %129 = load i32, i32* %128, align 4, !tbaa !12\n  %130 = getelementptr inbounds i32, i32* %127, i64 %125\n  %131 = load i32, i32* %130, align 4, !tbaa !12\n  %132 = sitofp i32 %129 to double\n  %133 = sitofp i32 %131 to double\n  %134 = tail call double @pow(double %132, double %133) #9\n  %135 = fptosi double %134 to i32\n  %136 = load i32, i32* %97, align 4, !tbaa !12\n  %137 = sext i32 %136 to i64\n  %138 = load i32*, i32** %4, align 8, !tbaa !8\n  %139 = getelementptr inbounds i32, i32* %138, i64 %137\n  store i32 %135, i32* %139, align 4, !tbaa !12\n  %140 = load i32, i32* %97, align 4, !tbaa !12\n  store i32 %140, i32* %106, align 4, !tbaa !12\n  br label %141\n\n141:                                              ; preds = %94, %124\n  %142 = phi i64 [ %95, %94 ], [ %105, %124 ]\n  %143 = load %\"class.std::__cxx11::basic_string\"*, %\"class.std::__cxx11::basic_string\"** %10, align 8, !tbaa !9\n  %144 = load %\"class.std::__cxx11::basic_string\"*, %\"class.std::__cxx11::basic_string\"** %11, align 8, !tbaa !11\n  %145 = ptrtoint %\"class.std::__cxx11::basic_string\"* %143 to i64\n  %146 = ptrtoint %\"class.std::__cxx11::basic_string\"* %144 to i64\n  %147 = sub i64 %145, %146\n  %148 = ashr exact i64 %147, 5\n  %149 = icmp ugt i64 %148, %142\n  br i1 %149, label %88, label %86, !llvm.loop !18\n\n150:                                              ; preds = %213\n  %151 = icmp eq %\"class.std::__cxx11::basic_string\"* %215, %216\n  br i1 %151, label %222, label %229\n\n152:                                              ; preds = %86, %213\n  %153 = phi i64 [ %214, %213 ], [ 0, %86 ]\n  %154 = phi %\"class.std::__cxx11::basic_string\"* [ %216, %213 ], [ %144, %86 ]\n  %155 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %154, i64 %153\n  %156 = tail call i32 @_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %155, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)) #9\n  %157 = icmp eq i32 %156, 0\n  br i1 %157, label %165, label %158\n\n158:                                              ; preds = %152\n  %159 = load %\"class.std::__cxx11::basic_string\"*, %\"class.std::__cxx11::basic_string\"** %11, align 8, !tbaa !11\n  %160 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %159, i64 %153\n  %161 = tail call i32 @_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %160, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i64 0, i64 0)) #9\n  %162 = icmp eq i32 %161, 0\n  br i1 %162, label %165, label %163\n\n163:                                              ; preds = %158\n  %164 = add nuw i64 %153, 1\n  br label %213\n\n165:                                              ; preds = %158, %152\n  %166 = getelementptr inbounds i32, i32* %9, i64 %153\n  %167 = load i32, i32* %166, align 4, !tbaa !12\n  %168 = sext i32 %167 to i64\n  %169 = getelementptr inbounds i32, i32* %9, i64 %168\n  %170 = load i32, i32* %169, align 4, !tbaa !12\n  %171 = icmp eq i32 %170, %167\n  br i1 %171, label %172, label %180\n\n172:                                              ; preds = %180, %165\n  %173 = add nuw i64 %153, 1\n  %174 = getelementptr inbounds i32, i32* %9, i64 %173\n  %175 = load i32, i32* %174, align 4, !tbaa !12\n  %176 = sext i32 %175 to i64\n  %177 = getelementptr inbounds i32, i32* %9, i64 %176\n  %178 = load i32, i32* %177, align 4, !tbaa !12\n  %179 = icmp eq i32 %178, %175\n  br i1 %179, label %192, label %186\n\n180:                                              ; preds = %165, %180\n  %181 = phi i32 [ %184, %180 ], [ %170, %165 ]\n  store i32 %181, i32* %166, align 4, !tbaa !12\n  %182 = sext i32 %181 to i64\n  %183 = getelementptr inbounds i32, i32* %9, i64 %182\n  %184 = load i32, i32* %183, align 4, !tbaa !12\n  %185 = icmp eq i32 %184, %181\n  br i1 %185, label %172, label %180, !llvm.loop !19\n\n186:                                              ; preds = %172, %186\n  %187 = phi i32 [ %190, %186 ], [ %178, %172 ]\n  store i32 %187, i32* %174, align 4, !tbaa !12\n  %188 = sext i32 %187 to i64\n  %189 = getelementptr inbounds i32, i32* %9, i64 %188\n  %190 = load i32, i32* %189, align 4, !tbaa !12\n  %191 = icmp eq i32 %190, %187\n  br i1 %191, label %192, label %186, !llvm.loop !20\n\n192:                                              ; preds = %186, %172\n  %193 = load %\"class.std::__cxx11::basic_string\"*, %\"class.std::__cxx11::basic_string\"** %11, align 8, !tbaa !11\n  %194 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %193, i64 %153\n  %195 = tail call i32 @_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %194, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)) #9\n  %196 = icmp eq i32 %195, 0\n  %197 = load i32, i32* %166, align 4, !tbaa !12\n  %198 = sext i32 %197 to i64\n  %199 = load i32*, i32** %4, align 8, !tbaa !8\n  %200 = getelementptr inbounds i32, i32* %199, i64 %198\n  %201 = load i32, i32* %200, align 4, !tbaa !12\n  %202 = load i32, i32* %174, align 4, !tbaa !12\n  %203 = sext i32 %202 to i64\n  %204 = getelementptr inbounds i32, i32* %199, i64 %203\n  %205 = load i32, i32* %204, align 4, !tbaa !12\n  br i1 %196, label %206, label %208\n\n206:                                              ; preds = %192\n  %207 = mul nsw i32 %205, %201\n  br label %210\n\n208:                                              ; preds = %192\n  %209 = sdiv i32 %201, %205\n  br label %210\n\n210:                                              ; preds = %208, %206\n  %211 = phi i32 [ %209, %208 ], [ %207, %206 ]\n  store i32 %211, i32* %200, align 4, !tbaa !12\n  %212 = load i32, i32* %166, align 4, !tbaa !12\n  store i32 %212, i32* %174, align 4, !tbaa !12\n  br label %213\n\n213:                                              ; preds = %163, %210\n  %214 = phi i64 [ %164, %163 ], [ %173, %210 ]\n  %215 = load %\"class.std::__cxx11::basic_string\"*, %\"class.std::__cxx11::basic_string\"** %10, align 8, !tbaa !9\n  %216 = load %\"class.std::__cxx11::basic_string\"*, %\"class.std::__cxx11::basic_string\"** %11, align 8, !tbaa !11\n  %217 = ptrtoint %\"class.std::__cxx11::basic_string\"* %215 to i64\n  %218 = ptrtoint %\"class.std::__cxx11::basic_string\"* %216 to i64\n  %219 = sub i64 %217, %218\n  %220 = ashr exact i64 %219, 5\n  %221 = icmp ugt i64 %220, %214\n  br i1 %221, label %152, label %150, !llvm.loop !21\n\n222:                                              ; preds = %287, %8, %86, %150\n  %223 = load i32*, i32** %4, align 8, !tbaa !8\n  %224 = load i32, i32* %223, align 4, !tbaa !12\n  %225 = icmp eq i32* %9, null\n  br i1 %225, label %228, label %226\n\n226:                                              ; preds = %222\n  %227 = bitcast i32* %9 to i8*\n  tail call void @_ZdlPv(i8* nonnull %227) #9\n  br label %228\n\n228:                                              ; preds = %226, %222\n  ret i32 %224\n\n229:                                              ; preds = %150, %287\n  %230 = phi i64 [ %288, %287 ], [ 0, %150 ]\n  %231 = phi %\"class.std::__cxx11::basic_string\"* [ %290, %287 ], [ %216, %150 ]\n  %232 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %231, i64 %230\n  %233 = tail call i32 @_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %232, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)) #9\n  %234 = icmp eq i32 %233, 0\n  br i1 %234, label %242, label %235\n\n235:                                              ; preds = %229\n  %236 = load %\"class.std::__cxx11::basic_string\"*, %\"class.std::__cxx11::basic_string\"** %11, align 8, !tbaa !11\n  %237 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %236, i64 %230\n  %238 = tail call i32 @_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %237, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0)) #9\n  %239 = icmp eq i32 %238, 0\n  br i1 %239, label %242, label %240\n\n240:                                              ; preds = %235\n  %241 = add nuw i64 %230, 1\n  br label %287\n\n242:                                              ; preds = %235, %229\n  %243 = getelementptr inbounds i32, i32* %9, i64 %230\n  %244 = load i32, i32* %243, align 4, !tbaa !12\n  %245 = sext i32 %244 to i64\n  %246 = getelementptr inbounds i32, i32* %9, i64 %245\n  %247 = load i32, i32* %246, align 4, !tbaa !12\n  %248 = icmp eq i32 %247, %244\n  br i1 %248, label %249, label %257\n\n249:                                              ; preds = %257, %242\n  %250 = add nuw i64 %230, 1\n  %251 = getelementptr inbounds i32, i32* %9, i64 %250\n  %252 = load i32, i32* %251, align 4, !tbaa !12\n  %253 = sext i32 %252 to i64\n  %254 = getelementptr inbounds i32, i32* %9, i64 %253\n  %255 = load i32, i32* %254, align 4, !tbaa !12\n  %256 = icmp eq i32 %255, %252\n  br i1 %256, label %269, label %263\n\n257:                                              ; preds = %242, %257\n  %258 = phi i32 [ %261, %257 ], [ %247, %242 ]\n  store i32 %258, i32* %243, align 4, !tbaa !12\n  %259 = sext i32 %258 to i64\n  %260 = getelementptr inbounds i32, i32* %9, i64 %259\n  %261 = load i32, i32* %260, align 4, !tbaa !12\n  %262 = icmp eq i32 %261, %258\n  br i1 %262, label %249, label %257, !llvm.loop !22\n\n263:                                              ; preds = %249, %263\n  %264 = phi i32 [ %267, %263 ], [ %255, %249 ]\n  store i32 %264, i32* %251, align 4, !tbaa !12\n  %265 = sext i32 %264 to i64\n  %266 = getelementptr inbounds i32, i32* %9, i64 %265\n  %267 = load i32, i32* %266, align 4, !tbaa !12\n  %268 = icmp eq i32 %267, %264\n  br i1 %268, label %269, label %263, !llvm.loop !23\n\n269:                                              ; preds = %263, %249\n  %270 = load %\"class.std::__cxx11::basic_string\"*, %\"class.std::__cxx11::basic_string\"** %11, align 8, !tbaa !11\n  %271 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %270, i64 %230\n  %272 = tail call i32 @_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %271, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)) #9\n  %273 = icmp eq i32 %272, 0\n  %274 = load i32, i32* %243, align 4, !tbaa !12\n  %275 = sext i32 %274 to i64\n  %276 = load i32*, i32** %4, align 8, !tbaa !8\n  %277 = getelementptr inbounds i32, i32* %276, i64 %275\n  %278 = load i32, i32* %277, align 4, !tbaa !12\n  %279 = load i32, i32* %251, align 4, !tbaa !12\n  %280 = sext i32 %279 to i64\n  %281 = getelementptr inbounds i32, i32* %276, i64 %280\n  %282 = load i32, i32* %281, align 4, !tbaa !12\n  %283 = sub i32 0, %282\n  %284 = select i1 %273, i32 %282, i32 %283\n  %285 = add i32 %278, %284\n  store i32 %285, i32* %277, align 4, !tbaa !12\n  %286 = load i32, i32* %243, align 4, !tbaa !12\n  store i32 %286, i32* %251, align 4, !tbaa !12\n  br label %287\n\n287:                                              ; preds = %240, %269\n  %288 = phi i64 [ %241, %240 ], [ %250, %269 ]\n  %289 = load %\"class.std::__cxx11::basic_string\"*, %\"class.std::__cxx11::basic_string\"** %10, align 8, !tbaa !9\n  %290 = load %\"class.std::__cxx11::basic_string\"*, %\"class.std::__cxx11::basic_string\"** %11, align 8, !tbaa !11\n  %291 = ptrtoint %\"class.std::__cxx11::basic_string\"* %289 to i64\n  %292 = ptrtoint %\"class.std::__cxx11::basic_string\"* %290 to i64\n  %293 = sub i64 %291, %292\n  %294 = ashr exact i64 %293, 5\n  %295 = icmp ugt i64 %294, %288\n  br i1 %295, label %229, label %222, !llvm.loop !24\n}\n\ndeclare dso_local i32 @__gxx_personality_v0(...)\n\n; Function Attrs: mustprogress nofree nounwind willreturn\ndeclare dso_local double @pow(double, double) local_unnamed_addr #1\n\n; Function Attrs: nobuiltin nounwind\ndeclare dso_local void @_ZdlPv(i8*) local_unnamed_addr #2\n\n; Function Attrs: noreturn\ndeclare dso_local void @_ZSt20__throw_length_errorPKc(i8*) local_unnamed_addr #3\n\n; Function Attrs: nobuiltin allocsize(0)\ndeclare dso_local nonnull i8* @_Znwm(i64) local_unnamed_addr #4\n\n; Function Attrs: argmemonly mustprogress nofree nounwind willreturn\ndeclare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #5\n\n; Function Attrs: nounwind\ndeclare dso_local i32 @_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32), i8*) local_unnamed_addr #6\n\nattributes #0 = { uwtable \"frame-pointer\"=\"none\" \"min-legal-vector-width\"=\"0\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #1 = { mustprogress nofree nounwind willreturn \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #2 = { nobuiltin nounwind \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #3 = { noreturn \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #4 = { nobuiltin allocsize(0) \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #5 = { argmemonly mustprogress nofree nounwind willreturn }\nattributes #6 = { nounwind \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #7 = { noreturn }\nattributes #8 = { allocsize(0) }\nattributes #9 = { nounwind }\n\n!llvm.module.flags = !{!0, !1}\n!llvm.ident = !{!2}\n\n!0 = !{i32 1, !\"wchar_size\", i32 4}\n!1 = !{i32 7, !\"uwtable\", i32 1}\n!2 = !{!\"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)\"}\n!3 = !{!4, !5, i64 8}\n!4 = !{!\"_ZTSNSt12_Vector_baseIiSaIiEE17_Vector_impl_dataE\", !5, i64 0, !5, i64 8, !5, i64 16}\n!5 = !{!\"any pointer\", !6, i64 0}\n!6 = !{!\"omnipotent char\", !7, i64 0}\n!7 = !{!\"Simple C++ TBAA\"}\n!8 = !{!4, !5, i64 0}\n!9 = !{!10, !5, i64 8}\n!10 = !{!\"_ZTSNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_Vector_impl_dataE\", !5, i64 0, !5, i64 8, !5, i64 16}\n!11 = !{!10, !5, i64 0}\n!12 = !{!13, !13, i64 0}\n!13 = !{!\"int\", !6, i64 0}\n!14 = distinct !{!14, !15}\n!15 = !{!\"llvm.loop.mustprogress\"}\n!16 = distinct !{!16, !15}\n!17 = distinct !{!17, !15}\n!18 = distinct !{!18, !15}\n!19 = distinct !{!19, !15}\n!20 = distinct !{!20, !15}\n!21 = distinct !{!21, !15}\n!22 = distinct !{!22, !15}\n!23 = distinct !{!23, !15}\n!24 = distinct !{!24, !15}\n", "target": "This is the targeted source code:\n/*\nGiven two vectors operator, and operand. The first vector has basic algebra operations, and \nthe second vector is a vector of integers. Use the two given vectors to build the algebric \nexpression and return the evaluation of this expression.\n\nThe basic algebra operations:\nAddition ( + ) \nSubtraction ( - ) \nMultiplication ( * ) \nFloor division ( // ) \nExponentiation ( ** ) \n\nExample:\noperator{\"+\", \"*\", \"-\"}\nvector = {2, 3, 4, 5}\nresult = 2 + 3 * 4 - 5\n=> result = 9\n\nNote:\n    The length of operator vector is equal to the length of operand vector minus one.\n    Operand is a vector of of non-negative integers.\n    Operator vector has at least one operator, and operand vector has at least two operands.\n\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint do_algebra(vector<string> operato, vector<int> operand){\n\n    vector<int> num={};\n    vector<int> posto={};\n    for (int i=0;i<operand.size();i++)\n        posto.push_back(i);\n    for (int i=0;i<operato.size();i++)\n        if (operato[i]==\"**\") \n        {\n        while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];\n        while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];\n        operand[posto[i]]=pow(operand[posto[i]],operand[posto[i+1]]);\n        posto[i+1]=posto[i];\n        }\n    for (int i=0;i<operato.size();i++)\n        if (operato[i]==\"*\" or operato[i]==\"//\") \n        {\n        while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];\n        while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];\n        if (operato[i]==\"*\")\n            operand[posto[i]]=operand[posto[i]]*operand[posto[i+1]];\n        else\n            operand[posto[i]]=operand[posto[i]]/operand[posto[i+1]];\n        posto[i+1]=posto[i];\n        }\n    for (int i=0;i<operato.size();i++)\n        if (operato[i]==\"+\" or operato[i]==\"-\") \n        {\n        while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];\n        while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];\n        if (operato[i]==\"+\")\n            operand[posto[i]]=operand[posto[i]]+operand[posto[i+1]];\n        else\n            operand[posto[i]]=operand[posto[i]]-operand[posto[i+1]];\n        posto[i+1]=posto[i];\n        }\n    return operand[0];\n\n}\n"}
{"input": "Convert this to C++:\n; ModuleID = '../../Human_xBenchmarks_164/CPP_161/CPP_161.cpp'\nsource_filename = \"../../Human_xBenchmarks_164/CPP_161/CPP_161.cpp\"\ntarget datalayout = \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\ntarget triple = \"x86_64-unknown-linux-gnu\"\n\n%\"class.std::__cxx11::basic_string\" = type { %\"struct.std::__cxx11::basic_string<char>::_Alloc_hider\", i64, %union.anon }\n%\"struct.std::__cxx11::basic_string<char>::_Alloc_hider\" = type { i8* }\n%union.anon = type { i64, [8 x i8] }\n\n; Function Attrs: uwtable\ndefine dso_local void @_Z5solveNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE(%\"class.std::__cxx11::basic_string\"* noalias sret(%\"class.std::__cxx11::basic_string\") align 8 %0, %\"class.std::__cxx11::basic_string\"* nocapture readonly %1) local_unnamed_addr #0 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {\n  %3 = alloca i64, align 8\n  %4 = alloca i64, align 8\n  %5 = alloca %\"class.std::__cxx11::basic_string\", align 8\n  %6 = alloca %\"class.std::__cxx11::basic_string\", align 8\n  %7 = bitcast %\"class.std::__cxx11::basic_string\"* %5 to i8*\n  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %7) #6\n  %8 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %5, i64 0, i32 2\n  %9 = bitcast %\"class.std::__cxx11::basic_string\"* %5 to %union.anon**\n  store %union.anon* %8, %union.anon** %9, align 8, !tbaa !3\n  %10 = bitcast %union.anon* %8 to i8*\n  %11 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %5, i64 0, i32 0, i32 0\n  %12 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %5, i64 0, i32 1\n  store i64 0, i64* %12, align 8, !tbaa !8\n  store i8 0, i8* %10, align 8, !tbaa !11\n  %13 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %1, i64 0, i32 1\n  %14 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %1, i64 0, i32 0, i32 0\n  %15 = bitcast %\"class.std::__cxx11::basic_string\"* %6 to i8*\n  %16 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %6, i64 0, i32 2\n  %17 = bitcast %\"class.std::__cxx11::basic_string\"* %6 to %union.anon**\n  %18 = bitcast i64* %4 to i8*\n  %19 = bitcast %union.anon* %16 to i8*\n  %20 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %6, i64 0, i32 0, i32 0\n  %21 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %6, i64 0, i32 2, i32 0\n  %22 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %6, i64 0, i32 1\n  %23 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %5, i64 0, i32 2, i32 0\n  %24 = load i64, i64* %13, align 8, !tbaa !8\n  %25 = icmp eq i64 %24, 0\n  br i1 %25, label %29, label %26\n\n26:                                               ; preds = %2\n  %27 = bitcast i64* %22 to <2 x i64>*\n  %28 = bitcast i64* %12 to <2 x i64>*\n  br label %34\n\n29:                                               ; preds = %108, %2\n  %30 = phi i32 [ 0, %2 ], [ %52, %108 ]\n  %31 = phi i64 [ 0, %2 ], [ %110, %108 ]\n  %32 = sext i32 %30 to i64\n  %33 = icmp eq i64 %31, %32\n  br i1 %33, label %116, label %246\n\n34:                                               ; preds = %26, %108\n  %35 = phi i64 [ %109, %108 ], [ 0, %26 ]\n  %36 = phi i32 [ %52, %108 ], [ 0, %26 ]\n  %37 = load i8*, i8** %14, align 8, !tbaa !12\n  %38 = getelementptr inbounds i8, i8* %37, i64 %35\n  %39 = load i8, i8* %38, align 1, !tbaa !11\n  %40 = add i8 %39, -65\n  %41 = icmp ult i8 %40, 26\n  br i1 %41, label %42, label %44\n\n42:                                               ; preds = %34\n  %43 = add nuw nsw i8 %39, 32\n  br label %51\n\n44:                                               ; preds = %34\n  %45 = add i8 %39, -97\n  %46 = icmp ult i8 %45, 26\n  br i1 %46, label %47, label %49\n\n47:                                               ; preds = %44\n  %48 = add nsw i8 %39, -32\n  br label %51\n\n49:                                               ; preds = %44\n  %50 = add nsw i32 %36, 1\n  br label %51\n\n51:                                               ; preds = %47, %49, %42\n  %52 = phi i32 [ %36, %42 ], [ %36, %47 ], [ %50, %49 ]\n  %53 = phi i8 [ %43, %42 ], [ %48, %47 ], [ %39, %49 ]\n  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %15) #6\n  call void @llvm.experimental.noalias.scope.decl(metadata !13)\n  store %union.anon* %16, %union.anon** %17, align 8, !tbaa !3, !alias.scope !13\n  %54 = load i8*, i8** %11, align 8, !tbaa !12, !noalias !13\n  %55 = load i64, i64* %12, align 8, !tbaa !8, !noalias !13\n  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %18) #6, !noalias !13\n  store i64 %55, i64* %4, align 8, !tbaa !16, !noalias !13\n  %56 = icmp ugt i64 %55, 15\n  br i1 %56, label %57, label %61\n\n57:                                               ; preds = %51\n  %58 = invoke i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %6, i64* nonnull align 8 dereferenceable(8) %4, i64 0)\n          to label %59 unwind label %112\n\n59:                                               ; preds = %57\n  store i8* %58, i8** %20, align 8, !tbaa !12, !alias.scope !13\n  %60 = load i64, i64* %4, align 8, !tbaa !16, !noalias !13\n  store i64 %60, i64* %21, align 8, !tbaa !11, !alias.scope !13\n  br label %61\n\n61:                                               ; preds = %51, %59\n  %62 = phi i8* [ %58, %59 ], [ %19, %51 ]\n  switch i64 %55, label %65 [\n    i64 1, label %63\n    i64 0, label %66\n  ]\n\n63:                                               ; preds = %61\n  %64 = load i8, i8* %54, align 1, !tbaa !11\n  store i8 %64, i8* %62, align 1, !tbaa !11\n  br label %66\n\n65:                                               ; preds = %61\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %62, i8* align 1 %54, i64 %55, i1 false) #6\n  br label %66\n\n66:                                               ; preds = %65, %63, %61\n  %67 = load i64, i64* %4, align 8, !tbaa !16, !noalias !13\n  store i64 %67, i64* %22, align 8, !tbaa !8, !alias.scope !13\n  %68 = load i8*, i8** %20, align 8, !tbaa !12, !alias.scope !13\n  %69 = getelementptr inbounds i8, i8* %68, i64 %67\n  store i8 0, i8* %69, align 1, !tbaa !11\n  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %18) #6, !noalias !13\n  %70 = load i64, i64* %22, align 8, !tbaa !8, !alias.scope !13\n  %71 = invoke nonnull align 8 dereferenceable(32) %\"class.std::__cxx11::basic_string\"* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEmmmc(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %6, i64 %70, i64 0, i64 1, i8 signext %53)\n          to label %77 unwind label %72\n\n72:                                               ; preds = %66\n  %73 = landingpad { i8*, i32 }\n          cleanup\n  %74 = load i8*, i8** %20, align 8, !tbaa !12, !alias.scope !13\n  %75 = icmp eq i8* %74, %19\n  br i1 %75, label %114, label %76\n\n76:                                               ; preds = %72\n  call void @_ZdlPv(i8* %74) #6\n  br label %114\n\n77:                                               ; preds = %66\n  %78 = load i8*, i8** %20, align 8, !tbaa !12\n  %79 = icmp eq i8* %78, %19\n  br i1 %79, label %80, label %94\n\n80:                                               ; preds = %77\n  %81 = load i64, i64* %22, align 8, !tbaa !8\n  %82 = icmp eq i64 %81, 0\n  br i1 %82, label %89, label %83\n\n83:                                               ; preds = %80\n  %84 = load i8*, i8** %11, align 8, !tbaa !12\n  %85 = icmp eq i64 %81, 1\n  br i1 %85, label %86, label %88\n\n86:                                               ; preds = %83\n  %87 = load i8, i8* %19, align 8, !tbaa !11\n  store i8 %87, i8* %84, align 1, !tbaa !11\n  br label %89\n\n88:                                               ; preds = %83\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %84, i8* nonnull align 8 %19, i64 %81, i1 false) #6\n  br label %89\n\n89:                                               ; preds = %88, %86, %80\n  %90 = load i64, i64* %22, align 8, !tbaa !8\n  store i64 %90, i64* %12, align 8, !tbaa !8\n  %91 = load i8*, i8** %11, align 8, !tbaa !12\n  %92 = getelementptr inbounds i8, i8* %91, i64 %90\n  store i8 0, i8* %92, align 1, !tbaa !11\n  %93 = load i8*, i8** %20, align 8, !tbaa !12\n  br label %103\n\n94:                                               ; preds = %77\n  %95 = load i8*, i8** %11, align 8, !tbaa !12\n  %96 = icmp eq i8* %95, %10\n  %97 = load i64, i64* %23, align 8\n  store i8* %78, i8** %11, align 8, !tbaa !12\n  %98 = load <2 x i64>, <2 x i64>* %27, align 8, !tbaa !11\n  store <2 x i64> %98, <2 x i64>* %28, align 8, !tbaa !11\n  %99 = icmp eq i8* %95, null\n  %100 = or i1 %96, %99\n  br i1 %100, label %102, label %101\n\n101:                                              ; preds = %94\n  store i8* %95, i8** %20, align 8, !tbaa !12\n  store i64 %97, i64* %21, align 8, !tbaa !11\n  br label %103\n\n102:                                              ; preds = %94\n  store %union.anon* %16, %union.anon** %17, align 8, !tbaa !12\n  br label %103\n\n103:                                              ; preds = %89, %101, %102\n  %104 = phi i8* [ %95, %101 ], [ %19, %102 ], [ %93, %89 ]\n  store i64 0, i64* %22, align 8, !tbaa !8\n  store i8 0, i8* %104, align 1, !tbaa !11\n  %105 = load i8*, i8** %20, align 8, !tbaa !12\n  %106 = icmp eq i8* %105, %19\n  br i1 %106, label %108, label %107\n\n107:                                              ; preds = %103\n  call void @_ZdlPv(i8* %105) #6\n  br label %108\n\n108:                                              ; preds = %103, %107\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %15) #6\n  %109 = add nuw i64 %35, 1\n  %110 = load i64, i64* %13, align 8, !tbaa !8\n  %111 = icmp ugt i64 %110, %109\n  br i1 %111, label %34, label %29, !llvm.loop !17\n\n112:                                              ; preds = %57\n  %113 = landingpad { i8*, i32 }\n          cleanup\n  br label %114\n\n114:                                              ; preds = %72, %76, %112\n  %115 = phi { i8*, i32 } [ %113, %112 ], [ %73, %76 ], [ %73, %72 ]\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %15) #6\n  br label %269\n\n116:                                              ; preds = %29\n  %117 = load i8*, i8** %14, align 8, !tbaa !12, !noalias !19\n  %118 = ptrtoint i8* %117 to i64\n  %119 = getelementptr inbounds i8, i8* %117, i64 %31\n  %120 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 2\n  %121 = bitcast %\"class.std::__cxx11::basic_string\"* %0 to %union.anon**\n  store %union.anon* %120, %union.anon** %121, align 8, !tbaa !3\n  %122 = bitcast i64* %3 to i8*\n  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %122) #6\n  store i64 %31, i64* %3, align 8, !tbaa !16\n  %123 = icmp ugt i64 %31, 15\n  br i1 %123, label %124, label %130\n\n124:                                              ; preds = %116\n  %125 = invoke i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %0, i64* nonnull align 8 dereferenceable(8) %3, i64 0)\n          to label %126 unwind label %244\n\n126:                                              ; preds = %124\n  %127 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 0, i32 0\n  store i8* %125, i8** %127, align 8, !tbaa !12\n  %128 = load i64, i64* %3, align 8, !tbaa !16\n  %129 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 2, i32 0\n  store i64 %128, i64* %129, align 8, !tbaa !11\n  br label %133\n\n130:                                              ; preds = %116\n  %131 = bitcast %union.anon* %120 to i8*\n  %132 = icmp eq i64 %31, 0\n  br i1 %132, label %260, label %133\n\n133:                                              ; preds = %126, %130\n  %134 = phi i8* [ %125, %126 ], [ %131, %130 ]\n  %135 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 0, i32 0\n  %136 = icmp ult i64 %31, 4\n  br i1 %136, label %191, label %137\n\n137:                                              ; preds = %133\n  %138 = getelementptr i8, i8* %134, i64 %31\n  %139 = icmp ult i8* %134, %119\n  %140 = icmp ult i8* %117, %138\n  %141 = and i1 %139, %140\n  br i1 %141, label %191, label %142\n\n142:                                              ; preds = %137\n  %143 = icmp ult i64 %31, 32\n  br i1 %143, label %172, label %144\n\n144:                                              ; preds = %142\n  %145 = and i64 %31, -32\n  br label %146\n\n146:                                              ; preds = %146, %144\n  %147 = phi i64 [ 0, %144 ], [ %162, %146 ]\n  %148 = getelementptr i8, i8* %134, i64 %147\n  %149 = xor i64 %147, -1\n  %150 = getelementptr i8, i8* %119, i64 %149\n  %151 = getelementptr inbounds i8, i8* %150, i64 -15\n  %152 = bitcast i8* %151 to <16 x i8>*\n  %153 = load <16 x i8>, <16 x i8>* %152, align 1, !tbaa !11, !alias.scope !22\n  %154 = shufflevector <16 x i8> %153, <16 x i8> poison, <16 x i32> <i32 15, i32 14, i32 13, i32 12, i32 11, i32 10, i32 9, i32 8, i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0>\n  %155 = getelementptr inbounds i8, i8* %150, i64 -31\n  %156 = bitcast i8* %155 to <16 x i8>*\n  %157 = load <16 x i8>, <16 x i8>* %156, align 1, !tbaa !11, !alias.scope !22\n  %158 = shufflevector <16 x i8> %157, <16 x i8> poison, <16 x i32> <i32 15, i32 14, i32 13, i32 12, i32 11, i32 10, i32 9, i32 8, i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0>\n  %159 = bitcast i8* %148 to <16 x i8>*\n  store <16 x i8> %154, <16 x i8>* %159, align 1, !tbaa !11, !alias.scope !25, !noalias !22\n  %160 = getelementptr i8, i8* %148, i64 16\n  %161 = bitcast i8* %160 to <16 x i8>*\n  store <16 x i8> %158, <16 x i8>* %161, align 1, !tbaa !11, !alias.scope !25, !noalias !22\n  %162 = add nuw i64 %147, 32\n  %163 = icmp eq i64 %162, %145\n  br i1 %163, label %164, label %146, !llvm.loop !27\n\n164:                                              ; preds = %146\n  %165 = icmp eq i64 %31, %145\n  br i1 %165, label %241, label %166\n\n166:                                              ; preds = %164\n  %167 = getelementptr i8, i8* %134, i64 %145\n  %168 = sub i64 0, %145\n  %169 = getelementptr i8, i8* %119, i64 %168\n  %170 = and i64 %31, 28\n  %171 = icmp eq i64 %170, 0\n  br i1 %171, label %191, label %172\n\n172:                                              ; preds = %142, %166\n  %173 = phi i64 [ %145, %166 ], [ 0, %142 ]\n  %174 = and i64 %31, -4\n  %175 = sub i64 0, %174\n  %176 = getelementptr i8, i8* %119, i64 %175\n  %177 = getelementptr i8, i8* %134, i64 %174\n  br label %178\n\n178:                                              ; preds = %178, %172\n  %179 = phi i64 [ %173, %172 ], [ %187, %178 ]\n  %180 = getelementptr i8, i8* %134, i64 %179\n  %181 = sub nuw nsw i64 -4, %179\n  %182 = getelementptr i8, i8* %119, i64 %181\n  %183 = bitcast i8* %182 to <4 x i8>*\n  %184 = load <4 x i8>, <4 x i8>* %183, align 1, !tbaa !11\n  %185 = shufflevector <4 x i8> %184, <4 x i8> poison, <4 x i32> <i32 3, i32 2, i32 1, i32 0>\n  %186 = bitcast i8* %180 to <4 x i8>*\n  store <4 x i8> %185, <4 x i8>* %186, align 1, !tbaa !11\n  %187 = add nuw i64 %179, 4\n  %188 = icmp eq i64 %187, %174\n  br i1 %188, label %189, label %178, !llvm.loop !29\n\n189:                                              ; preds = %178\n  %190 = icmp eq i64 %31, %174\n  br i1 %190, label %241, label %191\n\n191:                                              ; preds = %137, %133, %166, %189\n  %192 = phi i8* [ %119, %133 ], [ %119, %137 ], [ %169, %166 ], [ %176, %189 ]\n  %193 = phi i8* [ %134, %133 ], [ %134, %137 ], [ %167, %166 ], [ %177, %189 ]\n  %194 = ptrtoint i8* %192 to i64\n  %195 = sub i64 %194, %118\n  %196 = xor i64 %118, -1\n  %197 = add i64 %196, %194\n  %198 = and i64 %195, 7\n  %199 = icmp eq i64 %198, 0\n  br i1 %199, label %209, label %200\n\n200:                                              ; preds = %191, %200\n  %201 = phi i8* [ %204, %200 ], [ %192, %191 ]\n  %202 = phi i8* [ %206, %200 ], [ %193, %191 ]\n  %203 = phi i64 [ %207, %200 ], [ %198, %191 ]\n  %204 = getelementptr inbounds i8, i8* %201, i64 -1\n  %205 = load i8, i8* %204, align 1, !tbaa !11\n  store i8 %205, i8* %202, align 1, !tbaa !11\n  %206 = getelementptr inbounds i8, i8* %202, i64 1\n  %207 = add i64 %203, -1\n  %208 = icmp eq i64 %207, 0\n  br i1 %208, label %209, label %200, !llvm.loop !30\n\n209:                                              ; preds = %200, %191\n  %210 = phi i8* [ %192, %191 ], [ %204, %200 ]\n  %211 = phi i8* [ %193, %191 ], [ %206, %200 ]\n  %212 = icmp ult i64 %197, 7\n  br i1 %212, label %241, label %213\n\n213:                                              ; preds = %209, %213\n  %214 = phi i8* [ %237, %213 ], [ %210, %209 ]\n  %215 = phi i8* [ %239, %213 ], [ %211, %209 ]\n  %216 = getelementptr inbounds i8, i8* %214, i64 -1\n  %217 = load i8, i8* %216, align 1, !tbaa !11\n  store i8 %217, i8* %215, align 1, !tbaa !11\n  %218 = getelementptr inbounds i8, i8* %215, i64 1\n  %219 = getelementptr inbounds i8, i8* %214, i64 -2\n  %220 = load i8, i8* %219, align 1, !tbaa !11\n  store i8 %220, i8* %218, align 1, !tbaa !11\n  %221 = getelementptr inbounds i8, i8* %215, i64 2\n  %222 = getelementptr inbounds i8, i8* %214, i64 -3\n  %223 = load i8, i8* %222, align 1, !tbaa !11\n  store i8 %223, i8* %221, align 1, !tbaa !11\n  %224 = getelementptr inbounds i8, i8* %215, i64 3\n  %225 = getelementptr inbounds i8, i8* %214, i64 -4\n  %226 = load i8, i8* %225, align 1, !tbaa !11\n  store i8 %226, i8* %224, align 1, !tbaa !11\n  %227 = getelementptr inbounds i8, i8* %215, i64 4\n  %228 = getelementptr inbounds i8, i8* %214, i64 -5\n  %229 = load i8, i8* %228, align 1, !tbaa !11\n  store i8 %229, i8* %227, align 1, !tbaa !11\n  %230 = getelementptr inbounds i8, i8* %215, i64 5\n  %231 = getelementptr inbounds i8, i8* %214, i64 -6\n  %232 = load i8, i8* %231, align 1, !tbaa !11\n  store i8 %232, i8* %230, align 1, !tbaa !11\n  %233 = getelementptr inbounds i8, i8* %215, i64 6\n  %234 = getelementptr inbounds i8, i8* %214, i64 -7\n  %235 = load i8, i8* %234, align 1, !tbaa !11\n  store i8 %235, i8* %233, align 1, !tbaa !11\n  %236 = getelementptr inbounds i8, i8* %215, i64 7\n  %237 = getelementptr inbounds i8, i8* %214, i64 -8\n  %238 = load i8, i8* %237, align 1, !tbaa !11\n  store i8 %238, i8* %236, align 1, !tbaa !11\n  %239 = getelementptr inbounds i8, i8* %215, i64 8\n  %240 = icmp eq i8* %237, %117\n  br i1 %240, label %241, label %213, !llvm.loop !32\n\n241:                                              ; preds = %209, %213, %189, %164\n  %242 = load i64, i64* %3, align 8, !tbaa !16\n  %243 = load i8*, i8** %135, align 8, !tbaa !12\n  br label %260\n\n244:                                              ; preds = %124\n  %245 = landingpad { i8*, i32 }\n          cleanup\n  br label %269\n\n246:                                              ; preds = %29\n  %247 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 2\n  %248 = bitcast %\"class.std::__cxx11::basic_string\"* %0 to %union.anon**\n  store %union.anon* %247, %union.anon** %248, align 8, !tbaa !3\n  %249 = load i8*, i8** %11, align 8, !tbaa !12\n  %250 = icmp eq i8* %249, %10\n  br i1 %250, label %251, label %253\n\n251:                                              ; preds = %246\n  %252 = bitcast %union.anon* %247 to i8*\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(16) %252, i8* noundef nonnull align 8 dereferenceable(16) %10, i64 16, i1 false) #6\n  br label %257\n\n253:                                              ; preds = %246\n  %254 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 0, i32 0\n  store i8* %249, i8** %254, align 8, !tbaa !12\n  %255 = load i64, i64* %23, align 8, !tbaa !11\n  %256 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 2, i32 0\n  store i64 %255, i64* %256, align 8, !tbaa !11\n  br label %257\n\n257:                                              ; preds = %253, %251\n  %258 = load i64, i64* %12, align 8, !tbaa !8\n  %259 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 1\n  store i64 %258, i64* %259, align 8, !tbaa !8\n  store %union.anon* %8, %union.anon** %9, align 8, !tbaa !12\n  br label %268\n\n260:                                              ; preds = %130, %241\n  %261 = phi i8* [ %243, %241 ], [ %131, %130 ]\n  %262 = phi i64 [ %242, %241 ], [ 0, %130 ]\n  %263 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 1\n  store i64 %262, i64* %263, align 8, !tbaa !8\n  %264 = getelementptr inbounds i8, i8* %261, i64 %262\n  store i8 0, i8* %264, align 1, !tbaa !11\n  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %122) #6\n  %265 = load i8*, i8** %11, align 8, !tbaa !12\n  %266 = icmp eq i8* %265, %10\n  br i1 %266, label %268, label %267\n\n267:                                              ; preds = %260\n  call void @_ZdlPv(i8* %265) #6\n  br label %268\n\n268:                                              ; preds = %257, %260, %267\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %7) #6\n  ret void\n\n269:                                              ; preds = %244, %114\n  %270 = phi { i8*, i32 } [ %115, %114 ], [ %245, %244 ]\n  %271 = load i8*, i8** %11, align 8, !tbaa !12\n  %272 = icmp eq i8* %271, %10\n  br i1 %272, label %274, label %273\n\n273:                                              ; preds = %269\n  call void @_ZdlPv(i8* %271) #6\n  br label %274\n\n274:                                              ; preds = %273, %269\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %7) #6\n  resume { i8*, i32 } %270\n}\n\n; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn\ndeclare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1\n\ndeclare dso_local i32 @__gxx_personality_v0(...)\n\n; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn\ndeclare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1\n\n; Function Attrs: nobuiltin nounwind\ndeclare dso_local void @_ZdlPv(i8*) local_unnamed_addr #2\n\n; Function Attrs: argmemonly mustprogress nofree nounwind willreturn\ndeclare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #3\n\ndeclare dso_local i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32), i64* nonnull align 8 dereferenceable(8), i64) local_unnamed_addr #4\n\ndeclare dso_local nonnull align 8 dereferenceable(32) %\"class.std::__cxx11::basic_string\"* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEmmmc(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32), i64, i64, i64, i8 signext) local_unnamed_addr #4\n\n; Function Attrs: inaccessiblememonly nofree nosync nounwind willreturn\ndeclare void @llvm.experimental.noalias.scope.decl(metadata) #5\n\nattributes #0 = { uwtable \"frame-pointer\"=\"none\" \"min-legal-vector-width\"=\"0\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #1 = { argmemonly mustprogress nofree nosync nounwind willreturn }\nattributes #2 = { nobuiltin nounwind \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #3 = { argmemonly mustprogress nofree nounwind willreturn }\nattributes #4 = { \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #5 = { inaccessiblememonly nofree nosync nounwind willreturn }\nattributes #6 = { nounwind }\n\n!llvm.module.flags = !{!0, !1}\n!llvm.ident = !{!2}\n\n!0 = !{i32 1, !\"wchar_size\", i32 4}\n!1 = !{i32 7, !\"uwtable\", i32 1}\n!2 = !{!\"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)\"}\n!3 = !{!4, !5, i64 0}\n!4 = !{!\"_ZTSNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderE\", !5, i64 0}\n!5 = !{!\"any pointer\", !6, i64 0}\n!6 = !{!\"omnipotent char\", !7, i64 0}\n!7 = !{!\"Simple C++ TBAA\"}\n!8 = !{!9, !10, i64 8}\n!9 = !{!\"_ZTSNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE\", !4, i64 0, !10, i64 8, !6, i64 16}\n!10 = !{!\"long\", !6, i64 0}\n!11 = !{!6, !6, i64 0}\n!12 = !{!9, !5, i64 0}\n!13 = !{!14}\n!14 = distinct !{!14, !15, !\"_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_S5_: argument 0\"}\n!15 = distinct !{!15, !\"_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_S5_\"}\n!16 = !{!10, !10, i64 0}\n!17 = distinct !{!17, !18}\n!18 = !{!\"llvm.loop.mustprogress\"}\n!19 = !{!20}\n!20 = distinct !{!20, !21, !\"_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6rbeginEv: argument 0\"}\n!21 = distinct !{!21, !\"_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6rbeginEv\"}\n!22 = !{!23}\n!23 = distinct !{!23, !24}\n!24 = distinct !{!24, !\"LVerDomain\"}\n!25 = !{!26}\n!26 = distinct !{!26, !24}\n!27 = distinct !{!27, !18, !28}\n!28 = !{!\"llvm.loop.isvectorized\", i32 1}\n!29 = distinct !{!29, !18, !28}\n!30 = distinct !{!30, !31}\n!31 = !{!\"llvm.loop.unroll.disable\"}\n!32 = distinct !{!32, !18, !28}\n", "target": "This is the targeted source code:\n/*\nYou are given a string s.\nif s[i] is a letter, reverse its case from lower to upper or vise versa, \notherwise keep it as it is.\nIf the string contains no letters, reverse the string.\nThe function should return the resulted string.\nExamples\nsolve(\"1234\") = \"4321\"\nsolve(\"ab\") = \"AB\"\nsolve(\"#a@C\") = \"#A@c\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring solve(string s){\n\n    int nletter=0;\n    string out=\"\";\n    for (int i=0;i<s.length();i++)\n    {\n        char w=s[i];\n        if (w>=65 and w<=90) w=w+32;\n        else if (w>=97 and w<=122) w=w-32;\n        else nletter+=1;\n        out=out+w;\n    }\n    if (nletter==s.length())\n    {\n        string p(s.rbegin(),s.rend());\n        return p;\n    }\n    else return out;\n}\n"}
{"input": "Convert this to C++:\n; ModuleID = '../../Human_xBenchmarks_164/CPP_162/CPP_162.cpp'\nsource_filename = \"../../Human_xBenchmarks_164/CPP_162/CPP_162.cpp\"\ntarget datalayout = \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\ntarget triple = \"x86_64-unknown-linux-gnu\"\n\n%\"class.std::__cxx11::basic_string\" = type { %\"struct.std::__cxx11::basic_string<char>::_Alloc_hider\", i64, %union.anon }\n%\"struct.std::__cxx11::basic_string<char>::_Alloc_hider\" = type { i8* }\n%union.anon = type { i64, [8 x i8] }\n%struct.MD5state_st = type { i32, i32, i32, i32, i32, i32, [16 x i32], i32 }\n\n; Function Attrs: uwtable\ndefine dso_local void @_Z13string_to_md5NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE(%\"class.std::__cxx11::basic_string\"* noalias sret(%\"class.std::__cxx11::basic_string\") align 8 %0, %\"class.std::__cxx11::basic_string\"* nocapture readonly %1) local_unnamed_addr #0 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {\n  %3 = alloca i64, align 8\n  %4 = alloca i64, align 8\n  %5 = alloca [16 x i8], align 16\n  %6 = alloca %struct.MD5state_st, align 4\n  %7 = alloca %\"class.std::__cxx11::basic_string\", align 8\n  %8 = alloca %\"class.std::__cxx11::basic_string\", align 8\n  %9 = alloca %\"class.std::__cxx11::basic_string\", align 8\n  %10 = getelementptr inbounds [16 x i8], [16 x i8]* %5, i64 0, i64 0\n  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %10) #6\n  %11 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %1, i64 0, i32 1\n  %12 = load i64, i64* %11, align 8, !tbaa !3\n  %13 = icmp eq i64 %12, 0\n  br i1 %13, label %14, label %21\n\n14:                                               ; preds = %2\n  %15 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 2\n  %16 = bitcast %\"class.std::__cxx11::basic_string\"* %0 to %union.anon**\n  store %union.anon* %15, %union.anon** %16, align 8, !tbaa !10\n  %17 = bitcast %union.anon* %15 to i32*\n  store i32 1701736270, i32* %17, align 8\n  %18 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 1\n  store i64 4, i64* %18, align 8, !tbaa !3\n  %19 = bitcast %union.anon* %15 to i8*\n  %20 = getelementptr inbounds i8, i8* %19, i64 4\n  store i8 0, i8* %20, align 4, !tbaa !11\n  br label %214\n\n21:                                               ; preds = %2\n  %22 = bitcast %struct.MD5state_st* %6 to i8*\n  call void @llvm.lifetime.start.p0i8(i64 92, i8* nonnull %22) #6\n  %23 = call i32 @MD5_Init(%struct.MD5state_st* nonnull %6)\n  %24 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %1, i64 0, i32 0, i32 0\n  %25 = load i8*, i8** %24, align 8, !tbaa !12\n  %26 = load i64, i64* %11, align 8, !tbaa !3\n  %27 = call i32 @MD5_Update(%struct.MD5state_st* nonnull %6, i8* %25, i64 %26)\n  %28 = call i32 @MD5_Final(i8* nonnull %10, %struct.MD5state_st* nonnull %6)\n  %29 = bitcast %\"class.std::__cxx11::basic_string\"* %7 to i8*\n  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %29) #6\n  %30 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %7, i64 0, i32 2\n  %31 = bitcast %\"class.std::__cxx11::basic_string\"* %7 to %union.anon**\n  store %union.anon* %30, %union.anon** %31, align 8, !tbaa !10\n  %32 = bitcast %union.anon* %30 to i8*\n  %33 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %7, i64 0, i32 0, i32 0\n  %34 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %7, i64 0, i32 1\n  store i64 0, i64* %34, align 8, !tbaa !3\n  store i8 0, i8* %32, align 8, !tbaa !11\n  %35 = bitcast %\"class.std::__cxx11::basic_string\"* %8 to i8*\n  %36 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %8, i64 0, i32 2\n  %37 = bitcast %\"class.std::__cxx11::basic_string\"* %8 to %union.anon**\n  %38 = bitcast i64* %4 to i8*\n  %39 = bitcast %union.anon* %36 to i8*\n  %40 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %8, i64 0, i32 0, i32 0\n  %41 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %8, i64 0, i32 2, i32 0\n  %42 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %8, i64 0, i32 1\n  %43 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %7, i64 0, i32 2, i32 0\n  %44 = bitcast %\"class.std::__cxx11::basic_string\"* %9 to i8*\n  %45 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %9, i64 0, i32 2\n  %46 = bitcast %\"class.std::__cxx11::basic_string\"* %9 to %union.anon**\n  %47 = bitcast i64* %3 to i8*\n  %48 = bitcast %union.anon* %45 to i8*\n  %49 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %9, i64 0, i32 0, i32 0\n  %50 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %9, i64 0, i32 2, i32 0\n  %51 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %9, i64 0, i32 1\n  %52 = bitcast i64* %42 to <2 x i64>*\n  %53 = bitcast i64* %34 to <2 x i64>*\n  %54 = bitcast i64* %51 to <2 x i64>*\n  %55 = bitcast i64* %34 to <2 x i64>*\n  br label %70\n\n56:                                               ; preds = %198\n  %57 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 2\n  %58 = bitcast %\"class.std::__cxx11::basic_string\"* %0 to %union.anon**\n  store %union.anon* %57, %union.anon** %58, align 8, !tbaa !10\n  %59 = load i8*, i8** %33, align 8, !tbaa !12\n  %60 = icmp eq i8* %59, %32\n  br i1 %60, label %61, label %63\n\n61:                                               ; preds = %56\n  %62 = bitcast %union.anon* %57 to i8*\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(16) %62, i8* noundef nonnull align 8 dereferenceable(16) %32, i64 16, i1 false) #6\n  br label %67\n\n63:                                               ; preds = %56\n  %64 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 0, i32 0\n  store i8* %59, i8** %64, align 8, !tbaa !12\n  %65 = load i64, i64* %43, align 8, !tbaa !11\n  %66 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 2, i32 0\n  store i64 %65, i64* %66, align 8, !tbaa !11\n  br label %67\n\n67:                                               ; preds = %61, %63\n  %68 = load i64, i64* %34, align 8, !tbaa !3\n  %69 = getelementptr inbounds %\"class.std::__cxx11::basic_string\", %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 1\n  store i64 %68, i64* %69, align 8, !tbaa !3\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %29) #6\n  call void @llvm.lifetime.end.p0i8(i64 92, i8* nonnull %22) #6\n  br label %214\n\n70:                                               ; preds = %201, %21\n  %71 = phi i64 [ 0, %21 ], [ %203, %201 ]\n  %72 = phi i8* [ %32, %21 ], [ %202, %201 ]\n  %73 = phi i64 [ 0, %21 ], [ %199, %201 ]\n  %74 = getelementptr inbounds [16 x i8], [16 x i8]* %5, i64 0, i64 %73\n  %75 = load i8, i8* %74, align 1, !tbaa !11\n  %76 = icmp ult i8 %75, -96\n  %77 = lshr i8 %75, 4\n  %78 = or i8 %77, 48\n  %79 = add nuw nsw i8 %77, 87\n  %80 = select i1 %76, i8 %78, i8 %79\n  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %35) #6\n  call void @llvm.experimental.noalias.scope.decl(metadata !13)\n  store %union.anon* %36, %union.anon** %37, align 8, !tbaa !10, !alias.scope !13\n  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %38) #6, !noalias !13\n  store i64 %71, i64* %4, align 8, !tbaa !16, !noalias !13\n  %81 = icmp ugt i64 %71, 15\n  br i1 %81, label %82, label %86\n\n82:                                               ; preds = %70\n  %83 = invoke i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %8, i64* nonnull align 8 dereferenceable(8) %4, i64 0)\n          to label %84 unwind label %163\n\n84:                                               ; preds = %82\n  store i8* %83, i8** %40, align 8, !tbaa !12, !alias.scope !13\n  %85 = load i64, i64* %4, align 8, !tbaa !16, !noalias !13\n  store i64 %85, i64* %41, align 8, !tbaa !11, !alias.scope !13\n  br label %86\n\n86:                                               ; preds = %70, %84\n  %87 = phi i8* [ %83, %84 ], [ %39, %70 ]\n  switch i64 %71, label %90 [\n    i64 1, label %88\n    i64 0, label %91\n  ]\n\n88:                                               ; preds = %86\n  %89 = load i8, i8* %72, align 1, !tbaa !11\n  store i8 %89, i8* %87, align 1, !tbaa !11\n  br label %91\n\n90:                                               ; preds = %86\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %87, i8* align 1 %72, i64 %71, i1 false) #6\n  br label %91\n\n91:                                               ; preds = %90, %88, %86\n  %92 = load i64, i64* %4, align 8, !tbaa !16, !noalias !13\n  store i64 %92, i64* %42, align 8, !tbaa !3, !alias.scope !13\n  %93 = load i8*, i8** %40, align 8, !tbaa !12, !alias.scope !13\n  %94 = getelementptr inbounds i8, i8* %93, i64 %92\n  store i8 0, i8* %94, align 1, !tbaa !11\n  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %38) #6, !noalias !13\n  %95 = load i64, i64* %42, align 8, !tbaa !3, !alias.scope !13\n  %96 = invoke nonnull align 8 dereferenceable(32) %\"class.std::__cxx11::basic_string\"* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEmmmc(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %8, i64 %95, i64 0, i64 1, i8 signext %80)\n          to label %102 unwind label %97\n\n97:                                               ; preds = %91\n  %98 = landingpad { i8*, i32 }\n          cleanup\n  %99 = load i8*, i8** %40, align 8, !tbaa !12, !alias.scope !13\n  %100 = icmp eq i8* %99, %39\n  br i1 %100, label %165, label %101\n\n101:                                              ; preds = %97\n  call void @_ZdlPv(i8* %99) #6\n  br label %165\n\n102:                                              ; preds = %91\n  %103 = load i8*, i8** %40, align 8, !tbaa !12\n  %104 = icmp eq i8* %103, %39\n  br i1 %104, label %105, label %119\n\n105:                                              ; preds = %102\n  %106 = load i64, i64* %42, align 8, !tbaa !3\n  %107 = icmp eq i64 %106, 0\n  br i1 %107, label %114, label %108\n\n108:                                              ; preds = %105\n  %109 = load i8*, i8** %33, align 8, !tbaa !12\n  %110 = icmp eq i64 %106, 1\n  br i1 %110, label %111, label %113\n\n111:                                              ; preds = %108\n  %112 = load i8, i8* %39, align 8, !tbaa !11\n  store i8 %112, i8* %109, align 1, !tbaa !11\n  br label %114\n\n113:                                              ; preds = %108\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %109, i8* nonnull align 8 %39, i64 %106, i1 false) #6\n  br label %114\n\n114:                                              ; preds = %113, %111, %105\n  %115 = load i64, i64* %42, align 8, !tbaa !3\n  store i64 %115, i64* %34, align 8, !tbaa !3\n  %116 = load i8*, i8** %33, align 8, !tbaa !12\n  %117 = getelementptr inbounds i8, i8* %116, i64 %115\n  store i8 0, i8* %117, align 1, !tbaa !11\n  %118 = load i8*, i8** %40, align 8, !tbaa !12\n  br label %128\n\n119:                                              ; preds = %102\n  %120 = load i8*, i8** %33, align 8, !tbaa !12\n  %121 = icmp eq i8* %120, %32\n  %122 = load i64, i64* %43, align 8\n  store i8* %103, i8** %33, align 8, !tbaa !12\n  %123 = load <2 x i64>, <2 x i64>* %52, align 8, !tbaa !11\n  store <2 x i64> %123, <2 x i64>* %53, align 8, !tbaa !11\n  %124 = icmp eq i8* %120, null\n  %125 = or i1 %121, %124\n  br i1 %125, label %127, label %126\n\n126:                                              ; preds = %119\n  store i8* %120, i8** %40, align 8, !tbaa !12\n  store i64 %122, i64* %41, align 8, !tbaa !11\n  br label %128\n\n127:                                              ; preds = %119\n  store %union.anon* %36, %union.anon** %37, align 8, !tbaa !12\n  br label %128\n\n128:                                              ; preds = %114, %126, %127\n  %129 = phi i8* [ %120, %126 ], [ %39, %127 ], [ %118, %114 ]\n  store i64 0, i64* %42, align 8, !tbaa !3\n  store i8 0, i8* %129, align 1, !tbaa !11\n  %130 = load i8*, i8** %40, align 8, !tbaa !12\n  %131 = icmp eq i8* %130, %39\n  br i1 %131, label %133, label %132\n\n132:                                              ; preds = %128\n  call void @_ZdlPv(i8* %130) #6\n  br label %133\n\n133:                                              ; preds = %128, %132\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %35) #6\n  %134 = load i8, i8* %74, align 1, !tbaa !11\n  %135 = and i8 %134, 15\n  %136 = icmp ult i8 %135, 10\n  %137 = or i8 %135, 48\n  %138 = add nuw nsw i8 %135, 87\n  %139 = select i1 %136, i8 %137, i8 %138\n  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %44) #6\n  call void @llvm.experimental.noalias.scope.decl(metadata !17)\n  store %union.anon* %45, %union.anon** %46, align 8, !tbaa !10, !alias.scope !17\n  %140 = load i8*, i8** %33, align 8, !tbaa !12, !noalias !17\n  %141 = load i64, i64* %34, align 8, !tbaa !3, !noalias !17\n  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %47) #6, !noalias !17\n  store i64 %141, i64* %3, align 8, !tbaa !16, !noalias !17\n  %142 = icmp ugt i64 %141, 15\n  br i1 %142, label %143, label %147\n\n143:                                              ; preds = %133\n  %144 = invoke i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %9, i64* nonnull align 8 dereferenceable(8) %3, i64 0)\n          to label %145 unwind label %204\n\n145:                                              ; preds = %143\n  store i8* %144, i8** %49, align 8, !tbaa !12, !alias.scope !17\n  %146 = load i64, i64* %3, align 8, !tbaa !16, !noalias !17\n  store i64 %146, i64* %50, align 8, !tbaa !11, !alias.scope !17\n  br label %147\n\n147:                                              ; preds = %133, %145\n  %148 = phi i8* [ %144, %145 ], [ %48, %133 ]\n  switch i64 %141, label %151 [\n    i64 1, label %149\n    i64 0, label %152\n  ]\n\n149:                                              ; preds = %147\n  %150 = load i8, i8* %140, align 1, !tbaa !11\n  store i8 %150, i8* %148, align 1, !tbaa !11\n  br label %152\n\n151:                                              ; preds = %147\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %148, i8* align 1 %140, i64 %141, i1 false) #6\n  br label %152\n\n152:                                              ; preds = %151, %149, %147\n  %153 = load i64, i64* %3, align 8, !tbaa !16, !noalias !17\n  store i64 %153, i64* %51, align 8, !tbaa !3, !alias.scope !17\n  %154 = load i8*, i8** %49, align 8, !tbaa !12, !alias.scope !17\n  %155 = getelementptr inbounds i8, i8* %154, i64 %153\n  store i8 0, i8* %155, align 1, !tbaa !11\n  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %47) #6, !noalias !17\n  %156 = load i64, i64* %51, align 8, !tbaa !3, !alias.scope !17\n  %157 = invoke nonnull align 8 dereferenceable(32) %\"class.std::__cxx11::basic_string\"* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEmmmc(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32) %9, i64 %156, i64 0, i64 1, i8 signext %139)\n          to label %167 unwind label %158\n\n158:                                              ; preds = %152\n  %159 = landingpad { i8*, i32 }\n          cleanup\n  %160 = load i8*, i8** %49, align 8, !tbaa !12, !alias.scope !17\n  %161 = icmp eq i8* %160, %48\n  br i1 %161, label %206, label %162\n\n162:                                              ; preds = %158\n  call void @_ZdlPv(i8* %160) #6\n  br label %206\n\n163:                                              ; preds = %82\n  %164 = landingpad { i8*, i32 }\n          cleanup\n  br label %165\n\n165:                                              ; preds = %97, %101, %163\n  %166 = phi { i8*, i32 } [ %164, %163 ], [ %98, %101 ], [ %98, %97 ]\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %35) #6\n  br label %208\n\n167:                                              ; preds = %152\n  %168 = load i8*, i8** %49, align 8, !tbaa !12\n  %169 = icmp eq i8* %168, %48\n  br i1 %169, label %170, label %184\n\n170:                                              ; preds = %167\n  %171 = load i64, i64* %51, align 8, !tbaa !3\n  %172 = icmp eq i64 %171, 0\n  br i1 %172, label %179, label %173\n\n173:                                              ; preds = %170\n  %174 = load i8*, i8** %33, align 8, !tbaa !12\n  %175 = icmp eq i64 %171, 1\n  br i1 %175, label %176, label %178\n\n176:                                              ; preds = %173\n  %177 = load i8, i8* %48, align 8, !tbaa !11\n  store i8 %177, i8* %174, align 1, !tbaa !11\n  br label %179\n\n178:                                              ; preds = %173\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %174, i8* nonnull align 8 %48, i64 %171, i1 false) #6\n  br label %179\n\n179:                                              ; preds = %178, %176, %170\n  %180 = load i64, i64* %51, align 8, !tbaa !3\n  store i64 %180, i64* %34, align 8, !tbaa !3\n  %181 = load i8*, i8** %33, align 8, !tbaa !12\n  %182 = getelementptr inbounds i8, i8* %181, i64 %180\n  store i8 0, i8* %182, align 1, !tbaa !11\n  %183 = load i8*, i8** %49, align 8, !tbaa !12\n  br label %193\n\n184:                                              ; preds = %167\n  %185 = load i8*, i8** %33, align 8, !tbaa !12\n  %186 = icmp eq i8* %185, %32\n  %187 = load i64, i64* %43, align 8\n  store i8* %168, i8** %33, align 8, !tbaa !12\n  %188 = load <2 x i64>, <2 x i64>* %54, align 8, !tbaa !11\n  store <2 x i64> %188, <2 x i64>* %55, align 8, !tbaa !11\n  %189 = icmp eq i8* %185, null\n  %190 = or i1 %186, %189\n  br i1 %190, label %192, label %191\n\n191:                                              ; preds = %184\n  store i8* %185, i8** %49, align 8, !tbaa !12\n  store i64 %187, i64* %50, align 8, !tbaa !11\n  br label %193\n\n192:                                              ; preds = %184\n  store %union.anon* %45, %union.anon** %46, align 8, !tbaa !12\n  br label %193\n\n193:                                              ; preds = %179, %191, %192\n  %194 = phi i8* [ %185, %191 ], [ %48, %192 ], [ %183, %179 ]\n  store i64 0, i64* %51, align 8, !tbaa !3\n  store i8 0, i8* %194, align 1, !tbaa !11\n  %195 = load i8*, i8** %49, align 8, !tbaa !12\n  %196 = icmp eq i8* %195, %48\n  br i1 %196, label %198, label %197\n\n197:                                              ; preds = %193\n  call void @_ZdlPv(i8* %195) #6\n  br label %198\n\n198:                                              ; preds = %193, %197\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %44) #6\n  %199 = add nuw nsw i64 %73, 1\n  %200 = icmp eq i64 %199, 16\n  br i1 %200, label %56, label %201, !llvm.loop !20\n\n201:                                              ; preds = %198\n  %202 = load i8*, i8** %33, align 8, !tbaa !12, !noalias !13\n  %203 = load i64, i64* %34, align 8, !tbaa !3, !noalias !13\n  br label %70\n\n204:                                              ; preds = %143\n  %205 = landingpad { i8*, i32 }\n          cleanup\n  br label %206\n\n206:                                              ; preds = %158, %162, %204\n  %207 = phi { i8*, i32 } [ %205, %204 ], [ %159, %162 ], [ %159, %158 ]\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %44) #6\n  br label %208\n\n208:                                              ; preds = %206, %165\n  %209 = phi { i8*, i32 } [ %207, %206 ], [ %166, %165 ]\n  %210 = load i8*, i8** %33, align 8, !tbaa !12\n  %211 = icmp eq i8* %210, %32\n  br i1 %211, label %213, label %212\n\n212:                                              ; preds = %208\n  call void @_ZdlPv(i8* %210) #6\n  br label %213\n\n213:                                              ; preds = %212, %208\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %29) #6\n  call void @llvm.lifetime.end.p0i8(i64 92, i8* nonnull %22) #6\n  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %10) #6\n  resume { i8*, i32 } %209\n\n214:                                              ; preds = %67, %14\n  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %10) #6\n  ret void\n}\n\n; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn\ndeclare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1\n\ndeclare dso_local i32 @__gxx_personality_v0(...)\n\n; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn\ndeclare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1\n\ndeclare dso_local i32 @MD5_Init(%struct.MD5state_st*) local_unnamed_addr #2\n\ndeclare dso_local i32 @MD5_Update(%struct.MD5state_st*, i8*, i64) local_unnamed_addr #2\n\ndeclare dso_local i32 @MD5_Final(i8*, %struct.MD5state_st*) local_unnamed_addr #2\n\n; Function Attrs: nobuiltin nounwind\ndeclare dso_local void @_ZdlPv(i8*) local_unnamed_addr #3\n\n; Function Attrs: argmemonly mustprogress nofree nounwind willreturn\ndeclare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #4\n\ndeclare dso_local i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32), i64* nonnull align 8 dereferenceable(8), i64) local_unnamed_addr #2\n\ndeclare dso_local nonnull align 8 dereferenceable(32) %\"class.std::__cxx11::basic_string\"* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEmmmc(%\"class.std::__cxx11::basic_string\"* nonnull align 8 dereferenceable(32), i64, i64, i64, i8 signext) local_unnamed_addr #2\n\n; Function Attrs: inaccessiblememonly nofree nosync nounwind willreturn\ndeclare void @llvm.experimental.noalias.scope.decl(metadata) #5\n\nattributes #0 = { uwtable \"frame-pointer\"=\"none\" \"min-legal-vector-width\"=\"0\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #1 = { argmemonly mustprogress nofree nosync nounwind willreturn }\nattributes #2 = { \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #3 = { nobuiltin nounwind \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #4 = { argmemonly mustprogress nofree nounwind willreturn }\nattributes #5 = { inaccessiblememonly nofree nosync nounwind willreturn }\nattributes #6 = { nounwind }\n\n!llvm.module.flags = !{!0, !1}\n!llvm.ident = !{!2}\n\n!0 = !{i32 1, !\"wchar_size\", i32 4}\n!1 = !{i32 7, !\"uwtable\", i32 1}\n!2 = !{!\"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)\"}\n!3 = !{!4, !9, i64 8}\n!4 = !{!\"_ZTSNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE\", !5, i64 0, !9, i64 8, !7, i64 16}\n!5 = !{!\"_ZTSNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderE\", !6, i64 0}\n!6 = !{!\"any pointer\", !7, i64 0}\n!7 = !{!\"omnipotent char\", !8, i64 0}\n!8 = !{!\"Simple C++ TBAA\"}\n!9 = !{!\"long\", !7, i64 0}\n!10 = !{!5, !6, i64 0}\n!11 = !{!7, !7, i64 0}\n!12 = !{!4, !6, i64 0}\n!13 = !{!14}\n!14 = distinct !{!14, !15, !\"_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_S5_: argument 0\"}\n!15 = distinct !{!15, !\"_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_S5_\"}\n!16 = !{!9, !9, i64 0}\n!17 = !{!18}\n!18 = distinct !{!18, !19, !\"_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_S5_: argument 0\"}\n!19 = distinct !{!19, !\"_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_S5_\"}\n!20 = distinct !{!20, !21}\n!21 = !{!\"llvm.loop.mustprogress\"}\n", "target": "This is the targeted source code:\n/*\nGiven a string 'text\", return its md5 hash equivalent string.\nIf 'text\" is an empty string, return None.\n\n>>> string_to_md5(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\n*/\n#include<stdio.h>\n#include<string>\n#include<openssl/md5.h>\nusing namespace std;\nstring string_to_md5(string text){\n\n    unsigned char md[16];\n    if (text.length()==0) return \"None\";\n    MD5_CTX c;\n    int i;\n   MD5_Init(&c);\n   MD5_Update(&c, (unsigned char*)text.c_str(), text.length());\n    MD5_Final(md, &c);\n    string out_str=\"\";\n    for (int i=0;i<16;i++)\n        {\n            char w;\n            if (md[i]<160) w=48+md[i]/16;\n            else w=87+md[i]/16;\n            out_str=out_str+w;\n            if (md[i]%16<10) w=48+md[i]%16;\n            else w=87+md[i]%16;\n            out_str=out_str+w;\n        }\n    return out_str;\n}\n"}
{"input": "Convert this to C++:\n; ModuleID = '../../Human_xBenchmarks_164/CPP_163/CPP_163.cpp'\nsource_filename = \"../../Human_xBenchmarks_164/CPP_163/CPP_163.cpp\"\ntarget datalayout = \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\ntarget triple = \"x86_64-unknown-linux-gnu\"\n\n%\"class.std::vector\" = type { %\"struct.std::_Vector_base\" }\n%\"struct.std::_Vector_base\" = type { %\"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl\" }\n%\"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl\" = type { %\"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl_data\" }\n%\"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl_data\" = type { i32*, i32*, i32* }\n\n@.str = private unnamed_addr constant [26 x i8] c\"vector::_M_realloc_insert\\00\", align 1\n\n; Function Attrs: uwtable\ndefine dso_local void @_Z17generate_integersii(%\"class.std::vector\"* noalias nocapture sret(%\"class.std::vector\") align 8 %0, i32 %1, i32 %2) local_unnamed_addr #0 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {\n  %4 = icmp slt i32 %2, %1\n  %5 = select i1 %4, i32 %1, i32 %2\n  %6 = select i1 %4, i32 %2, i32 %1\n  %7 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0, i64 0, i32 0, i32 0, i32 0, i32 1\n  %8 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0, i64 0, i32 0, i32 0, i32 0, i32 2\n  %9 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0, i64 0, i32 0, i32 0, i32 0, i32 0\n  %10 = bitcast %\"class.std::vector\"* %0 to i8*\n  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(24) %10, i8 0, i64 24, i1 false)\n  br label %12\n\n11:                                               ; preds = %71\n  ret void\n\n12:                                               ; preds = %3, %71\n  %13 = phi i32* [ null, %3 ], [ %72, %71 ]\n  %14 = phi i32* [ null, %3 ], [ %73, %71 ]\n  %15 = phi i32* [ null, %3 ], [ %74, %71 ]\n  %16 = phi i32 [ %6, %3 ], [ %75, %71 ]\n  %17 = icmp slt i32 %16, 10\n  %18 = and i32 %16, 1\n  %19 = icmp eq i32 %18, 0\n  %20 = and i1 %17, %19\n  br i1 %20, label %21, label %71\n\n21:                                               ; preds = %12\n  %22 = icmp eq i32* %15, %14\n  br i1 %22, label %25, label %23\n\n23:                                               ; preds = %21\n  store i32 %16, i32* %15, align 4, !tbaa !3\n  %24 = getelementptr inbounds i32, i32* %15, i64 1\n  store i32* %24, i32** %7, align 8, !tbaa !7\n  br label %71\n\n25:                                               ; preds = %21\n  %26 = ptrtoint i32* %14 to i64\n  %27 = ptrtoint i32* %13 to i64\n  %28 = sub i64 %26, %27\n  %29 = ashr exact i64 %28, 2\n  %30 = icmp eq i64 %28, 9223372036854775804\n  br i1 %30, label %31, label %33\n\n31:                                               ; preds = %25\n  invoke void @_ZSt20__throw_length_errorPKc(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str, i64 0, i64 0)) #6\n          to label %32 unwind label %63\n\n32:                                               ; preds = %31\n  unreachable\n\n33:                                               ; preds = %25\n  %34 = icmp eq i64 %28, 0\n  %35 = select i1 %34, i64 1, i64 %29\n  %36 = add nsw i64 %35, %29\n  %37 = icmp ult i64 %36, %29\n  %38 = icmp ugt i64 %36, 2305843009213693951\n  %39 = or i1 %37, %38\n  %40 = select i1 %39, i64 2305843009213693951, i64 %36\n  %41 = icmp eq i64 %40, 0\n  br i1 %41, label %47, label %42\n\n42:                                               ; preds = %33\n  %43 = shl nuw nsw i64 %40, 2\n  %44 = invoke noalias nonnull i8* @_Znwm(i64 %43) #7\n          to label %45 unwind label %61\n\n45:                                               ; preds = %42\n  %46 = bitcast i8* %44 to i32*\n  br label %47\n\n47:                                               ; preds = %45, %33\n  %48 = phi i32* [ %46, %45 ], [ null, %33 ]\n  %49 = getelementptr inbounds i32, i32* %48, i64 %29\n  store i32 %16, i32* %49, align 4, !tbaa !3\n  %50 = icmp sgt i64 %28, 0\n  br i1 %50, label %51, label %54\n\n51:                                               ; preds = %47\n  %52 = bitcast i32* %48 to i8*\n  %53 = bitcast i32* %13 to i8*\n  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %52, i8* align 4 %53, i64 %28, i1 false) #8\n  br label %54\n\n54:                                               ; preds = %47, %51\n  %55 = getelementptr inbounds i32, i32* %49, i64 1\n  %56 = icmp eq i32* %13, null\n  br i1 %56, label %59, label %57\n\n57:                                               ; preds = %54\n  %58 = bitcast i32* %13 to i8*\n  tail call void @_ZdlPv(i8* nonnull %58) #8\n  br label %59\n\n59:                                               ; preds = %57, %54\n  store i32* %48, i32** %9, align 8, !tbaa !10\n  store i32* %55, i32** %7, align 8, !tbaa !7\n  %60 = getelementptr inbounds i32, i32* %48, i64 %40\n  store i32* %60, i32** %8, align 8, !tbaa !11\n  br label %71\n\n61:                                               ; preds = %42\n  %62 = landingpad { i8*, i32 }\n          cleanup\n  br label %65\n\n63:                                               ; preds = %31\n  %64 = landingpad { i8*, i32 }\n          cleanup\n  br label %65\n\n65:                                               ; preds = %63, %61\n  %66 = phi { i8*, i32 } [ %62, %61 ], [ %64, %63 ]\n  %67 = icmp eq i32* %13, null\n  br i1 %67, label %70, label %68\n\n68:                                               ; preds = %65\n  %69 = bitcast i32* %13 to i8*\n  tail call void @_ZdlPv(i8* nonnull %69) #8\n  br label %70\n\n70:                                               ; preds = %65, %68\n  resume { i8*, i32 } %66\n\n71:                                               ; preds = %59, %23, %12\n  %72 = phi i32* [ %48, %59 ], [ %13, %23 ], [ %13, %12 ]\n  %73 = phi i32* [ %60, %59 ], [ %14, %23 ], [ %14, %12 ]\n  %74 = phi i32* [ %55, %59 ], [ %24, %23 ], [ %15, %12 ]\n  %75 = add i32 %16, 1\n  %76 = icmp eq i32 %16, %5\n  br i1 %76, label %11, label %12, !llvm.loop !12\n}\n\n; Function Attrs: argmemonly mustprogress nofree nounwind willreturn writeonly\ndeclare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1\n\ndeclare dso_local i32 @__gxx_personality_v0(...)\n\n; Function Attrs: nobuiltin nounwind\ndeclare dso_local void @_ZdlPv(i8*) local_unnamed_addr #2\n\n; Function Attrs: noreturn\ndeclare dso_local void @_ZSt20__throw_length_errorPKc(i8*) local_unnamed_addr #3\n\n; Function Attrs: nobuiltin allocsize(0)\ndeclare dso_local nonnull i8* @_Znwm(i64) local_unnamed_addr #4\n\n; Function Attrs: argmemonly mustprogress nofree nounwind willreturn\ndeclare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #5\n\nattributes #0 = { uwtable \"frame-pointer\"=\"none\" \"min-legal-vector-width\"=\"0\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #1 = { argmemonly mustprogress nofree nounwind willreturn writeonly }\nattributes #2 = { nobuiltin nounwind \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #3 = { noreturn \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #4 = { nobuiltin allocsize(0) \"frame-pointer\"=\"none\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #5 = { argmemonly mustprogress nofree nounwind willreturn }\nattributes #6 = { noreturn }\nattributes #7 = { allocsize(0) }\nattributes #8 = { nounwind }\n\n!llvm.module.flags = !{!0, !1}\n!llvm.ident = !{!2}\n\n!0 = !{i32 1, !\"wchar_size\", i32 4}\n!1 = !{i32 7, !\"uwtable\", i32 1}\n!2 = !{!\"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)\"}\n!3 = !{!4, !4, i64 0}\n!4 = !{!\"int\", !5, i64 0}\n!5 = !{!\"omnipotent char\", !6, i64 0}\n!6 = !{!\"Simple C++ TBAA\"}\n!7 = !{!8, !9, i64 8}\n!8 = !{!\"_ZTSNSt12_Vector_baseIiSaIiEE17_Vector_impl_dataE\", !9, i64 0, !9, i64 8, !9, i64 16}\n!9 = !{!\"any pointer\", !5, i64 0}\n!10 = !{!8, !9, i64 0}\n!11 = !{!8, !9, i64 16}\n!12 = distinct !{!12, !13}\n!13 = !{!\"llvm.loop.mustprogress\"}\n", "target": "This is the targeted source code:\n/*\nGiven two positive integers a and b, return the even digits between a\nand b, in ascending order.\n\nFor example:\ngenerate_integers(2, 8) => {2, 4, 6, 8}\ngenerate_integers(8, 2) => {2, 4, 6, 8}\ngenerate_integers(10, 14) => {}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> generate_integers(int a,int b){\n\n    int m;\n    if (b<a)\n    {\n        m=a;a=b;b=m;\n    }\n\n    vector<int> out={};\n    for (int i=a;i<=b;i++)\n    if (i<10 and i%2==0) out.push_back(i);\n    return out;\n}\n"}
